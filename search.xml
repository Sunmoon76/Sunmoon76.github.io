<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java基础知识</title>
    <url>/2020/06/21/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<a id="more"></a>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/06/20/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>类与对象、封装、构造方法</title>
    <url>/2020/07/19/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E3%80%81%E5%B0%81%E8%A3%85%E3%80%81%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="一、面向对象思想"><a href="#一、面向对象思想" class="headerlink" title="一、面向对象思想"></a>一、面向对象思想</h2><h3 id="1-1面向对象思想概述"><a href="#1-1面向对象思想概述" class="headerlink" title="1.1面向对象思想概述"></a>1.1面向对象思想概述</h3><p>面向过程思想：强调过程（步骤）</p>
<ul>
<li>注重的是过程,必须清楚每一个步骤,按照步骤一步一步去实现</li>
</ul>
<p>面向对象思想：强调对象</p>
<ul>
<li>注重的是对象,无须清楚每一个步骤,只需要使用对象调用行为来完成需求</li>
</ul>
<a id="more"></a>

<h3 id="1-2类和对象以及它们的关系"><a href="#1-2类和对象以及它们的关系" class="headerlink" title="1.2类和对象以及它们的关系"></a>1.2类和对象以及它们的关系</h3><p>【想要有对象，必须先有类】</p>
<p>类：一群具有相同属性和行为的事物的统称</p>
<ul>
<li>例如：人类、动物</li>
</ul>
<p>对象：类中某一个具体的存在（实例）</p>
<p>类和对象的关系：类是对象的模板，对象是类的实体。</p>
<ul>
<li>对象是以模板创建出来的实体，是具体的。</li>
</ul>
<p>通俗的就是以类作为模板创建创建对象。</p>
<h2 id="二、类与对象的使用"><a href="#二、类与对象的使用" class="headerlink" title="二、类与对象的使用"></a>二、类与对象的使用</h2><h3 id="2-1-定义类"><a href="#2-1-定义类" class="headerlink" title="2.1 定义类"></a>2.1 定义类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//格式：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line">	<span class="comment">//属性（成员变量）</span></span><br><span class="line">    数据类型 变量名;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//行为（成员方法）</span></span><br><span class="line">    <span class="keyword">public</span> 返回值类型 方法名(形式参数)&#123;</span><br><span class="line">        方法体;</span><br><span class="line">        <span class="keyword">return</span> 返回数值;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">	<span class="comment">//成员变量</span></span><br><span class="line">	String name;</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//成员方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"汪汪汪。。。"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"狗吃骨头"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-2-对象的创建和使用"><a href="#2-2-对象的创建和使用" class="headerlink" title="2.2 对象的创建和使用"></a>2.2 对象的创建和使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">创建对象格式：</span><br><span class="line">	类名 对象名 = <span class="keyword">new</span> 类名();</span><br><span class="line">使用对象：</span><br><span class="line">    对象名.成员变量名</span><br><span class="line">    对象名.成员方法名()</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDog</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		Dog dog = <span class="keyword">new</span> Dog();</span><br><span class="line">        dog.name = <span class="string">"小白"</span>;</span><br><span class="line">        dog.age = <span class="number">2</span>;</span><br><span class="line">        dog.bark();</span><br><span class="line">        dog.eat();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-3-成员变量的默认值【-】"><a href="#2-3-成员变量的默认值【-】" class="headerlink" title="2.3 成员变量的默认值【*】"></a>2.3 成员变量的默认值【*】</h3><p>成员变量是有默认值的，和数据类型有关。</p>
<ul>
<li><p>整数类型    默认值【0】</p>
</li>
<li><p>小数类型    默认值【0.0】</p>
</li>
<li><p>字符类型    默认值 【’ ‘】引号里面有个空格</p>
</li>
<li><p>布尔类型    默认值false</p>
</li>
<li><p>引用类型    默认值null</p>
</li>
</ul>
<h2 id="三、类与对象的内存图"><a href="#三、类与对象的内存图" class="headerlink" title="三、类与对象的内存图"></a>三、类与对象的内存图</h2><h3 id="3-1-Java内存的五大区"><a href="#3-1-Java内存的五大区" class="headerlink" title="3.1 Java内存的五大区"></a>3.1 Java内存的五大区</h3><table>
<thead>
<tr>
<th align="center">区域名称</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">栈区</td>
<td align="left">运行方法以及保存方法中定义的变量</td>
</tr>
<tr>
<td align="center">堆区</td>
<td align="left">保存new出来的东西(对象)</td>
</tr>
<tr>
<td align="center">方法区</td>
<td align="left">保存字节码文件</td>
</tr>
<tr>
<td align="center">本地方法区</td>
<td align="left">和操作系统相关的</td>
</tr>
<tr>
<td align="center">寄存器区</td>
<td align="left">和CPU相关的</td>
</tr>
</tbody></table>
<h3 id="3-2-一个对象内存图"><a href="#3-2-一个对象内存图" class="headerlink" title="3.2 一个对象内存图"></a>3.2 一个对象内存图</h3><p>略…</p>
<h3 id="3-3-两个对象内存图"><a href="#3-3-两个对象内存图" class="headerlink" title="3.3 两个对象内存图"></a>3.3 两个对象内存图</h3><p>略…</p>
<h3 id="3-4-多个对象名指向同一个对象的内存图"><a href="#3-4-多个对象名指向同一个对象的内存图" class="headerlink" title="3.4 多个对象名指向同一个对象的内存图"></a>3.4 多个对象名指向同一个对象的内存图</h3><p>略…</p>
<h2 id="四、成员变量和局部变量区别【-】"><a href="#四、成员变量和局部变量区别【-】" class="headerlink" title="四、成员变量和局部变量区别【*】"></a>四、成员变量和局部变量区别【*】</h2><h3 id="4-1-什么是成员变量和局部变量"><a href="#4-1-什么是成员变量和局部变量" class="headerlink" title="4.1 什么是成员变量和局部变量"></a>4.1 什么是成员变量和局部变量</h3><p>什么是成员变量：</p>
<ul>
<li>定义在【类中方法外】</li>
</ul>
<p>什么是局部变量：</p>
<ul>
<li>定义在【类中方法内】</li>
</ul>
<h3 id="5-2-成员变量和局部变量的五大区别"><a href="#5-2-成员变量和局部变量的五大区别" class="headerlink" title="5.2 成员变量和局部变量的五大区别"></a>5.2 成员变量和局部变量的五大区别</h3><ol>
<li>定义位置不同：<ul>
<li>成员变量：类中方法外</li>
<li>局部变量：类中方法内</li>
</ul>
</li>
<li>默认值不同：<ul>
<li>成员变量：有默认值</li>
<li>局部变量：没有默认值</li>
</ul>
</li>
<li>有效范围(作用域)不同<ul>
<li>成员变量：在整个类都是有效的</li>
<li>局部变量：只在当前方法中有效</li>
</ul>
</li>
<li>内存位置不同：<ul>
<li>成员变量：跟随对象保存在堆中</li>
<li>局部变量：跟随方法的运行保存在栈中的</li>
</ul>
</li>
<li>生命周期不同(从出生到销毁)：<ul>
<li>成员变量：跟随对象的创建而出现，跟随对象的销毁而销毁</li>
<li>局部变量：跟随方法的执行而出现，跟随方法执行完毕而销毁</li>
</ul>
</li>
</ol>
<h2 id="五、封装【-】"><a href="#五、封装【-】" class="headerlink" title="五、封装【*】"></a>五、封装【*】</h2><p>面向对象语言中三大特性：封装、继承、多态。</p>
<h3 id="5-1-对封装的理解"><a href="#5-1-对封装的理解" class="headerlink" title="5.1 对封装的理解"></a>5.1 对封装的理解</h3><p>封装思想的介绍：隐藏细节，提供对外界的访问方式。</p>
<h3 id="5-2-为什么要封装"><a href="#5-2-为什么要封装" class="headerlink" title="5.2 为什么要封装"></a>5.2 为什么要封装</h3><p>好处：<br>       1. 提高代码的安全性。<br>       2. 提高代码的复用性。</p>
<h3 id="5-3-封装的原则和步骤【-】"><a href="#5-3-封装的原则和步骤【-】" class="headerlink" title="5.3 封装的原则和步骤【*】"></a>5.3 封装的原则和步骤【*】</h3><p>原则：</p>
<p>​    a. 隐藏需要封装的数据</p>
<p>​    b. 对外暴漏可以访问的方式</p>
<p>步骤：</p>
<p>​    a. 使用private修饰要封装的数据</p>
<p>​    b. 对封装的数据提供getter/setter方法</p>
<h3 id="5-4-封装的操作"><a href="#5-4-封装的操作" class="headerlink" title="5.4 封装的操作"></a>5.4 封装的操作</h3><p>private关键字：称为私有关键字</p>
<ul>
<li>当前类中的成员变量/成员方法，如果被private关键字修饰了，那么该变量或者方法只能在当前类的内部使用。</li>
</ul>
<p>【注意】类中所有的成员变量，并提供相应的getter/setter方法，这就是一个JavaBean。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-5-this关键字"><a href="#5-5-this关键字" class="headerlink" title="5.5 this关键字"></a>5.5 this关键字</h3><ul>
<li><p>this的作用：</p>
</li>
<li><p>this的内存原理(this的本质)：</p>
<ul>
<li>this代表一个对象，当前对象。成员方法是由那个对象调用的，那么该方法中的this就代表哪个对象。</li>
</ul>
</li>
</ul>
<h3 id="5-6-封装总结"><a href="#5-6-封装总结" class="headerlink" title="5.6 封装总结"></a>5.6 封装总结</h3><ol>
<li>封装：是面向对象三大特征置以（封装、继承、多态）</li>
<li>封装原则：<ul>
<li>将成员变量隐藏——private关键字</li>
<li>对外提供getter\setter方法</li>
</ul>
</li>
<li>封装好处：<ul>
<li>提高代码的安全性</li>
<li>提高了代码的复用性</li>
</ul>
</li>
</ol>
<h2 id="六、构造方法"><a href="#六、构造方法" class="headerlink" title="六、构造方法"></a>六、构造方法</h2><h3 id="6-1-构造方法介绍"><a href="#6-1-构造方法介绍" class="headerlink" title="6.1 构造方法介绍"></a>6.1 构造方法介绍</h3><h4 id="6-1-1-构造方法"><a href="#6-1-1-构造方法" class="headerlink" title="6.1.1 构造方法"></a>6.1.1 构造方法</h4><p>构造方法就是创建类的对象时调用的方法。</p>
<p>例如：创建对象猫时</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cat cat = <span class="keyword">new</span> Cat();	<span class="comment">//实际上Cat()就是在调用构造方法</span></span><br></pre></td></tr></table></figure>

<h4 id="6-1-2-构造方法格式："><a href="#6-1-2-构造方法格式：" class="headerlink" title="6.1.2 构造方法格式："></a>6.1.2 构造方法格式：</h4><ul>
<li>构造方法名必须和类名一模一样</li>
<li>构造方法是没有返回值的，连void也没有</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">//默认构造方法，不写时会自动分配一个</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"默认构造方法..."</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-1-3-构造方法的功能"><a href="#6-1-3-构造方法的功能" class="headerlink" title="6.1.3 构造方法的功能"></a>6.1.3 构造方法的功能</h4><p>给生成的对象成员变量赋默认值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span></span>&#123;</span><br><span class="line">	System.out.println(<span class="string">"默认构造方法..."</span>);</span><br><span class="line">    <span class="comment">//例如做了如下操作：</span></span><br><span class="line">    <span class="comment">//this.name = null;</span></span><br><span class="line">    <span class="comment">//this.age = 0;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-2-注意事项"><a href="#6-2-注意事项" class="headerlink" title="6.2 注意事项"></a>6.2 注意事项</h3><p>构造方法中的四点注意事项：</p>
<ol>
<li>如果一个类我们没有写构造方法，那么系统会自动生成一个无参构造，构造中会给成员变量赋默认值。</li>
<li>构造方法也是方法，所以可以重载，但是如果我们重载了任意一个构造，那么系统将不会再分配无参构造。</li>
<li>无论我们如何使用构造，无参构造建议直接写出来</li>
<li>无参构造和有参构造区别在于：无参构造给成员变量赋默认值，有参构造给成员变量赋指定值。</li>
</ol>
<h3 id="6-3-标准类定义"><a href="#6-3-标准类定义" class="headerlink" title="6.3 标准类定义"></a>6.3 标准类定义</h3><p>标准类JavaBean：</p>
<ul>
<li>所有成员变量都需要封装（private + get/set）</li>
<li>应该给标准类提供至少两个构造：无参构造+全参构造</li>
</ul>
<p>代码示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> score;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 无参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 全参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">double</span> score)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// get/set方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getScore</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScore</span><span class="params">(<span class="keyword">double</span> score)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="一-面向对象"><a href="#一-面向对象" class="headerlink" title="一.面向对象"></a>一.面向对象</h3><p>面向对象是一种编程思想，该编程思想是从面向过程演化过来的。<br>面向过程：在完成功能的时候，我们需要关注里面的每一个细节，里面每一个步骤都是由我们自己亲力亲为去实现的。<br>面向对象：在完成功能的时候，我们只关注结果，里面的步骤是别人帮我们完成。</p>
<p>面向对象好处：<br>     1. 可以将复杂的事情简单化<br>     2. 更加符合人类思考的习惯。<br>     3. 从执行者变成指挥者。</p>
<p>类和对象：<br>    类：用来描述现实事物，是抽象的。比如学生，人。<br>    对象：是类的具体体现，是具体的。比如小明同学，小强同学。</p>
<h3 id="二-类的定义和使用"><a href="#二-类的定义和使用" class="headerlink" title="二. 类的定义和使用"></a>二. 类的定义和使用</h3><p>定义格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名 </span>&#123;</span><br><span class="line">	<span class="comment">//成员变量</span></span><br><span class="line">	<span class="comment">//成员方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用格式：</p>
<ol>
<li><p>导包【省略】<br>  如果两个类在同一个包下，不需要导包的</p>
</li>
<li><p>创建对象<br>  数据类型 对象名 = new 数据类型(…);</p>
</li>
<li><p>使用成员</p>
<p>  对象名.属性名<br>对象名.方法名(..);</p>
</li>
</ol>
<h3 id="三-局部变量和成员变量的区别"><a href="#三-局部变量和成员变量的区别" class="headerlink" title="三. 局部变量和成员变量的区别"></a>三. 局部变量和成员变量的区别</h3><p>定义位置不同：<br>        局部变量：在方法中定义。<br>        成员变量：在类中方法外定义。</p>
<p>使用范围不同：<br>    局部变量：只能在自己的作用域【里自己最近的一个大括号】内使用。<br>    成员变量：可以在整个类中使用</p>
<p>内存位置不同：<br>    局部变量： 跟随方法在栈内存中开辟<br>    成员变量： 跟随对象保存在堆内存中。</p>
<p>初始值不同：<br>    局部变量： 没有默认值，使用之前必须要赋值<br>    成员变量： 有默认值。 整数是0，小数是0.0，字符是’ ‘，布尔是false，引用类型是null</p>
<p>生命周期不同：<br>    局部变量： 在方法执行到定义变量这行代码的时候产生，一旦离开自己的作用域，局部变量就会消失<br>    成员变量： 跟随对象的产生而产生，随着对象的消失而消失。</p>
<h3 id="四-封装"><a href="#四-封装" class="headerlink" title="四. 封装"></a>四. 封装</h3><p>概念：隐藏具体的实现，提供对外的访问方式。<br>在代码中的体现：将属性私有，提供get和set方法。</p>
<h3 id="五-private"><a href="#五-private" class="headerlink" title="五. private"></a>五. private</h3><p>private是一个权限修饰符，表示私有。<br>private可以修饰成员变量和成员方法。<br>private修饰成员只能在本类中使用。</p>
<p><strong>注意：如果将属性私有，我们还要提供get和set方法让外界使用属性。</strong></p>
<h3 id="六-this关键字"><a href="#六-this关键字" class="headerlink" title="六. this关键字"></a>六. this关键字</h3><p>​    this可以解决的问题：可以区分同名的成员变量和局部变量。<br>​    this含义：表示调用者对象，this所在的方法是通过哪个对象调用的，this表示的就是哪个对象。</p>
<h3 id="七-构造方法"><a href="#七-构造方法" class="headerlink" title="七. 构造方法"></a>七. 构造方法</h3><p>作用：一般会使用构造方法在创建对象时给属性赋值。<br>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> 构造方法名(参数列表) &#123;</span><br><span class="line">    构造方法体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ol>
<li>如果在一个类中我们没有提供构造方法，那么系统会自动给我们提供一个空参数的构造方法。</li>
<li>如果在一个类中我们提供了构造方法，那么系统就不会给我们提供这个空参数的构造方法。</li>
<li>构造方法支持重载。</li>
</ol>
<h3 id="八-JavaBean制作【最终目标】"><a href="#八-JavaBean制作【最终目标】" class="headerlink" title="八. JavaBean制作【最终目标】"></a>八. JavaBean制作【最终目标】</h3><p>JavaBean就是定义类的规范</p>
<ol>
<li>将属性私有</li>
<li>提供get和set方法</li>
<li>提供空参数【必需提供】的构造方法和有参数【选择性提供】的构造方法</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>学习</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>String和StringBuilder</title>
    <url>/2020/07/20/String%E5%92%8CStringBuilder/</url>
    <content><![CDATA[<h2 id="一、String类"><a href="#一、String类" class="headerlink" title="一、String类"></a>一、String类</h2><h3 id="1-1-String概述"><a href="#1-1-String概述" class="headerlink" title="1.1 String概述"></a>1.1 String概述</h3><p><code>String</code>类代表字符串。  Java程序中的所有字符串文字（例如<code>&quot;abc&quot;</code> ）都被实现为此类的实例。</p>
<p>字符串是由一串数据组成，本质就是一个字符数组</p>
<p>【扩展】: 在<code>JDk 8</code>以及之前的版本，字符串本质是一个<code>char</code>数组。在<code>JDk 9</code>以及之后的版本，字符串本质是一个<code>byte</code>数组。</p>
<p>字符串不变; 它们的值在创建后不能被更改。 字符串缓冲区支持可变字符串。  因为String对象是不可变的，它们可以被共享。</p>
<p>String所在的包在<code>java,lang</code>包，<code>java.lang</code>包下的东西都是非常常用的，所以Java中有一个优化。<code>java.lang</code>包下的东西在使用时不需要导包。</p>
<a id="more"></a>

<h3 id="1-2-创建字符串对象"><a href="#1-2-创建字符串对象" class="headerlink" title="1.2 创建字符串对象"></a>1.2 创建字符串对象</h3><p><code>String()</code> : 空参数的构造方法，使用该构造方法创建传来的字符串里面没有任何内容。</p>
<p><code>String(String original)</code> : 参数需要传递一个字符串，根据一个字符串创建字符串对象。</p>
<p><code>String(char[] value)</code> : 根据字符数组创建字符串对象。</p>
<p><code>String(char[] value, int offset, int count)</code> : 根据字符数组的一部分创建字符串。参数offset表示从字符数组的哪个索引位置开始，count表示多少个字符。</p>
<p><code>String(byte[] bytes)</code> : 根据字节数组的内容创建字符串对象。</p>
<p><code>String(byte[] bytes, int offset, int length)</code> : 将byte数组的一部分转成字符串。参数offset表示从数组的哪个索引位置开始，length表示转多少个字符。</p>
<p><code>直接赋值创建字符串对象。</code></p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01String</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//空参</span></span><br><span class="line">        String s1 = <span class="keyword">new</span> String();</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">		</span><br><span class="line">        String s2 = <span class="keyword">new</span> String(<span class="string">"Hello"</span>);</span><br><span class="line">        System.out.println(s2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] cArr = &#123;<span class="string">'h'</span>,<span class="string">'e'</span>,<span class="string">'l'</span>,<span class="string">'l'</span>,<span class="string">'o'</span>&#125;;</span><br><span class="line">        String s3 = <span class="keyword">new</span> String(cArr);</span><br><span class="line">        System.out.println(s3);</span><br><span class="line"></span><br><span class="line">        String s4 = <span class="keyword">new</span> String(cArr,<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">        System.out.println(s4);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bArr = &#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>,<span class="number">100</span>,<span class="number">101</span>&#125;;</span><br><span class="line">        String s5 = <span class="keyword">new</span> String(bArr);</span><br><span class="line">        System.out.println(s5);</span><br><span class="line"></span><br><span class="line">        String s6 = <span class="keyword">new</span> String(bArr,<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">        System.out.println(s6);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//直接赋值——最常用</span></span><br><span class="line">        String s7 = <span class="string">"hello"</span>;</span><br><span class="line">        System.out.println(s7);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-new的方式创建对象和直接赋值的方式创建对象的区别"><a href="#1-3-new的方式创建对象和直接赋值的方式创建对象的区别" class="headerlink" title="1.3 new的方式创建对象和直接赋值的方式创建对象的区别"></a>1.3 new的方式创建对象和直接赋值的方式创建对象的区别</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 字符串new的方式创建对象和直接赋值的方式创建对象的区别</span></span><br><span class="line"><span class="comment"> * 	==比较基本类型和引用类型的区别:</span></span><br><span class="line"><span class="comment"> * 		i.如果==比较基本类型，比较的是值</span></span><br><span class="line"><span class="comment"> * 		ii.如果==比较引用类型，比较的是地址值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03String</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s1 = <span class="keyword">new</span> String(<span class="string">"hello"</span>);</span><br><span class="line">        String s2 = <span class="string">"hello"</span>;</span><br><span class="line">        System.out.println(s1 == s2);<span class="comment">//false</span></span><br><span class="line">        String s3 = <span class="string">"hello"</span>;</span><br><span class="line">        System.out.println(s1 == s3);<span class="comment">//false</span></span><br><span class="line">        System.out.println(s2 == s3);<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>字符串是常量，会保存到常量池中。</strong></p>
<p><strong>只有使用双引号直接写出来的字符串才是常量。</strong></p>
<p>常量池扩展：</p>
<ul>
<li>在<code>JDK6</code>以及之前的版本，常量池在方法区</li>
<li>在<code>JDk7</code>的时候，常量池在堆内存</li>
<li>在<code>JDK8</code>的时间，常量池在元空间【方法区】</li>
</ul>
<p>字符串常量是可以复用的，当我们使用到一个字符串常量是，会先看一下常量池中有没有这个东西，如果有，就直接使用常量池中的，如果没有，就创建一个该字符串常量存放到常量池中。</p>
<p><strong>【结论】new的方式创建字符串，会先由栈指向堆，再有堆指向常量池。直接复制的方式是由栈直接指向常量池。</strong></p>
<h3 id="1-4-字符串常用方法"><a href="#1-4-字符串常用方法" class="headerlink" title="1.4 字符串常用方法"></a>1.4 字符串常用方法</h3><h4 id="1-4-1-判断方法"><a href="#1-4-1-判断方法" class="headerlink" title="1.4.1 判断方法"></a>1.4.1 判断方法</h4><p><code>boolean equals(Object anObject)</code>：比较两个字符串的内容是否相同。参数如果是Object，可以传递任何数据，包括字符串。</p>
<p><code>boolean equalsIgnoreCase(String anotherString)</code> ：比较两个字符串的内容是否相同，忽略大小写。</p>
<p><code>boolean contains(CharSequence s)</code>  ：判断字符串中是否包含指定的字符串。</p>
<p><code>boolean startsWith(String prefix)</code> ：判断字符串是否以指定的内容开头。</p>
<p><code>boolean endsWith(String suffix)</code>：判断字符串是否以指定的内容结尾。</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04String</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        String s1 = <span class="string">"hello"</span>;</span><br><span class="line">        String s2 = <span class="keyword">new</span> String(<span class="string">"hello"</span>);</span><br><span class="line">        String s3 = <span class="string">"HeLlo"</span>;</span><br><span class="line">        System.out.println(s1.equals(s2));<span class="comment">//true</span></span><br><span class="line">        System.out.println(s1.equals(s3));<span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">"==================="</span>);</span><br><span class="line">        System.out.println(s1.equalsIgnoreCase(s3));<span class="comment">//true</span></span><br><span class="line">        System.out.println(s1.equalsIgnoreCase(s2));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">"===================="</span>);</span><br><span class="line">        String str = <span class="string">"helloworld"</span>;</span><br><span class="line">        System.out.println(str.contains(<span class="string">"nihao"</span>));<span class="comment">//false</span></span><br><span class="line">        System.out.println(str.contains(<span class="string">"owo"</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">"===================="</span>);</span><br><span class="line">        System.out.println(str.startsWith(<span class="string">"abc"</span>));<span class="comment">//false</span></span><br><span class="line">        System.out.println(str.startsWith(<span class="string">"he"</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">"===================="</span>);</span><br><span class="line">        System.out.println(str.endsWith(<span class="string">"aa"</span>));<span class="comment">//false</span></span><br><span class="line">        System.out.println(str.endsWith(<span class="string">"ld"</span>));<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-4-2-获取方法"><a href="#1-4-2-获取方法" class="headerlink" title="1.4.2 获取方法"></a>1.4.2 获取方法</h4><p><code>int length()</code>  ：返回此字符串的长度。 </p>
<p><code>String concat(String str)</code> ：将指定的字符串连接到该字符串的末尾。 返回拼接后的字符串。</p>
<p><code>char charAt(int index)</code>：获取指定索引位置的字符，并返回。</p>
<p><code>int indexOf(String str)</code>  : 查找某个字符串第一次出现的索引。如果没有找到，返回-1。</p>
<p><code>int lastIndexOf(String str)</code> : 查找某个字符串最后一次出现的索引，如果没有找到，返回-1。</p>
<p><code>String substring(int beginIndex)</code> ：截取字符串，从<code>beginIndex</code>开始，一直到末尾，返回截取后的字符串。 </p>
<p><code>String substring(int beginIndex, int endIndex)</code>：截取字符串从<code>beginIndex</code>开始，<code>endIndex</code>结束， 包含头，不包含尾，返回截取后的字符串。 </p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05String</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String s1 = <span class="string">"Hello"</span>;</span><br><span class="line">        <span class="keyword">int</span> len = s1.length();</span><br><span class="line">        System.out.println(<span class="string">"字符串长度:"</span> + len);</span><br><span class="line"></span><br><span class="line">        String s2 = <span class="string">"World"</span>;</span><br><span class="line">        String str = s1.concat(s2);</span><br><span class="line">        System.out.println(<span class="string">"拼接后的字符串:"</span> + str);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> ch = str.charAt(<span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">"字符串索引为5位置的字符是："</span> + ch);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> index = str.indexOf(<span class="string">"oWo"</span>);</span><br><span class="line">        System.out.println(<span class="string">"字符串oWo在str中第一次出现的索引为："</span> + index);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> lastIndex = str.lastIndexOf(<span class="string">"ld"</span>);</span><br><span class="line">        System.out.println(<span class="string">"字符串ld在st中最后一次穿线的索引为:"</span> + lastIndex);</span><br><span class="line"></span><br><span class="line">        String subStr = str.substring(<span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">"在字符串str索引为5开始截取一直到末尾，截取后的字符串为："</span> + subStr);</span><br><span class="line"></span><br><span class="line">        String subStr1 = str.substring(<span class="number">2</span>, <span class="number">6</span>);</span><br><span class="line">        System.out.println(<span class="string">"在字符串str索引2开始一直截取到索引为6，包含2不包含6，返回后的字符串为："</span> + subStr1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">控制台输出：</span><br><span class="line">    字符串长度:<span class="number">5</span></span><br><span class="line">    拼接后的字符串:HelloWorld</span><br><span class="line">    字符串索引为<span class="number">5</span>位置的字符是：W</span><br><span class="line">    字符串oWo在str中第一次出现的索引为：<span class="number">4</span></span><br><span class="line">    字符串ld在st中最后一次穿线的索引为:<span class="number">8</span></span><br><span class="line">    在字符串str索引为<span class="number">5</span>开始截取一直到末尾，截取后的字符串为：World</span><br><span class="line">    在字符串str索引<span class="number">2</span>开始一直截取到索引为<span class="number">6</span>，包含<span class="number">2</span>不包含<span class="number">6</span>，返回后的字符串为：lloW</span><br></pre></td></tr></table></figure>



<h4 id="1-4-3-转换方法"><a href="#1-4-3-转换方法" class="headerlink" title="1.4.3 转换方法"></a>1.4.3 转换方法</h4><p><code>char[] toCharArray()</code> ：将此字符串转换为新的字符数组。 </p>
<p><code>byte[] getBytes()</code>  ：将字符串转成字节数组并返回。</p>
<p><code>String toLowerCase()</code>  ：将字符串全部转成小写并返回转换后新的字符串。</p>
<p><code>String toUpperCase()</code> ：将字符串全部转成大写并返回转换后新的字符串。</p>
<p><code>String replace(String oldChar, String newChar)</code>  ：替换字符串，使用<code>newStr</code>替换掉<code>oldStr</code>，并返回替换后的字符串。</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06String</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String str = <span class="string">"Hello,World"</span>;</span><br><span class="line">        <span class="keyword">char</span>[] strArr = str.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strArr.length; i++) &#123;</span><br><span class="line">            System.out.print(strArr[i]+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">"=========================="</span>);</span><br><span class="line">        String s1 = <span class="string">"abcde"</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = s1.getBytes();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bytes.length; i++) &#123;</span><br><span class="line">            System.out.print(bytes[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">"=========================="</span>);</span><br><span class="line">        String lowerStr = str.toLowerCase();</span><br><span class="line">        System.out.println(lowerStr);</span><br><span class="line">        System.out.println(<span class="string">"=========================="</span>);</span><br><span class="line">        String upperStr = str.toUpperCase();</span><br><span class="line">        System.out.println(upperStr);</span><br><span class="line">        System.out.println(<span class="string">"=========================="</span>);</span><br><span class="line">        String newStr = str.replace(<span class="string">"Hello,"</span>, <span class="string">"hello"</span>);</span><br><span class="line">        System.out.println(newStr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="1-4-4-分割方法"><a href="#1-4-4-分割方法" class="headerlink" title="1.4.4 分割方法"></a>1.4.4 分割方法</h4><p><code>String[] split(String regex)</code>  ：根据指定字符串进行切割，切割之后的内容会方法字符串数组中返回。</p>
<p><code>String trim()</code>  ：去除字符串两边的空格。</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo07String</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        String str  = <span class="string">"hello,world,java"</span>;</span><br><span class="line">        String[] strs = str.split(<span class="string">","</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strs.length; i++) &#123;</span><br><span class="line">            System.out.println(strs[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"===================="</span>);</span><br><span class="line">        String s1 = <span class="string">"   hello   world      "</span>;</span><br><span class="line">        String newStr = s1.trim();</span><br><span class="line">        System.out.println(newStr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-5-String练习"><a href="#1-5-String练习" class="headerlink" title="1.5 String练习"></a>1.5 String练习</h3><p><strong>需求：统计字符个数，键盘录入一个字符串，统计字符串中大小写字母及数字字符个数。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo08StringTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入大小写字母以及数字："</span>);</span><br><span class="line">        String str = sc.next();</span><br><span class="line">        <span class="keyword">int</span> lower = countLower(str);</span><br><span class="line">        <span class="keyword">int</span> upper = countUpper(str);</span><br><span class="line">        <span class="keyword">int</span> num = countNum(str);</span><br><span class="line">        System.out.println(<span class="string">"小写字母个数为："</span> + lower);</span><br><span class="line">        System.out.println(<span class="string">"大写字母个数为："</span> + upper);</span><br><span class="line">        System.out.println(<span class="string">"数字字符个数为："</span> + num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统计字符串中数字个数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">countNum</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str.charAt(i)&gt;=<span class="string">'0'</span> &amp;&amp; str.charAt(i)&lt;=<span class="string">'9'</span>)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统计字符串中大写字母个数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">countUpper</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str.charAt(i)&gt;=<span class="string">'A'</span> &amp;&amp; str.charAt(i)&lt;=<span class="string">'Z'</span>)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统计字符串中小写字母个数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">countLower</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str.charAt(i)&gt;=<span class="string">'a'</span> &amp;&amp; str.charAt(i)&lt;=<span class="string">'z'</span>)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">请输入大小写字母以及数字：</span><br><span class="line">ASDASDsdasdaddASJDBJ8734876#&amp;^$*&amp;#$^*&amp;%123asdASDASD</span><br><span class="line">小写字母个数为：<span class="number">11</span></span><br><span class="line">大写字母个数为：<span class="number">18</span></span><br><span class="line">数字字符个数为：<span class="number">10</span></span><br></pre></td></tr></table></figure>



<h2 id="二、StringBuilder类"><a href="#二、StringBuilder类" class="headerlink" title="二、StringBuilder类"></a>二、StringBuilder类</h2><h3 id="2-1-StringBuilder概述"><a href="#2-1-StringBuilder概述" class="headerlink" title="2.1 StringBuilder概述"></a>2.1 StringBuilder概述</h3><p>StringBuilder 是一个可变的字符序列，我们可以把它看成可变的字符串。</p>
<p>StringBuilder也是由字符组成的数据，本质也是字符数组，内部也是使用字符数组保存数据</p>
<h3 id="2-2-StringBuilder和String区别"><a href="#2-2-StringBuilder和String区别" class="headerlink" title="2.2 StringBuilder和String区别"></a>2.2 StringBuilder和String区别</h3><p>String：内容不可改变。</p>
<p>StringBuilder：内容可以改变。</p>
<p>String：字符串具有不变性，创建之后不能被改编，如果我们使用字符串进行拼接，每次都会创建型的字符串这样既耗时，又浪费空间。</p>
<p>StringBuilder：可以看成可变的字符串，如果使用StringBuilder进行拼接，效率会高一些。</p>
<h3 id="2-3-StringBuilder构造方法"><a href="#2-3-StringBuilder构造方法" class="headerlink" title="2.3 StringBuilder构造方法"></a>2.3 StringBuilder构造方法</h3><p><code>StringBuilder()</code>：使用该构造方法创建的StringBuilder对象里面没有任何内容。</p>
<p><code>StringBuilder(String str)</code> : 根据字符串的内容创建StringBuilder对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02StringBuilder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        System.out.println(<span class="string">"sb:"</span> + sb);</span><br><span class="line"></span><br><span class="line">        StringBuilder newSb = <span class="keyword">new</span> StringBuilder(<span class="string">"hello"</span>);</span><br><span class="line">        System.out.println(<span class="string">"newSb:"</span> + newSb);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：StringBuilder是一个特殊的引用类型，如果直接输出对象名，输出的是对象的内容。</strong></p>
<h3 id="2-4-StringBuilder常用方法"><a href="#2-4-StringBuilder常用方法" class="headerlink" title="2.4 StringBuilder常用方法"></a>2.4 StringBuilder常用方法</h3><p><code>StringBuilder append(任何类型)</code>：拼接(追加，添加)数据 。返回值是调用者对象本身。</p>
<p><code>StringBuilder reverse()</code>  ：对StringBuilder进行反转。返回值是调用者本身。</p>
<p><code>String toString()</code> ：将StringBuilder转成字符串并返回。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03StringBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="comment">// System.out.println("sb:" + sb);</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// StringBuilder newSb = sb.append("hello");</span></span><br><span class="line">        <span class="comment">// System.out.println("sb:" + sb);</span></span><br><span class="line">        <span class="comment">// System.out.println("newSb:" + newSb);</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// System.out.println(sb == newSb);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//链式编程</span></span><br><span class="line">        sb.append(<span class="string">"hello"</span>).append(<span class="string">"world"</span>).append(<span class="string">"java"</span>);</span><br><span class="line">        System.out.println(<span class="string">"sb:"</span> + sb); <span class="comment">//helloworldjava</span></span><br><span class="line"></span><br><span class="line">        sb.reverse();</span><br><span class="line">        System.out.println(<span class="string">"sb:"</span> + sb); <span class="comment">//avajdlrowolleh</span></span><br><span class="line"></span><br><span class="line">        String s = sb.reverse().toString();</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-5-String和StringBuilder相互转换"><a href="#2-5-String和StringBuilder相互转换" class="headerlink" title="2.5 String和StringBuilder相互转换"></a>2.5 String和StringBuilder相互转换</h3><p>StringBuilder —&gt; String : 调用toString()方法即可</p>
<p>String —&gt; StringBuilder : 通过StringBuilder的构造方法根据String创建StringBuilder对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04StringBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(<span class="string">"hello"</span>);</span><br><span class="line">        System.out.println(<span class="string">"sb:"</span> + sb);</span><br><span class="line"></span><br><span class="line">        String s = sb.toString();</span><br><span class="line">        System.out.println(<span class="string">"s:"</span> + s);</span><br><span class="line"></span><br><span class="line">        String str = <span class="string">"World"</span>;</span><br><span class="line">        StringBuilder sb1 = <span class="keyword">new</span> StringBuilder(str);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"str:"</span> + str);</span><br><span class="line">        System.out.println(<span class="string">"sb1"</span> + sb1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-6-练习——字符串拼接"><a href="#2-6-练习——字符串拼接" class="headerlink" title="2.6 练习——字符串拼接"></a>2.6 练习——字符串拼接</h3><p><strong>需求：定义一个方法，把 int 数组中的数据按照指定的格式拼接成一个字符串返回，调用该方法，并在控制台输出结果。例如，数组为int[] arr = {1,2,3}; ，执行方法后的输出结果为：[1, 2, 3]</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04StringBuilderTset</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        String str = arrayToString(nums);</span><br><span class="line">        System.out.println(<span class="string">"拼接后的字符串："</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">arrayToString</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(<span class="string">"["</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i&lt;nums.length-<span class="number">1</span>) &#123;</span><br><span class="line">                sb.append(nums[i] + <span class="string">","</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(<span class="string">"]"</span>);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>使用<code>next()</code>读取输入时遇到空格时自动截断字符串，看不到后面输入内容，<code>nextLine()</code>则不然。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test03</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String[] ss = &#123;<span class="string">"笨蛋"</span>,<span class="string">"尼玛"</span>,<span class="string">"傻瓜"</span>&#125;;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入一个字符串："</span>);</span><br><span class="line">        <span class="comment">//String str = sc.next();</span></span><br><span class="line">        String str = sc.nextLine();</span><br><span class="line">        String strFilter = filter(str,ss);</span><br><span class="line">        System.out.println(<span class="string">"过滤后的字符串为："</span> + strFilter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">filter</span><span class="params">(String str , String[] strings)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strings.length; i++) &#123;</span><br><span class="line">            str = str.replace(strings[i],<span class="string">"**"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="next-和nextLine-区别小结"><a href="#next-和nextLine-区别小结" class="headerlink" title="next()和nextLine()区别小结"></a>next()和nextLine()区别小结</h3><p><code>next()</code>是一定要读取到有效的字符后才可以结束输入，对输入有效字符之前遇到的<code>空格键</code>、<code>Tab键</code>或<code>Enter键</code>等结束符，<code>next()</code>方法会自动将其去掉，只有在输入有效字符之后，<code>next()</code>方法才将其后输入的<code>空格键</code>、<code>Tab键</code>或<code>Enter键</code>等视为<code>分隔符或结束符</code>。所以，<code>next()</code>不能读取含有空格的字符串。<br><code>nextLine()</code>返回的<code>Enter键</code>之前的<code>所有</code>字符，它是可以得到带空格的字符串的。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>学习</tag>
        <tag>问题</tag>
      </tags>
  </entry>
  <entry>
    <title>ArrayList集合</title>
    <url>/2020/07/22/ArrayList%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><p>为什么使用集合？</p>
<p>数组定长，如果存储满了，那么数组就无法继续保存数据了，所以有了集合。</p>
<p>集合就是一个容器，这个容器可以保存很多数据(元素)</p>
<a id="more"></a>

<h3 id="集合和数组的区别"><a href="#集合和数组的区别" class="headerlink" title="集合和数组的区别"></a>集合和数组的区别</h3><ul>
<li><p>数组的长度固定，集合的长度是可变的</p>
</li>
<li><p>数组既可以保存基本类型的数据，也可以保存引用类型的数据；集合只能保存引用类型的数据。</p>
</li>
</ul>
<h3 id="ArrayList集合"><a href="#ArrayList集合" class="headerlink" title="ArrayList集合"></a>ArrayList集合</h3><p><code>ArrayList&lt;E&gt;</code>表示集合，其中<code>&lt;E&gt;</code>是一个特殊的东西，叫做泛型。想要使用这个集合是，就使用相应的引用类型替换掉<code>E</code>即可。</p>
<p><code>集合想要保存什么类型的数据，就用什么类型替换掉尖括号中的E</code></p>
<p>举例：</p>
<ul>
<li><code>ArrayList&lt;String&gt;</code>：集合保存的就是<code>字符串(String)</code>类型的数据</li>
<li><code>ArrayList&lt;Student&gt;</code>：集合保存的就是<code>Student</code>类型的数据</li>
</ul>
<p><strong>注意：集合是一种特殊的引用类型，直接打印集合名称，将打印出里面的内容</strong></p>
<h3 id="ArrayList集合的构造方法"><a href="#ArrayList集合的构造方法" class="headerlink" title="ArrayList集合的构造方法"></a>ArrayList集合的构造方法</h3><p><code>ArrayList()</code>：空参构造方法，使用该构造方法创建集合时里面没有任何数据。</p>
<h3 id="ArrayList集合的常用方法"><a href="#ArrayList集合的常用方法" class="headerlink" title="ArrayList集合的常用方法"></a>ArrayList集合的常用方法</h3><p><code>boolean add(E e)</code>:添加元素到集合的末尾</p>
<p><code>void add(int index, E element)</code>：在指定位置添加元素。</p>
<p><code>int size()</code>：获取集合的大小，集合中有几个元素，集合的大小就是多少。</p>
<p><code>E get(int index)</code>：获取指定索引位置的元素。</p>
<p><code>E remove(int index)</code>：根据索引删除元素，并且返回被删除的元素。</p>
<p><code>boolean remove(Object o)</code>：直接删除指定元素，删除成功返回true。</p>
<p><code>E set(int index, E element)</code>：替换元素。使用element替换掉index索引位置的元素，返回值就是被替换掉的元素</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        list.add(<span class="string">"hello"</span>);</span><br><span class="line">        list.add(<span class="string">"world"</span>);</span><br><span class="line">        list.add(<span class="string">"java"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"list:"</span> + list);</span><br><span class="line"></span><br><span class="line">        System.out.println(list.set(<span class="number">2</span>, <span class="string">"php"</span>));</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// System.out.println(list.remove("java"));</span></span><br><span class="line">        <span class="comment">// System.out.println(list);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// System.out.println(list.remove(1));</span></span><br><span class="line">        <span class="comment">// System.out.println(list);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// System.out.println("获取索引为1的元素：" + list.get(1));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out.println("集合的大小是：" + list.size());</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// list.add(2, "php");</span></span><br><span class="line">        <span class="comment">// System.out.println("list:" + list);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="集合存储基本类型的数据"><a href="#集合存储基本类型的数据" class="headerlink" title="集合存储基本类型的数据"></a>集合存储基本类型的数据</h3><p>前文说到，集合只能存储引用类型的数据，那么我们如果要存储基本类型的数据时，要如何做?</p>
<p>解决方法：集合保存基本类型的数据，需要使用对应的包装类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    list.add(<span class="number">100</span>);</span><br><span class="line">    list.add(<span class="number">200</span>);</span><br><span class="line">    list.add(<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(list);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="概念引入——包装类"><a href="#概念引入——包装类" class="headerlink" title="概念引入——包装类"></a>概念引入——包装类</h4><p>每种基本数据类型都有它所对应的引用类型，这个对应的引用类型叫做包装类。</p>
<table>
<thead>
<tr>
<th>基本类型</th>
<th>包装类</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>Byte</td>
</tr>
<tr>
<td>short</td>
<td>Short</td>
</tr>
<tr>
<td>int</td>
<td>Integer</td>
</tr>
<tr>
<td>long</td>
<td>Long</td>
</tr>
<tr>
<td>float</td>
<td>Float</td>
</tr>
<tr>
<td>double</td>
<td>Double</td>
</tr>
<tr>
<td>boolean</td>
<td>Boolean</td>
</tr>
<tr>
<td>char</td>
<td>Character</td>
</tr>
</tbody></table>
<h3 id="集合的遍历"><a href="#集合的遍历" class="headerlink" title="集合的遍历"></a>集合的遍历</h3><p>集合的遍历，和数组基本相同，使用<code>size()</code>方法获取集合的长度，然后使用for循环，遍历即可。</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="string">"张三丰"</span>);</span><br><span class="line">    list.add(<span class="string">"李四"</span>);</span><br><span class="line">    list.add(<span class="string">"张张"</span>);</span><br><span class="line">    list.add(<span class="string">"拉拉"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">        System.out.println(list.get(i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用集合存储Student类型数据并遍历打印</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line">    Student s0 = <span class="keyword">new</span> Student(<span class="string">"拉拉"</span>,<span class="number">20</span>);</span><br><span class="line">    Student s1 = <span class="keyword">new</span> Student(<span class="string">"哈哈"</span>,<span class="number">22</span>);</span><br><span class="line">    Student s2 = <span class="keyword">new</span> Student(<span class="string">"呵呵"</span>,<span class="number">24</span>);</span><br><span class="line">    list.add(s0);</span><br><span class="line">    list.add(s1);</span><br><span class="line">    list.add(s2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">        Student stu = list.get(i);</span><br><span class="line">        System.out.println(stu.getName()+<span class="string">"-"</span>+stu.getAge());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Student类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, String age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//  get/set方法略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Scanner录入产生的问题"><a href="#Scanner录入产生的问题" class="headerlink" title="Scanner录入产生的问题"></a>Scanner录入产生的问题</h3><p>在一个方法中，同一个Scanner对象，如果即调用<code>nextLine</code>键盘录入字符串，又调用其他的，<code>nextXxx</code>方法，就有可能引发问题,，因为<code>nextLine</code>方法能够检查其他方法的回车，从而导致录入结束。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    System.out.println(<span class="string">"请输入一个数字："</span>);</span><br><span class="line">    <span class="keyword">int</span> num = sc.nextInt();</span><br><span class="line">    System.out.println(<span class="string">"num:"</span>+num);</span><br><span class="line">    System.out.println(<span class="string">"请输入一个字符串："</span>);</span><br><span class="line">    String str = sc.nextLine();</span><br><span class="line">    System.out.println(<span class="string">"str:"</span> + str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的main方法在执行时，<code>str</code>的值为空，没有进行录入赋值，<code>nextLine()</code>方法检测到<code>nextInt()</code>方法的回车，提前结束了输入，控制台内容如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">请输入一个数字：</span><br><span class="line"><span class="number">18</span></span><br><span class="line">num:<span class="number">18</span></span><br><span class="line">请输入一个字符串：</span><br><span class="line">str:</span><br></pre></td></tr></table></figure>

<p>解决办法：</p>
<p>给<code>nextInt</code>，<code>nextDouble</code>单独创建一个<code>Scanner</code>对象</p>
<p>给<code>nextLine</code>单独创建一个对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    System.out.println(<span class="string">"请输入一个数字："</span>);</span><br><span class="line">    <span class="keyword">int</span> num = sc.nextInt();</span><br><span class="line">    System.out.println(<span class="string">"num:"</span>+num);</span><br><span class="line">    Scanner sc2 = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    System.out.println(<span class="string">"请输入一个字符串："</span>);</span><br><span class="line">    String str = sc2.nextLine();</span><br><span class="line">    System.out.println(<span class="string">"str:"</span> + str);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">请输入一个数字：</span><br><span class="line"><span class="number">12</span></span><br><span class="line">num:<span class="number">12</span></span><br><span class="line">请输入一个字符串：</span><br><span class="line">dsd</span><br><span class="line">str:dsd</span><br></pre></td></tr></table></figure>

<h3 id="综合案例——学生管理系统"><a href="#综合案例——学生管理系统" class="headerlink" title="综合案例——学生管理系统"></a>综合案例——学生管理系统</h3><p>需求：针对目前我们的所学内容，完成一个综合案例：学生管理系统！</p>
<p>该系统主要功能如下：</p>
<ul>
<li>添加学生：通过键盘录入学生信息，添加到集合中</li>
<li>删除学生：通过键盘录入要删除学生的学号，将该学生对象从集合中删除</li>
<li>修改学生：通过键盘录入要修改学生的学号，将该学生对象其他信息进行修改</li>
<li>查看学生：将集合中的学生对象信息进行展示</li>
<li>退出系统：结束程序</li>
</ul>
<p>学生类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String id, String name, String age, String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// get/set方法略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>系统类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Student&gt; stuList = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        Scanner scId = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String id = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"================欢迎进入学生管理系统==================="</span>);</span><br><span class="line">            System.out.println(<span class="string">"1.添加学员"</span>);</span><br><span class="line">            System.out.println(<span class="string">"2.删除学员"</span>);</span><br><span class="line">            System.out.println(<span class="string">"3.修改学员"</span>);</span><br><span class="line">            System.out.println(<span class="string">"4.查找学员"</span>);</span><br><span class="line">            System.out.println(<span class="string">"5.退出系统"</span>);</span><br><span class="line">            System.out.println(<span class="string">"====================================================="</span>);</span><br><span class="line">            System.out.println(<span class="string">"请输入功能序号："</span>);</span><br><span class="line">            <span class="keyword">int</span> target = sc.nextInt();</span><br><span class="line">            <span class="keyword">switch</span> (target)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    addStudent(stuList);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    System.out.println(<span class="string">"请输入要删除学员的id："</span>);</span><br><span class="line">                    id = scId.nextLine();</span><br><span class="line">                    deleteStudent(stuList,id);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    System.out.println(<span class="string">"请输入要修改学员的id："</span>);</span><br><span class="line">                    id = scId.nextLine();</span><br><span class="line">                    changeStudent(stuList,id);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                    lookStudent(stuList);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                    System.out.println(<span class="string">"bye~"</span>);</span><br><span class="line">                    System.exit(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">"输入有误，请输入1-5之间的数字！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断学员id是否存在，存在返回对象的在集合中的索引，不存在返回-1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stuList</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">decideIdExist</span><span class="params">(ArrayList&lt;Student&gt; stuList, String id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stuList.size(); i++) &#123;</span><br><span class="line">            Student stu = stuList.get(i);</span><br><span class="line">            <span class="keyword">if</span> (stu.getId().equals(id))&#123;</span><br><span class="line">                index = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id修改学生信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stuList</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">changeStudent</span><span class="params">(ArrayList&lt;Student&gt; stuList, String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = decideIdExist(stuList, id);</span><br><span class="line">        <span class="keyword">if</span> (index == -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"输入的学员id不存在，"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Student student = stuList.get(index);</span><br><span class="line">            Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            System.out.println(<span class="string">"修改学生姓名为"</span>);</span><br><span class="line">            String name = sc.nextLine();</span><br><span class="line">            System.out.println(<span class="string">"修改学生年龄为"</span>);</span><br><span class="line">            String age = sc.nextLine();</span><br><span class="line">            System.out.println(<span class="string">"修改学生所在地为"</span>);</span><br><span class="line">            String address = sc.nextLine();</span><br><span class="line">            student.setName(name);</span><br><span class="line">            student.setAge(age);</span><br><span class="line">            student.setAddress(address);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看所有信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stuList</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">lookStudent</span><span class="params">(ArrayList&lt;Student&gt; stuList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (stuList.isEmpty())&#123;</span><br><span class="line">            System.out.println(<span class="string">"学生列表为空，请添加后在查看。"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"id\t\t姓名\t\t年龄\t\t所在地"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stuList.size(); i++) &#123;</span><br><span class="line">            Student student = stuList.get(i);</span><br><span class="line">            System.out.println(student.getId()+<span class="string">"\t"</span>+student.getName()+<span class="string">"\t"</span>+student.getAge()+<span class="string">"\t"</span>+student.getAddress());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除学生信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stuList</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteStudent</span><span class="params">(ArrayList&lt;Student&gt; stuList, String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = decideIdExist(stuList, id);</span><br><span class="line">        <span class="keyword">if</span> (index == -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"输入的学员id不存在，"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            stuList.remove(index);</span><br><span class="line">            System.out.println(<span class="string">"删除成功！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加学生信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stuList</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addStudent</span><span class="params">(ArrayList&lt;Student&gt; stuList)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String id = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"请输入学生id:"</span>);</span><br><span class="line">            id = sc.nextLine();</span><br><span class="line">            <span class="keyword">if</span> (decideIdExist(stuList,id) != -<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"学员id已存在,请重新输入学员id"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"请输入学生姓名:"</span>);</span><br><span class="line">        String name = sc.nextLine();</span><br><span class="line">        System.out.println(<span class="string">"请输入学生年龄："</span>);</span><br><span class="line">        String age = sc.nextLine();</span><br><span class="line">        System.out.println(<span class="string">"请输入学生所在地："</span>);</span><br><span class="line">        String address = sc.nextLine();</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student(id,name,age,address);</span><br><span class="line">        stuList.add(stu);</span><br><span class="line">        System.out.println(<span class="string">"添加成功！！！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>学习</tag>
        <tag>问题</tag>
        <tag>集合</tag>
      </tags>
  </entry>
  <entry>
    <title>继承、抽象类与模板设计模式、final关键字</title>
    <url>/2020/07/23/%E7%BB%A7%E6%89%BF%E3%80%81%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%A8%A1%E6%9D%BF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%81final%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    <content><![CDATA[<h2 id="一、匿名对象"><a href="#一、匿名对象" class="headerlink" title="一、匿名对象"></a>一、匿名对象</h2><p>匿名对象：没有名字的对象</p>
<p>有名字：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student stu = <span class="keyword">new</span> Student()</span><br></pre></td></tr></table></figure>

<p>没有名字：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Student();</span><br></pre></td></tr></table></figure>



<p>匿名对象好处：稍微简化了操作</p>
<p>使用场景：</p>
<ul>
<li>如果某个对象只需要使用一次，那么可以使用匿名对象。</li>
<li>匿名对象可以当作参数传递</li>
</ul>
<a id="more"></a>

<h2 id="二、继承"><a href="#二、继承" class="headerlink" title="二、继承"></a>二、继承</h2><p>继承是多态的前提，没有继承就没有多态</p>
<p>Java中的继承描述的是事物之间的所属关系，比如人属于动物，就可以让人区继承动物。</p>
<p>子类继承父类，会拥有父类的所有成员(父类的私有成员也能继承，不过无法直接访问)</p>
<p><strong>继承的好处：提高代码的复用性</strong></p>
<h3 id="2-1-继承的格式"><a href="#2-1-继承的格式" class="headerlink" title="2.1 继承的格式"></a>2.1 继承的格式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-子类不能继承的内容"><a href="#2-2-子类不能继承的内容" class="headerlink" title="2.2 子类不能继承的内容"></a>2.2 子类不能继承的内容</h3><ul>
<li>父类中的构造方法子类是无法继承的</li>
<li>父类中的私有成员子类可以继承，但是继承了也没法【直接使用】，可以间接使用，通过<code>get/set</code>方法</li>
</ul>
<h3 id="2-3-继承后的特点——成员变量"><a href="#2-3-继承后的特点——成员变量" class="headerlink" title="2.3 继承后的特点——成员变量"></a>2.3 继承后的特点——成员变量</h3><ul>
<li>如果子父类的成员变量不同名时，那么访问时取决于是哪个成员变量名</li>
<li>如果子父类成员变量同名，那么在 子类中优先访问子类的成员变量</li>
<li>如果子父类成员变量同名了，那么想要在子类中访问父类的成员变量，需要使用<code>super.成员变量名</code>来访问。</li>
</ul>
<h3 id="2-4-继承后的特点——成员方法"><a href="#2-4-继承后的特点——成员方法" class="headerlink" title="2.4 继承后的特点——成员方法"></a>2.4 继承后的特点——成员方法</h3><ul>
<li>如果子父类成员方法不同名时，取决于调用哪个方法名</li>
<li>如果子父类的成员方法同名时，那么使用子类对象去调用方法时，优先访问子类的成员方法。</li>
<li>我们可以在子类的方法中，使用<code>super.方法名()</code>，指定父类中的某个方法</li>
</ul>
<h3 id="2-5-继承后的特点——构造方法"><a href="#2-5-继承后的特点——构造方法" class="headerlink" title="2.5 继承后的特点——构造方法"></a>2.5 继承后的特点——构造方法</h3><ul>
<li><p>子类无法继承父类的构造方法</p>
</li>
<li><p>子类的任何构造方法中第一行会有一句隐藏的代码<code>super();</code>，调用父类的无参构造</p>
</li>
</ul>
<h3 id="2-6-方法重写"><a href="#2-6-方法重写" class="headerlink" title="2.6 方法重写"></a>2.6 方法重写</h3><p>注意事项：</p>
<ul>
<li>在方法重写的，参数列表必须相同</li>
<li>子类方法的权限必须大于等于父类方法的权限</li>
<li>私有方法不能重写</li>
</ul>
<p><code>方法重写时,方法名,参数列表,修饰符,返回值类型一般都是一致的</code></p>
<p>应用场景：父类方法不能满足子类需要时，就可以在子类进行方法的重写。</p>
<p>@Override：方法重写注解</p>
<p>作用：如果我们在方法上写了@Override注解，那么就代表方法是重写的，编译器就会帮助我们检查重写的语法是否正确</p>
<h3 id="2-7-super-…-和this-…"><a href="#2-7-super-…-和this-…" class="headerlink" title="2.7 super(…)和this(…)"></a>2.7 super(…)和this(…)</h3><h4 id="2-7-1-super"><a href="#2-7-1-super" class="headerlink" title="2.7.1 super"></a>2.7.1 super</h4><p>super的三种用途：</p>
<ul>
<li>可以访问父类的成员变量：<code>super.变量名;</code></li>
<li>可以访问父类的成员方法：<code>super.方法名();</code></li>
<li>可以调用父类的构造方法：<code>super(参数);</code></li>
</ul>
<h4 id="2-7-2-this"><a href="#2-7-2-this" class="headerlink" title="2.7.2 this"></a>2.7.2 this</h4><p>this的三种用途：</p>
<ul>
<li>可以访问本类的成员变量：<code>this.变量名;</code></li>
<li>调用本类的其他成员方法：<code>this.方法名();</code></li>
<li>调用本类的其他构造方法：<code>this(参数);</code></li>
</ul>
<h3 id="2-8-继承的特点"><a href="#2-8-继承的特点" class="headerlink" title="2.8 继承的特点"></a>2.8 继承的特点</h3><ol>
<li>Java只支持单继承，不支持多继承<ul>
<li>一个子类，最多只能有一个父类</li>
</ul>
</li>
<li>一个类可以有多个子类。<ul>
<li>一个父类，可以有多个子类</li>
</ul>
</li>
<li>可以多层继承<ul>
<li>一个子类，可以继承一个父类，这个父类可以继承他的父类，它的父类有继承其他类</li>
</ul>
</li>
</ol>
<h2 id="三、抽象类"><a href="#三、抽象类" class="headerlink" title="三、抽象类"></a>三、抽象类</h2><h3 id="3-1-抽象类的概念和引入"><a href="#3-1-抽象类的概念和引入" class="headerlink" title="3.1 抽象类的概念和引入"></a>3.1 抽象类的概念和引入</h3><p>抽象类：含有抽象方法的类，那么该类一定是一个抽象类。</p>
<p>抽象方法：只有方法的声明(头部)，没有方法体的方法，我们称为抽象方法</p>
<h3 id="3-2-abstract使用格式"><a href="#3-2-abstract使用格式" class="headerlink" title="3.2 abstract使用格式"></a>3.2 abstract使用格式</h3><p>抽象方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> 返回值类型 方法名(参数列表);</span><br></pre></td></tr></table></figure>

<p>抽象类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    <span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>抽象类的使用：</p>
<ol>
<li>抽象类不能直接new对象</li>
<li>抽象类天生就是被其它类继承的</li>
<li>其他类继承抽象类后，必须重写抽象类的所有抽象方法，让后才能创建子类对象，否则子类还会是一个抽象类</li>
</ol>
<p>【定义抽象类—&gt;定义一个子类继承抽象类—&gt;重写抽象类中的所有抽象方法】</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"猫跑跑跑..."</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-3-抽象类的特征和注意事项"><a href="#3-3-抽象类的特征和注意事项" class="headerlink" title="3.3 抽象类的特征和注意事项"></a>3.3 抽象类的特征和注意事项</h3><p>抽象类的特点：有得有失</p>
<ul>
<li><p>得：得到了拥有抽象方法得能力</p>
</li>
<li><p>失：失去了创建对象得能力</p>
</li>
</ul>
<p>除了以上两点，在其他方面与普通类没有多大区别</p>
<p>注意事项：</p>
<ul>
<li>抽象类不能创建对象</li>
<li>抽象类是有构造方法的，构造方法可以给成员变量赋值</li>
<li>抽象类中，不一定含有抽象方法，但是含有抽象方法的类一定是抽象类（抽象类中可以没有抽象方法）</li>
<li>抽象类的子类，必须重写抽象父类中所有的抽象方法，不然子类也是一个抽象类</li>
<li>抽象类的作用为了让子类继承，抽象方法的作用为了让所有子类重写，作为类的模板！</li>
</ul>
<h3 id="3-4-抽象类存在的意义"><a href="#3-4-抽象类存在的意义" class="headerlink" title="3.4 抽象类存在的意义"></a>3.4 抽象类存在的意义</h3><p>抽象类体现的是模板思想</p>
<h3 id="3-5-模板设计模式"><a href="#3-5-模板设计模式" class="headerlink" title="3.5 模板设计模式"></a>3.5 模板设计模式</h3><p><code>模板模式思想：将固定的流程定义在父类中，不同的地方使用抽象方法，让子类去继承重写</code>。</p>
<p>需求：</p>
<ul>
<li><p>新司机开车：开门、点火、双手紧握方向盘、刹车、熄火</p>
</li>
<li><p>老司机开车：开门、点火、右手握方向盘左手抽烟、刹车、熄火</p>
</li>
</ul>
<p>案例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 父类：司机类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Driver</span> </span>&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开车的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">driver</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"开门..."</span>);</span><br><span class="line">        System.out.println(<span class="string">"点火..."</span>);</span><br><span class="line">        <span class="comment">//不同的司机开车的姿势不一样</span></span><br><span class="line">        ziShi();</span><br><span class="line">        System.out.println(<span class="string">"刹车..."</span>);</span><br><span class="line">        System.out.println(<span class="string">"熄火..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开车的姿势</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">ziShi</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子类：新司机</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewDriver</span> <span class="keyword">extends</span> <span class="title">Driver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ziShi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"双手紧握方向盘..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子类：老司机</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OldDriver</span> <span class="keyword">extends</span> <span class="title">Driver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ziShi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"右手握方向盘左手抽烟..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDriver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        NewDriver nb = <span class="keyword">new</span> NewDriver();</span><br><span class="line">        nb.driver();</span><br><span class="line">        System.out.println(<span class="string">"=================="</span>);</span><br><span class="line">        OldDriver ob = <span class="keyword">new</span> OldDriver();</span><br><span class="line">        ob.driver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="四、final关键字"><a href="#四、final关键字" class="headerlink" title="四、final关键字"></a>四、final关键字</h2><h3 id="4-1-final关键字"><a href="#4-1-final关键字" class="headerlink" title="4.1 final关键字"></a>4.1 final关键字</h3><p><code>final</code>：最终的，最后的，不可变的</p>
<p>可以用来修饰：<code>类、成员变量、局部变量（基本类型、引用类型），成员方法</code></p>
<h3 id="4-2-final的作用"><a href="#4-2-final的作用" class="headerlink" title="4.2 final的作用"></a>4.2 final的作用</h3><h4 id="4-2-1-final修饰类"><a href="#4-2-1-final修饰类" class="headerlink" title="4.2.1 final修饰类"></a>4.2.1 final修饰类</h4><p>作用：<code>被final修饰的类</code>，称为太监类：该类<code>不能被继承</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span></span>&#123;	<span class="comment">//编译报错，因为不能继承final修饰的类Fu</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-2-final修饰方法"><a href="#4-2-2-final修饰方法" class="headerlink" title="4.2.2 final修饰方法"></a>4.2.2 final修饰方法</h4><p>作用：<code>被final修饰的方法，称为最终方法：该方法不能被子类重写</code></p>
<h4 id="4-2-3-final修饰局部变量：基本类型变量"><a href="#4-2-3-final修饰局部变量：基本类型变量" class="headerlink" title="4.2.3 final修饰局部变量：基本类型变量"></a>4.2.3 final修饰局部变量：基本类型变量</h4><p>作用：<code>被final修饰的基本类型变量，只能赋值一次。</code>【这种变量一般称为常量，<code>常量名一般大写，多个单词之间下划线隔开</code>】</p>
<h4 id="4-2-4-final修饰引用类型变量"><a href="#4-2-4-final修饰引用类型变量" class="headerlink" title="4.2.4 final修饰引用类型变量"></a>4.2.4 final修饰引用类型变量</h4><p>作用：<code>被final修饰的引用类型变量，只能赋值一次</code>，该引用类型中<code>保存的地址值不能改变</code>，但是<code>地址指向的空间中的内容是可以改变的</code>。</p>
<h4 id="4-2-5-final修饰成员变量"><a href="#4-2-5-final修饰成员变量" class="headerlink" title="4.2.5 final修饰成员变量"></a>4.2.5 final修饰成员变量</h4><p>作用：<code>被final修饰的成员变量，只能赋值一次，必须在创建对象之前赋值(默认值不算)</code>。</p>
<p>我们可以在<code>定义成员变量时直接赋值</code>，也可以先定义成员变量，<code>在构造方法给成员变量赋值</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span></span>&#123;</span><br><span class="line">	<span class="keyword">final</span> <span class="keyword">int</span> AGE = <span class="number">10</span>; <span class="comment">//直接赋值</span></span><br><span class="line">	<span class="keyword">final</span> String NAME;  <span class="comment">//先定义不赋值</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        NAME = “加菲”; <span class="comment">//在构造方法中赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-6-final的注意事项"><a href="#4-2-6-final的注意事项" class="headerlink" title="4.2.6 final的注意事项"></a>4.2.6 final的注意事项</h4><ol>
<li><code>final和abstract不能同时修饰类</code></li>
<li><code>final和abstract不能同时修饰方法</code></li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h3><p>概念：如果我们创建对象时，没有用变量接收对象的地址，那么就是一个匿名对象。</p>
<p>格式：<code>new 数据类型();</code></p>
<p>好处：稍微简化我们的写法</p>
<p>使用场景：</p>
<ul>
<li>如果某个对象只用一次，可以使用匿名对象</li>
<li>可以使用匿名对象作为方法参数传递</li>
</ul>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>概念：Java中国继承描述的时事务之间的所属关系：比如老师属于员工，就可以让老师类继承员工类。</p>
<p>好处：提高代码的复用性。子类继承父类会自动拥有父类的所有成员</p>
<p>特点：类与类之间只能单继承，Java支持多级继承，一个父类可以有多个子类</p>
<p>方法的重写：</p>
<ul>
<li>如果子类中出现了和父类一样的方法，那么这个就是方法得重写</li>
<li>使用场景：如果父类的方法不能满足子类的需求，可以在子类中重写方法</li>
</ul>
<p>继承中构造方法的特点：</p>
<ol>
<li>构造方法不能继承</li>
<li>创建子类对象时，会先执行父类的构造方法，因为在子类构造方法的第一行有一个隐藏的super</li>
<li>我们也可以使用super手动调用父类的构造方法。</li>
<li>如果super调用父类的构造方法，只能写在第一行。</li>
</ol>
<p>super关键字：</p>
<ul>
<li><p>可以访问父类的成员方法：<code>super.方法名()</code></p>
</li>
<li><p>可以访问父类的成员变量：<code>super.变量名</code></p>
</li>
<li><p>可以访问父类的构造方法：<code>super()</code></p>
</li>
</ul>
<p>this关键字：</p>
<ul>
<li><p>可以访问本类的成员方法：<code>this.方法名()</code></p>
</li>
<li><p>可以访问本类的成员变量：<code>this.变量名</code></p>
</li>
<li><p>可以访问本类的构造方法：<code>this()</code></p>
</li>
</ul>
<h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>当某个方法的方法体我们说不清，不知道怎么写时，可以把这个方法定义成抽象方法，抽象方法所在的类必须是抽象类。</p>
<p>抽象类格式：<code>public abstract class 类名 {}</code></p>
<p>抽象方法格式：<code>public abstract 返回值类型 方法名(参数列表);</code></p>
<p>抽象类的使用：</p>
<ol>
<li>抽象类是给子类用的，我们要定义一个类，去继承抽象类。</li>
<li>重写抽象类中的所有的抽象方法。</li>
<li>创建这个子类对象，调用方法。</li>
</ol>
<p>抽象类的注意事项：</p>
<ol>
<li>抽象类不能创建对象</li>
<li>抽象类中也可以有构造方法，构造方法是给子类使用的.</li>
<li>抽象类中可以有抽象方法，也可以有非抽象的内容。抽象方法所在的类必须是一个抽象类。</li>
<li>一个普通类在继承抽象类时，需要重写里面所有的抽象方法。一个抽象类在继承抽象类时，可以不重写里面的抽象方法。</li>
<li>抽象类都是作为父类存在，抽象类体现的是模板思想【司机开车案例】</li>
</ol>
<h3 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h3><p><code>final</code>表示最终的不可改变的。</p>
<p>注意：</p>
<ul>
<li><p>如果final修饰类，这个类不能被继承，但是可以继承其他类。</p>
</li>
<li><p>如果fianl修饰方法，这个方法不能被重写，但是可以被子类继承使用。</p>
</li>
<li><p>如果final修饰变量，该变量就变成了常量。只能被赋值一次，一旦赋值就不能更改了。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>学习</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
</search>
