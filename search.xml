<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java基础知识</title>
    <url>/2020/06/21/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<a id="more"></a>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/06/20/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>类与对象、封装、构造方法</title>
    <url>/2020/07/19/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E3%80%81%E5%B0%81%E8%A3%85%E3%80%81%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="一、面向对象思想"><a href="#一、面向对象思想" class="headerlink" title="一、面向对象思想"></a>一、面向对象思想</h2><h3 id="1-1面向对象思想概述"><a href="#1-1面向对象思想概述" class="headerlink" title="1.1面向对象思想概述"></a>1.1面向对象思想概述</h3><p>面向过程思想：强调过程（步骤）</p>
<ul>
<li>注重的是过程,必须清楚每一个步骤,按照步骤一步一步去实现</li>
</ul>
<p>面向对象思想：强调对象</p>
<ul>
<li>注重的是对象,无须清楚每一个步骤,只需要使用对象调用行为来完成需求</li>
</ul>
<a id="more"></a>

<h3 id="1-2类和对象以及它们的关系"><a href="#1-2类和对象以及它们的关系" class="headerlink" title="1.2类和对象以及它们的关系"></a>1.2类和对象以及它们的关系</h3><p>【想要有对象，必须先有类】</p>
<p>类：一群具有相同属性和行为的事物的统称</p>
<ul>
<li>例如：人类、动物</li>
</ul>
<p>对象：类中某一个具体的存在（实例）</p>
<p>类和对象的关系：类是对象的模板，对象是类的实体。</p>
<ul>
<li>对象是以模板创建出来的实体，是具体的。</li>
</ul>
<p>通俗的就是以类作为模板创建创建对象。</p>
<h2 id="二、类与对象的使用"><a href="#二、类与对象的使用" class="headerlink" title="二、类与对象的使用"></a>二、类与对象的使用</h2><h3 id="2-1-定义类"><a href="#2-1-定义类" class="headerlink" title="2.1 定义类"></a>2.1 定义类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//格式：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line">	<span class="comment">//属性（成员变量）</span></span><br><span class="line">    数据类型 变量名;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//行为（成员方法）</span></span><br><span class="line">    <span class="keyword">public</span> 返回值类型 方法名(形式参数)&#123;</span><br><span class="line">        方法体;</span><br><span class="line">        <span class="keyword">return</span> 返回数值;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">	<span class="comment">//成员变量</span></span><br><span class="line">	String name;</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//成员方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"汪汪汪。。。"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"狗吃骨头"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-2-对象的创建和使用"><a href="#2-2-对象的创建和使用" class="headerlink" title="2.2 对象的创建和使用"></a>2.2 对象的创建和使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">创建对象格式：</span><br><span class="line">	类名 对象名 = <span class="keyword">new</span> 类名();</span><br><span class="line">使用对象：</span><br><span class="line">    对象名.成员变量名</span><br><span class="line">    对象名.成员方法名()</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDog</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		Dog dog = <span class="keyword">new</span> Dog();</span><br><span class="line">        dog.name = <span class="string">"小白"</span>;</span><br><span class="line">        dog.age = <span class="number">2</span>;</span><br><span class="line">        dog.bark();</span><br><span class="line">        dog.eat();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-3-成员变量的默认值【-】"><a href="#2-3-成员变量的默认值【-】" class="headerlink" title="2.3 成员变量的默认值【*】"></a>2.3 成员变量的默认值【*】</h3><p>成员变量是有默认值的，和数据类型有关。</p>
<ul>
<li><p>整数类型    默认值【0】</p>
</li>
<li><p>小数类型    默认值【0.0】</p>
</li>
<li><p>字符类型    默认值 【’ ‘】引号里面有个空格</p>
</li>
<li><p>布尔类型    默认值false</p>
</li>
<li><p>引用类型    默认值null</p>
</li>
</ul>
<h2 id="三、类与对象的内存图"><a href="#三、类与对象的内存图" class="headerlink" title="三、类与对象的内存图"></a>三、类与对象的内存图</h2><h3 id="3-1-Java内存的五大区"><a href="#3-1-Java内存的五大区" class="headerlink" title="3.1 Java内存的五大区"></a>3.1 Java内存的五大区</h3><table>
<thead>
<tr>
<th align="center">区域名称</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">栈区</td>
<td align="left">运行方法以及保存方法中定义的变量</td>
</tr>
<tr>
<td align="center">堆区</td>
<td align="left">保存new出来的东西(对象)</td>
</tr>
<tr>
<td align="center">方法区</td>
<td align="left">保存字节码文件</td>
</tr>
<tr>
<td align="center">本地方法区</td>
<td align="left">和操作系统相关的</td>
</tr>
<tr>
<td align="center">寄存器区</td>
<td align="left">和CPU相关的</td>
</tr>
</tbody></table>
<h3 id="3-2-一个对象内存图"><a href="#3-2-一个对象内存图" class="headerlink" title="3.2 一个对象内存图"></a>3.2 一个对象内存图</h3><p>略…</p>
<h3 id="3-3-两个对象内存图"><a href="#3-3-两个对象内存图" class="headerlink" title="3.3 两个对象内存图"></a>3.3 两个对象内存图</h3><p>略…</p>
<h3 id="3-4-多个对象名指向同一个对象的内存图"><a href="#3-4-多个对象名指向同一个对象的内存图" class="headerlink" title="3.4 多个对象名指向同一个对象的内存图"></a>3.4 多个对象名指向同一个对象的内存图</h3><p>略…</p>
<h2 id="四、成员变量和局部变量区别【-】"><a href="#四、成员变量和局部变量区别【-】" class="headerlink" title="四、成员变量和局部变量区别【*】"></a>四、成员变量和局部变量区别【*】</h2><h3 id="4-1-什么是成员变量和局部变量"><a href="#4-1-什么是成员变量和局部变量" class="headerlink" title="4.1 什么是成员变量和局部变量"></a>4.1 什么是成员变量和局部变量</h3><p>什么是成员变量：</p>
<ul>
<li>定义在【类中方法外】</li>
</ul>
<p>什么是局部变量：</p>
<ul>
<li>定义在【类中方法内】</li>
</ul>
<h3 id="5-2-成员变量和局部变量的五大区别"><a href="#5-2-成员变量和局部变量的五大区别" class="headerlink" title="5.2 成员变量和局部变量的五大区别"></a>5.2 成员变量和局部变量的五大区别</h3><ol>
<li>定义位置不同：<ul>
<li>成员变量：类中方法外</li>
<li>局部变量：类中方法内</li>
</ul>
</li>
<li>默认值不同：<ul>
<li>成员变量：有默认值</li>
<li>局部变量：没有默认值</li>
</ul>
</li>
<li>有效范围(作用域)不同<ul>
<li>成员变量：在整个类都是有效的</li>
<li>局部变量：只在当前方法中有效</li>
</ul>
</li>
<li>内存位置不同：<ul>
<li>成员变量：跟随对象保存在堆中</li>
<li>局部变量：跟随方法的运行保存在栈中的</li>
</ul>
</li>
<li>生命周期不同(从出生到销毁)：<ul>
<li>成员变量：跟随对象的创建而出现，跟随对象的销毁而销毁</li>
<li>局部变量：跟随方法的执行而出现，跟随方法执行完毕而销毁</li>
</ul>
</li>
</ol>
<h2 id="五、封装【-】"><a href="#五、封装【-】" class="headerlink" title="五、封装【*】"></a>五、封装【*】</h2><p>面向对象语言中三大特性：封装、继承、多态。</p>
<h3 id="5-1-对封装的理解"><a href="#5-1-对封装的理解" class="headerlink" title="5.1 对封装的理解"></a>5.1 对封装的理解</h3><p>封装思想的介绍：隐藏细节，提供对外界的访问方式。</p>
<h3 id="5-2-为什么要封装"><a href="#5-2-为什么要封装" class="headerlink" title="5.2 为什么要封装"></a>5.2 为什么要封装</h3><p>好处：<br>       1. 提高代码的安全性。<br>       2. 提高代码的复用性。</p>
<h3 id="5-3-封装的原则和步骤【-】"><a href="#5-3-封装的原则和步骤【-】" class="headerlink" title="5.3 封装的原则和步骤【*】"></a>5.3 封装的原则和步骤【*】</h3><p>原则：</p>
<p>​    a. 隐藏需要封装的数据</p>
<p>​    b. 对外暴漏可以访问的方式</p>
<p>步骤：</p>
<p>​    a. 使用private修饰要封装的数据</p>
<p>​    b. 对封装的数据提供getter/setter方法</p>
<h3 id="5-4-封装的操作"><a href="#5-4-封装的操作" class="headerlink" title="5.4 封装的操作"></a>5.4 封装的操作</h3><p>private关键字：称为私有关键字</p>
<ul>
<li>当前类中的成员变量/成员方法，如果被private关键字修饰了，那么该变量或者方法只能在当前类的内部使用。</li>
</ul>
<p>【注意】类中所有的成员变量，并提供相应的getter/setter方法，这就是一个JavaBean。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-5-this关键字"><a href="#5-5-this关键字" class="headerlink" title="5.5 this关键字"></a>5.5 this关键字</h3><ul>
<li><p>this的作用：</p>
</li>
<li><p>this的内存原理(this的本质)：</p>
<ul>
<li>this代表一个对象，当前对象。成员方法是由那个对象调用的，那么该方法中的this就代表哪个对象。</li>
</ul>
</li>
</ul>
<h3 id="5-6-封装总结"><a href="#5-6-封装总结" class="headerlink" title="5.6 封装总结"></a>5.6 封装总结</h3><ol>
<li>封装：是面向对象三大特征置以（封装、继承、多态）</li>
<li>封装原则：<ul>
<li>将成员变量隐藏——private关键字</li>
<li>对外提供getter\setter方法</li>
</ul>
</li>
<li>封装好处：<ul>
<li>提高代码的安全性</li>
<li>提高了代码的复用性</li>
</ul>
</li>
</ol>
<h2 id="六、构造方法"><a href="#六、构造方法" class="headerlink" title="六、构造方法"></a>六、构造方法</h2><h3 id="6-1-构造方法介绍"><a href="#6-1-构造方法介绍" class="headerlink" title="6.1 构造方法介绍"></a>6.1 构造方法介绍</h3><h4 id="6-1-1-构造方法"><a href="#6-1-1-构造方法" class="headerlink" title="6.1.1 构造方法"></a>6.1.1 构造方法</h4><p>构造方法就是创建类的对象时调用的方法。</p>
<p>例如：创建对象猫时</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cat cat = <span class="keyword">new</span> Cat();	<span class="comment">//实际上Cat()就是在调用构造方法</span></span><br></pre></td></tr></table></figure>

<h4 id="6-1-2-构造方法格式："><a href="#6-1-2-构造方法格式：" class="headerlink" title="6.1.2 构造方法格式："></a>6.1.2 构造方法格式：</h4><ul>
<li>构造方法名必须和类名一模一样</li>
<li>构造方法是没有返回值的，连void也没有</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">//默认构造方法，不写时会自动分配一个</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"默认构造方法..."</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-1-3-构造方法的功能"><a href="#6-1-3-构造方法的功能" class="headerlink" title="6.1.3 构造方法的功能"></a>6.1.3 构造方法的功能</h4><p>给生成的对象成员变量赋默认值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span></span>&#123;</span><br><span class="line">	System.out.println(<span class="string">"默认构造方法..."</span>);</span><br><span class="line">    <span class="comment">//例如做了如下操作：</span></span><br><span class="line">    <span class="comment">//this.name = null;</span></span><br><span class="line">    <span class="comment">//this.age = 0;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-2-注意事项"><a href="#6-2-注意事项" class="headerlink" title="6.2 注意事项"></a>6.2 注意事项</h3><p>构造方法中的四点注意事项：</p>
<ol>
<li>如果一个类我们没有写构造方法，那么系统会自动生成一个无参构造，构造中会给成员变量赋默认值。</li>
<li>构造方法也是方法，所以可以重载，但是如果我们重载了任意一个构造，那么系统将不会再分配无参构造。</li>
<li>无论我们如何使用构造，无参构造建议直接写出来</li>
<li>无参构造和有参构造区别在于：无参构造给成员变量赋默认值，有参构造给成员变量赋指定值。</li>
</ol>
<h3 id="6-3-标准类定义"><a href="#6-3-标准类定义" class="headerlink" title="6.3 标准类定义"></a>6.3 标准类定义</h3><p>标准类JavaBean：</p>
<ul>
<li>所有成员变量都需要封装（private + get/set）</li>
<li>应该给标准类提供至少两个构造：无参构造+全参构造</li>
</ul>
<p>代码示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> score;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 无参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 全参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">double</span> score)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// get/set方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getScore</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScore</span><span class="params">(<span class="keyword">double</span> score)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="一-面向对象"><a href="#一-面向对象" class="headerlink" title="一.面向对象"></a>一.面向对象</h3><p>面向对象是一种编程思想，该编程思想是从面向过程演化过来的。<br>面向过程：在完成功能的时候，我们需要关注里面的每一个细节，里面每一个步骤都是由我们自己亲力亲为去实现的。<br>面向对象：在完成功能的时候，我们只关注结果，里面的步骤是别人帮我们完成。</p>
<p>面向对象好处：<br>     1. 可以将复杂的事情简单化<br>     2. 更加符合人类思考的习惯。<br>     3. 从执行者变成指挥者。</p>
<p>类和对象：<br>    类：用来描述现实事物，是抽象的。比如学生，人。<br>    对象：是类的具体体现，是具体的。比如小明同学，小强同学。</p>
<h3 id="二-类的定义和使用"><a href="#二-类的定义和使用" class="headerlink" title="二. 类的定义和使用"></a>二. 类的定义和使用</h3><p>定义格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名 </span>&#123;</span><br><span class="line">	<span class="comment">//成员变量</span></span><br><span class="line">	<span class="comment">//成员方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用格式：</p>
<ol>
<li><p>导包【省略】<br>  如果两个类在同一个包下，不需要导包的</p>
</li>
<li><p>创建对象<br>  数据类型 对象名 = new 数据类型(…);</p>
</li>
<li><p>使用成员</p>
<p>  对象名.属性名<br>对象名.方法名(..);</p>
</li>
</ol>
<h3 id="三-局部变量和成员变量的区别"><a href="#三-局部变量和成员变量的区别" class="headerlink" title="三. 局部变量和成员变量的区别"></a>三. 局部变量和成员变量的区别</h3><p>定义位置不同：<br>        局部变量：在方法中定义。<br>        成员变量：在类中方法外定义。</p>
<p>使用范围不同：<br>    局部变量：只能在自己的作用域【里自己最近的一个大括号】内使用。<br>    成员变量：可以在整个类中使用</p>
<p>内存位置不同：<br>    局部变量： 跟随方法在栈内存中开辟<br>    成员变量： 跟随对象保存在堆内存中。</p>
<p>初始值不同：<br>    局部变量： 没有默认值，使用之前必须要赋值<br>    成员变量： 有默认值。 整数是0，小数是0.0，字符是’ ‘，布尔是false，引用类型是null</p>
<p>生命周期不同：<br>    局部变量： 在方法执行到定义变量这行代码的时候产生，一旦离开自己的作用域，局部变量就会消失<br>    成员变量： 跟随对象的产生而产生，随着对象的消失而消失。</p>
<h3 id="四-封装"><a href="#四-封装" class="headerlink" title="四. 封装"></a>四. 封装</h3><p>概念：隐藏具体的实现，提供对外的访问方式。<br>在代码中的体现：将属性私有，提供get和set方法。</p>
<h3 id="五-private"><a href="#五-private" class="headerlink" title="五. private"></a>五. private</h3><p>private是一个权限修饰符，表示私有。<br>private可以修饰成员变量和成员方法。<br>private修饰成员只能在本类中使用。</p>
<p><strong>注意：如果将属性私有，我们还要提供get和set方法让外界使用属性。</strong></p>
<h3 id="六-this关键字"><a href="#六-this关键字" class="headerlink" title="六. this关键字"></a>六. this关键字</h3><p>​    this可以解决的问题：可以区分同名的成员变量和局部变量。<br>​    this含义：表示调用者对象，this所在的方法是通过哪个对象调用的，this表示的就是哪个对象。</p>
<h3 id="七-构造方法"><a href="#七-构造方法" class="headerlink" title="七. 构造方法"></a>七. 构造方法</h3><p>作用：一般会使用构造方法在创建对象时给属性赋值。<br>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> 构造方法名(参数列表) &#123;</span><br><span class="line">    构造方法体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ol>
<li>如果在一个类中我们没有提供构造方法，那么系统会自动给我们提供一个空参数的构造方法。</li>
<li>如果在一个类中我们提供了构造方法，那么系统就不会给我们提供这个空参数的构造方法。</li>
<li>构造方法支持重载。</li>
</ol>
<h3 id="八-JavaBean制作【最终目标】"><a href="#八-JavaBean制作【最终目标】" class="headerlink" title="八. JavaBean制作【最终目标】"></a>八. JavaBean制作【最终目标】</h3><p>JavaBean就是定义类的规范</p>
<ol>
<li>将属性私有</li>
<li>提供get和set方法</li>
<li>提供空参数【必需提供】的构造方法和有参数【选择性提供】的构造方法</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>学习</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>String和StringBuilder</title>
    <url>/2020/07/20/String%E5%92%8CStringBuilder/</url>
    <content><![CDATA[<h2 id="一、String类"><a href="#一、String类" class="headerlink" title="一、String类"></a>一、String类</h2><h3 id="1-1-String概述"><a href="#1-1-String概述" class="headerlink" title="1.1 String概述"></a>1.1 String概述</h3><p><code>String</code>类代表字符串。  Java程序中的所有字符串文字（例如<code>&quot;abc&quot;</code> ）都被实现为此类的实例。</p>
<p>字符串是由一串数据组成，本质就是一个字符数组</p>
<p>【扩展】: 在<code>JDk 8</code>以及之前的版本，字符串本质是一个<code>char</code>数组。在<code>JDk 9</code>以及之后的版本，字符串本质是一个<code>byte</code>数组。</p>
<p>字符串不变; 它们的值在创建后不能被更改。 字符串缓冲区支持可变字符串。  因为String对象是不可变的，它们可以被共享。</p>
<p>String所在的包在<code>java,lang</code>包，<code>java.lang</code>包下的东西都是非常常用的，所以Java中有一个优化。<code>java.lang</code>包下的东西在使用时不需要导包。</p>
<a id="more"></a>

<h3 id="1-2-创建字符串对象"><a href="#1-2-创建字符串对象" class="headerlink" title="1.2 创建字符串对象"></a>1.2 创建字符串对象</h3><p><code>String()</code> : 空参数的构造方法，使用该构造方法创建传来的字符串里面没有任何内容。</p>
<p><code>String(String original)</code> : 参数需要传递一个字符串，根据一个字符串创建字符串对象。</p>
<p><code>String(char[] value)</code> : 根据字符数组创建字符串对象。</p>
<p><code>String(char[] value, int offset, int count)</code> : 根据字符数组的一部分创建字符串。参数offset表示从字符数组的哪个索引位置开始，count表示多少个字符。</p>
<p><code>String(byte[] bytes)</code> : 根据字节数组的内容创建字符串对象。</p>
<p><code>String(byte[] bytes, int offset, int length)</code> : 将byte数组的一部分转成字符串。参数offset表示从数组的哪个索引位置开始，length表示转多少个字符。</p>
<p><code>直接赋值创建字符串对象。</code></p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01String</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//空参</span></span><br><span class="line">        String s1 = <span class="keyword">new</span> String();</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">		</span><br><span class="line">        String s2 = <span class="keyword">new</span> String(<span class="string">"Hello"</span>);</span><br><span class="line">        System.out.println(s2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] cArr = &#123;<span class="string">'h'</span>,<span class="string">'e'</span>,<span class="string">'l'</span>,<span class="string">'l'</span>,<span class="string">'o'</span>&#125;;</span><br><span class="line">        String s3 = <span class="keyword">new</span> String(cArr);</span><br><span class="line">        System.out.println(s3);</span><br><span class="line"></span><br><span class="line">        String s4 = <span class="keyword">new</span> String(cArr,<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">        System.out.println(s4);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bArr = &#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>,<span class="number">100</span>,<span class="number">101</span>&#125;;</span><br><span class="line">        String s5 = <span class="keyword">new</span> String(bArr);</span><br><span class="line">        System.out.println(s5);</span><br><span class="line"></span><br><span class="line">        String s6 = <span class="keyword">new</span> String(bArr,<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">        System.out.println(s6);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//直接赋值——最常用</span></span><br><span class="line">        String s7 = <span class="string">"hello"</span>;</span><br><span class="line">        System.out.println(s7);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-new的方式创建对象和直接赋值的方式创建对象的区别"><a href="#1-3-new的方式创建对象和直接赋值的方式创建对象的区别" class="headerlink" title="1.3 new的方式创建对象和直接赋值的方式创建对象的区别"></a>1.3 new的方式创建对象和直接赋值的方式创建对象的区别</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 字符串new的方式创建对象和直接赋值的方式创建对象的区别</span></span><br><span class="line"><span class="comment"> * 	==比较基本类型和引用类型的区别:</span></span><br><span class="line"><span class="comment"> * 		i.如果==比较基本类型，比较的是值</span></span><br><span class="line"><span class="comment"> * 		ii.如果==比较引用类型，比较的是地址值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03String</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s1 = <span class="keyword">new</span> String(<span class="string">"hello"</span>);</span><br><span class="line">        String s2 = <span class="string">"hello"</span>;</span><br><span class="line">        System.out.println(s1 == s2);<span class="comment">//false</span></span><br><span class="line">        String s3 = <span class="string">"hello"</span>;</span><br><span class="line">        System.out.println(s1 == s3);<span class="comment">//false</span></span><br><span class="line">        System.out.println(s2 == s3);<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>字符串是常量，会保存到常量池中。</strong></p>
<p><strong>只有使用双引号直接写出来的字符串才是常量。</strong></p>
<p>常量池扩展：</p>
<ul>
<li>在<code>JDK6</code>以及之前的版本，常量池在方法区</li>
<li>在<code>JDk7</code>的时候，常量池在堆内存</li>
<li>在<code>JDK8</code>的时间，常量池在元空间【方法区】</li>
</ul>
<p>字符串常量是可以复用的，当我们使用到一个字符串常量是，会先看一下常量池中有没有这个东西，如果有，就直接使用常量池中的，如果没有，就创建一个该字符串常量存放到常量池中。</p>
<p><strong>【结论】new的方式创建字符串，会先由栈指向堆，再有堆指向常量池。直接复制的方式是由栈直接指向常量池。</strong></p>
<h3 id="1-4-字符串常用方法"><a href="#1-4-字符串常用方法" class="headerlink" title="1.4 字符串常用方法"></a>1.4 字符串常用方法</h3><h4 id="1-4-1-判断方法"><a href="#1-4-1-判断方法" class="headerlink" title="1.4.1 判断方法"></a>1.4.1 判断方法</h4><p><code>boolean equals(Object anObject)</code>：比较两个字符串的内容是否相同。参数如果是Object，可以传递任何数据，包括字符串。</p>
<p><code>boolean equalsIgnoreCase(String anotherString)</code> ：比较两个字符串的内容是否相同，忽略大小写。</p>
<p><code>boolean contains(CharSequence s)</code>  ：判断字符串中是否包含指定的字符串。</p>
<p><code>boolean startsWith(String prefix)</code> ：判断字符串是否以指定的内容开头。</p>
<p><code>boolean endsWith(String suffix)</code>：判断字符串是否以指定的内容结尾。</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04String</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        String s1 = <span class="string">"hello"</span>;</span><br><span class="line">        String s2 = <span class="keyword">new</span> String(<span class="string">"hello"</span>);</span><br><span class="line">        String s3 = <span class="string">"HeLlo"</span>;</span><br><span class="line">        System.out.println(s1.equals(s2));<span class="comment">//true</span></span><br><span class="line">        System.out.println(s1.equals(s3));<span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">"==================="</span>);</span><br><span class="line">        System.out.println(s1.equalsIgnoreCase(s3));<span class="comment">//true</span></span><br><span class="line">        System.out.println(s1.equalsIgnoreCase(s2));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">"===================="</span>);</span><br><span class="line">        String str = <span class="string">"helloworld"</span>;</span><br><span class="line">        System.out.println(str.contains(<span class="string">"nihao"</span>));<span class="comment">//false</span></span><br><span class="line">        System.out.println(str.contains(<span class="string">"owo"</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">"===================="</span>);</span><br><span class="line">        System.out.println(str.startsWith(<span class="string">"abc"</span>));<span class="comment">//false</span></span><br><span class="line">        System.out.println(str.startsWith(<span class="string">"he"</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">"===================="</span>);</span><br><span class="line">        System.out.println(str.endsWith(<span class="string">"aa"</span>));<span class="comment">//false</span></span><br><span class="line">        System.out.println(str.endsWith(<span class="string">"ld"</span>));<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-4-2-获取方法"><a href="#1-4-2-获取方法" class="headerlink" title="1.4.2 获取方法"></a>1.4.2 获取方法</h4><p><code>int length()</code>  ：返回此字符串的长度。 </p>
<p><code>String concat(String str)</code> ：将指定的字符串连接到该字符串的末尾。 返回拼接后的字符串。</p>
<p><code>char charAt(int index)</code>：获取指定索引位置的字符，并返回。</p>
<p><code>int indexOf(String str)</code>  : 查找某个字符串第一次出现的索引。如果没有找到，返回-1。</p>
<p><code>int lastIndexOf(String str)</code> : 查找某个字符串最后一次出现的索引，如果没有找到，返回-1。</p>
<p><code>String substring(int beginIndex)</code> ：截取字符串，从<code>beginIndex</code>开始，一直到末尾，返回截取后的字符串。 </p>
<p><code>String substring(int beginIndex, int endIndex)</code>：截取字符串从<code>beginIndex</code>开始，<code>endIndex</code>结束， 包含头，不包含尾，返回截取后的字符串。 </p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05String</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String s1 = <span class="string">"Hello"</span>;</span><br><span class="line">        <span class="keyword">int</span> len = s1.length();</span><br><span class="line">        System.out.println(<span class="string">"字符串长度:"</span> + len);</span><br><span class="line"></span><br><span class="line">        String s2 = <span class="string">"World"</span>;</span><br><span class="line">        String str = s1.concat(s2);</span><br><span class="line">        System.out.println(<span class="string">"拼接后的字符串:"</span> + str);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> ch = str.charAt(<span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">"字符串索引为5位置的字符是："</span> + ch);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> index = str.indexOf(<span class="string">"oWo"</span>);</span><br><span class="line">        System.out.println(<span class="string">"字符串oWo在str中第一次出现的索引为："</span> + index);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> lastIndex = str.lastIndexOf(<span class="string">"ld"</span>);</span><br><span class="line">        System.out.println(<span class="string">"字符串ld在st中最后一次穿线的索引为:"</span> + lastIndex);</span><br><span class="line"></span><br><span class="line">        String subStr = str.substring(<span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">"在字符串str索引为5开始截取一直到末尾，截取后的字符串为："</span> + subStr);</span><br><span class="line"></span><br><span class="line">        String subStr1 = str.substring(<span class="number">2</span>, <span class="number">6</span>);</span><br><span class="line">        System.out.println(<span class="string">"在字符串str索引2开始一直截取到索引为6，包含2不包含6，返回后的字符串为："</span> + subStr1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">控制台输出：</span><br><span class="line">    字符串长度:<span class="number">5</span></span><br><span class="line">    拼接后的字符串:HelloWorld</span><br><span class="line">    字符串索引为<span class="number">5</span>位置的字符是：W</span><br><span class="line">    字符串oWo在str中第一次出现的索引为：<span class="number">4</span></span><br><span class="line">    字符串ld在st中最后一次穿线的索引为:<span class="number">8</span></span><br><span class="line">    在字符串str索引为<span class="number">5</span>开始截取一直到末尾，截取后的字符串为：World</span><br><span class="line">    在字符串str索引<span class="number">2</span>开始一直截取到索引为<span class="number">6</span>，包含<span class="number">2</span>不包含<span class="number">6</span>，返回后的字符串为：lloW</span><br></pre></td></tr></table></figure>



<h4 id="1-4-3-转换方法"><a href="#1-4-3-转换方法" class="headerlink" title="1.4.3 转换方法"></a>1.4.3 转换方法</h4><p><code>char[] toCharArray()</code> ：将此字符串转换为新的字符数组。 </p>
<p><code>byte[] getBytes()</code>  ：将字符串转成字节数组并返回。</p>
<p><code>String toLowerCase()</code>  ：将字符串全部转成小写并返回转换后新的字符串。</p>
<p><code>String toUpperCase()</code> ：将字符串全部转成大写并返回转换后新的字符串。</p>
<p><code>String replace(String oldChar, String newChar)</code>  ：替换字符串，使用<code>newStr</code>替换掉<code>oldStr</code>，并返回替换后的字符串。</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06String</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String str = <span class="string">"Hello,World"</span>;</span><br><span class="line">        <span class="keyword">char</span>[] strArr = str.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strArr.length; i++) &#123;</span><br><span class="line">            System.out.print(strArr[i]+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">"=========================="</span>);</span><br><span class="line">        String s1 = <span class="string">"abcde"</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = s1.getBytes();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bytes.length; i++) &#123;</span><br><span class="line">            System.out.print(bytes[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">"=========================="</span>);</span><br><span class="line">        String lowerStr = str.toLowerCase();</span><br><span class="line">        System.out.println(lowerStr);</span><br><span class="line">        System.out.println(<span class="string">"=========================="</span>);</span><br><span class="line">        String upperStr = str.toUpperCase();</span><br><span class="line">        System.out.println(upperStr);</span><br><span class="line">        System.out.println(<span class="string">"=========================="</span>);</span><br><span class="line">        String newStr = str.replace(<span class="string">"Hello,"</span>, <span class="string">"hello"</span>);</span><br><span class="line">        System.out.println(newStr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="1-4-4-分割方法"><a href="#1-4-4-分割方法" class="headerlink" title="1.4.4 分割方法"></a>1.4.4 分割方法</h4><p><code>String[] split(String regex)</code>  ：根据指定字符串进行切割，切割之后的内容会方法字符串数组中返回。</p>
<p><code>String trim()</code>  ：去除字符串两边的空格。</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo07String</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        String str  = <span class="string">"hello,world,java"</span>;</span><br><span class="line">        String[] strs = str.split(<span class="string">","</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strs.length; i++) &#123;</span><br><span class="line">            System.out.println(strs[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"===================="</span>);</span><br><span class="line">        String s1 = <span class="string">"   hello   world      "</span>;</span><br><span class="line">        String newStr = s1.trim();</span><br><span class="line">        System.out.println(newStr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-5-String练习"><a href="#1-5-String练习" class="headerlink" title="1.5 String练习"></a>1.5 String练习</h3><p><strong>需求：统计字符个数，键盘录入一个字符串，统计字符串中大小写字母及数字字符个数。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo08StringTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入大小写字母以及数字："</span>);</span><br><span class="line">        String str = sc.next();</span><br><span class="line">        <span class="keyword">int</span> lower = countLower(str);</span><br><span class="line">        <span class="keyword">int</span> upper = countUpper(str);</span><br><span class="line">        <span class="keyword">int</span> num = countNum(str);</span><br><span class="line">        System.out.println(<span class="string">"小写字母个数为："</span> + lower);</span><br><span class="line">        System.out.println(<span class="string">"大写字母个数为："</span> + upper);</span><br><span class="line">        System.out.println(<span class="string">"数字字符个数为："</span> + num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统计字符串中数字个数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">countNum</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str.charAt(i)&gt;=<span class="string">'0'</span> &amp;&amp; str.charAt(i)&lt;=<span class="string">'9'</span>)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统计字符串中大写字母个数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">countUpper</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str.charAt(i)&gt;=<span class="string">'A'</span> &amp;&amp; str.charAt(i)&lt;=<span class="string">'Z'</span>)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统计字符串中小写字母个数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">countLower</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str.charAt(i)&gt;=<span class="string">'a'</span> &amp;&amp; str.charAt(i)&lt;=<span class="string">'z'</span>)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">请输入大小写字母以及数字：</span><br><span class="line">ASDASDsdasdaddASJDBJ8734876#&amp;^$*&amp;#$^*&amp;%123asdASDASD</span><br><span class="line">小写字母个数为：<span class="number">11</span></span><br><span class="line">大写字母个数为：<span class="number">18</span></span><br><span class="line">数字字符个数为：<span class="number">10</span></span><br></pre></td></tr></table></figure>



<h2 id="二、StringBuilder类"><a href="#二、StringBuilder类" class="headerlink" title="二、StringBuilder类"></a>二、StringBuilder类</h2><h3 id="2-1-StringBuilder概述"><a href="#2-1-StringBuilder概述" class="headerlink" title="2.1 StringBuilder概述"></a>2.1 StringBuilder概述</h3><p>StringBuilder 是一个可变的字符序列，我们可以把它看成可变的字符串。</p>
<p>StringBuilder也是由字符组成的数据，本质也是字符数组，内部也是使用字符数组保存数据</p>
<h3 id="2-2-StringBuilder和String区别"><a href="#2-2-StringBuilder和String区别" class="headerlink" title="2.2 StringBuilder和String区别"></a>2.2 StringBuilder和String区别</h3><p>String：内容不可改变。</p>
<p>StringBuilder：内容可以改变。</p>
<p>String：字符串具有不变性，创建之后不能被改编，如果我们使用字符串进行拼接，每次都会创建型的字符串这样既耗时，又浪费空间。</p>
<p>StringBuilder：可以看成可变的字符串，如果使用StringBuilder进行拼接，效率会高一些。</p>
<h3 id="2-3-StringBuilder构造方法"><a href="#2-3-StringBuilder构造方法" class="headerlink" title="2.3 StringBuilder构造方法"></a>2.3 StringBuilder构造方法</h3><p><code>StringBuilder()</code>：使用该构造方法创建的StringBuilder对象里面没有任何内容。</p>
<p><code>StringBuilder(String str)</code> : 根据字符串的内容创建StringBuilder对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02StringBuilder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        System.out.println(<span class="string">"sb:"</span> + sb);</span><br><span class="line"></span><br><span class="line">        StringBuilder newSb = <span class="keyword">new</span> StringBuilder(<span class="string">"hello"</span>);</span><br><span class="line">        System.out.println(<span class="string">"newSb:"</span> + newSb);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：StringBuilder是一个特殊的引用类型，如果直接输出对象名，输出的是对象的内容。</strong></p>
<h3 id="2-4-StringBuilder常用方法"><a href="#2-4-StringBuilder常用方法" class="headerlink" title="2.4 StringBuilder常用方法"></a>2.4 StringBuilder常用方法</h3><p><code>StringBuilder append(任何类型)</code>：拼接(追加，添加)数据 。返回值是调用者对象本身。</p>
<p><code>StringBuilder reverse()</code>  ：对StringBuilder进行反转。返回值是调用者本身。</p>
<p><code>String toString()</code> ：将StringBuilder转成字符串并返回。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03StringBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="comment">// System.out.println("sb:" + sb);</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// StringBuilder newSb = sb.append("hello");</span></span><br><span class="line">        <span class="comment">// System.out.println("sb:" + sb);</span></span><br><span class="line">        <span class="comment">// System.out.println("newSb:" + newSb);</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// System.out.println(sb == newSb);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//链式编程</span></span><br><span class="line">        sb.append(<span class="string">"hello"</span>).append(<span class="string">"world"</span>).append(<span class="string">"java"</span>);</span><br><span class="line">        System.out.println(<span class="string">"sb:"</span> + sb); <span class="comment">//helloworldjava</span></span><br><span class="line"></span><br><span class="line">        sb.reverse();</span><br><span class="line">        System.out.println(<span class="string">"sb:"</span> + sb); <span class="comment">//avajdlrowolleh</span></span><br><span class="line"></span><br><span class="line">        String s = sb.reverse().toString();</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-5-String和StringBuilder相互转换"><a href="#2-5-String和StringBuilder相互转换" class="headerlink" title="2.5 String和StringBuilder相互转换"></a>2.5 String和StringBuilder相互转换</h3><p>StringBuilder —&gt; String : 调用toString()方法即可</p>
<p>String —&gt; StringBuilder : 通过StringBuilder的构造方法根据String创建StringBuilder对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04StringBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(<span class="string">"hello"</span>);</span><br><span class="line">        System.out.println(<span class="string">"sb:"</span> + sb);</span><br><span class="line"></span><br><span class="line">        String s = sb.toString();</span><br><span class="line">        System.out.println(<span class="string">"s:"</span> + s);</span><br><span class="line"></span><br><span class="line">        String str = <span class="string">"World"</span>;</span><br><span class="line">        StringBuilder sb1 = <span class="keyword">new</span> StringBuilder(str);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"str:"</span> + str);</span><br><span class="line">        System.out.println(<span class="string">"sb1"</span> + sb1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-6-练习——字符串拼接"><a href="#2-6-练习——字符串拼接" class="headerlink" title="2.6 练习——字符串拼接"></a>2.6 练习——字符串拼接</h3><p><strong>需求：定义一个方法，把 int 数组中的数据按照指定的格式拼接成一个字符串返回，调用该方法，并在控制台输出结果。例如，数组为int[] arr = {1,2,3}; ，执行方法后的输出结果为：[1, 2, 3]</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04StringBuilderTset</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        String str = arrayToString(nums);</span><br><span class="line">        System.out.println(<span class="string">"拼接后的字符串："</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">arrayToString</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(<span class="string">"["</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i&lt;nums.length-<span class="number">1</span>) &#123;</span><br><span class="line">                sb.append(nums[i] + <span class="string">","</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(<span class="string">"]"</span>);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>使用<code>next()</code>读取输入时遇到空格时自动截断字符串，看不到后面输入内容，<code>nextLine()</code>则不然。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test03</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String[] ss = &#123;<span class="string">"笨蛋"</span>,<span class="string">"尼玛"</span>,<span class="string">"傻瓜"</span>&#125;;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入一个字符串："</span>);</span><br><span class="line">        <span class="comment">//String str = sc.next();</span></span><br><span class="line">        String str = sc.nextLine();</span><br><span class="line">        String strFilter = filter(str,ss);</span><br><span class="line">        System.out.println(<span class="string">"过滤后的字符串为："</span> + strFilter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">filter</span><span class="params">(String str , String[] strings)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strings.length; i++) &#123;</span><br><span class="line">            str = str.replace(strings[i],<span class="string">"**"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="next-和nextLine-区别小结"><a href="#next-和nextLine-区别小结" class="headerlink" title="next()和nextLine()区别小结"></a>next()和nextLine()区别小结</h3><p><code>next()</code>是一定要读取到有效的字符后才可以结束输入，对输入有效字符之前遇到的<code>空格键</code>、<code>Tab键</code>或<code>Enter键</code>等结束符，<code>next()</code>方法会自动将其去掉，只有在输入有效字符之后，<code>next()</code>方法才将其后输入的<code>空格键</code>、<code>Tab键</code>或<code>Enter键</code>等视为<code>分隔符或结束符</code>。所以，<code>next()</code>不能读取含有空格的字符串。<br><code>nextLine()</code>返回的<code>Enter键</code>之前的<code>所有</code>字符，它是可以得到带空格的字符串的。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>学习</tag>
        <tag>问题</tag>
      </tags>
  </entry>
  <entry>
    <title>ArrayList集合</title>
    <url>/2020/07/22/ArrayList%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><p>为什么使用集合？</p>
<p>数组定长，如果存储满了，那么数组就无法继续保存数据了，所以有了集合。</p>
<p>集合就是一个容器，这个容器可以保存很多数据(元素)</p>
<a id="more"></a>

<h3 id="集合和数组的区别"><a href="#集合和数组的区别" class="headerlink" title="集合和数组的区别"></a>集合和数组的区别</h3><ul>
<li><p>数组的长度固定，集合的长度是可变的</p>
</li>
<li><p>数组既可以保存基本类型的数据，也可以保存引用类型的数据；集合只能保存引用类型的数据。</p>
</li>
</ul>
<h3 id="ArrayList集合"><a href="#ArrayList集合" class="headerlink" title="ArrayList集合"></a>ArrayList集合</h3><p><code>ArrayList&lt;E&gt;</code>表示集合，其中<code>&lt;E&gt;</code>是一个特殊的东西，叫做泛型。想要使用这个集合是，就使用相应的引用类型替换掉<code>E</code>即可。</p>
<p><code>集合想要保存什么类型的数据，就用什么类型替换掉尖括号中的E</code></p>
<p>举例：</p>
<ul>
<li><code>ArrayList&lt;String&gt;</code>：集合保存的就是<code>字符串(String)</code>类型的数据</li>
<li><code>ArrayList&lt;Student&gt;</code>：集合保存的就是<code>Student</code>类型的数据</li>
</ul>
<p><strong>注意：集合是一种特殊的引用类型，直接打印集合名称，将打印出里面的内容</strong></p>
<h3 id="ArrayList集合的构造方法"><a href="#ArrayList集合的构造方法" class="headerlink" title="ArrayList集合的构造方法"></a>ArrayList集合的构造方法</h3><p><code>ArrayList()</code>：空参构造方法，使用该构造方法创建集合时里面没有任何数据。</p>
<h3 id="ArrayList集合的常用方法"><a href="#ArrayList集合的常用方法" class="headerlink" title="ArrayList集合的常用方法"></a>ArrayList集合的常用方法</h3><p><code>boolean add(E e)</code>:添加元素到集合的末尾</p>
<p><code>void add(int index, E element)</code>：在指定位置添加元素。</p>
<p><code>int size()</code>：获取集合的大小，集合中有几个元素，集合的大小就是多少。</p>
<p><code>E get(int index)</code>：获取指定索引位置的元素。</p>
<p><code>E remove(int index)</code>：根据索引删除元素，并且返回被删除的元素。</p>
<p><code>boolean remove(Object o)</code>：直接删除指定元素，删除成功返回true。</p>
<p><code>E set(int index, E element)</code>：替换元素。使用element替换掉index索引位置的元素，返回值就是被替换掉的元素</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        list.add(<span class="string">"hello"</span>);</span><br><span class="line">        list.add(<span class="string">"world"</span>);</span><br><span class="line">        list.add(<span class="string">"java"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"list:"</span> + list);</span><br><span class="line"></span><br><span class="line">        System.out.println(list.set(<span class="number">2</span>, <span class="string">"php"</span>));</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// System.out.println(list.remove("java"));</span></span><br><span class="line">        <span class="comment">// System.out.println(list);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// System.out.println(list.remove(1));</span></span><br><span class="line">        <span class="comment">// System.out.println(list);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// System.out.println("获取索引为1的元素：" + list.get(1));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out.println("集合的大小是：" + list.size());</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// list.add(2, "php");</span></span><br><span class="line">        <span class="comment">// System.out.println("list:" + list);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="集合存储基本类型的数据"><a href="#集合存储基本类型的数据" class="headerlink" title="集合存储基本类型的数据"></a>集合存储基本类型的数据</h3><p>前文说到，集合只能存储引用类型的数据，那么我们如果要存储基本类型的数据时，要如何做?</p>
<p>解决方法：集合保存基本类型的数据，需要使用对应的包装类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    list.add(<span class="number">100</span>);</span><br><span class="line">    list.add(<span class="number">200</span>);</span><br><span class="line">    list.add(<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(list);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="概念引入——包装类"><a href="#概念引入——包装类" class="headerlink" title="概念引入——包装类"></a>概念引入——包装类</h4><p>每种基本数据类型都有它所对应的引用类型，这个对应的引用类型叫做包装类。</p>
<table>
<thead>
<tr>
<th>基本类型</th>
<th>包装类</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>Byte</td>
</tr>
<tr>
<td>short</td>
<td>Short</td>
</tr>
<tr>
<td>int</td>
<td>Integer</td>
</tr>
<tr>
<td>long</td>
<td>Long</td>
</tr>
<tr>
<td>float</td>
<td>Float</td>
</tr>
<tr>
<td>double</td>
<td>Double</td>
</tr>
<tr>
<td>boolean</td>
<td>Boolean</td>
</tr>
<tr>
<td>char</td>
<td>Character</td>
</tr>
</tbody></table>
<h3 id="集合的遍历"><a href="#集合的遍历" class="headerlink" title="集合的遍历"></a>集合的遍历</h3><p>集合的遍历，和数组基本相同，使用<code>size()</code>方法获取集合的长度，然后使用for循环，遍历即可。</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="string">"张三丰"</span>);</span><br><span class="line">    list.add(<span class="string">"李四"</span>);</span><br><span class="line">    list.add(<span class="string">"张张"</span>);</span><br><span class="line">    list.add(<span class="string">"拉拉"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">        System.out.println(list.get(i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用集合存储Student类型数据并遍历打印</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line">    Student s0 = <span class="keyword">new</span> Student(<span class="string">"拉拉"</span>,<span class="number">20</span>);</span><br><span class="line">    Student s1 = <span class="keyword">new</span> Student(<span class="string">"哈哈"</span>,<span class="number">22</span>);</span><br><span class="line">    Student s2 = <span class="keyword">new</span> Student(<span class="string">"呵呵"</span>,<span class="number">24</span>);</span><br><span class="line">    list.add(s0);</span><br><span class="line">    list.add(s1);</span><br><span class="line">    list.add(s2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">        Student stu = list.get(i);</span><br><span class="line">        System.out.println(stu.getName()+<span class="string">"-"</span>+stu.getAge());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Student类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, String age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//  get/set方法略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Scanner录入产生的问题"><a href="#Scanner录入产生的问题" class="headerlink" title="Scanner录入产生的问题"></a>Scanner录入产生的问题</h3><p>在一个方法中，同一个Scanner对象，如果即调用<code>nextLine</code>键盘录入字符串，又调用其他的，<code>nextXxx</code>方法，就有可能引发问题,，因为<code>nextLine</code>方法能够检查其他方法的回车，从而导致录入结束。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    System.out.println(<span class="string">"请输入一个数字："</span>);</span><br><span class="line">    <span class="keyword">int</span> num = sc.nextInt();</span><br><span class="line">    System.out.println(<span class="string">"num:"</span>+num);</span><br><span class="line">    System.out.println(<span class="string">"请输入一个字符串："</span>);</span><br><span class="line">    String str = sc.nextLine();</span><br><span class="line">    System.out.println(<span class="string">"str:"</span> + str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的main方法在执行时，<code>str</code>的值为空，没有进行录入赋值，<code>nextLine()</code>方法检测到<code>nextInt()</code>方法的回车，提前结束了输入，控制台内容如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">请输入一个数字：</span><br><span class="line"><span class="number">18</span></span><br><span class="line">num:<span class="number">18</span></span><br><span class="line">请输入一个字符串：</span><br><span class="line">str:</span><br></pre></td></tr></table></figure>

<p>解决办法：</p>
<p>给<code>nextInt</code>，<code>nextDouble</code>单独创建一个<code>Scanner</code>对象</p>
<p>给<code>nextLine</code>单独创建一个对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    System.out.println(<span class="string">"请输入一个数字："</span>);</span><br><span class="line">    <span class="keyword">int</span> num = sc.nextInt();</span><br><span class="line">    System.out.println(<span class="string">"num:"</span>+num);</span><br><span class="line">    Scanner sc2 = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    System.out.println(<span class="string">"请输入一个字符串："</span>);</span><br><span class="line">    String str = sc2.nextLine();</span><br><span class="line">    System.out.println(<span class="string">"str:"</span> + str);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">请输入一个数字：</span><br><span class="line"><span class="number">12</span></span><br><span class="line">num:<span class="number">12</span></span><br><span class="line">请输入一个字符串：</span><br><span class="line">dsd</span><br><span class="line">str:dsd</span><br></pre></td></tr></table></figure>

<h3 id="综合案例——学生管理系统"><a href="#综合案例——学生管理系统" class="headerlink" title="综合案例——学生管理系统"></a>综合案例——学生管理系统</h3><p>需求：针对目前我们的所学内容，完成一个综合案例：学生管理系统！</p>
<p>该系统主要功能如下：</p>
<ul>
<li>添加学生：通过键盘录入学生信息，添加到集合中</li>
<li>删除学生：通过键盘录入要删除学生的学号，将该学生对象从集合中删除</li>
<li>修改学生：通过键盘录入要修改学生的学号，将该学生对象其他信息进行修改</li>
<li>查看学生：将集合中的学生对象信息进行展示</li>
<li>退出系统：结束程序</li>
</ul>
<p>学生类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String id, String name, String age, String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// get/set方法略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>系统类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Student&gt; stuList = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        Scanner scId = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String id = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"================欢迎进入学生管理系统==================="</span>);</span><br><span class="line">            System.out.println(<span class="string">"1.添加学员"</span>);</span><br><span class="line">            System.out.println(<span class="string">"2.删除学员"</span>);</span><br><span class="line">            System.out.println(<span class="string">"3.修改学员"</span>);</span><br><span class="line">            System.out.println(<span class="string">"4.查找学员"</span>);</span><br><span class="line">            System.out.println(<span class="string">"5.退出系统"</span>);</span><br><span class="line">            System.out.println(<span class="string">"====================================================="</span>);</span><br><span class="line">            System.out.println(<span class="string">"请输入功能序号："</span>);</span><br><span class="line">            <span class="keyword">int</span> target = sc.nextInt();</span><br><span class="line">            <span class="keyword">switch</span> (target)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    addStudent(stuList);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    System.out.println(<span class="string">"请输入要删除学员的id："</span>);</span><br><span class="line">                    id = scId.nextLine();</span><br><span class="line">                    deleteStudent(stuList,id);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    System.out.println(<span class="string">"请输入要修改学员的id："</span>);</span><br><span class="line">                    id = scId.nextLine();</span><br><span class="line">                    changeStudent(stuList,id);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                    lookStudent(stuList);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                    System.out.println(<span class="string">"bye~"</span>);</span><br><span class="line">                    System.exit(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">"输入有误，请输入1-5之间的数字！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断学员id是否存在，存在返回对象的在集合中的索引，不存在返回-1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stuList</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">decideIdExist</span><span class="params">(ArrayList&lt;Student&gt; stuList, String id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stuList.size(); i++) &#123;</span><br><span class="line">            Student stu = stuList.get(i);</span><br><span class="line">            <span class="keyword">if</span> (stu.getId().equals(id))&#123;</span><br><span class="line">                index = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id修改学生信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stuList</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">changeStudent</span><span class="params">(ArrayList&lt;Student&gt; stuList, String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = decideIdExist(stuList, id);</span><br><span class="line">        <span class="keyword">if</span> (index == -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"输入的学员id不存在，"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Student student = stuList.get(index);</span><br><span class="line">            Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            System.out.println(<span class="string">"修改学生姓名为"</span>);</span><br><span class="line">            String name = sc.nextLine();</span><br><span class="line">            System.out.println(<span class="string">"修改学生年龄为"</span>);</span><br><span class="line">            String age = sc.nextLine();</span><br><span class="line">            System.out.println(<span class="string">"修改学生所在地为"</span>);</span><br><span class="line">            String address = sc.nextLine();</span><br><span class="line">            student.setName(name);</span><br><span class="line">            student.setAge(age);</span><br><span class="line">            student.setAddress(address);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看所有信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stuList</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">lookStudent</span><span class="params">(ArrayList&lt;Student&gt; stuList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (stuList.isEmpty())&#123;</span><br><span class="line">            System.out.println(<span class="string">"学生列表为空，请添加后在查看。"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"id\t\t姓名\t\t年龄\t\t所在地"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stuList.size(); i++) &#123;</span><br><span class="line">            Student student = stuList.get(i);</span><br><span class="line">            System.out.println(student.getId()+<span class="string">"\t"</span>+student.getName()+<span class="string">"\t"</span>+student.getAge()+<span class="string">"\t"</span>+student.getAddress());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除学生信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stuList</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteStudent</span><span class="params">(ArrayList&lt;Student&gt; stuList, String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = decideIdExist(stuList, id);</span><br><span class="line">        <span class="keyword">if</span> (index == -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"输入的学员id不存在，"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            stuList.remove(index);</span><br><span class="line">            System.out.println(<span class="string">"删除成功！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加学生信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stuList</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addStudent</span><span class="params">(ArrayList&lt;Student&gt; stuList)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String id = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"请输入学生id:"</span>);</span><br><span class="line">            id = sc.nextLine();</span><br><span class="line">            <span class="keyword">if</span> (decideIdExist(stuList,id) != -<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"学员id已存在,请重新输入学员id"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"请输入学生姓名:"</span>);</span><br><span class="line">        String name = sc.nextLine();</span><br><span class="line">        System.out.println(<span class="string">"请输入学生年龄："</span>);</span><br><span class="line">        String age = sc.nextLine();</span><br><span class="line">        System.out.println(<span class="string">"请输入学生所在地："</span>);</span><br><span class="line">        String address = sc.nextLine();</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student(id,name,age,address);</span><br><span class="line">        stuList.add(stu);</span><br><span class="line">        System.out.println(<span class="string">"添加成功！！！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>学习</tag>
        <tag>问题</tag>
        <tag>集合</tag>
      </tags>
  </entry>
  <entry>
    <title>继承、抽象类与模板设计模式、final关键字</title>
    <url>/2020/07/23/%E7%BB%A7%E6%89%BF%E3%80%81%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%A8%A1%E6%9D%BF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%81final%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    <content><![CDATA[<h2 id="一、匿名对象"><a href="#一、匿名对象" class="headerlink" title="一、匿名对象"></a>一、匿名对象</h2><p>匿名对象：没有名字的对象</p>
<p>有名字：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student stu = <span class="keyword">new</span> Student()</span><br></pre></td></tr></table></figure>

<p>没有名字：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Student();</span><br></pre></td></tr></table></figure>



<p>匿名对象好处：稍微简化了操作</p>
<p>使用场景：</p>
<ul>
<li>如果某个对象只需要使用一次，那么可以使用匿名对象。</li>
<li>匿名对象可以当作参数传递</li>
</ul>
<a id="more"></a>

<h2 id="二、继承"><a href="#二、继承" class="headerlink" title="二、继承"></a>二、继承</h2><p>继承是多态的前提，没有继承就没有多态</p>
<p>Java中的继承描述的是事物之间的所属关系，比如人属于动物，就可以让人区继承动物。</p>
<p>子类继承父类，会拥有父类的所有成员(父类的私有成员也能继承，不过无法直接访问)</p>
<p><strong>继承的好处：提高代码的复用性</strong></p>
<h3 id="2-1-继承的格式"><a href="#2-1-继承的格式" class="headerlink" title="2.1 继承的格式"></a>2.1 继承的格式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-子类不能继承的内容"><a href="#2-2-子类不能继承的内容" class="headerlink" title="2.2 子类不能继承的内容"></a>2.2 子类不能继承的内容</h3><ul>
<li>父类中的构造方法子类是无法继承的</li>
<li>父类中的私有成员子类可以继承，但是继承了也没法【直接使用】，可以间接使用，通过<code>get/set</code>方法</li>
</ul>
<h3 id="2-3-继承后的特点——成员变量"><a href="#2-3-继承后的特点——成员变量" class="headerlink" title="2.3 继承后的特点——成员变量"></a>2.3 继承后的特点——成员变量</h3><ul>
<li>如果子父类的成员变量不同名时，那么访问时取决于是哪个成员变量名</li>
<li>如果子父类成员变量同名，那么在 子类中优先访问子类的成员变量</li>
<li>如果子父类成员变量同名了，那么想要在子类中访问父类的成员变量，需要使用<code>super.成员变量名</code>来访问。</li>
</ul>
<h3 id="2-4-继承后的特点——成员方法"><a href="#2-4-继承后的特点——成员方法" class="headerlink" title="2.4 继承后的特点——成员方法"></a>2.4 继承后的特点——成员方法</h3><ul>
<li>如果子父类成员方法不同名时，取决于调用哪个方法名</li>
<li>如果子父类的成员方法同名时，那么使用子类对象去调用方法时，优先访问子类的成员方法。</li>
<li>我们可以在子类的方法中，使用<code>super.方法名()</code>，指定父类中的某个方法</li>
</ul>
<h3 id="2-5-继承后的特点——构造方法"><a href="#2-5-继承后的特点——构造方法" class="headerlink" title="2.5 继承后的特点——构造方法"></a>2.5 继承后的特点——构造方法</h3><ul>
<li><p>子类无法继承父类的构造方法</p>
</li>
<li><p>子类的任何构造方法中第一行会有一句隐藏的代码<code>super();</code>，调用父类的无参构造</p>
</li>
</ul>
<h3 id="2-6-方法重写"><a href="#2-6-方法重写" class="headerlink" title="2.6 方法重写"></a>2.6 方法重写</h3><p>注意事项：</p>
<ul>
<li>在方法重写的，参数列表必须相同</li>
<li>子类方法的权限必须大于等于父类方法的权限</li>
<li>私有方法不能重写</li>
</ul>
<p><code>方法重写时,方法名,参数列表,修饰符,返回值类型一般都是一致的</code></p>
<p>应用场景：父类方法不能满足子类需要时，就可以在子类进行方法的重写。</p>
<p>@Override：方法重写注解</p>
<p>作用：如果我们在方法上写了@Override注解，那么就代表方法是重写的，编译器就会帮助我们检查重写的语法是否正确</p>
<h3 id="2-7-super-…-和this-…"><a href="#2-7-super-…-和this-…" class="headerlink" title="2.7 super(…)和this(…)"></a>2.7 super(…)和this(…)</h3><h4 id="2-7-1-super"><a href="#2-7-1-super" class="headerlink" title="2.7.1 super"></a>2.7.1 super</h4><p>super的三种用途：</p>
<ul>
<li>可以访问父类的成员变量：<code>super.变量名;</code></li>
<li>可以访问父类的成员方法：<code>super.方法名();</code></li>
<li>可以调用父类的构造方法：<code>super(参数);</code></li>
</ul>
<h4 id="2-7-2-this"><a href="#2-7-2-this" class="headerlink" title="2.7.2 this"></a>2.7.2 this</h4><p>this的三种用途：</p>
<ul>
<li>可以访问本类的成员变量：<code>this.变量名;</code></li>
<li>调用本类的其他成员方法：<code>this.方法名();</code></li>
<li>调用本类的其他构造方法：<code>this(参数);</code></li>
</ul>
<h3 id="2-8-继承的特点"><a href="#2-8-继承的特点" class="headerlink" title="2.8 继承的特点"></a>2.8 继承的特点</h3><ol>
<li>Java只支持单继承，不支持多继承<ul>
<li>一个子类，最多只能有一个父类</li>
</ul>
</li>
<li>一个类可以有多个子类。<ul>
<li>一个父类，可以有多个子类</li>
</ul>
</li>
<li>可以多层继承<ul>
<li>一个子类，可以继承一个父类，这个父类可以继承他的父类，它的父类有继承其他类</li>
</ul>
</li>
</ol>
<h2 id="三、抽象类"><a href="#三、抽象类" class="headerlink" title="三、抽象类"></a>三、抽象类</h2><h3 id="3-1-抽象类的概念和引入"><a href="#3-1-抽象类的概念和引入" class="headerlink" title="3.1 抽象类的概念和引入"></a>3.1 抽象类的概念和引入</h3><p>抽象类：含有抽象方法的类，那么该类一定是一个抽象类。</p>
<p>抽象方法：只有方法的声明(头部)，没有方法体的方法，我们称为抽象方法</p>
<h3 id="3-2-abstract使用格式"><a href="#3-2-abstract使用格式" class="headerlink" title="3.2 abstract使用格式"></a>3.2 abstract使用格式</h3><p>抽象方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> 返回值类型 方法名(参数列表);</span><br></pre></td></tr></table></figure>

<p>抽象类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    <span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>抽象类的使用：</p>
<ol>
<li>抽象类不能直接new对象</li>
<li>抽象类天生就是被其它类继承的</li>
<li>其他类继承抽象类后，必须重写抽象类的所有抽象方法，让后才能创建子类对象，否则子类还会是一个抽象类</li>
</ol>
<p>【定义抽象类—&gt;定义一个子类继承抽象类—&gt;重写抽象类中的所有抽象方法】</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"猫跑跑跑..."</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-3-抽象类的特征和注意事项"><a href="#3-3-抽象类的特征和注意事项" class="headerlink" title="3.3 抽象类的特征和注意事项"></a>3.3 抽象类的特征和注意事项</h3><p>抽象类的特点：有得有失</p>
<ul>
<li><p>得：得到了拥有抽象方法得能力</p>
</li>
<li><p>失：失去了创建对象得能力</p>
</li>
</ul>
<p>除了以上两点，在其他方面与普通类没有多大区别</p>
<p>注意事项：</p>
<ul>
<li>抽象类不能创建对象</li>
<li>抽象类是有构造方法的，构造方法可以给成员变量赋值</li>
<li>抽象类中，不一定含有抽象方法，但是含有抽象方法的类一定是抽象类（抽象类中可以没有抽象方法）</li>
<li>抽象类的子类，必须重写抽象父类中所有的抽象方法，不然子类也是一个抽象类</li>
<li>抽象类的作用为了让子类继承，抽象方法的作用为了让所有子类重写，作为类的模板！</li>
</ul>
<h3 id="3-4-抽象类存在的意义"><a href="#3-4-抽象类存在的意义" class="headerlink" title="3.4 抽象类存在的意义"></a>3.4 抽象类存在的意义</h3><p>抽象类体现的是模板思想</p>
<h3 id="3-5-模板设计模式"><a href="#3-5-模板设计模式" class="headerlink" title="3.5 模板设计模式"></a>3.5 模板设计模式</h3><p><code>模板模式思想：将固定的流程定义在父类中，不同的地方使用抽象方法，让子类去继承重写</code>。</p>
<p>需求：</p>
<ul>
<li><p>新司机开车：开门、点火、双手紧握方向盘、刹车、熄火</p>
</li>
<li><p>老司机开车：开门、点火、右手握方向盘左手抽烟、刹车、熄火</p>
</li>
</ul>
<p>案例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 父类：司机类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Driver</span> </span>&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开车的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">driver</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"开门..."</span>);</span><br><span class="line">        System.out.println(<span class="string">"点火..."</span>);</span><br><span class="line">        <span class="comment">//不同的司机开车的姿势不一样</span></span><br><span class="line">        ziShi();</span><br><span class="line">        System.out.println(<span class="string">"刹车..."</span>);</span><br><span class="line">        System.out.println(<span class="string">"熄火..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开车的姿势</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">ziShi</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子类：新司机</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewDriver</span> <span class="keyword">extends</span> <span class="title">Driver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ziShi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"双手紧握方向盘..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子类：老司机</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OldDriver</span> <span class="keyword">extends</span> <span class="title">Driver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ziShi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"右手握方向盘左手抽烟..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDriver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        NewDriver nb = <span class="keyword">new</span> NewDriver();</span><br><span class="line">        nb.driver();</span><br><span class="line">        System.out.println(<span class="string">"=================="</span>);</span><br><span class="line">        OldDriver ob = <span class="keyword">new</span> OldDriver();</span><br><span class="line">        ob.driver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="四、final关键字"><a href="#四、final关键字" class="headerlink" title="四、final关键字"></a>四、final关键字</h2><h3 id="4-1-final关键字"><a href="#4-1-final关键字" class="headerlink" title="4.1 final关键字"></a>4.1 final关键字</h3><p><code>final</code>：最终的，最后的，不可变的</p>
<p>可以用来修饰：<code>类、成员变量、局部变量（基本类型、引用类型），成员方法</code></p>
<h3 id="4-2-final的作用"><a href="#4-2-final的作用" class="headerlink" title="4.2 final的作用"></a>4.2 final的作用</h3><h4 id="4-2-1-final修饰类"><a href="#4-2-1-final修饰类" class="headerlink" title="4.2.1 final修饰类"></a>4.2.1 final修饰类</h4><p>作用：<code>被final修饰的类</code>，称为太监类：该类<code>不能被继承</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span></span>&#123;	<span class="comment">//编译报错，因为不能继承final修饰的类Fu</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-2-final修饰方法"><a href="#4-2-2-final修饰方法" class="headerlink" title="4.2.2 final修饰方法"></a>4.2.2 final修饰方法</h4><p>作用：<code>被final修饰的方法，称为最终方法：该方法不能被子类重写</code></p>
<h4 id="4-2-3-final修饰局部变量：基本类型变量"><a href="#4-2-3-final修饰局部变量：基本类型变量" class="headerlink" title="4.2.3 final修饰局部变量：基本类型变量"></a>4.2.3 final修饰局部变量：基本类型变量</h4><p>作用：<code>被final修饰的基本类型变量，只能赋值一次。</code>【这种变量一般称为常量，<code>常量名一般大写，多个单词之间下划线隔开</code>】</p>
<h4 id="4-2-4-final修饰引用类型变量"><a href="#4-2-4-final修饰引用类型变量" class="headerlink" title="4.2.4 final修饰引用类型变量"></a>4.2.4 final修饰引用类型变量</h4><p>作用：<code>被final修饰的引用类型变量，只能赋值一次</code>，该引用类型中<code>保存的地址值不能改变</code>，但是<code>地址指向的空间中的内容是可以改变的</code>。</p>
<h4 id="4-2-5-final修饰成员变量"><a href="#4-2-5-final修饰成员变量" class="headerlink" title="4.2.5 final修饰成员变量"></a>4.2.5 final修饰成员变量</h4><p>作用：<code>被final修饰的成员变量，只能赋值一次，必须在创建对象之前赋值(默认值不算)</code>。</p>
<p>我们可以在<code>定义成员变量时直接赋值</code>，也可以先定义成员变量，<code>在构造方法给成员变量赋值</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span></span>&#123;</span><br><span class="line">	<span class="keyword">final</span> <span class="keyword">int</span> AGE = <span class="number">10</span>; <span class="comment">//直接赋值</span></span><br><span class="line">	<span class="keyword">final</span> String NAME;  <span class="comment">//先定义不赋值</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        NAME = “加菲”; <span class="comment">//在构造方法中赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-6-final的注意事项"><a href="#4-2-6-final的注意事项" class="headerlink" title="4.2.6 final的注意事项"></a>4.2.6 final的注意事项</h4><ol>
<li><code>final和abstract不能同时修饰类</code></li>
<li><code>final和abstract不能同时修饰方法</code></li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h3><p>概念：如果我们创建对象时，没有用变量接收对象的地址，那么就是一个匿名对象。</p>
<p>格式：<code>new 数据类型();</code></p>
<p>好处：稍微简化我们的写法</p>
<p>使用场景：</p>
<ul>
<li>如果某个对象只用一次，可以使用匿名对象</li>
<li>可以使用匿名对象作为方法参数传递</li>
</ul>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>概念：Java中国继承描述的时事务之间的所属关系：比如老师属于员工，就可以让老师类继承员工类。</p>
<p>好处：提高代码的复用性。子类继承父类会自动拥有父类的所有成员</p>
<p>特点：类与类之间只能单继承，Java支持多级继承，一个父类可以有多个子类</p>
<p>方法的重写：</p>
<ul>
<li>如果子类中出现了和父类一样的方法，那么这个就是方法得重写</li>
<li>使用场景：如果父类的方法不能满足子类的需求，可以在子类中重写方法</li>
</ul>
<p>继承中构造方法的特点：</p>
<ol>
<li>构造方法不能继承</li>
<li>创建子类对象时，会先执行父类的构造方法，因为在子类构造方法的第一行有一个隐藏的super</li>
<li>我们也可以使用super手动调用父类的构造方法。</li>
<li>如果super调用父类的构造方法，只能写在第一行。</li>
</ol>
<p>super关键字：</p>
<ul>
<li><p>可以访问父类的成员方法：<code>super.方法名()</code></p>
</li>
<li><p>可以访问父类的成员变量：<code>super.变量名</code></p>
</li>
<li><p>可以访问父类的构造方法：<code>super()</code></p>
</li>
</ul>
<p>this关键字：</p>
<ul>
<li><p>可以访问本类的成员方法：<code>this.方法名()</code></p>
</li>
<li><p>可以访问本类的成员变量：<code>this.变量名</code></p>
</li>
<li><p>可以访问本类的构造方法：<code>this()</code></p>
</li>
</ul>
<h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>当某个方法的方法体我们说不清，不知道怎么写时，可以把这个方法定义成抽象方法，抽象方法所在的类必须是抽象类。</p>
<p>抽象类格式：<code>public abstract class 类名 {}</code></p>
<p>抽象方法格式：<code>public abstract 返回值类型 方法名(参数列表);</code></p>
<p>抽象类的使用：</p>
<ol>
<li>抽象类是给子类用的，我们要定义一个类，去继承抽象类。</li>
<li>重写抽象类中的所有的抽象方法。</li>
<li>创建这个子类对象，调用方法。</li>
</ol>
<p>抽象类的注意事项：</p>
<ol>
<li>抽象类不能创建对象</li>
<li>抽象类中也可以有构造方法，构造方法是给子类使用的.</li>
<li>抽象类中可以有抽象方法，也可以有非抽象的内容。抽象方法所在的类必须是一个抽象类。</li>
<li>一个普通类在继承抽象类时，需要重写里面所有的抽象方法。一个抽象类在继承抽象类时，可以不重写里面的抽象方法。</li>
<li>抽象类都是作为父类存在，抽象类体现的是模板思想【司机开车案例】</li>
</ol>
<h3 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h3><p><code>final</code>表示最终的不可改变的。</p>
<p>注意：</p>
<ul>
<li><p>如果final修饰类，这个类不能被继承，但是可以继承其他类。</p>
</li>
<li><p>如果fianl修饰方法，这个方法不能被重写，但是可以被子类继承使用。</p>
</li>
<li><p>如果final修饰变量，该变量就变成了常量。只能被赋值一次，一旦赋值就不能更改了。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>学习</tag>
        <tag>面向对象</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>static、接口、多态、内部类</title>
    <url>/2020/07/24/static%E3%80%81%E6%8E%A5%E5%8F%A3%E3%80%81%E5%A4%9A%E6%80%81%E3%80%81%E5%86%85%E9%83%A8%E7%B1%BB/</url>
    <content><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="一、static关键字"><a href="#一、static关键字" class="headerlink" title="一、static关键字"></a>一、static关键字</h2><h3 id="static修饰变量"><a href="#static修饰变量" class="headerlink" title="static修饰变量"></a>static修饰变量</h3><p>如果某个成员变量用<code>static</code>关键字修饰，那么这个成员变量就不再属于对象了，<code>属于类</code>。会被该类的<code>所有对象共享</code></p>
<p>被<code>static</code>修饰的成员，可以通过对象调用，也可以通过类名直接调用【推荐<code>类名直接调用</code>】</p>
<a id="more"></a>

<p>格式：</p>
<p><code>类名.成员变量</code></p>
<p>小结：</p>
<ul>
<li>如果某个成员变量不使用static修饰，那么这个成员变量是属于对象的，要有对象才能调用</li>
<li>如果某个成员变量使用static修饰，那么这个成员变量是属于类的，可以通过类名直接调用</li>
</ul>
<h3 id="static修饰方法"><a href="#static修饰方法" class="headerlink" title="static修饰方法"></a>static修饰方法</h3><p>如果一个方法使用static修饰，就不属于对象了，属于类，可以通过类名直接调用</p>
<p>静态方法和非静态方法：</p>
<ul>
<li>静态方法：可以通过类名，也可以通过对象名调用，建议通过类名调用</li>
<li>非静态方法：必须有对象才能调用。</li>
</ul>
<p><strong>如果调用本类中的静态方法，可以省略类名。</strong></p>
<h3 id="静态中的注意事项"><a href="#静态中的注意事项" class="headerlink" title="静态中的注意事项"></a>静态中的注意事项</h3><ol>
<li>静态中不能直接访问非静态的内容<ul>
<li>静态属于类，非静态属于对象，刚开始有类的时候还没有对象呢，所以不能再静态中使用非静态内容</li>
</ul>
</li>
<li>静态方法中不能使用this和super关键字</li>
</ol>
<h2 id="二、接口"><a href="#二、接口" class="headerlink" title="二、接口"></a>二、接口</h2><h3 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h3><p>接口是一种规范（给类定义的规范，类和接口发生关系后，类需要重写接口中所有的抽象方法）</p>
<p>接口也是一种引用类型。</p>
<p>什么是接口？</p>
<ul>
<li>接口是一种极端的抽象类，接口中只能定义【抽象方法】。【<code>JDK8之前</code>】</li>
<li>接口中新增【默认方法】和【静态方法】【<code>JDK8的时候</code>】</li>
<li>接口中又新增了【私有方法】【<code>JDK9的时候</code>，了解即可】</li>
</ul>
<h3 id="2-2-定义格式"><a href="#2-2-定义格式" class="headerlink" title="2.2 定义格式"></a>2.2 定义格式</h3><p>定义接口关键字：<code>interface</code></p>
<p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 接口名</span>&#123;</span><br><span class="line">	<span class="comment">//抽象方法【jdk8之前】</span></span><br><span class="line">    <span class="comment">//默认方法【jdk8】</span></span><br><span class="line">    <span class="comment">//静态方法【jdk8】</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>·<strong>注意：</strong></p>
<ul>
<li><p>接口中的抽象方法可以省略public abstract关键字</p>
</li>
<li><p>如果省略public abstract，那么抽象方法也是使用public abstract修饰的</p>
</li>
</ul>
<h3 id="2-3-接口的使用"><a href="#2-3-接口的使用" class="headerlink" title="2.3 接口的使用"></a>2.3 接口的使用</h3><p>接口与抽象类都不能创建对象</p>
<p>接口也是用于给别的类“实现”的，实现的作用和继承基本类似。</p>
<p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 实现类 <span class="keyword">implements</span> 接口名</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//实现类必须重写接口中的所有抽象方法</span></span><br><span class="line">	<span class="comment">//实现类可以选择性重写接口中的默认方法（重写后不能有default关键字）</span></span><br><span class="line">    <span class="comment">//静态方法没有重写的说法，因为静态方法通过其所在的接口名/类名即可调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-4-接口的多实现"><a href="#2-4-接口的多实现" class="headerlink" title="2.4 接口的多实现"></a>2.4 接口的多实现</h3><p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 实现类 <span class="keyword">implements</span> 接口名1,接口名2,...</span>&#123;</span><br><span class="line">	<span class="comment">//实现类必须重写接口中所有的抽象方法，如果有一样的抽象方法，实现类是需要重写一次</span></span><br><span class="line">    <span class="comment">//实现类选择性重写所有接口的默认方法，如果有一样的默认方法，实现类必须重写一次</span></span><br><span class="line">    <span class="comment">//静态方法没有重写的说法，因为静态方法通过其所在的接口名/类名即可调用，如果有一样的静态方法，也不影响</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-5-实现和继承的优先级问题"><a href="#2-5-实现和继承的优先级问题" class="headerlink" title="2.5 实现和继承的优先级问题"></a>2.5 实现和继承的优先级问题</h3><p>Java中允许继承和实现同时存在，允许一个类继承一个父类的同时实现多个接口。</p>
<p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 子类/实现类 <span class="keyword">extends</span> 父类 <span class="keyword">implements</span> 接口1,接口2,...</span>&#123;</span><br><span class="line">		<span class="comment">//1.必须重写父类以及接口中的所有抽象方法</span></span><br><span class="line">    			<span class="comment">//如果有一样的抽象方法，只需要重写一次</span></span><br><span class="line">        <span class="comment">//2.选择性重写父类的普通方法和所有接口的默认方法，</span></span><br><span class="line">    			<span class="comment">//如果有一样的默认方法，必须重写一次</span></span><br><span class="line">                <span class="comment">//如果有父类的普通方法和接口的默认方法一样，实现类可以不重写</span></span><br><span class="line">        <span class="comment">//3.静态方法没有重写的说法。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【继承比实现的优先级高】</p>
<h3 id="2-6-接口的的多继承【了解】"><a href="#2-6-接口的的多继承【了解】" class="headerlink" title="2.6 接口的的多继承【了解】"></a>2.6 接口的的多继承【了解】</h3><p><code>类和类         单继承</code></p>
<p><code>类和接口     多实现</code></p>
<p><code>接口和接口     多继承</code></p>
<p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 子接口 <span class="keyword">extends</span> 父接口1,父接口2,...</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>如果多个父接口中有同名的抽象方法，没有影响，抽象方法没有方法体，将来肯定要重写，，重写之后的内容是什么，执行的内容就是什么</p>
</li>
<li><p>如果父接口中有同名的默认方法，有影响，必须在子接口中进行重写</p>
</li>
</ol>
<h3 id="2-7-接口中其他成员特点"><a href="#2-7-接口中其他成员特点" class="headerlink" title="2.7 接口中其他成员特点"></a>2.7 接口中其他成员特点</h3><ol>
<li>接口中无法定义普通的成员变量，只能定义常量，常量必须有三个修饰符修饰：public static final</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> AGE = <span class="number">18</span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>接口中没有构造方法，接口也不能创建对象</p>
</li>
<li><p>接口中，没有静态代码块</p>
</li>
<li><p>在接口有很多地方可以省略</p>
<ul>
<li>接口中方法默认权限都是public(可以省略)</li>
<li>接口中抽象方法连abstract关键字都可以省略(抽象类不行)</li>
<li>接口中常量，默认修饰符是public static final，并且可以省略</li>
</ul>
</li>
</ol>
<h3 id="2-8-抽象类和接口练习"><a href="#2-8-抽象类和接口练习" class="headerlink" title="2.8 抽象类和接口练习"></a>2.8 抽象类和接口练习</h3><p>通过实例进行分析和代码演示抽象类和接口的用法。</p>
<p>举例：</p>
<p>犬：</p>
<ul>
<li>行为：吼叫；吃饭；</li>
</ul>
<p>缉毒犬：</p>
<ul>
<li>行为：吼叫；吃饭；缉毒；</li>
</ul>
<p>由于犬分为很多种类，他们吼叫和吃饭的方式不一样，在描述的时候不能具体化，也就是吼叫和吃饭的行为不能明确。当描述行为时，行为的具体动作不能明确，这时可以将这个行为写为抽象行为，那么这个类也就是抽象类。可是有的犬还有其他额外功能，而这个功能并不在这个事物的体系中 , 例如 : 缉毒犬。缉毒的这个功能有好多种动物都有 , 例如 : 缉毒猪 , 缉毒鼠。我们可以将这个额外功能定义接口中 ,让缉毒犬继承犬且实现缉毒接口 , 这样缉毒犬既具备犬科自身特点也有缉毒功能。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 父类：狗类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span>  </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 叫</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 吃</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JiDu</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缉毒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">jidu</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 缉毒犬类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JiDuDog</span> <span class="keyword">extends</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">JiDu</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"嗷嗷叫!!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"嗷嗷吃!!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jidu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"缉毒中..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 测试类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    JiDuDog dog = <span class="keyword">new</span> JiDuDog();</span><br><span class="line"></span><br><span class="line">    dog.bark();</span><br><span class="line">    dog.eat();</span><br><span class="line">    dog.jidu();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="三、多态"><a href="#三、多态" class="headerlink" title="三、多态"></a>三、多态</h2><h3 id="3-1-概念"><a href="#3-1-概念" class="headerlink" title="3.1 概念"></a>3.1 概念</h3><p>多态是继封装、继承之后，面向对象的第三大特性。</p>
<p>一种事物具备多种形态，这个就是多态。</p>
<p>比如：小明是一个学生，同时肯定也是一个人，所以小明同时具备学生和人的形态，这个就是多态</p>
<p><strong>多态：是指同一行为，具有多个不同表现形式。</strong></p>
<h3 id="3-2-多态的体现"><a href="#3-2-多态的体现" class="headerlink" title="3.2 多态的体现"></a>3.2 多态的体现</h3><p>多态在代码中的体现(父类变量(引用)指向子类对象)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">父类类型 变量名 = <span class="keyword">new</span> 子类类型();</span><br></pre></td></tr></table></figure>

<p>父类类型：指子类对象继承的父类类型,或者实现的父接口类型</p>
<p>接口多态格式(接口类型指向实现类对象)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">接口类型 变量名 = <span class="keyword">new</span> 实现类类型();</span><br></pre></td></tr></table></figure>



<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建对象</span></span><br><span class="line">Animal dog = <span class="keyword">new</span> Dog();</span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line">dog.say()</span><br></pre></td></tr></table></figure>

<p><strong>当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误；如果有，执行的是子类重写后方法。</strong></p>
<p>根据多态性，我们可以把子类类型当成父类类型去看待【狗肯定是动物，可以把狗当成动物去看待】</p>
<p><code>多态在代码中的体现为父类引用指向子类对象。</code></p>
<p><strong>小结：如果我们通过多态的方式创建对象，调用方法时，运行的是子类的方法(<code>创建的是谁的对象，调用的就是谁的方法</code>)</strong></p>
<h3 id="3-3-多态的好处"><a href="#3-3-多态的好处" class="headerlink" title="3.3 多态的好处"></a>3.3 多态的好处</h3><p>好处：方法参数如果是父类类型，那么可以传递任何子类对象。</p>
<p>原因：根据多态性，子类类型可以当作父类类型去看待。比如狗肯定是动物，所以可以当成动物去看待。</p>
<p>参数需要时动物(父类)类型，那么我们可以传递狗(子类)对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动物类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 狗类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"汪汪汪...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 猫类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"喵喵喵..."</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        showSay(<span class="keyword">new</span> Dog());</span><br><span class="line">        showSay(<span class="keyword">new</span> Cat());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showSay</span><span class="params">(Animal animal)</span></span>&#123;</span><br><span class="line">        animal.say();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">汪汪汪....</span><br><span class="line">喵喵喵...</span><br></pre></td></tr></table></figure>



<p><strong><code>小结：多态的好处是提高程序的灵活性，扩展性</code></strong></p>
<h3 id="3-4-多态访问成员的特点以及优缺点"><a href="#3-4-多态访问成员的特点以及优缺点" class="headerlink" title="3.4 多态访问成员的特点以及优缺点"></a>3.4 多态访问成员的特点以及优缺点</h3><p><code>多态访问成员变量的特点</code>【了解，不用】</p>
<ul>
<li>编译看左边父类，如果父类没有这个变量。编译时期，语法报错</li>
<li>运行也看左边父类，运行时，真正执行的时父类的变量</li>
</ul>
<p><code>多态访问成员方法的特点</code>【重要】</p>
<ul>
<li>编译看左边父类，如果父类中没有这个方法，会编译报错</li>
<li>运行看右边子类，如果程序运行，运行的是子类的方法。</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">20</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"父类方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"子类方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Fu fu = <span class="keyword">new</span> Zi();</span><br><span class="line">        System.out.println(fu.num);</span><br><span class="line">        fu.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">20</span></span><br><span class="line">子类方法</span><br></pre></td></tr></table></figure>

<h4 id="3-4-1-多态的优缺点："><a href="#3-4-1-多态的优缺点：" class="headerlink" title="3.4.1 多态的优缺点："></a>3.4.1 多态的优缺点：</h4><ul>
<li>优点：让程序更加灵活，参数时父类类型，可以传递子类对象</li>
<li>缺点，只能访问父类有的东西，不能访问子类特有的内容。【多态方式使用成员，编译看左边父类】</li>
</ul>
<h3 id="3-5-引用类型转换"><a href="#3-5-引用类型转换" class="headerlink" title="3.5 引用类型转换"></a>3.5 引用类型转换</h3><h4 id="3-5-1-向上转型"><a href="#3-5-1-向上转型" class="headerlink" title="3.5.1 向上转型"></a>3.5.1 向上转型</h4><p>向上转型：子类类型转成父类类型，多态本身是子类类型向父类类型向上转换的过程，这个过程是默认的。</p>
<p><code>父类类型 变量名 = new 子类类型();</code></p>
<h4 id="3-5-2-向下转型"><a href="#3-5-2-向下转型" class="headerlink" title="3.5.2 向下转型"></a>3.5.2 向下转型</h4><p>向下转型：父类类型向子类类型向下转换的过程，这个过程是强制的。</p>
<p>前提：向下转型之前必须要有向上转型</p>
<p>格式：</p>
<ul>
<li><code>子类类型变量名= (子类类型) 父类变量名;</code></li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//向上转型</span></span><br><span class="line">Animal a1 = <span class="keyword">new</span> Cat();</span><br><span class="line">Animal a2 = <span class="keyword">new</span> Dog();</span><br><span class="line"><span class="comment">// 向下转型</span></span><br><span class="line">Cat cat = (Cat) a1;</span><br><span class="line">Dog dog = (Dog) a2;</span><br></pre></td></tr></table></figure>



<h4 id="3-5-3-为什么要向下转型"><a href="#3-5-3-为什么要向下转型" class="headerlink" title="3.5.3 为什么要向下转型"></a>3.5.3 为什么要向下转型</h4><p><strong>多态的弊端就是不能调用子类特有的方法，如果想要调用子类特有的内容，需要向下转型。</strong></p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"狗吃肉..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//特有的行为</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lookDoor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"看门..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"猫吃鱼..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">catchMouse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"猫抓老师"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向上转型</span></span><br><span class="line">        Animal a1 = <span class="keyword">new</span> Cat();</span><br><span class="line">        Animal a2 = <span class="keyword">new</span> Dog();</span><br><span class="line">        <span class="comment">// 向下转型</span></span><br><span class="line">        Cat cat = (Cat) a1;</span><br><span class="line">        Dog dog = (Dog) a2;</span><br><span class="line"></span><br><span class="line">        a1.eat();</span><br><span class="line">        cat.catchMouse();</span><br><span class="line">        a2.eat();</span><br><span class="line">        dog.lookDoor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-5-4-转型的异常"><a href="#3-5-4-转型的异常" class="headerlink" title="3.5.4 转型的异常"></a>3.5.4 转型的异常</h4><p>如果父类类型表示的对象不是目标类型，在转换的时候就会报错。（如果父类类型表示的时髦，但是我们却把他向下转型成后，就会出现异常）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 向上转型</span></span><br><span class="line">    Animal a=<span class="keyword">new</span> Cat();  </span><br><span class="line">    a.eat();     			<span class="comment">// 调用的是 Cat 的 eat           </span></span><br><span class="line">    <span class="comment">// 向下转型</span></span><br><span class="line">    Dog d= (Dog)a;      </span><br><span class="line">    d.watchHouse();        <span class="comment">// 调用的是 Dog 的 watchHouse 【运行报错】    &#125;  &#125;</span></span><br></pre></td></tr></table></figure>

<p>上述代码会报错，<code>ClassCastException</code>：类型转换异常。</p>
<p>解决方法：</p>
<p>可以在向下转型之前进行判断，Java提供了<code>instanceof</code>关键字。</p>
<p><code>instanceof</code>：可以判断某个变量表示的是否是该类型的对象</p>
<p>格式：</p>
<ul>
<li><code>变量名 instanceof 数据类型</code></li>
</ul>
<p>举例：</p>
<p><code>a instanceof Dog</code>：判断a是否是Dog类型的对象。</p>
<p>使用场景：</p>
<ul>
<li>在向下转型之前，可以使用<code>instanceof</code>关键字进行判断，如果类型符合，在进行向下转换</li>
</ul>
<p>代码示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Animal a = <span class="keyword">new</span> Cat();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">///判断a属于创建的哪个子类，向下转型成相应的子类，执行相应的方法。</span></span><br><span class="line">        <span class="keyword">if</span> (a <span class="keyword">instanceof</span> Dog)&#123;</span><br><span class="line">            Dog dog = (Dog) a;</span><br><span class="line">            dog.lookDoor();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(a <span class="keyword">instanceof</span> Cat)&#123;</span><br><span class="line">            Cat cat = (Cat) a;</span><br><span class="line">            cat.catchMouse();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="四、内部类"><a href="#四、内部类" class="headerlink" title="四、内部类"></a>四、内部类</h2><h3 id="4-1-什么是内部类"><a href="#4-1-什么是内部类" class="headerlink" title="4.1 什么是内部类"></a>4.1 什么是内部类</h3><p>将一个类A定义在另一个类B里面，里面的那个类A就称为内部类，B则称为外部类</p>
<h3 id="4-2-成员内部类"><a href="#4-2-成员内部类" class="headerlink" title="4.2 成员内部类"></a>4.2 成员内部类</h3><ul>
<li>成员内部类：定义在类中方法外的类。</li>
</ul>
<p>定义格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 外部类</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 内部类</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 人类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 心脏类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Heart</span></span>&#123;</span><br><span class="line">        <span class="comment">//心房属性</span></span><br><span class="line">        <span class="keyword">int</span> heartRoom = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//心跳方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jump</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"心脏蹦蹦跳"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-1-成员内部类的使用"><a href="#4-2-1-成员内部类的使用" class="headerlink" title="4.2.1 成员内部类的使用"></a>4.2.1 成员内部类的使用</h4><ul>
<li>在创建成员类对象是，需要创建外部类对象</li>
</ul>
<p>格式：<code>外部类名.内部类名对象名=new外部类型().new内部类型()</code></p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Person.Heart heart = <span class="keyword">new</span> Person().<span class="keyword">new</span> Heart();</span><br><span class="line">    System.out.println(heart.heartRoom);</span><br><span class="line">    heart.jump();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-2-注意"><a href="#4-2-2-注意" class="headerlink" title="4.2.2 注意"></a>4.2.2 注意</h4><ol>
<li>内部类编译之后也会生成.class文件，名字为: 外部类$内部类.class</li>
<li>内部类中可以访问外部类的成员</li>
<li>外部类中不能访问内部类成员</li>
</ol>
<h3 id="4-3-匿名内部类"><a href="#4-3-匿名内部类" class="headerlink" title="4.3 匿名内部类"></a>4.3 匿名内部类</h3><p>匿名内部类也是一种内部类，只不过这种内部类没有名字</p>
<p>作用：临时定义某个类的子类，在创建该子类的对象。</p>
<p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> 父类或接口()&#123;</span><br><span class="line">    重写的方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Person()&#123;</span><br><span class="line">    重写的方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码真正创建的是Person子类对象，但是这个子类叫什么，我们不知道，因为是匿名的。</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 吃</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//匿名内部类的格式创建Animal的子类对象</span></span><br><span class="line">    <span class="keyword">new</span> Animal()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"某种动物在吃..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>扩展：匿名内部类其实是有名字的，名字的格式为：【外部类$1】,【外部类$2】</strong></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><p>概念：</p>
<ul>
<li>被static修饰的东西属于类，不属于对象，可以被该类的所有对象共享。</li>
<li>被static修饰的东西可以通过类名直接调用，可以通过对象调用，推荐通过类名调用。</li>
<li>没有被static修饰的东西属于对象的，必须有对象才能调用。</li>
</ul>
<p>注意：</p>
<ul>
<li>静态不能直接使用非静态的内容。</li>
<li>静态方法中不能出现this和super</li>
</ul>
<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>概念：接口是用来定义规范的</p>
<p>定义格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 接口名 </span>&#123;</span><br><span class="line">    抽象方法【抽象方法】</span><br><span class="line">    常量</span><br><span class="line">    默认方法</span><br><span class="line">    静态方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h4><ul>
<li>格式：<code>public abstract 返回值类型 方法名(参数列表);</code></li>
<li>使用：实现类在实现接口时，需要重写这个接口中的所有的抽象方法。除非实现类是一个抽象类。</li>
</ul>
<h4 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h4><ul>
<li><p>格式：</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">default</span> 返回值类型 方法名(参数列表) &#123;</span><br><span class="line">    方法体;</span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用：实现类在实现接口时，可以不重写默认方法。</p>
</li>
</ul>
<h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><ul>
<li><p>格式：</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> 返回值类型 方法名(参数列表) &#123;</span><br><span class="line">    方法体;</span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用：接口中的静态方法要通过接口名字直接调用。</p>
</li>
</ul>
<h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><ul>
<li>格式：<code>public static final 数据类型 常量名 = 值;</code></li>
<li>使用：接口中的常量要通过接口名直接调用。</li>
</ul>
<h4 id="接口和类的关系"><a href="#接口和类的关系" class="headerlink" title="接口和类的关系"></a>接口和类的关系</h4><ul>
<li>类和类之间是继承，一个类只能继承一个父类。</li>
<li>类和接口是实现，一个类可以实现多个接口。</li>
<li>接口和接口是继承，一个接口可以继承多个接口。</li>
</ul>
<p>继承关键字：<code>extends</code></p>
<p>实现关键字：<code>implements</code></p>
<h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>概念：一种事物具备多种形态，比如小明是学生，肯定也是一个人。</p>
<p>在代码中的体现（<strong>父类类型指向子类对象</strong>）：<code>父类类型 变量名 = new 子类类型();</code></p>
<p><strong>在多态中，子类类型可以当成父类类型去看待。</strong></p>
<h4 id="优势与弊端"><a href="#优势与弊端" class="headerlink" title="优势与弊端"></a>优势与弊端</h4><p>优势：提高代码的灵活性，方法的参数是父类类型，那么可以传递任何子类对象。</p>
<p>弊端：不能访问子类特有的内容。</p>
<h4 id="多态访问方法的特点"><a href="#多态访问方法的特点" class="headerlink" title="多态访问方法的特点"></a>多态访问方法的特点</h4><p>编译看左边父类：如果父类没有该方法会报错。</p>
<p>运行看右边子类：运行执行的是子类的方法。</p>
<h4 id="引用类型的转换"><a href="#引用类型的转换" class="headerlink" title="引用类型的转换"></a>引用类型的转换</h4><ul>
<li><p>向上转型（子类类型转成父类类型）：<code>父类类型 变量名 = new 子类类型();</code></p>
</li>
<li><p>向下转型（父类类型转成子类类型）：<code>子类类型 变量名 = (子类类型) 父类变量;</code></p>
</li>
</ul>
<p><strong>向下转型的目的：为了访问子类的特有内容</strong></p>
<h4 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h4><ul>
<li>格式：<code>变量名 instanceof 数据类型</code></li>
<li>作用：判断该变量表示的对象是否是指定类型的。</li>
<li>举例：<code>a interfaceof Dog</code>(判断a表示的对象是否是Dog类型)</li>
</ul>
<h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p>成员内部类【了解】</p>
<h4 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h4><p>作用：临时定义某个类的子类，创建该子类的对象。</p>
<p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> 父类或接口() &#123;</span><br><span class="line">    重写的方法;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Person() &#123;</span><br><span class="line">    重写的方法;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个代码真正创建的时Person类的子类对象，只不过这个子类叫什么名字，我们不知道，因为没有名字。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>学习</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>权限修饰符、代码块、常用API</title>
    <url>/2020/07/26/%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6%E3%80%81%E4%BB%A3%E7%A0%81%E5%9D%97%E3%80%81%E5%B8%B8%E7%94%A8API/</url>
    <content><![CDATA[<h2 id="一、权限修饰符"><a href="#一、权限修饰符" class="headerlink" title="一、权限修饰符"></a>一、权限修饰符</h2><p><strong>不同权限的访问能力：</strong></p>
<table>
<thead>
<tr>
<th>描述\修饰符名称</th>
<th>public</th>
<th>protected</th>
<th>(空的)</th>
<th>private</th>
</tr>
</thead>
<tbody><tr>
<td>同一类中</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>同一个包中(子类与无关类)</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td></td>
</tr>
<tr>
<td>不同包的子类</td>
<td>√</td>
<td>√</td>
<td></td>
<td></td>
</tr>
<tr>
<td>不同包的无关类</td>
<td>√</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>编写代码时，如果没有特殊的考虑，建议这样使用权限：</p>
<ul>
<li>成员变量使用private，隐藏细节。</li>
<li>构造方法使用public，方便创建对象。</li>
<li>成员方法使用public，方便调用方法。</li>
</ul>
<a id="more"></a>

<h2 id="二、代码块"><a href="#二、代码块" class="headerlink" title="二、代码块"></a>二、代码块</h2><h3 id="2-1-构造代码块"><a href="#2-1-构造代码块" class="headerlink" title="2.1 构造代码块"></a>2.1 构造代码块</h3><p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	代码块的内容</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义位置：定义在类的成员位置</p>
<p>执行时机：</p>
<ul>
<li>构造代码块会在每次创建对象的时候执行(优先于构造方法执行)</li>
</ul>
<h3 id="2-2-静态代码块"><a href="#2-2-静态代码块" class="headerlink" title="2.2 静态代码块"></a>2.2 静态代码块</h3><p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">    静态代码块内容</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义位置：静态代码块要定义在类的成员位置</p>
<p>执行时机：</p>
<ul>
<li>静态代码块的内容会在类加载的时候执行，静态代码块终身只会执行一次</li>
<li>当我们使用一个类时，这个类先加载到方法区才能使用，这个过程就是类加载，当我们第一次使用这个类时，这个类会加载到方法区，类只会加载一次。</li>
<li>静态代码块优先于构造代码块执行。</li>
</ul>
<p>使用场景：</p>
<ul>
<li>一些项目的准备工作可以方法静态代码块中。比如后期的JDBC阶段注册驱动就会放到静态代码块中</li>
</ul>
<h2 id="三、Object类"><a href="#三、Object类" class="headerlink" title="三、Object类"></a>三、Object类</h2><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h3><ul>
<li>所有类都直接或间接的继承自Object,Object是所有类的父类</li>
<li>如果一个类我们没有使用extends关键字继承其他类，那么这个类就是继承自Object的</li>
</ul>
<h3 id="3-2-toString方法"><a href="#3-2-toString方法" class="headerlink" title="3.2 toString方法"></a>3.2 toString方法</h3><p>在Object中，有一个方法叫<code>toString</code>,可以将对象转成字符串。</p>
<p><code>String toString()</code>：返回对象的字符串表示形式。</p>
<ul>
<li><p><code>toString</code>方法返回该对象的字符串表示，其实该字符串内容就是：对象的类型名+@+对象哈希码的无符号十六进制表示。</p>
</li>
<li><p>由于<code>toString</code>方法返回的结果不易阅读，而在开发中，经常需要按照对象的属性得到相应的字符串表现形式，因此也需要重写它。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//构造方法、get/set方法略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>扩展：</strong>在我们直接使用输出语句输出对象名的时候,其实通过该对象调用了其<code>toString()</code>方法。</p>
<p>小结：<code>toString</code>方法可以将对象转成字符串。</p>
<h3 id="3-3-equals方法"><a href="#3-3-equals方法" class="headerlink" title="3.3 equals方法"></a>3.3 equals方法</h3><p><code>boolean equals(Object obj)</code> ：判断其他某个对象是否与此对象“相等”。</p>
<p>调用成员方法equals并指定参数为另一个对象，则可以判断这两个对象是否是相同的。这里的“相同”有默认和自定义两种方式。</p>
<p>如果没有覆盖重写equals方法，那么Object类中默认进行==运算符的对象地址比较，只要不是同一个对象，结果必然为false。</p>
<p>如果想要进行对象内容的比较，即所有或指定的部分成员变量相同就判定两个对象相同，则可以覆盖重写equals方法。</p>
<p>小结：equals方法可以判断两个对象是否相同，如果要定义自己的比较规则，需要进行重写。</p>
<h3 id="3-4-native本地方法"><a href="#3-4-native本地方法" class="headerlink" title="3.4 native本地方法"></a>3.4 native本地方法</h3><p>方法被native修饰的方法，例如Object类中的<code>public native int hashCode();</code>方法，就是一个本地方法，底层用C++实现的方法。</p>
<h3 id="3-5-Objects类"><a href="#3-5-Objects类" class="headerlink" title="3.5 Objects类"></a>3.5 Objects类</h3><p>在JDK7的时候，多了一个工具类叫做<code>Objects</code>。这个类里面有大量的方法可以操作对象。(了解)</p>
<ul>
<li><code>static boolean equals(Object a, Object b)</code>：比较两个对象是否相同。比较a和b这两个对象是否相同。</li>
</ul>
<p>调用Objects的equals时，内部会调用Object的equals方法。所以如果想要根据属性比较两个对象是否相同，还需要重写equals。</p>
<h2 id="四、Date类"><a href="#四、Date类" class="headerlink" title="四、Date类"></a>四、Date类</h2><p>Date(java.util.Date)类可以叫做日期类</p>
<ul>
<li>虽然叫做日期类，但是表示的是特点的时间瞬间，精确到毫秒</li>
</ul>
<p>构造方法：</p>
<ul>
<li><p><code>Date()</code>：使用空参数的狗咱方法会根据当前计算机的时间创建Date对象。</p>
</li>
<li><p><code>Date(long date)</code>：参数要传递long类型的毫秒值，表示从1970年1月1日0时0分0秒开始，过了多少毫秒。</p>
<ul>
<li>中国是东八区的时间，比标准时间要快8小时，所以时间是从1970年1月1日8时0分0秒开始</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Date</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//通过空参数构造方法创建对象（这个Date对象表示是当前电脑的时间）</span></span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(date);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用有参构造方法创建对象</span></span><br><span class="line">        Date date2 = <span class="keyword">new</span> Date(<span class="number">0L</span>);</span><br><span class="line">        System.out.println(date2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-1-常用方法"><a href="#4-1-常用方法" class="headerlink" title="4.1 常用方法"></a>4.1 常用方法</h3><p><code>long getTime()</code>：获取Date对象对应的毫秒值。<br><code>void setTime(long time)</code>：参数是毫秒值，表示从1970年1月1日开始过了多少毫秒</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02DateGetTime</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="keyword">long</span> millis = date.getTime();</span><br><span class="line">        System.out.println(millis);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03DateSetTime</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(date);</span><br><span class="line"></span><br><span class="line">        date.setTime(<span class="number">1000L</span>);</span><br><span class="line">        System.out.println(date);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="五、DateFormat类"><a href="#五、DateFormat类" class="headerlink" title="五、DateFormat类"></a>五、DateFormat类</h2><p><code>java.text.DateFormat</code>是日期/时间格式化子类的抽象类。</p>
<p>如果要把Date对象转成我们喜欢的格式进行显示，那么可以使用DateFormat进行格式化（将Date对象转成指定格式的字符串就是格式化）<br><code>DateFormat</code>是抽象类，如果要用，需要使用子类，最常用的子类是<code>SimpleDateFormat</code></p>
<p><code>SimpleDateFormat</code>的构造方法：</p>
<ul>
<li><code>SimpleDateFormat(String pattern)</code>：参数要传递一个字符串类型的模式</li>
</ul>
<p>模式就是要转换的格式：</p>
<ul>
<li>要转换的最终格式： 2020年07月6日 12时12分12秒</li>
<li>对应的模式：yyyy年MM月dd日 HH时mm分ss秒</li>
</ul>
<p>模式就是要转换的格式，只不过要使用英语字母代替掉格式中的数字</p>
<table>
<thead>
<tr>
<th>年</th>
<th>y</th>
</tr>
</thead>
<tbody><tr>
<td>月</td>
<td>M</td>
</tr>
<tr>
<td>日</td>
<td>d</td>
</tr>
<tr>
<td>时</td>
<td>H</td>
</tr>
<tr>
<td>分</td>
<td>m</td>
</tr>
<tr>
<td>秒</td>
<td>s</td>
</tr>
</tbody></table>
<h3 id="5-1-format方法"><a href="#5-1-format方法" class="headerlink" title="5.1 format方法"></a>5.1 format方法</h3><p><code>SimpleDateFormat</code>转换的方法：</p>
<ul>
<li><code>String format(Date date)</code>：将Date对象转成一个字符串并返回。</li>
</ul>
<p>Date对象转字符串的步骤：</p>
<ul>
<li>创建SimpleDateFormat，并在构造方法中指定模式。</li>
<li>调用SimpleDateFormat的format方法，将Date对象转成字符串。</li>
<li>输出结果。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01DateFormat</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        DateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日 hh时mm分ss秒"</span>);</span><br><span class="line">        String date = dateFormat.format(<span class="keyword">new</span> Date());</span><br><span class="line">        System.out.println(date);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-2-parse方法"><a href="#5-2-parse方法" class="headerlink" title="5.2 parse方法"></a>5.2 parse方法</h3><p>如果想要将一个字符串转成Date对象，那么也可以使用SimpleDateFormat去完成（字符串转成Date对象也叫做解析）</p>
<p><code>Date parse(String source)</code>：将字符串转成Date对象。</p>
<p>字符串转Date对象的步骤：</p>
<ul>
<li>定义字符串表示时间。</li>
<li>创建SimpleDateFormat对象，指定模式。</li>
<li>通过SimpleDateFormat对象调用parse方法， 将字符串转成Date对象</li>
<li>输出结果。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01DateFormat</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        DateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日 hh时mm分ss秒"</span>);</span><br><span class="line">        String date = dateFormat.format(<span class="keyword">new</span> Date());</span><br><span class="line">        System.out.println(date);</span><br><span class="line">        Date parse = dateFormat.parse(date);</span><br><span class="line">        System.out.println(parse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-3-小结"><a href="#5-3-小结" class="headerlink" title="5.3 小结"></a>5.3 小结</h3><p><code>Date -&gt; String</code>： 格式化。 使用SimpleDateFormat中的<code>format()</code>方法完成。</p>
<p><code>String -&gt; Date</code>： 解析。 使用SimpleDateFormat中的<code>parse()</code>方法完成。</p>
<h2 id="六、Calendar类"><a href="#六、Calendar类" class="headerlink" title="六、Calendar类"></a>六、Calendar类</h2><h3 id="6-1-概述和获取对象"><a href="#6-1-概述和获取对象" class="headerlink" title="6.1 概述和获取对象"></a>6.1 概述和获取对象</h3><p><code>Calendar</code>叫做日历类</p>
<ul>
<li><p>虽然Calendar叫做日历类，但是他和Date类一样，可以表示特定的时间瞬间，精确到毫秒。</p>
</li>
<li><p>Calendar是一个抽象类，如果要用，需要使用子类。</p>
</li>
<li><p>由于时间地区的敏感性，Calendar子类对象不能由我们自己去创建，要通过Calendar的静态方法getInstance获取。</p>
<ul>
<li><p><code>static Calendar getInstance()</code>：获取一个日历对象（Calendar子类对象）</p>
</li>
<li><p>示例</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取日历对象对象</span></span><br><span class="line">Calendar c = Calendar.getInstance();</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">System.out.println(c);</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<p><strong>注意：之前创建对象都是自己new，现在获取日历对象需要调用Calendar的静态方法getInstance获取。</strong></p>
<h3 id="6-2-其他方法"><a href="#6-2-其他方法" class="headerlink" title="6.2 其他方法"></a>6.2 其他方法</h3><p><code>int get(int field)</code>： 获取指定字段的值。参数filed表示获取哪个字段的值。</p>
<p><code>void set(int field, int value)</code>：给指定日历字段设置值。</p>
<p><code>void add(int field, int amount)</code>：对指定字段的值进行计算。</p>
<p>演示：</p>
<p><code>get():</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在Calendar中有一个方法叫get，可以获取指定字段值</span></span><br><span class="line"><span class="comment"> *      int get(int field):获取日历中指定字段的值并返回</span></span><br><span class="line"><span class="comment"> * 举例：</span></span><br><span class="line"><span class="comment"> *      get(年)：获取年数据</span></span><br><span class="line"><span class="comment"> *      get(月)：获取月数据</span></span><br><span class="line"><span class="comment"> *      get(日)：获取日数据</span></span><br><span class="line"><span class="comment"> * get方法的参数时int类型，所以要传递int数字，我们可以使用int数字表示日历中的指定字段</span></span><br><span class="line"><span class="comment"> * 但是如果每次调用get党法，都传递数字，阅读性就会非常差</span></span><br><span class="line"><span class="comment"> * 在Calendar中给我们提供了很多静态常量，这些常量是一些数字，并根据变量名可以起到见名知意的作用，在调用get方法时最好传递这些常量。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 注意：Calendar中的月份是从0开始的，范围时0-11，比我们生活中的月份少1.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02CalendarGet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Calendar c = Calendar.getInstance();</span><br><span class="line">        <span class="keyword">int</span> year = c.get(Calendar.YEAR);</span><br><span class="line">        System.out.println(year);</span><br><span class="line">        <span class="comment">//Calendar中的月份是从0开始的，范围时0-11，比我们生活中的月份少1.</span></span><br><span class="line">        <span class="keyword">int</span> month = c.get(Calendar.MONTH) + <span class="number">1</span>;</span><br><span class="line">        System.out.println(month);</span><br><span class="line">        <span class="keyword">int</span> date = c.get(Calendar.DATE);</span><br><span class="line">        System.out.println(date);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>set():</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在Calendar有一个方法叫set，可以设定指定字段的值。</span></span><br><span class="line"><span class="comment"> * void set(int field, int value):给指定字段设置值</span></span><br><span class="line"><span class="comment"> *      参数field:给哪个字段设置值</span></span><br><span class="line"><span class="comment"> *      参数value:设置成什么值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03CalendarSet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Calendar c = Calendar.getInstance();</span><br><span class="line">        System.out.println(c.get(Calendar.YEAR)+ <span class="string">"-"</span> + (c.get(Calendar.MONTH) + <span class="number">1</span>) + <span class="string">"-"</span> + c.get(Calendar.DATE));</span><br><span class="line">        <span class="comment">//重新给指定字段设置值</span></span><br><span class="line">        c.set(Calendar.YEAR,<span class="number">1996</span>);</span><br><span class="line">        c.set(Calendar.MONTH,<span class="number">6</span>);</span><br><span class="line">        c.set(Calendar.DATE,<span class="number">6</span>);</span><br><span class="line">        System.out.println(c.get(Calendar.YEAR)+ <span class="string">"-"</span> + (c.get(Calendar.MONTH) + <span class="number">1</span>) + <span class="string">"-"</span> + c.get(Calendar.DATE));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>add():</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Calendar中的add()方法：可以对指定的值进行计算</span></span><br><span class="line"><span class="comment"> *      void add(int field, int amount)</span></span><br><span class="line"><span class="comment"> *          参数field:对哪个字段进行计算</span></span><br><span class="line"><span class="comment"> *          参数amount:如果计算</span></span><br><span class="line"><span class="comment"> *                  如果该数是一个正数，表示加上该值</span></span><br><span class="line"><span class="comment"> *                  如果该数是一个负数，表示减去该值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04CalendarAdd</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Calendar c = Calendar.getInstance();</span><br><span class="line">        System.out.println(c.get(Calendar.YEAR)+ <span class="string">"-"</span> + (c.get(Calendar.MONTH) + <span class="number">1</span>) + <span class="string">"-"</span> + c.get(Calendar.DATE));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        c.add(Calendar.YEAR,-<span class="number">24</span>);</span><br><span class="line">        System.out.println(c.get(Calendar.YEAR)+ <span class="string">"-"</span> + (c.get(Calendar.MONTH) + <span class="number">1</span>) + <span class="string">"-"</span> + c.get(Calendar.DATE));</span><br><span class="line">        c.add(Calendar.YEAR,<span class="number">25</span>);</span><br><span class="line">        System.out.println(c.get(Calendar.YEAR)+ <span class="string">"-"</span> + (c.get(Calendar.MONTH) + <span class="number">1</span>) + <span class="string">"-"</span> + c.get(Calendar.DATE));</span><br><span class="line">        c.set(Calendar.MONTH,<span class="number">0</span>);</span><br><span class="line">        c.add(Calendar.MONTH,<span class="number">11</span>);</span><br><span class="line">        System.out.println(c.get(Calendar.YEAR)+ <span class="string">"-"</span> + (c.get(Calendar.MONTH) + <span class="number">1</span>) + <span class="string">"-"</span> + c.get(Calendar.DATE));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="七、Math类"><a href="#七、Math类" class="headerlink" title="七、Math类"></a>七、Math类</h2><p>Math是Java中的一个数学工具类，里面有很多用于数学运算的方法。</p>
<h3 id="7-1-常见方法"><a href="#7-1-常见方法" class="headerlink" title="7.1 常见方法"></a>7.1 常见方法</h3><p><code>public static int abs(int a )</code>：求绝对值</p>
<p><code>public static double ceil(double a)</code>：向上取整</p>
<p><code>public static double floor(double a)</code>：向下取整</p>
<p><code>public static long round(double a)</code>：四舍五入</p>
<p><code>public static double pow(double a, double b)</code>：获取a的b次幂(方)</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Math</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Math.abs(-<span class="number">3</span>));</span><br><span class="line">        System.out.println(Math.abs(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(Math.ceil(<span class="number">3.14</span>));</span><br><span class="line">        System.out.println(Math.ceil(-<span class="number">3.14</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(Math.floor(<span class="number">3.14</span>));</span><br><span class="line">        System.out.println(Math.floor(-<span class="number">3.14</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(Math.round(<span class="number">3.5</span>));</span><br><span class="line">        System.out.println(Math.round(<span class="number">4.4</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(Math.pow(<span class="number">3</span>,<span class="number">2</span>));</span><br><span class="line">        System.out.println(Math.pow(<span class="number">5</span>,<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="八、System"><a href="#八、System" class="headerlink" title="八、System"></a>八、System</h2><p>System可以称为系统类，里面有一些方法可以完成系统的操作。</p>
<h3 id="8-1-常见方法"><a href="#8-1-常见方法" class="headerlink" title="8.1 常见方法"></a>8.1 常见方法</h3><ul>
<li><p><code>static void exit(int status)</code>:终止正在运行的Java虚拟机。</p>
<ul>
<li>参数是状态码，0表示正常终止。</li>
</ul>
</li>
<li><p><code>static long currentTimeMillis()</code>:获取当前的时间，以毫秒为单位【从1970年1月1日开始过了多少毫秒】</p>
</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01TestSystem</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">        <span class="comment">//System.exit(0);</span></span><br><span class="line">        System.out.println(<span class="string">"world"</span>);</span><br><span class="line">        <span class="keyword">long</span> time = System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>currentTimeMillis()</code>方法可以用来计算程序的执行时间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02System</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"hello,world!!!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"==============="</span>);</span><br><span class="line">        System.out.println((end-start)+<span class="string">"毫秒"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="九、BigInteger类"><a href="#九、BigInteger类" class="headerlink" title="九、BigInteger类"></a>九、BigInteger类</h2><p>如果是非常大的数字，用long也是无法表示或者进行计算的。此时就需要使用<code>BigInteger</code>了。</p>
<ul>
<li><code>BigInteger</code>表述数字，这个数字可以无限大</li>
</ul>
<h3 id="9-1-构造方法"><a href="#9-1-构造方法" class="headerlink" title="9.1 构造方法"></a>9.1 构造方法</h3><p><code>BigInteger(String val)</code>:根据字符串创建BigInteger对象。</p>
<h3 id="9-2-运算方法"><a href="#9-2-运算方法" class="headerlink" title="9.2 运算方法"></a>9.2 运算方法</h3><p><code>BigInteger add(BigInteger val)</code>:进行加法运算</p>
<p><code>BigInteger subtract(BigInteger val)</code>:进行减法运算</p>
<p><code>BigInteger multiply(BigInteger val)</code>:进行乘法运算</p>
<p><code>BigInteger divide(BigInteger val)</code>:进行除法运算</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01BigInteger</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BigInteger a = <span class="keyword">new</span> BigInteger(<span class="string">"99999999999999999999999999999999999999999999999999999999999999999999"</span>);</span><br><span class="line">        System.out.println(a);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加法</span></span><br><span class="line">        System.out.println(a.add(<span class="keyword">new</span> BigInteger(<span class="string">"1"</span>)));</span><br><span class="line">        <span class="comment">//减法</span></span><br><span class="line">        System.out.println(a.subtract(<span class="keyword">new</span> BigInteger(<span class="string">"9999999999"</span>)));</span><br><span class="line">        <span class="comment">//乘法</span></span><br><span class="line">        System.out.println(a.multiply(<span class="keyword">new</span> BigInteger(<span class="string">"2"</span>)));</span><br><span class="line">        <span class="comment">//除法</span></span><br><span class="line">        System.out.println(a.divide(<span class="keyword">new</span> BigInteger(<span class="string">"9"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="十、BigDecimal类"><a href="#十、BigDecimal类" class="headerlink" title="十、BigDecimal类"></a>十、BigDecimal类</h2><p><code>BigDecimal</code>表示精确的小数</p>
<p>java中小数是不精确的，在运算优势出现精度问题，比如1.3+2.1结果是3.4000000000000004。</p>
<p>如果想要在运算时解决这个精度问题，就可以使用<code>BigDecimal</code>。</p>
<h3 id="10-1-构造方法"><a href="#10-1-构造方法" class="headerlink" title="10.1 构造方法"></a>10.1 构造方法</h3><p><code>BigDecimal(double val)</code>：根据double小数创建一个BigDecimal对象【会产生精度问题，不推荐！！!】</p>
<p><code>BigDecimal(String val)</code>:根据String创建一个BigDecimal对象【推荐！！！】</p>
<h3 id="10-2-运算方法"><a href="#10-2-运算方法" class="headerlink" title="10.2 运算方法"></a>10.2 运算方法</h3><p><code>BigDecimal add(BigDecimal augend)</code>：加法运算</p>
<p><code>BigDecimal subtract(BigDecimal subtrahend)</code>：减法运算</p>
<p><code>BigDecimal multiply(BigDecimal multiplicand)</code> ：乘法运算</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01BigDecimal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BigDecimal a = <span class="keyword">new</span> BigDecimal(<span class="string">"1.6"</span>);</span><br><span class="line">        BigDecimal b = <span class="keyword">new</span> BigDecimal(<span class="string">"1.3"</span>);</span><br><span class="line">        <span class="comment">//加法</span></span><br><span class="line">        System.out.println(a.add(b));</span><br><span class="line">        <span class="comment">//减法</span></span><br><span class="line">        System.out.println(a.subtract(b));</span><br><span class="line">        <span class="comment">//乘法</span></span><br><span class="line">        System.out.println(a.multiply(b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>BigDecimal中的除法运算：</p>
<p><code>BigDecimal divide(BigDecimal divisor)</code>：除法运算，如果除不尽时，会报错。</p>
<p><code>BigDecimal divide(BigDecimal divisor, int scale, int roundingMode)</code>：除法运算，可以保留指定为的小数部分</p>
<ul>
<li>参数<code>divisor</code>：表示除以几</li>
<li>参数<code>scale</code>：保留几位小数</li>
<li>参数<code>roundingMode</code>:舍入模式 。这个参数我们要是哟个常量，Round_HALF_UP 表示四舍五入的模式。</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02BigDecimal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BigDecimal a = <span class="keyword">new</span> BigDecimal(<span class="string">"10"</span>);</span><br><span class="line">        BigDecimal b = <span class="keyword">new</span> BigDecimal(<span class="string">"3"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//除法</span></span><br><span class="line">        <span class="comment">//System.out.println(a.divide(b));//除不尽，会报错。</span></span><br><span class="line">        System.out.println(a.divide(b,<span class="number">5</span>,BigDecimal.ROUND_HALF_UP));<span class="comment">//保留五位小数，四舍五入模式</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="十一、Arrays类"><a href="#十一、Arrays类" class="headerlink" title="十一、Arrays类"></a>十一、Arrays类</h2><p>Arrays是操作数组的工具类。</p>
<h3 id="11-1-常用方法"><a href="#11-1-常用方法" class="headerlink" title="11.1 常用方法"></a>11.1 常用方法</h3><p><code>static String toString(数组)</code>：将数组内容转成指定格式的字符串并返回</p>
<p><code>static void sort(数组)</code>:对数组的内容进行排序</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Arrays</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">66</span>,<span class="number">77</span>,<span class="number">99</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>&#125;;</span><br><span class="line">        <span class="comment">//将数组内容转成字符串</span></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">        <span class="comment">//对数组进行排序:从小到大</span></span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="十二、包装类"><a href="#十二、包装类" class="headerlink" title="十二、包装类"></a>十二、包装类</h2><h3 id="12-1-概念引入"><a href="#12-1-概念引入" class="headerlink" title="12.1 概念引入"></a>12.1 概念引入</h3><p>基本类型：基本类型只是一些简单的数据，只能直接使用或者进行运算，无法调用方法，优点效率高。</p>
<p>包装类：包装类是引用类型，可以创建对象，并且可以调用方法。功能比较强大。</p>
<p>每一个基本类型都有对应的包装类，包装类是引用类型。</p>
<table>
<thead>
<tr>
<th>基本类型</th>
<th>引用类型(包装类)</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>Byte</td>
</tr>
<tr>
<td>short</td>
<td>Short</td>
</tr>
<tr>
<td>int</td>
<td>Integer</td>
</tr>
<tr>
<td>long</td>
<td>Long</td>
</tr>
<tr>
<td>float</td>
<td>Float</td>
</tr>
<tr>
<td>double</td>
<td>Double</td>
</tr>
<tr>
<td>boolean</td>
<td>Boolean</td>
</tr>
<tr>
<td>char</td>
<td>Character</td>
</tr>
</tbody></table>
<p>在使用方式上，基本类型和包装类的使用方式基本一致。</p>
<h3 id="12-2-自动拆装箱"><a href="#12-2-自动拆装箱" class="headerlink" title="12.2 自动拆装箱"></a>12.2 自动拆装箱</h3><p>在<code>JDK5</code>的时候，多了一个自动拆装箱的特性，所以基本类型可以和对应得包装类自动转换</p>
<p>自动拆装箱：</p>
<ul>
<li>自动拆箱：包装类类型转成基本类型</li>
<li>自动装箱：基本类型转成对象的包装类类型</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Wrap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//自动装箱：10默认时基本类型，把int类型赋值给Integer类型，那么基本类型会自动转成包装类类型</span></span><br><span class="line">        Integer a = <span class="number">10</span>;</span><br><span class="line">        Integer b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自动拆箱--&gt;自动装箱：先拆后装</span></span><br><span class="line">        <span class="comment">//Integer没有办法进行加减乘除的运算，首先进行自动拆箱，转成int类型，然后在运算，计算完成后，结果是int类型，将结果进行自动装箱，转成Integer类型。</span></span><br><span class="line">        Integer sum = a + b;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="12-3-手动拆装箱-了解"><a href="#12-3-手动拆装箱-了解" class="headerlink" title="12.3 手动拆装箱(了解)"></a>12.3 手动拆装箱(了解)</h3><p>手动装箱（int—&gt;Integer）</p>
<ul>
<li>可以使用Integer中的静态方法valueOf完成</li>
<li><code>static Integer valueOf(int i)</code>：将参数int值转成Integer并返回</li>
</ul>
<p>手动拆箱（Integer —&gt; int）</p>
<ul>
<li>可以使用intValue完成</li>
<li><code>int intValue()</code>:将Integer转成int并返回</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Wrap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">        <span class="comment">//手动装箱</span></span><br><span class="line">        Integer numIn = Integer.valueOf(num);</span><br><span class="line">        System.out.println(numIn);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"================="</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//手动拆箱</span></span><br><span class="line">        <span class="keyword">int</span> basisNum = numIn.intValue();</span><br><span class="line">        System.out.println(basisNum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="12-4-Integer中的常见方法"><a href="#12-4-Integer中的常见方法" class="headerlink" title="12.4 Integer中的常见方法"></a>12.4 Integer中的常见方法</h3><ul>
<li><code>Integer(int value)</code>:根据int数字创建Integer对象。—  装箱</li>
<li><code>Integer(String s)</code>:根据字符串创建Integer对象</li>
<li><code>static Integer valueOf(int i)</code>:将int转成Integer并返回</li>
<li><code>static Integer valueOf(String s)</code>:将String转成Integer并返回</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoInteger</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//public Integer(int value)：构造方法，根据一个int数字创建Integer对象（已过时）</span></span><br><span class="line">        Integer a = <span class="keyword">new</span> Integer(<span class="number">10</span>);</span><br><span class="line">        System.out.println(a);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public Integer(String s)：构造方法， 根据一个String创建Integer对象（已过时）</span></span><br><span class="line">        Integer b = <span class="keyword">new</span> Integer(<span class="string">"10"</span>);</span><br><span class="line">        System.out.println(b);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public static Integer valueOf(int i)：静态方法， 根据一个int数字获取Integer对象。</span></span><br><span class="line">        <span class="comment">//Integer c = 10; 内部会自动装箱，装箱代码（Integer c = Integer.valueOf(10)）</span></span><br><span class="line">        Integer c = Integer.valueOf(<span class="number">10</span>);<span class="comment">//装箱代码。</span></span><br><span class="line">        System.out.println(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// public static Integer valueOf(String s)：静态方法， 根据一个String获取Integer对象。</span></span><br><span class="line">        Integer d = Integer.valueOf(<span class="string">"10"</span>);</span><br><span class="line">        System.out.println(d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="12-5-字符串和基本类型相互转换"><a href="#12-5-字符串和基本类型相互转换" class="headerlink" title="12.5 字符串和基本类型相互转换"></a>12.5 字符串和基本类型相互转换</h3><ul>
<li><p>基本类型 -&gt; 字符串</p>
<ul>
<li><p>直接在基本类型数据后面加上<code>&quot;&quot;</code>;例如：  <code>1+&quot;abc&quot; -&gt; &quot;1abc&quot;</code></p>
</li>
<li><p>调用String的静态方法valueOf</p>
<p> ​    <code>static String valueOf(基本数据类型数据)</code>：将数据转成字符串并返回</p>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>字符串 -&gt; 基本类型</p>
<ul>
<li>如果要把字符串转成基本类型，可以使用基本类型对应的包装类中的parseXxx方法</li>
<li>除了Character,每个包装类中都有一个静态方法parseXxx，可以把字符串转成对应的基本类型<ul>
<li>比如:要把字符串转成int类型，使用Integer中的parseInt方法进行转换<ul>
<li><code>Integer.parseInt(String s)</code></li>
<li>…</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04Parse</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">        <span class="comment">// String s = num + "";</span></span><br><span class="line">        String s = String.valueOf(num);</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"=========================="</span>);</span><br><span class="line">        String ss = <span class="string">"123456789"</span>;</span><br><span class="line">        <span class="keyword">int</span> num1 = Integer.parseInt(ss);</span><br><span class="line">        System.out.println(num1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>学习</tag>
        <tag>面向对象</tag>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>Collection、List、泛型、数据结构</title>
    <url>/2020/07/29/Collection%E3%80%81List%E3%80%81%E6%B3%9B%E5%9E%8B%E3%80%81%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h2 id="一、Collection集合"><a href="#一、Collection集合" class="headerlink" title="一、Collection集合"></a>一、Collection集合</h2><h3 id="1-1-集合概述"><a href="#1-1-集合概述" class="headerlink" title="1.1 集合概述"></a>1.1 集合概述</h3><ul>
<li>集合：集合是一种容器 ，可以用来存储多个数据。</li>
</ul>
<p><strong>集合和数组的区别？</strong></p>
<ul>
<li>数组的长度是固定的，集合长度可变。</li>
<li><strong>数据中可以存储</strong>任意类型的数据，包括<strong>基本类型和引用类型</strong>。<strong>集合只能存储引用类型数据</strong>，如果想要存储基本类型数据，需要使用基本类型对应的包装类(引用类型)。</li>
</ul>
<a id="more"></a>

<h3 id="1-2-集合的继承体系"><a href="#1-2-集合的继承体系" class="headerlink" title="1.2 集合的继承体系"></a>1.2 集合的继承体系</h3><p>Collection：单列集合的根接口，用于存储一些列符合某种规则的元素。</p>
<p>Collection的子接口、子接口特点及其常见实现类</p>
<ul>
<li><code>java.util.List</code>：List接口的特点是<strong>元素有序，且元素可重复</strong>。<ul>
<li><code>java.util.LinkedList</code></li>
<li><code>java.util.ArrayList</code></li>
</ul>
</li>
<li><code>java.util.Set</code>：Set接口的特点是<strong>元素不可重复</strong>。<ul>
<li><code>java.util.HashSet</code><ul>
<li><code>java.util.LinkedHashSet</code></li>
</ul>
</li>
<li><code>java.util.TreeSet</code></li>
</ul>
</li>
</ul>
<p>继承体系：</p>
<p>Collection(interface)</p>
<ul>
<li>List(interface)<ul>
<li>LinkedList(class)</li>
<li>ArrayList(class)</li>
</ul>
</li>
<li>Set(interface)<ul>
<li>HashSet(class)<ul>
<li>LinkedHashSet(class)</li>
</ul>
</li>
<li>TreeSet(class)</li>
</ul>
</li>
</ul>
<p>注意：以上只是常用的一些集合，还有很多其他集合，可以查询API文档搜索Collection，查询其子接口及其子接口的实现类。</p>
<h3 id="1-3-Collection中的常用方法"><a href="#1-3-Collection中的常用方法" class="headerlink" title="1.3 Collection中的常用方法"></a>1.3 Collection中的常用方法</h3><p>Collection是所有单列集合的父接口，所以在Collection中定义了一些共性的方法，这些方法可以用于操作所有单列集合。</p>
<ul>
<li><code>public boolean add(E e)</code>：把指定元素添加到集合中</li>
<li><code>public void clear()</code>：清空集合元素</li>
<li><code>public boolean remove(E e)</code>：在集合中移除指定的元素</li>
<li><code>public boolean contains(Object obj)</code>：判断集合中是否包含给定的对象</li>
<li><code>public boolean isEmpty()</code>：判断当前集合是否为空</li>
<li><code>public int size()</code>：返回集合的长度</li>
<li><code>public Object[] toArray()</code>：把集合中的元素存储到数组中</li>
</ul>
<p>Collection还有很多其他的方法，查看API即可查看学习。</p>
<p>方法演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01CollectionMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合</span></span><br><span class="line">        Collection&lt;String&gt; c = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        c.add(<span class="string">"aa"</span>);</span><br><span class="line">        c.add(<span class="string">"bb"</span>);</span><br><span class="line">        c.add(<span class="string">"cc"</span>);</span><br><span class="line">        c.add(<span class="string">"dd"</span>);</span><br><span class="line">        c.add(<span class="string">"ee"</span>);</span><br><span class="line">        System.out.println(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将集合转成数组</span></span><br><span class="line">        Object[] obj = c.toArray();</span><br><span class="line">        System.out.println(Arrays.toString(obj));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判度集合中是否包含指定元素</span></span><br><span class="line">        System.out.println(c.contains(<span class="string">"cc"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除指定元素</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = c.remove(<span class="string">"cc"</span>);</span><br><span class="line">        System.out.println(flag);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取集合大小</span></span><br><span class="line">        <span class="keyword">int</span> s = c.size();</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//清空集合</span></span><br><span class="line">        c.clear();</span><br><span class="line">        System.out.println(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判度胺集合是否为空</span></span><br><span class="line">        System.out.println(c.isEmpty());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="二、Iterator迭代器"><a href="#二、Iterator迭代器" class="headerlink" title="二、Iterator迭代器"></a>二、Iterator迭代器</h2><h3 id="2-1-Iterator介绍"><a href="#2-1-Iterator介绍" class="headerlink" title="2.1 Iterator介绍"></a>2.1 Iterator介绍</h3><p><strong>迭代</strong>：就是Collection集合元素的通用获取方法。在取元素之前先判断集合中有没有元素，如果有，就把这个元素取出来，然后继续判断，重复这个过程，直到集合中所有元素全部驱逐。这种取出的方法叫做迭代。</p>
<p>在Java中，专门提供了一个<code>接口</code>来实现迭代操作：<code>java.util.Iterator</code></p>
<p>迭代器其实就是一个遍历集合的工具，内部有一个光标，这个光标最开始指向了集合的最开头位置。</p>
<p>获取迭代器的方法：</p>
<ul>
<li><code>public Iterator iteratoc()</code>:获取集合对应的迭代器，进行集合的遍历。<ul>
<li>使用格式：<code>Iterator&lt;集合中存储的数据类型&gt; it = 集合变量名.iterator();</code></li>
</ul>
</li>
</ul>
<p>Iterator接口的常用方法：</p>
<ul>
<li><code>public boolean hasNext()</code>：判断集合中是否还有元素可以获取，有则返回true</li>
<li><code>public E next()</code>：获取当前光标位置的元素，然后把光标向后移动</li>
</ul>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Iterator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Collection&lt;String&gt; c = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        c.add(<span class="string">"aa"</span>);</span><br><span class="line">        c.add(<span class="string">"bb"</span>);</span><br><span class="line">        c.add(<span class="string">"cc"</span>);</span><br><span class="line">        c.add(<span class="string">"dd"</span>);</span><br><span class="line">        c.add(<span class="string">"ee"</span>);</span><br><span class="line">        <span class="comment">//获取迭代器对象</span></span><br><span class="line">        Iterator&lt;String&gt; it = c.iterator();</span><br><span class="line">        <span class="comment">//循环判断光标处有没有元素</span></span><br><span class="line">        <span class="keyword">while</span> (it.hasNext())&#123;</span><br><span class="line">            <span class="comment">//有则进入循环，next方法，获取元素并且方法会让光标向后移动一位。</span></span><br><span class="line">            String str = it.next();</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>扩展知识：</p>
<ol>
<li><p>在进行集合元素获取时，如果集合中已经没有元素了，再继续使用next方法时，将会抛出<code>java.util.NoSuchElementException</code>(没有集合元素异常)</p>
</li>
<li><p>在进行集合元素获取时，在这个过程中同时进行添加或移除操作，将无法进行迭代操作，将会抛出<code>java.util.ConcurrentModificationException</code>(并发修改异常)</p>
</li>
</ol>
</blockquote>
<h3 id="2-2-迭代器实现原理"><a href="#2-2-迭代器实现原理" class="headerlink" title="2.2 迭代器实现原理"></a>2.2 迭代器实现原理</h3><h3 id="2-3-增强for循环"><a href="#2-3-增强for循环" class="headerlink" title="2.3 增强for循环"></a>2.3 增强for循环</h3><p>增强for循环(也称<code>for each循环</code>)是 <code>JDK5</code>以后出来的一个高级for循环，专门用来遍历数组和集合的。</p>
<p><strong>遍历集合</strong></p>
<ul>
<li>它的内部原理其实是个Iterator迭代器，所以在遍历的过程中，不能用集合的删除方法对集合中的元素进行删除操作。</li>
</ul>
<p><strong>遍历数组</strong></p>
<ul>
<li>增强for是一种语法糖，语法糖指的是本质没有变，只不过写法更加优雅，更加简洁了</li>
<li>增强for的本质就是for循环</li>
</ul>
<p>使用格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(元素数据类型 变量名 : 需要遍历的集合或数组)&#123;</span><br><span class="line">	<span class="comment">//操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01ForEach</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arrInt = &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> n : arrInt)&#123;</span><br><span class="line">            System.out.println(n);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Collection&lt;String&gt; c = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        c.add(<span class="string">"aa"</span>);</span><br><span class="line">        c.add(<span class="string">"bb"</span>);</span><br><span class="line">        c.add(<span class="string">"cc"</span>);</span><br><span class="line">        c.add(<span class="string">"dd"</span>);</span><br><span class="line">        c.add(<span class="string">"ee"</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : c) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="三、泛型"><a href="#三、泛型" class="headerlink" title="三、泛型"></a>三、泛型</h2><h3 id="3-1-什么是泛型"><a href="#3-1-什么是泛型" class="headerlink" title="3.1 什么是泛型"></a>3.1 什么是泛型</h3><p>泛型：泛型是一种未知的，不确定的类型</p>
<p>举例：比如<code>ArrayList&lt;E&gt;</code>，这个<strong>E</strong>就是泛型。但是E表示哪种数据类型，不确定，索引泛型是一种未知的，不确定的类型。</p>
<ul>
<li>虽然泛型类型E表示是一种不确定的类型，但是等我们将来使用这个类创建对象时，这个E表示的数据类型就可以确定下来。</li>
<li>比如：<ul>
<li>ArrayList<String> 此时这个泛型类型E表示的就是String</li>
<li>ArrayList<Person> 此时这个泛型类型E表示的就是Person</li>
</ul>
</li>
</ul>
<blockquote>
<p>泛型也是可以省略的，如果省略泛型，相当于泛型是Object。</p>
</blockquote>
<h3 id="3-2-使用泛型的好处"><a href="#3-2-使用泛型的好处" class="headerlink" title="3.2 使用泛型的好处"></a>3.2 使用泛型的好处</h3><ul>
<li>可以省略向下转型的代码。<ul>
<li>可以将运行时的问题提前到编译时期。</li>
</ul>
</li>
</ul>
<blockquote>
<p>小结：</p>
<p>1.将运行期类型转换异常<code>(java.util.ClassCastException)</code>，转移到了编译时期，提前编译报错。</p>
<p>2.避免了进行强制类型转换的麻烦</p>
</blockquote>
<blockquote>
<p>扩展：</p>
<p>泛型擦除：Java中的泛型时伪泛型，泛型只在源代码阶段有效，一旦编译，泛型就会消失。也叫泛型擦除。</p>
</blockquote>
<h3 id="3-3-泛型的定义和使用"><a href="#3-3-泛型的定义和使用" class="headerlink" title="3.3 泛型的定义和使用"></a>3.3 泛型的定义和使用</h3><h4 id="3-3-1-含有泛型的类"><a href="#3-3-1-含有泛型的类" class="headerlink" title="3.3.1 含有泛型的类"></a>3.3.1 含有泛型的类</h4><p>如果在定义类的时候，在类名后面加上<T>,就表示在类中定义了一个不确定的类型T。</p>
<ul>
<li>T可以是任何字母，一般是一个大写字母。</li>
<li>T真正表示一种数据类型，只不过它在刚写出来的时候是未知的</li>
<li>当我们使用这个类(创建对象)时，会指定这个T是什么类型，那么此时这个T表示的数据类型就可以确定了。</li>
<li>这个T就是一个泛型。</li>
</ul>
<p>定义格式：<code>修饰符 class 类名&lt;代表泛型的变量&gt; {...}</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>&lt;<span class="title">T</span>&gt;</span>&#123;<span class="comment">//定义了一个泛型类型T</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">method</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>小结：</strong>如果是在类上面定义的泛型，在整个类中都可以使用，类上面定义的泛型需要等到使用这个类(创建对象)，才会指定这个泛型是什么类型。</p>
</blockquote>
<h4 id="3-3-2-含有泛型的方法"><a href="#3-3-2-含有泛型的方法" class="headerlink" title="3.3.2 含有泛型的方法"></a>3.3.2 含有泛型的方法</h4><p>如果想要在调用方法时才确定具体的类型，那么我们可以使用泛型方法(在方法上定义泛型)</p>
<ul>
<li>在方法上定义泛型，那么这个泛型会在调用方法时才指定。</li>
</ul>
<p>定义格式：<code>修饰符 &lt;代表泛型的变量&gt; 返回值类型 方法名(参数列表){方法体}</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     &lt;E&gt;：表示方法中定义了一个未知的，不确定的泛型类型E</span></span><br><span class="line"><span class="comment">     返回值处E：使用了未知的，不确定的类型E当作了返回值类型</span></span><br><span class="line"><span class="comment">     参数上的E：实用类未知的,不确定的类型E当作了参数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> &lt;E&gt; <span class="function">E <span class="title">method</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">	<span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>小结：</strong>如果是在方法上定义的泛型，在方法中可以使用。方法上面定义的泛型需要等到调用方法时才能确定这个泛型是什么类型。</p>
</blockquote>
<h4 id="3-3-3-含有泛型的接口"><a href="#3-3-3-含有泛型的接口" class="headerlink" title="3.3.3 含有泛型的接口"></a>3.3.3 含有泛型的接口</h4><p>如果在定义接口时，在接口后面写上<T>，那么就表示在接口中定义了一个泛型类型T(不确定的类型)</p>
<p>定义格式：<code>修饰符 interface 接口名&lt;代表泛型的变量&gt;{...}</code></p>
<p>定义在接口上的泛型有两种使用方式：</p>
<ul>
<li>在实现类实现接口时，可以直接指定泛型类型</li>
<li>实现类在实现接口时，可以不指定泛型，等到使用实现类时再指定</li>
</ul>
<p><strong>演示：</strong></p>
<p>接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span>&lt;<span class="title">T</span>&gt; </span>&#123;<span class="comment">// 在接口中定义了一个泛型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义方法，使用泛型类型T当作参数类型和返回值类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> T <span class="title">method</span><span class="params">(T t)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现类在实现接口时指定泛型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 实现类在实现接口时，可以直接在接口后面写上尖括号去指定泛型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Sunmoon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterfaceImpl1</span> <span class="keyword">implements</span> <span class="title">MyInterface</span>&lt;<span class="title">Phone</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Phone <span class="title">method</span><span class="params">(Phone phone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现类在实现接口时,不指定泛型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 我们在定义类或者接口时，只有在当前类或者接口名字后面写的尖括号是在定义泛型，其他都是再使用泛型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterfaceImpl2</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">MyInterface</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">method</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口泛型测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03GenericTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        MyInterfaceImpl1 mi1 = <span class="keyword">new</span> MyInterfaceImpl1();</span><br><span class="line">        Phone phone = mi1.method(<span class="keyword">new</span> Phone());</span><br><span class="line"></span><br><span class="line">        MyInterfaceImpl2&lt;Pad&gt; mi2 = <span class="keyword">new</span> MyInterfaceImpl2&lt;&gt;();</span><br><span class="line">        Pad pad = mi2.method(<span class="keyword">new</span> Pad());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小贴士：</p>
<ul>
<li>泛型表示一种未知的数据类型<ul>
<li>定义在类上的泛型，使用类的时候会确定泛型的类型</li>
<li>定义在方法上的泛型，会在使用方法的时候确定泛型</li>
<li>定义在接口上的泛型，需要使用接口的时候确定泛型。</li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="3-3-4-泛型通配符"><a href="#3-3-4-泛型通配符" class="headerlink" title="3.3.4 泛型通配符"></a>3.3.4 泛型通配符</h3><p>当使用泛型类或者接口时，传递的数据中，泛型类型不确定，可以通过通配符<code>&lt;?&gt;</code>表示。但是一旦使用泛型的通配<br>符后，只能使用Object类中的共性方法，集合中元素自身方法无法使用。</p>
<h5 id="通配符基本使用"><a href="#通配符基本使用" class="headerlink" title="通配符基本使用"></a>通配符基本使用</h5><p><strong>泛型的通配符</strong>：不知道使用什么类型来接收的时候,此时可以使用<code>?</code>,<code>?表示未知通配符</code>。</p>
<ul>
<li>此时只能接受数据,不能往该集合中存储数据。</li>
</ul>
<h5 id="通配符高级使用—-受限泛型"><a href="#通配符高级使用—-受限泛型" class="headerlink" title="通配符高级使用—-受限泛型"></a>通配符高级使用—-受限泛型</h5><p>之前设置泛型的时候，实际上是可以任意设置的，只要是类就可以设置。但是在JAVA的泛型中可以指定一个泛型的<br><strong>上限</strong>和<strong>下限</strong>。</p>
<p><strong>泛型的上限：</strong></p>
<ul>
<li>格式：<code>类型名称 &lt;? extends 类&gt; 对象名称</code></li>
<li>意义：只能接收该类型及其子类</li>
</ul>
<p><strong>泛型的下限：</strong></p>
<ul>
<li>格式：<code>类型名称 &lt;? super 类&gt; 对象名称</code></li>
<li>意义：只能接收该类型及其父类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 泛型限定</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 作用：可以对泛型通配符?的取值范围进行限制</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;? extends A&gt;：泛型要么是A类，要么是A类的子类——上限</span></span><br><span class="line"><span class="comment"> * &lt;? super A&gt;：泛型要么是A类，要么是A类的父类——下限</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 泛型主要用于代码的重构，代码得优化。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Sunmoon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Generic</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="string">"张三"</span>,<span class="number">18</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="string">"拉拉"</span>,<span class="number">20</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="string">"李四"</span>,<span class="number">30</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="string">"王五"</span>,<span class="number">40</span>));</span><br><span class="line">        printArrayList(list);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Person&gt; personList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        printArrayList(personList);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Object&gt; objList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// printArrayList(objList);参数集合泛型是Person的父类，报错</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用method方法</span></span><br><span class="line">        <span class="comment">// method(list);//参数是Person的子类，有问题</span></span><br><span class="line">        method(personList);<span class="comment">//参数是Person，没问题</span></span><br><span class="line">        method(objList);<span class="comment">//参数是Person的父类，没问题</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义方法，用来保存Person或者Person的子类的集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list 参数集合的泛型要么是Person要么是Person的子类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArrayList</span><span class="params">(ArrayList&lt;? extends Person&gt; list)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对集合进行遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Person person : list) &#123;</span><br><span class="line">            System.out.println(person);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用泛型下限</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list 参数集合的泛型要么是Person，要么是Person的父类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(ArrayList&lt;? <span class="keyword">super</span> Person&gt; list)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结：<code>?</code>表示泛型通配符，如果要对?泛型通配符的取值范围进行限制，可以使用泛型限定</p>
</blockquote>
<h2 id="四、数据结构介绍"><a href="#四、数据结构介绍" class="headerlink" title="四、数据结构介绍"></a>四、数据结构介绍</h2><p>数据结构：存储数据的方式。如果某个容器存储数据的方式不同，那么他们的特点也不同。</p>
<h3 id="4-1-常见的数据结构"><a href="#4-1-常见的数据结构" class="headerlink" title="4.1 常见的数据结构"></a>4.1 常见的数据结构</h3><p>常见的数据结构有：栈、队列、数组、链表和红黑树。</p>
<h4 id="4-1-1-栈"><a href="#4-1-1-栈" class="headerlink" title="4.1.1 栈"></a>4.1.1 栈</h4><p>栈：stack，又称为堆栈</p>
<p>举例：弹夹</p>
<p><strong>特点：</strong></p>
<ul>
<li>先进后出。</li>
<li>栈的入口和出口都是栈的顶端位置</li>
</ul>
<p><strong>名词解释：</strong></p>
<ul>
<li><p><strong>压栈</strong>：就是存元素。把元素存到栈顶，栈中其他元素依次向栈底移动一个位置</p>
</li>
<li><p><strong>弹栈</strong>：取元素。把栈的顶端位置元素取出，栈中其他元素一次向栈顶移动一个位置.</p>
</li>
</ul>
<h4 id="4-1-2-队列"><a href="#4-1-2-队列" class="headerlink" title="4.1.2 队列"></a>4.1.2 队列</h4><p>举例：排队</p>
<p><strong>特点：</strong></p>
<ul>
<li>先进先出</li>
<li>队列的入口和出口各自占一侧。</li>
</ul>
<h4 id="4-1-3-数组"><a href="#4-1-3-数组" class="headerlink" title="4.1.3 数组"></a>4.1.3 数组</h4><p>特点：</p>
<ul>
<li>查询快：可以通过索引快速定位到元素。</li>
<li>增删元素慢</li>
</ul>
<h4 id="4-1-4-链表"><a href="#4-1-4-链表" class="headerlink" title="4.1.4 链表"></a>4.1.4 链表</h4><p>链表中由很多的节点组成。每个节点都至少包含两部分内容，一部分是该系欸但保存的数据，另一部分指向下个节点的地址值。</p>
<p>单向链表特点：</p>
<ul>
<li><p>多个节点之间，通过地址值连接。</p>
</li>
<li><p>查找元素慢：在数组中离散存储，离散存储指的是每个节点在内存中是不连续的。</p>
</li>
<li><p>增删元素快：对链表进行操作，只需要操作某个节点。</p>
</li>
</ul>
<h3 id="4-2-树的基本结构"><a href="#4-2-树的基本结构" class="headerlink" title="4.2 树的基本结构"></a>4.2 树的基本结构</h3><p>树具有的特点：</p>
<ul>
<li>每一个节点有零个或者多个子节点</li>
<li>没有父节点的节点称为根节点，一个树最多只有一个根节点</li>
<li>每个非根节点有且只有一个父节点</li>
</ul>
<p><strong>名词解释</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>节点</td>
<td>指树中的一个元素</td>
</tr>
<tr>
<td>叶子的度</td>
<td>节点拥有子树的个数，二叉树的度不大于2</td>
</tr>
<tr>
<td>叶子节点</td>
<td>度为0的节点，也称之为终端节点</td>
</tr>
<tr>
<td>高度</td>
<td>叶子节点的高度为1，叶子节点的父节点高度为2，以此类推，根节点的高度最高</td>
</tr>
<tr>
<td>层</td>
<td>根节点在第一层，以此类推</td>
</tr>
<tr>
<td>父节点</td>
<td>若一个节点含有子节点，则这个节点称之为其子节点的父节点</td>
</tr>
<tr>
<td>子节点</td>
<td>子节点是父节点的下一层节点</td>
</tr>
<tr>
<td>兄弟节点</td>
<td>拥有共同父节点的节点互称为兄弟节点</td>
</tr>
</tbody></table>
<h4 id="4-2-1-二叉树"><a href="#4-2-1-二叉树" class="headerlink" title="4.2.1 二叉树"></a>4.2.1 二叉树</h4><p><strong>二叉树：</strong>树结构中的每个节点的子节点的个数不超过2，那么该树就是一个二叉树。</p>
<p>图解：略…</p>
<h4 id="4-2-2-二叉查找树"><a href="#4-2-2-二叉查找树" class="headerlink" title="4.2.2 二叉查找树"></a>4.2.2 二叉查找树</h4><p>图解：略…</p>
<p><strong>特点：</strong></p>
<ul>
<li><p>左子树上所有的节点的值均小于它的根节点的值。</p>
</li>
<li><p>右子树上所有的节点的值均大于他的根节点的值</p>
</li>
<li><p>每一个节点最多有两个子树。</p>
</li>
</ul>
<p>二叉查找树在遍历获取元素的时候可以按照【左中右】的顺序进行遍历</p>
<blockquote>
<p>小贴士</p>
<ul>
<li>二叉查找树存在的问题：会出现【瘸子】的现象，影响查找效率。</li>
</ul>
</blockquote>
<h4 id="4-2-3-平衡二叉树"><a href="#4-2-3-平衡二叉树" class="headerlink" title="4.2.3 平衡二叉树"></a>4.2.3 平衡二叉树</h4><h5 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h5><p>平衡二叉树：在二叉查找树的基础上，它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。</p>
<h5 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h5><p>图解：略…</p>
<h4 id="4-2-4-红黑树"><a href="#4-2-4-红黑树" class="headerlink" title="4.2.4 红黑树"></a>4.2.4 红黑树</h4><p>图解：略…</p>
<p>特点：</p>
<ul>
<li>每一个节点或是红色，或者是黑色的。</li>
<li>根节点必须是黑色的</li>
<li>每个叶节点(Nil)是黑色的；（如果一个节点没有子节点或者父节点，则该节点相应的指针属性值为Nil，这些Nil视为叶节点）</li>
<li>如果某一个节点是红色，那么它的子节点必须是黑色（不能出现两个红色节点相连的情况）</li>
<li>对每一个节点，从该节点到其所有后代叶节点的简单路径上，均包含相同数目的黑色节点。</li>
</ul>
<blockquote>
<p>小贴士</p>
<p>在进行元素插入的时候，和之前一样； 每一次插入完毕以后，使用黑色规则进行校验，如果不满足红黑规则，就需 要通过变色，左旋和右旋来调整树，使其满足红黑规则。</p>
</blockquote>
<h2 id="五、List接口"><a href="#五、List接口" class="headerlink" title="五、List接口"></a>五、List接口</h2><h3 id="5-1-List接口介绍"><a href="#5-1-List接口介绍" class="headerlink" title="5.1 List接口介绍"></a>5.1 List接口介绍</h3><p><code>java.util.List</code>接口继承自<code>Collection</code>接口。</p>
<p>List接口特点：</p>
<ul>
<li><strong>元素有序</strong>：即是在元素的存入和取出时，顺序的一致的。例如：存入{1，23，10}，在集合中也是按照这个顺序存储的，取出也是一样的顺序。</li>
<li><strong>带有索引</strong>：集合中元素是带有索引的，可以通过索引紧缺的操作集合中的元素(参考数组索引)。</li>
<li><strong>可存重复元素</strong>：集合中的元素是可以重复的，可以使用equals方法来判断是否是重复元素。</li>
</ul>
<h3 id="5-2-List接口中的常用方法"><a href="#5-2-List接口中的常用方法" class="headerlink" title="5.2 List接口中的常用方法"></a>5.2 List接口中的常用方法</h3><p>List接口作为Collection的子接口，继承了Collention中的全部方法，还增加了一些根据元素索引操作集合的特有方法。</p>
<ul>
<li><p><code>public void add(int index, E element)</code>：将指定元素(element)，添加到集合中的指定位置(index)上。</p>
</li>
<li><p><code>public E get(int index)</code>：获取集合中指定索引位置(index)的元素，并返回。</p>
</li>
<li><p><code>public E remove(int index)</code>：移除集合中指定位置(index)的元素，并返回</p>
</li>
<li><p><code>public E set(int index, E element)</code>：用指定元素(element)替换集合中指定索引位置(index)的元素，返回值时被替换掉的元素。</p>
</li>
</ul>
<h3 id="5-3-ArrayList集合"><a href="#5-3-ArrayList集合" class="headerlink" title="5.3 ArrayList集合"></a>5.3 ArrayList集合</h3><p><code>java.util.ArrayList</code>集合数据存的结构是<strong>数组结构</strong>。</p>
<p>默认以原来数组的1.5倍进行扩容。</p>
<p><strong>特点：</strong>元素增删慢，查找快。</p>
<blockquote>
<p>小贴士：</p>
<p>由于日常开发中使用最多的功能为查询、遍历数据，所以ArrayList集合是最常用的集合。</p>
<p>在开发中随意的使用ArrayList集合完成任何需求，这样做法并不严禁，<strong>不提倡</strong>。</p>
</blockquote>
<h3 id="5-4-LinkedList集合"><a href="#5-4-LinkedList集合" class="headerlink" title="5.4 LinkedList集合"></a>5.4 LinkedList集合</h3><p><code>java.util.LinkedList</code>集合数据存储的结构是<strong>链表结构</strong>。(双向链表)</p>
<p><strong>特点：</strong>方便元素的添加、删除等操作。</p>
<p><strong>常见方法：</strong></p>
<ul>
<li><code>public void addFirst(E e)</code>：将指定元素插入到集合的开头。</li>
<li><code>public void addLast(E e)</code>：将指定元素插入到集合的末尾。</li>
<li><code>public E getFirst()</code>：返回集合中第一个元素。</li>
<li><code>public E getLast()</code>：返回集中的最后一个元素。</li>
<li><code>public E removeFirst()</code>：移除并返回集合中的第一个元素。</li>
<li><code>public E removeLast()</code>：移除并返回集合中最后一个元素。</li>
<li><code>public E pop()</code>：从此列表表示的堆栈中弹出一个元素。(弹栈)</li>
<li><code>public void push(E e)</code>：将元素推入此列表所表示的堆栈。(压栈)</li>
<li><code>public boolean isEmpty</code>：判断集合是否为空，为空则返回true。</li>
</ul>
<p>方法演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03LinkedList</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkedList&lt;String&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"hello"</span>);</span><br><span class="line">        list.add(<span class="string">"world"</span>);</span><br><span class="line">        list.add(<span class="string">"java"</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        System.out.println(<span class="string">"================="</span>);</span><br><span class="line">        list.push(<span class="string">"php"</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// String pop = list.pop();</span></span><br><span class="line">        <span class="comment">// System.out.println(pop);</span></span><br><span class="line">        <span class="comment">// String s = list.removeFirst();</span></span><br><span class="line">        <span class="comment">// String s = list.removeLast();</span></span><br><span class="line">        <span class="comment">// System.out.println(s);</span></span><br><span class="line">        <span class="comment">// System.out.println(list);</span></span><br><span class="line">        <span class="comment">// list.addFirst("php");</span></span><br><span class="line">        <span class="comment">// list.addLast("php");</span></span><br><span class="line">        <span class="comment">// System.out.println(list);</span></span><br><span class="line">        <span class="comment">// String first = list.getFirst();</span></span><br><span class="line">        <span class="comment">// String last = list.getLast();</span></span><br><span class="line">        <span class="comment">// System.out.println(first);</span></span><br><span class="line">        <span class="comment">// System.out.println(last);</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"==================="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="六、集合综合案例"><a href="#六、集合综合案例" class="headerlink" title="六、集合综合案例"></a>六、集合综合案例</h2><p><strong>斗地主案例：</strong></p>
<p>需求：</p>
<ul>
<li>按照斗地主的规则，完成洗牌发牌的动作。 <ul>
<li>使用54张牌打乱顺序,三个玩家参与游戏，三人交替摸牌，每人17张牌，最后三张留作底牌。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 斗地主案例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 步骤：</span></span><br><span class="line"><span class="comment"> *      1. 准备牌</span></span><br><span class="line"><span class="comment"> *          a.创建集合，用来保存牌</span></span><br><span class="line"><span class="comment"> *          b.向集合中添加54张牌</span></span><br><span class="line"><span class="comment"> *      2. 洗牌</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      3. 发牌</span></span><br><span class="line"><span class="comment"> *      4. 看牌</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Sunmoon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//准备容器——牌盒</span></span><br><span class="line">        List&lt;String&gt; poker = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="comment">//准备花色数组</span></span><br><span class="line">        String[] colors = &#123;<span class="string">"♠"</span>,<span class="string">"♥"</span>,<span class="string">"♣"</span>,<span class="string">"♦"</span>&#125;;</span><br><span class="line">        <span class="comment">//准备数字牌</span></span><br><span class="line">        String[] nums = &#123;<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">"6"</span>,<span class="string">"7"</span>,<span class="string">"8"</span>,<span class="string">"9"</span>,<span class="string">"10"</span>,<span class="string">"J"</span>,<span class="string">"Q"</span>,<span class="string">"K"</span>,<span class="string">"A"</span>,<span class="string">"2"</span>&#125;;</span><br><span class="line">        <span class="comment">//添加大🃏，小🃏,进入牌盒</span></span><br><span class="line">        poker.add(<span class="string">"大🃏"</span>);</span><br><span class="line">        poker.add(<span class="string">"小🃏"</span>);</span><br><span class="line">        <span class="comment">//把花色和数字组合，加入牌盒</span></span><br><span class="line">        <span class="keyword">for</span> (String color : colors) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String num : nums) &#123;</span><br><span class="line">                poker.add(color+num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//洗牌，使用Collections工具类中的shuffle()方法</span></span><br><span class="line">        Collections.shuffle(poker);</span><br><span class="line">        <span class="comment">//发牌</span></span><br><span class="line">        <span class="comment">//玩家1</span></span><br><span class="line">        ArrayList&lt;String&gt; playerOne = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//玩家2</span></span><br><span class="line">        ArrayList&lt;String&gt; playerTwo = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//玩家3</span></span><br><span class="line">        ArrayList&lt;String&gt; playerThree = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//底牌</span></span><br><span class="line">        ArrayList&lt;String&gt; bottomCard = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//普通for循环遍历牌盒集合，把对应的牌加入对应玩家的集合中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; poker.size(); i++) &#123;</span><br><span class="line">            <span class="comment">//先判断是否是最后三张牌，是则加入底牌集合</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt;= poker.size() - <span class="number">3</span>)&#123;</span><br><span class="line">                bottomCard.add(poker.get(i));</span><br><span class="line">                <span class="comment">//是则跳过本次循环，不执行下面发牌动作了</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//发牌时，第一个人拿的到牌的索引为0，3，6，...&#125;第二个人拿到牌的索引&#123;1，4，7，...&#125;,第三个人拿到牌的索引&#123;2，5，8，...&#125;</span></span><br><span class="line">            <span class="comment">//可以看出以下结论</span></span><br><span class="line">            <span class="comment">//判断索引对3取余等于0就给第一个人发牌</span></span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                playerOne.add(poker.get(i));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//对3取余等于1则给第二个人发牌</span></span><br><span class="line">                playerTwo.add(poker.get(i));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//此处意思是对3取余等于2则给第三个人发牌</span></span><br><span class="line">                playerThree.add(poker.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//看牌</span></span><br><span class="line">        lookCard(<span class="string">"张三"</span>,playerOne);</span><br><span class="line">        lookCard(<span class="string">"李四"</span>,playerTwo);</span><br><span class="line">        lookCard(<span class="string">"王五"</span>,playerThree);</span><br><span class="line">        lookCard(<span class="string">"底牌"</span>,bottomCard);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看牌面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 玩家姓名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list 玩家牌面</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">lookCard</span><span class="params">(String name, ArrayList&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"【"</span>+name + <span class="string">"】牌面："</span>);</span><br><span class="line">        <span class="keyword">for</span> (String card : list) &#123;</span><br><span class="line">            System.out.print(card + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>学习</tag>
        <tag>集合</tag>
        <tag>泛型</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Collections、Set、Map</title>
    <url>/2020/07/30/Collections%E3%80%81Set%E3%80%81Map/</url>
    <content><![CDATA[<h2 id="一、Collections类"><a href="#一、Collections类" class="headerlink" title="一、Collections类"></a>一、Collections类</h2><p>Collections是操作集合的工具类</p>
<h3 id="1-1-Collections常用方法"><a href="#1-1-Collections常用方法" class="headerlink" title="1.1 Collections常用方法"></a>1.1 Collections常用方法</h3><ul>
<li><code>static void shuffle(List&lt;?&gt; list)</code>：打乱集合的顺序</li>
<li><code>static void sort(List list)</code>：对集合的内容进行排序【自然排序】</li>
<li><code>static void sort(List list, Comparator c)</code>：对集合的内容进行排序，第一个参数是集合，第二个参数是比较器</li>
<li><code>static &lt;T&gt; boolean addAll(Collection&lt;? super T&gt; c, T... elements)</code> ：向集合中批量添加数据。</li>
</ul>
<a id="more"></a>

<h4 id="1-1-1-shuffle-方法"><a href="#1-1-1-shuffle-方法" class="headerlink" title="1.1.1 shuffle()方法"></a>1.1.1 shuffle()方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Collections</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"aaa"</span>);</span><br><span class="line">        list.add(<span class="string">"bbb"</span>);</span><br><span class="line">        list.add(<span class="string">"ccc"</span>);</span><br><span class="line">        list.add(<span class="string">"ddd"</span>);</span><br><span class="line">        list.add(<span class="string">"eee"</span>);</span><br><span class="line">        Collections.shuffle(list);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-1-2-addAll-方法"><a href="#1-1-2-addAll-方法" class="headerlink" title="1.1.2 addAll()方法"></a>1.1.2 addAll()方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04Collections</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function">        List&lt;String&gt; list </span>= <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Collections.addAll(list,<span class="string">"aa"</span>,<span class="string">"bb"</span>,<span class="string">"cc"</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="1-1-3-自然排序sort-方法"><a href="#1-1-3-自然排序sort-方法" class="headerlink" title="1.1.3 自然排序sort()方法"></a>1.1.3 自然排序sort()方法</h4><p>如果想要使用上面的sort方法进行自然排序，那么必须保证事物本身就具备比较的功能。</p>
<ul>
<li>使用sort方法进行自然排序，那么必须保证事物本身就具备比较的功能。例如：String、Integer</li>
</ul>
<p>如果想要对自定义的类型进行排序，必须在类上实现了Comparable接口，那么就表示该事物具备比较的功能，那么才可以使用自然排序的方式进行排序。</p>
<p><strong>测试类：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Collections</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合</span></span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">200</span>);</span><br><span class="line">        list.add(<span class="number">100</span>);</span><br><span class="line">        list.add(<span class="number">300</span>);</span><br><span class="line">        <span class="comment">//排序</span></span><br><span class="line">        Collections.sort(list);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"======================="</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; strList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        strList.add(<span class="string">"bb"</span>);</span><br><span class="line">        strList.add(<span class="string">"aa"</span>);</span><br><span class="line">        strList.add(<span class="string">"cc"</span>);</span><br><span class="line">        Collections.sort(strList);</span><br><span class="line">        System.out.println(strList);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"======================="</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自定义类型进行自然排序</span></span><br><span class="line">        List&lt;Person&gt; personList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">"张三"</span>, <span class="number">22</span>));</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">"李四"</span>, <span class="number">18</span>));</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">"王五"</span>, <span class="number">21</span>));</span><br><span class="line">        Collections.sort(personList);</span><br><span class="line">        System.out.println(personList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>自定义类型Person：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Person</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在使用自然排序时，内部会自动调用compareTo方法比较两个对象谁大谁小</span></span><br><span class="line"><span class="comment">     * 如果方法的返回时正数，表示调用者对象大于参数对象</span></span><br><span class="line"><span class="comment">     * 如果方法返回值是0，相等</span></span><br><span class="line"><span class="comment">     * 如果方法的返回值是负数，表示调用者小于参数对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 我们要做的是在compareTo中定义排序规则</span></span><br><span class="line"><span class="comment">     * 公式： 升序就是我(调用者)减他(参数)</span></span><br><span class="line"><span class="comment">     *      想要根据对象的什么属性进行排序，就让什么属性相减。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Person o)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//根据年龄升序排序</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age-o.age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//构造方法、get/set方法，略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：要使用自然排序的集合，里面的泛型必须要实现Comparable接口。</strong></p>
<blockquote>
<p>小结</p>
<ol>
<li>自然排序指的是事物本身就具有比较的功能，那么我们就可以使用sort方法直接进行排序。</li>
<li>自定义类必须实现Comparable接口才具备了比较的功能，才可以使用自然排序</li>
<li>实现Comparable后要重写compareTo方法，公式：升序就是我减他</li>
</ol>
</blockquote>
<h3 id="1-2-Comparator比较器排序"><a href="#1-2-Comparator比较器排序" class="headerlink" title="1.2 Comparator比较器排序"></a>1.2 Comparator比较器排序</h3><p>假如某个类没有实现Comparable接口，就表示该事物不具备比较的功能，那么我们就不能直接对他进行排序了。</p>
<p>在这种情况下，我们想要进行排序，可以找一个法官来帮助他们进行比较，这个法官就可以叫做<strong>比较器</strong>。</p>
<p>上面提到的sort方法有一个重载，<code>static void sort(List list, Comparator c)</code>，这个方法就是传入比较器对象进行排序。</p>
<ul>
<li>第一个参数为集合</li>
<li>第二个参数为比较器</li>
</ul>
<p>其中第二个参数<code>Comparator</code>是一个接口，该接口表示比较器。如果参数是接口，我们需要传递实现类对象，这个实现类需要我们自己创建。</p>
<p>对Studente类型进行排序：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03Collections</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="string">"拉拉"</span>,<span class="number">20</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="string">"哈哈"</span>,<span class="number">30</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="string">"呵呵"</span>,<span class="number">18</span>));</span><br><span class="line">        Collections.sort(list, <span class="keyword">new</span> Rule());</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义比较器实现类(也可以使用匿名内部类)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Comparator这个接口表示比较器，当我们使用Rule类实现类这个接口，Rule表示的也就是比较器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rule</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * compare会在比较器排序时由系统自动调用，compare方法的作用是比较两个对象谁大谁小</span></span><br><span class="line"><span class="comment">     * 如果方法的返回值是正数，表示第一个参数对象大于第二个参数对象(o1&gt;o2)</span></span><br><span class="line"><span class="comment">     * 如果方法的返回值是0,表示两者相等(o1=o2)</span></span><br><span class="line"><span class="comment">     * 如果方法的返回值是负数，表示第一个参数对象小于第二个参数对象(o1&lt;o2)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 公式：</span></span><br><span class="line"><span class="comment">     *  升序：就是一减二</span></span><br><span class="line"><span class="comment">     *  想要根据什么属性排序，就让什么属性相减。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student o1, Student o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o1.getAge()-o2.getAge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>sort()方法小结：</p>
<ul>
<li>自然排序：如果某个类实现类Comparable接口，那么表示该事物具备了比较的功能，那么可以直接使用sort方法进行排序，这种排序方式叫做自然排序。</li>
<li><strong>比较器排序【主要】</strong>：我们也可以找一个法官来帮这些对象进行排序，这种排序的方式是比较器排序。如果要进行比较器排序，我们要定义一个类，实现Comparator接口，然后重写compare方法，在调用Collections的sort方法，传递集合和比较器即可。</li>
</ul>
</blockquote>
<h3 id="1-3-可变参数"><a href="#1-3-可变参数" class="headerlink" title="1.3 可变参数"></a>1.3 可变参数</h3><p>在JDK5的时候，多了一个新特性，叫做可变参数。可变参数的方法可以在参数位置传递任意个数据。</p>
<p><code>Collections类中的addAll()方法第二个参数就是可变参数</code></p>
<p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数类型... 参数名)&#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在调用带有可变参数的方法时，我们可以向可变参数位置传递任意个数据。</li>
<li>可变参数的本质时数组，所以我们直接将可变参数当成数组使用即可。</li>
<li>因为可变参数本质是数组，所以在调用可变参数的方法时，也可以传递数组。</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01ChangeParams</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sum  = getSum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span>... nums)</span></span>&#123;<span class="comment">//nums本质是数组</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">            sum += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意</p>
<ol>
<li>一个方法中最多只能有一个可变参数</li>
<li>可变参数只能放到方法参数的最后一个位置</li>
</ol>
</blockquote>
<h2 id="二、Set接口"><a href="#二、Set接口" class="headerlink" title="二、Set接口"></a>二、Set接口</h2><p>Set是Collection下面的另一个子接口</p>
<p>Set接口下的特点：</p>
<ul>
<li>无序（存取顺序不能保证一致）</li>
<li>无索引（不可以根据索引操作元素）</li>
<li>不可重复（存储元素不能重复）</li>
</ul>
<p>Set是一个接口，如果要用，需要使用实现类，Set接口下面最常用的实现类是HashSet</p>
<ul>
<li>HashSet满足Set接口的所有的特点</li>
</ul>
<h3 id="2-1-Set接口的遍历"><a href="#2-1-Set接口的遍历" class="headerlink" title="2.1 Set接口的遍历"></a>2.1 Set接口的遍历</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Set集合的遍历。</span></span><br><span class="line"><span class="comment">    因为Set集合是没有索引的，所以不能使用普通for遍历，可以使用迭代器或增强for遍历，强烈推荐增强for</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Set</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        set.add(<span class="string">"hello"</span>);</span><br><span class="line">        set.add(<span class="string">"world"</span>);</span><br><span class="line">        set.add(<span class="string">"java"</span>);</span><br><span class="line">        set.add(<span class="string">"php"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String s : set) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-2-Hash集合存储数据的结构——哈希表"><a href="#2-2-Hash集合存储数据的结构——哈希表" class="headerlink" title="2.2 Hash集合存储数据的结构——哈希表"></a>2.2 Hash集合存储数据的结构——哈希表</h3><p>哈希表是归并后的结果。</p>
<h4 id="2-2-1-哈希值概念"><a href="#2-2-1-哈希值概念" class="headerlink" title="2.2.1 哈希值概念"></a>2.2.1 哈希值概念</h4><p>哈希值:就是一个int数字，我们可以把哈希值堪称对象的标识(特征码)</p>
<p>在Object中，有一个方法hashCode，可以获取到哈希值(hashCode)。</p>
<ul>
<li><code>int hashCode()</code>:获取对象的哈希值。</li>
</ul>
<blockquote>
<p>Object中的hashCode方法，是根据对象的地址值计算的哈希值</p>
</blockquote>
<p>对象的哈希值根据地址值计算一般来说意义不大，我们更多的是希望哈希值是根据属性计算的，如果两个对象的属性完全相同，哈希值也应该相同。</p>
<p>如果想要自己定义哈希值的计算规则，需要重写hashCode方法。</p>
<p>哈希值是对象的一个标识，但并不是唯一的标识，对象的哈希值允许重复。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01HashCode</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Person p = <span class="keyword">new</span> Person(<span class="string">"张三丰"</span>,<span class="number">108</span>);</span><br><span class="line">        <span class="comment">//获取哈希值并输出</span></span><br><span class="line">        System.out.println(p.hashCode());</span><br><span class="line"></span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person(<span class="string">"张三丰"</span>,<span class="number">108</span>);</span><br><span class="line">        System.out.println(p2.hashCode());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = name != <span class="keyword">null</span> ? name.hashCode() : <span class="number">0</span>;</span><br><span class="line">        result = <span class="number">31</span> * result + age;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写hashCode方法，自己定义哈希值的计算规则</span></span><br><span class="line"><span class="comment">     * 根据姓名和年龄计算哈希值，如果对象的姓名和年龄相同，得到的哈希值也应该相同</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public int hashCode() &#123;</span></span><br><span class="line"><span class="comment">        //获取姓名的哈希值加上年龄，结果就是该对象的哈希值</span></span><br><span class="line"><span class="comment">        return name.hashCode() * 31 + age;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * p1 = new Person("张三",13);  3 + 13 -&gt; 16</span></span><br><span class="line"><span class="comment">     * p2 = new Person("李四",12);  4 + 12 -&gt; 16</span></span><br><span class="line"><span class="comment">     * "张三"：3</span></span><br><span class="line"><span class="comment">     * "李四"：4</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//get...set...构造方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-2-哈希表"><a href="#2-2-2-哈希表" class="headerlink" title="2.2.2 哈希表"></a>2.2.2 哈希表</h4><p>哈希表：哈希表是一个数组，数组中每一个元素都是一个链表</p>
<blockquote>
<p>扩展：</p>
<p>桶：数组中每一个元素(链表)都是一个桶</p>
<p>哈希冲突：如果两个对象出现在了同一个桶内，就表示发生了哈希冲突</p>
<p>加载因子：是一个百分比，默认是0.75，如果哈希表中桶的使用比例超过加载因子，就会对哈希表进行再哈希。</p>
<p>再哈希：对哈希表扩容，让分类更广。</p>
</blockquote>
<p><strong>哈希表图解：</strong></p>
<p><img data-src="/image/hash_img.png" alt="hash_img"></p>
<h3 id="2-3-HashSet保证数据唯一性"><a href="#2-3-HashSet保证数据唯一性" class="headerlink" title="2.3 HashSet保证数据唯一性"></a>2.3 HashSet保证数据唯一性</h3><p>图解：</p>
<p><img data-src="/image/HashSet%E4%BF%9D%E8%AF%81%E6%95%B0%E6%8D%AE%E5%94%AF%E4%B8%80%E6%80%A7.png" alt="HashSet保证数据唯一性"></p>
<p>HashSet判断唯一性的过程</p>
<ol>
<li>先比较对象的哈希值。<ul>
<li>如果哈希值不同，肯定是不同的对象。 </li>
<li>如果哈希值相同，不一定是同一个对象。</li>
</ul>
</li>
<li>如果哈希值相同，还会调用equals进行比较。<ul>
<li>如果equals的结果是true，表示对象相同。</li>
<li>如果equals的结果是false，表示对象不同</li>
</ul>
</li>
</ol>
<h4 id="2-3-1-练习"><a href="#2-3-1-练习" class="headerlink" title="2.3.1 练习"></a>2.3.1 练习</h4><p>要求：使用HashSet保存学生对象，然后并遍历。</p>
<ul>
<li>学生对象要保证唯一性（如果学生的姓名和年龄相同，就看成是同一个学生）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01HashSet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建HashSet集合</span></span><br><span class="line">        Set&lt;Student&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        set.add(<span class="keyword">new</span> Student(<span class="string">"柳岩"</span>, <span class="number">36</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> Student(<span class="string">"李小璐"</span>, <span class="number">34</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> Student(<span class="string">"马蓉"</span>, <span class="number">32</span>));</span><br><span class="line"></span><br><span class="line">        set.add(<span class="keyword">new</span> Student(<span class="string">"柳岩"</span>, <span class="number">36</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合，输出集合中的每一个学生对象</span></span><br><span class="line">        <span class="keyword">for</span> (Student stu : set) &#123;</span><br><span class="line">            System.out.println(stu);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        Student student = (Student) o;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (age != student.age) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> name != <span class="keyword">null</span> ? name.equals(student.name) : student.name == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = name != <span class="keyword">null</span> ? name.hashCode() : <span class="number">0</span>;</span><br><span class="line">        result = <span class="number">31</span> * result + age;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    get..set..构造方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>结论：如果使用HashSet存储自定义对象并保证唯一性（对象的属性相同就看成是同一个对象），需要同时重写hashCode和equals，缺一不可。</p>
</blockquote>
<h3 id="2-4-LinkedHashSet"><a href="#2-4-LinkedHashSet" class="headerlink" title="2.4 LinkedHashSet"></a>2.4 LinkedHashSet</h3><p>LinkedHashSet也是Set接口下的实现类。</p>
<p>LinkedHashSet内部除了有一个哈希表之外，还有一个链表。</p>
<ul>
<li>链表的作用是保证有序。LinkedHashSet是有序的</li>
</ul>
<blockquote>
<p>小贴士：Set接口是无序的，但是他不能保证所有的实现类都无序。</p>
</blockquote>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01LinkedHashSet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建LinkedHashSet集合</span></span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">        set.add(<span class="string">"张三丰"</span>);</span><br><span class="line">        set.add(<span class="string">"张无忌"</span>);</span><br><span class="line">        set.add(<span class="string">"灭绝师太"</span>);</span><br><span class="line">        set.add(<span class="string">"金花婆婆"</span>);</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        System.out.println(set);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-5-TreeSet集合"><a href="#2-5-TreeSet集合" class="headerlink" title="2.5 TreeSet集合"></a>2.5 TreeSet集合</h3><p>TreeSet也是Set接口下的实现类。</p>
<p>TreeSet内部是一个二叉树，TreeSet可以自动对集合中的内容进行排序。</p>
<p>构造方法：</p>
<ul>
<li><code>TreeSet()</code>：空参的构造方法创建的TreeSet集合会使用自然排序的方式对集合中的元素进行排序</li>
<li><code>TreeSet(Comparator comparator)</code>：参数需要传递一个比较器，会使用比较器的方式对集合中的内容进行排序</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02TreeSet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建TreeSet集合，使用自然排序的方式进行排序</span></span><br><span class="line">        <span class="comment">// Set&lt;Integer&gt; set = new TreeSet&lt;&gt;();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个TreeSet集合，传递比较器。使用比较器的方式进行排序&#123;使用降序排序&#125;</span></span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> TreeSet&lt;&gt;(<span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o2-o1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        set.add(<span class="number">100</span>);</span><br><span class="line">        set.add(<span class="number">200</span>);</span><br><span class="line">        set.add(<span class="number">400</span>);</span><br><span class="line">        set.add(<span class="number">300</span>);</span><br><span class="line">        System.out.println(set);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="三、Map集合"><a href="#三、Map集合" class="headerlink" title="三、Map集合"></a>三、Map集合</h2><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h3><p>Map集合是一个双列集合。双列集合中的每个元素都是由两部分组成的。一部分是<code>键(Key)</code>，另一部分是<code>值(Value)</code>，<strong>一个键对应(映射)一个值</strong>。可以根据<strong>键找值</strong>。</p>
<p>在双列集合中，键不允许重复，值允许重复。</p>
<p>Map其实是一个接口，所有的双列集合都实现了这个接口，所以我们就把Map集合称为双列集合。</p>
<p>Map接口下做常用的实现类是HashMap。</p>
<h3 id="3-2-Map的常用子类"><a href="#3-2-Map的常用子类" class="headerlink" title="3.2 Map的常用子类"></a>3.2 Map的常用子类</h3><ul>
<li><p><code>HashMap&lt;K,V&gt;</code>：存储数据采用的哈希表结构，元素的存取顺序不能保证一致。由于要保证键的唯一、不重复，需要重写键的hashCode()方法、equals()方法。</p>
</li>
<li><p><code>LinkedHashMap&lt;K,V&gt;</code>：HashMap下有个子类LinkedHashMap，存储数据采用的哈希表结构+链表结构。通过链表结构可以保证元素的存取顺序一致；通过哈希表结构可以保证的键的唯一、不重复，需要重写键的hashCode()方法、equals()方法。</p>
</li>
<li><p><code>TreeMap&lt;K,V&gt;</code>：TreeMap集合和Map相比没有特有的功能，底层的数据结构是红黑树；可以对元素的键进行排序，排序方式有两种:自然排序和比较器排序</p>
</li>
</ul>
<h3 id="3-3-Map的常用方法"><a href="#3-3-Map的常用方法" class="headerlink" title="3.3 Map的常用方法"></a>3.3 Map的常用方法</h3><p>Map&lt;K,V&gt;有两个泛型，K表示键的数据类型，V表示值得数据类型</p>
<ul>
<li><code>V put(K key, V value)</code>：向Map集合中添加键值对元素，如果键已经存在，会使用新的值覆盖原有得值</li>
<li><code>V get(Object key)</code>：根据键获取对应得值并返回</li>
<li><code>V remove(Object key)</code>：根据键删除整个键值对，并返回被删除得值</li>
<li><code>boolean containsKey(Object key)</code>：判断Map集合中是否包含指定得键</li>
</ul>
<p>演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo01Map</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Map集合</span></span><br><span class="line">        Map&lt;Integer,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="number">100</span>,<span class="string">"张三"</span>);</span><br><span class="line">        map.put(<span class="number">200</span>,<span class="string">"李四"</span>);</span><br><span class="line">        map.put(<span class="number">300</span>,<span class="string">"王五"</span>);</span><br><span class="line">        <span class="comment">// map.put(200,"拉拉");</span></span><br><span class="line">        System.out.println(map);</span><br><span class="line">        System.out.println(<span class="string">"==========================="</span>);</span><br><span class="line">        String s1 = map.get(<span class="number">100</span>);</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        String s = map.get(<span class="number">10000</span>);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        System.out.println(<span class="string">"==========================="</span>);</span><br><span class="line">        String s2 = map.remove(<span class="number">300</span>);</span><br><span class="line">        System.out.println(s2);</span><br><span class="line">        System.out.println(<span class="string">"==========================="</span>);</span><br><span class="line">        <span class="keyword">boolean</span> flag = map.containsKey(<span class="number">200</span>);</span><br><span class="line">        System.out.println(flag);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-4-Map的遍历"><a href="#3-4-Map的遍历" class="headerlink" title="3.4 Map的遍历"></a>3.4 Map的遍历</h3><p>Map集合不能直接通过迭代器或者增强for遍历。</p>
<p>想要遍历Map集合有两种方法，<code>keySet()</code>和<code>entrySet()</code>。</p>
<h4 id="3-4-1-keySet-推荐"><a href="#3-4-1-keySet-推荐" class="headerlink" title="3.4.1 keySet[推荐]"></a>3.4.1 keySet[推荐]</h4><p><strong>原理：</strong>使用map集合调用keySet方法，拿到Map集合中的每一键，存储到一个Set集合中并返回，然后再遍历Set集合，拿到Map集合的每一个Key，使用Map集合的get方法通过键找值得方式，遍历出Map集合中的每一个元素。</p>
<ul>
<li><code>Set&lt;K&gt; keySet()</code>:可以获取到所有的键，并将所有的键放入到Set集合中返回</li>
</ul>
<p><strong>使用步骤：</strong></p>
<ol>
<li>调用Map集合的keySet方法，获取所有的键，放入到Set集合中返回</li>
<li>遍历Set集合，拿到Set集合中每一个键</li>
<li>根据遍历到的键获取对应的值</li>
</ol>
<p><strong>演示：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02KeySet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="number">1</span>,<span class="number">10</span>);</span><br><span class="line">        map.put(<span class="number">2</span>,<span class="number">20</span>);</span><br><span class="line">        map.put(<span class="number">3</span>,<span class="number">30</span>);</span><br><span class="line">        map.put(<span class="number">4</span>,<span class="number">40</span>);</span><br><span class="line">        map.put(<span class="number">5</span>,<span class="number">50</span>);</span><br><span class="line">        <span class="comment">//调用Map集合的keySet方法，获取所有的键，放入到Set集合中返回</span></span><br><span class="line">        Set&lt;Integer&gt; keys = map.keySet();</span><br><span class="line">        <span class="comment">//遍历Set集合，拿到Set集合中每一个键</span></span><br><span class="line">        <span class="keyword">for</span> (Integer key : keys) &#123;</span><br><span class="line">            <span class="comment">//根据遍历到的键获取对应的值</span></span><br><span class="line">            Integer value = map.get(key);</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-4-2-entrySet"><a href="#3-4-2-entrySet" class="headerlink" title="3.4.2 entrySet"></a>3.4.2 entrySet</h4><p><strong>原理：</strong>Map集合中有很多键值对，每一个键值对其实就是一个Entry对象。entrySet()方法就是先获取到Map集合中所有的Entry对象，把所有的对象放到Set集合中，然后再遍历Set集合，拿到每一个Entry对象，最后通过Entry中获取键和值的方法<code>getKey()</code>和<code>getValue</code>，获取Map集合中存储的键值对。</p>
<blockquote>
<p>提示:Entry是Map中的内部接口，在使用时，要加上外部接口名Map.Entry</p>
</blockquote>
<p><strong>涉及方法：</strong></p>
<ul>
<li><code>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code>:获取所有的entry对象并放入Set集合中返回。</li>
<li><code>K getKey()</code>：获取Entry中的键</li>
<li><code>V getValue()</code>：获取Entry中的值</li>
</ul>
<p><strong>使用步骤：</strong></p>
<ol>
<li>调用Map集合中的entrySet()方法，获取所有的Entry对象放入到Set集合中并返回</li>
<li>遍历Set集合，拿到Set集合中的每一个Entry对象</li>
<li>通过Entry对象调用getKey()和getValue()获取键和值</li>
</ol>
<p><strong>使用演示：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03EntrySet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">32</span>);</span><br><span class="line">        map.put(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">        map.put(<span class="number">2</span>, <span class="number">20</span>);</span><br><span class="line">        map.put(<span class="number">3</span>, <span class="number">30</span>);</span><br><span class="line">        <span class="comment">//1.调用Map集合中的entrySet()方法，获取所有的Entry对象放入到Set集合中并返回</span></span><br><span class="line">        Set&lt;Map.Entry&lt;Integer, Integer&gt;&gt; entries = map.entrySet();</span><br><span class="line">        <span class="comment">//2.遍历Set集合，拿到Set集合中的每一个Entry对象</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : entries) &#123;</span><br><span class="line">            <span class="comment">//3.通过Entry对象调用getKey()和getValue()获取键和值</span></span><br><span class="line">            Integer key = entry.getKey();</span><br><span class="line">            Integer value = entry.getValue();</span><br><span class="line">            System.out.println(key + <span class="string">"="</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-5-HashMap存储自定义类型判断键的唯一性"><a href="#3-5-HashMap存储自定义类型判断键的唯一性" class="headerlink" title="3.5 HashMap存储自定义类型判断键的唯一性"></a>3.5 HashMap存储自定义类型判断键的唯一性</h3><p>练习：每位学生（姓名，年龄）都有自己的家庭住址。那么，既然有对应关系，则将学生对象和家庭住址存储到map集合中。学生作为键, 家庭住址作为值。</p>
<ul>
<li>学生姓名相同并且年龄相同视为同一名学生。</li>
</ul>
<blockquote>
<p>HashMap保证唯一性(键)的方式和HashSet是一模一样。 因为HashSet内部就是在使用HashMap保存数据。</p>
</blockquote>
<p><strong>判断唯一性的方式：</strong></p>
<ol>
<li>先比较两个对象的哈希值。<ul>
<li>如果对象的哈希值不同，肯定是不同的对象。</li>
<li>如果对象的哈希值相同，不一定是同一个对象。</li>
</ul>
</li>
<li>然后比较两个对象的equals方法<ul>
<li>如果equals方法结果是true，表示两个对象相同。</li>
<li>如果equals方法结果是false，表示两个对象不同。</li>
</ul>
</li>
</ol>
<p><strong>代码演示：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04MapTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;Student,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">32</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> Student(<span class="string">"张三"</span>,<span class="number">18</span>),<span class="string">"北京"</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> Student(<span class="string">"李四"</span>,<span class="number">20</span>),<span class="string">"上海"</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> Student(<span class="string">"王五"</span>,<span class="number">22</span>),<span class="string">"广州"</span>);</span><br><span class="line"></span><br><span class="line">        map.put(<span class="keyword">new</span> Student(<span class="string">"张三"</span>,<span class="number">18</span>),<span class="string">"南京"</span>);<span class="comment">//南京覆盖掉北京，因为Student属性相同，视为一个对象，即Key相同</span></span><br><span class="line"></span><br><span class="line">        Set&lt;Student&gt; keys = map.keySet();</span><br><span class="line">        <span class="keyword">for</span> (Student key : keys) &#123;</span><br><span class="line">            String value = map.get(key);</span><br><span class="line">            System.out.println(key+<span class="string">"::"</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        Student student = (Student) o;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (age != student.age) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> name != <span class="keyword">null</span> ? name.equals(student.name) : student.name == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = name != <span class="keyword">null</span> ? name.hashCode() : <span class="number">0</span>;</span><br><span class="line">        result = <span class="number">31</span> * result + age;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    get...set...构造方法...略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结：如果要使用HashMap保存数据并保证数据的唯一性(属性相同就看成是同一个对象)，需要重写hashCode和equals方法。</p>
</blockquote>
<h3 id="3-6-LinkedHashMap"><a href="#3-6-LinkedHashMap" class="headerlink" title="3.6 LinkedHashMap"></a>3.6 LinkedHashMap</h3><p>LinkedHashMap也是一个双列集合。</p>
<ul>
<li>里面采用的是哈希表+链表的结构。</li>
<li>链表的作用是保证有序，LinkedHashMap是有序的。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05LinkedHashMap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        map.put(<span class="number">1</span>,<span class="number">100</span>);</span><br><span class="line">        map.put(<span class="number">2</span>,<span class="number">200</span>);</span><br><span class="line">        map.put(<span class="number">3</span>,<span class="number">300</span>);</span><br><span class="line">        System.out.println(map);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-7-TreeMap"><a href="#3-7-TreeMap" class="headerlink" title="3.7 TreeMap"></a>3.7 TreeMap</h3><p>TreeMap也是一个双列集合</p>
<ul>
<li>内部是一个二叉树，可以自动对键进行排序</li>
</ul>
<p>构造方法：</p>
<ul>
<li>TreeMap():会使用自然排序的方式进行自然排序</li>
<li>TreeMap(Comparator comparator)：参数需要传递一个比较器，可以对集合中的内容根据比较器进行排序</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06TreeMap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;Integer,String&gt; map = <span class="keyword">new</span> TreeMap&lt;&gt;(<span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//降序</span></span><br><span class="line">                <span class="keyword">return</span> o2-o1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        map.put(<span class="number">427</span>,<span class="string">"张三"</span>);</span><br><span class="line">        map.put(<span class="number">281</span>,<span class="string">"李四"</span>);</span><br><span class="line">        map.put(<span class="number">354</span>,<span class="string">"王五"</span>);</span><br><span class="line">        map.put(<span class="number">110</span>,<span class="string">"拉拉"</span>);</span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-8-练习"><a href="#3-8-练习" class="headerlink" title="3.8 练习"></a>3.8 练习</h3><p>要求：键盘录入一个字符串，统计该字符串中每个字符出现的次数。</p>
<ul>
<li>例如：aaabbbccc  a:3  b:3  c:3</li>
</ul>
<p><strong>思路：</strong></p>
<ol>
<li><p>键盘录入一个字符串</p>
</li>
<li><p>定义map集合当作计数器，键是要统计的字符，值是该字符出现的次数</p>
</li>
<li><p>遍历字符串，拿到字符串的中每一个字符</p>
</li>
<li><p>判断遍历到的字符在map集合中是否存在</p>
<ul>
<li>如果不存在，表示该字符没有统计过，那么就将该字符放入到Map集合中，次数设置为1</li>
<li>如果存在，就表示该字符统计过，就获取该字符出现的次数，然后把次数+1，重新放入到map集合。</li>
</ul>
</li>
<li><p>输出map</p>
</li>
</ol>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo07Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入一个字符串："</span>);</span><br><span class="line">        <span class="comment">//1.键盘录入一个字符串</span></span><br><span class="line">        String str = sc.nextLine();</span><br><span class="line">        <span class="comment">//2.定义map集合当作计数器，键是要统计的字符，值是该字符出现的次数</span></span><br><span class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">32</span>);</span><br><span class="line">        <span class="comment">//   3.遍历字符串，拿到字符串的中每一个字符</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> ch = str.charAt(i);</span><br><span class="line">            <span class="comment">//4.判断遍历到的字符在map集合中是否存在</span></span><br><span class="line">            <span class="comment">/*if (map.containsKey(ch)) &#123;</span></span><br><span class="line"><span class="comment">                //4.1如果存在，就表示该字符统计过，就获取该字符出现的次数，然后把次数+1，重新放入到map集合。</span></span><br><span class="line"><span class="comment">                map.put(ch, map.get(ch) + 1);</span></span><br><span class="line"><span class="comment">            &#125; else &#123;</span></span><br><span class="line"><span class="comment">                //4.2如果不存在，表示该字符没有统计过，那么就将该字符放入到Map集合中，次数设置为1</span></span><br><span class="line"><span class="comment">                map.put(ch, 1);</span></span><br><span class="line"><span class="comment">            &#125;*/</span></span><br><span class="line">            <span class="comment">//扩展写法</span></span><br><span class="line">            map.put(ch, map.containsKey(ch) ? map.get(ch) + <span class="number">1</span> : <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出map</span></span><br><span class="line">        Set&lt;Character&gt; keys = map.keySet();</span><br><span class="line">        <span class="keyword">for</span> (Character key : keys) &#123;</span><br><span class="line">            System.out.println(key + <span class="string">"-"</span> + map.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="四、集合的嵌套"><a href="#四、集合的嵌套" class="headerlink" title="四、集合的嵌套"></a>四、集合的嵌套</h2><p>集合嵌套演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; listOne = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        listOne.add(<span class="string">"张三"</span>);</span><br><span class="line">        listOne.add(<span class="string">"李四"</span>);</span><br><span class="line">        listOne.add(<span class="string">"王五"</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; listTwo = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        listTwo.add(<span class="string">"哈哈"</span>);</span><br><span class="line">        listTwo.add(<span class="string">"呵呵"</span>);</span><br><span class="line">        listTwo.add(<span class="string">"嘿嘿"</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;String&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(listOne);</span><br><span class="line">        list.add(listTwo);</span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span> (List&lt;String&gt; stuList : list)&#123;</span><br><span class="line">            <span class="keyword">for</span> (String str : stuList) &#123;</span><br><span class="line">                System.out.println(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="五、斗地主案例——排序"><a href="#五、斗地主案例——排序" class="headerlink" title="五、斗地主案例——排序"></a>五、斗地主案例——排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 斗地主案例——排序版</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Sunmoon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DouDiZhu</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 准备牌，假用索引表示牌的大小，索引值越大，牌的权值越大——用于排序</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//扑克索引</span></span><br><span class="line">        ArrayList&lt;Integer&gt; poker = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//扑克字典，</span></span><br><span class="line">        Map&lt;Integer,String&gt; pokerMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//花色</span></span><br><span class="line">        String[] colors = &#123;<span class="string">"♠"</span>,<span class="string">"♥"</span>,<span class="string">"♣"</span>,<span class="string">"♦"</span>&#125;;</span><br><span class="line">        <span class="comment">//数字</span></span><br><span class="line">        String[] nums = &#123;<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">"6"</span>,<span class="string">"7"</span>,<span class="string">"8"</span>,<span class="string">"9"</span>,<span class="string">"10"</span>,<span class="string">"J"</span>,<span class="string">"Q"</span>,<span class="string">"K"</span>,<span class="string">"A"</span>,<span class="string">"2"</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义开始索引为0</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//组合牌，遍历花色和数字数组，poker集合存储牌的索引0-53，pokerMap存储索引对应的牌面</span></span><br><span class="line">        <span class="keyword">for</span> (String num : nums) &#123;</span><br><span class="line">            <span class="keyword">for</span>(String color : colors)&#123;</span><br><span class="line">                poker.add(index);</span><br><span class="line">                pokerMap.put(index,color+num);</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//添加小王</span></span><br><span class="line">        poker.add(index);</span><br><span class="line">        pokerMap.put(index,<span class="string">"小🎴"</span>);</span><br><span class="line">        <span class="comment">//索引加一，添加大王</span></span><br><span class="line">        poker.add(++index);</span><br><span class="line">        pokerMap.put(index,<span class="string">"大🎴"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//洗牌，打乱存储牌所以的集合poker即可</span></span><br><span class="line">        Collections.shuffle(poker);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发牌，准备三个集合代表三个玩家，在准备一个集合存储底牌</span></span><br><span class="line">        ArrayList&lt;Integer&gt; playerOne = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; playerTwo = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; playerThree = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; bottomCard = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//开始发牌，遍历存储扑克索引的集合poker——操作索引，使用fori循环</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; poker.size(); i++) &#123;</span><br><span class="line">            <span class="comment">//先判断是否是最后三张，是则添加到底牌集合中，并结束当前循序，进行下一次循环</span></span><br><span class="line">            <span class="keyword">if</span> (i&gt;=<span class="number">51</span>)&#123;</span><br><span class="line">                bottomCard.add(poker.get(i));</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>)&#123;<span class="comment">//给第一个人发牌</span></span><br><span class="line">                playerOne.add(poker.get(i));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">3</span> ==<span class="number">1</span>)&#123;<span class="comment">//给第二个人发牌</span></span><br><span class="line">                playerTwo.add(poker.get(i));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// i % 3 == 2 给第三个人发牌</span></span><br><span class="line">                playerThree.add(poker.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">		<span class="comment">//调用方法看牌</span></span><br><span class="line">        lookCard(<span class="string">"张三"</span>,playerOne,pokerMap);</span><br><span class="line">        lookCard(<span class="string">"李四"</span>,playerTwo,pokerMap);</span><br><span class="line">        lookCard(<span class="string">"王五"</span>,playerThree,pokerMap);</span><br><span class="line">        lookCard(<span class="string">"底牌"</span>,bottomCard,pokerMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看牌面方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 玩家姓名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list 玩家的牌面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pokerMap 存储牌面的字典</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">lookCard</span><span class="params">(String name, ArrayList&lt;Integer&gt; list, Map&lt;Integer, String&gt; pokerMap)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//排序</span></span><br><span class="line">        Collections.sort(list);</span><br><span class="line">        <span class="comment">//输出玩家姓名</span></span><br><span class="line">        System.out.print(name + <span class="string">" : "</span>);</span><br><span class="line">        <span class="comment">//遍历list集合，根据Map字典查找牌面并输出</span></span><br><span class="line">        <span class="keyword">for</span> (Integer key : list)&#123;</span><br><span class="line">            System.out.print(pokerMap.get(key) + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//换行</span></span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小扩展：</p>
<p>在类上添加注解：@SuppressWarnings(“all”)：该注解的作用是抑制警告</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>学习</tag>
        <tag>集合</tag>
      </tags>
  </entry>
  <entry>
    <title>排序算法、异常、多线程</title>
    <url>/2020/07/31/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E3%80%81%E5%BC%82%E5%B8%B8%E3%80%81%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="一、冒泡排序"><a href="#一、冒泡排序" class="headerlink" title="一、冒泡排序"></a>一、冒泡排序</h2><p><strong>冒泡排序图解</strong></p>
<p><img data-src="/image/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F.png" alt="冒泡排序"></p>
<a id="more"></a>

<p><strong>代码实现：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Sort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义数组</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">7</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//最终版本</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span> - j; i++) &#123;</span><br><span class="line">                <span class="comment">//arr[i]表示前面的元素，arr[i + 1]表示后面的元素。</span></span><br><span class="line">                <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="comment">//交换</span></span><br><span class="line">                    <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">                    arr[i] = arr[i + <span class="number">1</span>];</span><br><span class="line">                    arr[i + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        //第一轮排序</span></span><br><span class="line"><span class="comment">        //使用循环完成第一轮排序</span></span><br><span class="line"><span class="comment">        for (int i = 0; i &lt; 4 - 1 - 0; i++) &#123;//i = 0 1 2</span></span><br><span class="line"><span class="comment">            //arr[i]表示前面的元素，arr[i + 1]表示后面的元素。</span></span><br><span class="line"><span class="comment">            if (arr[i] &gt; arr[i + 1]) &#123;</span></span><br><span class="line"><span class="comment">                //交换</span></span><br><span class="line"><span class="comment">                int temp = arr[i];</span></span><br><span class="line"><span class="comment">                arr[i] = arr[i + 1];</span></span><br><span class="line"><span class="comment">                arr[i + 1] = temp;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        //第二轮排序</span></span><br><span class="line"><span class="comment">        for (int i = 0; i &lt; 4 - 1 - 1; i++) &#123;</span></span><br><span class="line"><span class="comment">            //arr[i]表示前面的元素，arr[i + 1]表示后面的元素。</span></span><br><span class="line"><span class="comment">            if (arr[i] &gt; arr[i + 1]) &#123;</span></span><br><span class="line"><span class="comment">                //交换</span></span><br><span class="line"><span class="comment">                int temp = arr[i];</span></span><br><span class="line"><span class="comment">                arr[i] = arr[i + 1];</span></span><br><span class="line"><span class="comment">                arr[i + 1] = temp;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        //第三轮排序</span></span><br><span class="line"><span class="comment">        for (int i = 0; i &lt; 4 - 1 - 2; i++) &#123;</span></span><br><span class="line"><span class="comment">            //arr[i]表示前面的元素，arr[i + 1]表示后面的元素。</span></span><br><span class="line"><span class="comment">            if (arr[i] &gt; arr[i + 1]) &#123;</span></span><br><span class="line"><span class="comment">                //交换</span></span><br><span class="line"><span class="comment">                int temp = arr[i];</span></span><br><span class="line"><span class="comment">                arr[i] = arr[i + 1];</span></span><br><span class="line"><span class="comment">                arr[i + 1] = temp;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//输出数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : arr) &#123;</span><br><span class="line">            System.out.print(num + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="二、选择排序"><a href="#二、选择排序" class="headerlink" title="二、选择排序"></a>二、选择排序</h2><p><strong>选择排序图解</strong></p>
<p><img data-src="/image/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F.png" alt="选择排序"></p>
<p><strong>代码实现</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 选择排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 第一个和后面的挨个比较</span></span><br><span class="line"><span class="comment"> * 第二个和后面的挨个比较</span></span><br><span class="line"><span class="comment"> * ...</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Sort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">23</span>, <span class="number">43</span>&#125;;</span><br><span class="line">        <span class="comment">//选择排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="comment">//arr[i]前面的元素，arr[j]是后面的元素</span></span><br><span class="line">                <span class="comment">//如果前面的元素比后面元素大，就交换</span></span><br><span class="line">                <span class="keyword">if</span> (arr[i] &gt; arr[j]) &#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">                    arr[i] = arr[j];</span><br><span class="line">                    arr[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Arrays.sort();//JDK8以及之后，用的是归并排序算法，  8之后快速排序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="三、二分查找"><a href="#三、二分查找" class="headerlink" title="三、二分查找"></a>三、二分查找</h2><p><strong>二分查找图解</strong></p>
<p><img data-src="/image/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.png" alt="二分查找"></p>
<p><strong>代码实现</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二分查找</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Sunmoon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Search</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">12</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">27</span>, <span class="number">32</span>, <span class="number">45</span>, <span class="number">66</span>, <span class="number">88</span>, <span class="number">99</span>, <span class="number">101</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> i = binarySearch(arr, <span class="number">102</span>);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义方法：该方法用来进行二分查找，查找某个元素在数组中的索引。</span></span><br><span class="line"><span class="comment">     * 		参数：int[] arr【要在哪个数组中查找】</span></span><br><span class="line"><span class="comment">     * 			 int value 【要查找哪个元素】</span></span><br><span class="line"><span class="comment">     * 如果要查找的元素不存在，那么就返回一个-1；</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义两个变量，表示光标，分别指向数组的两边</span></span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//循环进行二分查找</span></span><br><span class="line">        <span class="comment">//只要left和right没有交错，那么就进行二分查找</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="comment">//获取中间位置索引</span></span><br><span class="line">            <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">//判断要查找的元素和中间位置的元素</span></span><br><span class="line">            <span class="comment">//如果要查找的元素比中间元素大，那么就应该去mid右边查找，就将left设置到mid右边</span></span><br><span class="line">            <span class="keyword">if</span> (target&gt;nums[mid])&#123;</span><br><span class="line">                left = mid +<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(target&lt;nums[mid])&#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//否则就表示两个元素相等，就表示找到了该元素，找到该元素就直接返回该元素的索引</span></span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果循环结束了，表述left比right大了，表示没有找到该元素，返回-1</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>要进行二分查找的数组，必须是已经排好序的数组。</p>
</blockquote>
<h2 id="四、异常"><a href="#四、异常" class="headerlink" title="四、异常"></a>四、异常</h2><h3 id="4-1-异常概念"><a href="#4-1-异常概念" class="headerlink" title="4.1 异常概念"></a>4.1 异常概念</h3><p>异常指的是不正常，指的是程序出现了某些问题。</p>
<p>在Java中所有的问题都可以使用一个类来表示，这个类叫做<code>Throwable</code>。</p>
<blockquote>
<p>Throwable是所有异常和错误的父类。</p>
</blockquote>
<h3 id="4-2-异常继承体系及分类"><a href="#4-2-异常继承体系及分类" class="headerlink" title="4.2 异常继承体系及分类"></a>4.2 异常继承体系及分类</h3><p><code>Throwable</code>：是所有异常和错误的父类。</p>
<ul>
<li><code>Error</code>：错误</li>
<li><code>Exception</code>：异常<ul>
<li><code>RuntimeException</code>：运行期异常</li>
</ul>
</li>
</ul>
<p>###<img data-src="/image/%E5%BC%82%E5%B8%B8%E7%BB%A7%E6%89%BF%E4%BD%93%E7%B3%BB.png" alt="异常继承体系"></p>
<p><strong>分类</strong></p>
<p>运行期异常：RuntimeException以及RuntimeException下的所有子类都是运行时异常</p>
<p>编译时异常：Exception以及除了RuntimeException之外的其他子类都是编译时异常</p>
<h3 id="4-4-异常产生过程解析"><a href="#4-4-异常产生过程解析" class="headerlink" title="4.4 异常产生过程解析"></a>4.4 异常产生过程解析</h3><p><img data-src="/image/%E5%BC%82%E5%B8%B8%E4%BA%A7%E7%94%9F%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90.png" alt="异常产生过程分析"></p>
<blockquote>
<p>异常一旦向外抛，后面代码就不再执行了。</p>
</blockquote>
<h2 id="五、异常的处理"><a href="#五、异常的处理" class="headerlink" title="五、异常的处理"></a>五、异常的处理</h2><h3 id="5-1-抛出异常——throw"><a href="#5-1-抛出异常——throw" class="headerlink" title="5.1 抛出异常——throw"></a>5.1 抛出异常——throw</h3><p>throw：用来手动向外抛出异常。</p>
<p>使用格式：<code>throw new 异常类名();</code></p>
<p>使用场景：</p>
<ul>
<li>如果我们想要手动制造一个问题，就可以用throw关键字，比如年龄录入是错误的，我们希望程序直接报错，就可以使用throw关键字手动向外抛出异常。</li>
</ul>
<p>演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03Throw</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];</span><br><span class="line">        System.out.println(getValue(arr, <span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//对索引进行一个判断，如果索引不合法，就手动向外抛出索引越界异常！</span></span><br><span class="line">        <span class="keyword">if</span> (target &lt; <span class="number">0</span> || target &gt;= arr.length) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">"索引越界！"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> arr[target];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在创建异常对象时，我们也可以在小括号中传递一个字符串类型的异常信息。</p>
</blockquote>
<h3 id="5-2-Objects的非空判断"><a href="#5-2-Objects的非空判断" class="headerlink" title="5.2 Objects的非空判断"></a>5.2 Objects的非空判断</h3><p>在工具类Objects中，有一个方法，可以进行对象的非空判断</p>
<ul>
<li><code>static &lt;T&gt; T requireNonNull(T obj)</code>:判断obj是否时null。如果obj是null，会引发空指针异常。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04Objects</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Object obj = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用Objects中的requireNonNull方法</span></span><br><span class="line">        Objects.requireNonNull(obj);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断obj是否是null，如果是null，就手动抛出异常</span></span><br><span class="line">        <span class="comment">/*if (obj == null)&#123;</span></span><br><span class="line"><span class="comment">            throw new NullPointerException();</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过null调用任何非静态的属性和方法都会引发空指针异常。</span></span><br><span class="line">        obj.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-3-throws关键字"><a href="#5-3-throws关键字" class="headerlink" title="5.3 throws关键字"></a>5.3 throws关键字</h3><p>对比一下前面的throw</p>
<ul>
<li>throw:用来手动向外抛出异常</li>
<li><strong>throws:用来进行异常声明，声明某个方法有可能出现异常，出现问题。</strong></li>
</ul>
<p>throws的格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数列表) <span class="keyword">throws</span> 异常类名&#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05Throws</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        method();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在方法中有可能出现多个异常,可以直接抛出它们的父类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method4</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (num % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SQLException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在方法中有可能出现多个异常，需要进行多异常的声明</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> <span class="keyword">throws</span> IOException,SQLException</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (num % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SQLException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在方法中抛出运行时异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在方法中抛出编译时异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//抛出异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>throws的注意事项</strong></p>
<ol>
<li>如果在方法中抛出了编译时异常，那么就必须要使用throws进行异常声明。</li>
<li>如果调用了使用throws声明异常的方法，那么调用者使用try…catch解决，要么也要加throws声明</li>
<li>如果在方法中抛出了运行时一茶馆，那么可以加throws声明，也可以不加。</li>
<li>如果方法中有可能抛出多个异常，那么需要进行多异常的声明</li>
<li>如果方法中有可能抛出多个异常，那么也可以直接声明他们的父类异常</li>
</ol>
<h3 id="5-4-try…catch"><a href="#5-4-try…catch" class="headerlink" title="5.4 try…catch"></a>5.4 try…catch</h3><p>作用：用来真正解决异常</p>
<p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    可能出现异常的代码</span><br><span class="line">&#125; <span class="keyword">catch</span>(类名 变量名)&#123;</span><br><span class="line">    出现异常后执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果catch小括号中的类名和try中引发的异常一样，那么就表示捕获到了异常。如果捕获到了异常，就表示把异常解决了。</p>
</blockquote>
<p>执行流程：</p>
<ul>
<li><p>第一种情况：如果try中代码没有异常，那么catch不会执行。</p>
<ul>
<li>第二种情况：如果try中的代码有异常，并且catch捕获到了这个异常，那么代码会从try直接执行到catch。</li>
</ul>
<ul>
<li>第三种情况：如果try中的代码有异常，但是catch没有捕获到这个异常，那么异常会依旧向外抛。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06TryCatch</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"1. try...start"</span>);</span><br><span class="line">            Object obj = <span class="comment">/*new Object()*/</span> <span class="keyword">null</span>;</span><br><span class="line">            obj.toString();</span><br><span class="line">            System.out.println(<span class="string">"2. try...end"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="comment">/*ArrayIndexOutOfBoundsException*/</span> NullPointerException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"3. 出现异常了"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"4. main...end"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结:</p>
<p>异常处理有两种方式</p>
<ul>
<li>向外抛(甩锅)：throw throws</li>
<li>解决异常：try…catch</li>
</ul>
</blockquote>
<h3 id="5-5-finally代码块"><a href="#5-5-finally代码块" class="headerlink" title="5.5 finally代码块"></a>5.5 finally代码块</h3><p>finally : try…catch后面可以追加finally代码块</p>
<p>格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    【A】可能出现异常的代码</span><br><span class="line">&#125; <span class="keyword">catch</span>(类名 变量名)&#123;</span><br><span class="line">    【B】出现异常后执行的代码</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    【C】一定会执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>特点 : finally代码块的内容无论如果一定会执行。</strong></p>
<p>执行流程：</p>
<ul>
<li>第一种情况：如果try中代码没有异常，执行流程为【A】、【C】</li>
<li>第二种情况：如果try中代码有异常，并且catch捕获到了这个异常，执行流程为【A】、【B】、【C】</li>
<li>第三种情况：如果try中代码有异常，但是catch没有捕获到这个异常，执行流程为【A】、【C】、抛出异常</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo07Finally</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"1. try...start"</span>);</span><br><span class="line">            Object obj = <span class="comment">/*new Object()*/</span> <span class="keyword">null</span>;</span><br><span class="line">            obj.toString();</span><br><span class="line">            System.out.println(<span class="string">"2. try...end"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(<span class="comment">/*ArrayIndexOutOfBoundsException*/</span>NullPointerException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"3. catch..."</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"4. finally..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"5. main....end"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用场景:必须要执行的代码会放到finally中。[例如:释放资源，释放链接]</p>
</blockquote>
<h2 id="六、自定义异常"><a href="#六、自定义异常" class="headerlink" title="六、自定义异常"></a>六、自定义异常</h2><p>如何自定义异常？</p>
<ul>
<li><p>就是认贼作父，定义一个类，继承一个异常类集合</p>
</li>
<li><p>如果一个类继承的是编译时异常，那么该类也就是编译时异常。</p>
</li>
<li><p>如果一个类继承的是运行时异常，那么该类也就是运行时异常。</p>
</li>
</ul>
<p><strong>测试类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(createStudent());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AgeException e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="comment">//e.printStackTrace();</span></span><br><span class="line">            System.out.println(<span class="string">"服务器忙..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"main...end"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个方法，该方法用来获取一个学生对象，学生姓名和年龄来源于键盘录入</span></span><br><span class="line"><span class="comment">     * 并且必须保证年龄的正确性，如果年龄是非法数字，那么我们就抛出异常</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Student <span class="title">createStudent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入学生姓名："</span>);</span><br><span class="line">        String name = sc.nextLine();</span><br><span class="line">        System.out.println(<span class="string">"请输入学生年龄："</span>);</span><br><span class="line">        <span class="keyword">int</span> age = Integer.parseInt(sc.nextLine());</span><br><span class="line">        <span class="keyword">if</span> (age &lt; <span class="number">0</span> || age &gt;= <span class="number">200</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//throw new RuntimeException("年龄不合法，请您注意");</span></span><br><span class="line">            <span class="comment">//抛出年龄异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AgeException(<span class="string">"年龄不合法，请您注意"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Student(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>异常类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgeException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供一个参数为字符串的构造方法，用来给异常提供信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AgeException</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        <span class="comment">//使用super调用父类的构造方法，将异常信息传递给父类</span></span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AgeException</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以在自定义异常中提供一个构造方法，用来传递异常信息【在该构造方法中要将异常信息交给父类的构造方法】</p>
</blockquote>
<h2 id="七、多线程"><a href="#七、多线程" class="headerlink" title="七、多线程"></a>七、多线程</h2><h3 id="7-1-进程和线程"><a href="#7-1-进程和线程" class="headerlink" title="7.1 进程和线程"></a>7.1 进程和线程</h3><p><strong>进程</strong>：正在运行的程序就是进程</p>
<p><strong>线程</strong>：是程序中的执行单元，每个线程都可以执行一个任务</p>
<p>在一个程序中，如果只有一个线程，那么这个程序就是一个单线程程序。</p>
<p>如果一个程序有多个线程，那么就是一个多线程程序。</p>
<p><img data-src="/image/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B.png" alt="进程与线程"></p>
<h3 id="7-2-并发和并行"><a href="#7-2-并发和并行" class="headerlink" title="7.2 并发和并行"></a>7.2 并发和并行</h3><p><strong>并发</strong>：同一时间，多个线程一起执行，但是这个同时并不是真正意义上的同时，CPU在多个线程之前快速切换，因为切换的速度非常快，所以可以看成同时。</p>
<p><strong>并行</strong>：同一个时间，多个线程一起执行，这个同时是真正意义的同时，同一个时间点，多个线程一起执行。</p>
<blockquote>
<p>并行必须要有CPU的支持</p>
</blockquote>
<p><img data-src="/image/%E5%B9%B6%E5%8F%91%E4%B8%8E%E5%B9%B6%E8%A1%8C.png" alt="并发与并行"></p>
<h3 id="7-3-main线程"><a href="#7-3-main线程" class="headerlink" title="7.3 main线程"></a>7.3 main线程</h3><p>每个程序至少要有一个线程，Java程序也一样。</p>
<ul>
<li>当我们运行程序时，JVM会创建一个main线程，执行main方法。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01MainThread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"HelloWorld！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"HelloJava！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在程序中只有一个执行线程main线程，所以目前的程序是一个单线程程序。</p>
<p>单线程程序同时只能做一件事情，如果有多个任务，只能执行一个，在执行一个。</p>
<p>如果想要同时做多个事情，那么需要使用多线程程序。</p>
<h3 id="7-4-多线程的第一种实现方式"><a href="#7-4-多线程的第一种实现方式" class="headerlink" title="7.4 多线程的第一种实现方式"></a>7.4 多线程的第一种实现方式</h3><p>Java中Thread表示线程，我们可以使用Thread类完成多线程程序。</p>
<p>多线程的第一种实现方式：</p>
<ol>
<li>定义一个类，继承Thread类</li>
<li>在子类中重写run方法，并在run方法中定义线程要完成的任务</li>
<li>创建Thread子类对象，调用start()方法，启动线程</li>
</ol>
<p><strong>线程类：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Thread表示线程类，当MyThread继承Thread类时，MyThread也就变成了线程类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写Thread中的润方法，在里面定义线程要执行的任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Hello,World"</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Thread</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"main...start"</span>);</span><br><span class="line">        <span class="comment">//创建Thread子类对象</span></span><br><span class="line">        <span class="comment">//创建一个新线程，只不过该线程还没有执行</span></span><br><span class="line">        MyThread m = <span class="keyword">new</span> MyThread();</span><br><span class="line">        <span class="comment">//执行线程，该线程会调用自己的run方法</span></span><br><span class="line">        m.start();</span><br><span class="line">        <span class="comment">//输出HelloJava</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Hello,Java"</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Thread中的start方法：<code>void start()</code>：让线程执行，线程会执行自己的run方法</p>
</blockquote>
<p><strong>多线程内存图</strong></p>
<p><img data-src="/image/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%86%85%E5%AD%98%E5%9B%BE.png" alt="多线程内存图"></p>
<h3 id="7-5-Thread中的方法"><a href="#7-5-Thread中的方法" class="headerlink" title="7.5 Thread中的方法"></a>7.5 Thread中的方法</h3><p>Thread中的构造方法：</p>
<ul>
<li>Thread() ：空参数的构造方法。</li>
<li>Thread(String name)：参数可以传递字符串类型的线程名</li>
</ul>
<p>Thread中的其他方法：</p>
<ul>
<li><code>String getName()</code>：获取线程名字</li>
<li><code>void setName(String name)</code>:设置线程名字</li>
<li><code>[*]static Thread currentThread()</code>：获取正在执行的线程对象</li>
<li><code>[*]static void sleep(long millis)</code>：线程休眠,参数是要休眠的毫秒值</li>
</ul>
<blockquote>
<p>标*的重点记忆</p>
</blockquote>
<p>代码示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread m = <span class="keyword">new</span> MyThread(<span class="string">"哈哈"</span>);</span><br><span class="line">        <span class="comment">//调用方法，给线程设置名字</span></span><br><span class="line">        <span class="comment">//m.setName("呵呵");</span></span><br><span class="line">        m.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取main线程的名字并输出</span></span><br><span class="line">        <span class="comment">//获取当前正在执行的线程对象[该方法是通过哪个线程调用执行的，那么就获取到的就是哪个线程]</span></span><br><span class="line">        <span class="comment">//因为下面代码是由main方法执行的，所以获取到的就是main线程对象</span></span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        System.out.println(t.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// new MyThread().start();</span></span><br><span class="line">        <span class="comment">// new MyThread().start();</span></span><br><span class="line">        <span class="comment">// new MyThread().start();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程休眠的方法</span></span><br><span class="line"><span class="comment"> *      [*]static void sleep(long millis)：线程休眠,参数是要休眠的毫秒值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Sleep</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"开始"</span>);</span><br><span class="line">        <span class="comment">//让线程休眠5秒钟</span></span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"结束"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="7-6-多线程的第二种实现方式"><a href="#7-6-多线程的第二种实现方式" class="headerlink" title="7.6 多线程的第二种实现方式"></a>7.6 多线程的第二种实现方式</h3><p>多线程的第二种实现方式</p>
<ol>
<li>定义类实现Runnable接口</li>
<li>重写run方法，在run方法中定义线程要执行的任务</li>
<li>创建Runnable接口的实现类对象</li>
<li>创建Thread线程对象，将Runnable接口的实现类对象作为参数传递</li>
<li>通过线程调用start方法，启动</li>
</ol>
<p>代码演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在java中，Thread才表示线程类</span></span><br><span class="line"><span class="comment"> * Task和Thread没有关系，所以Task并不是线程类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Runnable接口只有一个run方法，run方法中只需要关注线程要执行的任务，Runnable接口只需要关注任务即可。</span></span><br><span class="line"><span class="comment"> * 我们也可以把Runnable接口看成线程任务接口</span></span><br><span class="line"><span class="comment"> * Teak实现了Runnable接口，只需要重写run方法，只需要在里面关注线程任务，所以我们可以把Teak看成线程任务类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"HelloWorld"</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Runnable接口的实现类对象</span></span><br><span class="line">        <span class="comment">//Teak表示线程任务，现在表示创建了一个线程任务对象【表示线程要执行的任务】</span></span><br><span class="line">        Task task = <span class="keyword">new</span> Task();</span><br><span class="line">        <span class="comment">//创建Thread线程对象，，将Runnable接口的实现类对象作为参数传递</span></span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(task);<span class="comment">//将创建的线程和线程任务Task绑定，如果以后该线程启动，执行的就是Task中的run方法</span></span><br><span class="line">        t.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"HelloJava"</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结</p>
<p>多线程的两种实现方式：</p>
<ul>
<li>继承Thread类</li>
<li>实现Runnable接口，重写run方法。</li>
</ul>
<p><strong>推荐使用第二种实现方式(实现Runnable接口)</strong></p>
<p><strong>第二种方式的好处</strong></p>
<ul>
<li>可以解决类与类之间单继承的局限性</li>
<li>可以降低耦合性(关联性)</li>
<li>Runnable接口中只有一个run方法，没有start，setName,sleep,只需要在里面关注线程任务<ul>
<li>功能更加纯粹，符合设计模式中的单一职责原则。</li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="7-7-匿名内部类实现多线程"><a href="#7-7-匿名内部类实现多线程" class="headerlink" title="7.7 匿名内部类实现多线程"></a>7.7 匿名内部类实现多线程</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 匿名内部类实现多线程</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 匿名内部类格式：</span></span><br><span class="line"><span class="comment"> *  new 父类或父接口()&#123;</span></span><br><span class="line"><span class="comment"> *      重写的方法</span></span><br><span class="line"><span class="comment"> *  &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  作用：创建某个类(接口)的子类(实现类)对象</span></span><br><span class="line"><span class="comment"> *  举例：new Person()&#123;</span></span><br><span class="line"><span class="comment"> *      重写的方法</span></span><br><span class="line"><span class="comment"> *  &#125;</span></span><br><span class="line"><span class="comment"> *  创建了一个Person的子类对象，但是这个子类对象没有名字</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Runnable接口的实现类对象</span></span><br><span class="line">        Runnable r= <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"线程执行了"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//创建线程，传递Runnable接口的实现类，启动线程</span></span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(r);</span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//最终写法[能看懂并写出来]</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"线程执行了"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; System.out.println(Thread.currentThread().getName()+<span class="string">"线程执行了"</span>)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>学习</tag>
        <tag>简单排序算法</tag>
        <tag>异常</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>线程安全、volatile关键字、原子性、并发包</title>
    <url>/2020/08/02/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E3%80%81volatile%E5%85%B3%E9%94%AE%E5%AD%97%E3%80%81%E5%8E%9F%E5%AD%90%E6%80%A7%E3%80%81%E5%B9%B6%E5%8F%91%E5%8C%85/</url>
    <content><![CDATA[<h2 id="一、高并发及线程安全"><a href="#一、高并发及线程安全" class="headerlink" title="一、高并发及线程安全"></a>一、高并发及线程安全</h2><h3 id="1-1-高并发及线程安全"><a href="#1-1-高并发及线程安全" class="headerlink" title="1.1  高并发及线程安全"></a>1.1  高并发及线程安全</h3><p><strong>高并发：</strong>是指在某个时间点上，有大量的用户(线程)同时访问同一资源。</p>
<p><strong>线程安全：</strong>在某个时间点上，当大量用户(线程)访问同一资源时，由于多线程运行机制的原因，可能会导致被访问的资源出现”数据污染”的问题。</p>
<a id="more"></a>

<h3 id="1-2-多线程的运行机制"><a href="#1-2-多线程的运行机制" class="headerlink" title="1.2 多线程的运行机制"></a>1.2 多线程的运行机制</h3><p>当一个线程启动后，JVM会为其分配一个独立的”线程栈区”，这个线程会在这个独立的栈区中运行。</p>
<p>栈内存是线程私有的，每一个线程都有一个自己的栈空间，用来运行自己的方法。</p>
<p>方法是通过哪个线程调用的，那么该方法就在哪个线程的栈空间中运行。</p>
<p><img data-src="/image/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%86%85%E5%AD%98%E5%9B%BE2.png" alt="多线程内存图2"></p>
<h3 id="1-3-多线程的安全性问题-可见性"><a href="#1-3-多线程的安全性问题-可见性" class="headerlink" title="1.3 多线程的安全性问题 - 可见性"></a>1.3 多线程的安全性问题 - 可见性</h3><h4 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h4><p>Java内存模型：是线程对于共享数据的一个访问规则</p>
<p>主内存：线程共享的数据会保存到主内存中。</p>
<p>线程的工作内存，保存的是数据的副本，当线程要操作的共享数据时，会先把主内存中的数据读取到自己的工作内存中，然后再操作。</p>
<p>线程无法直接访问主内存中的数据，如果线程要操作主内存中的数据，会先把主内存中的数据复制一份放到自己的工作内存中。然后在自己的工作内存中进行操作，操作完之后再把工作内存中的数据放回主内存。</p>
<p>各个线程的工作内存，是相互不可见。</p>
<p><img data-src="/image/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.png" alt="Java内存模型"></p>
<h4 id="线程的可见性问题"><a href="#线程的可见性问题" class="headerlink" title="线程的可见性问题"></a>线程的可见性问题</h4><p><img data-src="/image/%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8F%AF%E8%A7%81%E6%80%A7%E9%97%AE%E9%A2%98.png" alt="线程的可见性问题"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 演示线程的可见性问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread m = <span class="keyword">new</span> MyThread();</span><br><span class="line">        m.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在main线程中用死循环判断，如果线程对象中flag变成了true，就输出一句话</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (m.flag)&#123;</span><br><span class="line">                System.out.println(m.getName() + <span class="string">"线程执行了"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//休眠三秒</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将flag改成true</span></span><br><span class="line">        flag = <span class="keyword">true</span>;</span><br><span class="line">        System.out.println(<span class="string">"flag已经更改成为："</span> + flag) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1-4-多线程的安全性问题-有序性"><a href="#1-4-多线程的安全性问题-有序性" class="headerlink" title="1.4 多线程的安全性问题 - 有序性"></a>1.4 多线程的安全性问题 - 有序性</h3><p>编译器在编译时回对代码进行重排序。</p>
<p>如果代码先后顺序在方法中不受影响，编译器编译时，就有可能进行重排序。</p>
<p>如果多线程程序中出现重排序，有可能有风险。</p>
<p><img data-src="/image/%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%9C%89%E5%BA%8F%E6%80%A7%E9%97%AE%E9%A2%98.png" alt="线程的有序性问题"></p>
<h3 id="1-5-多线程的安全性问题-原子性"><a href="#1-5-多线程的安全性问题-原子性" class="headerlink" title="1.5 多线程的安全性问题 - 原子性"></a>1.5 多线程的安全性问题 - 原子性</h3><p><strong>原子性：密不可分的一组操作。</strong></p>
<p><img data-src="/image/%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8E%9F%E5%AD%90%E6%80%A7%E9%97%AE%E9%A2%98.png" alt="线程的原子性问题"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 原子性问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Task t = <span class="keyword">new</span> Task();</span><br><span class="line">        <span class="keyword">new</span> Thread(t).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(t).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(t).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//count自增一百次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">5</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            count++;</span><br><span class="line">            System.out.println(<span class="string">"count-&gt;"</span> + count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="二、volatile关键字"><a href="#二、volatile关键字" class="headerlink" title="二、volatile关键字"></a>二、volatile关键字</h2><p><strong>volatile</strong>：可以保证多线程中的可见性问题</p>
<ul>
<li>volatile修饰的成员变量，该变量每次修改后对于其他变量是可见的。</li>
<li>volatile修饰的成员变量，每次线程在操作时，都会从主内存中读取数据。</li>
</ul>
<h4 id="2-1-volatile解决可见性问题"><a href="#2-1-volatile解决可见性问题" class="headerlink" title="2.1 volatile解决可见性问题"></a>2.1 volatile解决可见性问题</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread m = <span class="keyword">new</span> MyThread();</span><br><span class="line">        m.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在main线程中用死循环判断，如果线程对象中flag变成了true，就输出一句话</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//flag已经使用volatile修饰了，所以每次循环都会去主内存中读取新数据，可以解决可见性问题</span></span><br><span class="line">            <span class="keyword">if</span> (m.flag)&#123;</span><br><span class="line">                System.out.println(m.getName() + <span class="string">"线程执行了"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//休眠三秒</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将flag改成true</span></span><br><span class="line">        flag = <span class="keyword">true</span>;</span><br><span class="line">        System.out.println(<span class="string">"flag已经更改成为："</span> + flag) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2-2-volatile解决有序性问题"><a href="#2-2-volatile解决有序性问题" class="headerlink" title="2.2 volatile解决有序性问题"></a>2.2 volatile解决有序性问题</h4><p>有序性问题主要因为发生了代码“重排”，volatile修饰变量时，会禁止代码重排。</p>
<p><img data-src="/image/volatile%E8%A7%A3%E5%86%B3%E6%9C%89%E5%BA%8F%E6%80%A7%E9%97%AE%E9%A2%98.png" alt="volatile解决有序性问题"></p>
<blockquote>
<p>小结</p>
<ul>
<li><p>volatile可以解决多线程的可见性和有序性问题</p>
</li>
<li><p>不能解决多线程的原子性问题</p>
</li>
</ul>
</blockquote>
<h2 id="三、原子类"><a href="#三、原子类" class="headerlink" title="三、原子类"></a>三、原子类</h2><h3 id="3-1-原子类概述"><a href="#3-1-原子类概述" class="headerlink" title="3.1 原子类概述"></a>3.1 原子类概述</h3><p>在<code>java.util.concurrent.atomic</code>包下定义了一些对“变量”操作的“原子类”:</p>
<ul>
<li><code>java.util.concurrent.atomic.AtomicInteger</code>：对int变量操作的“原子类”;</li>
<li><code>java.util.concurrent.atomic.AtomicLong</code>：对long变量操作的“原子类”;</li>
<li><code>java.util.concurrent.atomic.AtomicBoolean</code>：对boolean变量操作的“原子类”;</li>
</ul>
<p>它们可以保证对“变量”操作的：原子性、有序性、可见性。</p>
<h3 id="3-2-AtomicInteger示例"><a href="#3-2-AtomicInteger示例" class="headerlink" title="3.2 AtomicInteger示例"></a>3.2 AtomicInteger示例</h3><p>AtomicInteger是整数原子类，里面支持原子性操作。</p>
<ul>
<li>举例：如果AtomicInteger进行自增操作，自增中的很多操作步骤都是一个整体，不能被插队执行。</li>
</ul>
<p>构造方法：</p>
<ul>
<li><code>AtomicInteger()</code>：使用空参后遭方法创建的对象表示整数0</li>
<li><code>AtomicInteger(int initialValue)</code>:根据指定的整数创建AtomicInteger对象。</li>
</ul>
<p>其他方法：</p>
<ul>
<li><code>int getAndIncrement()</code>：先获取当前值，然后自增，返回的是自增前的值【相当于i++】</li>
<li><code>int incrementAndGet()</code>：先自增，然后获取自增后的值。返回的是自增后的值【相当于++i】</li>
<li><code>int get()</code>：获取AtomicInteger对象的int数字。</li>
</ul>
<p>演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Atomic</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建AtomicInteger</span></span><br><span class="line">        AtomicInteger a = <span class="keyword">new</span> AtomicInteger(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//System.out.println(a);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// int getAndIncrement() :先获取当前值，然后自增，返回的是自增前的值【相当于i++】</span></span><br><span class="line">        <span class="comment">//int num = a.getAndIncrement();  a:11  num:10</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//int incrementAndGet()：先自增，然后获取自增后的值。返回的是自增后的值【相当于++i】</span></span><br><span class="line">        <span class="keyword">int</span> num = a.incrementAndGet(); <span class="comment">// a:11 num:11</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"a:"</span> + a);</span><br><span class="line">        System.out.println(<span class="string">"num:"</span> + num);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// int get()：获取AtomicInteger对象的int数字。</span></span><br><span class="line">        <span class="keyword">int</span> aa = a.get();</span><br><span class="line">        System.out.println(<span class="string">"aa:"</span> + aa);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-1-AtomicInteger保证数据原子性"><a href="#3-2-1-AtomicInteger保证数据原子性" class="headerlink" title="3.2.1 AtomicInteger保证数据原子性"></a>3.2.1 AtomicInteger保证数据原子性</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用AtomicInteger解决原子性问题</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Sunmoon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建的原子类对象，表示数字0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    AtomicInteger num = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">5</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//自增</span></span><br><span class="line">            <span class="keyword">int</span> count = num.incrementAndGet();</span><br><span class="line">            System.out.println(<span class="string">"count:"</span> + count);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Task t = <span class="keyword">new</span> Task();</span><br><span class="line">        <span class="keyword">new</span> Thread(t).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(t).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(t).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-3-CAS机制"><a href="#3-3-CAS机制" class="headerlink" title="3.3 CAS机制"></a>3.3 CAS机制</h3><p>AtomicInteger就是通过<strong>CAS机制</strong>来保证数据的原子性</p>
<p>CAS(Compare and swap)：比较与交换</p>
<ul>
<li><p>CAS是通过记录旧的预期值得方式来保证原子性得。</p>
</li>
<li><p>旧的预期值：原来得值（修改前得值）</p>
</li>
</ul>
<p><strong>CAS机制解决原子性过程：</strong></p>
<ol>
<li>线程一会先主内存中的数据读取到自己的工作内存中，并记录旧的预期值。</li>
<li>如果CPU的执行权被其他线程抢走了，线程二执行了，线程二将主内存中的数据读取到自己的工作内存中，并在自己的工作内存中进行修改，修改后在保存到主内存中。</li>
<li>线程一要将工作内存中的数据进行修改(自增)</li>
<li>线程一会将工作内存中的数据保存到主内存，在保存到主内存之前，会先对比一下自己记录的旧的预期值和主内存中的数据是否一致，如果旧的预期值和主内存中的数据一样，表示主内存中的数据没有被修改过，那么可以直接将工作内存中的数据保存到主内存。如果工作内存中的数据和主内存中的数据不一样，就表示主内存中的数据已经被修改过，那么线程一会重新读取主内存中的新数据，并记录旧的预期值，然后在自己的工作内存中修改，修改完之后再次对比旧的预期值和主内存中的数据并进行操作。</li>
</ol>
<p>图解：</p>
<p><img data-src="/image/CAS%E6%9C%BA%E5%88%B6.png" alt="CAS机制"></p>
<h2 id="四、synchronized关键字"><a href="#四、synchronized关键字" class="headerlink" title="四、synchronized关键字"></a>四、synchronized关键字</h2><p><strong><code>synchronized</code>可以解决多行代码的原子性问题</strong></p>
<h3 id="4-1-售票案例引发的安全问题"><a href="#4-1-售票案例引发的安全问题" class="headerlink" title="4.1 售票案例引发的安全问题"></a>4.1 售票案例引发的安全问题</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 电影院要卖票，我们模拟电影院的卖票过程。</span></span><br><span class="line"><span class="comment"> * 假设要播放的电影是 “葫芦娃大战奥特曼”，本次电影的座位共100个(本场电影只能卖100张票)。</span></span><br><span class="line"><span class="comment"> * 我们来模拟电影院的售票窗口，实现多个窗口同时卖 “葫芦娃大战奥特曼”这场电影票(多个窗口一起卖这100张票)需要窗口，</span></span><br><span class="line"><span class="comment"> * 采用线程对象来模拟；需要票，Runnable接口子类来模拟。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 使用三个线程卖100张票</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Ticket对象</span></span><br><span class="line">        Ticket t = <span class="keyword">new</span> Ticket();</span><br><span class="line">        <span class="comment">//使用三个线程去卖票</span></span><br><span class="line">        <span class="keyword">new</span> Thread(t).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(t).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(t).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果多线程同时操作共享数据，就有可能会引发线程安全问题。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义变量，表示票的数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 要使用多个线程一起卖票，所以要在run方法中定义卖票任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//因为售票窗口要一致卖票，死循环</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//判断有没有票，有票在卖</span></span><br><span class="line">            <span class="keyword">if</span> (count&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//增加出现问题机率</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">5</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//模拟卖票操作</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"正在卖票"</span> + count);</span><br><span class="line">                <span class="comment">//减少票</span></span><br><span class="line">                count--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-同步代码块"><a href="#4-2-同步代码块" class="headerlink" title="4.2 同步代码块"></a>4.2 同步代码块</h3><p>使用synchronized解决线程安全问题（多行代码原子性问题）</p>
<ul>
<li><p>synchronized表示同步，可以修饰方法，也可以修饰代码块</p>
</li>
<li><p>如果synchronized修饰代码块，就叫同步代码块</p>
</li>
</ul>
<p>同步代码块格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(锁对象)&#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>锁对象就是一个普通的Java对象，锁对象可以是任何类型的，可以是Student，ArrayList，Object…</p>
<p>锁对象仅仅起到一个标记作用，除此之外，没有其他的含义</p>
</blockquote>
<p><strong>同步代码块的作用：</strong></p>
<ul>
<li><p>只有持有锁的线程才能够进入同步代码块中</p>
</li>
<li><p>【多行代码如果加了同步代码块，那么只有一个线程可以执行了，不允许其他线程柴堆执行，就保证了多行代码的原子性】</p>
</li>
</ul>
<blockquote>
<p>线程同步会保证安全，但是牺牲了效率。</p>
</blockquote>
<h4 id="4-2-1同步代码块解决售票案例的安全问题"><a href="#4-2-1同步代码块解决售票案例的安全问题" class="headerlink" title="4.2.1同步代码块解决售票案例的安全问题"></a>4.2.1同步代码块解决售票案例的安全问题</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Ticket2 t2 = <span class="keyword">new</span> Ticket2();</span><br><span class="line">        <span class="keyword">new</span> Thread(t2).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(t2).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(t2).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 任务类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ticket2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义变量，表示票的数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">//创建对象，表示锁对象，锁对象可以是任何类型的（Object、Student、....）。仅仅起到一个标记作用</span></span><br><span class="line">    <span class="comment">//多个线程使用的锁对象，必须是唯一的。多个线程使用同一个锁</span></span><br><span class="line">    Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 要使用多个线程一起卖票，所以要在run方法中定义卖票任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//因为售票窗口要一致卖票，死循环</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//当线程执行到同步代码块是，会看一下同步代码块上还有没有锁</span></span><br><span class="line">            <span class="comment">//如果同步代码块上还有锁，此时线程会获取到锁，然后进入到同步代码块中。</span></span><br><span class="line">            <span class="comment">//如果同步代码块上面没有锁，那么此时线程会一直在这里等着获取锁。</span></span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                <span class="comment">//判断有没有票，有票在卖</span></span><br><span class="line">                <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//增加出现问题机率</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">5</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//模拟卖票操作</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">"正在卖票"</span> + count);</span><br><span class="line">                    <span class="comment">//减少票</span></span><br><span class="line">                    count--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果线程离开了同步代码块，线程会释放自己的锁[把锁还回去]</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-3-同步方法"><a href="#4-3-同步方法" class="headerlink" title="4.3 同步方法"></a>4.3 同步方法</h3><p>如果synchronized修饰方法，那么这个方法叫做同步方法，也可以解决线程安全问题。</p>
<p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 <span class="keyword">synchronized</span> 返回值类型 方法名(参数列表)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>同步方法其实就是相当于把整个方法都加了同步代码块</p>
</blockquote>
<p><strong>同步方法也是有锁的</strong>：</p>
<ul>
<li>如果同步方法是非静态的，那么锁对象是【this】</li>
<li>如果同步方法是静态的，锁对象是【类名.class】（当前类的字节码文件对象，反射阶段学习）</li>
</ul>
<h4 id="4-3-1-同步方法解决售票案例安全问题"><a href="#4-3-1-同步方法解决售票案例安全问题" class="headerlink" title="4.3.1 同步方法解决售票案例安全问题"></a>4.3.1 同步方法解决售票案例安全问题</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Ticket3 t = <span class="keyword">new</span> Ticket3();</span><br><span class="line">        <span class="keyword">new</span> Thread(t).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(t).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(t).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//任务类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ticket3</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义变量，表示票的数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//调用sell方法进行卖票</span></span><br><span class="line">            sell();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义方法，使用同步方法</span></span><br><span class="line"><span class="comment">     * 同步方法相当于把整个方法都加了同步代码块【锁对象是this】</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">5</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"正在卖票"</span> + count);</span><br><span class="line">            count--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结：</p>
<ol>
<li><p>同步代码块</p>
<ul>
<li>优点：使用起来比较灵活</li>
<li>缺点：语法不如同步方法简洁</li>
</ul>
</li>
<li><p>同步方法</p>
<ul>
<li>优点：语法简洁</li>
<li>缺点：使用起来不如同步代码块灵活。</li>
</ul>
</li>
</ol>
</blockquote>
<h3 id="4-4-Lock接口"><a href="#4-4-Lock接口" class="headerlink" title="4.4 Lock接口"></a>4.4 Lock接口</h3><p>在<code>JDK5</code>的时候，提供了Lock接口，里面有手动获取锁和释放锁的方法。</p>
<p><code>void lock()</code>:获取锁</p>
<p><code>void unlock()</code>:释放锁</p>
<blockquote>
<p>Lock是一个接口，不能直接去使用，Lock最常用的实现类是<code>ReentrantLock</code></p>
</blockquote>
<h4 id="4-4-1-Lock解决售票案例安全性问题"><a href="#4-4-1-Lock解决售票案例安全性问题" class="headerlink" title="4.4.1 Lock解决售票案例安全性问题"></a>4.4.1 Lock解决售票案例安全性问题</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Ticket4 t = <span class="keyword">new</span> Ticket4();</span><br><span class="line">        <span class="keyword">new</span> Thread(t).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(t).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(t).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//任务类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ticket4</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">//创建一个Lock对象</span></span><br><span class="line">    Lock l = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//通过方法手动获取锁</span></span><br><span class="line">            l.lock();</span><br><span class="line">            <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">5</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"正在卖票"</span> + count);</span><br><span class="line">                count--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//手动释放锁</span></span><br><span class="line">            l.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="五、并发包"><a href="#五、并发包" class="headerlink" title="五、并发包"></a>五、并发包</h2><p><code>java.util.concurrent</code>叫做<strong>并发包(简称：juc)</strong>，里面很多类都和线程有关</p>
<p>例如：</p>
<ul>
<li><code>java.util.concurrent.CopyOnWriteArrayList</code></li>
<li><code>java.util.concurrent.CopyOnWriteArraySet</code></li>
<li><code>java.util.concurrent.ConcurrentHashMap</code></li>
<li><code>java.util.concurrent.CountDownLatch</code></li>
<li><code>java.util.concurrent.CyclicBarrier</code></li>
<li><code>java.util.concurrent.Semaphore</code></li>
<li><code>java.util.concurrent.Exchanger</code></li>
<li>等等…</li>
</ul>
<p>下面就分别介绍</p>
<h3 id="5-1-CopyOnWriteArrayList"><a href="#5-1-CopyOnWriteArrayList" class="headerlink" title="5.1 CopyOnWriteArrayList"></a>5.1 CopyOnWriteArrayList</h3><p>ArrayList是线程不安全的，多个线程一起对ArrayList进行操作有可能会有安全问题。例如下面案例三个线程同时操作集合时会导致结果的不准确。</p>
<p><strong>CopyOnWriteArrayList是线程安全的，可以用它来解决这个问题。</strong></p>
<p>使用演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//任务类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个集合【ArrayList是线程不安全的，会引发线程安全问题】</span></span><br><span class="line">    <span class="comment">// List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();</span></span><br><span class="line">    <span class="comment">//CopyOnWriteArrayList是线程安全的，可以用它来解决这个问题</span></span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">5</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            list.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"添加完毕"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Task t = <span class="keyword">new</span> Task();</span><br><span class="line">        <span class="keyword">new</span> Thread(t).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(t).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(t).start();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="comment">//输出集合大小</span></span><br><span class="line">        System.out.println(t.list.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-2-CopyOnWriteArraySet"><a href="#5-2-CopyOnWriteArraySet" class="headerlink" title="5.2 CopyOnWriteArraySet"></a>5.2 CopyOnWriteArraySet</h3><p>HashSet也是线程不安全的，进行多线程操作时，会产生安全性问题</p>
<p><strong>CopyOnWriteArraySet是线程安全的，可以使用这个集合实现多线程操作。</strong></p>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建HashSet集合【HashSet线程不安全，如果多线程同时对HashSet集合进行线程操作，有可能产生安全性问题】</span></span><br><span class="line">    <span class="comment">// Set&lt;Integer&gt; set = new HashSet&lt;&gt;();</span></span><br><span class="line">    <span class="comment">//CopyOnWriteArraySet是线程安全的，我们可以使用这个集合实现多线程操作。</span></span><br><span class="line">    Set&lt;Integer&gt; set = <span class="keyword">new</span> CopyOnWriteArraySet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">5</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            set.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"添加完成！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Task t = <span class="keyword">new</span> Task();</span><br><span class="line">        <span class="keyword">new</span> Thread(t).start();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="comment">//在main线程中添加2000-3000之间的数字</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2000</span>; i &lt; <span class="number">3000</span> ; i++) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">5</span>);</span><br><span class="line">            t.set.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        System.out.println(t.set.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-3-ConcurrentHashMap"><a href="#5-3-ConcurrentHashMap" class="headerlink" title="5.3 ConcurrentHashMap"></a>5.3 ConcurrentHashMap</h3><p>HashMap是线程不安全的，如果多线程操作HashMap，很可能出现安全性问题</p>
<p>Hashtable是线程安全的，多线程操作Hashtable不会有线程安全问题，但是这个集合效率非常低，已经淘汰了</p>
<p>ConcurrentHashMap是线程安全的，效率比Hashtable高。<code>ConcurrentHashMap内部使用的 分段锁+CAS</code>。</p>
<blockquote>
<p>Hashtable:Hashtable内部使用的时synchronized来保证线程安全。在进行一个操作时锁定整个表，其他操作也同时锁定。例如：在线程1进行put操作时，线程2不能使用put添加元素，也不能使用get元素获取元素，所以Hashtable的效率低下。</p>
<p>ConcurrentHashMap:内部使用分段锁+CAS的方式来保证线程安全。在操作时只进行局部锁定，其他元素不受影响，其他线程也可以进行其他元素的操作。所以说ConcurrentHashMap的效率较高。</p>
</blockquote>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建Map集合</span></span><br><span class="line">    <span class="comment">// Map&lt;String, String&gt; map = new HashMap&lt;&gt;();</span></span><br><span class="line">    <span class="comment">// Map&lt;String, String&gt; map = new Hashtable&lt;&gt;();</span></span><br><span class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//注意键不要重复</span></span><br><span class="line">            map.put(Thread.currentThread().getName() + i, i+<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"添加完毕"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Task t = <span class="keyword">new</span> Task();</span><br><span class="line">        <span class="keyword">new</span> Thread(t).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(t).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(t).start();</span><br><span class="line">        <span class="comment">//休眠</span></span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        <span class="comment">//输出集合大小</span></span><br><span class="line">        System.out.println(t.map.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-4-CountDownLatch"><a href="#5-4-CountDownLatch" class="headerlink" title="5.4 CountDownLatch"></a>5.4 CountDownLatch</h3><p><code>CountDownLatch</code>允许一个或多个线程等待其他线程完成操作。</p>
<p>例如：线程1要打印A、C，线程2要打印B，但是要求在线程1打印完A之后，要等线程2打印B，等待线程2打印完成后，线程1继续打印C，总的来说就是要，线程1打印完A之后要等待线程2打印完B之后再继续执行。</p>
<p>CountDownLatch就可以完成上述的场景。</p>
<p>构造方法：</p>
<ul>
<li><code>CountDownLatch(int count)</code>：参数count表示计数器</li>
</ul>
<p>其他方法：</p>
<ul>
<li><code>void await()：</code>让线程等待，如果计数器变成0，那么该线程就会往下执行。</li>
<li><code>void countDown()</code>：让计数器的值减1。</li>
</ul>
<p>使用CountDownLatch完成上面两个线程打印ABC的案例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//线程A  完成打印A、C</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义CountDownLatch</span></span><br><span class="line">    CountDownLatch c;</span><br><span class="line">    <span class="comment">//提供构造方法，接收外界传递过来的CountDownLatch对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThreadA</span><span class="params">(CountDownLatch c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.c = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"A"</span>);</span><br><span class="line">            <span class="comment">//输出玩字符串A，让线程等待，知道CountDownLatch计数器变成0</span></span><br><span class="line">            c.await();</span><br><span class="line">            System.out.println(<span class="string">"C"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//线程B 打印B</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThreadB</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    CountDownLatch c;</span><br><span class="line">    <span class="comment">//提供构造方法，接收外界传递过来的CountDownLatch对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThreadB</span><span class="params">(CountDownLatch c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.c = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"B"</span>);</span><br><span class="line">        c.countDown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建CountDownLatch对象</span></span><br><span class="line">        CountDownLatch c = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//创建线程对象并执行</span></span><br><span class="line">        <span class="keyword">new</span> MyThreadA(c).start();</span><br><span class="line">        <span class="keyword">new</span> MyThreadB(c).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小贴士</p>
<ul>
<li><strong>CountDownLatch是通过一个计数器来实现的</strong>，每当一个线程完成了自己的任务后，可以调用<strong>countDown()方法让计数器-1</strong>，当<strong>计数器到达0时</strong>，等待的线程继续执行<strong>调用CountDownLatch.await()方法的线程阻塞状态解除</strong>，继续执行。</li>
</ul>
</blockquote>
<h3 id="5-5-CyclicBarrier"><a href="#5-5-CyclicBarrier" class="headerlink" title="5.5 CyclicBarrier"></a>5.5 CyclicBarrier</h3><p>CyclicBarrier的字面意思是可循环使用(Cyclic)的屏障(Barrier)。它要做的事情是，让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续运行。</p>
<p>举例：公司要召集5名员工开会，但是要等5名员工到齐之后才开始。</p>
<p>构造方法：</p>
<ul>
<li><code>CyclicBarrier(int count, Runnable barrierAction)</code>：当count个线程到达同步点【屏障】时，会执行barrierAction任务</li>
</ul>
<p>其他方法：</p>
<ul>
<li><code>int await()</code>：线程等待，并且会通知CyclicBarrier已经到达同步点【屏障】</li>
</ul>
<p>使用CyclicBarrier完成召集员工开会</p>
<ul>
<li>创建五个员工，一个开会线程任务。使用CyclicBarrier保证5名员工都到了，再开始开会任务</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//开会任务类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Meeting</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"人都到了，开始开会。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//员工线程类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义CyclicBarrier</span></span><br><span class="line">    CyclicBarrier c;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义构造方法，让外界传递一个CyclicBarrier</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PersonThread</span><span class="params">(CyclicBarrier c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.c = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//线程要执行的任务。让员工休眠随机的毫秒值后，然后再来到办公室。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//产生随机数</span></span><br><span class="line">            <span class="keyword">int</span> randomTime = <span class="keyword">new</span> Random().nextInt(<span class="number">3000</span>);</span><br><span class="line">            <span class="comment">//让线程休眠</span></span><br><span class="line">            Thread.sleep(randomTime);</span><br><span class="line">            <span class="comment">//模拟来到办公室</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"来到了办公室"</span>);</span><br><span class="line">            <span class="comment">//让线程等待，知道所有人都来到办公室(同步点)才能开会</span></span><br><span class="line">            c.await();<span class="comment">//让线程等待，并通知已经到达了同步点</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建会议任务对象</span></span><br><span class="line">        Meeting meet = <span class="keyword">new</span> Meeting();</span><br><span class="line">        <span class="comment">//创建CyclicBarrier，并指定5个线程到达同步点，再开始任务。</span></span><br><span class="line">        CyclicBarrier c = <span class="keyword">new</span> CyclicBarrier(<span class="number">5</span>,meet);</span><br><span class="line">        <span class="comment">//创建员工线程，模拟进行会议室</span></span><br><span class="line">        <span class="keyword">new</span> PersonThread(c).start();</span><br><span class="line">        <span class="keyword">new</span> PersonThread(c).start();</span><br><span class="line">        <span class="keyword">new</span> PersonThread(c).start();</span><br><span class="line">        <span class="keyword">new</span> PersonThread(c).start();</span><br><span class="line">        <span class="keyword">new</span> PersonThread(c).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用场景：CyclicBarrier可以用于多线程计算数据，最后合并计算结果的场景。</p>
<p>需求：使用两个线程读取2个文件中的数据，当两个文件中的数据都读取完毕以后，进行数据的汇总操作。</p>
</blockquote>
<h3 id="5-6-Semaphore"><a href="#5-6-Semaphore" class="headerlink" title="5.6 Semaphore"></a>5.6 Semaphore</h3><p><strong>Semaphore的主要作用是控制线程的并发数量。</strong></p>
<ul>
<li>synchronized可以起到”锁”的作用，但某个时间段内，只能有一个线程允许执行。</li>
<li>Semaphore可以设置同时允许几个线程执行。</li>
</ul>
<p>构造方法：</p>
<ul>
<li><code>Semaphore(int permits)</code>：参数表示允许几个线程执行代码</li>
</ul>
<p>其他方法：</p>
<ul>
<li><code>void acquire()</code>:获取凭证【获取锁】</li>
<li><code>void release():</code>释放凭证【释放锁】</li>
</ul>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义Semaphore类</span></span><br><span class="line">    Semaphore s;</span><br><span class="line">    <span class="comment">//定义构造方法，接收外界传递过来的Semaphore对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(Semaphore s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.s = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取凭证</span></span><br><span class="line">            s.acquire();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"进来了"</span>);</span><br><span class="line">            <span class="comment">//线程休眠</span></span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"出去了"</span>);</span><br><span class="line">            <span class="comment">//释放凭证</span></span><br><span class="line">            s.release();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Semaphore s = <span class="keyword">new</span> Semaphore(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">new</span> MyThread(s).start();</span><br><span class="line">        <span class="keyword">new</span> MyThread(s).start();</span><br><span class="line">        <span class="keyword">new</span> MyThread(s).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-7-Exchanger"><a href="#5-7-Exchanger" class="headerlink" title="5.7 Exchanger"></a>5.7 Exchanger</h3><p><strong>Exchanger(交换者)</strong>是一个用于线程间协作的工具类。</p>
<ul>
<li><strong>可以用于进行线程间的数据交换。</strong></li>
</ul>
<p>构造方法：</p>
<ul>
<li><code>Exchanger()</code>：创建一个新的 Exchanger对象。</li>
</ul>
<p>其他方法：</p>
<ul>
<li><code>V exchange(V x)</code>：参数表示借给其他类型的数据。返回值是其他线程发送过来的数据，调用该方法后线程会一直等着其他线程</li>
</ul>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//线程A</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个Exchanger</span></span><br><span class="line">    <span class="comment">//交换什么类型的数据，泛型就写什么</span></span><br><span class="line">    Exchanger&lt;String&gt; e;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThreadA</span><span class="params">(Exchanger&lt;String&gt; e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.e = e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"线程A等待来自线程B的礼物"</span>);</span><br><span class="line">            System.out.println(<span class="string">"线程A送出了自己的礼物，并收到了来自线程B的礼物："</span> + e.exchange(<span class="string">"礼物A"</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//线程B</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThreadB</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个Exchanger</span></span><br><span class="line">    <span class="comment">//交换什么类型的数据，泛型就写什么</span></span><br><span class="line">    Exchanger&lt;String&gt; e;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThreadB</span><span class="params">(Exchanger&lt;String&gt; e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.e = e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"线程B等待来自线程A的礼物"</span>);</span><br><span class="line">            System.out.println(<span class="string">"线程B送出了自己的礼物，并收到了来自线程A的礼物："</span> + e.exchange(<span class="string">"礼物B"</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Exchanger对象</span></span><br><span class="line">        Exchanger&lt;String&gt; e = <span class="keyword">new</span> Exchanger&lt;&gt;();</span><br><span class="line">        <span class="comment">//创建线程，启动</span></span><br><span class="line">        <span class="keyword">new</span> MyThreadA(e).start();</span><br><span class="line">        <span class="keyword">new</span> MyThreadB(e).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用场景：可以做数据校对工作</p>
<p>需求：比如我们需要将纸制银行流水通过人工的方式录入成电子银行流水。为了避免错误，采用AB岗两人进行录入，录入到两个文件中，系统需要加载这两个文件，并对两个文件数据进行校对，看看是否录入一致。</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>学习</tag>
        <tag>多线程</tag>
        <tag>线程安全</tag>
        <tag>并发</tag>
        <tag>并发包</tag>
      </tags>
  </entry>
  <entry>
    <title>线程池、死锁、线程状态、等待与唤醒、Lambda表达式、Stream流</title>
    <url>/2020/08/03/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E3%80%81%E6%AD%BB%E9%94%81%E3%80%81%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E3%80%81%E7%AD%89%E5%BE%85%E4%B8%8E%E5%94%A4%E9%86%92%E3%80%81Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E3%80%81Stream%E6%B5%81/</url>
    <content><![CDATA[<h2 id="一、线程池"><a href="#一、线程池" class="headerlink" title="一、线程池"></a>一、线程池</h2><p><strong>为什么使用线程池？</strong></p>
<p>如果并发的线程数量很多，并且每个线程都是执行一个时间很短的任务就结束了，这样频繁创建线程就会大大降低系统的效率，因为频繁创建线程和销毁线程对性能的影响是非常大的。</p>
<a id="more"></a>

<h3 id="1-1-线程池概念"><a href="#1-1-线程池概念" class="headerlink" title="1.1 线程池概念"></a>1.1 线程池概念</h3><p><img data-src="/image/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%BB%8B%E7%BB%8D.png" alt="线程池介绍"></p>
<p>线程池：其实就是一个容纳多个线程的容器，其中的线程可以反复使用，省去了频繁创建线程对象的操作，无需反复创建线程而消耗过多资源。</p>
<blockquote>
<p>合理利用线程池能够带来三个好处：</p>
<ol>
<li>降低资源消耗。减少了创建和销毁线程的次数，每个工作线程都可以被重复利用，可执行多个任务。</li>
<li>提高响应速度。当任务到达时，任务可以不需要的等到线程创建就能立即执行。</li>
<li>提高线程的可管理性。可以根据系统的承受能力，调整线程池中工作线线程的数目，防止因为消耗过多的内存，而把服务器累趴下(每个线程需要大约1MB内存，线程开的越多，消耗的内存也就越大，最后死机)。</li>
</ol>
</blockquote>
<h3 id="1-2-线程池的使用"><a href="#1-2-线程池的使用" class="headerlink" title="1.2 线程池的使用"></a>1.2 线程池的使用</h3><p><strong>线程池相关API</strong></p>
<ul>
<li><code>Executor</code>:接口，该接口是线程池的根接口，这个接口提供了执行线程任务的方法。<ul>
<li><code>ExecutorService</code>：是Executor的子接口，也表示线程池。里面除了提供了执行线程任务的方法，还提供了管理线程的方法。</li>
<li><code>Executors</code>：线程池的工具类，里面提供了获取线程池的方法</li>
</ul>
</li>
</ul>
<p><strong>注意：线程池不是我们自己new出来的，是通过Executors工具类获取的</strong>。</p>
<p><strong>Executors获取线程池的方法：</strong></p>
<ul>
<li><code>static ExecutorService newFixedThreadPool(int nThreads)</code>：创建一个定长的线程池，参数表示线程池的长度</li>
</ul>
<p><strong>ExecutorService表示线程池，里面有一些有关线程使用的方法</strong></p>
<ul>
<li><code>submit(Runnable task)</code>：提交线程任务并执行</li>
<li><code>shutdown()</code>:销毁线程池</li>
</ul>
<p><strong>线程池使用步骤：</strong></p>
<ol>
<li>调用<code>Executors</code>的<code>newFixedThreadPool</code>方法获取线程池</li>
<li>定义一个<code>Runnable</code>实现类，表示线程任务</li>
<li>通过线程池调用<code>submit</code>,传递<code>Runnable</code>接口的实现类对象，执行线程任务</li>
<li>销毁线程池（一般不做）</li>
</ol>
<p><strong>使用示例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//线程要执行的任务</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">":HelloWorld"</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01ThreadPool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.调用Executors的newFixedThreadPool方法获取线程池</span></span><br><span class="line">        ExecutorService threadPool = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//2.定义一个Runnable实现类，表示线程任务</span></span><br><span class="line">        Task t = <span class="keyword">new</span> Task();</span><br><span class="line">        <span class="comment">//3.通过线程池调用submit,传递Runnable接口的实现类对象，执行线程任务</span></span><br><span class="line">        threadPool.submit(t);</span><br><span class="line">        threadPool.submit(t);</span><br><span class="line">        threadPool.submit(t);</span><br><span class="line">        <span class="comment">//4.销毁线程池（一般不做）</span></span><br><span class="line">        threadPool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1-3-多线程的第三种实现方式"><a href="#1-3-多线程的第三种实现方式" class="headerlink" title="1.3 多线程的第三种实现方式"></a>1.3 多线程的第三种实现方式</h3><p>通过实现<strong>Callable接口</strong>的方式实现多线程</p>
<p><strong>步骤：</strong></p>
<ol>
<li>定义类，然后实现Callable接口</li>
<li>重写Callable接口中的call方法，在call方法中定义线程要执行的任务</li>
<li>获取一个线程池【<strong>该方式完成多线程必须要有线程池</strong>】</li>
<li>调用线程池的submit方法，传递Callable接口的实现类对象，执行线程任务</li>
<li>处理结果</li>
</ol>
<p><strong>涉及方法：</strong></p>
<ul>
<li><code>Future submit(Callable&lt;T&gt; task)</code>:提交线程任务。返回值是Future类型，表示将来线程运行后产出的结果</li>
</ul>
<p><strong>获取线程之后结构之后Future里封装的结果</strong></p>
<ul>
<li><code>V get()</code>:获取线程执行后的结果【如果线程没有执行结束，get方法会等着线程执行完毕】</li>
</ul>
<p><strong>使用演示</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallableImpl</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//输出100次helloworld</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Java"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Callable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        ExecutorService threadPool = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">        Future&lt;String&gt; result = threadPool.submit(<span class="keyword">new</span> CallableImpl());</span><br><span class="line">        System.out.println(result.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="二、死锁"><a href="#二、死锁" class="headerlink" title="二、死锁"></a>二、死锁</h2><h3 id="2-1-什么是死锁"><a href="#2-1-什么是死锁" class="headerlink" title="2.1 什么是死锁"></a>2.1 什么是死锁</h3><p><img data-src="/image/%E6%AD%BB%E9%94%81%E4%BB%8B%E7%BB%8D.png" alt="死锁介绍"></p>
<p>多个线程各自持有锁，并且等待其他线程释放锁，这种情况下就产生了死锁。</p>
<ul>
<li>在多线程程序中,使用了多把锁,造成线程之间相互等待，程序不往下走了。</li>
</ul>
<h3 id="2-2-死锁产生的条件"><a href="#2-2-死锁产生的条件" class="headerlink" title="2.2 死锁产生的条件"></a>2.2 死锁产生的条件</h3><ol>
<li><p>有多把锁</p>
</li>
<li><p>有多个线程</p>
</li>
<li><p>有同步代码块嵌套</p>
</li>
</ol>
<h3 id="2-3-死锁代码"><a href="#2-3-死锁代码" class="headerlink" title="2.3 死锁代码"></a>2.3 死锁代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//锁对象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Locks</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建两个对象，表示两个锁</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object LockA = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object LockB = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//线程A</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (Locks.LockA)&#123;</span><br><span class="line">            System.out.println(<span class="string">"MyThreadA。。。LockA"</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (Locks.LockB)&#123;</span><br><span class="line">                System.out.println(<span class="string">"MyThreadA。。。LockB"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//线程B</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThreadB</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (Locks.LockB)&#123;</span><br><span class="line">            System.out.println(<span class="string">"MyThreadB。。。LockB"</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (Locks.LockA)&#123;</span><br><span class="line">                System.out.println(<span class="string">"MyThreadB。。。LockA"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建两个线程并执行</span></span><br><span class="line">        <span class="keyword">new</span> MyThreadA().start();</span><br><span class="line">        <span class="keyword">new</span> MyThreadB().start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>死锁是有可能不产生的，可以在同步代码块上增加死循环，增加死锁的产生机率。</p>
</blockquote>
<h2 id="三、线程状态"><a href="#三、线程状态" class="headerlink" title="三、线程状态"></a>三、线程状态</h2><h3 id="3-1-线程状态概述"><a href="#3-1-线程状态概述" class="headerlink" title="3.1 线程状态概述"></a>3.1 线程状态概述</h3><p>线程拥有六种状态：</p>
<table>
<thead>
<tr>
<th>线程状态</th>
<th>状态发生的条件</th>
</tr>
</thead>
<tbody><tr>
<td>新建（NEW）</td>
<td>刚刚创建出来但是没有运行的线程处于此状态。</td>
</tr>
<tr>
<td>运行（RUNNABLE）</td>
<td>调用start方法启动后的线程处于运行状态</td>
</tr>
<tr>
<td>受阻塞（BLOCKED）</td>
<td>等待获取锁的线程处于此状态。</td>
</tr>
<tr>
<td>无限等待（WAITING）</td>
<td>当线程调用wait()方法时，线程会处于无限等待状态【没有时间的等待】</td>
</tr>
<tr>
<td>计时等待（TIMED_WAITING）</td>
<td>当线程调用wait(毫秒值)方法或sleep(毫秒值)时，线程会处于计时等待状态【有时间的等待】</td>
</tr>
<tr>
<td>退出（TERMINATED）</td>
<td>当线程执行完了自己的run方法或者调用了stop方法，会进入退出状态。</td>
</tr>
</tbody></table>
<h3 id="3-2-线程状态图"><a href="#3-2-线程状态图" class="headerlink" title="3.2 线程状态图"></a>3.2 线程状态图</h3><p>线程六种状态之间也是可以进行切换的</p>
<p>线程状态图解：</p>
<p><img data-src="/image/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E5%9B%BE.png" alt="线程状态图"></p>
<h3 id="3-3-等待与唤醒"><a href="#3-3-等待与唤醒" class="headerlink" title="3.3 等待与唤醒"></a>3.3 等待与唤醒</h3><p>在Object中，有两种方法让线程等待以及唤醒线程。</p>
<ul>
<li><code>void wait()</code>:让线程等待，直到有其他线程唤醒它</li>
<li><code>void wait(long timeout)</code>:让线程等待，知道有其他线程唤醒她，或者时间到了也会自己醒。参数是毫秒值</li>
<li><code>void notify()</code>:唤醒一个等待的线程</li>
<li><code>void notifyAll()</code>:唤醒所有等待的线程</li>
</ul>
<p>wait方法用于等待，notify方法用于唤醒，它们一起使用，一般叫做等待唤醒机制，一般用于线程间的通信。</p>
<blockquote>
<p><strong>wait和notify是Object中的方法。</strong></p>
</blockquote>
<p>wait和notify一定要放到同步代码(同步代码块或同步方法)，通过锁对象去调用。</p>
<ul>
<li>通过哪个锁调用的notify，那么唤醒的就是通过哪个锁调用wait等待的线程。</li>
</ul>
<blockquote>
<p>wait()方法和sleep()方法的区别</p>
<ul>
<li>wait:进入等待状态会释放自己的锁对象</li>
<li>sleep:执行时不会释放锁对象</li>
</ul>
</blockquote>
<h3 id="3-4-等待与睡醒案例-包子铺卖包子"><a href="#3-4-等待与睡醒案例-包子铺卖包子" class="headerlink" title="3.4 等待与睡醒案例(包子铺卖包子)"></a>3.4 等待与睡醒案例(包子铺卖包子)</h3><p>使用等待与唤醒机制实现包子铺卖包子案例</p>
<ul>
<li>包子铺线程每次只能生产一个包子，吃货线程每次吃一个。</li>
<li>包子铺生产完包子之后通知(唤醒)吃货吃包子</li>
<li>吃货吃完包子之后通知(唤醒)包子铺生产包子</li>
</ul>
<p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 包子类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaoZi</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 属性：表示包子是否存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 包子铺</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaoZiPu</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 包子铺要使用包子，包子铺使用的包子要和吃货使用的是一个，</span></span><br><span class="line"><span class="comment">     * 所以定义BaoZi类型的变量，然后通过构造方法赋值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> BaoZi baoZi;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供构造方法，接收外界传递进来的包子</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> baoZi</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaoZiPu</span><span class="params">(BaoZi baoZi)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.baoZi = baoZi;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义线程要执行的任务</span></span><br><span class="line"><span class="comment">     * 对于包子铺来说要执行的任务是要一直生产包子，等着吃货吃包子</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//一直不停的生产包子</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//包子铺和吃货都要操作包子，多个线程操作共享数据使用线程同步保证安全,baoZi是唯一的，所以可以使用baoZi当作锁对象</span></span><br><span class="line">            <span class="keyword">synchronized</span> (baoZi)&#123;</span><br><span class="line">                <span class="comment">//判断 如果有包子等着吃货吃包子</span></span><br><span class="line">                <span class="keyword">if</span> (baoZi.flag)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//等待[wait方法要通过锁对象去调用]</span></span><br><span class="line">                        baoZi.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//如果没有包子</span></span><br><span class="line">                System.out.println(<span class="string">"包子铺生产一个了包子..."</span>);</span><br><span class="line">                <span class="comment">//更改标记，表示包子存在了</span></span><br><span class="line">                baoZi.flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="comment">//唤醒吃货吃包子</span></span><br><span class="line">                baoZi.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 吃货</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChiHuo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 包子铺要使用包子，包子铺使用的包子要和吃货使用的是一个，</span></span><br><span class="line"><span class="comment">     * 所以定义BaoZi类型的变量，然后通过构造方法赋值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> BaoZi baoZi;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供构造方法，接收外界传递进来的包子</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> baoZi</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChiHuo</span><span class="params">(BaoZi baoZi)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.baoZi = baoZi;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对于吃货来说，要做的事情是一直吃包子，等着包子铺生产包子</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (baoZi)&#123;</span><br><span class="line">                <span class="comment">//判断 ，没有包子，吃货要等着包子铺生产包子</span></span><br><span class="line">                <span class="keyword">if</span> (!baoZi.flag)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        baoZi.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//如果有包子</span></span><br><span class="line">                System.out.println(<span class="string">"吃货正在吃包子..."</span>);</span><br><span class="line">                <span class="comment">//吃完,更改标记</span></span><br><span class="line">                baoZi.flag = <span class="keyword">false</span>;</span><br><span class="line">                <span class="comment">//唤醒包子铺生产包子</span></span><br><span class="line">                baoZi.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建包子对象</span></span><br><span class="line">        BaoZi baoZi = <span class="keyword">new</span> BaoZi();</span><br><span class="line">        <span class="comment">//创建包子铺和吃货线程，传递包子对象，执行线程。</span></span><br><span class="line">        <span class="keyword">new</span> ChiHuo(baoZi).start();</span><br><span class="line">        <span class="keyword">new</span> BaoZiPu(baoZi).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="四、定时器"><a href="#四、定时器" class="headerlink" title="四、定时器"></a>四、定时器</h2><p><strong>Timer类</strong>：表示定时器，可以只执行一次，也可以周期性的执行。</p>
<p>构造方法：</p>
<ul>
<li><code>Timer()</code>：创建一个新的计时器。</li>
</ul>
<p>其他方法：</p>
<ul>
<li><code>void schedule(TimerTask task, long delay)</code> :指定毫秒值【delay】后，执行任务【task】，只执行一次</li>
<li><code>void schedule(TimerTask task, Date firstTime, long period)</code>：指定毫秒值【delay】后，执行任务【task】，该方法会周期性的执行任务，每隔period毫秒执行一次。</li>
<li><code>void schedule(TimerTask task, Date time)</code>：安排定时器在指定的时间【time】执行任务【task】</li>
<li><code>void schedule(TimerTask task, Date firstTime, long period)</code>：安排定时器在指定的时间【firstTime】执行任务【task】，每隔【period】毫秒执行一次</li>
</ul>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Timer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建定时器对象</span></span><br><span class="line">        Timer t = <span class="keyword">new</span> Timer();</span><br><span class="line">        <span class="comment">//设置定时器，3秒后启动，输出一次砰砰砰</span></span><br><span class="line">        t.schedule(<span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"砰砰砰~"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">3000</span>);</span><br><span class="line">        <span class="comment">//设置定时器。5秒后启动，每隔1秒输出一次biubiubiu</span></span><br><span class="line">        t.schedule(<span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"biubiubiu~"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">5000</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置定时器，参数传递一个特点瞬间的日期对象，然后执行，只会执行一次</span></span><br><span class="line">        Calendar c = Calendar.getInstance();</span><br><span class="line">        c.set(Calendar.HOUR_OF_DAY, <span class="number">11</span>);</span><br><span class="line">        c.set(Calendar.MINUTE, <span class="number">44</span>);</span><br><span class="line">        c.set(Calendar.SECOND, <span class="number">10</span>);</span><br><span class="line">        Date date = c.getTime();</span><br><span class="line">        t.schedule(<span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"你好啊！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, date);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="五、Lambda表达式"><a href="#五、Lambda表达式" class="headerlink" title="五、Lambda表达式"></a>五、Lambda表达式</h2><h3 id="5-1-函数时编程思想"><a href="#5-1-函数时编程思想" class="headerlink" title="5.1 函数时编程思想"></a>5.1 函数时编程思想</h3><p><strong>Lambda表达式使用的是函数式编程思想，在函数式编程思想中可推导，就是可省略</strong>。</p>
<p>在数学中，函数就是有输入量、输出量的一套计算方案，也就是“拿什么东西做什么事情”。相对而言，面向对象过分强调“必须通过对象的形式来做事情”，而<strong>函数式思想则尽量忽略面向对象的复杂语法——强调做什么，而不是以什么形式做。</strong></p>
<p><strong>做什么，而不是怎么做</strong></p>
<p>我们真的希望创建一个匿名内部类对象吗？不。我们只是为了做这件事情而不得不创建一个对象。我们真正希望做的事情是：将run方法体内的代码传递给Thread类知晓。</p>
<p>传递一段代码——这才是我们真正的目的。而创建对象只是受限于面向对象语法而不得不采取的一种手段方式。那，有没有更加简单的办法？如果我们将关注点从“怎么做”回归到“做什么”的本质上，就会发现只要能够更好地达到目的，过程与形式其实并不重要。</p>
<h3 id="5-2-Lambda优化"><a href="#5-2-Lambda优化" class="headerlink" title="5.2 Lambda优化"></a>5.2 Lambda优化</h3><p>Lambda表达式的标准格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(参数类型 参数名) -&gt; &#123;</span><br><span class="line">	方法体;</span><br><span class="line">	<span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>格式：</p>
<ul>
<li>小括号中参数的写法，和普通方法的参数写法一致，如果有多个参数，逗号隔开。</li>
<li>-&gt; 是一个运算符，表示指向性动作</li>
<li>{}大括号中的内容和普通方法中的内容是一样的。</li>
</ul>
</blockquote>
<p>Lambda表达式可以让我们省去了面向对象中的这些条条框框，让我们只关注最核心的部分。</p>
<p>Lambda表达式使用的是函数式编程思想，在函数式编程思想中可推导，就是可省略。</p>
<h4 id="5-2-1-使用Lambda表达式完成多线程"><a href="#5-2-1-使用Lambda表达式完成多线程" class="headerlink" title="5.2.1 使用Lambda表达式完成多线程"></a>5.2.1 使用Lambda表达式完成多线程</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Lambda</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用Lambda简略格式完成多线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt; System.out.println(Thread.currentThread().getName()+<span class="string">"执行了"</span>)).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用Lambda标准格式完成多线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"执行了"</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-2-2-使用比较器排序对Person类对年龄进行排序"><a href="#5-2-2-使用比较器排序对Person类对年龄进行排序" class="headerlink" title="5.2.2 使用比较器排序对Person类对年龄进行排序"></a>5.2.2 使用比较器排序对Person类对年龄进行排序</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person类略....</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03Collections</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Person&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> Person(<span class="string">"张三"</span>,<span class="number">19</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Person(<span class="string">"李四"</span>,<span class="number">18</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Person(<span class="string">"王五"</span>,<span class="number">20</span>));</span><br><span class="line"></span><br><span class="line">        Collections.sort(list, <span class="keyword">new</span> Comparator&lt;Person&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Person o1, Person o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o1.getAge()-o2.getAge();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//Collections.sort(list,(Person o1, Person o2) -&gt; &#123;</span></span><br><span class="line">        <span class="comment">//    return o1.getAge()-o2.getAge();</span></span><br><span class="line">        <span class="comment">//&#125;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Collections.sort(list,(o1,o2)-&gt;o1.getAge()-o2.getAge());</span></span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-3-Lambda的省略格式"><a href="#5-3-Lambda的省略格式" class="headerlink" title="5.3 Lambda的省略格式"></a>5.3 Lambda的省略格式</h3><p><strong>省略规则：</strong></p>
<ul>
<li>小括号的参数类型可以省略</li>
<li>如果小括号能只有一个参数，小括号也可以省略</li>
<li>如果大括号内只有一条语句，那么可以省略大括号、return、以及分号。[三者要省略只能一起省略]</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04SimpleLambda</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用Lambda标准格式完成多线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"执行了"</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//使用Lambda简略格式完成多线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt; System.out.println(Thread.currentThread().getName()+<span class="string">"执行了"</span>)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-4-Lambda的省略前提"><a href="#5-4-Lambda的省略前提" class="headerlink" title="5.4 Lambda的省略前提"></a>5.4 Lambda的省略前提</h3><ul>
<li>必须要有接口(不能是抽象类)，接口中有且仅有一个需要被重写的抽象方法。</li>
<li>必须支持上下文推导。要能推导出来Lambda表达式表示的是哪个接口中的方法。<ul>
<li>最常用的上下文推导方式是使用接口作为方法参数，然后传递Lambda表达式</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>函数式接口:某个接口中有且仅有一个需要被重写的抽象方法，那么该接口也叫做函数式接口。</strong></p>
</blockquote>
<h2 id="六、Stream流"><a href="#六、Stream流" class="headerlink" title="六、Stream流"></a>六、Stream流</h2><h3 id="6-1-传统方式操作集合的弊端"><a href="#6-1-传统方式操作集合的弊端" class="headerlink" title="6.1 传统方式操作集合的弊端"></a>6.1 传统方式操作集合的弊端</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    操作要求：</span></span><br><span class="line"><span class="comment">        1. 首先筛选所有姓张的人；</span></span><br><span class="line"><span class="comment">        2. 然后筛选名字有三个字的人；</span></span><br><span class="line"><span class="comment">        3. 最后进行对结果进行打印输出。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01PrintList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"张无忌"</span>);</span><br><span class="line">        list.add(<span class="string">"周芷若"</span>);</span><br><span class="line">        list.add(<span class="string">"赵敏"</span>);</span><br><span class="line">        list.add(<span class="string">"张强"</span>);</span><br><span class="line">        list.add(<span class="string">"张三丰"</span>);</span><br><span class="line">        <span class="comment">//1. 首先筛选所有姓张的人；</span></span><br><span class="line">        <span class="comment">//定义集合，保存本次筛选后的结果</span></span><br><span class="line">        List&lt;String&gt; zhangList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//遍历集合，拿到每一个元素，判断是否以张开头</span></span><br><span class="line">        <span class="keyword">for</span> (String str : list) &#123;</span><br><span class="line">            <span class="keyword">if</span>(str.startsWith(<span class="string">"张"</span>)) &#123;</span><br><span class="line">                zhangList.add(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2. 然后筛选名字有三个字的人；</span></span><br><span class="line">        <span class="comment">//定义集合，保存本次筛选后的结果</span></span><br><span class="line">        List&lt;String&gt; threeList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//遍历上次筛选后的结果，拿到里面的每一个元素，判断是否是三个字</span></span><br><span class="line">        <span class="keyword">for</span> (String str : zhangList) &#123;</span><br><span class="line">            <span class="keyword">if</span>(str.length() == <span class="number">3</span>) &#123;</span><br><span class="line">                threeList.add(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3. 最后进行对结果进行打印输出。</span></span><br><span class="line">        <span class="keyword">for</span> (String str : threeList) &#123;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"================================="</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Stream流初体验</span></span><br><span class="line">        list.stream().filter(s -&gt; s.startsWith(<span class="string">"张"</span>)).filter(s -&gt; s.length() == <span class="number">3</span>).forEach(s -&gt; System.out.println(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>操作繁琐，需要反复的去遍历集合，创建集合存储操作之后的元素，而使用<strong>流式思想</strong>将大大简化我们的操作</p>
<h3 id="6-2-流式思想"><a href="#6-2-流式思想" class="headerlink" title="6.2 流式思想"></a>6.2 流式思想</h3><p>流式思想类似于工厂车间的“生产流水线”</p>
<p>图解：</p>
<p><img data-src="/image/%E6%B5%81%E5%BC%8F%E6%80%9D%E6%83%B3.png" alt="流式思想"></p>
<blockquote>
<p><strong>Stream流</strong>其实是一个集合元素的函数模型，他不是集合，也不是树蕨结构，其本身并不存储任何元素(或地址值)。</p>
</blockquote>
<h3 id="6-3-获取流的方式"><a href="#6-3-获取流的方式" class="headerlink" title="6.3 获取流的方式"></a>6.3 获取流的方式</h3><p>获取流有两种方式：</p>
<ul>
<li>通过Collection集合(单列集合)调用steam()方法获取</li>
<li>通过Stream中的静态方法of获取(根据数组获取)</li>
</ul>
<h4 id="6-3-1-Collection获取流"><a href="#6-3-1-Collection获取流" class="headerlink" title="6.3.1 Collection获取流"></a>6.3.1 Collection获取流</h4><p>通过单列集合的实现类调用stream()方法可以获取到流对象。</p>
<ul>
<li><code>Stream&lt;T&gt; stream()</code>:可以获取到集合对应的的流</li>
</ul>
<p>演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02CollectionGetStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"Hello"</span>);</span><br><span class="line">        list.add(<span class="string">"World"</span>);</span><br><span class="line">        list.add(<span class="string">"Java"</span>);</span><br><span class="line">        <span class="comment">//通过集合获取流</span></span><br><span class="line">        Stream&lt;String&gt; stream = list.stream();</span><br><span class="line">        <span class="comment">//输出，将流转成一个数组，通过数组的工具类转成字符串并输出</span></span><br><span class="line">        System.out.println(Arrays.toString(stream.toArray()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-3-2-Stream静态方法获取流"><a href="#6-3-2-Stream静态方法获取流" class="headerlink" title="6.3.2 Stream静态方法获取流"></a>6.3.2 Stream静态方法获取流</h4><p>在Stream中有一个静态方法of，可以通过数组获取流</p>
<ul>
<li><code>static Stream of(T... values)</code>:根据数组或者多个元素获取流</li>
</ul>
<p>演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03ArrayGetStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] strArr = &#123;<span class="string">"aa"</span>,<span class="string">"bb"</span>,<span class="string">"cc"</span>&#125;;</span><br><span class="line">        <span class="comment">//根据数组获取流</span></span><br><span class="line">        <span class="comment">//Stream&lt;String&gt; strStream = Stream.of(strArr);</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//因为of方法参数是可变参数，所以也可以根据多个元素获取流</span></span><br><span class="line">        Stream&lt;String&gt; strStream = Stream.of(<span class="string">"aa"</span>, <span class="string">"bb"</span>, <span class="string">"cc"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将流内容输出</span></span><br><span class="line">        System.out.println(Arrays.toString(strStream.toArray()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="6-4-Stream中的方法"><a href="#6-4-Stream中的方法" class="headerlink" title="6.4 Stream中的方法"></a>6.4 Stream中的方法</h3><h4 id="6-4-1-forEach方法"><a href="#6-4-1-forEach方法" class="headerlink" title="6.4.1 forEach方法"></a>6.4.1 forEach方法</h4><p>在Stream中有一个方法叫做forEach，可以对流中的元素进行逐一处理，逐一操作。</p>
<ul>
<li><code>void forEach(Consumer action)</code>:对流中的元素逐一处理，逐一操作。参数Consumer表示处理规则。<ul>
<li>参数Consumer是一个函数式接口，里面只有一个抽象方法<ul>
<li>void accept(T t):对数据进行处理、操作。</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>forEach方法的参数是Consumer函数式接口，那么我们就可以传递Lambda表达式，这个Lambda表达式表示Consumer中唯一的一个抽象方法accept的内容，accept表示对每一个元素如何处理，所以我们要在Lambda表达式中编写处理规则。</p>
</blockquote>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04ForEach</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个流对象</span></span><br><span class="line">        Stream&lt;String&gt; stream = Stream.of(<span class="string">"aa"</span>, <span class="string">"bb"</span>, <span class="string">"cc"</span>, <span class="string">"dd"</span>, <span class="string">"ee"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对流中的每一个元素进行逐一处理(输出)</span></span><br><span class="line">        <span class="comment">//Lambda表达式中的s就是流中的每一个元素</span></span><br><span class="line">        stream.forEach(s -&gt; System.out.println(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="6-4-2-count方法"><a href="#6-4-2-count方法" class="headerlink" title="6.4.2 count方法"></a>6.4.2 count方法</h4><p>在Stream中有一个方法叫做Count，可以获取流中数据元素的个数</p>
<ul>
<li><code>long count()</code>：获取流中元素的个数</li>
</ul>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06Count</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取流</span></span><br><span class="line">        Stream&lt;String&gt; stream = Stream.of(<span class="string">"aa"</span>, <span class="string">"bb"</span>, <span class="string">"cc"</span>, <span class="string">"dd"</span>, <span class="string">"ee"</span>);</span><br><span class="line">        <span class="comment">//获取流中元素个数</span></span><br><span class="line">        <span class="keyword">long</span> size = stream.count();</span><br><span class="line">        System.out.println(size);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="6-4-3-limit方法"><a href="#6-4-3-limit方法" class="headerlink" title="6.4.3 limit方法"></a>6.4.3 limit方法</h4><p>在Stream中有一个方法叫做limit，该方法可以获取流中的前几个元素</p>
<ul>
<li><code>Stream limit(long n)</code>:获取流中的前n个元素，并放入新的流中</li>
</ul>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo07Limit</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取流</span></span><br><span class="line">        Stream&lt;String&gt; stream = Stream.of(<span class="string">"aa"</span>, <span class="string">"bb"</span>, <span class="string">"cc"</span>, <span class="string">"dd"</span>, <span class="string">"ee"</span>);</span><br><span class="line">        <span class="comment">//获取流中的前3个元素</span></span><br><span class="line">        Stream&lt;String&gt; newStream = stream.limit(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//对新的流进行输出</span></span><br><span class="line">        newStream.forEach(s -&gt; System.out.println(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="6-4-4-skip方法"><a href="#6-4-4-skip方法" class="headerlink" title="6.4.4 skip方法"></a>6.4.4 skip方法</h4><p>在Stream中有一个方法叫做skip，可以跳过前几个元素，获取剩下的</p>
<ul>
<li><code>Stream&lt;T&gt; skip(long n)</code>:跳过前n个元素，获取剩下的元素放入新的流中并返回</li>
</ul>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo08Skip</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取流</span></span><br><span class="line">        Stream&lt;String&gt; stream = Stream.of(<span class="string">"aa"</span>, <span class="string">"bb"</span>, <span class="string">"cc"</span>, <span class="string">"dd"</span>, <span class="string">"ee"</span>);</span><br><span class="line">        <span class="comment">//跳过前3个元素，获取剩下的</span></span><br><span class="line">        Stream&lt;String&gt; newStream = stream.skip(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//输出新的流</span></span><br><span class="line">        newStream.forEach(s -&gt; System.out.println(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="6-4-5-filter方法"><a href="#6-4-5-filter方法" class="headerlink" title="6.4.5 filter方法"></a>6.4.5 filter方法</h4><p>在Stream中有一个方法叫做filter，可以对流中的数据进行过滤筛选</p>
<ul>
<li><code>Stream&lt;T&gt; filter(Predicate predicate)</code>:用来对流中的数据进行过滤筛选，参数返回值是过滤后新的流。predicate表示过滤规则<ul>
<li>Predicate是一个函数式接口，里面只有一个抽象方法test<ul>
<li>boolean test(T t)：判断数据是否符合规则。</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>filter方法的参数式Predicate函数式接口，所以我们可以向参数位置传递Lambda表达式，该Lambda表达式表示Predicate中唯一的一个抽象方法test的内容(重写后),在test中定义过滤的规则。</p>
<p>也就是要在Lambda表达式中编写过滤的规则，因为Lambda表达式表示的就是重写后的test。</p>
</blockquote>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05Filter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Stream&lt;String&gt; stream = Stream.of(<span class="string">"aa"</span>, <span class="string">"bbbbbb"</span>, <span class="string">"ccc"</span>, <span class="string">"dddddd"</span>, <span class="string">"ee"</span>);</span><br><span class="line">        <span class="comment">//对流中的数据进行筛选，只留下长度小于4的元素</span></span><br><span class="line">        <span class="comment">//Lambda表达式中的参数s表示的就是流中的每一个元素。如果Lambda表达式的解惑式true，元素就留下。</span></span><br><span class="line">        Stream&lt;String&gt; newStream = stream.filter(s -&gt; s.length() &lt; <span class="number">4</span>);</span><br><span class="line">        <span class="comment">//将新的流中的每一个数据输出</span></span><br><span class="line">        newStream.forEach(s -&gt; System.out.println(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="6-4-6-concat方法"><a href="#6-4-6-concat方法" class="headerlink" title="6.4.6 concat方法"></a>6.4.6 concat方法</h4><p>在Stream中有一个<strong>静态方法</strong>，可以对两个流合并，合并成一个流。</p>
<ul>
<li>static <T> Stream<T> concat(Stream a, Stream b)：将参数a和b两个流进行合并，返回值式合并后新的流</li>
</ul>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo09Concat</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建两个流</span></span><br><span class="line">        Stream&lt;String&gt; streamOne = Stream.of(<span class="string">"aa"</span>, <span class="string">"bb"</span>);</span><br><span class="line">        Stream&lt;String&gt; streamTwo = Stream.of(<span class="string">"cc"</span>, <span class="string">"dd"</span>);</span><br><span class="line">        <span class="comment">//合并流并返回</span></span><br><span class="line">        Stream&lt;String&gt; newStream = Stream.concat(streamOne, streamTwo);</span><br><span class="line"></span><br><span class="line">        newStream.forEach(s -&gt; System.out.println(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="6-4-7-map方法"><a href="#6-4-7-map方法" class="headerlink" title="6.4.7 map方法"></a>6.4.7 map方法</h4><p>Stream中的map方法：</p>
<ul>
<li><code>Stream map(Function mapper)</code>:将流中的元素映射到新的流中返回，参数Function mapper表示映射规则<ul>
<li>Function是一个函数式接口，里面只有一个抽象方法apply()<ul>
<li>R apply(T t)：对数据进行处理，然后返回处理后的结果。</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>map方法参数式函数式接口Function，所以我们可以传递Lambda表达式，这个Lambda表达式表示的是Function接口中的唯一的一个抽象方法apply的内容，我们因为要在apply中定义映射(处理)规则。</p>
<p>所以可以将映射的规则直接写在Lambda表达式中即可，因为Lambda表达式表示的就是重写后的Function中的apply方法</p>
</blockquote>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo10Map</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个Stream流</span></span><br><span class="line">        Stream&lt;String&gt; stream = Stream.of(<span class="string">"10"</span>, <span class="string">"20"</span>, <span class="string">"30"</span>);</span><br><span class="line">        <span class="comment">//将流中的每一个元素转成数字，保存到新的流中(映射)</span></span><br><span class="line">        <span class="comment">/*Stream&lt;Integer&gt; newStream = stream.map(s -&gt; &#123;</span></span><br><span class="line"><span class="comment">            return Integer.parseInt(s);</span></span><br><span class="line"><span class="comment">        &#125;);*/</span></span><br><span class="line">        <span class="comment">//简化lambda</span></span><br><span class="line">        <span class="comment">//s表示流中的每一个元素，此时是拿到原来流中的每一个字符串，然后放到新的流中返回</span></span><br><span class="line">        Stream&lt;Integer&gt; newStream = stream.map(s -&gt; Integer.parseInt(s));</span><br><span class="line">        <span class="comment">//输出新的流</span></span><br><span class="line">        newStream.forEach(num -&gt; System.out.println(num));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="6-5-Stream流的注意事项"><a href="#6-5-Stream流的注意事项" class="headerlink" title="6.5 Stream流的注意事项"></a>6.5 Stream流的注意事项</h3><ol>
<li><strong>Stream流的非终结方法返回值类型都是本身Stream类型，但是返回的并不是本身的对象。</strong></li>
<li><strong>Stream流只能一次性使用，不能多次使用。</strong></li>
</ol>
<h3 id="6-6-Stream流案例"><a href="#6-6-Stream流案例" class="headerlink" title="6.6 Stream流案例"></a>6.6 Stream流案例</h3><p>现在有两个ArrayList集合存储队伍当中的多个成员姓名，<br>使用Stream流完成下面操作：</p>
<ol>
<li>第一个队伍只要名字为3个字的成员姓名；</li>
<li>第一个队伍筛选之后只要前3个人；</li>
<li>第二个队伍只要姓张的成员姓名；</li>
<li>第二个队伍筛选之后不要前2个人；</li>
<li>将两个队伍合并为一个队伍；</li>
<li>根据姓名创建Person对象；</li>
<li>打印整个队伍的Person对象信息。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 现在有两个ArrayList集合存储队伍当中的多个成员姓名，</span></span><br><span class="line"><span class="comment"> * 使用Stream流完成下面操作</span></span><br><span class="line"><span class="comment"> * 1. 第一个队伍只要名字为3个字的成员姓名；</span></span><br><span class="line"><span class="comment"> * 2. 第一个队伍筛选之后只要前3个人；</span></span><br><span class="line"><span class="comment"> * 3. 第二个队伍只要姓张的成员姓名；</span></span><br><span class="line"><span class="comment"> * 4. 第二个队伍筛选之后不要前2个人；</span></span><br><span class="line"><span class="comment"> * 5. 将两个队伍合并为一个队伍；</span></span><br><span class="line"><span class="comment"> * 6. 根据姓名创建Person对象；</span></span><br><span class="line"><span class="comment"> * 7. 打印整个队伍的Person对象信息。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Sunmoon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo13StreamTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; one = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        one.add(<span class="string">"迪丽热巴"</span>);</span><br><span class="line">        one.add(<span class="string">"宋远桥"</span>);</span><br><span class="line">        one.add(<span class="string">"苏星河"</span>);</span><br><span class="line">        one.add(<span class="string">"老子"</span>);</span><br><span class="line">        one.add(<span class="string">"庄子"</span>);</span><br><span class="line">        one.add(<span class="string">"孙子"</span>);</span><br><span class="line">        one.add(<span class="string">"洪七公"</span>);</span><br><span class="line">        one.add(<span class="string">"欧阳锋"</span>);</span><br><span class="line">        List&lt;String&gt; two = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        two.add(<span class="string">"古力娜扎"</span>);;</span><br><span class="line">        two.add(<span class="string">"张三丰"</span>);</span><br><span class="line">        two.add(<span class="string">"张无忌"</span>);</span><br><span class="line">        two.add(<span class="string">"赵丽颖"</span>);</span><br><span class="line">        two.add(<span class="string">"张天爱"</span>);</span><br><span class="line">        two.add(<span class="string">"张二狗"</span>);</span><br><span class="line">        two.add(<span class="string">"张三"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一支队伍</span></span><br><span class="line">        Stream&lt;String&gt; streamOne = one.stream().filter(s -&gt; s.length() == <span class="number">3</span>).limit(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//第二支队伍</span></span><br><span class="line">        Stream&lt;String&gt; streamTwo = two.stream().filter(s -&gt; s.startsWith(<span class="string">"张"</span>)).skip(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//合并流</span></span><br><span class="line">        Stream.concat(streamOne,streamTwo).map(name -&gt; <span class="keyword">new</span> Person(name)).forEach(person -&gt; System.out.println(person));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="6-7-收集Stream结果"><a href="#6-7-收集Stream结果" class="headerlink" title="6.7 收集Stream结果"></a>6.7 收集Stream结果</h3><h4 id="6-7-1-收集到集合"><a href="#6-7-1-收集到集合" class="headerlink" title="6.7.1 收集到集合"></a>6.7.1 收集到集合</h4><p>将流中的元素收集到集合[也就是将流转成集合]</p>
<p>在Stream中有一个方法叫做collect，该方法可以将流中的元素收集到集合</p>
<ul>
<li><code>R collect(Collector collector)</code>：该方法可以将流中的元素收集到集合。参数collector表示收集到哪种集合</li>
</ul>
<blockquote>
<p>方法的参数类型Collector是一个接口，如果要用需要使用实现类，这个实现了不是由我们创建的，而是通过Collectors工具类获取的。</p>
<p>Collectors获取Collector对象的方法:</p>
<ul>
<li><code>static Collector toList()</code>:获取到的Collector对象表示将数据收集到List集合中</li>
<li><code>static Collector toSet()</code>:获取到的Collector对象表示将数据收集到Set集合中</li>
</ul>
</blockquote>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01StreamToCollection</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//将流中元素收集到List集合中</span></span><br><span class="line">        Stream&lt;String&gt; stream = Stream.of(<span class="string">"aa"</span>,<span class="string">"bb"</span>,<span class="string">"cc"</span>,<span class="string">"dd"</span>,<span class="string">"ee"</span>);</span><br><span class="line">        List&lt;String&gt; list = stream.collect(Collectors.toList());</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将流中数据收集到Set集合中</span></span><br><span class="line">        Stream&lt;String&gt; stream1 = Stream.of(<span class="string">"aa"</span>,<span class="string">"bb"</span>,<span class="string">"cc"</span>,<span class="string">"dd"</span>,<span class="string">"ee"</span>,<span class="string">"ff"</span>);</span><br><span class="line">        Set&lt;String&gt; set = stream1.collect(Collectors.toSet());</span><br><span class="line">        System.out.println(set);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="6-7-2-收集到数组"><a href="#6-7-2-收集到数组" class="headerlink" title="6.7.2 收集到数组"></a>6.7.2 收集到数组</h4><p>在Stream中有一个方法叫toArray，可以将流中数据收集到数组中[转成数组]</p>
<ul>
<li>Object[] toArray():将流转成数组</li>
</ul>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02StreamToArray</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Stream&lt;String&gt; stream = Stream.of(<span class="string">"aa"</span>,<span class="string">"bb"</span>,<span class="string">"cc"</span>,<span class="string">"dd"</span>,<span class="string">"ee"</span>);</span><br><span class="line">        <span class="comment">//将流转成数组</span></span><br><span class="line">        Object[] objArray = stream.toArray();</span><br><span class="line">        System.out.println(Arrays.toString(objArray));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>学习</tag>
        <tag>多线程</tag>
        <tag>线程状态</tag>
        <tag>等待与唤醒</tag>
        <tag>Lambda</tag>
        <tag>Stream</tag>
      </tags>
  </entry>
  <entry>
    <title>File类、递归、IO、字节流、字符流</title>
    <url>/2020/08/04/File%E7%B1%BB%E3%80%81%E9%80%92%E5%BD%92%E3%80%81IO%E3%80%81%E5%AD%97%E8%8A%82%E6%B5%81%E3%80%81%E5%AD%97%E7%AC%A6%E6%B5%81/</url>
    <content><![CDATA[<h2 id="一、File类"><a href="#一、File类" class="headerlink" title="一、File类"></a>一、File类</h2><p><code>java.util.File</code>类是文件和目录路径名的抽象表示，<strong>主要用于文件和目录的创建、查找和删除等操作</strong>。</p>
<h3 id="1-1-构造方法"><a href="#1-1-构造方法" class="headerlink" title="1.1 构造方法"></a>1.1 构造方法</h3><p>File类的构造方法</p>
<ul>
<li><code>File(String pathname)</code>：根据文件或文件夹得路径创建File对象</li>
<li><code>File(String parent, String child)</code>：根据父路径和子路径创建一个File对象。<ul>
<li>文件的路径：E:\file_test\aa.txt</li>
<li>父路径：E:\file_test</li>
<li>子路径：aa.txt</li>
</ul>
</li>
<li><code>File(File parent, String child)</code>：根据父路径和子路径创建一个File对象</li>
</ul>
<blockquote>
<p>小贴士：</p>
<ul>
<li><p>File可以表示计算机中的文件或文件夹</p>
</li>
<li><p>File表示的文件或文件夹可以存在，也可以不存在。</p>
</li>
</ul>
</blockquote>
<a id="more"></a>

<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02FileConstructor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// File(String pathname)：根据文件或文件夹得路径创建File对象</span></span><br><span class="line">        <span class="comment">//在Java中\是特殊字符，叫做转义字符，表示将后面的字符改变意思。</span></span><br><span class="line">        <span class="comment">//如果想要表示普通的\,需要写两个\\</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"E:\\file_test\\aa.txt"</span>);</span><br><span class="line">        System.out.println(file);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//File(String parent, String child):根据父路径和子路径创建一个File对象。</span></span><br><span class="line">        File file2 = <span class="keyword">new</span> File(<span class="string">"E:\\file_test"</span>,<span class="string">"aa.txt"</span>);</span><br><span class="line">        System.out.println(file2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//File(File parent, String child)：根据父路径和子路径创建一个File对象</span></span><br><span class="line">        File parent = <span class="keyword">new</span> File(<span class="string">"E:\\file_test"</span>);</span><br><span class="line">        File file3 = <span class="keyword">new</span> File(parent,<span class="string">"aa.txt"</span>);</span><br><span class="line">        System.out.println(file3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小贴士：</p>
<ul>
<li>直接输出对象名相当于调用对象的<code>getPath()</code>方法</li>
</ul>
</blockquote>
<h3 id="1-2-常用方法"><a href="#1-2-常用方法" class="headerlink" title="1.2 常用方法"></a>1.2 常用方法</h3><h4 id="1-2-1-获取方法"><a href="#1-2-1-获取方法" class="headerlink" title="1.2.1 获取方法"></a>1.2.1 获取方法</h4><ul>
<li><code>String getAbsolutePath()</code>：获取File对象表示的文件或文件夹的<strong>绝对路径</strong></li>
<li><code>String getPath()</code>：获取对象的路径名称，以字符串形式返回（创建File对象传递的路径字符串是什么，获取到的就是什么）</li>
<li><code>String getName()</code>：获取文件或文件夹的名字</li>
<li><code>long length()</code>：获取文件字节数大小。<strong>只能对文件使用，如果对文件夹使用，得到的是一个不确定的数字</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01GetMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        method4();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * long Length():获取文件字节数大小。</span></span><br><span class="line"><span class="comment">     * 如果此路径名表示一个目录，则返回值是不确定的。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//File file = new File("E:\\file_test");</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"E:\\file_test\\aa.txt"</span>);</span><br><span class="line">        System.out.println(file.length());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * String getName()：获取文件或文件夹的名字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"E:\\\\file_test\\\\aa.txt"</span>);</span><br><span class="line">        System.out.println(file.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * String getPath()获取路径</span></span><br><span class="line"><span class="comment">     * 如果创建File对象写的相对路径，那么获取的就是相对路径</span></span><br><span class="line"><span class="comment">     * 写的绝对路径，获取的就是绝对路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//File file = new File("E:\\file_test\\aa.txt");</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"aa.txt"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(file.getPath());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * String getAbsolutePath()：获取File对象表示的文件或文件夹的绝对路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//File file = new File("E:\\file_test\\aa.txt");</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"aa.txt"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(file.getAbsolutePath());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h5 id="绝对路径和相对路径"><a href="#绝对路径和相对路径" class="headerlink" title="绝对路径和相对路径"></a>绝对路径和相对路径</h5><ul>
<li><strong>绝对路径</strong>：是一个完整的路径，从盘符开始的路径。例如：D：\aa.txt</li>
<li><strong>相对路径</strong>：是一个简单的路径，不是从盘符开始的，在idea中，相对路径相对的是当前项目，指的是当前项目下的东西。</li>
</ul>
<blockquote>
<p><strong>如果要区分相对路径和绝对路径，只看是不是从盘符开始就可以。</strong></p>
</blockquote>
<h4 id="1-2-2-判断功能的方法"><a href="#1-2-2-判断功能的方法" class="headerlink" title="1.2.2 判断功能的方法"></a>1.2.2 判断功能的方法</h4><ul>
<li><code>public boolean exists()</code>：判断File表示的文件或文件夹是否存在</li>
<li><code>public boolean isDirectory()</code>：判断是否是文件夹</li>
<li><code>public boolean isFile()</code>：判断是否为文件</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02FileMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"E:\\file_test\\aa.txt"</span>);</span><br><span class="line">        <span class="comment">//boolean isDirectory()：判断是否是文件夹</span></span><br><span class="line">        System.out.println(<span class="string">"是否是文件夹："</span> + file.isDirectory());</span><br><span class="line">        <span class="comment">//boolean isFile()：判断是否是一个文件</span></span><br><span class="line">        System.out.println(<span class="string">"是否是文件："</span> + file.isFile());</span><br><span class="line">        <span class="comment">//boolean exists()：判断File表示的文件或文件夹是否存在</span></span><br><span class="line">        System.out.println(<span class="string">"是否存在："</span> + file.exists());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="1-2-3-创建、删除功能的方法"><a href="#1-2-3-创建、删除功能的方法" class="headerlink" title="1.2.3 创建、删除功能的方法"></a>1.2.3 创建、删除功能的方法</h4><ul>
<li><p><code>public boolean createNewFile()</code>：创建文件，如果已经存在返回false</p>
</li>
<li><p><code>public boolean delete()</code>：删除文件或目录</p>
</li>
<li><p><code>public boolean mkdir()</code>：创建文件夹，如果文件夹已经存在，返回false</p>
</li>
<li><p><code>public boolean mkdirs()</code>：创建文件夹，如果文件夹已经存在，那么创建失败【如果上级目录不存在，同时回创建上级目录】</p>
</li>
</ul>
<p><strong>创建方法：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03FileMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        method3();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * boolean mkdirs():创建文件夹，如果文件夹已经存在，那么创建失败【如果上级目录不存在，同时回创建上级目录】</span></span><br><span class="line"><span class="comment">     * 使用mkdirs创建文件夹，可以创建多级目录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"E:\\file_test\\dd\\ee"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> flag = file.mkdirs();</span><br><span class="line">        System.out.println(flag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * boolean mkdir()：创建文件夹，如果文件夹已经存在，返回false</span></span><br><span class="line"><span class="comment">     * 如果创建文件夹，上级目录不存在，那么会创建失败【不会报错】</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"E:\\file_test\\bb"</span>);</span><br><span class="line">        <span class="comment">//创建文件夹</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = file.mkdir();</span><br><span class="line">        System.out.println(flag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * boolean createNewFile():创建文件，如果已经存在返回false</span></span><br><span class="line"><span class="comment">     * 如果创建文件，上级目录不存在。那么会报错</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"E:\\file_test2\\aa.txt"</span>);</span><br><span class="line">        <span class="comment">//创建文件</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = file.createNewFile();</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        System.out.println(flag);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>删除方法：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04FileMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"E:\\file_test\\dd"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> flag = file.delete();</span><br><span class="line">        System.out.println(flag);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<ul>
<li>delete方法删除的文件夹必须是一个空文件夹，如果里面有东西是无法删除的。</li>
<li>delete方法删除的内容不走回收站</li>
</ul>
</blockquote>
<h3 id="1-3-目录的遍历"><a href="#1-3-目录的遍历" class="headerlink" title="1.3 目录的遍历"></a>1.3 目录的遍历</h3><ul>
<li><code>public String[] list()</code>：获取指定目录下所有文件和文件夹的名字，放入到字符串数组中返回。</li>
<li><code>public File[] listFiles()</code>：获取指定目录下所有文件和文件夹并放入File数组中返回。</li>
</ul>
<blockquote>
<p>注意：</p>
<ul>
<li>如果<strong>File对象</strong>表示的是一个<strong>文件</strong>，那么调用<code>listFiles</code>得到的是<strong>null</strong>值</li>
<li>如果<strong>File的对象</strong>表示的<strong>目录不存在</strong>，调用<code>listFiles</code>得到的也是<strong>null</strong>值</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05ListMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        method2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"E:\\file_test\\bb"</span>);</span><br><span class="line"></span><br><span class="line">        File[] files = file.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File file1 : files) &#123;</span><br><span class="line">            System.out.println(file1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//System.out.println(files);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"E:\\file_test"</span>);</span><br><span class="line"></span><br><span class="line">        File[] files = file.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File file1 : files) &#123;</span><br><span class="line">            System.out.println(file1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"E:\\file_test"</span>);</span><br><span class="line">        <span class="comment">//调用list方法，获取file_test目录下所有的文件和文件夹的名字</span></span><br><span class="line">        String[] fileName = file.list();</span><br><span class="line">        <span class="keyword">for</span> (String name : fileName) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="二、递归"><a href="#二、递归" class="headerlink" title="二、递归"></a>二、递归</h2><p><strong>递归：指在当前方法内调用自己的这种现象。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">	method();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<ul>
<li>递归必须要有出口【结束条件】</li>
<li>递归次数不能太多【否则会栈内存溢出】</li>
</ul>
<p>使用场景：</p>
<ul>
<li>在不确定层级的场景，可以使用递归【比如遍历文件夹，比如遍历菜单】</li>
</ul>
</blockquote>
<p>代码示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01DiDui</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//method();</span></span><br><span class="line">        printNum(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 结束条件为当number为10000时，结束方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> number</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printNum</span><span class="params">(<span class="keyword">int</span> number)</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断number是10000，结束方法</span></span><br><span class="line">        <span class="keyword">if</span> (number == <span class="number">10000</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(number);</span><br><span class="line">        number++;</span><br><span class="line">        printNum(number);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个方法会报错</span></span><br><span class="line"><span class="comment">     * 因为没有结束条件，发生栈内存溢出</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"method方法执行了！"</span>);</span><br><span class="line">        method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-1-递归练习"><a href="#2-1-递归练习" class="headerlink" title="2.1 递归练习"></a>2.1 递归练习</h3><h4 id="2-1-1-求阶乘"><a href="#2-1-1-求阶乘" class="headerlink" title="2.1.1 求阶乘"></a>2.1.1 求阶乘</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用递归求阶乘</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 求阶乘的公式：</span></span><br><span class="line"><span class="comment"> *      5! = 5 * 4 * 3 * 2 * 1</span></span><br><span class="line"><span class="comment"> * 递归的思路：</span></span><br><span class="line"><span class="comment"> *      5! = 5 * 4!</span></span><br><span class="line"><span class="comment"> *      4! = 4 * 3!</span></span><br><span class="line"><span class="comment"> *      。。。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02DiGuiTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = getFactorial(<span class="number">10</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递归求阶乘</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getFactorial</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num * getFactorial(num - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2-1-2-递归遍历目录"><a href="#2-1-2-递归遍历目录" class="headerlink" title="2.1.2 递归遍历目录"></a>2.1.2 递归遍历目录</h4><p>使用递归遍历输出指定文件夹下所有的文件夹和文件名</p>
<p>步骤：</p>
<ul>
<li>定义一个方法，该方法遍历指定的文件夹</li>
<li>调用<code>listFiles()</code>方法，获取该文件夹下所有的文件和文件夹放入到File数组中保存</li>
<li>遍历File数组，拿到里面的每一个文件夹</li>
<li>判断。<ul>
<li>如果遍历到的是文件夹，那么就应该继续遍历该文件夹，输出该文件下下的所有文件的名字</li>
<li>如果遍历到的是文件，那么直接获取文件名输出</li>
</ul>
</li>
</ul>
<p><strong>代码示例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03PrintDirTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        File dir = <span class="keyword">new</span> File(<span class="string">"E:\\file_test"</span>);</span><br><span class="line">        printDir(dir);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遍历指定文件下所有内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dir 文件目录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printDir</span><span class="params">(File dir)</span></span>&#123;</span><br><span class="line">        <span class="comment">//调用方法，获取该文件夹下所有的文件和文件夹放入到File数组中保存</span></span><br><span class="line">        File[] files = dir.listFiles();</span><br><span class="line">        <span class="comment">//遍历File数组，拿到里面的每一个文件或文件夹</span></span><br><span class="line">        <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">            <span class="comment">//判断如果是否是文件夹</span></span><br><span class="line">            <span class="keyword">if</span> (file.isDirectory())&#123;</span><br><span class="line">                <span class="comment">//是，进入文件夹继续遍历该文件夹——递归</span></span><br><span class="line">                System.out.println(file);</span><br><span class="line">                printDir(file);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//不是，输出文件名</span></span><br><span class="line">                System.out.println(file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2-1-3-递归遍历目录下的-java-文件"><a href="#2-1-3-递归遍历目录下的-java-文件" class="headerlink" title="2.1.3 递归遍历目录下的[.java]文件"></a>2.1.3 递归遍历目录下的[.java]文件</h4><p>在上面的的遍历过程中多加一次判断，当判断是文件时，在判断该文件是否以<code>.java</code>结尾，是则输出。</p>
<p><strong>代码示例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03PrintJavaFile</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File dir = <span class="keyword">new</span> File(<span class="string">"E:\\file_test"</span>);</span><br><span class="line">        printDir(dir);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遍历指定文件下所有的.java文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dir 文件目录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printDir</span><span class="params">(File dir)</span></span>&#123;</span><br><span class="line">        <span class="comment">//调用方法，获取该文件夹下所有的文件和文件夹放入到File数组中保存</span></span><br><span class="line">        File[] files = dir.listFiles();</span><br><span class="line">        <span class="comment">//遍历File数组，拿到里面的每一个文件或文件夹</span></span><br><span class="line">        <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">            <span class="comment">//判断如果是否是文件夹</span></span><br><span class="line">            <span class="keyword">if</span> (file.isDirectory())&#123;</span><br><span class="line">                <span class="comment">//是，进入文件夹继续遍历该文件夹——递归</span></span><br><span class="line">                printDir(file);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//不是，判断是不是.java结尾</span></span><br><span class="line">                <span class="keyword">if</span> (file.getName().endsWith(<span class="string">".java"</span>)) &#123;</span><br><span class="line">                    <span class="comment">//是，输出文件</span></span><br><span class="line">                    System.out.println(file);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="三、IO概述"><a href="#三、IO概述" class="headerlink" title="三、IO概述"></a>三、IO概述</h2><p>Java中的IO操作主要使用<code>java.io</code>包下的内容，进行输入、输出操作，<strong>输入</strong>也叫做<strong>读取</strong>数据，<strong>输出</strong>也叫做<strong>写出</strong>数据。</p>
<h3 id="3-1-IO的分类"><a href="#3-1-IO的分类" class="headerlink" title="3.1 IO的分类"></a>3.1 IO的分类</h3><p>根据数据的流向分为：<strong>输入流</strong>和<strong>输出流</strong>。</p>
<ul>
<li>输入流：把数据从其他设备中读取到内存中的流</li>
<li>输出流：把数据从内存写出到其他设备上的流</li>
</ul>
<p>根据数据的类型分为：<strong>字节流</strong>和<strong>字符流</strong></p>
<ul>
<li><p>字节流：以字节为单位，进行数据的读写</p>
</li>
<li><p>字符流：以字符为单位，进行数据的读写</p>
</li>
</ul>
<h3 id="3-2-IO的流向说明"><a href="#3-2-IO的流向说明" class="headerlink" title="3.2 IO的流向说明"></a>3.2 IO的流向说明</h3><p><strong>内存  <code>---输出---&gt;</code>  硬盘</strong></p>
<p><strong>硬盘  <code>---输入---&gt;</code>  内存</strong></p>
<h3 id="3-3-顶级分类"><a href="#3-3-顶级分类" class="headerlink" title="3.3 顶级分类"></a>3.3 顶级分类</h3><table>
<thead>
<tr>
<th></th>
<th>输入流</th>
<th>输出流</th>
</tr>
</thead>
<tbody><tr>
<td>字节流</td>
<td>字节输入流：<code>InputStream</code></td>
<td>字节输出流：<code>OutputStream</code></td>
</tr>
<tr>
<td>字符流</td>
<td>字符输入流：<code>Reader</code></td>
<td>字符输出流：<code>Writer</code></td>
</tr>
</tbody></table>
<h2 id="四、字节流"><a href="#四、字节流" class="headerlink" title="四、字节流"></a>四、字节流</h2><h3 id="4-1-字节输出流【OutputStream】"><a href="#4-1-字节输出流【OutputStream】" class="headerlink" title="4.1 字节输出流【OutputStream】"></a>4.1 字节输出流【OutputStream】</h3><p><code>java.io.OutputStream</code>抽象类是表示输出字节流的所有类的超类，将指定的字节(以字节为单位)信息写出到目的地。常用的子类为<code>FileOutputStream</code></p>
<h3 id="4-2-FileOutputStream类"><a href="#4-2-FileOutputStream类" class="headerlink" title="4.2 FileOutputStream类"></a>4.2 FileOutputStream类</h3><p><code>java.io.FileOutputStream</code>类是字节输出流，用于将数据写出到文件。</p>
<p>使用步骤：</p>
<ul>
<li>创建字节输出流对象，并绑定一个目的地文件</li>
<li>向文件中写数据</li>
<li>关闭流</li>
</ul>
<h4 id="4-2-1-构造方法"><a href="#4-2-1-构造方法" class="headerlink" title="4.2.1 构造方法"></a>4.2.1 构造方法</h4><ul>
<li><code>FileInputStream(File file)</code>：参数要传递一个File类型的对象，表示向该文件中写数据，</li>
<li><code>FileOutputStream(String name)</code>：参数需要传递一个字符串类型的文件路径，表示向该文件中写数据</li>
</ul>
<h4 id="4-2-2-其他方法"><a href="#4-2-2-其他方法" class="headerlink" title="4.2.2 其他方法"></a>4.2.2 其他方法</h4><ul>
<li><code>public abstract void write(int b)</code>：向文件中写一个字节</li>
<li><code>public void write(byte[] b)</code>：向文件中写一个字节数组的内容</li>
<li><code>public void write(byte[] b, int off, int len)</code>：向文件中写入字节数据的一部分，参数off表示从哪个位置开始写，len表示写多少个字节。</li>
<li><code>public void close()</code>：关闭流</li>
</ul>
<blockquote>
<p>使用流操作完成后，一定要调用<code>close()</code>方法关闭流。</p>
</blockquote>
<h4 id="4-2-3-写出字节数据"><a href="#4-2-3-写出字节数据" class="headerlink" title="4.2.3 写出字节数据"></a>4.2.3 写出字节数据</h4><p>写一个字节：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01OutputStream</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 下面代码做了哪些事情</span></span><br><span class="line"><span class="comment">         * 1.创建字节输出流对象</span></span><br><span class="line"><span class="comment">         * 2.调用操作系统的资源，创建文件cc.txt。如果该文件已经存在，就会覆盖该文件</span></span><br><span class="line"><span class="comment">         * 3.将流和文件进行绑定，以后通过该流，操作的就都是这个文件了。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        OutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="string">"E:\\file_test\\cc.txt"</span>);</span><br><span class="line"></span><br><span class="line">        os.write(<span class="number">97</span>);<span class="comment">//查询ASCII表，写入对应的字符</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果不关闭流，并且Java程序不结束，该文件会一直处于被占用的状态</span></span><br><span class="line">        <span class="comment">//关闭流(可以解决文件被占用的状态)</span></span><br><span class="line">        os.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>写字节数组：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02OutputStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        OutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="string">"xxx\\a.txt"</span>);</span><br><span class="line"></span><br><span class="line">        String s = <span class="string">"你好啊"</span>;</span><br><span class="line">        <span class="comment">//通过字符串转成一个byte数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = s.getBytes();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] arr = &#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>,<span class="number">100</span>,<span class="number">101</span>&#125;;</span><br><span class="line">        <span class="comment">//void write(byte[] b)：向文件中写一个字节数组的内容</span></span><br><span class="line">        <span class="comment">// os.write(bytes);</span></span><br><span class="line">        <span class="comment">//void write(byte[], int off, int len)：向文件中写入字节数据的一部分，</span></span><br><span class="line">        os.write(arr,<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//关闭流</span></span><br><span class="line">        os.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小贴士：</p>
<ul>
<li>ASCII码表上的字符，在计算机中都是占一个字节的。</li>
<li>在计算机中，文字是占多个字节的。<ul>
<li>使用GBK编码：一个中文占2字节</li>
<li>使用UTF-8编码：一个中文占3字节</li>
</ul>
</li>
</ul>
</blockquote>
<h4 id="4-2-4-追加写"><a href="#4-2-4-追加写" class="headerlink" title="4.2.4 追加写"></a>4.2.4 追加写</h4><p>FileOutputStream还有两个构造方法</p>
<ul>
<li><code>FileOutputStream(File file, boolean append)</code>：第二个参数append表示是否续写， true为续写,</li>
<li><code>FileOutputStream(String name, boolean append)</code>：第二个参数append表示是否续写， true为续写。</li>
</ul>
<blockquote>
<p>这两个构造方法都需要一个boolean类型的参数，传递<code>true</code>表示在原来的基础上追加写数据。</p>
<p>使用这两个构造方法创建文件输出流对象，就可以指定是否追加写数据。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03AppendWrite</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建流时传递第二个参数，类型为boolean，true为追加写，flase为创建一个新文件覆盖源文件</span></span><br><span class="line">        OutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="string">"xxx\\b.txt"</span>,<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//向文件中追加写写一句诗</span></span><br><span class="line">        os.write(<span class="string">"床前明月光"</span>.getBytes());</span><br><span class="line">        os.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-4-写换行"><a href="#4-2-4-写换行" class="headerlink" title="4.2.4 写换行"></a>4.2.4 写换行</h4><blockquote>
<p>回车符<code>\r</code>和换行符<code>\n</code>：</p>
<ul>
<li>回车符：回到一行的开头</li>
<li>换行符：下一行</li>
</ul>
<p>不同系统中的换行：</p>
<ul>
<li>Windows：每行的结尾是<strong>回车+换行</strong>，即<code>\r\n</code></li>
<li>Unix：每行结尾只有<strong>换行</strong>，即<code>\n</code></li>
<li>Mac：每行结尾是<strong>回车</strong>，即<code>\r</code>。从MacOS X开始于Unix统一。</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04WriteLine</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        OutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="string">"xxx\\c.txt"</span>);</span><br><span class="line"></span><br><span class="line">        os.write(<span class="string">"啦啦啦"</span>.getBytes());</span><br><span class="line">        <span class="comment">//写换行</span></span><br><span class="line">        os.write(<span class="string">"\r\n"</span>.getBytes());</span><br><span class="line">        os.write(<span class="string">"哈哈哈"</span>.getBytes());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-3-字节输入流【InputStream】"><a href="#4-3-字节输入流【InputStream】" class="headerlink" title="4.3 字节输入流【InputStream】"></a>4.3 字节输入流【InputStream】</h3><p><code>java.io.InputStream</code>抽象类是表示字节输入流的所有类的超类，可以读取字节信息到内存中。其中定义了字节输入流的一些共性方法：</p>
<ul>
<li><code>public void close()</code>：关闭流</li>
<li><code>int read()</code>：从文件中读取一个字节并返回，如果文件已经读取结束了，返回的是-1</li>
<li><code>int read(byte[] b)</code>：将数据读取到字节数组中，返回值是读取到的字节个数，如果文件已经读取结束了，返回-1。</li>
</ul>
<h3 id="4-4-FileInputStream类"><a href="#4-4-FileInputStream类" class="headerlink" title="4.4 FileInputStream类"></a>4.4 FileInputStream类</h3><p><code>java.io.FileInputStream</code>类是文件输入流，从文件中读取字节。</p>
<h4 id="4-4-1-构造方法"><a href="#4-4-1-构造方法" class="headerlink" title="4.4.1 构造方法"></a>4.4.1 构造方法</h4><p><code>FileInputStream(File file)</code>：参数需要传递一个File类型的文件，表示要从该文件中读取数据。</p>
<p><code>FileInputStream(String name)</code>：参数需要传递一个字符串类型的文件路径，表示要从该文件中读取数据。</p>
<blockquote>
<p>当你创建一个流对象时，必须传入一个文件路径。该路径下，如果没有该文件,会抛出<code>FileNotFoundException</code>(文件找不到异常)</p>
</blockquote>
<h4 id="4-4-2-读取字节数据"><a href="#4-4-2-读取字节数据" class="headerlink" title="4.4.2 读取字节数据"></a>4.4.2 读取字节数据</h4><p>读取字节：<code>read()</code>方法，每次可以<strong>读取一个</strong>字节的数据，提升为<strong>int类型</strong>，<strong>读</strong>取到文件<strong>末尾</strong>，返回<strong>-1</strong>，代码使用演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01InputStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//如果指定的文件不存在，会报错FileNotFoundException</span></span><br><span class="line">        InputStream is = <span class="keyword">new</span> FileInputStream(<span class="string">"xxx\\source01.txt"</span>);</span><br><span class="line">        <span class="comment">//source01.txt内容&#123;abc&#125;</span></span><br><span class="line">        <span class="comment">/*int b = is.read();</span></span><br><span class="line"><span class="comment">        System.out.println(b); //97</span></span><br><span class="line"><span class="comment">        b = is.read();</span></span><br><span class="line"><span class="comment">        System.out.println(b); //98</span></span><br><span class="line"><span class="comment">        b = is.read();</span></span><br><span class="line"><span class="comment">        System.out.println(b); //99</span></span><br><span class="line"><span class="comment">        b = is.read();</span></span><br><span class="line"><span class="comment">        System.out.println(b); //-1*/</span></span><br><span class="line">        <span class="comment">//定义变量接收每次读取到的字节</span></span><br><span class="line">        <span class="keyword">int</span> i ;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1.通过输入流调用read方法读取了一个字节</span></span><br><span class="line"><span class="comment">         * 2.将读取到的字节赋值给i</span></span><br><span class="line"><span class="comment">         * 3.判断i是否不等于-1，如果i不是-1，表示读取到了数据，进行处理</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">while</span> ((i = is.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        is.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>中文是占多个字节的，不能使用字节输入流一次读取一个字节。</p>
<p>字节流读取中文会有乱码问题，要避免。</p>
</blockquote>
<p><code>int read(byte[] b)</code>:将数据读取到字节数组中，返回值是读取到的字节个数，如果文件已经读取结束了，返回-1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02InputStream</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="comment">//source02文件内容【abcde】</span></span><br><span class="line">        InputStream is = <span class="keyword">new</span> FileInputStream(<span class="string">"xxx\\source02.txt"</span>);</span><br><span class="line">        <span class="comment">//循环改进</span></span><br><span class="line">        <span class="keyword">byte</span>[] bArr = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 循环读取</span></span><br><span class="line"><span class="comment">         * 1.通过流将数据读取到字节数组中</span></span><br><span class="line"><span class="comment">         * 2.将读取到的字节个数返回，赋值给len</span></span><br><span class="line"><span class="comment">         * 3.判断en是不是-1，不是则进入循序，进行处理</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">while</span> ((len = is.read(bArr)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(bArr,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*// int read(byte[] b):将数据读取到字节数组中，返回值是读取到的字节个数</span></span><br><span class="line"><span class="comment">        byte[] bArr = new byte[2];</span></span><br><span class="line"><span class="comment">        int count = is.read(bArr);</span></span><br><span class="line"><span class="comment">        //输出字节数组</span></span><br><span class="line"><span class="comment">        System.out.println(Arrays.toString(bArr)); //[97, 98]</span></span><br><span class="line"><span class="comment">        //将字节数组转成字符串——读到几个数据转几个</span></span><br><span class="line"><span class="comment">        System.out.println(new String(bArr,0,count));</span></span><br><span class="line"><span class="comment">        //输出字节个数</span></span><br><span class="line"><span class="comment">        System.out.println(count); //2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        count = is.read(bArr);</span></span><br><span class="line"><span class="comment">        //输出字节数组</span></span><br><span class="line"><span class="comment">        System.out.println(Arrays.toString(bArr)); //[99, 100]</span></span><br><span class="line"><span class="comment">        //将字节数组转成字符串——读到几个数据转几个</span></span><br><span class="line"><span class="comment">        System.out.println(new String(bArr,0,count));</span></span><br><span class="line"><span class="comment">        //输出字节个数</span></span><br><span class="line"><span class="comment">        System.out.println(count); //2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        count = is.read(bArr);</span></span><br><span class="line"><span class="comment">        //输出字节数组</span></span><br><span class="line"><span class="comment">        System.out.println(Arrays.toString(bArr)); //[101, 100]</span></span><br><span class="line"><span class="comment">        //将字节数组转成字符串——读到几个数据转几个</span></span><br><span class="line"><span class="comment">        System.out.println(new String(bArr,0,count));</span></span><br><span class="line"><span class="comment">        //输出字节个数</span></span><br><span class="line"><span class="comment">        System.out.println(count); //1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        count = is.read(bArr);</span></span><br><span class="line"><span class="comment">        //输出字节数组</span></span><br><span class="line"><span class="comment">        System.out.println(Arrays.toString(bArr)); //[101, 100]</span></span><br><span class="line"><span class="comment">        //将字节数组转成字符串——读到几个数据转几个</span></span><br><span class="line"><span class="comment">        System.out.println(new String(bArr,0,count));</span></span><br><span class="line"><span class="comment">        //输出字节个数</span></span><br><span class="line"><span class="comment">        System.out.println(count); //-1*/</span></span><br><span class="line"></span><br><span class="line">        is.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在上面代码读取的过程中，第三次读取时到末尾，字节数组出现[101,100]的情况，是因为数组中保存着上一次读取到的内容，字节数组的容量为<code>2</code>，<code>source02.txt</code>的内容为<code>abcde</code>,而第三次读取时只能读取到一个e(101)，覆盖掉之前数组的第一个元素c(99),之后读取就没有数据了，所以d(100)就保存了下来。在继续读取也不会有内容，byte数组的内容就不会变了。</p>
</blockquote>
<h3 id="4-6-字节流练习：复制图片"><a href="#4-6-字节流练习：复制图片" class="headerlink" title="4.6 字节流练习：复制图片"></a>4.6 字节流练习：复制图片</h3><p>文件复制的本质就是文件的读写，从源文件中读取字节，然后写到目的地文件。</p>
<p>步骤：</p>
<ul>
<li>创建字节输入流，用来读取</li>
<li>创建字节输出流，用来写</li>
<li>使用输入流读取数据，每一读取一个字节数据，读取到的数据写到目的地文件中</li>
<li>释放资源</li>
</ul>
<p>代码示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03Copy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建字节输入流，用来读取，参数传递要复制的文件路径</span></span><br><span class="line">        InputStream is = <span class="keyword">new</span> FileInputStream(<span class="string">"xxx\\1.png"</span>);</span><br><span class="line">        <span class="comment">//2.创建字节输出流，用来写,参数传递目的路径</span></span><br><span class="line">        OutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="string">"xxx\\1_new.png"</span>);</span><br><span class="line">        <span class="comment">//3.使用输入流读取数据，每一读取一个字节数据，读取到的数据写到目的地文件中</span></span><br><span class="line">        <span class="comment">//3.1创建字节数组【数组的藏毒一般是1024的整数倍】</span></span><br><span class="line">        <span class="keyword">byte</span>[] bArr = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="comment">//3.2创建变量len，接收读取到的字节个数</span></span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="comment">//开始循环读取</span></span><br><span class="line">        <span class="keyword">while</span> ((len = is.read(bArr)) !=-<span class="number">1</span>)&#123;</span><br><span class="line">            os.write(bArr,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4.释放资源</span></span><br><span class="line">        os.close();</span><br><span class="line">        is.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>流的关闭原则：先开后关，后开先关。</p>
</blockquote>
<h2 id="五、字符流"><a href="#五、字符流" class="headerlink" title="五、字符流"></a>五、字符流</h2><p>当使用字节流读取文本文件时，可能会有一个小问题。就是遇到中文字符时，可能不会显示完整的字符，那是因为一个中文字符可能占用多个字节存储。所以Java提供一些字符流类，以字符为单位读写数据，专门用于处理文本文件。</p>
<h3 id="5-1-字符输入流【Reader】"><a href="#5-1-字符输入流【Reader】" class="headerlink" title="5.1 字符输入流【Reader】"></a>5.1 字符输入流【Reader】</h3><p><code>java.io.Reader</code>抽象类是表示用于读取字符流的所有类的超类，可以读取字符信息到内存中。它定义了字符输入流的基本共性功能方法：</p>
<ul>
<li><code>public void close()</code>：关闭流。</li>
<li><code>public int read()</code>：读取一个字符并返回，如果读取到末尾了，返回-1</li>
<li><code>public int read(char[] cbuf)</code>：将数据读取到字符数组，并返回读取到的字符个数，读取到末尾返回-1</li>
</ul>
<h3 id="5-2-FileReader类"><a href="#5-2-FileReader类" class="headerlink" title="5.2 FileReader类"></a>5.2 FileReader类</h3><p><code>java.io.FileReader</code>类是读取字符文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。</p>
<h4 id="5-2-1-构造方法"><a href="#5-2-1-构造方法" class="headerlink" title="5.2.1 构造方法"></a>5.2.1 构造方法</h4><ul>
<li><code>FileReader(File file)</code>：参数需要传递File类型的文件对象，表示从该文件中读取数据</li>
<li><code>FileReader(String fileName)</code>：参数需要穿覅字符串类型的文件路径，表示从该文件中读取数据</li>
</ul>
<h4 id="5-2-2-读取字符数据"><a href="#5-2-2-读取字符数据" class="headerlink" title="5.2.2 读取字符数据"></a>5.2.2 读取字符数据</h4><p>读取字符：<code>read()</code>方法，每次可以读取一个字符的数据，提升为int类型，读取到文件末尾，返回-1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Reader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Reader r = <span class="keyword">new</span> FileReader(<span class="string">"xxx\\source03.txt"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((i = r.read())!= -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println((<span class="keyword">char</span>)i);</span><br><span class="line">        &#125;</span><br><span class="line">        r.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用字符数组读取：<code>read(char[] cbuf)</code>，每次读取多个字符到数组中，返回读取到的有效字符个数，读取到末尾时，返回-1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Reader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Reader r = <span class="keyword">new</span> FileReader(<span class="string">"day13_file&amp;io\\source03.txt"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] c = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = r.read(c)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(c,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-3-字符输出流【Writer】"><a href="#5-3-字符输出流【Writer】" class="headerlink" title="5.3 字符输出流【Writer】"></a>5.3 字符输出流【Writer】</h3><p><code>java.io.Writer</code>抽象类是表示用于写出字符流的所有类的超类，将指定的字符信息写出到目的地。它定义了字节输出流的基本共性功能方法。</p>
<ul>
<li><code>public abstract void close()</code>：关闭此输出流并释放与此流相关联的任何系统资源。</li>
<li><code>public abstract void flush()</code>：刷新此输出流并强制任何缓冲的输出字符被写出。</li>
<li><code>void write(int c)</code>：写出一个字符。</li>
<li><code>write(char[] cbuf)</code>：写字符数组</li>
<li><code>void write(char[] b, int off, int len)</code>：写字符数组的一部分。off开始，写len个</li>
<li><code>void write(String str)</code>：写出一个字符串。</li>
<li><code>void write(String str, int off, int len)</code>：写字符串的一部分。off开始，写len个</li>
</ul>
<h3 id="5-4-FileWriter类"><a href="#5-4-FileWriter类" class="headerlink" title="5.4 FileWriter类"></a>5.4 FileWriter类</h3><p><code>java.io.FileWriter</code>类是写出字符到文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。</p>
<h4 id="5-4-1-构造方法"><a href="#5-4-1-构造方法" class="headerlink" title="5.4.1 构造方法"></a>5.4.1 构造方法</h4><ul>
<li><p><code>FileWriter(File file)</code>：参数需要传递一个File类型的文件对象，表示向该文件写数据</p>
</li>
<li><p><code>FileWriter(String fileName)</code>：参数需要传递一个字符串类型的文件路径，表示向该文件写数据</p>
</li>
</ul>
<h4 id="5-4-2-基本使用"><a href="#5-4-2-基本使用" class="headerlink" title="5.4.2 基本使用"></a>5.4.2 基本使用</h4><p>步骤：</p>
<ol>
<li>创建字符输出流</li>
<li>写数据</li>
<li>刷新</li>
<li>关闭流</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03Writer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建字符输出流</span></span><br><span class="line">        Writer w = <span class="keyword">new</span> FileWriter(<span class="string">"xxx\\ff.txt"</span>);</span><br><span class="line">        <span class="comment">//开始写数据</span></span><br><span class="line">        <span class="comment">//void write(String str):写字符串</span></span><br><span class="line">        w.write(<span class="string">"hello"</span>);</span><br><span class="line">        <span class="comment">//void write(String str, int off, int len):写字符串的一部分。off开始，写len个</span></span><br><span class="line">        w.write(<span class="string">"worldjava"</span>,<span class="number">0</span>,<span class="number">5</span>);</span><br><span class="line">        <span class="comment">//void write(int c):写单个字符</span></span><br><span class="line">        w.write(<span class="string">'A'</span>);</span><br><span class="line">        <span class="comment">//void write(char[] cbuf):写字符数组</span></span><br><span class="line">        w.write(<span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;);</span><br><span class="line">        <span class="comment">//void write(char[] cbuf, int off, int len):写字符数组的一部分。off开始，写len个</span></span><br><span class="line">        w.write(<span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>&#125;,<span class="number">3</span>,<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//刷新关闭流</span></span><br><span class="line">        w.flush();</span><br><span class="line">        w.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>只有字符输出流必须要刷新</p>
</blockquote>
<h4 id="5-4-3-关闭和刷新"><a href="#5-4-3-关闭和刷新" class="headerlink" title="5.4.3 关闭和刷新"></a>5.4.3 关闭和刷新</h4><p>因为内置缓冲区的原因，如果不关闭输出流，无法写出字符到文件中。但是关闭的流对象，是无法继续写出数据的。如果我们既想写出数据，又想继续使用流，就需要flush方法了。</p>
<ul>
<li><code>flush()</code>：刷新缓冲区，流对象可以继续使用。</li>
<li><code>close()</code>：关闭流，释放系统资源。关闭前会刷新缓冲区。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02FlushAndClose</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Writer w = <span class="keyword">new</span> FileWriter(<span class="string">"day13_file&amp;io\\ee.txt"</span>);</span><br><span class="line">        w.write(<span class="string">"你好"</span>);</span><br><span class="line"></span><br><span class="line">        w.flush();</span><br><span class="line">        w.write(<span class="string">"你也蛮好的"</span>);</span><br><span class="line">        w.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>注意：</p>
<ul>
<li>字符流，只能操作文本文件，不能操作图片，视频等非文本文件。</li>
<li>当我们单纯读或者写文本文件时使用字符流其他情况使用字节流</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>学习</tag>
        <tag>IO流</tag>
        <tag>递归</tag>
        <tag>File类</tag>
      </tags>
  </entry>
  <entry>
    <title>Propertoes类、缓冲流、转换流、序列化流、装饰者模式、commons-io工具包</title>
    <url>/2020/08/06/Propertoes%E7%B1%BB%E3%80%81%E7%BC%93%E5%86%B2%E6%B5%81%E3%80%81%E8%BD%AC%E6%8D%A2%E6%B5%81%E3%80%81%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81%E3%80%81%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F%E3%80%81commons-io%E5%B7%A5%E5%85%B7%E5%8C%85/</url>
    <content><![CDATA[<h2 id="一、IO资源的处理"><a href="#一、IO资源的处理" class="headerlink" title="一、IO资源的处理"></a>一、IO资源的处理</h2><h3 id="1-1-JDK7之前的处理"><a href="#1-1-JDK7之前的处理" class="headerlink" title="1.1 JDK7之前的处理"></a>1.1 JDK7之前的处理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Exception</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Writer w = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">             w = <span class="keyword">new</span> FileWriter(<span class="string">"xxx\\file01.txt"</span>);</span><br><span class="line">             w.write(<span class="string">"你好"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//判断w不是null，那么才表示流成功创建了，那么才关闭</span></span><br><span class="line">                <span class="keyword">if</span> (w != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    w.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="1-2-JDK7的处理"><a href="#1-2-JDK7的处理" class="headerlink" title="1.2 JDK7的处理"></a>1.2 JDK7的处理</h3><p>在JDK7的时候，多了一种try…with…resource语句，可以快捷的处理IO流中的异常以及施放资源的问题。</p>
<p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>(创建流对象的代码)&#123;</span><br><span class="line">	</span><br><span class="line">&#125; <span class="keyword">catch</span>(类名 变量名)&#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在try小括号中创建的流对象，只要流对象创建出来了，肯定会自动调用close方法，关闭流。</p>
<p>小括号中也可以创建多个对象，多个对象之间用分号隔开。</p>
</blockquote>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Exception</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//小括号中创建的流对象，整个try...catch执行完后，会自动调用close方法</span></span><br><span class="line">        <span class="keyword">try</span> (Writer w = <span class="keyword">new</span> FileWriter(<span class="string">"xxx\\file02.txt"</span>);)&#123;</span><br><span class="line">            w.write(<span class="string">"hello"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小贴士：</p>
<p>在try小括号中创建的对象，必须实现AutoCloseable接口。</p>
</blockquote>
<h2 id="二、Properties类-属性集"><a href="#二、Properties类-属性集" class="headerlink" title="二、Properties类(属性集)"></a>二、Properties类(属性集)</h2><p>Properties是一个双列集合，也叫做属性集。</p>
<p>特点：</p>
<ul>
<li>Properties实现类Map接口，拥有Map接口中所有的方法</li>
<li>Properties没有泛型，键和值都是字符串</li>
<li>Properties可以从流中(文件中)中读取键值对</li>
</ul>
<p>构造方法：</p>
<ul>
<li><code>Properties()</code>:空参的构造方法</li>
</ul>
<p>其他方法：</p>
<ul>
<li><code>Object setProperty(String key, String value)</code>:添加键值对</li>
<li><code>String getProperty(String key)</code>:根据键获取值</li>
<li><code>Set&lt;String&gt; stringPropertyNames()</code>：获取所有键并放入Set集合中返回</li>
</ul>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Properties</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Properties p = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//添加键值对</span></span><br><span class="line">        p.setProperty(<span class="string">"s001"</span>,<span class="string">"hehe"</span>);</span><br><span class="line">        p.setProperty(<span class="string">"s002"</span>,<span class="string">"haha"</span>);</span><br><span class="line">        p.setProperty(<span class="string">"s003"</span>,<span class="string">"heihei"</span>);</span><br><span class="line">        <span class="comment">//输出Properties</span></span><br><span class="line">        System.out.println(p);</span><br><span class="line">        <span class="comment">//根据键获取值</span></span><br><span class="line">        System.out.println(p.getProperty(<span class="string">"s001"</span>));</span><br><span class="line">        System.out.println(p.getProperty(<span class="string">"s002"</span>));</span><br><span class="line">        <span class="comment">//Set&lt;String&gt; stringPropertyNames()：获取所有键并放入Set集合中返回</span></span><br><span class="line">        Set&lt;String&gt; keys = p.stringPropertyNames();</span><br><span class="line">        <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">            System.out.println(key + <span class="string">"-"</span> + p.getProperty(key));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-1-Properties有关流的方法"><a href="#2-1-Properties有关流的方法" class="headerlink" title="2.1 Properties有关流的方法"></a>2.1 Properties有关流的方法</h3><p>Properties有关流的方法，<strong>可以从文件中获取键值对</strong>：</p>
<ul>
<li><code>void load(InputStream inStream)</code>：参数需要传递字节输入流</li>
<li><code>void load(Reader reader)</code>：参数需要传递字符输入流</li>
</ul>
<blockquote>
<p>load方法可以传递输入流，该输入流绑定的文件是什么，就可以从该文件中加载(读取)键值对</p>
</blockquote>
<p><strong>使用load方法读取文件的要求</strong>：</p>
<ul>
<li>文件一般以<code>【.properties】</code>结尾(<strong>软性要求</strong>，properties文件也叫做配置文件)</li>
<li>文件中的键值对必须按照指定格式存放(<strong>硬性要求</strong>)<ul>
<li>例如：<ul>
<li>键 = 值(username = jack)</li>
<li>键和值之间用=号隔开，每个键值对换一行</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">文件内容：</span><br><span class="line">username = JJ</span><br><span class="line">password = <span class="number">123456</span></span><br><span class="line">gender = man</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Properties</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建Properties对象</span></span><br><span class="line">        Properties p = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//创建输入流，绑定文件</span></span><br><span class="line">        InputStream is = <span class="keyword">new</span> FileInputStream(<span class="string">"xxx\\prop.properties"</span>);</span><br><span class="line">        <span class="comment">//在家文件到Properties中</span></span><br><span class="line">        p.load(is);</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        System.out.println(p);</span><br><span class="line">        <span class="comment">//关闭流</span></span><br><span class="line">        is.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="三、ResourceBundle"><a href="#三、ResourceBundle" class="headerlink" title="三、ResourceBundle"></a>三、ResourceBundle</h2><p>除了Properties之外，在Java中还提供了<strong>ResourceBundle用来读取properties配置文件</strong>中的内容。</p>
<p><strong>ResourceBundle操作更简便。</strong></p>
<p>ResourceBundle是一个<strong>抽象类</strong>，如果要用，需要使用子类，他的子类对象不是需要我们new的，而是要通过ResourceBundle的<strong>静态方法获取</strong>的。</p>
<p><strong>ResourceBundle获取对象的方法</strong>：</p>
<ul>
<li><code>static ResourceBundle getBundle(String baseName)</code>：获取ResourceBundle子类对象，参数表示要操作的配置文件</li>
</ul>
<blockquote>
<p>ResourceBundle对<strong>配置文件位置</strong>的要求：</p>
<ul>
<li>ResourceBundle读取的properties文件必须放在src目录下，在调用getBundle传递文件路径时，不要带扩展名。</li>
</ul>
</blockquote>
<p><strong>ResourceBundle其他方法</strong>：</p>
<ul>
<li><code>String getString(Stirring key)</code>：根据键获取值。</li>
</ul>
<p><strong>使用示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01ResourceBundle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//获取ResourceBundle对象，参数传递配置文件名。</span></span><br><span class="line">        ResourceBundle bundle = ResourceBundle.getBundle(<span class="string">"target"</span>);</span><br><span class="line">        System.out.println(bundle.getString(<span class="string">"username"</span>));</span><br><span class="line">        System.out.println(bundle.getString(<span class="string">"password"</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="四、缓冲流"><a href="#四、缓冲流" class="headerlink" title="四、缓冲流"></a>四、缓冲流</h2><h3 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h3><p>缓冲流,也叫高效流，是对4个基本的FileXxx流的增强，所以也是4个流，按照数据类型分类：</p>
<ul>
<li>字节缓冲流<ul>
<li>字节输入缓冲流：<code>BufferedInputStream</code></li>
<li>字节输出缓冲流：<code>BufferedOutputStream</code></li>
</ul>
</li>
<li>字符缓冲流<ul>
<li>字符输入缓冲流：<code>BufferedReader</code></li>
<li>字符输出缓冲流：<code>BufferedWriter</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>小贴士：</p>
<ul>
<li>缓冲流的特点是效率高，缓冲流内部有一个缓冲区，可以提高效率【缓冲区使用的就是数组】</li>
<li>缓冲流本身并不具备读或写的功能，它的作用是给其他流提供加速</li>
</ul>
</blockquote>
<h3 id="4-2-字节缓冲流"><a href="#4-2-字节缓冲流" class="headerlink" title="4.2 字节缓冲流"></a>4.2 字节缓冲流</h3><p><strong>构造方法：</strong></p>
<ul>
<li><code>BufferedInputStream(InputStream in)</code>：参数需要传递一个字节输入流</li>
<li><code>BufferedOutputStream(OutputStream out)</code>：参数需要传递一个字节输出流</li>
</ul>
<p><strong>字节缓冲流的使用方式、方法和字节流的方法相同。</strong></p>
<p><strong>效率对比及使用示例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用普通字节流一次读写一个字节的方式复制文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Copy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStream is = <span class="keyword">new</span> FileInputStream(<span class="string">"xxx\\1.png"</span>);</span><br><span class="line">        OutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="string">"xxx\\1_new.png"</span>);</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">while</span> ((i = is.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">            os.write(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"共耗时:"</span> + (end-start));<span class="comment">//大概需要15000ms完成复制</span></span><br><span class="line">        os.close();</span><br><span class="line">        is.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用字节缓冲流一次读取一个字节的方式复制文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02BufferedStream</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"xxx\\1.png"</span>));</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"xxx\\1_new.png"</span>));</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">while</span> ((i = bis.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">            bos.write(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(end-start);<span class="comment">//大概需要100ms完成复制</span></span><br><span class="line">        bos.close();</span><br><span class="line">        bis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用字节缓冲流结合字节数组的方式复制文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03BufferedStream</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"xxx\\1.png"</span>));</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"xxx\\1_new.png"</span>));</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">while</span> ((len = bis.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            bos.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(end-start);<span class="comment">//大概需要10ms完成复制</span></span><br><span class="line">        bos.close();</span><br><span class="line">        bis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>对比上面三种方式复制文件，可以得知，效率是越来愈高的，使用缓冲流进行文件的操作可以很大程度的提高效率。</p>
</blockquote>
<h3 id="4-3-字符缓冲流"><a href="#4-3-字符缓冲流" class="headerlink" title="4.3 字符缓冲流"></a>4.3 字符缓冲流</h3><p>构造方法：</p>
<ul>
<li><code>BufferedReader(Reader in)</code>：参数需要传递字符输入流</li>
<li><code>BufferedWriter(Writer out)</code>：参数需要传递字符输出流</li>
</ul>
<p><strong>字节缓冲流的使用方式、方法和字节流的方法相同。</strong></p>
<p>字符缓冲流中的特有方法：</p>
<ul>
<li>在BufferedWriter里面有一个方法newLine(),可以实现跨平台的换行<ul>
<li><code>void newLine()</code>:写一个换行，这个换行是跨平台的</li>
</ul>
</li>
<li>在BufferedReader里面有一个方法readLine()，可以读一行数据<ul>
<li><code>String readLine()</code>：一次读取一行数据，并以字符串形式返回读取到的数据。如果已经读取结束了，返回值是null</li>
</ul>
</li>
</ul>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04BufferedStream</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        method1();</span><br><span class="line">        method2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * String readLine():一次读取一行数据，并以字符串形式返回读取到的数据。如果已经读取结束了，返回值是null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"xxx\\file03.txt"</span>));</span><br><span class="line">        String s;</span><br><span class="line">        <span class="keyword">while</span> ((s = br.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * void newLine():写一个换行，这个换行是跨平台的</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"xxx\\file03.txt"</span>));</span><br><span class="line">        bw.write(<span class="string">"窗前明月光，"</span>);</span><br><span class="line">        bw.newLine();</span><br><span class="line">        bw.write(<span class="string">"疑是地上霜。"</span>);</span><br><span class="line">        bw.flush();</span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-4-练习——文本排序"><a href="#4-4-练习——文本排序" class="headerlink" title="4.4 练习——文本排序"></a>4.4 练习——文本排序</h3><p>需求：使用缓冲流读取文章内容依据文章开始的序号完成下面文章内容的排序，然后写入到新文件中。(下面的文字内容由序号开始每段内容单独占一行)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span>.侍中、侍郎郭攸之、费祎、董允等，此皆良实，志虑忠纯，是以先帝简拔以遗陛下。愚以为宫中之事，事无大小，悉以咨之，然后施行，必得裨补阙漏，有所广益。</span><br><span class="line"><span class="number">8</span>.愿陛下托臣以讨贼兴复之效，不效，则治臣之罪，以告先帝之灵。若无兴德之言，则责攸之、祎、允等之慢，以彰其咎；陛下亦宜自谋，以咨诹善道，察纳雅言，深追先帝遗诏，臣不胜受恩感激。</span><br><span class="line"><span class="number">4</span>.将军向宠，性行淑均，晓畅军事，试用之于昔日，先帝称之曰能，是以众议举宠为督。愚以为营中之事，悉以咨之，必能使行阵和睦，优劣得所。</span><br><span class="line"><span class="number">2</span>.宫中府中，俱为一体，陟罚臧否，不宜异同。若有作奸犯科及为忠善者，宜付有司论其刑赏，以昭陛下平明之理，不宜偏私，使内外异法也。</span><br><span class="line"><span class="number">1</span>.先帝创业未半而中道崩殂，今天下三分，益州疲弊，此诚危急存亡之秋也。然侍卫之臣不懈于内，忠志之士忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气，不宜妄自菲薄，引喻失义，以塞忠谏之路也。</span><br><span class="line"><span class="number">9</span>.今当远离，临表涕零，不知所言。</span><br><span class="line"><span class="number">6</span>.臣本布衣，躬耕于南阳，苟全性命于乱世，不求闻达于诸侯。先帝不以臣卑鄙，猥自枉屈，三顾臣于草庐之中，咨臣以当世之事，由是感激，遂许先帝以驱驰。后值倾覆，受任于败军之际，奉命于危难之间，尔来二十有一年矣。</span><br><span class="line"><span class="number">7</span>.先帝知臣谨慎，故临崩寄臣以大事也。受命以来，夙夜忧叹，恐付托不效，以伤先帝之明，故五月渡泸，深入不毛。今南方已定，兵甲已足，当奖率三军，北定中原，庶竭驽钝，攘除奸凶，兴复汉室，还于旧都。此臣所以报先帝而忠陛下之职分也。至于斟酌损益，进尽忠言，则攸之、祎、允之任也。</span><br><span class="line"><span class="number">5</span>.亲贤臣，远小人，此先汉所以兴隆也；亲小人，远贤臣，此后汉所以倾颓也。先帝在时，每与臣论此事，未尝不叹息痛恨于桓、灵也。侍中、尚书、长史、参军，此悉贞良死节之臣，愿陛下亲之信之，则汉室之隆，可计日而待也。</span><br></pre></td></tr></table></figure>

<p>代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建集合，用来保存读取到的每行课文。</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//2.创建字符输入缓冲流，用来读取。</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"xxx\\in.txt"</span>));</span><br><span class="line">        String line;</span><br><span class="line">        <span class="comment">//3.开始读取，一次读取一行</span></span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//4.将读取到的的这行数据添加到集和中</span></span><br><span class="line">            list.add(line);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.关闭流</span></span><br><span class="line">        br.close();</span><br><span class="line">        <span class="comment">//6.根据首个字符对集合中的内容进行排序</span></span><br><span class="line">        Collections.sort(list, (o1, o2) -&gt; o1.charAt(<span class="number">0</span>) - o2.charAt(<span class="number">0</span>));</span><br><span class="line">        <span class="comment">//7.创建字符输出缓冲流，用来写</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"xxx\\out.txt"</span>));</span><br><span class="line">        <span class="comment">//8.遍历集合，拿到集合中的每一个元素</span></span><br><span class="line">        <span class="keyword">for</span> (String strLine : list) &#123;</span><br><span class="line">            <span class="comment">//9.将遍历到的元素写到目的地文件</span></span><br><span class="line">            bw.write(strLine);</span><br><span class="line">            <span class="comment">//10.换行</span></span><br><span class="line">            bw.newLine();</span><br><span class="line">            <span class="comment">//11.刷新流</span></span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//12.关闭流</span></span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="五、转换流"><a href="#五、转换流" class="headerlink" title="五、转换流"></a>五、转换流</h2><h3 id="5-1-字符编码和字符集"><a href="#5-1-字符编码和字符集" class="headerlink" title="5.1 字符编码和字符集"></a>5.1 字符编码和字符集</h3><p>编码和解码：</p>
<ul>
<li>编码：字符 -&gt; 字节</li>
<li>解码；字节 -&gt; 字符</li>
</ul>
<p>字符编码Character Encoding : 就是一套自然语言的字符与二进制数之间的对应规则。</p>
<p>字符集Charset：也叫编码表。是一个系统支持的所有字符的集合，包括各国家文字、标点符号、图形符号、数字等。</p>
<table>
<thead>
<tr>
<th>字符集</th>
<th>占用字节数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>ASCII码表</td>
<td>1字节</td>
<td>有128个英文字母数字以及标点符号。</td>
</tr>
<tr>
<td>ISO8859-1(Latin)</td>
<td>1字节</td>
<td>有256个内容。包含了ASCII码表的内容以及拉丁文。</td>
</tr>
<tr>
<td>GB2312(1980)</td>
<td>1或2字节</td>
<td>支持六千多个汉字或者字符</td>
</tr>
<tr>
<td>BIG5</td>
<td>1或2字节</td>
<td>支持繁体字</td>
</tr>
<tr>
<td>GBK</td>
<td>1或2字节</td>
<td>支持两万多汉字或者字符。</td>
</tr>
</tbody></table>
<p>国际标准码表(unicode)：unicode中可以保存任何国家的任何语言，在unicode中每个字符都是使用两个字节保存的。在unicode8.0版本，甚至保存emoji。</p>
<p>万国码：UTF-8</p>
<ul>
<li>UTF-32：每一个字符都使用4个字节保存。</li>
<li>UTF-16：每一个字符都使用2或3或4个字节保存。</li>
<li>UTF-8：每一个字符都使用1或2或3或4个字节保存。</li>
</ul>
<blockquote>
<p>在GBK中每一个汉字占2个字节。</p>
<p>在UTF-8编码中每一个汉字占3个字节。</p>
</blockquote>
<blockquote>
<p>小贴士：</p>
<ul>
<li>在IDEA中，使用的默认编码是UTF-8</li>
<li>在windows中， 使用的默认编码是UTF-8（最近win10更新，新版本的win10默认编码已经变成utf-8）</li>
</ul>
</blockquote>
<h3 id="5-2-编码引出的问题"><a href="#5-2-编码引出的问题" class="headerlink" title="5.2 编码引出的问题"></a>5.2 编码引出的问题</h3><p>下面代码使用FileReader读取GBK文件的内容。</p>
<p>FileReader会使用idea默认编码UTF-8方式进行读取，此时文件的编码是GBK，两种编码不一致，于是产生了问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01FileReader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"E:\\file_test\\cc.txt"</span>);</span><br><span class="line">        <span class="keyword">int</span> read = fr.read();</span><br><span class="line">        System.out.println((<span class="keyword">char</span>) read);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果要指定编码进行读取，那么就可以使用转换流去做。</p>
</blockquote>
<h3 id="5-3-InputStreamReader"><a href="#5-3-InputStreamReader" class="headerlink" title="5.3 InputStreamReader"></a>5.3 InputStreamReader</h3><p><strong>InputStreamReader</strong>是转换流，用来<strong>读</strong>，可以按照<strong>指定编码</strong>将文件中的数据读取到Java程序中。</p>
<ul>
<li>InputStreamReader是字符流，会以字符为单位进行读取</li>
</ul>
<p>构造方法：</p>
<ul>
<li><code>InputStreamReader(InputStream in)</code>：参数需要传递一个字节输入流，使用该构造方法创建的转换流对象会使用idea默认的编码(utf-8)进行读取</li>
<li><code>InputStreamReader(InputStream in , String charsetName)</code>：第一个参数是字节输入流，第二个蚕食是编码方式。可以指定编码进行读取</li>
</ul>
<p><strong>InputStreamReader是使用方式和字符流的使用方式一样</strong></p>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02InoutStreamReader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// readGBK();</span></span><br><span class="line">        readUTF8();</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//读取utf-8文件</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readUTF8</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// InputStreamReader isr = new InputStreamReader(new FileInputStream("E:\\file_test\\file02-utf8.txt"),"utf8");</span></span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">"E:\\file_test\\file02-utf8.txt"</span>));</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">while</span> ((i = isr.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println((<span class="keyword">char</span>) i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//读取GBK文件</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readGBK</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">"E:\\file_test\\file01-gbk.txt"</span>),<span class="string">"GBK"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">while</span> ((i = isr.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println((<span class="keyword">char</span>) i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-4-OutputStreamWriter"><a href="#5-4-OutputStreamWriter" class="headerlink" title="5.4 OutputStreamWriter"></a>5.4 OutputStreamWriter</h3><p><strong>OutputStreamWriter</strong>是一个转换流，用来<strong>写</strong>，可以将Java程序中的数据按照<strong>指定编码</strong>写到文件中。</p>
<ul>
<li>OutputStreamWriter是一个字符流，会以字符为单位写数据</li>
</ul>
<p>构造方法：</p>
<ul>
<li><code>OutputStreamWriter(OutputStream out)</code>:参数要传递字节输出流。会使用idea默认的编码(utf-8)进行写操作</li>
<li><code>OutputStreamWriter(OutputStream out, String charsetName)</code>:第一个参数要传递字节输出流，第二个参数表示编码方式。会使用指定的编码进行写操作</li>
</ul>
<p><strong>OutputStreamWriter和字符流写数据的方法一样</strong></p>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03OutputStreamWriter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        writeGBK();</span><br><span class="line">        writeUTF8();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeUTF8</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream("E:\\file_test\\writeUTF8.txt"),"UTF8");</span></span><br><span class="line">        OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"E:\\file_test\\writeUTF8.txt"</span>));</span><br><span class="line">        osw.write(<span class="string">"你好"</span>);</span><br><span class="line">        osw.flush();</span><br><span class="line">        osw.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeGBK</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"E:\\file_test\\writeGBK.txt"</span>),<span class="string">"GBK"</span>);</span><br><span class="line">        osw.write(<span class="string">"你好"</span>);</span><br><span class="line">        osw.flush();</span><br><span class="line">        osw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="六、序列化"><a href="#六、序列化" class="headerlink" title="六、序列化"></a>六、序列化</h2><h3 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a>6.1 概述</h3><p><strong>序列化</strong>：把对象信息持久化存储到硬盘中，保存为一个文件。</p>
<p><strong>反序列化</strong>：读取保存在硬盘中的文件，进行反序列化，获取对象的信息。</p>
<h3 id="6-2-ObjectOutputStream类"><a href="#6-2-ObjectOutputStream类" class="headerlink" title="6.2 ObjectOutputStream类"></a>6.2 ObjectOutputStream类</h3><p><strong>ObjectOutputStream</strong>是<strong>序列化流</strong>，可以将Java程序中的对象序列化到文件中。</p>
<p>构造方法：</p>
<ul>
<li><code>ObjectOutputStream(OutputStream out)</code>：参数需要传递字节输出流</li>
</ul>
<p>ObjectOutputStream写对象的方法【<strong>特有方法</strong>】</p>
<ul>
<li><code>void writeObject(Object obj)</code>：向文件中写对象</li>
</ul>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01ObjectOutputStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"xxx\\file01-obj.txt"</span>));</span><br><span class="line">        Person p = <span class="keyword">new</span> Person(<span class="string">"张三"</span>,<span class="number">15</span>);</span><br><span class="line">        oos.writeObject(p);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Person类略....</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意!!!</p>
<ul>
<li>想要进行序列化的接口必须实现Serializable接口</li>
</ul>
<p>Serializable：序列化接口</p>
<ul>
<li>Serializable里面没有任何东西，这个接口只是起到一个标记作用，必须实现接口，那么类的对象才可以被序列化，才可以写到文件中</li>
</ul>
</blockquote>
<h3 id="6-3-ObjectInputStream类"><a href="#6-3-ObjectInputStream类" class="headerlink" title="6.3 ObjectInputStream类"></a>6.3 ObjectInputStream类</h3><p>ObjectInputStream是反序列化流，可以将文件中的对象读取到Java程序中</p>
<p>构造方法：</p>
<ul>
<li><code>ObjectInputStream(InputStream in)</code>：参数传递一个字节输入流</li>
</ul>
<p>ObjectInputStream读对象的方法【<strong>特有方法</strong>】</p>
<ul>
<li><code>Object readObject()</code>:从文件中读取对象</li>
</ul>
<p>使用示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02ObjectInputStream</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"xxx\\file01-obj.txt"</span>));</span><br><span class="line">        Object obj = ois.readObject();</span><br><span class="line"></span><br><span class="line">        System.out.println((Person)obj);</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<p>如果使用反序列化流读取数据，如果读取的对象所属的类不存在，那么会报错[<strong>ClassNotFoundException</strong>]</p>
</blockquote>
<h3 id="6-4-序列化中注意事项"><a href="#6-4-序列化中注意事项" class="headerlink" title="6.4 序列化中注意事项"></a>6.4 序列化中注意事项</h3><p><strong>static</strong>和<strong>transient</strong>关键字</p>
<ul>
<li>被static修饰的属性不能被序列化。被static修饰的属性属于类，不属于对象，而序列化操作写的是对象。</li>
<li>如果我们不希望某个属性被序列化，同时不希望使用static关键字，那么可以使用transient。<ul>
<li>transient表示瞬态，被transient修饰的属性无法被序列化。</li>
</ul>
</li>
</ul>
<p>例如：</p>
<ul>
<li><p><code>private transient int age;</code></p>
</li>
<li><p><code>private static int age;</code></p>
</li>
</ul>
<h3 id="6-5-序列化中的序列号"><a href="#6-5-序列化中的序列号" class="headerlink" title="6.5 序列化中的序列号"></a>6.5 序列化中的序列号</h3><p><strong>问题</strong>：在进行反序列的的时候，从文件中读取对象时，会对比文件中保存的版本号和class文件中的版本号是否一致，如果不一致，就会报错。如果要解决版本号冲突问题，我们可以给类固定一个版本号，不管该类怎么修改，版本号都不变。这样就解决了问题。</p>
<p><strong>解决方法</strong>：可以在类中提供一个常量<code>serialVersionUID</code>，该常量就表示类的版本号，我们可以自己手动提供版本号。</p>
<p>定义<code>serialVersionUID</code>要求：</p>
<ul>
<li>必须被<code>private static final</code> 修饰</li>
<li>必须是<code>long</code>类型的</li>
<li>名字必须叫做<code>serialVersionUID</code></li>
</ul>
<h3 id="6-6-练习"><a href="#6-6-练习" class="headerlink" title="6.6 练习"></a>6.6 练习</h3><p>要求：</p>
<ul>
<li>将存有多个学生对象的集合序列化，保存到list.txt中</li>
<li>反序列化，并遍历集合，打印对象信息</li>
</ul>
<p>代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    get/set/构造方法略...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：Student类也需要实现Serilizable接口</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建集合，用来保存学生</span></span><br><span class="line">        List&lt;Student&gt; stuList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//2.添加学生</span></span><br><span class="line">        stuList.add(<span class="keyword">new</span> Student(<span class="string">"张三"</span>,<span class="number">18</span>));</span><br><span class="line">        stuList.add(<span class="keyword">new</span> Student(<span class="string">"李四"</span>,<span class="number">19</span>));</span><br><span class="line">        stuList.add(<span class="keyword">new</span> Student(<span class="string">"王五"</span>,<span class="number">20</span>));</span><br><span class="line">        <span class="comment">//3.创建ObjectOutputStream序列化流，用来写对象</span></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"xxx\\stuList.txt"</span>));</span><br><span class="line">        <span class="comment">//4.调用write方法，将集合写到文件中</span></span><br><span class="line">        oos.writeObject(stuList);</span><br><span class="line">        <span class="comment">//5.释放资源</span></span><br><span class="line">        oos.close();</span><br><span class="line">        <span class="comment">//6.创建ObjectInputStream反序列化流，用来读</span></span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"xxx\\stuList.txt"</span>));</span><br><span class="line">        <span class="comment">//7.调用readObject方法读取对象</span></span><br><span class="line">        List&lt;Student&gt; list = (List&lt;Student&gt;) ois.readObject();</span><br><span class="line">        <span class="comment">//8.释放资源</span></span><br><span class="line">        ois.close();</span><br><span class="line">        <span class="comment">//9.遍历读取到的集合中的对象，输出里面的信息</span></span><br><span class="line">        <span class="keyword">for</span> (Student student : list) &#123;</span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="七、打印流"><a href="#七、打印流" class="headerlink" title="七、打印流"></a>七、打印流</h2><p><code>PrintStream</code>是打印流。</p>
<p>打印流特点：</p>
<ul>
<li>只有输出，没有输入</li>
<li>打印流写数据十分方便</li>
</ul>
<p>构造方法：</p>
<ul>
<li><code>PrintStream(String fileName)</code>：参数需要传递字符串类型的文件路径</li>
<li><code>PrintStream(File file)</code>：参数需要传递File类型的文件</li>
<li><code>PrintStream(OutputStream out)</code>：参数需要传递字节输出流</li>
</ul>
<p>特有方法：</p>
<ul>
<li><code>void print(任何类型)</code>:写数据</li>
<li><code>void println(任何类型)</code>:写数据并换行</li>
</ul>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01PrintStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        PrintStream ps = <span class="keyword">new</span> PrintStream(<span class="string">"xxx\\file06.txt"</span>);</span><br><span class="line">        <span class="comment">// ps.print("你好");</span></span><br><span class="line">        <span class="comment">// ps.print("你也蛮好的");</span></span><br><span class="line">        ps.println(<span class="number">97</span>);</span><br><span class="line">        ps.println(<span class="number">98</span>);</span><br><span class="line">        ps.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：打印流在打印上面97、98的时候，直接写的是数字97、98。不像字节流出现a、b</p>
</blockquote>
<h3 id="7-1-扩展"><a href="#7-1-扩展" class="headerlink" title="7.1 扩展"></a>7.1 扩展</h3><p><code>System.out.println</code>中的<code>System.out</code>就是打印流</p>
<p><code>System.out</code>叫做<code>标准输出流</code>，该流的目的地是控制台。</p>
<p>可以通过System中的静态方法叫做<code>setOut()</code>改变这个标准输出流的目的地</p>
<ul>
<li><code>static void setOut(PrintStream out)</code>：重新分配”标准“输出流。参数PrintStream目的地是什么，将来System.out的目的地就是什么</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02PrintStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        PrintStream ps = <span class="keyword">new</span> PrintStream(<span class="string">"xxx\\file07.txt"</span>);</span><br><span class="line">        System.setOut(ps);</span><br><span class="line">        System.out.println(<span class="string">"HelloWorld!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="八、装饰设计模式"><a href="#八、装饰设计模式" class="headerlink" title="八、装饰设计模式"></a>八、装饰设计模式</h2><p><strong>装饰者设计模式：在不改变原有类，并且不适用继承的前提下，对一个类进行增强。</strong></p>
<ul>
<li>装饰的类和被装饰的类要实现一个接口</li>
<li>在装饰的类中接收被装饰的对象</li>
<li>在需要增强的方法中直接写增强后的内容</li>
<li>如果某个方法不需要增强，直接通过被装饰的类调用该方法</li>
</ul>
<h3 id="8-1-Demo演示"><a href="#8-1-Demo演示" class="headerlink" title="8.1 Demo演示"></a>8.1 Demo演示</h3><p>要求：使用超级刘德华(装饰的类)对原来的类(被装饰的类)进行增强(对刘德华的功能进行扩展)</p>
<p>接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 明星接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Star</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 唱歌</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跳舞</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dance</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>被装饰的类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LiuDeHua</span> <span class="keyword">implements</span> <span class="title">Star</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"刘德华在唱歌"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"刘德华在跳舞"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>装饰者类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperLiuDeHua</span> <span class="keyword">implements</span> <span class="title">Star</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收被装饰(增强)的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> LiuDeHua liuDeHua;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供构造方法，用来接收外界传递过来的liudehua对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> liuDeHua</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SuperLiuDeHua</span><span class="params">(LiuDeHua liuDeHua)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.liuDeHua = liuDeHua;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对唱歌方法进行增强</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"刘德华在鸟巢唱歌，下面很多粉丝尖叫~~~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 不对跳舞的方法进行增强，直接通过刘德华调用跳舞的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        liuDeHua.dance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LiuDeHua l = <span class="keyword">new</span> LiuDeHua();</span><br><span class="line">        l.sing();</span><br><span class="line">        l.dance();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 创建超级刘德华</span></span><br><span class="line"><span class="comment">         * 必须要传递要增强的对象，也就是一个普通的刘德华</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        SuperLiuDeHua superLiuDeHua = <span class="keyword">new</span> SuperLiuDeHua(l);</span><br><span class="line">        superLiuDeHua.sing();<span class="comment">//增强的方法</span></span><br><span class="line">        superLiuDeHua.dance();<span class="comment">//没有被增强</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="九、commons-io工具包"><a href="#九、commons-io工具包" class="headerlink" title="九、commons-io工具包"></a>九、commons-io工具包</h2><p>commons-io是由第三方(Apache)提供的对于IO流操作的工具包</p>
<p>如果要使用第三方工具包，一般需要导入jar包</p>
<blockquote>
<p>jar就是java的压缩包，里面会有很多的class文件，供我们使用</p>
<p>如果导入了jar包，这个jar包中的类就都可以使用了</p>
</blockquote>
<p>导入jar步骤：</p>
<ul>
<li>在当前模块下面新建一个文件夹lib</li>
<li>将jar包复制到lib文件夹下</li>
<li>模块上右键，点击 [add as library]</li>
</ul>
<h3 id="9-1-方法介绍"><a href="#9-1-方法介绍" class="headerlink" title="9.1 方法介绍"></a>9.1 方法介绍</h3><p>IOUtils里面的方法：</p>
<ul>
<li><code>static int copy(InputStream input, OutputStream output)</code>:把input输入流中的内容拷贝到output输出流中，返回拷贝的字节个数(适合文件大小为2GB以下)</li>
<li><code>static long copyLarge(InputStream input, OutputStream output)</code>:把input输入流中的内容拷贝到output输出流中，返回拷贝的字节个数(适合文件大小为2GB以上)</li>
</ul>
<p>FileUtils里面的方法：</p>
<ul>
<li><p><code>static void copyFileToDirectory(File srcFile, File destDir)</code> ：复制文件到另外一个目录下。srcFile表示要复制的文件，destDir表示要复制到的文件夹</p>
</li>
<li><p><code>static void copyDirectoryToDirectory(File srcDir , File destDir )</code>：复制srcDir目录到destDir位置。srcDir表示源文件夹，destDir表示目标文件夹</p>
</li>
</ul>
<p><strong>代码演示：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        IOUtils.copy(<span class="keyword">new</span> FileInputStream(<span class="string">"xxx\\1.png"</span>),<span class="keyword">new</span> FileOutputStream(<span class="string">"xxx\\2.png"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>学习</tag>
        <tag>IO流</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>JUnit单元测试、Socket网络编程</title>
    <url>/2020/08/07/JUnit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E3%80%81Socket%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="一、JUnit单元测试"><a href="#一、JUnit单元测试" class="headerlink" title="一、JUnit单元测试"></a>一、JUnit单元测试</h2><p>JUnit是单元测试，可以替代程序中的main方法，程序可以直接从单元测试方法直接开始执行。</p>
<p>如果在一个方法上加上<code>@Test</code>注解，那么这个方法就是单元测试方法了，程序就可以从这个方法直接开始执行了。</p>
<a id="more"></a>

<h3 id="1-1-基本使用"><a href="#1-1-基本使用" class="headerlink" title="1.1 基本使用"></a>1.1 基本使用</h3><p>单元测试方法的要求：</p>
<ul>
<li>方法一般以test开头(<strong>软性规定</strong>)</li>
<li>方法用public修饰，没有参数没有返回值(<strong>硬性规定</strong>)</li>
</ul>
<p>单元测试方法的执行：</p>
<ul>
<li>方式一：选中方法右键run</li>
<li>方式二：选中类，然后右键run【执行该类中的所有单元测试方法】</li>
</ul>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Junit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFunction</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"testFunction"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"testMethod"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-单元测试的其他注解"><a href="#1-2-单元测试的其他注解" class="headerlink" title="1.2 单元测试的其他注解"></a>1.2 单元测试的其他注解</h3><p><code>JUnit4</code>：</p>
<ul>
<li><code>@Before</code>:使用该注解修饰的方法，会在每次单元测试方法执行之前执行</li>
<li><code>@After</code>：使用该注解修饰的方法，会在每次单元测试方法执行之后执行</li>
<li><code>@BeforeClass</code>:使用该注解修饰的方法，会在所有方法执行之前执行，只执行一次。</li>
<li><code>@AfterClass</code>:使用该注解修饰的方法，会在所有方法执行之后执行，只执行一次。</li>
</ul>
<p>注意：<code>BeforeClass</code>和<code>AfterClass</code>注解修饰的方法必须使用<code>static</code>静态修饰</p>
<p><code>JUnit5</code>：</p>
<ul>
<li><code>@BeforeEach</code>：用来修饰方法，该方法会在每一个测试方法执行之前执行一次。</li>
<li><code>@AfterEach</code>：用来修饰方法，该方法会在每一个测试方法执行之后执行一次。</li>
<li><code>@BeforeAll</code>：用来静态修饰方法，该方法会在所有测试方法之前执行一次。</li>
<li><code>@AfterAll</code>：用来静态修饰方法，该方法会在所有测试方法之后执行一次。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02JUnit</span> </span>&#123;</span><br><span class="line">    <span class="meta">@AfterClass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">afterClassMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"afterClassMethod..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeClass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">beforeClassMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"beforeClassMethod..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"afterMethod..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"beforeMethod..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"testMethod..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"testFunction..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="二、网络编程入门"><a href="#二、网络编程入门" class="headerlink" title="二、网络编程入门"></a>二、网络编程入门</h2><h3 id="2-1-IP地址介绍"><a href="#2-1-IP地址介绍" class="headerlink" title="2.1 IP地址介绍"></a>2.1 IP地址介绍</h3><p><strong>IP地址：是网络中对于设备的一个唯一的标识(编号)</strong></p>
<p><img data-src="/image/IP%E5%9C%B0%E5%9D%80%E4%BB%8B%E7%BB%8D.png" alt="IP地址介绍"></p>
<h3 id="2-2-端口号"><a href="#2-2-端口号" class="headerlink" title="2.2 端口号"></a>2.2 端口号</h3><p><strong>端口号：在计算机中对于应用程序的唯一标识</strong></p>
<p><img data-src="/image/%E7%AB%AF%E5%8F%A3%E5%8F%B7%E4%BB%8B%E7%BB%8D.png" alt="端口号介绍"></p>
<h3 id="2-3-客户端和服务器"><a href="#2-3-客户端和服务器" class="headerlink" title="2.3 客户端和服务器"></a>2.3 客户端和服务器</h3><p>图解:</p>
<p><img data-src="/image/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%99%A8.png" alt="客户端和服务器"></p>
<h3 id="2-4-TCP中的IO流"><a href="#2-4-TCP中的IO流" class="headerlink" title="2.4 TCP中的IO流"></a>2.4 TCP中的IO流</h3><p>图解：</p>
<p><img data-src="/image/TCP%E4%B8%AD%E7%9A%84IO%E6%B5%81.png" alt="TCP中的IO流"></p>
<h2 id="三、TCP通信程序"><a href="#三、TCP通信程序" class="headerlink" title="三、TCP通信程序"></a>三、TCP通信程序</h2><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h3><p>TCP ==&gt;Transfer Control Protocol ==&gt; 传输控制协议</p>
<p>TCP协议是面向连接的通信协议，即在传输数据前先在客户端和服务器端建立逻辑连接，然后再传输数据。它提供了两台计算机之间可靠无差错的数据传输。</p>
<p>TCP协议的特点：</p>
<ul>
<li>面向连接的协议</li>
</ul>
<ul>
<li>只能由客户端主动发送数据给服务器端，服务器端接收到数据之后，可以给客户端响应数据。</li>
</ul>
<ul>
<li>通过三次握手建立连接，连接成功形成数据传输通道。</li>
</ul>
<ul>
<li>通过四次挥手断开连接</li>
<li>基于IO流进行数据传输</li>
<li>传输数据大小没有限制</li>
</ul>
<ul>
<li>因为面向连接的协议，速度慢，但是是可靠的协议。</li>
</ul>
<p>TCP协议的使用场景</p>
<ul>
<li>文件上传和下载</li>
<li>邮件发送和接收</li>
<li>远程登录</li>
</ul>
<p><strong>TCP协议相关的类</strong>：</p>
<ul>
<li><code>Socket</code>：该类的对象就代表客户端程序。</li>
<li><code>ServerSocket</code>：该类的对象就代表服务器端程序</li>
</ul>
<p><strong>Socket类构造方法</strong>：</p>
<ul>
<li><code>Socket(String host, int port)</code>：参数host是目标服务器的ip地址，参数port目标服务器程序的端口号</li>
</ul>
<blockquote>
<p>注意：只要执行该方法，就会立即连接指定的服务器程序，如果连接不成功，则会抛出异常。</p>
</blockquote>
<p><strong>ServerSocket类的构造方法</strong>：</p>
<ul>
<li><code>ServerSocket(int port)</code>:参数表示服务器程序的端口</li>
<li>特有方法：<ul>
<li><code>Socket accept()</code>:监听(等待)并获取客户端的请求(Socket)</li>
</ul>
</li>
</ul>
<p><strong>Socket类常用方法：</strong></p>
<ul>
<li><code>OutputStream getOutputStream()</code>:获取字节输出流，该流用来发送数据</li>
<li><code>InputStream getInputStream()</code>:获取字节输入流，该流用来接收数据</li>
<li><code>void close()</code>:释放资源</li>
</ul>
<h3 id="3-2-TCP通信基本案例"><a href="#3-2-TCP通信基本案例" class="headerlink" title="3.2 TCP通信基本案例"></a>3.2 TCP通信基本案例</h3><h4 id="3-2-1-TCP案例客户端"><a href="#3-2-1-TCP案例客户端" class="headerlink" title="3.2.1 TCP案例客户端"></a>3.2.1 TCP案例客户端</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TCP客户端的实现步骤：</span></span><br><span class="line"><span class="comment"> *      1.创建socket对象，表示客户端，并要指定要连接的服务器ip地址以及端口号</span></span><br><span class="line"><span class="comment"> *      2.通过socket调用getOutputStream获取字节输出流，该流用来向服务器发送数据</span></span><br><span class="line"><span class="comment"> *      3.通过流调用write方法，写(发)数据</span></span><br><span class="line"><span class="comment"> *      4.通过socket调用getInputStream获取字节输入流，该流用来读取都武器发送过类的数据</span></span><br><span class="line"><span class="comment"> *      5.通过流调用read()方法，读取(接收)数据</span></span><br><span class="line"><span class="comment"> *      6.释放资源</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Sunmoon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建socket对象，表示客户端，并要指定要连接的服务器ip地址以及端口号</span></span><br><span class="line">        <span class="comment">//创建Socket对象是会主动连接服务器，如果连接失败，会报错。【三次握手】</span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>,<span class="number">1234</span>);</span><br><span class="line">        <span class="comment">//2.通过socket调用getOutputStream获取字节输出流，该流用来向服务器发送数据</span></span><br><span class="line">        OutputStream out = socket.getOutputStream();</span><br><span class="line">        <span class="comment">//3.通过流调用write方法，写(发)数据</span></span><br><span class="line">        out.write(<span class="string">"Hello!"</span>.getBytes());</span><br><span class="line">        <span class="comment">//4.通过socket调用getInputStream获取字节输入流，该流用来读取都武器发送过类的数据</span></span><br><span class="line">        InputStream in = socket.getInputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] bArr = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="comment">// 5.通过流调用read()方法，读取(接收)数据</span></span><br><span class="line">        <span class="keyword">int</span> len = in.read(bArr);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(bArr,<span class="number">0</span>,len));</span><br><span class="line">        <span class="comment">// 6.释放资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-2-TCP案例服务器端"><a href="#3-2-2-TCP案例服务器端" class="headerlink" title="3.2.2 TCP案例服务器端"></a>3.2.2 TCP案例服务器端</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * TCP服务器端实现步骤：</span></span><br><span class="line"><span class="comment"> *      1.创建一个ServerSocket，表示TCP服务器</span></span><br><span class="line"><span class="comment"> *      2.通过ServerSocket调用accept方法监听并获取客户端的请求(客户端Socket)</span></span><br><span class="line"><span class="comment"> *      3.通过socket调用getInputStream方法获取输入流，接收客户端发送过来的数据</span></span><br><span class="line"><span class="comment"> *      4.通过流掉用read方法接收数据</span></span><br><span class="line"><span class="comment"> *      5.通过socket调用getOutputStream方法获取输出流，用来给客户端发送数据</span></span><br><span class="line"><span class="comment"> *      6.通过流调用write方法，写数据</span></span><br><span class="line"><span class="comment"> *      7.释放资源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">1234</span>);</span><br><span class="line">        Socket socket = server.accept();</span><br><span class="line">        InputStream in = socket.getInputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] bArr = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = in.read(bArr);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(bArr,<span class="number">0</span>,len));</span><br><span class="line">        OutputStream out = socket.getOutputStream();</span><br><span class="line">        out.write(<span class="string">"收到"</span>.getBytes());</span><br><span class="line">        socket.close();</span><br><span class="line">        server.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="四、综合案例"><a href="#四、综合案例" class="headerlink" title="四、综合案例"></a>四、综合案例</h2><h3 id="4-1-文件上传案例"><a href="#4-1-文件上传案例" class="headerlink" title="4.1 文件上传案例"></a>4.1 文件上传案例</h3><p>分析：</p>
<p><img data-src="/image/%E4%B8%8A%E4%BC%A0%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90.png" alt="上传案例分析"></p>
<p><strong>多线程实现：</strong></p>
<p>客户端任务类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建客户端</span></span><br><span class="line">            Socket socket = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>,<span class="number">59512</span>);</span><br><span class="line">            <span class="comment">//创建字节输入流读取要上传的文件</span></span><br><span class="line">            InputStream is = <span class="keyword">new</span> FileInputStream(<span class="string">"E:\\file_test\\client\\1.png"</span>);</span><br><span class="line">            <span class="comment">//获取输出流对象，向服务器发送数据</span></span><br><span class="line">            OutputStream out = socket.getOutputStream();</span><br><span class="line">            <span class="comment">//创建字节数组</span></span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">8</span>];</span><br><span class="line">            <span class="comment">//定义变量</span></span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="comment">//循环读取</span></span><br><span class="line">            <span class="keyword">while</span> ((len = is.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//向服务器写数据</span></span><br><span class="line">                out.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//关流</span></span><br><span class="line">            is.close();</span><br><span class="line">            <span class="comment">//告知服务器写完毕</span></span><br><span class="line">            socket.shutdownOutput();</span><br><span class="line">            <span class="comment">//获取输入流对象，接收客户端会显数据</span></span><br><span class="line">            InputStream in = socket.getInputStream();</span><br><span class="line">            <span class="keyword">while</span> ((len = in.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.println(<span class="keyword">new</span> String(bytes,<span class="number">0</span>,len));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//关闭客户端</span></span><br><span class="line">            socket.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span>  </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        ExecutorService e = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        e.submit(<span class="keyword">new</span> Task());</span><br><span class="line">        e.submit(<span class="keyword">new</span> Task());</span><br><span class="line">        e.submit(<span class="keyword">new</span> Task());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>服务器端：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建服务器对象</span></span><br><span class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">59512</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//开启监听</span></span><br><span class="line">            Socket socket = server.accept();</span><br><span class="line">            <span class="comment">//每次监听到请求都开启一个新线程</span></span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//创建字节输出流，写数据,随机生成文件名</span></span><br><span class="line">                    OutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="string">"E:\\file_test\\server\\"</span> + UUID.randomUUID() + <span class="string">".png"</span>);</span><br><span class="line">                    <span class="comment">//调用getInputStream方法接收数据</span></span><br><span class="line">                    InputStream in = socket.getInputStream();</span><br><span class="line">                    <span class="comment">//定义字节数组</span></span><br><span class="line">                    <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">8</span>];</span><br><span class="line">                    <span class="comment">//定义变量</span></span><br><span class="line">                    <span class="keyword">int</span> len;</span><br><span class="line">                    <span class="comment">//循环读取</span></span><br><span class="line">                    <span class="keyword">while</span> ((len = in.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                        os.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//关闭资源</span></span><br><span class="line">                    os.close();</span><br><span class="line">                    <span class="comment">//获取字节输出流，给客户端回显</span></span><br><span class="line">                    OutputStream out = socket.getOutputStream();</span><br><span class="line">                    out.write(<span class="string">"上传成功"</span>.getBytes());</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="4-2-模拟B-S服务器"><a href="#4-2-模拟B-S服务器" class="headerlink" title="4.2 模拟B\S服务器"></a>4.2 模拟B\S服务器</h3><p>准备一个web页面，可以放在模块文件夹下，然后通过<code>本机IP+端口号</code>即可访问页面，查看到页面内容。</p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建ServerSocket服务器</span></span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">1234</span>);</span><br><span class="line">        <span class="comment">//死循环，使用死循环一直监听请求，并处理操作</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//通过服务器调用accept方法，监听客户端请求</span></span><br><span class="line">            Socket socket = serverSocket.accept();</span><br><span class="line">            <span class="comment">//每监听到请求，就创建新的线程执行任务</span></span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//创建字节输入流，用来读取index.html文件的内容</span></span><br><span class="line">                    InputStream is = <span class="keyword">new</span> FileInputStream(<span class="string">"xxx\\index.html"</span>);</span><br><span class="line">                    <span class="comment">//通过Socket调用getOutputStream，获取输出流，用来向浏览器【客户端】发送数据</span></span><br><span class="line">                    OutputStream out = socket.getOutputStream();</span><br><span class="line">                    <span class="comment">//如果浏览器作为客户端访问服务器，要遵循http协议。</span></span><br><span class="line">                    <span class="comment">//根据http协议规范，服务器回复给浏览器的前三行数据是固定的</span></span><br><span class="line">                    out.write(<span class="string">"HTTP/1.1 200 OK\r\n"</span>.getBytes());<span class="comment">//第一行</span></span><br><span class="line">                    out.write(<span class="string">"Content-Type=html/text\r\n"</span>.getBytes());<span class="comment">//第二行</span></span><br><span class="line">                    out.write(<span class="string">"\r\n"</span>.getBytes());<span class="comment">//第三行是一个空换行。</span></span><br><span class="line">                    <span class="comment">//开始将html文件中的内容写给浏览器</span></span><br><span class="line">                    <span class="keyword">int</span> i;</span><br><span class="line">                    <span class="keyword">while</span> ((i = is.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                        out.write(i);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//关闭资源</span></span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>学习</tag>
        <tag>JUnit</tag>
        <tag>Socket</tag>
      </tags>
  </entry>
  <entry>
    <title>NIO&amp;AIO</title>
    <url>/2020/08/09/NIO-AIO/</url>
    <content><![CDATA[<h2 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h2><h3 id="NIO介绍"><a href="#NIO介绍" class="headerlink" title="NIO介绍"></a>NIO介绍</h3><p>同步和异步（线程通信的机制）</p>
<ul>
<li>同步：线程在完成某个功能时，必须等待这个功能执行完才能再继续往下执行。</li>
<li>异步：线程在完成功能的时候，不用等到该功能执行结束也可以去做其他事情。 得到该功能结束后，系统会通知线程该功能执行完了</li>
</ul>
<p>阻塞和非阻塞(线程的状态)</p>
<ul>
<li>阻塞：线程在执行任务时，会挂起。</li>
<li>非阻塞：线程在执行任务时，不会挂起，可以继续执行其他任务。</li>
</ul>
<a id="more"></a>

<p>BIO：同步阻塞IO<br>NIO：同步非阻塞IO<br>AIO：异步非阻塞IO</p>
<blockquote>
<p>NIO有三个重要的组成部分，Buffer， Channel， Selector</p>
</blockquote>
<h3 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h3><h4 id="Buffer的创建"><a href="#Buffer的创建" class="headerlink" title="Buffer的创建"></a>Buffer的创建</h4><p>Buffer是缓冲区，本质就是由数组组成的。</p>
<blockquote>
<p>在NIO中，数据都是要在缓冲区进行操作的。</p>
</blockquote>
<p>常见的缓冲区</p>
<ul>
<li>ByteBuffer</li>
<li>CharBuffer</li>
<li>DoubleBuffer</li>
<li>FloatBuffer</li>
<li>IntBuffer</li>
<li>LongBuffer</li>
<li>ShortBuffer</li>
</ul>
<p>ByteBuffer的三种创建方式：</p>
<ul>
<li><code>static ByteBuffer allocate(int capacity)</code>：创建一个字节缓冲区并返回，参数是缓冲区的长度（间接缓冲区）</li>
<li><code>static ByteBuffer allocateDirect(int capacity)</code>：创建一个字节缓冲区并返回，参数是缓冲区的长度（直接缓冲区）</li>
<li><code>static ByteBuffer wrap(byte[] array)</code>：根据字节数组创建字节缓冲区并返回（间接缓冲区）</li>
</ul>
<blockquote>
<ul>
<li>间接缓冲区：在Java的内存中创建的缓冲区。</li>
<li>直接缓冲区：在系统内存中创建的缓冲区。</li>
<li>间接缓冲区的创建和销毁效率比直接缓冲区要高，但是工作效率比直接缓冲区要低。</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Buffer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// static ByteBuffer allocate(int capacity)：创建一个字节缓冲区并返回，参数是缓冲区的长度（间接缓冲区）</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//将ByteBuffer转成数组，然后借助工具类Arrays.toString输出</span></span><br><span class="line">        System.out.println(Arrays.toString(buffer.array()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//static ByteBuffer allocateDirect(int capacity)：创建一个字节缓冲区并返回，参数是缓冲区的长度（直接缓冲区）</span></span><br><span class="line">        ByteBuffer buffer2 = ByteBuffer.allocateDirect(<span class="number">10</span>);</span><br><span class="line">        System.out.println(buffer2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//static ByteBuffer wrap(byte[] array)：根据字节数组创建字节缓冲区并返回（间接缓冲区）</span></span><br><span class="line">        ByteBuffer buffer3 = ByteBuffer.wrap(<span class="string">"hello"</span>.getBytes());</span><br><span class="line">        System.out.println(Arrays.toString(buffer3.array()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Buffer的put方法"><a href="#Buffer的put方法" class="headerlink" title="Buffer的put方法"></a>Buffer的put方法</h4><p>在ByteBuffer中有一些方法叫做put，可以向缓冲区中添加元素。</p>
<ul>
<li><code>ByteBuffer put(byte b)</code>：向当前位置添加一个字节。</li>
<li><code>ByteBuffer put(byte[] src)</code>：向当前位置添加一个字节数组。</li>
<li><code>ByteBuffer put(byte[] src, int offset, int length)</code>：添加字节数组的一部分。参数offset是数组起始索引，参数length是元素个数</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02BufferPut</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取缓冲区</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//ByteBuffer put(byte b)：向当前位置添加一个字节。</span></span><br><span class="line">        buffer.put((<span class="keyword">byte</span>) <span class="number">100</span>);</span><br><span class="line">        buffer.put((<span class="keyword">byte</span>) <span class="number">101</span>);</span><br><span class="line">        buffer.put((<span class="keyword">byte</span>) <span class="number">102</span>);</span><br><span class="line">        <span class="comment">//ByteBuffer put(byte[] src)：向当前位置添加一个字节数组。</span></span><br><span class="line">        <span class="keyword">byte</span>[] bArr = &#123;<span class="number">90</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">93</span>, <span class="number">94</span>&#125;;</span><br><span class="line">        <span class="comment">//buffer.put(bArr);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//ByteBuffer put(byte[] src, int offset, int length)：添加字节数组的一部分。参数offset是数组起始索引，参数length是元素个数</span></span><br><span class="line">        buffer.put(bArr, <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        System.out.println(Arrays.toString(buffer.array()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Buffer的capacity方法"><a href="#Buffer的capacity方法" class="headerlink" title="Buffer的capacity方法"></a>Buffer的capacity方法</h4><p>在ByteBuffer中有一个方法叫做capacity，可以获取到缓冲区的容量</p>
<ul>
<li><code>int capacity()</code>：返回缓冲区的容量。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03Capacity</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取缓冲区</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//输出容量</span></span><br><span class="line">        System.out.println(<span class="string">"容量："</span> + buffer.capacity());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Buffer的limit方法"><a href="#Buffer的limit方法" class="headerlink" title="Buffer的limit方法"></a>Buffer的limit方法</h4><p>在ByteBuffer中，有一个方法叫做limit，可以对缓冲区进行限制（比如限制缓冲区中只能使用前5个元素</p>
<ul>
<li><p><code>int limit()</code>：获取缓冲区的限制。</p>
</li>
<li><p><code>Buffer limit(int newLimit)</code>：设置缓冲区的限制。 参数表示新的限制，比如参数是5，就表示只能使用5个元素</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04Limit</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取缓冲区</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        System.out.println(<span class="string">"容量："</span> + buffer.capacity() + <span class="string">"，限制："</span> + buffer.limit());</span><br><span class="line">        <span class="comment">//设置limit</span></span><br><span class="line">        buffer.limit(<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">"容量："</span> + buffer.capacity() + <span class="string">"，限制："</span> + buffer.limit());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        buffer.put((<span class="keyword">byte</span>) <span class="number">100</span>);</span><br><span class="line">        buffer.put((<span class="keyword">byte</span>) <span class="number">101</span>);</span><br><span class="line">        <span class="comment">//限制了只能使用前两个元素，如果添加第三个，就会报错</span></span><br><span class="line">        buffer.put((<span class="keyword">byte</span>) <span class="number">102</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Buffer的position方法"><a href="#Buffer的position方法" class="headerlink" title="Buffer的position方法"></a>Buffer的position方法</h4><p>在ByteBuffer中有一个方法叫做Position，可以获取以及设置缓冲区的元素位置(位置是几，将来就是在哪个位置添加)</p>
<ul>
<li><p><code>int position()</code>：获取缓冲区的元素位置。</p>
</li>
<li><p><code>Buffer position(int newPosition)</code>：设置缓冲区的元素位置，参数表示新设置的位置。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05Position</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取缓冲区</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//输出缓冲区的信息</span></span><br><span class="line">        System.out.println(<span class="string">"位置："</span> + buffer.position() + <span class="string">", 限制："</span> + buffer.limit() + <span class="string">", 容量："</span> + buffer.capacity());</span><br><span class="line">        <span class="comment">//添加</span></span><br><span class="line">        buffer.put((<span class="keyword">byte</span>) <span class="number">100</span>);</span><br><span class="line">        buffer.put((<span class="keyword">byte</span>) <span class="number">101</span>);</span><br><span class="line">        buffer.put((<span class="keyword">byte</span>) <span class="number">102</span>);</span><br><span class="line">        <span class="comment">//输出缓冲区的信息</span></span><br><span class="line">        System.out.println(<span class="string">"位置："</span> + buffer.position() + <span class="string">", 限制："</span> + buffer.limit() + <span class="string">", 容量："</span> + buffer.capacity());</span><br><span class="line">        <span class="comment">//设置缓冲区的位置</span></span><br><span class="line">        buffer.position(<span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">"位置："</span> + buffer.position() + <span class="string">", 限制："</span> + buffer.limit() + <span class="string">", 容量："</span> + buffer.capacity());</span><br><span class="line">        buffer.put((<span class="keyword">byte</span>) <span class="number">50</span>);</span><br><span class="line">        buffer.put((<span class="keyword">byte</span>) <span class="number">51</span>);</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        System.out.println(Arrays.toString(buffer.array()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Buffer的mark方法"><a href="#Buffer的mark方法" class="headerlink" title="Buffer的mark方法"></a>Buffer的mark方法</h4><p>在ByteBuffer中有一个方法叫做mark，可以设置缓冲区的标记</p>
<ul>
<li><code>Buffer mark()</code>：设置缓冲区的标记</li>
<li><code>Buffer reset()</code>：恢复之前的标记</li>
</ul>
<blockquote>
<p>调用mark方法时position是几，那么调用reset方法后恢复的position就是几。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Deo06Mark</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取缓冲区</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//输出缓冲区的信息</span></span><br><span class="line">        System.out.println(<span class="string">"位置："</span> + buffer.position() + <span class="string">", 限制："</span> + buffer.limit() + <span class="string">", 容量："</span> + buffer.capacity());</span><br><span class="line">        <span class="comment">//添加</span></span><br><span class="line">        buffer.put((<span class="keyword">byte</span>) <span class="number">100</span>);</span><br><span class="line">        buffer.put((<span class="keyword">byte</span>) <span class="number">101</span>);</span><br><span class="line">        buffer.put((<span class="keyword">byte</span>) <span class="number">102</span>);</span><br><span class="line">        System.out.println(<span class="string">"位置："</span> + buffer.position() + <span class="string">", 限制："</span> + buffer.limit() + <span class="string">", 容量："</span> + buffer.capacity());</span><br><span class="line">        <span class="comment">//设置标记</span></span><br><span class="line">        buffer.mark();</span><br><span class="line">        <span class="comment">//添加</span></span><br><span class="line">        buffer.put((<span class="keyword">byte</span>) <span class="number">103</span>);</span><br><span class="line">        buffer.put((<span class="keyword">byte</span>) <span class="number">104</span>);</span><br><span class="line">        System.out.println(<span class="string">"位置："</span> + buffer.position() + <span class="string">", 限制："</span> + buffer.limit() + <span class="string">", 容量："</span> + buffer.capacity());</span><br><span class="line">        <span class="comment">//调用reset，恢复之间做标记是的位置.</span></span><br><span class="line">        buffer.reset();</span><br><span class="line">        System.out.println(<span class="string">"位置："</span> + buffer.position() + <span class="string">", 限制："</span> + buffer.limit() + <span class="string">", 容量："</span> + buffer.capacity());</span><br><span class="line">        buffer.put((<span class="keyword">byte</span>) <span class="number">10</span>);</span><br><span class="line">        buffer.put((<span class="keyword">byte</span>) <span class="number">11</span>);</span><br><span class="line">        <span class="comment">//输出元素</span></span><br><span class="line">        System.out.println(Arrays.toString(buffer.array()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Buffer的其他方法"><a href="#Buffer的其他方法" class="headerlink" title="Buffer的其他方法"></a>Buffer的其他方法</h4><p><code>Buffer flip()</code>：缩小limit的范围</p>
<ul>
<li>将limit设置到position位置。</li>
<li>将position设置为0</li>
<li>丢弃标记</li>
</ul>
<p><code>Buffer clear()</code>:还原缓冲区的状态。</p>
<ul>
<li>将limit设置到capacity</li>
<li>将position设置为0</li>
<li>丢弃标记</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo07OtherMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取缓冲区</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//输出缓冲区的信息</span></span><br><span class="line">        System.out.println(<span class="string">"位置："</span> + buffer.position() + <span class="string">", 限制："</span> + buffer.limit() + <span class="string">", 容量："</span> + buffer.capacity());</span><br><span class="line">        <span class="comment">//添加</span></span><br><span class="line">        buffer.put((<span class="keyword">byte</span>) <span class="number">100</span>);</span><br><span class="line">        buffer.put((<span class="keyword">byte</span>) <span class="number">101</span>);</span><br><span class="line">        buffer.put((<span class="keyword">byte</span>) <span class="number">102</span>);</span><br><span class="line">        System.out.println(<span class="string">"位置："</span> + buffer.position() + <span class="string">", 限制："</span> + buffer.limit() + <span class="string">", 容量："</span> + buffer.capacity());</span><br><span class="line">        <span class="comment">//缩小limit范围</span></span><br><span class="line">        buffer.flip();</span><br><span class="line">        System.out.println(<span class="string">"位置："</span> + buffer.position() + <span class="string">", 限制："</span> + buffer.limit() + <span class="string">", 容量："</span> + buffer.capacity());</span><br><span class="line">        <span class="comment">//还原缓冲区状态</span></span><br><span class="line">        buffer.clear();</span><br><span class="line">        System.out.println(<span class="string">"位置："</span> + buffer.position() + <span class="string">", 限制："</span> + buffer.limit() + <span class="string">", 容量："</span> + buffer.capacity());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Channel通道"><a href="#Channel通道" class="headerlink" title="Channel通道"></a>Channel通道</h3><p> Channel表示<strong>通道</strong>，在NIO中数据的读写都是使用通道完成的。我们可以将通道看成之前的流，只不过流是单向的，通道是双向的，通道既有读取的方法，也有写方法。</p>
<p>常见的通道：</p>
<ul>
<li>FileChannel：从文件读取数据的</li>
<li>DatagramChannel：读写UDP网络协议数据</li>
<li>SocketChannel：读写TCP网络协议数据</li>
<li>ServerSocketChannel：可以监听TCP连接</li>
</ul>
<h4 id="FileChannel复制文件"><a href="#FileChannel复制文件" class="headerlink" title="FileChannel复制文件"></a>FileChannel复制文件</h4><p>通过NIO的方式复制文件，如果要对文件读写，需要使用FileChannel。</p>
<p>如何获取<code>FileChannel</code>：</p>
<ul>
<li>在<code>FileInputStream</code>和<code>FileOutputStream</code>中，有一个方法叫做<code>getChannel</code>，可以获取通道<ul>
<li><code>FileChannel getChannel()</code>：获取通道。</li>
</ul>
</li>
</ul>
<p>在通道（Channel）中还有用于读写的方法</p>
<ul>
<li><code>int write(ByteBuffer src)</code>:写数据，参数是缓冲区。</li>
<li><code>int read(ByteBuffer dst)</code>：读取数据，参数是缓冲区</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Channel</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建字节流</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"d:\\aa.jpg"</span>);</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"d:\\bb.jpg"</span>);</span><br><span class="line">        <span class="comment">//获取通道</span></span><br><span class="line">        FileChannel inChannel = fis.getChannel();</span><br><span class="line">        FileChannel outChannel = fos.getChannel();</span><br><span class="line">        <span class="comment">//先定义缓冲区</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);<span class="comment">//</span></span><br><span class="line">        <span class="comment">//定义变量，表示读取到的字节个数</span></span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="comment">//开始循环</span></span><br><span class="line">        <span class="keyword">while</span> ((len = inChannel.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//如果条件成立，就表示读取到了数据，那么就进行处理。</span></span><br><span class="line">            <span class="comment">//缩小limit范围（将limit设置到position位置），读取到几个，就让缓冲区中的几个元素是有效的。</span></span><br><span class="line">            buffer.flip();</span><br><span class="line">            <span class="comment">//将读取到的数据写到目的地文件了</span></span><br><span class="line">            outChannel.write(buffer);</span><br><span class="line">            <span class="comment">//重置缓冲区（将position设置为0，将limit设置到capacity，丢弃标记）</span></span><br><span class="line">            buffer.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="RandomAccessFile-复制文件"><a href="#RandomAccessFile-复制文件" class="headerlink" title="RandomAccessFile 复制文件"></a>RandomAccessFile 复制文件</h4><p>上例直接使用FileChannel结合ByteBuffer实现的管道读写，但并不能提高文件的读写效率。</p>
<p> ByteBuffer有个子类：<code>MappedByteBuffer</code>，它可以创建一个“直接缓冲区”，并可以将文件直接映射至内存，可以提高大文件的读写效率。</p>
<p><code>RandomAccessFile</code>类（是一个可以设置读写模式的IO流类）:</p>
<ul>
<li><code>RandomAccessFile(String name, String mode)</code>: 第一个参数是字符串的文件路径，第二个参数是模式。举例：”r”表示只读。 “rw”表示读写</li>
</ul>
<p>RandomAccessFile其他的方法：</p>
<ul>
<li><code>FileChannel getChannel()</code>：获取通道</li>
</ul>
<p>FileChannel获取MappedByteBuffer方法</p>
<ul>
<li><code>MappedByteBuffer map(FileChannel.MapMode mode, long position, long size)</code>：获取直接缓冲区<ul>
<li>参数mode：表示模式</li>
<li>参数position：表示起始位置</li>
<li>参数size：映射的大小</li>
</ul>
</li>
</ul>
<blockquote>
<p>注意：上面的方式不能复制超过2G的文件。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02FastCopy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建RandomAccessFile对象</span></span><br><span class="line">        <span class="comment">//创建的RandomAccessFile，绑定了源文件，模式只读</span></span><br><span class="line">        RandomAccessFile source = <span class="keyword">new</span> RandomAccessFile(<span class="string">"d:\\aa.rar"</span>, <span class="string">"r"</span>);</span><br><span class="line">        <span class="comment">//创建的RandomAccessFile，绑定了目的地文件，模式读写</span></span><br><span class="line">        RandomAccessFile target = <span class="keyword">new</span> RandomAccessFile(<span class="string">"d:\\bb.rar"</span>, <span class="string">"rw"</span>);</span><br><span class="line">        <span class="comment">//获取通道</span></span><br><span class="line">        FileChannel inChannel = source.getChannel();</span><br><span class="line">        FileChannel outChannel = target.getChannel();</span><br><span class="line">        <span class="comment">//记录时间</span></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//获取源文件大小</span></span><br><span class="line">        <span class="keyword">long</span> size = inChannel.size();</span><br><span class="line">        <span class="comment">//获取MappedByteBuffer缓冲区</span></span><br><span class="line">        MappedByteBuffer mbbi = inChannel.map(FileChannel.MapMode.READ_ONLY, <span class="number">0</span>, size);</span><br><span class="line">        MappedByteBuffer mbbo = outChannel.map(FileChannel.MapMode.READ_WRITE, <span class="number">0</span>, size);</span><br><span class="line">        <span class="comment">//遍历mbbi，将每一个字节都放入到mbbo缓冲区中.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="comment">//获取到mbbi中索引为i的字节</span></span><br><span class="line">            <span class="keyword">byte</span> b = mbbi.get();</span><br><span class="line">            <span class="comment">//将获取到的放入到mbbo中</span></span><br><span class="line">            mbbo.put(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//记录时间</span></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(end - start);</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        target.close();</span><br><span class="line">        source.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="SocketChannel网络通信"><a href="#SocketChannel网络通信" class="headerlink" title="SocketChannel网络通信"></a>SocketChannel网络通信</h4><h5 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h5><p>SocketChannel表示客户端通道，我们可以使用该类表示TCP中的客户端。</p>
<p>如何获取SocketChannel</p>
<ul>
<li><code>static SocketChannel open()</code>：获取SocketChannel</li>
</ul>
<p>SocketChannel方法：</p>
<ul>
<li><code>boolean connect(SocketAddress remote)</code>：连接服务器。参数是目标服务器的IP地址以及端口号</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取SocketChannel对象</span></span><br><span class="line">        SocketChannel socketChannel = SocketChannel.open();</span><br><span class="line">        <span class="comment">//连接服务器</span></span><br><span class="line">        socketChannel.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">"localhost"</span>, <span class="number">8888</span>));</span><br><span class="line">        <span class="comment">//给服务器发送数据</span></span><br><span class="line">        <span class="comment">//将要发送的数据封装到缓冲区中</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.wrap(<span class="string">"你好"</span>.getBytes());</span><br><span class="line">        <span class="comment">//将数据发送给服务器</span></span><br><span class="line">        socketChannel.write(buffer);</span><br><span class="line">        <span class="comment">//接收服务器回复过来的数据</span></span><br><span class="line">        <span class="comment">//创建一个长度是1024的缓冲区，用来接收服务器回复过来的数据</span></span><br><span class="line">        ByteBuffer buffer2 = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        <span class="comment">//接收服务器的数据</span></span><br><span class="line">        socketChannel.read(buffer2);</span><br><span class="line">        <span class="comment">//缩小limit限制</span></span><br><span class="line">        buffer2.flip();</span><br><span class="line">        <span class="comment">//将缓冲区的内容转成字符串输出。</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(buffer2.array(), <span class="number">0</span>, buffer2.limit()));</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        socketChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h5><p>ServerSocketChannel是服务器通道，我们可以使用这个类来表示TCP端的服务器。</p>
<p>ServerSocketChannel获取方式：</p>
<ul>
<li><code>static ServerSocketChannel open()</code>：获取ServerSocketChannel对象。</li>
</ul>
<p>ServerSocketChannel其他方法；</p>
<ul>
<li><p><code>ServerSocketChannel bind(SocketAddress local)</code>：参数要绑定自己程序的端口号。</p>
</li>
<li><p><code>SocketChannel accept()</code>：监听并获取客户端的请求（通道）</p>
</li>
<li><p><code>SelectableChannel configureBlocking(boolean block)</code>：设置是否为阻塞状态，如果是false，表示非阻塞</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取服务器通道</span></span><br><span class="line">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line">        <span class="comment">//设置服务器为非阻塞</span></span><br><span class="line">        <span class="comment">//serverSocketChannel.configureBlocking(false);</span></span><br><span class="line">        <span class="comment">//给服务器绑定端口号</span></span><br><span class="line">        serverSocketChannel.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">8888</span>));</span><br><span class="line">        <span class="comment">//监听客户端的请求</span></span><br><span class="line">        SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line">        System.out.println(<span class="string">"有客户端来连接了"</span>);</span><br><span class="line">        <span class="comment">//获取客户端发送过来的数据</span></span><br><span class="line">        <span class="comment">//定义ByteBuffer用来保存客户端发来的数据</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        <span class="comment">//通过通道接受数据</span></span><br><span class="line">        socketChannel.read(buffer);</span><br><span class="line">        <span class="comment">//缩小limit范围。</span></span><br><span class="line">        buffer.flip();</span><br><span class="line">        <span class="comment">//输出读取到的内容</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(buffer.array(), <span class="number">0</span>, buffer.limit()));</span><br><span class="line">        <span class="comment">//给客户端回复数据</span></span><br><span class="line">        <span class="comment">//创建缓冲区，用来保存发送的数据</span></span><br><span class="line">        ByteBuffer buffer2 = ByteBuffer.wrap(<span class="string">"收到"</span>.getBytes());</span><br><span class="line">        <span class="comment">//使用通道将数据写给客户端</span></span><br><span class="line">        socketChannel.write(buffer2);</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        socketChannel.close();</span><br><span class="line">        serverSocketChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Selector选择器"><a href="#Selector选择器" class="headerlink" title="Selector选择器"></a>Selector选择器</h3><p>Selector选择器可以实现多路复用的效果。我们可以使用一个Selector监听三个服务器的状态，哪个服务器有客户端来请求了，那么我们就可以让哪个服务器去处理客户端的请求。</p>
<p>如何获取Selector选择器：</p>
<ul>
<li><code>static Selector open()</code>：获取一个选择器。</li>
</ul>
<p>如何将通道注册到选择器：</p>
<ul>
<li><p><code>channel.configureBlocking(false)</code>：将通道设置为非阻塞。</p>
</li>
<li><p><code>SelectionKey key = channel.register(selector,SelectionKey.OP_ACCEPT)</code>：参数selector表示选择器。<code>SelectionKey.OP_ACCEPT</code>表示监听服务器接受就绪事件。</p>
</li>
</ul>
<p>Selector选择器中的方法：</p>
<ul>
<li><p><code>Set&lt;SelectionKey&gt; keys()</code>：获取已经注册到选择器的通道（编号）并放入到Set集合中返回。 SelectionKey可以理解为通道的编号</p>
</li>
<li><p><code>Set&lt;SelectionKey&gt; selectedKeys()</code>: 获取已经连接的通道（编号）并放入到Set集合中返回。</p>
</li>
<li><p><code>int select()</code>：调用select方法后，程序会等着，一直到有客户端来连接。</p>
</li>
</ul>
<h4 id="Selector的基本使用"><a href="#Selector的基本使用" class="headerlink" title="Selector的基本使用"></a>Selector的基本使用</h4><p>要求：使用Selector选择器监听三个服务器的状态。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Selector</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建三个服务器，并将三个服务器设置为非阻塞</span></span><br><span class="line">        ServerSocketChannel serverSocketChannelOne = ServerSocketChannel.open();</span><br><span class="line">        serverSocketChannelOne.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">7777</span>));</span><br><span class="line">        serverSocketChannelOne.configureBlocking(<span class="keyword">false</span>);<span class="comment">//设置为非阻塞</span></span><br><span class="line"></span><br><span class="line">        ServerSocketChannel serverSocketChannelTwo = ServerSocketChannel.open();</span><br><span class="line">        serverSocketChannelTwo.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">8888</span>));</span><br><span class="line">        serverSocketChannelTwo.configureBlocking(<span class="keyword">false</span>);<span class="comment">//设置为非阻塞</span></span><br><span class="line"></span><br><span class="line">        ServerSocketChannel serverSocketChannelThree = ServerSocketChannel.open();</span><br><span class="line">        serverSocketChannelThree.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">9999</span>));</span><br><span class="line">        serverSocketChannelThree.configureBlocking(<span class="keyword">false</span>);<span class="comment">//设置为非阻塞</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取Selector选择器</span></span><br><span class="line">        Selector selector = Selector.open();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//让上面三个服务器通道注册到Selector选择器上</span></span><br><span class="line">        serverSocketChannelOne.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">        serverSocketChannelTwo.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">        serverSocketChannelThree.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//死循环，让程序一直执行(选择器一直监听服务器通道的状态)</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//调用选择器的select方法，等着客户端来连接服务器</span></span><br><span class="line">            selector.select();</span><br><span class="line">            <span class="comment">//如果程序向下执行，表示有客户端来连接了。就获取已经连接的服务器通道</span></span><br><span class="line">            Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class="line">            <span class="comment">//获取迭代器</span></span><br><span class="line">            Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();</span><br><span class="line">            <span class="comment">//遍历</span></span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                <span class="comment">//获取遍历到的元素</span></span><br><span class="line">                SelectionKey selectionKey = iterator.next();</span><br><span class="line">                <span class="comment">//通过selectionKey获取到通道</span></span><br><span class="line">                ServerSocketChannel serverSocketChannel = (ServerSocketChannel) selectionKey.channel();</span><br><span class="line">                <span class="comment">//让服务器监听客户端请求</span></span><br><span class="line">                SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line">                <span class="comment">//获取缓冲区，用来保存接收到的数据</span></span><br><span class="line">                ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">                <span class="comment">//进行读取</span></span><br><span class="line">                socketChannel.read(buffer);</span><br><span class="line">                <span class="comment">//缩小缓冲区的limit范围</span></span><br><span class="line">                buffer.flip();</span><br><span class="line">                <span class="comment">//输出读取到的内容</span></span><br><span class="line">                System.out.println(<span class="keyword">new</span> String(buffer.array(), <span class="number">0</span>, buffer.limit()));</span><br><span class="line">                <span class="comment">//客户端通道关闭</span></span><br><span class="line">                socketChannel.close();</span><br><span class="line">                <span class="comment">//如果某个服务器处理完了客户端请求，那么就从集合中删除。</span></span><br><span class="line">                iterator.remove();<span class="comment">//删除遍历的元素</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//获取SocketChannel</span></span><br><span class="line">                SocketChannel socketChannel = SocketChannel.open();</span><br><span class="line">                <span class="comment">//连接服务器</span></span><br><span class="line">                socketChannel.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">"localhost"</span>, <span class="number">7777</span>));</span><br><span class="line">                <span class="comment">//准备缓冲区，保存要发送的数据</span></span><br><span class="line">                ByteBuffer buffer = ByteBuffer.wrap(<span class="string">"我要连接7777"</span>.getBytes());</span><br><span class="line">                <span class="comment">//将数据发给服务器</span></span><br><span class="line">                socketChannel.write(buffer);</span><br><span class="line">                <span class="comment">//释放资源</span></span><br><span class="line">                socketChannel.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//获取SocketChannel</span></span><br><span class="line">                SocketChannel socketChannel = SocketChannel.open();</span><br><span class="line">                <span class="comment">//连接服务器</span></span><br><span class="line">                socketChannel.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">"localhost"</span>, <span class="number">8888</span>));</span><br><span class="line">                <span class="comment">//准备缓冲区，保存要发送的数据</span></span><br><span class="line">                ByteBuffer buffer = ByteBuffer.wrap(<span class="string">"我要连接8888"</span>.getBytes());</span><br><span class="line">                <span class="comment">//将数据发给服务器</span></span><br><span class="line">                socketChannel.write(buffer);</span><br><span class="line">                <span class="comment">//释放资源</span></span><br><span class="line">                socketChannel.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//获取SocketChannel</span></span><br><span class="line">                SocketChannel socketChannel = SocketChannel.open();</span><br><span class="line">                <span class="comment">//连接服务器</span></span><br><span class="line">                socketChannel.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">"localhost"</span>, <span class="number">9999</span>));</span><br><span class="line">                <span class="comment">//准备缓冲区，保存要发送的数据</span></span><br><span class="line">                ByteBuffer buffer = ByteBuffer.wrap(<span class="string">"我要连接9999"</span>.getBytes());</span><br><span class="line">                <span class="comment">//将数据发给服务器</span></span><br><span class="line">                socketChannel.write(buffer);</span><br><span class="line">                <span class="comment">//释放资源</span></span><br><span class="line">                socketChannel.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="AIO"><a href="#AIO" class="headerlink" title="AIO"></a>AIO</h3><p>AIO有关的通道：</p>
<ul>
<li><p><code>AsynchronousSocketChannel</code>：TCP中的客户端异步通道</p>
</li>
<li><p><code>AsynchronousServerSocketChannel</code>：TCP中的服务器异步通道</p>
</li>
<li><p><code>AsynchronousFileChannel</code>：文件操作的异步通道</p>
</li>
<li><p><code>AsynchronousDatagramChannel</code>：UDP通信异步通道</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//获取一个异步服务器通道</span></span><br><span class="line">        AsynchronousServerSocketChannel asynchronousServerSocketChannel = AsynchronousServerSocketChannel.open();</span><br><span class="line">        <span class="comment">//绑定端口号</span></span><br><span class="line">        asynchronousServerSocketChannel.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">8888</span>));</span><br><span class="line">        <span class="comment">//监听客户端的请求</span></span><br><span class="line">        Future&lt;AsynchronousSocketChannel&gt; accept = asynchronousServerSocketChannel.accept();</span><br><span class="line">        <span class="comment">//调用get方法，获取服务器监听到的客户端通道</span></span><br><span class="line">        AsynchronousSocketChannel asynchronousSocketChannel = accept.get();</span><br><span class="line">        <span class="comment">//创建ByteBuffer缓冲区，用来接收读取到的数据</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        <span class="comment">//调用read方法进行读取</span></span><br><span class="line">        Future&lt;Integer&gt; readFuture = asynchronousSocketChannel.read(buffer);</span><br><span class="line">        <span class="comment">//判断如果read方法没有读取结束，那么就去干一些其他事情</span></span><br><span class="line">        <span class="keyword">if</span> (!readFuture.isDone()) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//缩小缓冲区limit限制</span></span><br><span class="line">        buffer.flip();</span><br><span class="line">        <span class="comment">//输出读取到的结果</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(buffer.array(), <span class="number">0</span>, buffer.limit()));</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        asynchronousSocketChannel.close();</span><br><span class="line">        asynchronousServerSocketChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    AsynchronousSocketChannel：TCP中的客户端异步通道</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//获取客户端异步通道</span></span><br><span class="line">        AsynchronousSocketChannel asynchronousSocketChannel = AsynchronousSocketChannel.open();</span><br><span class="line">        <span class="comment">//连接服务器</span></span><br><span class="line">        Future&lt;Void&gt; future = asynchronousSocketChannel.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">"localhost"</span>, <span class="number">8888</span>));</span><br><span class="line">        <span class="comment">//判断如果连接没有建立成功，就做一些其他事情</span></span><br><span class="line">        <span class="keyword">if</span>(!future.isDone()) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//让客户端给服务器发送数据</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.wrap(<span class="string">"你好"</span>.getBytes());</span><br><span class="line">        <span class="comment">//调用方法，发送数据</span></span><br><span class="line">        asynchronousSocketChannel.write(buffer);</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        asynchronousSocketChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>学习</tag>
        <tag>NIO</tag>
        <tag>AIO</tag>
      </tags>
  </entry>
  <entry>
    <title>反射、注解、动态代理</title>
    <url>/2020/08/11/%E5%8F%8D%E5%B0%84%E3%80%81%E6%B3%A8%E8%A7%A3%E3%80%81%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h2 id="一、类加载器"><a href="#一、类加载器" class="headerlink" title="一、类加载器"></a>一、类加载器</h2><h3 id="1-1-类的加载时机"><a href="#1-1-类的加载时机" class="headerlink" title="1.1 类的加载时机"></a>1.1 类的加载时机</h3><p>当我们第一次使用某个类时，这个类会加载到方法区。</p>
<ul>
<li>创建类的实例(创建对象)</li>
<li>类的静态变量，或者为静态变量赋值</li>
<li>类的静态方法</li>
<li>使用反射方式来强制创建某个类或接口对象的<code>java.lang.Class</code>对象。</li>
<li>初始化某个类的子类</li>
<li>直接使用java.exe命令来运行某个主类</li>
</ul>
<p>以上六种情况的任何一种，都可以导致JVM将一个类加载到方法区。</p>
<a id="more"></a>

<h3 id="1-2-类的加载机制"><a href="#1-2-类的加载机制" class="headerlink" title="1.2 类的加载机制"></a>1.2 类的加载机制</h3><p>Java中有三种类加载器，它们分别用于加载不同种类的class：</p>
<ul>
<li>启动类加载器(Bootstrap ClassLoader)：用于加载系统类库\bin目录下的 class，例如：rt.jar。</li>
<li>扩展类加载器(Extension ClassLoader)：：用于加载扩展类库<JAVA_HOME>\lib\ext目录下的<br>  class。</li>
<li>应用程序类加载器(Application ClassLoader)：用于加载我们自定义类的加载器。</li>
</ul>
<h4 id="1-2-1-双亲委派机制"><a href="#1-2-1-双亲委派机制" class="headerlink" title="1.2.1 双亲委派机制"></a>1.2.1 双亲委派机制</h4><p><img data-src="/image/%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%88%B6.png" alt="双亲委派机制"></p>
<h2 id="二、反射"><a href="#二、反射" class="headerlink" title="二、反射"></a>二、反射</h2><h3 id="1-1-反射的概念"><a href="#1-1-反射的概念" class="headerlink" title="1.1 反射的概念"></a>1.1 反射的概念</h3><ul>
<li>反射是一种机制，利用该机制可以在程序运行过程中对类进行解剖并操作类中的所有成员(成员变量，成员方<br>  法，构造方法)</li>
</ul>
<blockquote>
<p>使用反射的前提：要获得该类字节码文件对象，就是Class对象。</p>
<p>反射的应用：</p>
<ul>
<li>开发IDE(集成开发环境)，比如IDEA,Eclipse</li>
<li>各种框架的设计和学习 比如Spring，Hibernate，Mybaits….</li>
</ul>
</blockquote>
<p>反射图解：</p>
<p><img data-src="/image/%E5%8F%8D%E5%B0%84.png" alt="反射"></p>
<h3 id="1-2-获取Class对象的三种方式"><a href="#1-2-获取Class对象的三种方式" class="headerlink" title="1.2 获取Class对象的三种方式"></a>1.2 获取Class对象的三种方式</h3><ol>
<li><p>通过对象调用getClass方法获取</p>
<ul>
<li><code>Class getClass()</code>:获取类的Class对象</li>
</ul>
</li>
<li><p>通过类名调用Class属性获取</p>
<ul>
<li><code>类名.class</code></li>
</ul>
</li>
<li><p>通过Class的静态方法forName获取</p>
<ul>
<li><code>static Class forName(String className)</code>：根据全类名获取对应的Class对象</li>
</ul>
</li>
</ol>
<p>代码示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01GetClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        Class&lt;? extends Person&gt; pClass = p.getClass();</span><br><span class="line">        System.out.println(pClass);</span><br><span class="line"></span><br><span class="line">        Class personClass = Person<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        System.out.println(personClass);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">"com.sun.demo02_reflect.Person"</span>);</span><br><span class="line">        System.out.println(aClass);</span><br><span class="line"></span><br><span class="line">        System.out.println(pClass == personClass);</span><br><span class="line">        System.out.println(aClass == personClass);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小贴士：</p>
<ul>
<li>一个类的Class对象只有一个，不管怎么获取，获取的都是同一个。</li>
</ul>
</blockquote>
<h4 id="1-2-1-Class中的常见方法"><a href="#1-2-1-Class中的常见方法" class="headerlink" title="1.2.1 Class中的常见方法"></a>1.2.1 Class中的常见方法</h4><ul>
<li><code>String getName()</code>:获取全限定类名(包名+类名)</li>
<li><code>String getSimpleName()</code>:获取简单类名</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Method</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取Person类的Class</span></span><br><span class="line">        Class personClass = Person<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        <span class="comment">//String getName():获取全限定类名</span></span><br><span class="line">        System.out.println(personClass.getName());</span><br><span class="line">        <span class="comment">//String getSimpleName():获取简单类名</span></span><br><span class="line">        System.out.println(personClass.getSimpleName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1-3-反射之操作构造函数"><a href="#1-3-反射之操作构造函数" class="headerlink" title="1.3 反射之操作构造函数"></a>1.3 反射之操作构造函数</h3><p><code>Class</code>中有一些方法，可以拿到类中的<code>构造方法</code></p>
<ul>
<li><code>Constructor[] getConstructors()</code>：获取类中所有的构造方法</li>
<li><code>Constructor getConstructors(Class... parameterTypes)</code>：获取类中指定的构造方法。参数表示要获取的构造方法的参数列表</li>
</ul>
<blockquote>
<p>注意：上面的方法，只能获取public权限的方法，其他权限获取不到</p>
</blockquote>
<p><code>Constructor</code>常用方法：</p>
<ul>
<li>T newInstance(Object… initargs)：通过该构造方法创建对象。<ul>
<li>参数initargs：通过构造方法创建对象时传递的<strong>实际参数</strong></li>
<li>返回值：创建出来的对象</li>
</ul>
</li>
</ul>
<p>代码演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03Constructor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException </span>&#123;</span><br><span class="line">        <span class="comment">//method1();</span></span><br><span class="line">        <span class="comment">//method2();</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructor getConstructors(Class... parameterTypes)：获取类中指定的构造方法。参数表示要获取的构造方法的参数列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 获取空参的构造方法并使用构造方法创建对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line">        Class&lt;?&gt; personClass = Class.forName(<span class="string">"com.sun.demo02_reflect.Person"</span>);</span><br><span class="line">        <span class="comment">//因为没有传递任何参数，所以获取的是空参数的构造方法</span></span><br><span class="line">        Constructor&lt;?&gt; constructor = personClass.getConstructor();</span><br><span class="line">        <span class="comment">//newInstance小括号表示调用构造方法时的实际参数，因为调用的时空参数的构造方法，所有没有实际参数</span></span><br><span class="line">        Object obj = constructor.newInstance();</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructor[] getConstructors()：获取类中所有的构造方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        Class personClass = Class.forName(<span class="string">"com.sun.demo02_reflect.Person"</span>);</span><br><span class="line">        Constructor[] cs = personClass.getConstructors();</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Constructor c : cs) &#123;</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>获取带参数的构造方法：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04Constructor</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过反射获取Person类的带参数的构造方法，并根据该方法创建对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line">        Class&lt;?&gt; personClass = Class.forName(<span class="string">"com.sun.demo02_reflect.Person"</span>);</span><br><span class="line">        <span class="comment">//因为getConstructor第一个参数是String.class,第二个参数是int.class，所以表示获取的第一个参数为字符串，第二个参数为int的构造方法</span></span><br><span class="line">        Constructor&lt;?&gt; c = personClass.getConstructor(String<span class="class">.<span class="keyword">class</span>, <span class="title">int</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        <span class="comment">//根据该构造方法创建对象，因为在调用nreInstance方法的时候传递的两个参数分别是张三，18，所以表示调用构造方法时传递的实际参数为张三，18</span></span><br><span class="line">        Object obj = c.newInstance(<span class="string">"张三"</span>, <span class="number">18</span>);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-3-1-newInstance"><a href="#1-3-1-newInstance" class="headerlink" title="1.3.1 newInstance"></a>1.3.1 newInstance</h4><p>在Class中有一个方法叫newInstance,，可以十分方便的创建对象</p>
<ul>
<li><code>T newInstance()</code>:使用空参数的构造方法创建对象</li>
</ul>
<p>如果通过空参数的构造方法创建对象，那么不需要像之前那样先获取构造方法，然后通过构造方法创建对象了。</p>
<p>我们可以通过Class直接调用newInstance方法，利用空参数构造方法创建对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06NewInstance</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException </span>&#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">"com.sun.demo02_reflect.Person"</span>);</span><br><span class="line"></span><br><span class="line">        Object obj = clazz.newInstance();</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1-4-暴力反射"><a href="#1-4-暴力反射" class="headerlink" title="1.4 暴力反射"></a>1.4 暴力反射</h3><p>暴力反射：暴力反射可以<strong>获取</strong>类中<strong>任何权限</strong>的内容并使用。</p>
<blockquote>
<p>不推荐使用暴力反射，会破坏封装性</p>
</blockquote>
<p> 在Class中，有一些方法可以获取到类中的所有权限的构造方法：</p>
<ul>
<li><code>Constructor[] getDeclaredConstructors()</code>：获取类中所有的构造方法</li>
<li><code>Constructor getDeclaredConstructor(Class... parameterTypes)</code>：获取类中指定的构造方法，参数是构造方法的参数列表</li>
</ul>
<blockquote>
<p>上面的方法可以获取到任何权限的构造方法。</p>
<p>注意：通过上面的方法虽然可以获取到私有的成员，但是不能直接使用。因为Java中有一个权限检查机制，私有的东西是不能在外面使用的。我们可以取消这个权限检查机制。</p>
</blockquote>
<p>反射有关的类：</p>
<ul>
<li>Constructor：构造方法</li>
<li>Method：成员方法</li>
<li>Field：成员变量</li>
</ul>
<p>上面这三个类都有一个父类叫做AccessibleObject，在AccessibleObject中有一个方法可以取消检查机制。</p>
<ul>
<li><code>void setAccessible(boolean flag)</code>：如果参数是true表示取消权限检查</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05Constructor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException </span>&#123;</span><br><span class="line">        <span class="comment">//method();</span></span><br><span class="line">        method2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException, ClassNotFoundException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">"com.sun.demo02_reflect.Person"</span>);</span><br><span class="line">        Constructor&lt;?&gt; c = aClass.getDeclaredConstructor(String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//取消权限检查</span></span><br><span class="line">        c.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object obj = c.newInstance(<span class="string">"张三"</span>);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        Class aClass = Class.forName(<span class="string">"com.sun.demo02_reflect.Person"</span>);</span><br><span class="line">        Constructor[] dcs = aClass.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor dc : dcs) &#123;</span><br><span class="line">            System.out.println(dc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1-5-反射之操作成员方法"><a href="#1-5-反射之操作成员方法" class="headerlink" title="1.5 反射之操作成员方法"></a>1.5 反射之操作成员方法</h3><p>在Class中有一些功能，可以获取类中的成员方法</p>
<ul>
<li><code>Method[] getMethods()</code>:获取类中的所有成员方法</li>
<li><code>Method getMethod(String name, Class... parameterTypes)</code>：获取指定的成员方法。参数name表示要获取的方法的名字。参数parameterTypes表示方法的参数列表</li>
</ul>
<blockquote>
<p>注意：上面的的两个方法只能获取public权限的方法，不能获取其他权限</p>
<p><strong>如果想要获取其他权限的方法，需要使用暴力反射</strong></p>
</blockquote>
<p>其中Method表示方法，里面的功能：</p>
<ul>
<li><code>Object invoke(Object obj, Object... args)</code>:让该方法执行<ul>
<li>参数obj：表示通过哪个对象调用了该方法。如果是静态方法，该参数可以传递null</li>
<li>参数args：调用该方法时，传递的实际参数</li>
<li>返回值：表示方法调用后的返回值。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo07Method</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//method();</span></span><br><span class="line">        method1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Method getMethod(String name, Class... parameterTypes)：获取指定的成员方法。</span></span><br><span class="line"><span class="comment">     * 参数name表示要获取的方法的名字。参数parameterTypes表示方法的参数列表</span></span><br><span class="line"><span class="comment">     * 获取sleep方法并执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, InstantiationException </span>&#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">"com.sun.demo02_reflect.Person"</span>);</span><br><span class="line">        <span class="comment">//第一个参数表示方法的名字，</span></span><br><span class="line">        <span class="comment">//第二个参数时可变参数，该参数位置没有传递任何东西，表示获取的方法时空参数的方法</span></span><br><span class="line">        Method sleepMethod = clazz.getMethod(<span class="string">"sleep"</span>);</span><br><span class="line">        <span class="comment">//创建Person对象，以后调用方法时使用</span></span><br><span class="line">        Object obj = clazz.newInstance();</span><br><span class="line">        <span class="comment">//调用方法invoke，让sleep方法执行</span></span><br><span class="line">        <span class="comment">//因为通过sleepMethod调用了invoke方法，sleepMethod对象表示的时sleep方法，所有sleep方法执行了</span></span><br><span class="line">        <span class="comment">// 因为invoke方法第一个参数传递的时obj，表示obj调用了sleep</span></span><br><span class="line">        <span class="comment">// 因为invoke方法第二个参数没有传递任何数据，所以表示调用sleep方法时，没有传递任何内容，</span></span><br><span class="line">        sleepMethod.invoke(obj); <span class="comment">//相当于 obj.sleep()</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Method[] getMethods():获取类中的所有成员方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassNotFoundException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">"com.sun.demo02_reflect.Person"</span>);</span><br><span class="line">        Method[] methods = clazz.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>操作有参数有返回值的成员方法</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo08Method</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException </span>&#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">"com.sun.demo02_reflect.Person"</span>);</span><br><span class="line">        Method m = clazz.getMethod(<span class="string">"eat"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Object obj = m.invoke(clazz.newInstance(), <span class="string">"馒头"</span>);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>Person类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"睡觉觉。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">eat</span><span class="params">(String food)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"吃"</span> + food);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"粑粑"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Person</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    set\get略...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1-6-反射操作成员变量【了解】"><a href="#1-6-反射操作成员变量【了解】" class="headerlink" title="1.6 反射操作成员变量【了解】"></a>1.6 反射操作成员变量【了解】</h3><p>在Class中有一些方法可以获取到类中的成员变量</p>
<ul>
<li><code>Field[] getFields()</code>：获取类中所有的成员变量</li>
<li><code>Field getField(String name)</code>：获取类中指定的成员变量，参数是成员变量的名字。</li>
</ul>
<blockquote>
<p>上面的两个方法只能获取public权限的成员变量，其他权限无法获取。</p>
<p><strong>如果想要获取其他权限的方法，需要使用暴力反射</strong></p>
</blockquote>
<p>Field表示成员变量，里面功能：</p>
<ul>
<li>void set(Object obj, Object value):给成员变量赋值。<ul>
<li>参数obj：表示给哪个对象的成员变量赋值。</li>
<li>参数value：将该成员变量赋成什么值</li>
</ul>
</li>
<li>Object get(Object obj)：获取成员变量的值。<ul>
<li>参数obj：表示获取哪个对象的成员变量的值。</li>
<li>返回值：获取到的结果</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo09ReflectField</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取Person类的hobby属性，然后进行赋值取值操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException, InstantiationException </span>&#123;</span><br><span class="line">        <span class="comment">//获取Person类的Class</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.itheima.demo01_reflect.Person"</span>);</span><br><span class="line">        <span class="comment">//获取Person类中的hobby属性</span></span><br><span class="line">        Field field = clazz.getField(<span class="string">"hobby"</span>);</span><br><span class="line">        <span class="comment">//创建Person对象</span></span><br><span class="line">        Object obj = clazz.newInstance();</span><br><span class="line">        <span class="comment">//给对象hobby属性赋值</span></span><br><span class="line">        field.set(obj, <span class="string">"写代码"</span>); <span class="comment">//相当于 obj.hobby = "写代码";</span></span><br><span class="line">        System.out.println(obj);</span><br><span class="line">        <span class="comment">//获取hobby属性的值</span></span><br><span class="line">        <span class="comment">//获取obj的hobby属性的值</span></span><br><span class="line">        Object result = field.get(obj);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1-7-反射练习"><a href="#1-7-反射练习" class="headerlink" title="1.7 反射练习"></a>1.7 反射练习</h3><p>要求：将类名和方法名放到文件中，通过读取文件的方式决定创建哪个类的对象以及调用哪个方法</p>
<p>步骤：</p>
<ol>
<li>创建配置文件，保存类名和方法名</li>
<li>创建Properties集合</li>
<li>创建输入流</li>
<li>调用load方法，将文件的键值对加载到集合中</li>
<li>调用Properties集合根据建获取值</li>
<li>获取该类的Class文件</li>
<li>通过Class调用getMethod，获取对应的方法</li>
<li>让方法执行</li>
</ol>
<p>代码示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException, IOException </span>&#123;</span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">        FileInputStream in = <span class="keyword">new</span> FileInputStream(<span class="string">"day17\\prop.properties"</span>);</span><br><span class="line">        prop.load(in);</span><br><span class="line">        in.close();</span><br><span class="line">        Class&lt;?&gt; name = Class.forName(prop.getProperty(<span class="string">"className"</span>));</span><br><span class="line">        Method m = name.getMethod(prop.getProperty(<span class="string">"methodName"</span>));</span><br><span class="line">        Object obj = name.newInstance();</span><br><span class="line">        Object invoke = m.invoke(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"老师讲课..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"学生学习..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置文件内容</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">className</span> = <span class="string">com.sun.demo03_reflect_test.Student</span></span><br><span class="line"><span class="attr">methodName</span> = <span class="string">study</span></span><br></pre></td></tr></table></figure>



<h2 id="三、注解"><a href="#三、注解" class="headerlink" title="三、注解"></a>三、注解</h2><h3 id="3-1-注解介绍"><a href="#3-1-注解介绍" class="headerlink" title="3.1 注解介绍"></a>3.1 注解介绍</h3><ul>
<li><p>注解是JDK1.5开始有的</p>
</li>
<li><p>注解可以加在<strong>类</strong>上，<strong>方法</strong>上，<strong>变量</strong>上</p>
</li>
<li><p>程序可以根据注解完成一些功能</p>
</li>
</ul>
<blockquote>
<p>注释和注解：</p>
<ul>
<li>注释：是给程序员看的，注释不会被编译执行</li>
<li>注解：是给程序看的，程序可以根据注解完成一些功能</li>
</ul>
</blockquote>
<p><strong>常见的注解：</strong></p>
<ul>
<li><code>@Override</code>：该注解用来验证一个方法是否重写父类的方法</li>
<li><code>@FunctionalInterface</code>：该注解用来验证一个接口是否是函数式接口。</li>
<li><code>@Deprecated</code>：标记已过时</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Anno</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        method();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"method..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-2-自定义注解"><a href="#3-2-自定义注解" class="headerlink" title="3.2 自定义注解"></a>3.2 自定义注解</h3><p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> 注解名&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在注解中可以提供一些属性，格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数据类型 属性名();</span><br><span class="line">数据类型 属性名() <span class="keyword">default</span> 默认值;</span><br></pre></td></tr></table></figure>

<p><strong>注意，注解的属性只能是下面这个类型：</strong></p>
<ul>
<li>八种基本类型 byte short int long float double char boolean</li>
<li>String，Class，枚举，注解</li>
<li>以上所有类型的数组</li>
</ul>
<p><strong>注解的使用格式</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">@注解名</span><br><span class="line">@注解名(属性名<span class="number">1</span>=属性值<span class="number">1</span>,属性名<span class="number">2</span>=属性值,...)</span><br></pre></td></tr></table></figure>



<p>代码示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Student &#123;</span><br><span class="line">    <span class="comment">//姓名</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//年龄</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line">    <span class="comment">//爱好</span></span><br><span class="line">    String[] hobbies();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Anno</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Student</span>(name = <span class="string">"张三"</span>,hobbies = &#123;<span class="string">"唱"</span>,<span class="string">"跳"</span>,<span class="string">"rap"</span>,<span class="string">"篮球"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-1-注解使用的注解事项"><a href="#3-2-1-注解使用的注解事项" class="headerlink" title="3.2.1 注解使用的注解事项"></a>3.2.1 注解使用的注解事项</h4><ul>
<li>如果注解中有属性没有默认值，那么在使用时，必须给这些属性赋值</li>
<li>如果注解中的属性有默认值，那么在使用注解时，可以不赋值</li>
<li>如果直接的属性是数组类型，那么在赋值时可以用大括号包裹多个元素</li>
<li>如果注解的属性是数组类型时，并且只赋值一个元素的情况下，可以省略大括号</li>
</ul>
<h4 id="3-2-2-注解中的特殊属性value"><a href="#3-2-2-注解中的特殊属性value" class="headerlink" title="3.2.2 注解中的特殊属性value"></a>3.2.2 注解中的特殊属性value</h4><p><strong>如果注解中只有一个没有默认值的属性，并且这个属性叫做value，那么在给该属性赋值时，可以省略属性名，否则必须写全。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Book &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供value属性：表示书名</span></span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @Book(value = "Java")</span></span><br><span class="line"><span class="meta">@Book</span>(<span class="string">"Java"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03Anno</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-3-元注解"><a href="#3-3-元注解" class="headerlink" title="3.3 元注解"></a>3.3 元注解</h3><h4 id="3-3-1-介绍"><a href="#3-3-1-介绍" class="headerlink" title="3.3.1 介绍"></a>3.3.1 介绍</h4><ul>
<li>元注解本身就是注解</li>
<li>元注解是修饰注解的注解</li>
</ul>
<p><strong>常见的元注解：</strong></p>
<ul>
<li><code>@Target</code>：用来限制注解的使用位置</li>
<li><code>@Retention</code>：用来限制注解的生命周期</li>
</ul>
<h4 id="3-3-2-Target"><a href="#3-3-2-Target" class="headerlink" title="3.3.2 @Target"></a>3.3.2 @Target</h4><p><code>@Target</code>是一个元注解</p>
<p><strong>作用：</strong>这个元注解用来限制注解的使用位置。如果某个注解<strong>不使用@Target进行修饰</strong>，那么这个注解<strong>可以用在任何位置</strong>（类上,方法上,变量上…）</p>
<p>在@Target这个元注解中，只有一个属性叫做value，那么在给该属性赋值时，可以省略属性名。value属性表示被修饰的注解可以在哪个位置使用</p>
<ul>
<li>这个value是ElementType数组类型的，ElementType是枚举类型，枚举就是特殊的类，枚举中的每一个属性都是自身的一个对象</li>
<li>在给value属性赋值时，我们需要使用<strong>ElementType</strong>中的<strong>属性</strong>，每一个属性都有自己的作用：<ul>
<li><code>ElementType.TYPE</code>，类、接口</li>
<li><code>ElementType.FIELD</code>，成员变量</li>
<li><code>ElementType.METHOD</code>，成员方法</li>
<li><code>ElementType.PARAMETER</code>，方法参数</li>
<li><code>ElementType.CONSTRUCTOR</code>，构造方法</li>
<li><code>ElementType.LOCAL_VARIABLE</code>，局部变量</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @Target(ElementType.TYPE) //被修饰的注解只能用在类上</span></span><br><span class="line"><span class="comment">// @Target(ElementType.METHOD) //被修饰的注解只能用在方法上</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE,ElementType.METHOD&#125;)  <span class="comment">//被修饰的注解可以用在类以及方法上，</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnno &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-3-3-Retention"><a href="#3-3-3-Retention" class="headerlink" title="3.3.3 @Retention"></a>3.3.3 @Retention</h4><p><code>@Retention</code>这个元注解设置注解的生命周期，如果某个注解不使用@Retention进行修饰，那么该注解在源代码阶段以及编译后的.class中有效，一旦运行，就会消失。</p>
<p>@Retention里面有一个属性叫做value，该属性表示被修饰的注解的生命周期，这个value是RetentionPolicy类型的</p>
<ul>
<li>RetentionPolicy是枚举类型，我们使用@Retention元注解时，可以给value属性赋值为<strong>RetentionPolicy属性值</strong>：<ul>
<li><code>RetentionPolicy.SOURCE</code>:被修饰的注解只在源代码中有效，在编译后的.class以及运行时期内存中是没有的</li>
<li><code>RetentionPolicy.CLASS</code>：被修饰的注解在源代码阶段以及编译后的class文件中有效，在运行时器内存中是没有的【<strong>默认值</strong>】</li>
<li><code>RetentionPolicy.RUNTIME</code>：被修饰的注解，在源代码阶段和以及编译后的class文件、运行时器内存中都有效。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.SOURCE) <span class="comment">//被修饰的注解只在源代码阶段有效</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnno &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.CLASS) <span class="comment">//被修饰的注解在源代码阶段和class文件中有效</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnno2 &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME) <span class="comment">//被修饰的注解在任何时候都有效</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnno3&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-4-注解的解析"><a href="#3-4-注解的解析" class="headerlink" title="3.4 注解的解析"></a>3.4 注解的解析</h3><p><strong>注解解析</strong>：就是获取注解中的内容【属性】，然后使用。</p>
<p><strong>解析相关API：</strong></p>
<ul>
<li><p><code>Annotation</code>：是所有注解的跟接口，所有的注解都会默认实现这个接口</p>
</li>
<li><p><code>AnnotatedElement</code>：这个接口定义了操作注解的方法</p>
<ul>
<li><code>Annotation[] getAnnotations()</code>：获取所有的注解</li>
<li><code>T getAnnotation(Class annotationClass)</code>：获取指定的注解。参数表示注解的CLass</li>
<li><code>boolean isAnnotationPresent(Class annotationClass)</code>：判断是否存在指定的注解，参数是注解的Class</li>
</ul>
</li>
</ul>
<blockquote>
<p>反射有关的类：Class、Constructor、Method、Filed 都实现了AnnotatedElement这个接口。</p>
</blockquote>
<p>注解的解析要结合反射技术实现：</p>
<ul>
<li>如果要操作类上的注解，通过Class对象调用上面的方法进行操作</li>
<li>如果要操作构造方法上的注解，通过Constructor对象调用上面的方法进行操作</li>
<li>如果要操作成员方法上的注解，通过Method对象调用上面的方法进行操作</li>
</ul>
<h4 id="3-4-1-练习"><a href="#3-4-1-练习" class="headerlink" title="3.4.1 练习"></a>3.4.1 练习</h4><p>要求：</p>
<ul>
<li>定义一个Book注解类里面定义一些属性</li>
<li>定义一个BookStore类，在该类上加上定义好的注解。</li>
<li>获取注解的属性并输出</li>
</ul>
<p>分析：获取BookStore类上面的注解，可以先获取BookStore对象的CLass对象，通过Class对象调用注解解析有关的方法就是在操作BookStore类上的注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)<span class="comment">//设置注解在运行时也有效</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Book &#123;</span><br><span class="line">    <span class="comment">//书名</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//价格</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">price</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//作者</span></span><br><span class="line">    <span class="function">String <span class="title">author</span><span class="params">()</span> <span class="keyword">default</span> "佚名"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Book</span>(name = <span class="string">"水浒传"</span>,price = <span class="number">100</span>,author = <span class="string">"施耐庵"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookStore</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01ParseAnno</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.sun.demo07_parse_anno.BookStore"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> flag = clazz.isAnnotationPresent(Book<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(flag);</span><br><span class="line">        <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">            <span class="comment">//条件成立，表示BookStore上有注解，那么就可以获取注解</span></span><br><span class="line">            Annotation anno = clazz.getAnnotation(Book<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="comment">//向下转型，将Annotation向下转成Book</span></span><br><span class="line">            Book book = (Book) anno;</span><br><span class="line">            <span class="comment">//获取属性</span></span><br><span class="line">            System.out.println(book.name());</span><br><span class="line">            System.out.println(book.author());</span><br><span class="line">            System.out.println(book.price());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：在定义注解时一定要指定注解的生命周期，不然则默认使用RetentionPolicy.CLASS属性值，导致解析不到，因为注解并没有跟随程序进入运行内存，需要指定生命周期为@Retention(RetentionPolicy.RUNTIME)，运行时也有效，才能被解析到。</p>
</blockquote>
<h3 id="3-5-练习——模拟单元测试"><a href="#3-5-练习——模拟单元测试" class="headerlink" title="3.5 练习——模拟单元测试"></a>3.5 练习——模拟单元测试</h3><p>要求：自定义@MyTest注解，然后在一个类中的多个方法上使用@MyTest注解，然后运行带有@MyTest注解的方法。</p>
<p>步骤：</p>
<ol>
<li>获取TestDemo的Class对象<ol start="2">
<li>创建TestDemo对象</li>
</ol>
</li>
<li>通过Class对象调用getMethods获取所有的成员方法</li>
<li>遍历这些成员方法，拿到里面的每一个方法（Method）</li>
<li>判断该方法上有没有@MyTest注解。</li>
<li>如果有该注解，就让这个方法执行。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.METHOD) <span class="comment">//限制该注解只能用在方法上</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME) <span class="comment">//在运行时内存中也有效</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyTest &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"methodOne"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@MyTest</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodTwo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"methodTwo"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodThree</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"methodThree"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@MyTest</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodFour</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"methodFour"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodFive</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"methodFive"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalAccessException, InstantiationException, ClassNotFoundException, InvocationTargetException </span>&#123;</span><br><span class="line">        Class testDemo = Class.forName(<span class="string">"com.sun.demo08_anno_test.TestDemo"</span>);</span><br><span class="line">        Object obj = testDemo.newInstance();</span><br><span class="line">        Method[] methods = testDemo.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> flag = method.isAnnotationPresent(MyTest<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">                method.invoke(obj);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="四、动态代理"><a href="#四、动态代理" class="headerlink" title="四、动态代理"></a>四、动态代理</h2><p><strong>动态代理</strong>：可以对一个类(对象)的功能进行<strong>增强</strong>。</p>
<ul>
<li>动态：会在程序运行过程中，创建一个代理类以及对象</li>
<li>代理：会创建一个代理对象对原有的对象进行增强。</li>
</ul>
<p>在Proxy类中有一个方法，叫做<code>newProxyInstance</code>，这个方法可以创建一个代理对象：</p>
<ul>
<li><code>static Object newProxyInstance(ClassLoader loader, Class[] interfaces, InvocationHandler h)</code>：该方法可以创建动态代理对象并返回<ul>
<li><code>参数loader</code>：表示类加载器，<strong>固定写法，当前类.class.getClassLoader();</strong></li>
<li><code>参数interfaces</code>：代理对象实现的接口.这些接口一般与被代理对象实现的接口一致。<strong>固定写法：被代理对象.getClass.getInterfaces();</strong></li>
<li><code>参数h</code>：参数时InvocationHandle类型，表示执行处理类(真正是接口)，里面有一个<strong>方法叫做invoke</strong></li>
</ul>
</li>
</ul>
<p><code>Object invoke(Object proxy, Method method, Object[] args)</code>：<strong>这个invoke方法会在每次动态代理对象调用任何方法的时候执行</strong></p>
<ul>
<li><strong>参数proxy：表示代理对象</strong></li>
<li><strong>参数method：代理对象调用的方法</strong></li>
<li><strong>参数args：代理对象调用方法时的实际参数</strong></li>
<li><strong>返回值：代理对象调用方法后产出结果</strong></li>
</ul>
<p>代码演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 小汽车接口，里面定义了小汽车的功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Carable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跑</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 说话</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">say</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">implements</span> <span class="title">Carable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"小汽车在跑..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"有人按喇叭了..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"滴滴"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01ProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Carable car = <span class="keyword">new</span> Car();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个动态代理对象【对Car进行代理，进行增强】</span></span><br><span class="line">        Carable superCar = (Carable) Proxy.newProxyInstance(Demo01ProxyTest<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>(), <span class="title">car</span>.<span class="title">getClass</span>().<span class="title">getInterfaces</span>(), <span class="title">new</span> <span class="title">InvocationHandler</span>() </span>&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="comment">//判断调用的方法是不是run,如果是run，在正确</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"run"</span>.equals(method.getName()))&#123;</span><br><span class="line">                    System.out.println(<span class="string">"跑着跑着飞起来了"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//System.out.println(method);</span></span><br><span class="line">                <span class="comment">//通过被代理对象调用method方法，让方法去执行[放行操作]</span></span><br><span class="line">                Object obj = method.invoke(car,args);</span><br><span class="line">                <span class="keyword">return</span> obj;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        superCar.run();</span><br><span class="line">        String result = superCar.say();</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>反射</tag>
        <tag>注解</tag>
        <tag>动态代理</tag>
      </tags>
  </entry>
  <entry>
    <title>XML、dom4j、JDK8新特性</title>
    <url>/2020/08/12/XML%E3%80%81dom4j%E3%80%81JDK8%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h2 id="一、XML"><a href="#一、XML" class="headerlink" title="一、XML"></a>一、XML</h2><h3 id="1-1-xml介绍"><a href="#1-1-xml介绍" class="headerlink" title="1.1 xml介绍"></a>1.1 xml介绍</h3><p>Extensible markup language：可扩展标记语言</p>
<ul>
<li>可扩展：标签都是自定义的</li>
</ul>
<p><strong>作用：存储数据，传输数据</strong></p>
<a id="more"></a>

<h3 id="1-2-xml语法"><a href="#1-2-xml语法" class="headerlink" title="1.2 xml语法"></a>1.2 xml语法</h3><h4 id="1-2-1-文档声明"><a href="#1-2-1-文档声明" class="headerlink" title="1.2.1 文档声明"></a>1.2.1 文档声明</h4><p>格式：</p>
<ul>
<li><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</code></li>
</ul>
<p>注意：</p>
<ul>
<li>必须以 <code>&lt;?xml</code> 开头，以 <code>?&gt;</code> 结尾</li>
<li>文档声明必须放到xml的<strong>第一行</strong></li>
<li>文档声明可以省略</li>
<li>文档声明有两个属性<ul>
<li>version:表示版本号</li>
<li>encoding:表示编码</li>
</ul>
</li>
</ul>
<h4 id="1-2-2-元素"><a href="#1-2-2-元素" class="headerlink" title="1.2.2 元素"></a>1.2.2 元素</h4><p>格式：</p>
<ul>
<li><code>&lt;元素名&gt;&lt;/元素名&gt;</code></li>
<li><code>&lt;开始标签&gt;&lt;/结束标签&gt;</code></li>
</ul>
<p>注意：</p>
<ul>
<li>元素一般都是由开始标签、结束标签、、元素的内容(元素体)组成的。</li>
<li>元素体可以是文本内容，也可以是其他标签</li>
<li>每一个xml有且仅有一个根标签</li>
<li>空元素，如果某个元素没有元素体，它就是一个空元素。空元素可以写成自闭和的形式，格式：<code>&lt;元素名/&gt;</code></li>
<li>xml标签区分大小写</li>
<li>在xml中，元素命名不要使用xml,Xml,XML这些名字，也不要带有一些特殊字符。</li>
</ul>
<h4 id="1-2-3-属性"><a href="#1-2-3-属性" class="headerlink" title="1.2.3 属性"></a>1.2.3 属性</h4><p>格式：</p>
<ul>
<li><code>&lt;开始标签 属性名1=属性值1 属性名2=属性值2 ...&gt;&lt;/结束标签&gt;</code></li>
</ul>
<p>注意事项：</p>
<ul>
<li>属性要写在开始标签中。</li>
<li>属性可以有任意个，多个属性之间用空格隔开，一个元素中的多个属性，属性名不能相同</li>
<li>属性值必须用双引号或单引号包裹，<strong>推荐双引号</strong></li>
<li>属性名在命名时不要有特殊字符，属性名不能以数字开头</li>
</ul>
<h4 id="1-2-4-注释"><a href="#1-2-4-注释" class="headerlink" title="1.2.4 注释"></a>1.2.4 注释</h4><p>格式：</p>
<ul>
<li><code>&lt;!-- 注释内容 --&gt;</code></li>
</ul>
<p>注意：</p>
<ul>
<li>在xml中，注释也是不会被解析的。</li>
</ul>
<p><strong>使用示例：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    persons是根元素，一个xml中只能有一个根元素。</span></span><br><span class="line"><span class="comment">    person是persons的子元素</span></span><br><span class="line"><span class="comment">    每一个person标签有两个属性，分别是name和age</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">persons</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">person</span> <span class="attr">name</span>=<span class="string">"jack"</span> <span class="attr">age</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">person</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">person</span> <span class="attr">name</span>=<span class="string">"rose"</span> <span class="attr">age</span>=<span class="string">"20"</span>&gt;</span><span class="tag">&lt;/<span class="name">person</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">person</span> <span class="attr">name</span>=<span class="string">"tom"</span> <span class="attr">age</span>=<span class="string">"12"</span>&gt;</span><span class="tag">&lt;/<span class="name">person</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">persons</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="1-2-5-转义字符"><a href="#1-2-5-转义字符" class="headerlink" title="1.2.5 转义字符"></a>1.2.5 转义字符</h4><p>注意：如果要在xml中表示特殊字符，需要使用转义字符</p>
<p>例如：<code>&gt; &lt; &quot; &#39; &amp;</code></p>
<table>
<thead>
<tr>
<th>字符</th>
<th>转义字符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>&gt;</td>
<td><code>&amp;lt;</code></td>
<td>大于</td>
</tr>
<tr>
<td>&lt;</td>
<td><code>&amp;gt;</code></td>
<td>小于</td>
</tr>
<tr>
<td>“</td>
<td><code>&amp;quot;</code></td>
<td>双引号</td>
</tr>
<tr>
<td>‘</td>
<td><code>&amp;apos;</code></td>
<td>单引号</td>
</tr>
<tr>
<td>&amp;</td>
<td><code>&amp;amp;</code></td>
<td>与符号</td>
</tr>
</tbody></table>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">    1 <span class="symbol">&amp;lt;</span> 2</span><br><span class="line">    <span class="symbol">&amp;gt;</span></span><br><span class="line">    <span class="symbol">&amp;quot;</span></span><br><span class="line">    <span class="symbol">&amp;apos;</span></span><br><span class="line">    <span class="symbol">&amp;amp;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="1-2-6-CDATA区"><a href="#1-2-6-CDATA区" class="headerlink" title="1.2.6 CDATA区"></a>1.2.6 CDATA区</h4><p>CDATA 指的是不应由 XML 解析器进行解析的文本数据(Unparsed Character Data)</p>
<p>如果xml中出现大量的转义字符，会大大影响程序的阅读性，可以使用CDATA区解决这个问题：</p>
<p>格式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;![CDATA[</span><br><span class="line">	...</span><br><span class="line">]]&gt;</span><br></pre></td></tr></table></figure>

<p>作用：<strong>在CDATA区写任何东西，都会原样显示。</strong></p>
<blockquote>
<p>注意：</p>
<ul>
<li>CDATA 部分不能包含字符串 “]]&gt;”。也不允许嵌套的 CDATA 部分。</li>
<li>标记 CDATA 部分结尾的 “]]&gt;” 不能包含空格或折行。</li>
</ul>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">    &lt;![CDATA[</span><br><span class="line">        public static void main(String[] args)&#123;</span><br><span class="line">        System.out.println(1 &lt; 2);</span><br><span class="line">        System.out.println(1 &lt; 3);</span><br><span class="line">        System.out.println(1 &lt; 5);</span><br><span class="line">        System.out.println("hello");</span><br><span class="line">        System.out.println(true &amp; false);</span><br><span class="line">    &#125;</span><br><span class="line">    ]]&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="1-3-xml约束"><a href="#1-3-xml约束" class="headerlink" title="1.3 xml约束"></a>1.3 xml约束</h3><p>概念：规定xml文档的书写规则</p>
<ul>
<li>作为框架的使用者(程序员)：<ol>
<li>能够在xml中引入约束文档</li>
<li>能够简单的读懂约束文档</li>
</ol>
</li>
</ul>
<p>xml的写法是非常灵活的，但是很多情况下太灵活也不是一件好事，所以我们要给xml定义一个规范，规范xml中应该写什么内容。这个规范就是约束。</p>
<p>约束可以限制元素名，属性，元素体，元素的顺序等等</p>
<p>xml约束有两种：<code>dtd</code>，<code>schema</code></p>
<h4 id="1-3-1-DTD约束"><a href="#1-3-1-DTD约束" class="headerlink" title="1.3.1 DTD约束"></a>1.3.1 DTD约束</h4><p>如果要使用约束，需要把约束给引入过来。这个引入也称为导入。</p>
<p>dtd的三种引入方式</p>
<ul>
<li><p>内部DTD，将dtd嵌入到xml文件中，支队当前的xml文件有效</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE 根元素 [</span></span><br><span class="line"><span class="meta">	dtd语法</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>外部dtd - 本地dtd：将约束的规则定义在外部dtd文件中</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE 书架 <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"bookshelf.dtd"</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>外部dtd - 公共dtd：将dtd文件放在网络中。</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//Sun Microsystems, Inc.//DTD Web Application2.3//EN"</span> <span class="meta-string">"http://java.sun.com/dtd/web-app_2_3.dtd"</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<p><strong>dtd文件数量词：</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">*：表示可以出现任意次</span><br><span class="line">+：表示可以出现至少一次</span><br><span class="line">?：表示出现<span class="number">0</span>次或<span class="number">1</span>次</span><br><span class="line">,：顺序</span><br><span class="line">|:多个选一个</span><br></pre></td></tr></table></figure>



<p><strong>示例：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	复制内容如下:</span></span><br><span class="line"><span class="comment">	&lt;!DOCTYPE 书架 SYSTEM "bookshelf.dtd"&gt;</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT 书架 (书+)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT 书 (书名,作者,售价)&gt;</span><span class="comment">&lt;!--约束元素书的子元素必须为书名、作者、售价--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT 书名 (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT 作者 (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT 售价 (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE 书架 <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"bookshelf.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">书架</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">书</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">书名</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">书名</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">作者</span>&gt;</span>吴承恩<span class="tag">&lt;/<span class="name">作者</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">售价</span>&gt;</span>99<span class="tag">&lt;/<span class="name">售价</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">书</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">书</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">书名</span>&gt;</span>红楼梦<span class="tag">&lt;/<span class="name">书名</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">作者</span>&gt;</span>曹雪芹<span class="tag">&lt;/<span class="name">作者</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">售价</span>&gt;</span>100<span class="tag">&lt;/<span class="name">售价</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">书</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">书</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">书名</span>&gt;</span>三国演义<span class="tag">&lt;/<span class="name">书名</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">作者</span>&gt;</span>罗贯中<span class="tag">&lt;/<span class="name">作者</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">售价</span>&gt;</span>101<span class="tag">&lt;/<span class="name">售价</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">书</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">书</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">书名</span>&gt;</span>水浒传<span class="tag">&lt;/<span class="name">书名</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">作者</span>&gt;</span>施耐庵<span class="tag">&lt;/<span class="name">作者</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">售价</span>&gt;</span>108<span class="tag">&lt;/<span class="name">售价</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">书</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">书架</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="1-3-2-schema"><a href="#1-3-2-schema" class="headerlink" title="1.3.2 schema"></a>1.3.2 schema</h4><p>引入schema约束的方式和引入dtd约束的方式一样，都是从约束文件的注释中找到相对应得代码给复制到xml文件中。<br>复制过来得schema注释中的代码是一个开始标签，需要我们手动补齐结束标签</p>
<ul>
<li>引入过来的标签其实就是一个根标签</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	&lt;书架 xmlns="http://www.xxx.cn"</span></span><br><span class="line"><span class="comment">		  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line"><span class="comment">		  xsi:schemaLocation="http://www.xxx.cn bookshelf.xsd"</span></span><br><span class="line"><span class="comment">    &gt;</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:schema</span> <span class="attr">xmlns:xs</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">targetNamespace</span>=<span class="string">"http://www.xxx.cn"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">elementFormDefault</span>=<span class="string">"qualified"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">'书架'</span> &gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">xs:sequence</span> <span class="attr">maxOccurs</span>=<span class="string">'unbounded'</span> &gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">'书'</span> &gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">                                                     <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">'书名'</span> <span class="attr">type</span>=<span class="string">'xs:string'</span> /&gt;</span></span><br><span class="line">                                                     <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">'作者'</span> <span class="attr">type</span>=<span class="string">'xs:string'</span> /&gt;</span></span><br><span class="line">                                                     <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">'售价'</span> <span class="attr">type</span>=<span class="string">'xs:double'</span> /&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:schema</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">书架</span> <span class="attr">xmlns</span>=<span class="string">"http://www.xxx.cn"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.xxx.cn bookshelf.xsd"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">书</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">书名</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">书名</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">作者</span>&gt;</span>吴承恩<span class="tag">&lt;/<span class="name">作者</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">售价</span>&gt;</span>99<span class="tag">&lt;/<span class="name">售价</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">书</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">书架</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>解析：</p>
<p><code>xmlns=&quot;http://www.xxx.cn&quot;</code>:表示引入过来的schema文件的名称空间</p>
<p><code>xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</code>:引入的是w3c官方的内容，固定写法。</p>
<p><code>xsi:schemaLocation=&quot;http://www.xxx.cn bookshelf.xsd&quot;</code>: 引入的schema文件的位置。</p>
<ul>
<li>格式：名称空间 位置</li>
</ul>
<p>名称空间：</p>
<ul>
<li>隐式名称空间（之前用的都是隐式名称空间）</li>
<li>显式的名称空间（给名称空间起一个别名，通过别名去使用元素）<ul>
<li>xmlns:别名 = “名称空间”</li>
<li>使用方式：<ul>
<li><code>&lt;别名:元素名&gt;</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aa:书架</span> <span class="attr">xmlns:aa</span>=<span class="string">"http://www.xxx.cn"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.xxx.cn bookshelf.xsd"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aa:书</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aa:书名</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">aa:书名</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aa:作者</span>&gt;</span>吴承恩<span class="tag">&lt;/<span class="name">aa:作者</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aa:售价</span>&gt;</span>100<span class="tag">&lt;/<span class="name">aa:售价</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aa:书</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aa:书架</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="二、dom4j"><a href="#二、dom4j" class="headerlink" title="二、dom4j"></a>二、dom4j</h2><h3 id="2-1-XML解析"><a href="#2-1-XML解析" class="headerlink" title="2.1 XML解析"></a>2.1 XML解析</h3><p>XML解析就是获取xml文件的内容。</p>
<p>常见的<strong>解析方式</strong>：</p>
<ul>
<li>DOM解析(会把整个xml文件都加载到内存中，然后进行解析)<ul>
<li>优点:会保留整个xml文档的结构，可以对里面的元素进行增删操作。</li>
<li>缺点：有可能会内存溢出</li>
</ul>
</li>
<li>SAX解析(会逐行解析xml，没解析一行，就释放一行)<ul>
<li>优点：效率高，不会内存溢出</li>
<li>缺点：不能保留xml文档结构，只能读</li>
</ul>
</li>
<li>PULL解析(安卓内置的，类似SAX)</li>
</ul>
<p>常见的<strong>解析工具包</strong>：</p>
<ul>
<li><p>JAXP：sun公司提供支持DOM和SAX开发包</p>
</li>
<li><p>Dom4j：比较简单的的解析开发包(常用)</p>
</li>
<li><p>JDom：与Dom4j类似</p>
</li>
<li><p>Jsoup：功能强大DOM方式的XML解析开发包，尤其对HTML解析更加方便</p>
</li>
</ul>
<h3 id="2-2-dom4j的基本使用"><a href="#2-2-dom4j的基本使用" class="headerlink" title="2.2 dom4j的基本使用"></a>2.2 dom4j的基本使用</h3><h4 id="2-2-1-dom4j解析原理-dom解析-："><a href="#2-2-1-dom4j解析原理-dom解析-：" class="headerlink" title="2.2.1 dom4j解析原理(dom解析)："></a>2.2.1 dom4j解析原理(dom解析)：</h4><ul>
<li>dom解析会将整个xml文件读取到内存中，会生成一个DOM树(在xml中，每一个元素，属性，文本都是DOM树中的节点)，并获 得一个Document对象，通过Document对象就可以对DOM进行操作。</li>
</ul>
<p><img data-src="/image/dom%E8%A7%A3%E6%9E%90.png" alt="dom解析"></p>
<h4 id="2-2-2-使用dom4j解析xml"><a href="#2-2-2-使用dom4j解析xml" class="headerlink" title="2.2.2 使用dom4j解析xml"></a>2.2.2 使用dom4j解析xml</h4><p>解析相关的API</p>
<ul>
<li><p>SAXReader：核心类</p>
<ul>
<li><code>Document read(String systemId)</code>：read方法可以读取xml文件，生成dom树创建Document对象</li>
</ul>
</li>
<li><p>Document:表示整个xml文档</p>
<ul>
<li><code>Element getRootElement();</code>：表示获取根元素</li>
</ul>
</li>
<li><p>Element：表示元素</p>
<ul>
<li><code>List elements([String ele] )</code>： 获得指定名称的所有子元素。可以不指定名称</li>
<li><code>Element element([String ele])</code>：获得指定名称第一个子元素。可以不指定名称</li>
<li><code>String getName()</code>：获得当前元素的元素名</li>
<li><code>String attributeValue(String attrName)</code>：获得指定属性名的属性值</li>
<li><code>String elementText(Sting ele)</code> ：获得指定名称子元素的文本值</li>
<li><code>String getText()</code>：获得当前元素的文本内容</li>
</ul>
</li>
</ul>
<p>使用步骤：</p>
<ul>
<li>准备工作(导包、准备要解析的xml文件)</li>
<li>开始写代码，创建SAXReader对象</li>
<li>调用read方法，读取xml，得到Document对象</li>
<li>调用getRootElement获取根元素</li>
<li>开始解析操作</li>
</ul>
<p>代码示例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">books</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">book</span> <span class="attr">id</span>=<span class="string">"0001"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">author</span>&gt;</span>吴承恩<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sale</span>&gt;</span>101.00元<span class="tag">&lt;/<span class="name">sale</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">book</span> <span class="attr">id</span>=<span class="string">"0002"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>三国演义<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">author</span>&gt;</span>罗贯中<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sale</span>&gt;</span>100.00元<span class="tag">&lt;/<span class="name">sale</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">books</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Parse</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> DocumentException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建SAXReader对象。</span></span><br><span class="line">        SAXReader saxReader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">        <span class="comment">//2.调用read方法，读取xml，得到Document</span></span><br><span class="line">        Document document = saxReader.read(<span class="string">"xxx\\book.xml"</span>);</span><br><span class="line">        <span class="comment">//3.调用getRootElement获取根元素</span></span><br><span class="line">        Element rootElement = document.getRootElement();</span><br><span class="line">        <span class="comment">//调用elements方法获取所有子元素</span></span><br><span class="line">        List&lt;Element&gt; bookList = rootElement.elements();</span><br><span class="line">        <span class="comment">//遍历集合，拿到每一个book元素</span></span><br><span class="line">        <span class="keyword">for</span> (Element bookElement : bookList) &#123;</span><br><span class="line">            String id = bookElement.attributeValue(<span class="string">"id"</span>);</span><br><span class="line">            System.out.println(<span class="string">"id="</span> + id);</span><br><span class="line">            <span class="comment">//获取book下面所有的子元素</span></span><br><span class="line">            List&lt;Element&gt; bookChildElements = bookElement.elements();</span><br><span class="line">            <span class="keyword">for</span> (Element bookChildElement : bookChildElements) &#123;</span><br><span class="line">                <span class="comment">//调用getName方法，获取元素名字</span></span><br><span class="line">                String elementName = bookChildElement.getName();</span><br><span class="line">                <span class="comment">//调用getText，拿到该元素的文本内容</span></span><br><span class="line">                String text = bookChildElement.getText();</span><br><span class="line">                <span class="comment">//输出</span></span><br><span class="line">                System.out.println(elementName + <span class="string">":"</span> + text);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-3-XPath"><a href="#2-3-XPath" class="headerlink" title="2.3 XPath"></a>2.3 XPath</h3><p>XPath可以根据一个路径表达式获取xml中的指定元素。</p>
<p>XPath使用步骤：</p>
<ul>
<li>导入jar包(dom4j-1.6.1.jar 和 jaxen-1.1-beta-6.jar)</li>
<li>通过dom4j的SAXReader读取xml文件，获取Document对象</li>
<li>调用方法，根据XPath表达式获取元素<ul>
<li>document根据XPath表达式获取元素的方法：<ul>
<li><code>List selectNodes(&quot;表达式&quot;)</code>：获取多个满足要求的元素</li>
<li><code>Node selectSingNode(&quot;表达式&quot;)</code>：获取第一个满足要求的元素</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>表达式规则</strong>：</p>
<ul>
<li>绝对路径表达式方式 例如: /元素/子元素/子子元素…</li>
<li>相对路径表达式方式 例如: 子元素/子子元素.. 或者 ./子元素/子子元素..</li>
<li>全文搜索路径表达式方式 例如: //子元素//子子元素</li>
<li>谓语（条件筛选）方式 例如: //元素[@属性名=属性值]</li>
</ul>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03XPath</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> DocumentException </span>&#123;</span><br><span class="line">        <span class="comment">//创建SAXReader</span></span><br><span class="line">        SAXReader saxReader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">        <span class="comment">//调用read方法读取</span></span><br><span class="line">        Document document = saxReader.read(<span class="string">"day18_xml&amp;dom4j\\book.xml"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.谓语（条件筛选）方式 例如: //元素[@attr1=value]</span></span><br><span class="line">        Node node = document.selectSingleNode(<span class="string">"/books/book[@id='0002']/author"</span>);</span><br><span class="line">        System.out.println(node.getText());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.全文搜索路径表达式方式。例如：//子元素//子子元素</span></span><br><span class="line">        <span class="comment">// Node node = document.selectSingleNode("//book//name");</span></span><br><span class="line">        <span class="comment">// System.out.println(node.getText());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.相对路径表达式方式， 例如： 子元素/子子元素... 或者 ./子元素/子子元素...  【】</span></span><br><span class="line">        <span class="comment">// Element rootElement = document.getRootElement();</span></span><br><span class="line">        <span class="comment">// Node node = rootElement.selectSingleNode("book/name");</span></span><br><span class="line">        <span class="comment">// System.out.println(node.getText());</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.绝对路径表达式。例如：/元素/子元素/子子元素/...【绝对路径是从根开始找】</span></span><br><span class="line">        <span class="comment">// //获取一个元素</span></span><br><span class="line">        <span class="comment">// //Node node = document.selectSingleNode("/books/book/sale");</span></span><br><span class="line">        <span class="comment">// //获取元素的文本并输出</span></span><br><span class="line">        <span class="comment">// // System.out.println(node.getText);</span></span><br><span class="line">        <span class="comment">// List&lt;Node&gt; list = document.selectNodes("/books/book/author");</span></span><br><span class="line">        <span class="comment">// for (Node node : list) &#123;</span></span><br><span class="line">        <span class="comment">//     System.out.println(node);</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="三、JDK8新特性"><a href="#三、JDK8新特性" class="headerlink" title="三、JDK8新特性"></a>三、JDK8新特性</h2><h3 id="3-1-方法引用"><a href="#3-1-方法引用" class="headerlink" title="3.1 方法引用"></a>3.1 方法引用</h3><p>方法引用是Lambda表达式的简化写法。也是函数式编程的内容。</p>
<ul>
<li>当Lambda表达式拿到参数之后<strong>直接</strong>对参数进行<strong>处理</strong>，那么就可以换成方法引用</li>
</ul>
<p>方法引用的符号：<code>::</code></p>
<p>例如：</p>
<ul>
<li><p><code>s -&gt; System.out.println(s)</code></p>
</li>
<li><p>该Lambda表达式，拿到s之后，直接对s进行了输出处理，那么可以换成方法引用</p>
</li>
</ul>
<p>代码示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01MethodRef</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"hello"</span>);</span><br><span class="line">        list.add(<span class="string">"world"</span>);</span><br><span class="line">        list.add(<span class="string">"java"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//使用stream流的方式对集合中的每一个元素遍历输出</span></span><br><span class="line">        list.stream().forEach(s -&gt; System.out.println(s));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方法引用</span></span><br><span class="line">        list.stream().forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-2-四种常见的方法引用"><a href="#3-2-四种常见的方法引用" class="headerlink" title="3.2 四种常见的方法引用"></a>3.2 四种常见的方法引用</h3><ul>
<li>对象引用成员方法</li>
<li>类名引用静态方法</li>
<li>类的构造器引用</li>
<li>数组的构造器引用</li>
</ul>
<h4 id="3-2-1-对象引用成员方法"><a href="#3-2-1-对象引用成员方法" class="headerlink" title="3.2.1 对象引用成员方法"></a>3.2.1 对象引用成员方法</h4><p>格式：<code>对象名::方法名</code></p>
<p>演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printUpperCase</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        System.out.println(str.toUpperCase());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01MethodRef</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalAccessException, InstantiationException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建集合</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"hello"</span>);</span><br><span class="line">        list.add(<span class="string">"world"</span>);</span><br><span class="line">        list.add(<span class="string">"java"</span>);</span><br><span class="line">        <span class="comment">//遍历集合，将集中中每一个元素转成大写输出</span></span><br><span class="line">        <span class="comment">//list.stream().forEach(s -&gt; System.out.println(s.toUpperCase()));</span></span><br><span class="line"></span><br><span class="line">        MyClass myClass = MyClass<span class="class">.<span class="keyword">class</span>.<span class="title">newInstance</span>()</span>;</span><br><span class="line">        <span class="comment">// list.stream().forEach(s -&gt; myClass.printUpperCase(s));</span></span><br><span class="line">        list.stream().forEach(myClass::printUpperCase);<span class="comment">//表示Lambda表达式拿到参数之后，直接通过myClass的printUpperCase方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-2-2-类名引用静态方法"><a href="#3-2-2-类名引用静态方法" class="headerlink" title="3.2.2 类名引用静态方法"></a>3.2.2 类名引用静态方法</h4><p>格式：<code>类名::静态方法名</code></p>
<p>演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01ClassRef</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(-<span class="number">10</span>);</span><br><span class="line">        list.add(<span class="number">20</span>);</span><br><span class="line">        list.add(-<span class="number">30</span>);</span><br><span class="line">        list.add(<span class="number">40</span>);</span><br><span class="line">        <span class="comment">// list.stream().map(num -&gt; Math.abs(num)).forEach(s-&gt; System.out.println(s));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//类名::静态方法名</span></span><br><span class="line">        list.stream().map(Math::abs).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-2-3-类的构造器引用"><a href="#3-2-3-类的构造器引用" class="headerlink" title="3.2.3 类的构造器引用"></a>3.2.3 类的构造器引用</h4><p>格式：<code>类名::new</code></p>
<p>演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01MethodRef</span> </span>&#123;</span><br><span class="line">    <span class="comment">//使用函数式接口作为方法参数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(PersonBuilder personBuilder)</span></span>&#123;</span><br><span class="line">        Person p = personBuilder.createPerson(<span class="string">"张三"</span>,<span class="number">13</span>);</span><br><span class="line">        System.out.println(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用method方法，传递Lambda表达式</span></span><br><span class="line">        method((name,age)-&gt; <span class="keyword">new</span> Person(name, age));</span><br><span class="line">        method(Person::<span class="keyword">new</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonBuilder</span> </span>&#123;</span><br><span class="line">    <span class="comment">//接收姓名和年龄。就可以创建一个person对象返回。</span></span><br><span class="line">    <span class="function">Person <span class="title">createPerson</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    构造方法/set/get方法略...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-2-3-数组的构造器引用"><a href="#3-2-3-数组的构造器引用" class="headerlink" title="3.2.3 数组的构造器引用"></a>3.2.3 数组的构造器引用</h4><p>格式：<code>数据类型[]::new</code></p>
<p>演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01ArrayRef</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用方法让函数式接口当作方法参数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(ArrayBuilder arrayBuilder)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = arrayBuilder.createArray(<span class="number">10</span>);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        method( len -&gt; <span class="keyword">new</span> <span class="keyword">int</span>[len]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//数组的构造器引用---数据类型[]::new</span></span><br><span class="line">        method(<span class="keyword">int</span>[]::<span class="keyword">new</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArrayBuilder</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供方法，接收参数(数组长度)，就可以创建int数组返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span>[] createArray(<span class="keyword">int</span> len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-3-Base64"><a href="#3-3-Base64" class="headerlink" title="3.3 Base64"></a>3.3 Base64</h3><h4 id="3-3-1-概述"><a href="#3-3-1-概述" class="headerlink" title="3.3.1 概述"></a>3.3.1 概述</h4><p>Base64是网络上最常见的用于传输8Bit字节码的编码方式之一，Base64就是一种基于64个可打印字符<br>来表示二进制数据的方法。</p>
<p>在Java 8中，Base64编码已经成为Java类库的标准。</p>
<p>Java 8 内置了 Base64 编码的编码器和解码器。</p>
<p>Base64工具类提供了一套静态方法获取下面三种Base64编解码器：</p>
<ul>
<li><p>基本：输出被映射到一组字符A-Za-z0-9+/，编码不添加任何行标，输出的解码仅支持A-Za-z0-<br>  9+/。</p>
</li>
<li><p>URL：输出映射到一组字符A-Za-z0-9+_，输出是URL和文件。</p>
</li>
<li><p>MIME：输出隐射到MIME友好格式。输出每行不超过76字符，并且使用’\r’并跟随’\n’作为分割。<br>  编码输出最后没有行分割。</p>
</li>
</ul>
<blockquote>
<p>Base64用来编码和解码</p>
</blockquote>
<h4 id="3-3-2-Base64的内部类和方法"><a href="#3-3-2-Base64的内部类和方法" class="headerlink" title="3.3.2 Base64的内部类和方法"></a>3.3.2 Base64的内部类和方法</h4><p>内部类：</p>
<ul>
<li><code>static class Base64.Decoder</code> ：用来解码</li>
<li><code>static class Base64.Encoder</code> ：用来编码</li>
</ul>
<p>获取编码器、解解器方法：</p>
<ul>
<li><code>static Base64.Decoder getDecoder()</code>：获取一个标准的Base64解码器</li>
<li><code>static Base64.Decoder getEncoder()</code>：获取一个标准的Base64编码器</li>
<li><code>static Base64.Decoder getUrlDecoder()</code>：获取一个标准的URL解码器</li>
<li><code>static Base64.Decoder getUrlEncoder()</code>：获取一个标准的URL编码器</li>
<li><code>static Base64.Decoder getMimeDecoder()</code>：获取一个标准的MIME的解码器</li>
<li><code>static Base64.Decoder getMimeEncoder()</code>：获取一个标准的MIME的编码器</li>
</ul>
<p>Base64.Encoder方法：</p>
<ul>
<li><code>String encodeToString(byte[] src)</code>：编码，将byte数组编码成字符串</li>
</ul>
<p>Base64.Decoder方法：</p>
<ul>
<li><code>byte[] decode(String src)</code>：解码，将字符串编程byte数组</li>
</ul>
<p>使用演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Base64</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义字符串</span></span><br><span class="line">        String str = <span class="string">"哈哈哈呵呵呵嘿嘿"</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//使用标准Base64进行编码</span></span><br><span class="line">        Base64.Encoder encoder = Base64.getEncoder();</span><br><span class="line">        String base64Code = encoder.encodeToString(str.getBytes());</span><br><span class="line">        System.out.println(<span class="string">"base64编码后："</span> + base64Code);</span><br><span class="line">        <span class="comment">//解码</span></span><br><span class="line">        Base64.Decoder decoder = Base64.getDecoder();</span><br><span class="line">        <span class="keyword">byte</span>[] base64Bytes = decoder.decode(base64Code);</span><br><span class="line">        System.out.println(<span class="string">"base64解码后："</span> + <span class="keyword">new</span> String(base64Bytes));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用URL进行编码</span></span><br><span class="line">        String urlCode = Base64.getUrlEncoder().encodeToString(str.getBytes());</span><br><span class="line">        System.out.println(<span class="string">"URL编码后："</span> + urlCode);</span><br><span class="line">        <span class="comment">//解码</span></span><br><span class="line">        <span class="keyword">byte</span>[] urlBytes = Base64.getUrlDecoder().decode(urlCode);</span><br><span class="line">        System.out.println(<span class="string">"URL解码后："</span> + <span class="keyword">new</span> String(urlBytes));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用MIME编码</span></span><br><span class="line">        String mimeCode = Base64.getMimeEncoder().encodeToString(str.getBytes());</span><br><span class="line">        System.out.println(<span class="string">"MIME编码后："</span> + mimeCode);</span><br><span class="line">        <span class="comment">//解码</span></span><br><span class="line">        <span class="keyword">byte</span>[] mimeBytes = Base64.getMimeDecoder().decode(mimeCode);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(mimeBytes));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>学习</tag>
        <tag>XML</tag>
        <tag>dom4j</tag>
        <tag>方法引用</tag>
        <tag>Base64</tag>
      </tags>
  </entry>
  <entry>
    <title>单例、多例、枚举、工厂模式、正则表达式</title>
    <url>/2020/08/13/%E5%8D%95%E4%BE%8B%E3%80%81%E5%A4%9A%E4%BE%8B%E3%80%81%E6%9E%9A%E4%B8%BE%E3%80%81%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E3%80%81%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="一、单例模式"><a href="#一、单例模式" class="headerlink" title="一、单例模式"></a>一、单例模式</h2><p><strong>单例模式：</strong>是一种常用的软件设计模式。通过单例模式可以保证系统中，应用该模式的这个类只有一个<br>实例。即一个类只有一个对象实例。</p>
<a id="more"></a>

<h3 id="1-1-实现步骤"><a href="#1-1-实现步骤" class="headerlink" title="1.1 实现步骤"></a>1.1 实现步骤</h3><ol>
<li>将构造方法私有化，使其不能在类的外部通过new关键字实例化对象。</li>
<li>在类的内部产生一个唯一的一个实例化对象，并且将其封装为<code>private static</code>类型的成员变量</li>
<li>定义一个静态方法返回这个唯一对象</li>
</ol>
<h3 id="1-2-单例设计模式的类型"><a href="#1-2-单例设计模式的类型" class="headerlink" title="1.2 单例设计模式的类型"></a>1.2 单例设计模式的类型</h3><p>根据对象实例化的时机，单例模式可分为以下两种：</p>
<ul>
<li>饿汉单例模式</li>
<li>懒汉单例模式</li>
</ul>
<h3 id="1-3-饿汉单例模式"><a href="#1-3-饿汉单例模式" class="headerlink" title="1.3 饿汉单例模式"></a>1.3 饿汉单例模式</h3><p>饿汉单例模式：其含义就是在使用类的时候对象已经创建完毕，不管以后会不会使用到这个对象。</p>
<p>代码示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供静态属性，并创建对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Cat cat = <span class="keyword">new</span> Cat();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将构造方法私有，防止外界使用new关键字创建对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Cat</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供静态方法用来获取对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Cat <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Cat.getInstance());</span><br><span class="line">        System.out.println(Cat.getInstance());</span><br><span class="line">        System.out.println(Cat.getInstance());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1-4-懒汉单例模式"><a href="#1-4-懒汉单例模式" class="headerlink" title="1.4 懒汉单例模式"></a>1.4 懒汉单例模式</h3><p>懒汉单例模式：其含义就是在调用方法获取对象的时候才创建对象，先不急着创建对象，等着需要使用的时候才实例化对象。</p>
<p>代码示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义Dog类型的变量。用来接收getInstance方法中创建的Dog对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Dog dog = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私有构造方法，让外界不能通过new的方式创建对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Dog</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义静态方法，用来获取Dog对象</span></span><br><span class="line"><span class="comment">     * 多线程可能出现线程安全问题，加synchronized</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Dog <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//当调用getInstance方法创建对象时，判断dog变量是否是null，如果是null表示之前没有获取过Dog对象，那么就创建一个Dog对象赋值给dog</span></span><br><span class="line">        <span class="keyword">if</span> (dog == <span class="keyword">null</span>)&#123;</span><br><span class="line">            dog = <span class="keyword">new</span> Dog();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将之前获取的dog返回</span></span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(Dog.getInstance());</span><br><span class="line">        System.out.println(Dog.getInstance());</span><br><span class="line">        System.out.println(Dog.getInstance());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：懒汉单例模式在多线程环境下可能会实例化多个对象，不能保证单例的状态，所以在方法上加上synchronized关键字，保证线程安全。</p>
</blockquote>
<blockquote>
<p>小结：</p>
<ul>
<li><p>饿汉单例模式：先创建对象，不管以后能不能用到这个对象</p>
</li>
<li><p>懒汉单例模式：后创建对象，等到需要使用对象的时候在进行实例化对象。</p>
</li>
<li><p><strong>单例模式可以保证系统中一个类只有一个实例对象。</strong></p>
</li>
</ul>
</blockquote>
<h2 id="二、多例模式"><a href="#二、多例模式" class="headerlink" title="二、多例模式"></a>二、多例模式</h2><p>多例模式，是一种常用的软件设计模式。通过多例模式可以保证系统中，应用该模式的类有固定数量的<br>实例。多例类要自我创建并管理自己的实例，还要向外界提供获取本类实例的方法。</p>
<h3 id="2-1-实现步骤"><a href="#2-1-实现步骤" class="headerlink" title="2.1 实现步骤"></a>2.1 实现步骤</h3><ol>
<li>将构造方法私有化，使外部不能通过new关键字创建对象。</li>
<li>定义list集合，存放实例化的对象</li>
<li>定义静态代码块，实例化一定数量的对象并添加到集合中</li>
<li>定义静态方法，给外界提供获取对象的方式。</li>
</ol>
<h3 id="2-2-代码演示"><a href="#2-2-代码演示" class="headerlink" title="2.2 代码演示"></a>2.2 代码演示</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建集合，用来保存程序中所有的Person对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Person&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将构造方法私有，防止外界通过new的方式创建对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义静态代码块，在静态代码块中创建Person对象，并添加到集合中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> Person());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义方法，用来随机获取程序中的Person对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Person <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">return</span> list.get(r.nextInt(list.size()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">            System.out.println(Person.getInstance());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结：</p>
<ul>
<li>多例模式可以保证系统中一个类有固定个数的对象实例，在实现需求的基础上，提高对象的复用性。</li>
</ul>
</blockquote>
<h2 id="三、枚举"><a href="#三、枚举" class="headerlink" title="三、枚举"></a>三、枚举</h2><h3 id="3-1-不使用枚举存在的问题"><a href="#3-1-不使用枚举存在的问题" class="headerlink" title="3.1 不使用枚举存在的问题"></a>3.1 不使用枚举存在的问题</h3><p>假如我们要定义一个人类，属性包含姓名和性别，数据类型都为字符串，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    </span><br><span class="line">    set、get、构造方法略...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] agrs)</span></span>&#123;</span><br><span class="line">		Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.setName(<span class="string">"张三"</span>);</span><br><span class="line">        person.setGender(<span class="string">"hello"</span>);<span class="comment">//性别的数据类型是字符串，所以可以传入任意字符串</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不适用枚举时，就出现了上面的问题，可以给性别传递任意的字符串，导致性别非法。</p>
<h3 id="3-2-枚举的应用场景"><a href="#3-2-枚举的应用场景" class="headerlink" title="3.2 枚举的应用场景"></a>3.2 枚举的应用场景</h3><p>当一个方法接收的参数或者一个属性的取值在固定的范围，那么我们就可以使用枚举。例如，人的性别，一年的四个季度。</p>
<h3 id="3-3-枚举入门"><a href="#3-3-枚举入门" class="headerlink" title="3.3 枚举入门"></a>3.3 枚举入门</h3><ul>
<li>枚举本质就是类，枚举是多例的体现。</li>
<li>枚举中有很多属性，枚举中的每个属性都是自身的一个对象。</li>
</ul>
<h4 id="3-3-1-定义格式"><a href="#3-3-1-定义格式" class="headerlink" title="3.3.1 定义格式"></a>3.3.1 定义格式</h4><p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> 枚举名&#123;</span><br><span class="line">    属性<span class="number">1</span>,属性<span class="number">2</span>,属性<span class="number">3</span>,...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-3-2-代码示例"><a href="#3-3-2-代码示例" class="headerlink" title="3.3.2 代码示例"></a>3.3.2 代码示例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Gender &#123;</span><br><span class="line"></span><br><span class="line">    BOY,</span><br><span class="line"></span><br><span class="line">    GIRL</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Gender gender;</span><br><span class="line">	</span><br><span class="line">    set、get、构造方法略...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">        p1.setName(<span class="string">"张三"</span>);</span><br><span class="line">        p1.setGender(Gender.BOY);</span><br><span class="line">        System.out.println(p1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在上面代码中，在设置人的性别的时候，只能传递BOY或者GIRL，这样就解决的文中一开始提到的问题。</p>
</blockquote>
<h3 id="3-4-枚举类反编译"><a href="#3-4-枚举类反编译" class="headerlink" title="3.4 枚举类反编译"></a>3.4 枚举类反编译</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Gender &#123;</span><br><span class="line">    BOY,</span><br><span class="line">    GIRL</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进行反编译：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Gender</span> <span class="keyword">extends</span> <span class="title">Enum</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Gender BOY;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Gender GIRL;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Gender $VALUES[];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Gender[] values()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> (Gender[])$VALUES.clone();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Gender <span class="title">valueOf</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (Gender)Enum.valueOf(com/sun/demo03enum/Gender, name);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Gender</span><span class="params">(String s, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(s, i);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> </span><br><span class="line">	&#123;</span><br><span class="line">		BOY = <span class="keyword">new</span> Gender(<span class="string">"BOY"</span>, <span class="number">0</span>);</span><br><span class="line">		GIRL = <span class="keyword">new</span> Gender(<span class="string">"GIRL"</span>, <span class="number">1</span>);</span><br><span class="line">		$VALUES = (<span class="keyword">new</span> Gender[] &#123;</span><br><span class="line">			BOY, GIRL</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>枚举中的每个属性默认都是使用static final修饰的，因为使用final修饰了，所以是常量，在命名时都大写。</p>
<p>因为使用static修饰了，所以在使用属性时，可以通过枚举名字直接去使用</p>
</blockquote>
<h2 id="四、工厂设计模式"><a href="#四、工厂设计模式" class="headerlink" title="四、工厂设计模式"></a>四、工厂设计模式</h2><p>工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一。这种类型的设计模式属于创建型模<br>式，它提供了一种创建对象的最佳方式。</p>
<ul>
<li>工厂模式可以将对象的创建操作从我们自己转交给工厂，让工厂去创建对象，创建好之后再交给我们。</li>
</ul>
<h3 id="工厂模式示例"><a href="#工厂模式示例" class="headerlink" title="工厂模式示例"></a>工厂模式示例</h3><p>步骤：</p>
<ul>
<li>定义Car作为父类，里面提供run方法。</li>
<li>定义FaLaLi、Alto继承Car</li>
<li>定义Factory工厂，里面改提供一个生成小汽车的方法。</li>
<li>在测试类中通过工厂获取小汽车</li>
</ul>
<p>代码演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Alto</span> <span class="keyword">extends</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"奥拓在慢慢的跑..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FaLaLi</span> <span class="keyword">extends</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"法拉利在嗖嗖的跑..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 汽车工厂类</span></span><br><span class="line"><span class="comment"> * 用来获取小汽车</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义方法，用来获取小汽车</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">getCar</span><span class="params">(String carName)</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断传递过来的参数</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"法拉利"</span>.equals(carName))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> FaLaLi();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"奥拓"</span>.equals(carName))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Alto();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//其他表示工厂不能生产</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//通过工厂获取对象</span></span><br><span class="line">        Car c = CarFactory.getCar(<span class="string">"法拉利"</span>);</span><br><span class="line">        <span class="comment">//让小汽车运行</span></span><br><span class="line">        c.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>工厂模式好处：让程序更加灵活，易于扩展，易维护。</p>
</blockquote>
<h2 id="五、正则表达式"><a href="#五、正则表达式" class="headerlink" title="五、正则表达式"></a>五、正则表达式</h2><h3 id="5-1-正则表达式介绍"><a href="#5-1-正则表达式介绍" class="headerlink" title="5.1 正则表达式介绍"></a>5.1 正则表达式介绍</h3><p><strong>正则表达式</strong>：用来验证一个字符串是否符合规则。</p>
<p>在String中，有一个方法可以使用正则表达式验证。</p>
<ul>
<li><code>boolean matches(String regex)</code>：根据正则表达式验证字符串是否符合规则。</li>
</ul>
<p>正则表达式的一些规则：</p>
<p><code>[abc]</code>：表示a或者b或者c。<br><code>[^abc]</code>：表示除了a,b,c之外的字符。<br><code>[a-z]</code>：表示a-z中的任意一个。<br><code>[A-Z]</code>：表示A-Z中的任意一个。<br><code>[0-9]</code>：表示0-9中的任意一个。<br><code>[a-zA-Z0-9]</code>：表示匹配a-z，A-Z，0-9中的任意一个字符<br><code>[a-mp-x]</code>：表示匹配a-m或p-x中的任意一个字符<br><code>\d</code>数字：<code>[0-9]</code><br><code>\D</code> 非数字：<code>[^0-9]</code><br><code>\s</code>空白字符：空格 tab等等<br><code>\S</code>非空白字符<br><code>\w</code> 单词字符：<code>[a-zA-Z0-9_]</code><br><code>\W</code>非单词字符：<code>[^a-zA-Z0-9_]</code><br><code>?</code>：0次或1次<br><code>*</code>：任意次<br><code>+</code>：一次或多次<br><code>{n}</code>：恰巧n次<br><code>{n,}</code>：至少n次<br><code>{n,m}</code>：n到m次</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Regex</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//使用正则表达式验证一个qq号书否符合规则</span></span><br><span class="line">        <span class="comment">//规则：5-12位，第一位不能为0</span></span><br><span class="line">        String qq = <span class="string">"12345"</span>;</span><br><span class="line">        <span class="keyword">boolean</span> flag = qq.matches(<span class="string">"[1-9]\\d&#123;4,11&#125;"</span>);</span><br><span class="line">        System.out.println(flag);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用正则表达式验证手机号是否符合规则</span></span><br><span class="line">        <span class="comment">//规则：11位纯数字，第一位必须是1，第二位可以是35678，剩下的必须是0-9的数组</span></span><br><span class="line">        String phoneNum = <span class="string">"13800012345"</span>;</span><br><span class="line">        <span class="keyword">boolean</span> f2 = phoneNum.matches(<span class="string">"[1][35678][0-9]&#123;9&#125;"</span>);</span><br><span class="line">        System.out.println(f2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用正则表达式验证邮箱是否符合规则</span></span><br><span class="line">        <span class="comment">//规则 xxx@126.com   xxx@xx.cn  xxx@xx.com.cn</span></span><br><span class="line">        String email = <span class="string">"jack@163.com.cn"</span>;</span><br><span class="line">        <span class="keyword">boolean</span> f3 = email.matches(<span class="string">"\\w+@\\w+(\\.\\w+)+"</span>);</span><br><span class="line">        System.out.println(f3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>正则有关的方法：</p>
<ul>
<li><code>String[] split(String regex)</code>：根据正则表达式切割字符串</li>
<li><code>String replaceAll(String regex, String replacement)</code>：根据正则表达式进行替换</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义字符串</span></span><br><span class="line">        String s = <span class="string">"aaa   bb   cc  ddd"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用*替换掉字符串中的空白</span></span><br><span class="line">        String sNew = s.replaceAll(<span class="string">"\\s+"</span>, <span class="string">"*"</span>);</span><br><span class="line">        System.out.println(sNew);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据一个或者多个空格切割</span></span><br><span class="line">        String[] sArr = s.split(<span class="string">"\\s+"</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s1 : sArr) &#123;</span><br><span class="line">            System.out.println(s1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-2-常用正则"><a href="#5-2-常用正则" class="headerlink" title="5.2 常用正则"></a>5.2 常用正则</h3><h4 id="5-2-1-校验数字的表达式"><a href="#5-2-1-校验数字的表达式" class="headerlink" title="5.2.1 校验数字的表达式"></a>5.2.1 校验数字的表达式</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">1 数字：^[0-9]*$</span><br><span class="line">2 n位的数字：^\d&#123;n&#125;$</span><br><span class="line">3 至少n位的数字：^\d&#123;n,&#125;$</span><br><span class="line">4 m-n位的数字：^\d&#123;m,n&#125;$</span><br><span class="line">5 零和非零开头的数字：^(0|[<span class="string">1-9</span>][<span class="symbol">0-9</span>]*)$</span><br><span class="line">6 非零开头的最多带两位小数的数字：^([<span class="string">1-9</span>][<span class="symbol">0-9</span>]*)+(.[0-9]&#123;1,2&#125;)?$</span><br><span class="line">7 带1-2位小数的正数或负数：^(\-)?\d+(\.\d&#123;1,2&#125;)?$</span><br><span class="line">8 正数、负数、和小数：^(\-|\+)?\d+(\.\d+)?$</span><br><span class="line">9 有两位小数的正实数：^[0-9]+(.[0-9]&#123;2&#125;)?$</span><br><span class="line">10 有1~3位小数的正实数：^[0-9]+(.[0-9]&#123;1,3&#125;)?$</span><br><span class="line">11 非零的正整数：^[<span class="string">1-9</span>]\d<span class="emphasis">*$ 或 ^([1-9][0-9]*</span>)&#123;1,3&#125;$ 或 ^\+?[<span class="string">1-9</span>][<span class="symbol">0-9</span>]*$</span><br><span class="line">12 非零的负整数：^\-[<span class="string">1-9</span>][<span class="symbol"></span>]0-9"<span class="emphasis">*$ 或 ^-[1-9]\d*</span>$</span><br><span class="line">13 非负整数：^\d+$ 或 ^[1-9]\d*|0$</span><br><span class="line">14 非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</span><br><span class="line">15 非负浮点数：^\d+(\.\d+)?$ 或 ^[1-9]\d<span class="emphasis">*\.\d*</span>|0\.\d<span class="emphasis">*[1-9]\d*</span>|0?\.0+|0$</span><br><span class="line">16 非正浮点数：^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 或 ^(-([1-9]\d<span class="emphasis">*\.\d*</span>|0\.\d<span class="emphasis">*[1-9]\d*</span>))|0?\.0+|0$</span><br><span class="line">17 正浮点数：^[<span class="string">1-9</span>]\d<span class="emphasis">*\.\d*</span>|0\.\d<span class="emphasis">*[1-9]\d*</span>$ 或 ^(([<span class="string">0-9</span>]+\.[<span class="string">0-9</span>]<span class="emphasis">*[1-9][0-9]*</span>)|([<span class="string">0-9</span>]<span class="emphasis">*[1-9][0-9]*</span>\.[<span class="string">0-9</span>]+)|([<span class="string">0-9</span>]<span class="emphasis">*[1-9][0-9]*</span>))$</span><br><span class="line">18 负浮点数：^-([<span class="string">1-9</span>]\d<span class="emphasis">*\.\d*</span>|0\.\d<span class="emphasis">*[1-9]\d*</span>)$ 或 ^(-(([<span class="string">0-9</span>]+\.[<span class="string">0-9</span>]<span class="emphasis">*[1-9][0-9]*</span>)|([<span class="string">0-9</span>]<span class="emphasis">*[1-9][0-9]*</span>\.[<span class="string">0-9</span>]+)|([<span class="string">0-9</span>]<span class="emphasis">*[1-9][0-9]*</span>)))$</span><br><span class="line">19 浮点数：^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d<span class="emphasis">*\.\d*</span>|0\.\d<span class="emphasis">*[1-9]\d*</span>|0?\.0+|0)$</span><br><span class="line">12345678910111213141516171819</span><br></pre></td></tr></table></figure>



<h4 id="5-2-2-校验字符的表达式"><a href="#5-2-2-校验字符的表达式" class="headerlink" title="5.2.2 校验字符的表达式"></a>5.2.2 校验字符的表达式</h4><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">1 </span>汉字：^[\u4e00-\u9fa5]&#123;<span class="number">0</span>,&#125;$</span><br><span class="line"><span class="symbol">2 </span>英文和数字：^[A-Za-z0-<span class="number">9</span>]+$ 或 ^[A-Za-z0-<span class="number">9</span>]&#123;<span class="number">4</span>,<span class="number">40</span>&#125;$</span><br><span class="line"><span class="symbol">3 </span>长度为<span class="number">3</span>-<span class="number">20</span>的所有字符：^.&#123;<span class="number">3</span>,<span class="number">20</span>&#125;$</span><br><span class="line"><span class="symbol">4 </span>由<span class="number">26</span>个英文字母组成的字符串：^[A-Za-z]+$</span><br><span class="line"><span class="symbol">5 </span>由<span class="number">26</span>个大写英文字母组成的字符串：^[A-Z]+$</span><br><span class="line"><span class="symbol">6 </span>由<span class="number">26</span>个小写英文字母组成的字符串：^[a-z]+$</span><br><span class="line"><span class="symbol">7 </span>由数字和<span class="number">26</span>个英文字母组成的字符串：^[A-Za-z0-<span class="number">9</span>]+$</span><br><span class="line"><span class="symbol">8 </span>由数字、<span class="number">26</span>个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w&#123;<span class="number">3</span>,<span class="number">20</span>&#125;$</span><br><span class="line"><span class="symbol">9 </span>中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-<span class="number">9</span>_]+$</span><br><span class="line"><span class="symbol">10 </span>中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-<span class="number">9</span>]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-<span class="number">9</span>]&#123;<span class="number">2</span>,<span class="number">20</span>&#125;$</span><br><span class="line"><span class="symbol">11 </span>可以输入含有^%&amp;<span class="comment">',;=?$\"等字符：[^%&amp;',;=?$\x22]+</span></span><br><span class="line"><span class="symbol">12 </span>禁止输入含有~的字符：[^~\x22]+</span><br><span class="line"><span class="number">123456789101112</span></span><br></pre></td></tr></table></figure>



<h4 id="5-2-3-特殊需求表达式"><a href="#5-2-3-特殊需求表达式" class="headerlink" title="5.2.3 特殊需求表达式"></a>5.2.3 特殊需求表达式</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">1 Email地址：^\w+([-+.]\w+)<span class="emphasis">*@\w+([-.]\w+)*</span>\.\w+([-.]\w+)*$</span><br><span class="line">2 域名：[<span class="string">a-zA-Z0-9</span>][<span class="symbol">-a-zA-Z0-9</span>]&#123;0,62&#125;(/.[<span class="string">a-zA-Z0-9</span>][<span class="symbol">-a-zA-Z0-9</span>]&#123;0,62&#125;)+/.?</span><br><span class="line">3 InternetURL：[a-zA-z]+://[^\s]<span class="emphasis">* 或 ^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*</span>)?$</span><br><span class="line">4 手机号码：^(13[0-9]|14[0-9]|15[0-9]|166|17[0-9]|18[0-9]|19[8|9])\d&#123;8&#125;$</span><br><span class="line">5 电话号码("XXX-XXXXXXX"、"XXXX-XXXXXXXX"、"XXX-XXXXXXX"、"XXX-XXXXXXXX"、"XXXXXXX"和"XXXXXXXX)：^(\(\d&#123;3,4&#125;-)|\d&#123;3.4&#125;-)?\d&#123;7,8&#125;$ </span><br><span class="line">6 国内电话号码(0511-4405222、021-87888822)：\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125; </span><br><span class="line">7 18位身份证号码(数字、字母x结尾)：^((\d&#123;18&#125;)|([0-9x]&#123;18&#125;)|([0-9X]&#123;18&#125;))$</span><br><span class="line">8 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[<span class="string">a-zA-Z</span>][<span class="symbol">a-zA-Z0-9_</span>]&#123;4,15&#125;$</span><br><span class="line">9 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w&#123;5,17&#125;$</span><br><span class="line">10 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.<span class="emphasis">*\d)(?=.*</span>[a-z])(?=.*[A-Z]).&#123;8,10&#125;$  </span><br><span class="line">11 日期格式：^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;</span><br><span class="line">12 一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$</span><br><span class="line">13 一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$ </span><br><span class="line">14 xml文件：^([<span class="string">a-zA-Z</span>]+-?)+[<span class="string">a-zA-Z0-9</span>]+\\.[<span class="string">x|X</span>][<span class="symbol">m|M</span>][<span class="string">l|L</span>]$</span><br><span class="line">15 中文字符的正则表达式：[\u4e00-\u9fa5]</span><br><span class="line">16 双字节字符：[^\x00-\xff]    (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</span><br><span class="line">17 空白行的正则表达式：\n\s*\r    (可以用来删除空白行)</span><br><span class="line">18 HTML标记的正则表达式：<span class="xml"><span class="tag">&lt;<span class="name">(\S*?)[^</span>&gt;</span></span>]<span class="emphasis">*&gt;.*</span>?<span class="xml"><span class="tag">&lt;/<span class="name">\1</span>&gt;</span></span>|<span class="xml"><span class="tag">&lt;<span class="name">.*?</span> /&gt;</span></span>    (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</span><br><span class="line">19 首尾空白字符的正则表达式：^\s<span class="emphasis">*|\s*</span>$或(^\s<span class="emphasis">*)|(\s*</span>$)    (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</span><br><span class="line">20 腾讯QQ号：[<span class="string">1-9</span>][<span class="symbol">0-9</span>]&#123;4,&#125;    (腾讯QQ号从10000开始)</span><br><span class="line">21 中国邮政编码：[1-9]\d&#123;5&#125;(?!\d)    (中国邮政编码为6位数字)</span><br><span class="line">22 IP地址：\d+\.\d+\.\d+\.\d+    (提取IP地址时有用)</span><br><span class="line">23 IP地址：((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.)&#123;3&#125;(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>学习</tag>
        <tag>设计模式</tag>
        <tag>枚举</tag>
        <tag>单例模式</tag>
        <tag>多例模式</tag>
        <tag>工厂模式</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS入门</title>
    <url>/2020/08/16/CSS%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="一、CSS概述"><a href="#一、CSS概述" class="headerlink" title="一、CSS概述"></a>一、CSS概述</h2><p>概念：层叠样式表（Cascading Style Sheet）</p>
<blockquote>
<p>层叠样式: 对同一个标签添加多个不同的样式,所有样式会叠加在一起展示出效果</p>
</blockquote>
<p>作用：页面美化和控制布局</p>
<p>CSS的优点：</p>
<ul>
<li>实现了样式和内容的分离，提高了显示效果和样式的复用性。</li>
<li>降低耦合性，分工更加明确，CSS专门用于美化，HTML专门用于结构搭建。</li>
</ul>
<a id="more"></a>

<h2 id="二、CSS入门"><a href="#二、CSS入门" class="headerlink" title="二、CSS入门"></a>二、CSS入门</h2><h3 id="2-1-HTML引入CSS"><a href="#2-1-HTML引入CSS" class="headerlink" title="2.1 HTML引入CSS"></a>2.1 HTML引入CSS</h3><p>HTML有三种引入CSS的方式分别是：</p>
<ul>
<li><p>行内样式</p>
<ul>
<li>在标签中使用<strong>style</strong>属性指定css代码</li>
<li>如：<code>&lt;div style=&quot;color:red;&quot;&gt;hello,world&lt;/div&gt;</code></li>
</ul>
</li>
<li><p>内部样式</p>
<ul>
<li><p>在head标签内，定义style标签，在style标签体内写css代码</p>
</li>
<li><pre><code class="html"><span class="tag">&lt;<span class="name">style</span>&gt;</span>
    div{
<span class="css">        <span class="selector-tag">color</span><span class="selector-pseudo">:red</span>;</span>
    }
<span class="tag">&lt;/<span class="name">style</span>&gt;</span>
<span class="comment"><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">+ 外部样式</span><br><span class="line"></span><br><span class="line">	+ 通过link标签引入外部css文件</span><br><span class="line"></span><br><span class="line">	+ ```html</span><br><span class="line">		&lt;link <span class="attribute">rel</span>=<span class="string">"stylesheet"</span>  <span class="attribute">href</span>=<span class="string">"外部css文件"</span>/&gt;</span><br><span class="line">			<span class="attribute">rel</span>=<span class="string">"stylesheet"</span> :告知浏览器引入的外部文件为css样式表</span><br></pre></td></tr></table></figure></span>


</code></pre>
</li>
</ul>
</li>
</ul>
<h3 id="2-2-CSS书写规范"><a href="#2-2-CSS书写规范" class="headerlink" title="2.2 CSS书写规范"></a>2.2 CSS书写规范</h3><p>注释：<code>/*注释内容*/</code></p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">选择器&#123;</span><br><span class="line">	样式名:样式值;</span><br><span class="line">	样式名:样式值;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line"><span class="selector-tag">span</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-3-基本选择器"><a href="#2-3-基本选择器" class="headerlink" title="2.3 基本选择器"></a>2.3 基本选择器</h3><p>选择器作用：找出页面一组特定的标签</p>
<ul>
<li>标签选择器：<ul>
<li>语法：<code>标签名{css样式}</code></li>
<li>特点：指定标签</li>
</ul>
</li>
<li>类选择器：<ul>
<li><code>.class名{css样式}</code></li>
<li>特点：分组设置样式</li>
</ul>
</li>
<li>ID选择器：<ul>
<li><code>#id名{css样式}</code></li>
<li>特点：唯一</li>
</ul>
</li>
</ul>
<p>代码示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>基本选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        span&#123;</span><br><span class="line">            font-size: 20px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.female</span>&#123;</span></span><br><span class="line">            color: pink;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.male</span>&#123;</span></span><br><span class="line">            color: skyblue;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.hero</span>&#123;</span></span><br><span class="line">            font-weight: bold;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#boss</span>&#123;</span></span><br><span class="line">            font-size: 40px;</span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#9900FF</span>;</span></span><br><span class="line">            font-style: italic;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"female"</span>&gt;</span>古力娜扎<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"female"</span>&gt;</span>迪丽热巴<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"female hero"</span>&gt;</span>黑寡妇<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"male hero"</span>&gt;</span>钢铁侠<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"male hero"</span>&gt;</span>超人<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"boss"</span> <span class="attr">class</span>=<span class="string">"male"</span>&gt;</span>灭霸<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>选择器优先级：id &gt; class &gt; 标签</p>
</blockquote>
<h3 id="2-4-扩展选择器"><a href="#2-4-扩展选择器" class="headerlink" title="2.4 扩展选择器"></a>2.4 扩展选择器</h3><p>选择所有元素：</p>
<ul>
<li>语法：<code>*{css样式}</code></li>
</ul>
<p>并集选择器：</p>
<ul>
<li>语法：<code>选择器1,选择器2,选择器3....{css样式}</code></li>
</ul>
<p>父子选择器：</p>
<ul>
<li>语法：<code>父选择器 &gt; 子选择器{css样式}</code></li>
</ul>
<p>后代选择器：</p>
<ul>
<li>语法：<code>父选择器 后代选择器{css样式}</code></li>
</ul>
<p>属性选择器：</p>
<ul>
<li>语法：<code>标签[属性名=&quot;属性值&quot;]{css样式}</code></li>
</ul>
<p>伪类选择器：选择一些元素具有的状态</p>
<ul>
<li>语法： 元素:状态{}</li>
<li>如： <code>&lt;a&gt;:状态{}</code><ul>
<li>状态：<ul>
<li>link：初始化的状态</li>
<li>visited：被访问过的状态</li>
<li>active：正在访问状态</li>
<li>hover：鼠标悬浮状态</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>代码示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>04-扩展选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        span,label&#123;</span><br><span class="line">            font-size: 20px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        div&gt;span&#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        div span&#123;</span><br><span class="line">            border: 1px solid black;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">input</span><span class="selector-attr">[name=<span class="string">"username"</span>]</span>&#123;</span></span><br><span class="line">            background-color: gold;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>烟幕弹<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"gbl"</span>&gt;</span>高爆雷<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"jjx"</span>&gt;</span>急救箱<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"Jack"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="2-5-CSS属性介绍"><a href="#2-5-CSS属性介绍" class="headerlink" title="2.5 CSS属性介绍"></a>2.5 CSS属性介绍</h3><p>字体、文本</p>
<ul>
<li>font-size：字体大小<ul>
<li>color：文本颜色</li>
<li>text-align：对其方式</li>
<li>line-height：行高 </li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>字体和文本属性<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        p&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-tag">green</span>; <span class="comment">/*1.p段落文字绿色*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">font-size</span>: 20<span class="selector-tag">px</span>; <span class="comment">/*2.p段落文字大小20px*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">line-height</span>: 40<span class="selector-tag">px</span>; <span class="comment">/*3.p段落行高40px*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">font-weight</span>: <span class="selector-tag">bold</span>; <span class="comment">/*4.p段落字体加粗*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">font-family</span>: 楷体; <span class="comment">/*5.p段落字体楷体*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">font-style</span>: <span class="selector-tag">italic</span>; <span class="comment">/*6.p段落文字倾斜*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">text-indent</span>: 40<span class="selector-tag">px</span>; <span class="comment">/*设置段落的首行缩进*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line">        a&#123;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span> 学习的误区：<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        眼睛：看了一遍记住了<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        耳朵：听了一遍明白了<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        脑子：想了一遍搞懂了<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        手：你们会个屁！^_^ <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>背景</p>
<ul>
<li>background</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>背景属性<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div&#123;</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 200px;</span><br><span class="line">            border: 1px solid red;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#div1</span>&#123;</span></span><br><span class="line">            background-color: lightpink;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#div2</span>&#123;</span></span><br><span class="line">            background-image: url("../img/girl.jpg");</span><br><span class="line">            background-repeat: no-repeat;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-position</span>: <span class="selector-tag">center</span>; <span class="comment">/* center center */</span></span></span><br><span class="line">            background-color: antiquewhite;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span></span><br><span class="line">    我可以输入一切内容。。。。</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>边框</p>
<ul>
<li>border：设置边框属性</li>
</ul>
<p>尺寸</p>
<ul>
<li>width：宽度</li>
<li>height：高度</li>
</ul>
<p>盒子模型：控制布局</p>
<ul>
<li><p>margin：外边距</p>
</li>
<li><p>padding：内边距</p>
<ul>
<li>默认情况下内边距会影响整个盒子的大小</li>
<li>box-sizing: border-box;  设置盒子的属性，让width和height就是最终盒子的大小</li>
</ul>
</li>
<li><p>float：浮动</p>
<ul>
<li>left</li>
<li>right</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>盒子模型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span>&#123;</span></span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 300px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 10<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">red</span>; <span class="comment">/*同时指定四个边框*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">padding</span>: 30<span class="selector-tag">px</span>;<span class="comment">/*同时指定四个内边距为30px*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">margin</span><span class="selector-pseudo">:auto</span>;</span></span><br><span class="line">            margin-top: 50px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    盒子模型：</span></span><br><span class="line"><span class="comment">        边框：border</span></span><br><span class="line"><span class="comment">            top、right、bottom、left</span></span><br><span class="line"><span class="comment">        内边距：padding</span></span><br><span class="line"><span class="comment">            top、right、bottom、left</span></span><br><span class="line"><span class="comment">        外边距：margin</span></span><br><span class="line"><span class="comment">             top、right、bottom、left</span></span><br><span class="line"><span class="comment">        盒子水平居中：margin:auto;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../img/girl.jpg"</span> <span class="attr">width</span>=<span class="string">"300px"</span> <span class="attr">height</span>=<span class="string">"300px"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>显示属性</p>
<ul>
<li>display<ul>
<li>block：指定标签为块级元素</li>
<li>inline：指定标签为行内元素</li>
<li>none：隐藏元素</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>显示属性<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div,span&#123;</span><br><span class="line">            background-color: red;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        span&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">display</span>: <span class="selector-tag">block</span>; <span class="comment">/*指定标签为块级元素*/</span></span></span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        div&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">display</span>: <span class="selector-tag">none</span>; <span class="comment">/*指定标签为行内元素*/</span></span></span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ul li&#123;</span><br><span class="line">            display: inline;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>内联标签span1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>内联标签span2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>内联标签span3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>块级标签div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>块级标签div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>块级标签div3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>萨瓦迪卡<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>鼓励娜扎<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>马尔扎哈<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML入门</title>
    <url>/2020/08/16/HTML%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="一、HTML概述"><a href="#一、HTML概述" class="headerlink" title="一、HTML概述"></a>一、HTML概述</h2><p>HTML: (Hyper Text Markup Language)超文本标记语言。</p>
<ul>
<li>超文本:不仅可以展示文字,还可以显示超链接,图片,音乐,视频等丰富内容.</li>
<li>标记语言:描述特定功能的标签。</li>
<li>W3C(World Wide Web Consortium)世界万维网联盟给我们定义好了这套标签。</li>
</ul>
<blockquote>
<p>html和xml：</p>
<ul>
<li><p>xml（EXtensible Markup Language）：</p>
<ul>
<li>特点：标签自定义，存储数据</li>
</ul>
</li>
<li><p>html（Hyper Text Markup Language）：</p>
<ul>
<li>特点：标签预定义（语义，功能）、展示数据</li>
</ul>
</li>
</ul>
</blockquote>
<a id="more"></a>

<h2 id="二、HTML基础"><a href="#二、HTML基础" class="headerlink" title="二、HTML基础"></a>二、HTML基础</h2><h3 id="2-1-入门案例"><a href="#2-1-入门案例" class="headerlink" title="2.1 入门案例"></a>2.1 入门案例</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span> <span class="comment">&lt;!--文档声明：声明当前的html是5的这个版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span> <span class="comment">&lt;!--声明当前页面的字符集--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    hello，world！！！</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-HTML组成和规范"><a href="#2-2-HTML组成和规范" class="headerlink" title="2.2 HTML组成和规范"></a>2.2 HTML组成和规范</h3><ol>
<li><p>html文档声明：<code>&lt;!DOCTYPE html&gt;</code></p>
<ul>
<li>要求：必须在页面的第一行，固定值</li>
</ul>
</li>
<li><p>html预定义标签</p>
<ul>
<li>双标签：<code>&lt;html&gt;&lt;/HTML&gt;</code></li>
<li>单标签：<code>&lt;img&gt;</code></li>
<li>特点：html语法比较松散</li>
</ul>
</li>
<li><p>html属性</p>
<ul>
<li>语法：<code>&lt;html 属性名=&quot;属性值&quot; 属性名=&#39;属性值&#39;&gt;&lt;/HTML&gt;</code></li>
<li>特点：属性必须在开始标签</li>
</ul>
</li>
<li><p>html文本</p>
<ul>
<li>特点：写在指定的标签体中</li>
</ul>
</li>
<li><p>html注释</p>
<ul>
<li><code>&lt;!-- 注释内容 --&gt;</code></li>
</ul>
</li>
</ol>
<h2 id="三、HTML常用标签"><a href="#三、HTML常用标签" class="headerlink" title="三、HTML常用标签"></a>三、HTML常用标签</h2><p>标题标签：h1~h6</p>
<ul>
<li><code>&lt;h1&gt;&lt;/h1&gt; | &lt;h2&gt;&lt;/h2&gt; | ....</code></li>
</ul>
<p>水平线：<code>&lt;hr&gt;</code></p>
<p>段落：<code>&lt;p&gt;&lt;/p&gt;</code></p>
<p>换行：<code>&lt;br&gt;</code></p>
<p>超链接：<code>&lt;a href=&quot;跳转路径&quot; target=&quot;跳转方式&quot;&gt;&lt;/a&gt;</code></p>
<ul>
<li>href<ul>
<li>绝对地址</li>
<li>相对地址<ul>
<li><code>./</code>当前目录</li>
<li><code>../</code>上一级目录</li>
</ul>
</li>
</ul>
</li>
<li>target<ul>
<li><code>_self</code>：<strong>默认值</strong>，在当前页跳转</li>
<li><code>_blank</code>：打开一个新标签页</li>
</ul>
</li>
</ul>
<p>img：<code>&lt;img src=&quot;图片地址&quot; width=&quot;图片宽度,单位px(像素)&quot; alt=&quot;图片加载失败显示的文字&quot;&gt;</code></p>
<p>列表：</p>
<ul>
<li><code>ul</code>：无序列表</li>
<li><code>ol</code>：有序列表</li>
<li><code>li</code>：列表项</li>
</ul>
<p>容器：</p>
<ul>
<li>div：<code>&lt;div&gt;内容&lt;/div&gt;</code><ul>
<li>块级元素，占一行</li>
</ul>
</li>
<li>span：<code>&lt;span&gt;内容&lt;/span&gt;</code><ul>
<li>行内元素，根据内容自适应大小</li>
</ul>
</li>
</ul>
<p>转义字符：</p>
<ul>
<li><code>&amp;nbsp;</code>：英文空格</li>
<li><code>&amp;emsp;</code>：中文空格</li>
</ul>
<p>表格：</p>
<ul>
<li>table：定义表格<ul>
<li>width：宽度</li>
<li>border：边框</li>
<li>cellpadding：定义内容和单元格的距离</li>
<li>cellspacing：定义单元格之间的距离。如果指定为0，则单元格的线会合为一条、</li>
<li>bgcolor：背景色</li>
<li>align：对齐方式</li>
</ul>
</li>
<li>tr：定义行<ul>
<li>bgcolor：背景色</li>
<li>align：对齐方式</li>
</ul>
</li>
<li>td：定义单元格<ul>
<li>colspan：合并列</li>
<li>rowspan：合并行</li>
</ul>
</li>
<li>th：定义表头单元格</li>
<li><code>&lt;caption&gt;</code>：表格标题</li>
<li><code>&lt;thead&gt;</code>：表示表格的头部分</li>
<li><code>&lt;tbody&gt;</code>：表示表格的体部分</li>
<li><code>&lt;tfoot&gt;</code>：表示表格的脚部分</li>
</ul>
<h2 id="四、HTML表单"><a href="#四、HTML表单" class="headerlink" title="四、HTML表单"></a>四、HTML表单</h2><p>表单：</p>
<ul>
<li><code>&lt;form&gt;&lt;/form&gt;</code> ：它只是一个容器（我们看不到），所有的表单项必须被它包裹，才能采集和发送…</li>
</ul>
<p>常用属性：</p>
<ul>
<li>action：表单的提交地址，暂时使用#代替（#：表示当前页面）</li>
<li>method：表单的提交方式，有二种：get（默认值）  | post<ul>
<li>get<ul>
<li>格式：页面地址?参数名=参数值 &amp; 参数名=参数值<ul>
<li>请求参数在地址栏拼接</li>
<li>请求方式不太安全</li>
<li>请求大小是有限制</li>
</ul>
</li>
</ul>
</li>
<li>post<ul>
<li>格式：在http协议请求体；参数名=参数值 &amp; 参数名=参数值<ul>
<li>参数不在地址拼接</li>
<li>请求方式相对安全</li>
<li>请求大小是没有限制</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>表单项：</p>
<ul>
<li><p>文本框</p>
<ul>
<li><p><code>&lt;input type=&quot;&quot; name=&quot;&quot; value=&quot;&quot;/&gt;</code></p>
</li>
<li><p>type 类型，有很多种，不同类型有不同的功能和展示效果</p>
<ul>
<li>text：普通文本框</li>
<li>password：密码框 特点：掩码</li>
<li>date：日期选择框</li>
<li>radio：单选框<ul>
<li>特点：name属性相同分为一组，完成互斥效果</li>
<li>默认选中：checked</li>
</ul>
</li>
<li>checkbox：复选框<ul>
<li>特点：name属性相同分为一组，不会出现互斥的效果</li>
<li>默认选中：checked</li>
</ul>
</li>
<li>file：文件上传<ul>
<li>要求：表单的提交方式必须为post</li>
</ul>
</li>
<li>submit：提交按钮<ul>
<li>功能：将表单提交到服务器</li>
<li>注意：此按钮不需要name属性，value是按钮显示名称</li>
</ul>
</li>
<li>reset：重置按钮<ul>
<li>功能：将表单元素重置</li>
</ul>
</li>
<li>button：普通按钮，通常与js结合使用</li>
</ul>
<blockquote>
<p>注意：</p>
<ul>
<li>name 文本框名称，必须存在，不然此表单的不会被提交</li>
<li>value 文本框的值 （1.用户输入  2.用户选择）</li>
</ul>
</blockquote>
</li>
</ul>
</li>
<li><p>下拉框</p>
<ul>
<li>语法：<code>&lt;select name=&quot;&quot; multiple&gt;&lt;select&gt;</code><ul>
<li>multiple ：多选</li>
<li>下拉选项：<code>&lt;option value=&quot;&quot;&gt;&lt;/option&gt;</code><ul>
<li>默认选中：selected</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>文本域</p>
<ul>
<li>语法：<code>&lt;textarea name=&quot;&quot;&gt; &lt;/textarea&gt;</code></li>
<li>常用属性：<ul>
<li>rows：行高</li>
<li>cols：列宽</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>11-表单控件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">    用户：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生日：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"date"</span> <span class="attr">name</span>=<span class="string">"birthday"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    性别：</span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"male"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"male"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"男"</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"female"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"female"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"女"</span> &gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    爱好：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"somke"</span>&gt;</span> 抽烟</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"drink"</span> <span class="attr">checked</span>&gt;</span> 喝酒</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"perm"</span>&gt;</span>  烫头 <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    头像：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"pic"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    学历：</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"edu"</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>小学<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>初中<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"3"</span> &gt;</span>高中<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"4"</span> <span class="attr">selected</span>&gt;</span>大学<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    介绍：</span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"intro"</span> <span class="attr">rows</span>=<span class="string">"10"</span> <span class="attr">cols</span>=<span class="string">"30"</span>&gt;</span> <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册 | 登录 | 提交"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">value</span>=<span class="string">"重置"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"我是普通按钮，在表单中没啥卵用"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript</title>
    <url>/2020/08/16/JavaScript/</url>
    <content><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h3 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h3><p>概念：一门客户端脚本语言。</p>
<ul>
<li>运行在客户端浏览器中的，每一个浏览器都有JavaScript的解析引擎</li>
<li>脚本语言：不需要编译，直接就可以被浏览器解析执行。</li>
</ul>
<a id="more"></a>

<h3 id="1-2-功能"><a href="#1-2-功能" class="headerlink" title="1.2 功能"></a>1.2 功能</h3><p>功能：可以来增强用户和HTML页面的交互过程，可以控制HTML元素，让页面有一些动态的效果，增强用户体验。</p>
<h3 id="1-3-特点"><a href="#1-3-特点" class="headerlink" title="1.3 特点"></a>1.3 特点</h3><ul>
<li><p>JS源码不需要编译，浏览器可以直接解释运行</p>
</li>
<li><p>JS是弱类型语言，js变量声明不需要指明类型</p>
</li>
</ul>
<blockquote>
<p>小结：js是弱类型的脚本语言，可以直接在浏览器解释运行</p>
</blockquote>
<h3 id="1-4-JavaScript的组成"><a href="#1-4-JavaScript的组成" class="headerlink" title="1.4 JavaScript的组成"></a>1.4 JavaScript的组成</h3><table>
<thead>
<tr>
<th>组成部分</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>ECMA Script</td>
<td>构成了JS核心的语法基础</td>
</tr>
<tr>
<td>BOM</td>
<td>Browser Object Model 浏览器对象模型，用来操作浏览器上的对象</td>
</tr>
<tr>
<td>DOM</td>
<td>Document Object Model 文档对象模型，用来操作网页中的元素（标签）</td>
</tr>
</tbody></table>
<h2 id="二、基础语法"><a href="#二、基础语法" class="headerlink" title="二、基础语法"></a>二、基础语法</h2><h3 id="2-1-HTML引入JS"><a href="#2-1-HTML引入JS" class="headerlink" title="2.1 HTML引入JS"></a>2.1 HTML引入JS</h3><p>在HTML中引入JS有两种方式：</p>
<ul>
<li>内部脚本<ul>
<li>语法：<code>&lt;script type=&quot;text/javascript&quot;&gt; js代码 &lt;/script&gt;</code></li>
<li>作用范围：当前页面</li>
</ul>
</li>
<li>外部脚本<ul>
<li>语法：<code>&lt;script type=&quot;text/javascript&quot; src=&quot;外部js文件路径&quot;&gt;&lt;/script&gt;</code></li>
<li>作用范围：所有引入当前JS文件的页面</li>
</ul>
</li>
</ul>
<blockquote>
<p>小贴士：</p>
<ul>
<li><p>扩展:在开发时 style和link标签通常在head头部，script标签在body尾部…</p>
</li>
<li><p>注意：如果script标签引入了外部脚本，那么标签体不能自闭合，而且不允许有js代码</p>
</li>
</ul>
</blockquote>
<h3 id="2-2-注释"><a href="#2-2-注释" class="headerlink" title="2.2 注释"></a>2.2 注释</h3><ul>
<li>单行注释：<code>//注释内容</code></li>
<li>多行注释：<code>/* 注释内容 */</code></li>
</ul>
<h3 id="2-3-JS的三种输出方式"><a href="#2-3-JS的三种输出方式" class="headerlink" title="2.3 JS的三种输出方式"></a>2.3 JS的三种输出方式</h3><p>在JavaScript中，有三种输出方式，分别是</p>
<ul>
<li><p>在浏览器弹框输出：<code>alert(&#39;内容&#39;);</code></p>
</li>
<li><p>输出到html页面：<code>document.write(&#39;内容&#39;);</code></p>
</li>
<li><p>输出到浏览器控制台：<code>cosole.log(&#39;内容&#39;);</code></p>
</li>
</ul>
<p>代码示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS三种输出方式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1. 浏览器弹框输出字符</span></span></span><br><span class="line"><span class="actionscript">    alert(<span class="string">'哈哈'</span>)</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2. 输出html内容到页面</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.write(<span class="string">'呵呵'</span>)</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 3. 输出到浏览器控制台</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">'嘻嘻'</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="2-4-JS的数据类型及其变量声明"><a href="#2-4-JS的数据类型及其变量声明" class="headerlink" title="2.4 JS的数据类型及其变量声明"></a>2.4 JS的数据类型及其变量声明</h3><h4 id="2-4-1-数据类型"><a href="#2-4-1-数据类型" class="headerlink" title="2.4.1 数据类型"></a>2.4.1 数据类型</h4><p>数据类型可分为原始数据类型和引用数据类型：</p>
<ul>
<li>原始数据类型<ul>
<li>number：数值。包括整数、浮点数、NaN(not a number 一个不是数字的数字类型)</li>
<li>string：字符串。</li>
<li>boolean：true、flase</li>
<li>undefine：未定义</li>
<li>null：一个对象为空的占位符</li>
</ul>
</li>
<li>引用数据类型：对象(Object)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">'哈哈'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> str);</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">521</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> i);</span><br><span class="line">    <span class="keyword">let</span> u;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> u);</span><br><span class="line">    <span class="keyword">let</span> b = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> b);</span><br><span class="line">    <span class="keyword">let</span> n = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> n);</span><br><span class="line">    <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> date);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>小贴士：</p>
<ul>
<li><code>typeof 变量名</code>：可以查看变量的数据类型</li>
</ul>
</blockquote>
<h4 id="2-4-2-变量声明"><a href="#2-4-2-变量声明" class="headerlink" title="2.4.2 变量声明"></a>2.4.2 变量声明</h4><p>Java语言是强类型语言，而<strong>JavaScript是弱类型语言</strong>。</p>
<ul>
<li>强类型：在开辟变量存储空间时，定义了空间将来存储的数据的数据类型。只能存储固定类型的数据</li>
<li><strong>弱类型</strong>：在开辟变量存储空间时，不定义空间将来的存储数据类型，<strong>可以存放任意类型的数据</strong>。</li>
</ul>
<p>定义语法(这里讲解<code>ES6</code>的语法)：</p>
<ul>
<li><p>变量：<code>let 变量名 = 变量值;</code></p>
</li>
<li><p>常量：<code>const 常量名 = 常量值;</code></p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//Java: String str = "你好";</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">'你好'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(str);</span><br><span class="line">    <span class="comment">//Java: int i = 1314;</span></span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">1314</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">    <span class="comment">//Java: double d = 521.1314;</span></span><br><span class="line">    <span class="keyword">let</span> d = <span class="number">521.1314</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(d);</span><br><span class="line">    <span class="comment">//Java: final Integer PI = 3.14;</span></span><br><span class="line">    <span class="keyword">const</span> PI = <span class="number">3.14</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(PI);</span><br><span class="line">    <span class="comment">//Java: boolean b = true;</span></span><br><span class="line">    <span class="keyword">let</span> b = <span class="literal">true</span></span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="2-5-JS的运算符"><a href="#2-5-JS的运算符" class="headerlink" title="2.5 JS的运算符"></a>2.5 JS的运算符</h3><ol>
<li>一元运算符：只有一个运算数的运算符<ul>
<li>++，–，+【正号】</li>
</ul>
</li>
<li>算数运算符<ul>
<li>+，-，*，/，%…</li>
</ul>
</li>
<li>赋值运算符<ul>
<li>=，+=，-=</li>
</ul>
</li>
<li>比较运算符<ul>
<li>&lt;，&gt;，&gt;=，&lt;=，==，===(全等于)</li>
</ul>
</li>
<li>逻辑运算符<ul>
<li>&amp;&amp;，||，!</li>
<li>其他类型转boolean：<ol>
<li>number：0或NaN为假，其他为真</li>
<li>string：除了空字符串(“”)，其他都是true【双引号内有空格不算空串】</li>
<li>null&amp;undefined:都是false</li>
<li>对象：所有对象都为true</li>
</ol>
</li>
</ul>
</li>
<li>三元运算符<ul>
<li>? :</li>
<li>语法：<ul>
<li>表达式? 值1:值2;</li>
<li>判断表达式的值，如果是true则取值1，如果是false则取值2；</li>
</ul>
</li>
</ul>
</li>
</ol>
<blockquote>
<p>js与java的运算符使用方法大致相同。</p>
<p>NaN：not a number（意思是不是一个数字）</p>
<p>需要注意的是:</p>
<ul>
<li><p>js的数值可以与字符串参与数学运算，底层进行了隐式转换</p>
</li>
<li><p><code>===</code>：全等于，数值和数据类型全部一样才为true，<code>==</code>只比较数值</p>
</li>
</ul>
</blockquote>
<h3 id="2-6-JS流程控制"><a href="#2-6-JS流程控制" class="headerlink" title="2.6 JS流程控制"></a>2.6 JS流程控制</h3><p>高级语言中的三种基本结构：顺序、分支、循环 。</p>
<h4 id="2-6-1-条件判断"><a href="#2-6-1-条件判断" class="headerlink" title="2.6.1 条件判断"></a>2.6.1 条件判断</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>if判断</span><br><span class="line"><span class="code">		if (条件表达式) &#123;</span></span><br><span class="line"><span class="code">            代码块;</span></span><br><span class="line"><span class="code">        &#125; else if(条件表达式) &#123;</span></span><br><span class="line"><span class="code">            代码块;</span></span><br><span class="line"><span class="code">        &#125; else &#123;</span></span><br><span class="line"><span class="code">            代码块;</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">		</span></span><br><span class="line"><span class="bullet">2. </span>switch判断	</span><br><span class="line"><span class="code">		switch(条件表达式)&#123;</span></span><br><span class="line"><span class="code">            case 满足条件1 :</span></span><br><span class="line"><span class="code">            	代码块 break;</span></span><br><span class="line"><span class="code">            case 满足条件2 :</span></span><br><span class="line"><span class="code">            	代码块 break;</span></span><br><span class="line"><span class="code">            default:</span></span><br><span class="line"><span class="code">            	默认代码块;</span></span><br><span class="line"><span class="code">		&#125;</span></span><br></pre></td></tr></table></figure>



<p>代码示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// let flag = false;</span></span><br><span class="line">    <span class="comment">// let flag = ' '; // 非空串为真</span></span><br><span class="line">    <span class="comment">// let flag = 0; // 非零为真</span></span><br><span class="line">    <span class="comment">// let flag = new Date();  // 有对象为真</span></span><br><span class="line">    <span class="comment">// let flag ; // 未定义未假</span></span><br><span class="line">    <span class="keyword">let</span> flag = <span class="literal">null</span>; <span class="comment">// 空值为假</span></span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"真的"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"假的"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="2-6-2-循环语句"><a href="#2-6-2-循环语句" class="headerlink" title="2.6.2 循环语句"></a>2.6.2 循环语句</h4><p>在js中，有五种循环分别是：</p>
<ul>
<li><p>普通for循环</p>
<ul>
<li><pre><code class="js"><span class="keyword">for</span>(<span class="keyword">let</span> i= <span class="number">0</span>; i&lt;<span class="number">10</span>; i++){
    需要执行的代码;
}
&lt;!--￼<span class="number">5</span>--&gt;</code></pre>
</li>
</ul>
</li>
<li><p>索引for循环(for…in)</p>
<ul>
<li><pre><code class="js"><span class="keyword">for</span>(<span class="keyword">let</span> index <span class="keyword">in</span> array){
    需要执行的代码;
}
&lt;!--￼<span class="number">6</span>--&gt;</code></pre>
</li>
</ul>
</li>
<li><p>do..while循环</p>
<ul>
<li><pre><code class="js"><span class="keyword">do</span>{
    需要执行的代码;
}<span class="keyword">while</span>(条件表达式);
&lt;!--￼<span class="number">7</span>--&gt;


</code></pre>
</li>
</ul>
</li>
</ul>
<h3 id="2-7-扩展"><a href="#2-7-扩展" class="headerlink" title="2.7 扩展"></a>2.7 扩展</h3><p>在ES6之前，js定义变量使用var关键字定义。</p>
<ul>
<li>而var声明的变量没有块级作用域</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用var声明的变量没有块级作用域</span></span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> a = <span class="number">15</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">//10</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span> ; i  &lt; <span class="number">5</span> ; i++)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"haha"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(i); <span class="comment">//5</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'hehe'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(j);<span class="comment">//报错，j is not defined</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>上述代码，除出了for循环仍可以获取i的值，值为5</p>
</blockquote>
<h2 id="三、JS函数"><a href="#三、JS函数" class="headerlink" title="三、JS函数"></a>三、JS函数</h2><p>js函数是执行特定功能的代码块.也可以称为js方法</p>
<h3 id="3-1-普通函数"><a href="#3-1-普通函数" class="headerlink" title="3.1 普通函数"></a>3.1 普通函数</h3><p>格式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">参数<span class="number">1</span>,参数<span class="number">2</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> xxx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用：<code>函数名(实际参数1，实际参数2...);</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 二个数求和</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// console.log(a + b);</span></span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 三个数求和</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">return</span> a + b + c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 求N个数的和</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(args);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> arg <span class="keyword">of</span> args) &#123;</span><br><span class="line">            result+= arg;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// NaN not a number 这不是一个数</span></span><br><span class="line">    <span class="keyword">let</span> result = sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>js函数特点：</p>
<ul>
<li>声明的函数不需要定义返回值</li>
<li>声明的函数形参不需要使用变量修饰符声明</li>
<li>如果有返回值就加上return</li>
<li>js没有方法重载，重名的会被覆盖…</li>
<li>js的函数参数个数不太严谨【了解】</li>
<li>所有的函数体内置了arguments数组，用于接收调用时传递的实际参数</li>
<li>js函数支持可变参数</li>
</ul>
</blockquote>
<h3 id="3-2-匿名函数"><a href="#3-2-匿名函数" class="headerlink" title="3.2 匿名函数"></a>3.2 匿名函数</h3><p>格式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="四、事件"><a href="#四、事件" class="headerlink" title="四、事件"></a>四、事件</h2><p>事件：JS可以监听用户的行为,并调用函数来完成用户交互功能.</p>
<h3 id="4-1-常用事件"><a href="#4-1-常用事件" class="headerlink" title="4.1 常用事件"></a>4.1 常用事件</h3><p>点击事件：</p>
<ul>
<li>onclick：单击事件</li>
<li>ondbclick：双击事件</li>
</ul>
<p>焦点事件：</p>
<ul>
<li>onblur：失去焦点</li>
<li>onfocus：元素获得焦点</li>
</ul>
<p>加载事件：</p>
<ul>
<li>onload：页面加载完成后立即发生</li>
</ul>
<p>鼠标事件：</p>
<ul>
<li>onmousedown    鼠标按钮被按下。</li>
<li>onmouseup    鼠标按键被松开。</li>
<li>onmousemove    鼠标被移动。</li>
<li>onmouseover    鼠标移到某元素之上。</li>
<li>onmouseout    鼠标从某元素移开。</li>
</ul>
<p>键盘事件：</p>
<ul>
<li><p>onkeydown    某个键盘按键被按下。    </p>
</li>
<li><p>onkeyup        某个键盘按键被松开。</p>
</li>
<li><p>onkeypress    某个键盘按键被按下并松开。</p>
</li>
</ul>
<p>改变事件：</p>
<ul>
<li>onchange    域的内容被改变。</li>
</ul>
<p>表单事件：</p>
<ul>
<li>onsubmit    提交按钮被点击。</li>
</ul>
<h3 id="4-2-事件绑定"><a href="#4-2-事件绑定" class="headerlink" title="4.2 事件绑定"></a>4.2 事件绑定</h3><p>将事件与HTML标签进行绑定，实现交互功能。</p>
<p>代码示例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>08-事件绑定<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"普通函数"</span> <span class="attr">onclick</span>=<span class="string">"fun1()"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"匿名函数"</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 普通函数</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">fun1</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'我是普通函数...'</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 匿名函数</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1.获取button按钮的js对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2.给onclick属性绑定匿名函数</span></span></span><br><span class="line"><span class="actionscript">    btn.onclick=<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'我是匿名函数'</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>).onclick=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'我是匿名函数'</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="4-3-案例：页面交互"><a href="#4-3-案例：页面交互" class="headerlink" title="4.3 案例：页面交互"></a>4.3 案例：页面交互</h3><p>需求：给页面表单控件绑定对应事件，实现交互功能</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>案例：页面交互<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">姓名 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">学历</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"edu"</span> <span class="attr">id</span>=<span class="string">"edu"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>本科<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>大专<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span> <span class="attr">method</span>=<span class="string">"get"</span> <span class="attr">id</span>=<span class="string">"myForm"</span>&gt;</span></span><br><span class="line">    文本框：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"text"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//1. onload 页面加载完成</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  <span class="comment">// 当前窗口加载完毕后，触发的事件，执行函数完成某些功能</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//  alert('页面加载完毕。。。')</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// alert('haha')</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//2. onfocus 获取焦点</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'username'</span>).onfocus = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//  document.getElementById('username').value='哈哈';</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// js对象绑定事件时，也有this的概念，this表示当前的js对象</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.value = <span class="string">'呵呵'</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//3. onblur 失去焦点</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'username'</span>).onblur = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.value = <span class="string">''</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//4. onchange 表单控件的值改变时</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'edu'</span>).onchange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="keyword">this</span>.value)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//5. onclick 鼠标单击</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>).ondblclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'哎呀妈呀，我被点了》。。'</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 6. onsubmit 表单事件</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'myForm'</span>).onsubmit=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">       <span class="comment">// return true; // 表单正常提交</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">// 表单拦截</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="五、JS内置对象"><a href="#五、JS内置对象" class="headerlink" title="五、JS内置对象"></a>五、JS内置对象</h2><h3 id="5-1-string对象"><a href="#5-1-string对象" class="headerlink" title="5.1 string对象"></a>5.1 string对象</h3><p>字符串对象</p>
<ul>
<li>js构造字符串对象可以使用单引号(<code>&#39;&#39;</code>)，双引号(<code>&quot;&quot;</code>)，反引号<code>(``)</code>三种方式</li>
</ul>
<p>字符串的常用方法：</p>
<ul>
<li>substring(startIndex,endIndex) [start,end)  字符串截取</li>
<li>trim()  去掉左右空格</li>
<li>split()  切割字符串，变为数组</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="comment">//构造字符串对象可以使用  双引号,单引号,反引号</span></span><br><span class="line">    <span class="comment">// 双引号</span></span><br><span class="line">    <span class="keyword">let</span> str1 = <span class="string">"哈哈"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 单引号</span></span><br><span class="line">    <span class="keyword">let</span> str2 = <span class="string">'呵呵'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反引号：通过 $&#123;变量占位符&#125; ，帮助我们快速实现字符串拼接</span></span><br><span class="line">    <span class="keyword">let</span> str3 = <span class="string">`hello`</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> str3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 举个栗子</span></span><br><span class="line">    <span class="keyword">let</span> hero = <span class="string">"蔡文姬"</span>;</span><br><span class="line">    <span class="keyword">let</span> winRate = <span class="number">70</span>;</span><br><span class="line">    <span class="comment">// let str = "您选择的英雄是：" + hero + ",它的历史胜率为：" + winRate + "%";</span></span><br><span class="line">    <span class="keyword">let</span> str=<span class="string">`您选择的英雄是：<span class="subst">$&#123;hero&#125;</span>,</span></span><br><span class="line"><span class="string">            它的历史胜</span></span><br><span class="line"><span class="string">            率为<span class="subst">$&#123;winRate&#125;</span>%`</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(str);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ------------ 2. 字符串常用方法</span></span><br><span class="line">    <span class="keyword">let</span> test = <span class="string">`     你好啊！`</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(test.substring(<span class="number">5</span>, <span class="number">7</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(test.trim());</span><br><span class="line">    <span class="built_in">console</span>.log(test.split(<span class="string">','</span>));</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="5-2-array对象"><a href="#5-2-array对象" class="headerlink" title="5.2 array对象"></a>5.2 array对象</h3><p>数组对象：</p>
<p>构造数组对象有两种方式</p>
<ul>
<li><code>let arr = [ele1,ele2,ele3];</code></li>
<li><code>let arr = new Array(ele1,ele2,ele3);</code></li>
</ul>
<blockquote>
<p>特点：js数组长度和类型可以任意，所以我们可以简单理解为数组就是java中的list集合</p>
</blockquote>
<p>数组的常用方法：</p>
<ul>
<li><p>添加元素</p>
<ul>
<li>push() 向尾部添加</li>
<li>unshift() 向头部添加</li>
</ul>
</li>
<li><p>删除元素</p>
<ul>
<li>pop() 弹出最后一个元素</li>
<li>shift() 弹出第一个元素</li>
</ul>
</li>
<li><p>合并数组</p>
<ul>
<li>concat()</li>
</ul>
</li>
<li><p>数组排序</p>
<ul>
<li>sort()</li>
</ul>
</li>
<li><p>将数组转为字符串  （与字符串对象.split()方法相反 ）</p>
<ul>
<li>join()</li>
</ul>
</li>
<li><p>数组反转</p>
<ul>
<li>reverse()</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//1. 创建数组</span></span><br><span class="line">    <span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="string">'a'</span>,<span class="literal">true</span>,<span class="keyword">new</span> <span class="built_in">Date</span>()];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(arr1);</span><br><span class="line">    <span class="keyword">let</span> arr2= <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">'a'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(arr2);</span><br><span class="line">    <span class="comment">//2. 数组合并</span></span><br><span class="line">    <span class="keyword">let</span> newArray = arr1.concat(arr2);</span><br><span class="line">    <span class="built_in">console</span>.log(newArray);</span><br><span class="line">    <span class="comment">//3. 添加元素</span></span><br><span class="line">    newArray.push(<span class="string">'hehe'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(newArray);</span><br><span class="line">    <span class="comment">//4. 删除元素</span></span><br><span class="line">    <span class="keyword">let</span> result = newArray.pop();</span><br><span class="line">    <span class="built_in">console</span>.log(newArray);</span><br><span class="line">    <span class="comment">//5. 数组元素拼接为字符串</span></span><br><span class="line">    <span class="keyword">let</span> str = newArray.join(<span class="string">'-'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(str);</span><br><span class="line">    <span class="comment">//6. 排序数组元素 【了解】</span></span><br><span class="line">    <span class="keyword">let</span> array = [<span class="string">'a'</span>,<span class="string">'e'</span>,<span class="string">'c'</span>,<span class="string">'w'</span>]</span><br><span class="line">    <span class="built_in">console</span>.log(array.sort()); <span class="comment">// 升序</span></span><br><span class="line">    <span class="built_in">console</span>.log(array.sort().reverse()); <span class="comment">// 降序</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="5-3-Date对象"><a href="#5-3-Date对象" class="headerlink" title="5.3 Date对象"></a>5.3 Date对象</h3><p>日期对象：<code>let date = new Date();</code></p>
<p>常用方法：</p>
<ul>
<li><p>获取年份：<code>getFullYear()</code></p>
</li>
<li><p>获取月份：<code>getMonth()</code></p>
</li>
<li><p>获取几号：<code>getDate()</code></p>
</li>
<li><p>获取1970-至今的毫秒值：<code>getTime()</code></p>
</li>
<li><p>等等….</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="built_in">console</span>.log(date);</span><br><span class="line">    <span class="built_in">console</span>.log(date.toLocaleString()); <span class="comment">// 转为本地时间格式字符串</span></span><br><span class="line">    <span class="built_in">console</span>.log(date.getFullYear());<span class="comment">// 获取4位年份</span></span><br><span class="line">    <span class="built_in">console</span>.log(date.getMonth()+<span class="number">1</span>); <span class="comment">// 获取月份  （0~11）  需要+1</span></span><br><span class="line">    <span class="built_in">console</span>.log(date.getDate()); <span class="comment">// 获取几号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> nowDate = <span class="string">`<span class="subst">$&#123;date.getFullYear()&#125;</span>年<span class="subst">$&#123;date.getMonth()+<span class="number">1</span>&#125;</span>月<span class="subst">$&#123;date.getDate()&#125;</span>日`</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(nowDate);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(date.getTime()); <span class="comment">// 获取1970-今 的毫秒值 （时间戳 唯一性...）</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="5-4-Math对象"><a href="#5-4-Math对象" class="headerlink" title="5.4 Math对象"></a>5.4 Math对象</h3><p>数学运算对象：</p>
<ul>
<li>四舍五入：<code>round()</code></li>
<li>向下取整：<code>floor()</code></li>
<li>向上取整：<code>ceil()</code></li>
<li>产生随机数：<code>random()</code>【返回[0,1])之间的随机数，左闭右开，包含0不包含1】</li>
</ul>
<blockquote>
<p>可以理解为Math对象为Java中的数学工具类Math,里面的方法直接通过<code>Math.方法名</code>调用即可.</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script &gt;</span><br><span class="line">    <span class="keyword">let</span> n = <span class="number">1234.567</span>;</span><br><span class="line">    <span class="comment">//1. 四舍五入取整</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(n));</span><br><span class="line">    <span class="comment">//2. 向下取整</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor(n));</span><br><span class="line">    <span class="comment">//3. 向上取整</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Math</span>.ceil(n));</span><br><span class="line">    <span class="comment">//4. 产生随机数</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Math</span>.random());</span><br><span class="line">    <span class="comment">//5.练习生成[1-10] 随机数</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor((<span class="built_in">Math</span>.random() * <span class="number">10</span>) + <span class="number">1</span>));</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="5-5-全局函数"><a href="#5-5-全局函数" class="headerlink" title="5.5 全局函数"></a>5.5 全局函数</h3><p>全局函数：不需要创建对象，可以直接调用的函数，称为全局函数。</p>
<p>常用：</p>
<ul>
<li><p>字符串转为数字、</p>
<ul>
<li><p><code>parseInt()</code>  转为整型</p>
</li>
<li><p><code>parseFloat()</code>转为浮点型</p>
<blockquote>
<p>注意：从第一个字符开始转换，遇到非数值字符停止转换</p>
</blockquote>
</li>
</ul>
</li>
<li><p>对字符串编码和解码</p>
<ul>
<li><code>encodeURI()</code>编码</li>
<li><code>decodeURI()</code> 解码</li>
</ul>
</li>
<li><p>把字符串当作js表达式来执行</p>
<ul>
<li><code>eval(&quot;js代码&quot;)</code></li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script &gt;</span><br><span class="line">    <span class="comment">// 字符串转为数值</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">'a13a14.5a21'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(str));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(str));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 中文及特殊符号编码和解码</span></span><br><span class="line">    <span class="keyword">let</span> encode = <span class="built_in">encodeURI</span>(<span class="string">'全局函数'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(encode);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> decode = <span class="built_in">decodeURI</span>(<span class="string">'%E5%85%A8%E5%B1%80%E5%87%BD%E6%95%B0'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(decode);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="string">"alert('1')"</span></span><br><span class="line">    <span class="comment">// 执行js字符串的语句</span></span><br><span class="line">    <span class="built_in">eval</span>(<span class="string">"alert('1')"</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="六、BOM对象"><a href="#六、BOM对象" class="headerlink" title="六、BOM对象"></a>六、BOM对象</h2><p>浏览器对象模型：Browser Object Model</p>
<p>作用：把浏览器抽象成为一个对象模型,我们可以使用js模拟浏览器的一些功能。</p>
<h3 id="6-1-window对象"><a href="#6-1-window对象" class="headerlink" title="6.1 window对象"></a>6.1 window对象</h3><p> window对象：是当前窗口的一个顶级对象</p>
<h4 id="6-1-1-三种弹框"><a href="#6-1-1-三种弹框" class="headerlink" title="6.1.1 三种弹框"></a>6.1.1 三种弹框</h4><p>警告(提示)框：<code>alert()</code></p>
<p>确认框：<code>confirm()</code></p>
<ul>
<li>点击确定 返回true，点击取消 返回false</li>
</ul>
<p>输入框：<code>prompt()</code></p>
<ul>
<li>点击确定返回 用户输入值，点击取消返回 null</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 1.警告框</span></span><br><span class="line">    alert(<span class="string">'xxxxx'</span>);</span><br><span class="line">    <span class="comment">// 2.确认框</span></span><br><span class="line">    <span class="built_in">console</span>.log(confirm(<span class="string">'您确定要删除吗？'</span>));</span><br><span class="line">    <span class="comment">// 3.输入框</span></span><br><span class="line">    <span class="built_in">console</span>.log(prompt(<span class="string">'请输入你要搜索的内容？'</span>));</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="6-1-2-二种定时器"><a href="#6-1-2-二种定时器" class="headerlink" title="6.1.2 二种定时器"></a>6.1.2 二种定时器</h4><p>周期性定时器：</p>
<ul>
<li>创建：<code>let interval = setInterval(&#39;js代码&#39;,毫秒值)</code></li>
<li>销毁：<code>clearInterval(interval);</code></li>
</ul>
<p>一次性定时器</p>
<ul>
<li>创建：<code>let timeout = setTimeout(&#39;js代码&#39;,毫秒值);</code></li>
<li>销毁：<code>clearTimeout(timeout);</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>02-js二个定时器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn1"</span>&gt;</span>取消打印时间<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn2"</span>&gt;</span>取消打印自然数<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1. 定时3秒之后在警告框打印当前时间</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> timeout = setTimeout(<span class="string">'alert(new Date().toLocaleString())'</span>,<span class="number">3000</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2. 点击按钮取消打印时间</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>).onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">        clearTimeout(timeout)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 3. 每隔2秒在控制台打印递增自然数</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> num = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> interval = setInterval(<span class="string">'console.log(num++)'</span>,<span class="number">2000</span>);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 4. 点击按钮取消打印自然数</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'btn2'</span>).onclick=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">        clearInterval(interval)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="6-2-Location对象"><a href="#6-2-Location对象" class="headerlink" title="6.2 Location对象"></a>6.2 Location对象</h3><blockquote>
<p>把浏览器的地址栏封装为location对象</p>
</blockquote>
<p>Location地址</p>
<ul>
<li>获取当前窗口地址<ul>
<li><code>ocation.href</code></li>
</ul>
</li>
<li>刷新当前窗口<ul>
<li><code>location.reload()</code></li>
</ul>
</li>
<li>当前页跳转<ul>
<li><code>location.href=&#39;新地址&#39;</code></li>
</ul>
</li>
</ul>
<p>扩展：如果想打开一个新标签页，跳转新的页面</p>
<ul>
<li><code>window.open(&#39;新地址&#39;)</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>03-location对象<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"addr()"</span>&gt;</span>获取当前浏览器地址<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"refresh()"</span>&gt;</span>刷新当前页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"jump()"</span>&gt;</span> 跳转页面(重点)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"toOpen()"</span>&gt;</span> 打开新窗口<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 获取当前浏览器地址</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">addr</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">window</span>.location.href);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 刷新当前页面</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">refresh</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line">        location.reload()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 跳转页面(重点)</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">jump</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        location.href=<span class="string">'https://taobao.com'</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 打开新窗口</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">toOpen</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.open(<span class="string">'https://baidu.com'</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="七、DOM对象"><a href="#七、DOM对象" class="headerlink" title="七、DOM对象"></a>七、DOM对象</h2><p>文档对象模型：Document Object Model</p>
<p>作用：把页面中所有标签抽象为一个Document对象，然后通过JS动态修改标签及属性内容。</p>
<h3 id="7-1-DOM获取元素"><a href="#7-1-DOM获取元素" class="headerlink" title="7.1 DOM获取元素"></a>7.1 DOM获取元素</h3><p>第一种方式(ES6之前)：</p>
<ul>
<li>获取一个：<code>document.getElementById(id属性值)</code></li>
<li>获取多个：<ul>
<li><code>document.getElementsByTagName(标签名)</code>：返回数组</li>
<li><code>document.getElementsByClassName(class属性值)</code>：返回数组</li>
<li><code>document.getElementsByName(name属性值)</code>：返回数组</li>
</ul>
</li>
</ul>
<p>第二种方式：</p>
<ul>
<li>获取一个：<code>document.querySelector(id选择器)</code></li>
<li>获取多个：<code>document.querySelectorAll(css选择器)</code>：返回数组    </li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>dom获取元素<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">    姓名 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"德玛西亚"</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    密码 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    生日 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"date"</span> <span class="attr">name</span>=<span class="string">"birthday"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    性别</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"male"</span> <span class="attr">class</span>=<span class="string">"radio"</span>&gt;</span>男<span class="symbol">&amp;emsp;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"female"</span> <span class="attr">class</span>=<span class="string">"radio"</span>/&gt;</span>女<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    爱好</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"smoke"</span>&gt;</span>抽烟</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"drink"</span>&gt;</span>喝酒</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"perm"</span>&gt;</span>烫头<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    头像 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"pic"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    学历</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"edu"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>入门<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>精通<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span>放弃<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    简介</span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"userIntro"</span> <span class="attr">cols</span>=<span class="string">"30"</span> <span class="attr">rows</span>=<span class="string">"10"</span>&gt;</span>默认值<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">value</span>=<span class="string">"清空按钮"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交按钮"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1.获取id="username"的标签对象</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">'username'</span>));</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.querySelector(<span class="string">"#username"</span>));</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2.获取class="radio"的标签对象数组</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementsByClassName(<span class="string">'radio'</span>));</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.querySelectorAll(<span class="string">'.radio'</span>));</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 3.获取所有的option标签对象数组</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementsByTagName(<span class="string">"option"</span>));</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.querySelectorAll(<span class="string">'option'</span>));</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 4.获取name="hobby"的input标签对象数组</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementsByName(<span class="string">"hobby"</span>));</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.querySelectorAll(<span class="string">'input[name="hobby"]'</span>));</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 5.获取文件上传选择框</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.querySelectorAll(<span class="string">'form input[name="pic"]'</span>));</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取一个推荐使用getElementById，获取多个推荐使用ES6的语法。</p>
</blockquote>
<h3 id="7-2-DOM操作内容"><a href="#7-2-DOM操作内容" class="headerlink" title="7.2 DOM操作内容"></a>7.2 DOM操作内容</h3><ol>
<li><p>获取或者修改元素的   纯文本内容</p>
<ul>
<li>语法：js（元素）对象.innerText; </li>
</ul>
</li>
<li><p>获取或者修改元素的    html内容（可以解析标签）</p>
<ul>
<li>语法：js（元素）对象.innerHTML; </li>
</ul>
</li>
<li><p>获取或者修改包含自身的html内容（了解）</p>
<ul>
<li>语法：js（元素）对象.outerHTML; </li>
</ul>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>dom操作内容<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#myDiv</span>&#123;</span></span><br><span class="line">            border: 1px solid red;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myDiv"</span>&gt;</span>程序猿最讨厌的四件事：<span class="tag">&lt;<span class="name">br</span>&gt;</span>写注释、写文档…… <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> myDiv = <span class="built_in">document</span>.getElementById(<span class="string">'myDiv'</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1.innerText操作div内容</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1.1获取纯文本内容</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(myDiv.innerText);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1.2 覆盖原来的纯文本</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// myDiv.innerText='别人不写注释 &lt;br&gt; 别人不写文档';</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1.3 追加纯文本</span></span></span><br><span class="line"><span class="actionscript">   <span class="comment">// myDiv.innerText+='别人不写注释 &lt;br&gt; 别人不写文档';</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2.innerHTML操作div内容</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2.1获取超文本内容</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(myDiv.innerHTML);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2.2 覆盖原来的超文本</span></span></span><br><span class="line"><span class="actionscript">   <span class="comment">// myDiv.innerHTML='别人不写注释 &lt;br&gt; 别人不写文档';</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2.3 追加超文本</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    myDiv.innerHTML+='<span class="tag">&lt;<span class="name">br</span>&gt;</span>别人不写注释 <span class="tag">&lt;<span class="name">br</span>&gt;</span> 别人不写文档';</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 3.outerHTML操作div本身</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    myDiv.outerHTML='<span class="tag">&lt;<span class="name">p</span>&gt;</span>我原本是div，现在变成了p<span class="tag">&lt;/<span class="name">p</span>&gt;</span>'</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="7-3-DOM操作属性"><a href="#7-3-DOM操作属性" class="headerlink" title="7.3 DOM操作属性"></a>7.3 DOM操作属性</h3><ol>
<li><p>获取文本框的值,单选框或复选框的选中状态</p>
<ul>
<li>语法: <ul>
<li><code>js对象.属性名</code> 获取指定属性值</li>
<li><code>js对象.属性名=&#39;xxx&#39;</code> 设置指定属性的新值</li>
</ul>
</li>
</ul>
</li>
<li><p>给元素设置自定义属性使用: </p>
<ul>
<li>语法: <code>js对象.setAttribute(属性名,属性值)</code></li>
</ul>
</li>
<li><p>获取元素的自定义属性值<br> 语法: <code>js对象.getAttribute(属性名)</code></p>
</li>
<li><p>移除元素的自定义属性（了解）<br> 语法:<code>js对象.removeAttribute(属性名)</code></p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>dom操作属性<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">    姓名 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"德玛西亚"</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    爱好</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"smoke"</span>&gt;</span>抽烟</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"drink"</span>&gt;</span>喝酒</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"perm"</span> &gt;</span>烫头<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">value</span>=<span class="string">"清空按钮"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交按钮"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1.获取文本框预定义的属性值</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">'username'</span>).value);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'username'</span>).value = <span class="string">'草丛伦'</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2.给文本框设置自定义属性</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'username'</span>).setAttribute(<span class="string">"data-msg"</span>, <span class="string">'喜欢大宝剑...'</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 3.获取文本框自定义属性</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">'username'</span>).getAttribute(<span class="string">"data-msg"</span>));</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 4.移出文本框自定义属性</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'username'</span>).removeAttribute(<span class="string">"data-msg"</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="7-4-DOM操作样式"><a href="#7-4-DOM操作样式" class="headerlink" title="7.4 DOM操作样式"></a>7.4 DOM操作样式</h3><ol>
<li><p>给标签的style属性设置一个css样式</p>
<ul>
<li>语法: <code>js对象.style.样式名=&#39;样式值&#39;</code></li>
<li>js的样式名：fontSize</li>
</ul>
</li>
<li><p>给标签的style属性批量设置css样式</p>
<ul>
<li>语法:<code>js对象.style.cssText=&#39;css样式&#39;</code><ul>
<li>css的样式名：font-size</li>
</ul>
</li>
</ul>
</li>
<li><p>给标签绑定class的类选择器</p>
<ul>
<li>语法: <code>js对象.className=&#39;class选择器名&#39;</code></li>
</ul>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>dom操作样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#p1</span>&#123; <span class="attribute">background-color</span>: red;&#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.mp</span> &#123;</span></span><br><span class="line">            color: green</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.mpp</span> &#123;</span></span><br><span class="line">            background-color: lightgray;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p1"</span> <span class="attr">style</span>=<span class="string">""</span>&gt;</span>1. 设置一个css样式<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p2"</span>&gt;</span>2. 批量设置css样式<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p3"</span> &gt;</span>3. 通过class设置样式<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> p1 = <span class="built_in">document</span>.getElementById(<span class="string">"p1"</span>);<span class="comment">//获取段落标签</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> p2 = <span class="built_in">document</span>.getElementById(<span class="string">"p2"</span>);<span class="comment">//获取段落标签</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> p3 = <span class="built_in">document</span>.getElementById(<span class="string">"p3"</span>);<span class="comment">//获取段落标签</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1. 设置一个css样式</span></span></span><br><span class="line"><span class="actionscript">    p1.style.backgroundColor=<span class="string">'skyblue'</span>;</span></span><br><span class="line"><span class="actionscript">    p1.style.border=<span class="string">'1px solid red'</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1.1.获取第一个p标签 style属性 的背景css样式</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(p1.style.backgroundColor);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2. 批量设置css样式</span></span></span><br><span class="line"><span class="actionscript">    p2.style.cssText=<span class="string">'background-color:red;border:2px double black'</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 3. 通过class设置样式</span></span></span><br><span class="line"><span class="actionscript">    p3.className=<span class="string">"mp mpp"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="7-5-DOM操作元素"><a href="#7-5-DOM操作元素" class="headerlink" title="7.5 DOM操作元素"></a>7.5 DOM操作元素</h3><ol>
<li><p>创建一个标签对象</p>
<ul>
<li>语法：<code>document.createElement(&#39;标签名称&#39;)</code></li>
</ul>
</li>
<li><p>给父标签添加一个子标签</p>
<ul>
<li>语法：<code>父标签对象.appendChild(子标签对象)</code></li>
</ul>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>dom操作元素<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"star"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>古力娜扎<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>迪丽热巴<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 需求：添加一个新列表项</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 方式一：</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1.创建 li标签</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2.设置文本</span></span></span><br><span class="line"><span class="actionscript">    li.innerText=<span class="string">'萨瓦快递'</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 3.挂靠在 dom的 ul下面</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'star'</span>).appendChild(li);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 方式二： 推荐</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'star'</span>).innerHTML+=<span class="string">'&lt;li&gt;马尔扎哈&lt;/li&gt;'</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="八、JS正则"><a href="#八、JS正则" class="headerlink" title="八、JS正则"></a>八、JS正则</h2><p>作用：根据定义好的规则，过滤文本内容；这里我们用于校验表单</p>
<p>JS中的正则：</p>
<ul>
<li>创建：<ul>
<li><code>let rege = new RegExp(“正则表达式字符串”);</code></li>
<li><code>let rege = /正则表达式/;</code></li>
</ul>
</li>
<li>验证方法<ul>
<li><code>正则对象.test(要验证的字符串)</code><ul>
<li>符合正则规则就返回true，否则false</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>小扩展：</p>
<ul>
<li>在线正则表达式网站：<a href="https://tool.oschina.net/regex/#" target="_blank" rel="noopener">https://tool.oschina.net/regex/#</a></li>
</ul>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>09-正则表达式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//创建一个校验手机号的正则表达式，要求：11位、1开头，第二位：3456789</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// let reg = new RegExp('^1[3456789]\\d&#123;9&#125;$')</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> reg = <span class="regexp">/^1[3456789]\d&#123;9&#125;$/</span>;<span class="comment">//推荐这种方式创建正则对象</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">   	<span class="comment">//校验用户输入的值</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> value = <span class="string">'15933016675'</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(reg.test(value));</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 以邮箱举例</span></span></span><br><span class="line">    /*</span><br><span class="line">        mm@qqcn</span><br><span class="line">        jj@163.com</span><br><span class="line">        ...</span><br><span class="line">		邮箱后缀</span><br><span class="line">            com</span><br><span class="line">            cn</span><br><span class="line">            com.cn</span><br><span class="line">     */</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> emailReg = <span class="regexp">/^([a-z0-9\_.-]+)@([\da-z\.-]+)\.([a-z\.]&#123;2,6&#125;)$/</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(emailReg.test(<span class="string">'jj@126.cn'</span>));</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="九、练习案例"><a href="#九、练习案例" class="headerlink" title="九、练习案例"></a>九、练习案例</h2><h3 id="9-1-表单校验"><a href="#9-1-表单校验" class="headerlink" title="9.1 表单校验"></a>9.1 表单校验</h3><p>代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>注册页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        span&#123;</span><br><span class="line">            color: red;</span><br><span class="line">            font-size: 12px;</span><br><span class="line">            display: none;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span> <span class="attr">method</span>=<span class="string">"get"</span> <span class="attr">id</span>=<span class="string">"myForm"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"td_left"</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">placeholder</span>=<span class="string">"请输入账号"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"userInfo"</span>&gt;</span>用户名不合法<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"td_left"</span>&gt;</span>手机号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"telephone"</span> <span class="attr">name</span>=<span class="string">"telephone"</span> <span class="attr">placeholder</span>=<span class="string">"请输入手机号"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"telInfo"</span>&gt;</span>手机号不合法<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"td_left"</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"pwdInfo"</span>&gt;</span>密码不合法<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"td_left"</span>&gt;</span>验证码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"smsCode"</span> <span class="attr">id</span>=<span class="string">"smsCode"</span> <span class="attr">placeholder</span>=<span class="string">"请输入验证码"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>发送手机验证码<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"codeInfo"</span>&gt;</span>验证码不合法<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span> <span class="attr">align</span>=<span class="string">"center"</span> <span class="attr">width</span>=<span class="string">"373"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    /*</span><br><span class="line">        用户名正则，4到16位（字母，数字，下划线，减号）：/^[a-zA-Z0-9_-]&#123;4,16&#125;$/</span><br><span class="line">        必须是包含大小写字母和数字的组合，不能使用特殊字符，长度在6-10之间：/^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).&#123;6,10&#125;$/</span><br><span class="line">        手机号正则：/^1[3456789]\d&#123;9&#125;$/</span><br><span class="line">        验证码正则：/^\d&#123;6&#125;$/</span><br><span class="line">    */</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> userInput = <span class="built_in">document</span>.getElementById(<span class="string">'username'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> phoneInput = <span class="built_in">document</span>.getElementById(<span class="string">'telephone'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> pswInput = <span class="built_in">document</span>.getElementById(<span class="string">'password'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> smsCode = <span class="built_in">document</span>.getElementById(<span class="string">'smsCode'</span>);</span></span><br><span class="line">    /**</span><br><span class="line">     * 验证用户名</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">checkUser</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//定义正则</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> userReg = <span class="regexp">/^[a-zA-Z0-9_-]&#123;4,16&#125;$/</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> flag = userReg.test(userInput.value);</span></span><br><span class="line"><span class="actionscript">        noneOfInline(<span class="string">'userInfo'</span>,flag);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> flag;</span></span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 验证手机号</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">checkPhone</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//定义正则</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> phoneReg = <span class="regexp">/^1[3456789]\d&#123;9&#125;$/</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> flag = phoneReg.test(phoneInput.value);</span></span><br><span class="line"><span class="actionscript">        noneOfInline(<span class="string">'telInfo'</span>,flag);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> flag;</span></span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 验证密码</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">checkPsw</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//定义正则</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> pswReg = <span class="regexp">/^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).&#123;6,10&#125;$/</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> flag = pswReg.test(pswInput.value);</span></span><br><span class="line"><span class="actionscript">        noneOfInline(<span class="string">'pwdInfo'</span>,flag);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> flag;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 验证验证码</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">checkCode</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> codeReg = <span class="regexp">/^\d&#123;6&#125;$/</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> flag = codeReg.test(smsCode.value);</span></span><br><span class="line"><span class="actionscript">        noneOfInline(<span class="string">'codeInfo'</span>,flag);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> flag;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 定义函数，控制span标签的显示与隐藏</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">noneOfInline</span><span class="params">(info, flag)</span> </span>&#123;</span></span><br><span class="line">        if (flag)&#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(info).style.display = <span class="string">'none'</span>;</span></span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(info).style.display = <span class="string">'inline'</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    userInput.onblur = checkUser;</span><br><span class="line">    phoneInput.onblur = checkPhone;</span><br><span class="line">    pswInput.onblur = checkPsw;</span><br><span class="line">    smsCode.onblur = checkCode;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">    * 表单提交时验证全部是否都合法</span><br><span class="line">    */</span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'myForm'</span>).onsubmit = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> checkCode() &amp;&amp; checkPhone() &amp;&amp; checkPsw() &amp;&amp; checkUser();</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="9-2-商品全选"><a href="#9-2-商品全选" class="headerlink" title="9.2 商品全选"></a>9.2 商品全选</h3><p>代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>案例-商品全选<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">商品全选</span></span><br><span class="line"><span class="comment">    1. 全选 点击全选按钮,所有复选框都被选中</span></span><br><span class="line"><span class="comment">    2. 反选 点击反选按钮,所有复选框状态取反</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn1"</span>&gt;</span>1. 全选<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn2"</span>&gt;</span>2. 反选<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span>电脑</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span>手机</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span>汽车</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span>别墅</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">checked</span>=<span class="string">"checked"</span>&gt;</span>笔记本</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> boxs = <span class="built_in">document</span>.querySelectorAll(<span class="string">'input[type="checkbox"]'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; boxs.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">            boxs[i].checked = <span class="literal">true</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'btn2'</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> boxs = <span class="built_in">document</span>.querySelectorAll(<span class="string">'input[type="checkbox"]'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; boxs.length; i++) &#123;</span></span><br><span class="line">            boxs[i].checked = !boxs[i].checked;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="9-3-省市联动"><a href="#9-3-省市联动" class="headerlink" title="9.3 省市联动"></a>9.3 省市联动</h3><p>代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>案例-省市级联<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"provinceId"</span> <span class="attr">style</span>=<span class="string">"width:150px"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>----请-选-择-省----<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>河北<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>辽宁<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span>天津<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"cityId"</span> <span class="attr">style</span>=<span class="string">"width:150px"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>----请-选-择-市----<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">    /*</span><br><span class="line">	省市级联</span><br><span class="line">		1. 页面加载完成后自动装载省数据</span><br><span class="line">		2. 当选中省时,装载该省的市数据</span><br><span class="line">	*/</span><br><span class="line">    </span><br><span class="line"><span class="actionscript">    <span class="comment">// 准备数据</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> data = <span class="keyword">new</span> <span class="built_in">Array</span>();</span></span><br><span class="line"><span class="actionscript">    data[<span class="number">0</span>] = [<span class="string">'顺义区'</span>, <span class="string">'昌平区'</span>, <span class="string">'朝阳区'</span>];</span></span><br><span class="line"><span class="actionscript">    data[<span class="number">1</span>] = [<span class="string">"保定"</span>, <span class="string">"石家庄"</span>, <span class="string">"廊坊"</span>];</span></span><br><span class="line"><span class="actionscript">    data[<span class="number">2</span>] = [<span class="string">"沈阳"</span>, <span class="string">"铁岭"</span>, <span class="string">"抚顺"</span>];</span></span><br><span class="line"><span class="actionscript">    data[<span class="number">3</span>] = [<span class="string">"滨海新区"</span>, <span class="string">"宝坻区"</span>, <span class="string">"南开区"</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> provinceSelect = <span class="built_in">document</span>.getElementById(<span class="string">"provinceId"</span>);<span class="comment">//获取省下拉列表</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> citySelect = <span class="built_in">document</span>.getElementById(<span class="string">"cityId"</span>);<span class="comment">//获取市下拉列表</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    provinceSelect.onchange=<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//每次先复原</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        citySelect.innerHTML='<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>----请-选-择-市----<span class="tag">&lt;/<span class="name">option</span>&gt;</span>';</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//获取对应数组</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> citys=data[<span class="keyword">this</span>.value];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> city <span class="keyword">of</span> citys) &#123;</span></span><br><span class="line"><span class="javascript">            citySelect.innerHTML+=<span class="string">`&lt;option value="<span class="subst">$&#123;city&#125;</span>"&gt;<span class="subst">$&#123;city&#125;</span>&lt;/option&gt;`</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="9-4-隔行换色"><a href="#9-4-隔行换色" class="headerlink" title="9.4 隔行换色"></a>9.4 隔行换色</h3><p>代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>案例-隔行变色<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">"tab1"</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">width</span>=<span class="string">"800"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">width</span>=<span class="string">"100px"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"allCheck"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"check"</span>&gt;</span>全/<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"reCheck"</span> <span class="attr">name</span>=<span class="string">"check"</span> <span class="attr">type</span>=<span class="string">"radio"</span>&gt;</span>反选<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>分类ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>分类名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>分类描述<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"checkbox"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>手机数码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>手机数码类商品<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span>|<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"checkbox"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>电脑办公<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>电脑办公类商品<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span>|<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"checkbox"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>鞋靴箱包<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>鞋靴箱包类商品<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span>|<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"checkbox"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>家居饰品<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>家居饰品类商品<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span>|<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"checkbox"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>5<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>牛奶制品<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>牛奶制品类商品<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span>|<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"checkbox"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>6<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>大豆制品<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>大豆制品类商品<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span>|<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">隔行变色</span></span><br><span class="line"><span class="comment">	1. 表格奇偶行颜色不同</span></span><br><span class="line"><span class="comment">	2. 鼠标移入颜色高亮</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> trs = <span class="built_in">document</span>.querySelectorAll(<span class="string">'tr'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> oldColor;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; trs.length; i++) &#123;</span></span><br><span class="line">        if (i%2===0)&#123;</span><br><span class="line"><span class="actionscript">            trs[i].style.backgroundColor = <span class="string">'pink'</span>;</span></span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">            trs[i].style.backgroundColor = <span class="string">'lightgray'</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="comment">//鼠标移入改变背景色</span></span></span><br><span class="line"><span class="actionscript">        trs[i].onmouseover = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//记录旧的颜色</span></span></span><br><span class="line">            oldColor = trs[i].style.backgroundColor;</span><br><span class="line"><span class="actionscript">            trs[i].style.backgroundColor = <span class="string">'gold'</span>;</span></span><br><span class="line">        &#125;;</span><br><span class="line"><span class="actionscript">        <span class="comment">//移出鼠标复原颜色</span></span></span><br><span class="line"><span class="actionscript">        trs[i].onmouseout = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line">            trs[i].style.backgroundColor = oldColor;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> all = <span class="built_in">document</span>.getElementById(<span class="string">'allCheck'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> reverse = <span class="built_in">document</span>.getElementById(<span class="string">'reCheck'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> boxs = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.checkbox'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    all.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> box <span class="keyword">of</span> boxs) &#123;</span></span><br><span class="line"><span class="actionscript">            box.checked = <span class="literal">true</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="actionscript">    reverse.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> box <span class="keyword">of</span> boxs) &#123;</span></span><br><span class="line">            box.checked = !box.checked;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JS</tag>
      </tags>
  </entry>
</search>
