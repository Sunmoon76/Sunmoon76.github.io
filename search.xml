<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java基础知识</title>
    <url>/2020/06/21/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<a id="more"></a>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/06/20/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>类与对象、封装、构造方法</title>
    <url>/2020/07/19/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E3%80%81%E5%B0%81%E8%A3%85%E3%80%81%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="一、面向对象思想"><a href="#一、面向对象思想" class="headerlink" title="一、面向对象思想"></a>一、面向对象思想</h2><h3 id="1-1面向对象思想概述"><a href="#1-1面向对象思想概述" class="headerlink" title="1.1面向对象思想概述"></a>1.1面向对象思想概述</h3><p>面向过程思想：强调过程（步骤）</p>
<ul>
<li>注重的是过程,必须清楚每一个步骤,按照步骤一步一步去实现</li>
</ul>
<p>面向对象思想：强调对象</p>
<ul>
<li>注重的是对象,无须清楚每一个步骤,只需要使用对象调用行为来完成需求</li>
</ul>
<a id="more"></a>

<h3 id="1-2类和对象以及它们的关系"><a href="#1-2类和对象以及它们的关系" class="headerlink" title="1.2类和对象以及它们的关系"></a>1.2类和对象以及它们的关系</h3><p>【想要有对象，必须先有类】</p>
<p>类：一群具有相同属性和行为的事物的统称</p>
<ul>
<li>例如：人类、动物</li>
</ul>
<p>对象：类中某一个具体的存在（实例）</p>
<p>类和对象的关系：类是对象的模板，对象是类的实体。</p>
<ul>
<li>对象是以模板创建出来的实体，是具体的。</li>
</ul>
<p>通俗的就是以类作为模板创建创建对象。</p>
<h2 id="二、类与对象的使用"><a href="#二、类与对象的使用" class="headerlink" title="二、类与对象的使用"></a>二、类与对象的使用</h2><h3 id="2-1-定义类"><a href="#2-1-定义类" class="headerlink" title="2.1 定义类"></a>2.1 定义类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//格式：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line">	<span class="comment">//属性（成员变量）</span></span><br><span class="line">    数据类型 变量名;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//行为（成员方法）</span></span><br><span class="line">    <span class="keyword">public</span> 返回值类型 方法名(形式参数)&#123;</span><br><span class="line">        方法体;</span><br><span class="line">        <span class="keyword">return</span> 返回数值;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">	<span class="comment">//成员变量</span></span><br><span class="line">	String name;</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//成员方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"汪汪汪。。。"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"狗吃骨头"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-2-对象的创建和使用"><a href="#2-2-对象的创建和使用" class="headerlink" title="2.2 对象的创建和使用"></a>2.2 对象的创建和使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">创建对象格式：</span><br><span class="line">	类名 对象名 = <span class="keyword">new</span> 类名();</span><br><span class="line">使用对象：</span><br><span class="line">    对象名.成员变量名</span><br><span class="line">    对象名.成员方法名()</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDog</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		Dog dog = <span class="keyword">new</span> Dog();</span><br><span class="line">        dog.name = <span class="string">"小白"</span>;</span><br><span class="line">        dog.age = <span class="number">2</span>;</span><br><span class="line">        dog.bark();</span><br><span class="line">        dog.eat();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-3-成员变量的默认值【-】"><a href="#2-3-成员变量的默认值【-】" class="headerlink" title="2.3 成员变量的默认值【*】"></a>2.3 成员变量的默认值【*】</h3><p>成员变量是有默认值的，和数据类型有关。</p>
<ul>
<li><p>整数类型    默认值【0】</p>
</li>
<li><p>小数类型    默认值【0.0】</p>
</li>
<li><p>字符类型    默认值 【’ ‘】引号里面有个空格</p>
</li>
<li><p>布尔类型    默认值false</p>
</li>
<li><p>引用类型    默认值null</p>
</li>
</ul>
<h2 id="三、类与对象的内存图"><a href="#三、类与对象的内存图" class="headerlink" title="三、类与对象的内存图"></a>三、类与对象的内存图</h2><h3 id="3-1-Java内存的五大区"><a href="#3-1-Java内存的五大区" class="headerlink" title="3.1 Java内存的五大区"></a>3.1 Java内存的五大区</h3><table>
<thead>
<tr>
<th align="center">区域名称</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">栈区</td>
<td align="left">运行方法以及保存方法中定义的变量</td>
</tr>
<tr>
<td align="center">堆区</td>
<td align="left">保存new出来的东西(对象)</td>
</tr>
<tr>
<td align="center">方法区</td>
<td align="left">保存字节码文件</td>
</tr>
<tr>
<td align="center">本地方法区</td>
<td align="left">和操作系统相关的</td>
</tr>
<tr>
<td align="center">寄存器区</td>
<td align="left">和CPU相关的</td>
</tr>
</tbody></table>
<h3 id="3-2-一个对象内存图"><a href="#3-2-一个对象内存图" class="headerlink" title="3.2 一个对象内存图"></a>3.2 一个对象内存图</h3><p>略…</p>
<h3 id="3-3-两个对象内存图"><a href="#3-3-两个对象内存图" class="headerlink" title="3.3 两个对象内存图"></a>3.3 两个对象内存图</h3><p>略…</p>
<h3 id="3-4-多个对象名指向同一个对象的内存图"><a href="#3-4-多个对象名指向同一个对象的内存图" class="headerlink" title="3.4 多个对象名指向同一个对象的内存图"></a>3.4 多个对象名指向同一个对象的内存图</h3><p>略…</p>
<h2 id="四、成员变量和局部变量区别【-】"><a href="#四、成员变量和局部变量区别【-】" class="headerlink" title="四、成员变量和局部变量区别【*】"></a>四、成员变量和局部变量区别【*】</h2><h3 id="4-1-什么是成员变量和局部变量"><a href="#4-1-什么是成员变量和局部变量" class="headerlink" title="4.1 什么是成员变量和局部变量"></a>4.1 什么是成员变量和局部变量</h3><p>什么是成员变量：</p>
<ul>
<li>定义在【类中方法外】</li>
</ul>
<p>什么是局部变量：</p>
<ul>
<li>定义在【类中方法内】</li>
</ul>
<h3 id="5-2-成员变量和局部变量的五大区别"><a href="#5-2-成员变量和局部变量的五大区别" class="headerlink" title="5.2 成员变量和局部变量的五大区别"></a>5.2 成员变量和局部变量的五大区别</h3><ol>
<li>定义位置不同：<ul>
<li>成员变量：类中方法外</li>
<li>局部变量：类中方法内</li>
</ul>
</li>
<li>默认值不同：<ul>
<li>成员变量：有默认值</li>
<li>局部变量：没有默认值</li>
</ul>
</li>
<li>有效范围(作用域)不同<ul>
<li>成员变量：在整个类都是有效的</li>
<li>局部变量：只在当前方法中有效</li>
</ul>
</li>
<li>内存位置不同：<ul>
<li>成员变量：跟随对象保存在堆中</li>
<li>局部变量：跟随方法的运行保存在栈中的</li>
</ul>
</li>
<li>生命周期不同(从出生到销毁)：<ul>
<li>成员变量：跟随对象的创建而出现，跟随对象的销毁而销毁</li>
<li>局部变量：跟随方法的执行而出现，跟随方法执行完毕而销毁</li>
</ul>
</li>
</ol>
<h2 id="五、封装【-】"><a href="#五、封装【-】" class="headerlink" title="五、封装【*】"></a>五、封装【*】</h2><p>面向对象语言中三大特性：封装、继承、多态。</p>
<h3 id="5-1-对封装的理解"><a href="#5-1-对封装的理解" class="headerlink" title="5.1 对封装的理解"></a>5.1 对封装的理解</h3><p>封装思想的介绍：隐藏细节，提供对外界的访问方式。</p>
<h3 id="5-2-为什么要封装"><a href="#5-2-为什么要封装" class="headerlink" title="5.2 为什么要封装"></a>5.2 为什么要封装</h3><p>好处：<br>       1. 提高代码的安全性。<br>       2. 提高代码的复用性。</p>
<h3 id="5-3-封装的原则和步骤【-】"><a href="#5-3-封装的原则和步骤【-】" class="headerlink" title="5.3 封装的原则和步骤【*】"></a>5.3 封装的原则和步骤【*】</h3><p>原则：</p>
<p>​    a. 隐藏需要封装的数据</p>
<p>​    b. 对外暴漏可以访问的方式</p>
<p>步骤：</p>
<p>​    a. 使用private修饰要封装的数据</p>
<p>​    b. 对封装的数据提供getter/setter方法</p>
<h3 id="5-4-封装的操作"><a href="#5-4-封装的操作" class="headerlink" title="5.4 封装的操作"></a>5.4 封装的操作</h3><p>private关键字：称为私有关键字</p>
<ul>
<li>当前类中的成员变量/成员方法，如果被private关键字修饰了，那么该变量或者方法只能在当前类的内部使用。</li>
</ul>
<p>【注意】类中所有的成员变量，并提供相应的getter/setter方法，这就是一个JavaBean。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-5-this关键字"><a href="#5-5-this关键字" class="headerlink" title="5.5 this关键字"></a>5.5 this关键字</h3><ul>
<li><p>this的作用：</p>
</li>
<li><p>this的内存原理(this的本质)：</p>
<ul>
<li>this代表一个对象，当前对象。成员方法是由那个对象调用的，那么该方法中的this就代表哪个对象。</li>
</ul>
</li>
</ul>
<h3 id="5-6-封装总结"><a href="#5-6-封装总结" class="headerlink" title="5.6 封装总结"></a>5.6 封装总结</h3><ol>
<li>封装：是面向对象三大特征置以（封装、继承、多态）</li>
<li>封装原则：<ul>
<li>将成员变量隐藏——private关键字</li>
<li>对外提供getter\setter方法</li>
</ul>
</li>
<li>封装好处：<ul>
<li>提高代码的安全性</li>
<li>提高了代码的复用性</li>
</ul>
</li>
</ol>
<h2 id="六、构造方法"><a href="#六、构造方法" class="headerlink" title="六、构造方法"></a>六、构造方法</h2><h3 id="6-1-构造方法介绍"><a href="#6-1-构造方法介绍" class="headerlink" title="6.1 构造方法介绍"></a>6.1 构造方法介绍</h3><h4 id="6-1-1-构造方法"><a href="#6-1-1-构造方法" class="headerlink" title="6.1.1 构造方法"></a>6.1.1 构造方法</h4><p>构造方法就是创建类的对象时调用的方法。</p>
<p>例如：创建对象猫时</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cat cat = <span class="keyword">new</span> Cat();	<span class="comment">//实际上Cat()就是在调用构造方法</span></span><br></pre></td></tr></table></figure>

<h4 id="6-1-2-构造方法格式："><a href="#6-1-2-构造方法格式：" class="headerlink" title="6.1.2 构造方法格式："></a>6.1.2 构造方法格式：</h4><ul>
<li>构造方法名必须和类名一模一样</li>
<li>构造方法是没有返回值的，连void也没有</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">//默认构造方法，不写时会自动分配一个</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"默认构造方法..."</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-1-3-构造方法的功能"><a href="#6-1-3-构造方法的功能" class="headerlink" title="6.1.3 构造方法的功能"></a>6.1.3 构造方法的功能</h4><p>给生成的对象成员变量赋默认值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span></span>&#123;</span><br><span class="line">	System.out.println(<span class="string">"默认构造方法..."</span>);</span><br><span class="line">    <span class="comment">//例如做了如下操作：</span></span><br><span class="line">    <span class="comment">//this.name = null;</span></span><br><span class="line">    <span class="comment">//this.age = 0;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-2-注意事项"><a href="#6-2-注意事项" class="headerlink" title="6.2 注意事项"></a>6.2 注意事项</h3><p>构造方法中的四点注意事项：</p>
<ol>
<li>如果一个类我们没有写构造方法，那么系统会自动生成一个无参构造，构造中会给成员变量赋默认值。</li>
<li>构造方法也是方法，所以可以重载，但是如果我们重载了任意一个构造，那么系统将不会再分配无参构造。</li>
<li>无论我们如何使用构造，无参构造建议直接写出来</li>
<li>无参构造和有参构造区别在于：无参构造给成员变量赋默认值，有参构造给成员变量赋指定值。</li>
</ol>
<h3 id="6-3-标准类定义"><a href="#6-3-标准类定义" class="headerlink" title="6.3 标准类定义"></a>6.3 标准类定义</h3><p>标准类JavaBean：</p>
<ul>
<li>所有成员变量都需要封装（private + get/set）</li>
<li>应该给标准类提供至少两个构造：无参构造+全参构造</li>
</ul>
<p>代码示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> score;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 无参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 全参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">double</span> score)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// get/set方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getScore</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScore</span><span class="params">(<span class="keyword">double</span> score)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="一-面向对象"><a href="#一-面向对象" class="headerlink" title="一.面向对象"></a>一.面向对象</h3><p>面向对象是一种编程思想，该编程思想是从面向过程演化过来的。<br>面向过程：在完成功能的时候，我们需要关注里面的每一个细节，里面每一个步骤都是由我们自己亲力亲为去实现的。<br>面向对象：在完成功能的时候，我们只关注结果，里面的步骤是别人帮我们完成。</p>
<p>面向对象好处：<br>     1. 可以将复杂的事情简单化<br>     2. 更加符合人类思考的习惯。<br>     3. 从执行者变成指挥者。</p>
<p>类和对象：<br>    类：用来描述现实事物，是抽象的。比如学生，人。<br>    对象：是类的具体体现，是具体的。比如小明同学，小强同学。</p>
<h3 id="二-类的定义和使用"><a href="#二-类的定义和使用" class="headerlink" title="二. 类的定义和使用"></a>二. 类的定义和使用</h3><p>定义格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名 </span>&#123;</span><br><span class="line">	<span class="comment">//成员变量</span></span><br><span class="line">	<span class="comment">//成员方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用格式：</p>
<ol>
<li><p>导包【省略】<br>  如果两个类在同一个包下，不需要导包的</p>
</li>
<li><p>创建对象<br>  数据类型 对象名 = new 数据类型(…);</p>
</li>
<li><p>使用成员</p>
<p>  对象名.属性名<br>对象名.方法名(..);</p>
</li>
</ol>
<h3 id="三-局部变量和成员变量的区别"><a href="#三-局部变量和成员变量的区别" class="headerlink" title="三. 局部变量和成员变量的区别"></a>三. 局部变量和成员变量的区别</h3><p>定义位置不同：<br>        局部变量：在方法中定义。<br>        成员变量：在类中方法外定义。</p>
<p>使用范围不同：<br>    局部变量：只能在自己的作用域【里自己最近的一个大括号】内使用。<br>    成员变量：可以在整个类中使用</p>
<p>内存位置不同：<br>    局部变量： 跟随方法在栈内存中开辟<br>    成员变量： 跟随对象保存在堆内存中。</p>
<p>初始值不同：<br>    局部变量： 没有默认值，使用之前必须要赋值<br>    成员变量： 有默认值。 整数是0，小数是0.0，字符是’ ‘，布尔是false，引用类型是null</p>
<p>生命周期不同：<br>    局部变量： 在方法执行到定义变量这行代码的时候产生，一旦离开自己的作用域，局部变量就会消失<br>    成员变量： 跟随对象的产生而产生，随着对象的消失而消失。</p>
<h3 id="四-封装"><a href="#四-封装" class="headerlink" title="四. 封装"></a>四. 封装</h3><p>概念：隐藏具体的实现，提供对外的访问方式。<br>在代码中的体现：将属性私有，提供get和set方法。</p>
<h3 id="五-private"><a href="#五-private" class="headerlink" title="五. private"></a>五. private</h3><p>private是一个权限修饰符，表示私有。<br>private可以修饰成员变量和成员方法。<br>private修饰成员只能在本类中使用。</p>
<p><strong>注意：如果将属性私有，我们还要提供get和set方法让外界使用属性。</strong></p>
<h3 id="六-this关键字"><a href="#六-this关键字" class="headerlink" title="六. this关键字"></a>六. this关键字</h3><p>​    this可以解决的问题：可以区分同名的成员变量和局部变量。<br>​    this含义：表示调用者对象，this所在的方法是通过哪个对象调用的，this表示的就是哪个对象。</p>
<h3 id="七-构造方法"><a href="#七-构造方法" class="headerlink" title="七. 构造方法"></a>七. 构造方法</h3><p>作用：一般会使用构造方法在创建对象时给属性赋值。<br>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> 构造方法名(参数列表) &#123;</span><br><span class="line">    构造方法体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ol>
<li>如果在一个类中我们没有提供构造方法，那么系统会自动给我们提供一个空参数的构造方法。</li>
<li>如果在一个类中我们提供了构造方法，那么系统就不会给我们提供这个空参数的构造方法。</li>
<li>构造方法支持重载。</li>
</ol>
<h3 id="八-JavaBean制作【最终目标】"><a href="#八-JavaBean制作【最终目标】" class="headerlink" title="八. JavaBean制作【最终目标】"></a>八. JavaBean制作【最终目标】</h3><p>JavaBean就是定义类的规范</p>
<ol>
<li>将属性私有</li>
<li>提供get和set方法</li>
<li>提供空参数【必需提供】的构造方法和有参数【选择性提供】的构造方法</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>学习</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>String和StringBuilder</title>
    <url>/2020/07/20/String%E5%92%8CStringBuilder/</url>
    <content><![CDATA[<h2 id="一、String类"><a href="#一、String类" class="headerlink" title="一、String类"></a>一、String类</h2><h3 id="1-1-String概述"><a href="#1-1-String概述" class="headerlink" title="1.1 String概述"></a>1.1 String概述</h3><p><code>String</code>类代表字符串。  Java程序中的所有字符串文字（例如<code>&quot;abc&quot;</code> ）都被实现为此类的实例。</p>
<p>字符串是由一串数据组成，本质就是一个字符数组</p>
<p>【扩展】: 在<code>JDk 8</code>以及之前的版本，字符串本质是一个<code>char</code>数组。在<code>JDk 9</code>以及之后的版本，字符串本质是一个<code>byte</code>数组。</p>
<p>字符串不变; 它们的值在创建后不能被更改。 字符串缓冲区支持可变字符串。  因为String对象是不可变的，它们可以被共享。</p>
<p>String所在的包在<code>java,lang</code>包，<code>java.lang</code>包下的东西都是非常常用的，所以Java中有一个优化。<code>java.lang</code>包下的东西在使用时不需要导包。</p>
<a id="more"></a>

<h3 id="1-2-创建字符串对象"><a href="#1-2-创建字符串对象" class="headerlink" title="1.2 创建字符串对象"></a>1.2 创建字符串对象</h3><p><code>String()</code> : 空参数的构造方法，使用该构造方法创建传来的字符串里面没有任何内容。</p>
<p><code>String(String original)</code> : 参数需要传递一个字符串，根据一个字符串创建字符串对象。</p>
<p><code>String(char[] value)</code> : 根据字符数组创建字符串对象。</p>
<p><code>String(char[] value, int offset, int count)</code> : 根据字符数组的一部分创建字符串。参数offset表示从字符数组的哪个索引位置开始，count表示多少个字符。</p>
<p><code>String(byte[] bytes)</code> : 根据字节数组的内容创建字符串对象。</p>
<p><code>String(byte[] bytes, int offset, int length)</code> : 将byte数组的一部分转成字符串。参数offset表示从数组的哪个索引位置开始，length表示转多少个字符。</p>
<p><code>直接赋值创建字符串对象。</code></p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01String</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//空参</span></span><br><span class="line">        String s1 = <span class="keyword">new</span> String();</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">		</span><br><span class="line">        String s2 = <span class="keyword">new</span> String(<span class="string">"Hello"</span>);</span><br><span class="line">        System.out.println(s2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] cArr = &#123;<span class="string">'h'</span>,<span class="string">'e'</span>,<span class="string">'l'</span>,<span class="string">'l'</span>,<span class="string">'o'</span>&#125;;</span><br><span class="line">        String s3 = <span class="keyword">new</span> String(cArr);</span><br><span class="line">        System.out.println(s3);</span><br><span class="line"></span><br><span class="line">        String s4 = <span class="keyword">new</span> String(cArr,<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">        System.out.println(s4);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bArr = &#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>,<span class="number">100</span>,<span class="number">101</span>&#125;;</span><br><span class="line">        String s5 = <span class="keyword">new</span> String(bArr);</span><br><span class="line">        System.out.println(s5);</span><br><span class="line"></span><br><span class="line">        String s6 = <span class="keyword">new</span> String(bArr,<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">        System.out.println(s6);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//直接赋值——最常用</span></span><br><span class="line">        String s7 = <span class="string">"hello"</span>;</span><br><span class="line">        System.out.println(s7);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-new的方式创建对象和直接赋值的方式创建对象的区别"><a href="#1-3-new的方式创建对象和直接赋值的方式创建对象的区别" class="headerlink" title="1.3 new的方式创建对象和直接赋值的方式创建对象的区别"></a>1.3 new的方式创建对象和直接赋值的方式创建对象的区别</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 字符串new的方式创建对象和直接赋值的方式创建对象的区别</span></span><br><span class="line"><span class="comment"> * 	==比较基本类型和引用类型的区别:</span></span><br><span class="line"><span class="comment"> * 		i.如果==比较基本类型，比较的是值</span></span><br><span class="line"><span class="comment"> * 		ii.如果==比较引用类型，比较的是地址值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03String</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s1 = <span class="keyword">new</span> String(<span class="string">"hello"</span>);</span><br><span class="line">        String s2 = <span class="string">"hello"</span>;</span><br><span class="line">        System.out.println(s1 == s2);<span class="comment">//false</span></span><br><span class="line">        String s3 = <span class="string">"hello"</span>;</span><br><span class="line">        System.out.println(s1 == s3);<span class="comment">//false</span></span><br><span class="line">        System.out.println(s2 == s3);<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>字符串是常量，会保存到常量池中。</strong></p>
<p><strong>只有使用双引号直接写出来的字符串才是常量。</strong></p>
<p>常量池扩展：</p>
<ul>
<li>在<code>JDK6</code>以及之前的版本，常量池在方法区</li>
<li>在<code>JDk7</code>的时候，常量池在堆内存</li>
<li>在<code>JDK8</code>的时间，常量池在元空间【方法区】</li>
</ul>
<p>字符串常量是可以复用的，当我们使用到一个字符串常量是，会先看一下常量池中有没有这个东西，如果有，就直接使用常量池中的，如果没有，就创建一个该字符串常量存放到常量池中。</p>
<p><strong>【结论】new的方式创建字符串，会先由栈指向堆，再有堆指向常量池。直接复制的方式是由栈直接指向常量池。</strong></p>
<h3 id="1-4-字符串常用方法"><a href="#1-4-字符串常用方法" class="headerlink" title="1.4 字符串常用方法"></a>1.4 字符串常用方法</h3><h4 id="1-4-1-判断方法"><a href="#1-4-1-判断方法" class="headerlink" title="1.4.1 判断方法"></a>1.4.1 判断方法</h4><p><code>boolean equals(Object anObject)</code>：比较两个字符串的内容是否相同。参数如果是Object，可以传递任何数据，包括字符串。</p>
<p><code>boolean equalsIgnoreCase(String anotherString)</code> ：比较两个字符串的内容是否相同，忽略大小写。</p>
<p><code>boolean contains(CharSequence s)</code>  ：判断字符串中是否包含指定的字符串。</p>
<p><code>boolean startsWith(String prefix)</code> ：判断字符串是否以指定的内容开头。</p>
<p><code>boolean endsWith(String suffix)</code>：判断字符串是否以指定的内容结尾。</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04String</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        String s1 = <span class="string">"hello"</span>;</span><br><span class="line">        String s2 = <span class="keyword">new</span> String(<span class="string">"hello"</span>);</span><br><span class="line">        String s3 = <span class="string">"HeLlo"</span>;</span><br><span class="line">        System.out.println(s1.equals(s2));<span class="comment">//true</span></span><br><span class="line">        System.out.println(s1.equals(s3));<span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">"==================="</span>);</span><br><span class="line">        System.out.println(s1.equalsIgnoreCase(s3));<span class="comment">//true</span></span><br><span class="line">        System.out.println(s1.equalsIgnoreCase(s2));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">"===================="</span>);</span><br><span class="line">        String str = <span class="string">"helloworld"</span>;</span><br><span class="line">        System.out.println(str.contains(<span class="string">"nihao"</span>));<span class="comment">//false</span></span><br><span class="line">        System.out.println(str.contains(<span class="string">"owo"</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">"===================="</span>);</span><br><span class="line">        System.out.println(str.startsWith(<span class="string">"abc"</span>));<span class="comment">//false</span></span><br><span class="line">        System.out.println(str.startsWith(<span class="string">"he"</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">"===================="</span>);</span><br><span class="line">        System.out.println(str.endsWith(<span class="string">"aa"</span>));<span class="comment">//false</span></span><br><span class="line">        System.out.println(str.endsWith(<span class="string">"ld"</span>));<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-4-2-获取方法"><a href="#1-4-2-获取方法" class="headerlink" title="1.4.2 获取方法"></a>1.4.2 获取方法</h4><p><code>int length()</code>  ：返回此字符串的长度。 </p>
<p><code>String concat(String str)</code> ：将指定的字符串连接到该字符串的末尾。 返回拼接后的字符串。</p>
<p><code>char charAt(int index)</code>：获取指定索引位置的字符，并返回。</p>
<p><code>int indexOf(String str)</code>  : 查找某个字符串第一次出现的索引。如果没有找到，返回-1。</p>
<p><code>int lastIndexOf(String str)</code> : 查找某个字符串最后一次出现的索引，如果没有找到，返回-1。</p>
<p><code>String substring(int beginIndex)</code> ：截取字符串，从<code>beginIndex</code>开始，一直到末尾，返回截取后的字符串。 </p>
<p><code>String substring(int beginIndex, int endIndex)</code>：截取字符串从<code>beginIndex</code>开始，<code>endIndex</code>结束， 包含头，不包含尾，返回截取后的字符串。 </p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05String</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String s1 = <span class="string">"Hello"</span>;</span><br><span class="line">        <span class="keyword">int</span> len = s1.length();</span><br><span class="line">        System.out.println(<span class="string">"字符串长度:"</span> + len);</span><br><span class="line"></span><br><span class="line">        String s2 = <span class="string">"World"</span>;</span><br><span class="line">        String str = s1.concat(s2);</span><br><span class="line">        System.out.println(<span class="string">"拼接后的字符串:"</span> + str);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> ch = str.charAt(<span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">"字符串索引为5位置的字符是："</span> + ch);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> index = str.indexOf(<span class="string">"oWo"</span>);</span><br><span class="line">        System.out.println(<span class="string">"字符串oWo在str中第一次出现的索引为："</span> + index);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> lastIndex = str.lastIndexOf(<span class="string">"ld"</span>);</span><br><span class="line">        System.out.println(<span class="string">"字符串ld在st中最后一次穿线的索引为:"</span> + lastIndex);</span><br><span class="line"></span><br><span class="line">        String subStr = str.substring(<span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">"在字符串str索引为5开始截取一直到末尾，截取后的字符串为："</span> + subStr);</span><br><span class="line"></span><br><span class="line">        String subStr1 = str.substring(<span class="number">2</span>, <span class="number">6</span>);</span><br><span class="line">        System.out.println(<span class="string">"在字符串str索引2开始一直截取到索引为6，包含2不包含6，返回后的字符串为："</span> + subStr1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">控制台输出：</span><br><span class="line">    字符串长度:<span class="number">5</span></span><br><span class="line">    拼接后的字符串:HelloWorld</span><br><span class="line">    字符串索引为<span class="number">5</span>位置的字符是：W</span><br><span class="line">    字符串oWo在str中第一次出现的索引为：<span class="number">4</span></span><br><span class="line">    字符串ld在st中最后一次穿线的索引为:<span class="number">8</span></span><br><span class="line">    在字符串str索引为<span class="number">5</span>开始截取一直到末尾，截取后的字符串为：World</span><br><span class="line">    在字符串str索引<span class="number">2</span>开始一直截取到索引为<span class="number">6</span>，包含<span class="number">2</span>不包含<span class="number">6</span>，返回后的字符串为：lloW</span><br></pre></td></tr></table></figure>



<h4 id="1-4-3-转换方法"><a href="#1-4-3-转换方法" class="headerlink" title="1.4.3 转换方法"></a>1.4.3 转换方法</h4><p><code>char[] toCharArray()</code> ：将此字符串转换为新的字符数组。 </p>
<p><code>byte[] getBytes()</code>  ：将字符串转成字节数组并返回。</p>
<p><code>String toLowerCase()</code>  ：将字符串全部转成小写并返回转换后新的字符串。</p>
<p><code>String toUpperCase()</code> ：将字符串全部转成大写并返回转换后新的字符串。</p>
<p><code>String replace(String oldChar, String newChar)</code>  ：替换字符串，使用<code>newStr</code>替换掉<code>oldStr</code>，并返回替换后的字符串。</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06String</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String str = <span class="string">"Hello,World"</span>;</span><br><span class="line">        <span class="keyword">char</span>[] strArr = str.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strArr.length; i++) &#123;</span><br><span class="line">            System.out.print(strArr[i]+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">"=========================="</span>);</span><br><span class="line">        String s1 = <span class="string">"abcde"</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = s1.getBytes();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bytes.length; i++) &#123;</span><br><span class="line">            System.out.print(bytes[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">"=========================="</span>);</span><br><span class="line">        String lowerStr = str.toLowerCase();</span><br><span class="line">        System.out.println(lowerStr);</span><br><span class="line">        System.out.println(<span class="string">"=========================="</span>);</span><br><span class="line">        String upperStr = str.toUpperCase();</span><br><span class="line">        System.out.println(upperStr);</span><br><span class="line">        System.out.println(<span class="string">"=========================="</span>);</span><br><span class="line">        String newStr = str.replace(<span class="string">"Hello,"</span>, <span class="string">"hello"</span>);</span><br><span class="line">        System.out.println(newStr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="1-4-4-分割方法"><a href="#1-4-4-分割方法" class="headerlink" title="1.4.4 分割方法"></a>1.4.4 分割方法</h4><p><code>String[] split(String regex)</code>  ：根据指定字符串进行切割，切割之后的内容会方法字符串数组中返回。</p>
<p><code>String trim()</code>  ：去除字符串两边的空格。</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo07String</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        String str  = <span class="string">"hello,world,java"</span>;</span><br><span class="line">        String[] strs = str.split(<span class="string">","</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strs.length; i++) &#123;</span><br><span class="line">            System.out.println(strs[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"===================="</span>);</span><br><span class="line">        String s1 = <span class="string">"   hello   world      "</span>;</span><br><span class="line">        String newStr = s1.trim();</span><br><span class="line">        System.out.println(newStr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-5-String练习"><a href="#1-5-String练习" class="headerlink" title="1.5 String练习"></a>1.5 String练习</h3><p><strong>需求：统计字符个数，键盘录入一个字符串，统计字符串中大小写字母及数字字符个数。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo08StringTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入大小写字母以及数字："</span>);</span><br><span class="line">        String str = sc.next();</span><br><span class="line">        <span class="keyword">int</span> lower = countLower(str);</span><br><span class="line">        <span class="keyword">int</span> upper = countUpper(str);</span><br><span class="line">        <span class="keyword">int</span> num = countNum(str);</span><br><span class="line">        System.out.println(<span class="string">"小写字母个数为："</span> + lower);</span><br><span class="line">        System.out.println(<span class="string">"大写字母个数为："</span> + upper);</span><br><span class="line">        System.out.println(<span class="string">"数字字符个数为："</span> + num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统计字符串中数字个数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">countNum</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str.charAt(i)&gt;=<span class="string">'0'</span> &amp;&amp; str.charAt(i)&lt;=<span class="string">'9'</span>)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统计字符串中大写字母个数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">countUpper</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str.charAt(i)&gt;=<span class="string">'A'</span> &amp;&amp; str.charAt(i)&lt;=<span class="string">'Z'</span>)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统计字符串中小写字母个数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">countLower</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str.charAt(i)&gt;=<span class="string">'a'</span> &amp;&amp; str.charAt(i)&lt;=<span class="string">'z'</span>)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">请输入大小写字母以及数字：</span><br><span class="line">ASDASDsdasdaddASJDBJ8734876#&amp;^$*&amp;#$^*&amp;%123asdASDASD</span><br><span class="line">小写字母个数为：<span class="number">11</span></span><br><span class="line">大写字母个数为：<span class="number">18</span></span><br><span class="line">数字字符个数为：<span class="number">10</span></span><br></pre></td></tr></table></figure>



<h2 id="二、StringBuilder类"><a href="#二、StringBuilder类" class="headerlink" title="二、StringBuilder类"></a>二、StringBuilder类</h2><h3 id="2-1-StringBuilder概述"><a href="#2-1-StringBuilder概述" class="headerlink" title="2.1 StringBuilder概述"></a>2.1 StringBuilder概述</h3><p>StringBuilder 是一个可变的字符序列，我们可以把它看成可变的字符串。</p>
<p>StringBuilder也是由字符组成的数据，本质也是字符数组，内部也是使用字符数组保存数据</p>
<h3 id="2-2-StringBuilder和String区别"><a href="#2-2-StringBuilder和String区别" class="headerlink" title="2.2 StringBuilder和String区别"></a>2.2 StringBuilder和String区别</h3><p>String：内容不可改变。</p>
<p>StringBuilder：内容可以改变。</p>
<p>String：字符串具有不变性，创建之后不能被改编，如果我们使用字符串进行拼接，每次都会创建型的字符串这样既耗时，又浪费空间。</p>
<p>StringBuilder：可以看成可变的字符串，如果使用StringBuilder进行拼接，效率会高一些。</p>
<h3 id="2-3-StringBuilder构造方法"><a href="#2-3-StringBuilder构造方法" class="headerlink" title="2.3 StringBuilder构造方法"></a>2.3 StringBuilder构造方法</h3><p><code>StringBuilder()</code>：使用该构造方法创建的StringBuilder对象里面没有任何内容。</p>
<p><code>StringBuilder(String str)</code> : 根据字符串的内容创建StringBuilder对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02StringBuilder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        System.out.println(<span class="string">"sb:"</span> + sb);</span><br><span class="line"></span><br><span class="line">        StringBuilder newSb = <span class="keyword">new</span> StringBuilder(<span class="string">"hello"</span>);</span><br><span class="line">        System.out.println(<span class="string">"newSb:"</span> + newSb);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：StringBuilder是一个特殊的引用类型，如果直接输出对象名，输出的是对象的内容。</strong></p>
<h3 id="2-4-StringBuilder常用方法"><a href="#2-4-StringBuilder常用方法" class="headerlink" title="2.4 StringBuilder常用方法"></a>2.4 StringBuilder常用方法</h3><p><code>StringBuilder append(任何类型)</code>：拼接(追加，添加)数据 。返回值是调用者对象本身。</p>
<p><code>StringBuilder reverse()</code>  ：对StringBuilder进行反转。返回值是调用者本身。</p>
<p><code>String toString()</code> ：将StringBuilder转成字符串并返回。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03StringBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="comment">// System.out.println("sb:" + sb);</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// StringBuilder newSb = sb.append("hello");</span></span><br><span class="line">        <span class="comment">// System.out.println("sb:" + sb);</span></span><br><span class="line">        <span class="comment">// System.out.println("newSb:" + newSb);</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// System.out.println(sb == newSb);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//链式编程</span></span><br><span class="line">        sb.append(<span class="string">"hello"</span>).append(<span class="string">"world"</span>).append(<span class="string">"java"</span>);</span><br><span class="line">        System.out.println(<span class="string">"sb:"</span> + sb); <span class="comment">//helloworldjava</span></span><br><span class="line"></span><br><span class="line">        sb.reverse();</span><br><span class="line">        System.out.println(<span class="string">"sb:"</span> + sb); <span class="comment">//avajdlrowolleh</span></span><br><span class="line"></span><br><span class="line">        String s = sb.reverse().toString();</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-5-String和StringBuilder相互转换"><a href="#2-5-String和StringBuilder相互转换" class="headerlink" title="2.5 String和StringBuilder相互转换"></a>2.5 String和StringBuilder相互转换</h3><p>StringBuilder —&gt; String : 调用toString()方法即可</p>
<p>String —&gt; StringBuilder : 通过StringBuilder的构造方法根据String创建StringBuilder对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04StringBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(<span class="string">"hello"</span>);</span><br><span class="line">        System.out.println(<span class="string">"sb:"</span> + sb);</span><br><span class="line"></span><br><span class="line">        String s = sb.toString();</span><br><span class="line">        System.out.println(<span class="string">"s:"</span> + s);</span><br><span class="line"></span><br><span class="line">        String str = <span class="string">"World"</span>;</span><br><span class="line">        StringBuilder sb1 = <span class="keyword">new</span> StringBuilder(str);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"str:"</span> + str);</span><br><span class="line">        System.out.println(<span class="string">"sb1"</span> + sb1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-6-练习——字符串拼接"><a href="#2-6-练习——字符串拼接" class="headerlink" title="2.6 练习——字符串拼接"></a>2.6 练习——字符串拼接</h3><p><strong>需求：定义一个方法，把 int 数组中的数据按照指定的格式拼接成一个字符串返回，调用该方法，并在控制台输出结果。例如，数组为int[] arr = {1,2,3}; ，执行方法后的输出结果为：[1, 2, 3]</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04StringBuilderTset</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        String str = arrayToString(nums);</span><br><span class="line">        System.out.println(<span class="string">"拼接后的字符串："</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">arrayToString</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(<span class="string">"["</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i&lt;nums.length-<span class="number">1</span>) &#123;</span><br><span class="line">                sb.append(nums[i] + <span class="string">","</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(<span class="string">"]"</span>);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>使用<code>next()</code>读取输入时遇到空格时自动截断字符串，看不到后面输入内容，<code>nextLine()</code>则不然。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test03</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String[] ss = &#123;<span class="string">"笨蛋"</span>,<span class="string">"尼玛"</span>,<span class="string">"傻瓜"</span>&#125;;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入一个字符串："</span>);</span><br><span class="line">        <span class="comment">//String str = sc.next();</span></span><br><span class="line">        String str = sc.nextLine();</span><br><span class="line">        String strFilter = filter(str,ss);</span><br><span class="line">        System.out.println(<span class="string">"过滤后的字符串为："</span> + strFilter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">filter</span><span class="params">(String str , String[] strings)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strings.length; i++) &#123;</span><br><span class="line">            str = str.replace(strings[i],<span class="string">"**"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="next-和nextLine-区别小结"><a href="#next-和nextLine-区别小结" class="headerlink" title="next()和nextLine()区别小结"></a>next()和nextLine()区别小结</h3><p><code>next()</code>是一定要读取到有效的字符后才可以结束输入，对输入有效字符之前遇到的<code>空格键</code>、<code>Tab键</code>或<code>Enter键</code>等结束符，<code>next()</code>方法会自动将其去掉，只有在输入有效字符之后，<code>next()</code>方法才将其后输入的<code>空格键</code>、<code>Tab键</code>或<code>Enter键</code>等视为<code>分隔符或结束符</code>。所以，<code>next()</code>不能读取含有空格的字符串。<br><code>nextLine()</code>返回的<code>Enter键</code>之前的<code>所有</code>字符，它是可以得到带空格的字符串的。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>学习</tag>
        <tag>问题</tag>
      </tags>
  </entry>
  <entry>
    <title>ArrayList集合</title>
    <url>/2020/07/22/ArrayList%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><p>为什么使用集合？</p>
<p>数组定长，如果存储满了，那么数组就无法继续保存数据了，所以有了集合。</p>
<p>集合就是一个容器，这个容器可以保存很多数据(元素)</p>
<a id="more"></a>

<h3 id="集合和数组的区别"><a href="#集合和数组的区别" class="headerlink" title="集合和数组的区别"></a>集合和数组的区别</h3><ul>
<li><p>数组的长度固定，集合的长度是可变的</p>
</li>
<li><p>数组既可以保存基本类型的数据，也可以保存引用类型的数据；集合只能保存引用类型的数据。</p>
</li>
</ul>
<h3 id="ArrayList集合"><a href="#ArrayList集合" class="headerlink" title="ArrayList集合"></a>ArrayList集合</h3><p><code>ArrayList&lt;E&gt;</code>表示集合，其中<code>&lt;E&gt;</code>是一个特殊的东西，叫做泛型。想要使用这个集合是，就使用相应的引用类型替换掉<code>E</code>即可。</p>
<p><code>集合想要保存什么类型的数据，就用什么类型替换掉尖括号中的E</code></p>
<p>举例：</p>
<ul>
<li><code>ArrayList&lt;String&gt;</code>：集合保存的就是<code>字符串(String)</code>类型的数据</li>
<li><code>ArrayList&lt;Student&gt;</code>：集合保存的就是<code>Student</code>类型的数据</li>
</ul>
<p><strong>注意：集合是一种特殊的引用类型，直接打印集合名称，将打印出里面的内容</strong></p>
<h3 id="ArrayList集合的构造方法"><a href="#ArrayList集合的构造方法" class="headerlink" title="ArrayList集合的构造方法"></a>ArrayList集合的构造方法</h3><p><code>ArrayList()</code>：空参构造方法，使用该构造方法创建集合时里面没有任何数据。</p>
<h3 id="ArrayList集合的常用方法"><a href="#ArrayList集合的常用方法" class="headerlink" title="ArrayList集合的常用方法"></a>ArrayList集合的常用方法</h3><p><code>boolean add(E e)</code>:添加元素到集合的末尾</p>
<p><code>void add(int index, E element)</code>：在指定位置添加元素。</p>
<p><code>int size()</code>：获取集合的大小，集合中有几个元素，集合的大小就是多少。</p>
<p><code>E get(int index)</code>：获取指定索引位置的元素。</p>
<p><code>E remove(int index)</code>：根据索引删除元素，并且返回被删除的元素。</p>
<p><code>boolean remove(Object o)</code>：直接删除指定元素，删除成功返回true。</p>
<p><code>E set(int index, E element)</code>：替换元素。使用element替换掉index索引位置的元素，返回值就是被替换掉的元素</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        list.add(<span class="string">"hello"</span>);</span><br><span class="line">        list.add(<span class="string">"world"</span>);</span><br><span class="line">        list.add(<span class="string">"java"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"list:"</span> + list);</span><br><span class="line"></span><br><span class="line">        System.out.println(list.set(<span class="number">2</span>, <span class="string">"php"</span>));</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// System.out.println(list.remove("java"));</span></span><br><span class="line">        <span class="comment">// System.out.println(list);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// System.out.println(list.remove(1));</span></span><br><span class="line">        <span class="comment">// System.out.println(list);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// System.out.println("获取索引为1的元素：" + list.get(1));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out.println("集合的大小是：" + list.size());</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// list.add(2, "php");</span></span><br><span class="line">        <span class="comment">// System.out.println("list:" + list);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="集合存储基本类型的数据"><a href="#集合存储基本类型的数据" class="headerlink" title="集合存储基本类型的数据"></a>集合存储基本类型的数据</h3><p>前文说到，集合只能存储引用类型的数据，那么我们如果要存储基本类型的数据时，要如何做?</p>
<p>解决方法：集合保存基本类型的数据，需要使用对应的包装类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    list.add(<span class="number">100</span>);</span><br><span class="line">    list.add(<span class="number">200</span>);</span><br><span class="line">    list.add(<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(list);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="概念引入——包装类"><a href="#概念引入——包装类" class="headerlink" title="概念引入——包装类"></a>概念引入——包装类</h4><p>每种基本数据类型都有它所对应的引用类型，这个对应的引用类型叫做包装类。</p>
<table>
<thead>
<tr>
<th>基本类型</th>
<th>包装类</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>Byte</td>
</tr>
<tr>
<td>short</td>
<td>Short</td>
</tr>
<tr>
<td>int</td>
<td>Integer</td>
</tr>
<tr>
<td>long</td>
<td>Long</td>
</tr>
<tr>
<td>float</td>
<td>Float</td>
</tr>
<tr>
<td>double</td>
<td>Double</td>
</tr>
<tr>
<td>boolean</td>
<td>Boolean</td>
</tr>
<tr>
<td>char</td>
<td>Character</td>
</tr>
</tbody></table>
<h3 id="集合的遍历"><a href="#集合的遍历" class="headerlink" title="集合的遍历"></a>集合的遍历</h3><p>集合的遍历，和数组基本相同，使用<code>size()</code>方法获取集合的长度，然后使用for循环，遍历即可。</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="string">"张三丰"</span>);</span><br><span class="line">    list.add(<span class="string">"李四"</span>);</span><br><span class="line">    list.add(<span class="string">"张张"</span>);</span><br><span class="line">    list.add(<span class="string">"拉拉"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">        System.out.println(list.get(i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用集合存储Student类型数据并遍历打印</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line">    Student s0 = <span class="keyword">new</span> Student(<span class="string">"拉拉"</span>,<span class="number">20</span>);</span><br><span class="line">    Student s1 = <span class="keyword">new</span> Student(<span class="string">"哈哈"</span>,<span class="number">22</span>);</span><br><span class="line">    Student s2 = <span class="keyword">new</span> Student(<span class="string">"呵呵"</span>,<span class="number">24</span>);</span><br><span class="line">    list.add(s0);</span><br><span class="line">    list.add(s1);</span><br><span class="line">    list.add(s2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">        Student stu = list.get(i);</span><br><span class="line">        System.out.println(stu.getName()+<span class="string">"-"</span>+stu.getAge());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Student类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, String age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//  get/set方法略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Scanner录入产生的问题"><a href="#Scanner录入产生的问题" class="headerlink" title="Scanner录入产生的问题"></a>Scanner录入产生的问题</h3><p>在一个方法中，同一个Scanner对象，如果即调用<code>nextLine</code>键盘录入字符串，又调用其他的，<code>nextXxx</code>方法，就有可能引发问题,，因为<code>nextLine</code>方法能够检查其他方法的回车，从而导致录入结束。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    System.out.println(<span class="string">"请输入一个数字："</span>);</span><br><span class="line">    <span class="keyword">int</span> num = sc.nextInt();</span><br><span class="line">    System.out.println(<span class="string">"num:"</span>+num);</span><br><span class="line">    System.out.println(<span class="string">"请输入一个字符串："</span>);</span><br><span class="line">    String str = sc.nextLine();</span><br><span class="line">    System.out.println(<span class="string">"str:"</span> + str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的main方法在执行时，<code>str</code>的值为空，没有进行录入赋值，<code>nextLine()</code>方法检测到<code>nextInt()</code>方法的回车，提前结束了输入，控制台内容如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">请输入一个数字：</span><br><span class="line"><span class="number">18</span></span><br><span class="line">num:<span class="number">18</span></span><br><span class="line">请输入一个字符串：</span><br><span class="line">str:</span><br></pre></td></tr></table></figure>

<p>解决办法：</p>
<p>给<code>nextInt</code>，<code>nextDouble</code>单独创建一个<code>Scanner</code>对象</p>
<p>给<code>nextLine</code>单独创建一个对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    System.out.println(<span class="string">"请输入一个数字："</span>);</span><br><span class="line">    <span class="keyword">int</span> num = sc.nextInt();</span><br><span class="line">    System.out.println(<span class="string">"num:"</span>+num);</span><br><span class="line">    Scanner sc2 = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    System.out.println(<span class="string">"请输入一个字符串："</span>);</span><br><span class="line">    String str = sc2.nextLine();</span><br><span class="line">    System.out.println(<span class="string">"str:"</span> + str);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">请输入一个数字：</span><br><span class="line"><span class="number">12</span></span><br><span class="line">num:<span class="number">12</span></span><br><span class="line">请输入一个字符串：</span><br><span class="line">dsd</span><br><span class="line">str:dsd</span><br></pre></td></tr></table></figure>

<h3 id="综合案例——学生管理系统"><a href="#综合案例——学生管理系统" class="headerlink" title="综合案例——学生管理系统"></a>综合案例——学生管理系统</h3><p>需求：针对目前我们的所学内容，完成一个综合案例：学生管理系统！</p>
<p>该系统主要功能如下：</p>
<ul>
<li>添加学生：通过键盘录入学生信息，添加到集合中</li>
<li>删除学生：通过键盘录入要删除学生的学号，将该学生对象从集合中删除</li>
<li>修改学生：通过键盘录入要修改学生的学号，将该学生对象其他信息进行修改</li>
<li>查看学生：将集合中的学生对象信息进行展示</li>
<li>退出系统：结束程序</li>
</ul>
<p>学生类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String id, String name, String age, String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// get/set方法略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>系统类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Student&gt; stuList = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        Scanner scId = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String id = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"================欢迎进入学生管理系统==================="</span>);</span><br><span class="line">            System.out.println(<span class="string">"1.添加学员"</span>);</span><br><span class="line">            System.out.println(<span class="string">"2.删除学员"</span>);</span><br><span class="line">            System.out.println(<span class="string">"3.修改学员"</span>);</span><br><span class="line">            System.out.println(<span class="string">"4.查找学员"</span>);</span><br><span class="line">            System.out.println(<span class="string">"5.退出系统"</span>);</span><br><span class="line">            System.out.println(<span class="string">"====================================================="</span>);</span><br><span class="line">            System.out.println(<span class="string">"请输入功能序号："</span>);</span><br><span class="line">            <span class="keyword">int</span> target = sc.nextInt();</span><br><span class="line">            <span class="keyword">switch</span> (target)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    addStudent(stuList);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    System.out.println(<span class="string">"请输入要删除学员的id："</span>);</span><br><span class="line">                    id = scId.nextLine();</span><br><span class="line">                    deleteStudent(stuList,id);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    System.out.println(<span class="string">"请输入要修改学员的id："</span>);</span><br><span class="line">                    id = scId.nextLine();</span><br><span class="line">                    changeStudent(stuList,id);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                    lookStudent(stuList);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                    System.out.println(<span class="string">"bye~"</span>);</span><br><span class="line">                    System.exit(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">"输入有误，请输入1-5之间的数字！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断学员id是否存在，存在返回对象的在集合中的索引，不存在返回-1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stuList</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">decideIdExist</span><span class="params">(ArrayList&lt;Student&gt; stuList, String id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stuList.size(); i++) &#123;</span><br><span class="line">            Student stu = stuList.get(i);</span><br><span class="line">            <span class="keyword">if</span> (stu.getId().equals(id))&#123;</span><br><span class="line">                index = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id修改学生信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stuList</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">changeStudent</span><span class="params">(ArrayList&lt;Student&gt; stuList, String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = decideIdExist(stuList, id);</span><br><span class="line">        <span class="keyword">if</span> (index == -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"输入的学员id不存在，"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Student student = stuList.get(index);</span><br><span class="line">            Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            System.out.println(<span class="string">"修改学生姓名为"</span>);</span><br><span class="line">            String name = sc.nextLine();</span><br><span class="line">            System.out.println(<span class="string">"修改学生年龄为"</span>);</span><br><span class="line">            String age = sc.nextLine();</span><br><span class="line">            System.out.println(<span class="string">"修改学生所在地为"</span>);</span><br><span class="line">            String address = sc.nextLine();</span><br><span class="line">            student.setName(name);</span><br><span class="line">            student.setAge(age);</span><br><span class="line">            student.setAddress(address);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看所有信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stuList</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">lookStudent</span><span class="params">(ArrayList&lt;Student&gt; stuList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (stuList.isEmpty())&#123;</span><br><span class="line">            System.out.println(<span class="string">"学生列表为空，请添加后在查看。"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"id\t\t姓名\t\t年龄\t\t所在地"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stuList.size(); i++) &#123;</span><br><span class="line">            Student student = stuList.get(i);</span><br><span class="line">            System.out.println(student.getId()+<span class="string">"\t"</span>+student.getName()+<span class="string">"\t"</span>+student.getAge()+<span class="string">"\t"</span>+student.getAddress());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除学生信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stuList</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteStudent</span><span class="params">(ArrayList&lt;Student&gt; stuList, String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = decideIdExist(stuList, id);</span><br><span class="line">        <span class="keyword">if</span> (index == -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"输入的学员id不存在，"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            stuList.remove(index);</span><br><span class="line">            System.out.println(<span class="string">"删除成功！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加学生信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stuList</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addStudent</span><span class="params">(ArrayList&lt;Student&gt; stuList)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String id = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"请输入学生id:"</span>);</span><br><span class="line">            id = sc.nextLine();</span><br><span class="line">            <span class="keyword">if</span> (decideIdExist(stuList,id) != -<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"学员id已存在,请重新输入学员id"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"请输入学生姓名:"</span>);</span><br><span class="line">        String name = sc.nextLine();</span><br><span class="line">        System.out.println(<span class="string">"请输入学生年龄："</span>);</span><br><span class="line">        String age = sc.nextLine();</span><br><span class="line">        System.out.println(<span class="string">"请输入学生所在地："</span>);</span><br><span class="line">        String address = sc.nextLine();</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student(id,name,age,address);</span><br><span class="line">        stuList.add(stu);</span><br><span class="line">        System.out.println(<span class="string">"添加成功！！！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>学习</tag>
        <tag>问题</tag>
        <tag>集合</tag>
      </tags>
  </entry>
  <entry>
    <title>继承、抽象类与模板设计模式、final关键字</title>
    <url>/2020/07/23/%E7%BB%A7%E6%89%BF%E3%80%81%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%A8%A1%E6%9D%BF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%81final%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    <content><![CDATA[<h2 id="一、匿名对象"><a href="#一、匿名对象" class="headerlink" title="一、匿名对象"></a>一、匿名对象</h2><p>匿名对象：没有名字的对象</p>
<p>有名字：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student stu = <span class="keyword">new</span> Student()</span><br></pre></td></tr></table></figure>

<p>没有名字：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Student();</span><br></pre></td></tr></table></figure>



<p>匿名对象好处：稍微简化了操作</p>
<p>使用场景：</p>
<ul>
<li>如果某个对象只需要使用一次，那么可以使用匿名对象。</li>
<li>匿名对象可以当作参数传递</li>
</ul>
<a id="more"></a>

<h2 id="二、继承"><a href="#二、继承" class="headerlink" title="二、继承"></a>二、继承</h2><p>继承是多态的前提，没有继承就没有多态</p>
<p>Java中的继承描述的是事物之间的所属关系，比如人属于动物，就可以让人区继承动物。</p>
<p>子类继承父类，会拥有父类的所有成员(父类的私有成员也能继承，不过无法直接访问)</p>
<p><strong>继承的好处：提高代码的复用性</strong></p>
<h3 id="2-1-继承的格式"><a href="#2-1-继承的格式" class="headerlink" title="2.1 继承的格式"></a>2.1 继承的格式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-子类不能继承的内容"><a href="#2-2-子类不能继承的内容" class="headerlink" title="2.2 子类不能继承的内容"></a>2.2 子类不能继承的内容</h3><ul>
<li>父类中的构造方法子类是无法继承的</li>
<li>父类中的私有成员子类可以继承，但是继承了也没法【直接使用】，可以间接使用，通过<code>get/set</code>方法</li>
</ul>
<h3 id="2-3-继承后的特点——成员变量"><a href="#2-3-继承后的特点——成员变量" class="headerlink" title="2.3 继承后的特点——成员变量"></a>2.3 继承后的特点——成员变量</h3><ul>
<li>如果子父类的成员变量不同名时，那么访问时取决于是哪个成员变量名</li>
<li>如果子父类成员变量同名，那么在 子类中优先访问子类的成员变量</li>
<li>如果子父类成员变量同名了，那么想要在子类中访问父类的成员变量，需要使用<code>super.成员变量名</code>来访问。</li>
</ul>
<h3 id="2-4-继承后的特点——成员方法"><a href="#2-4-继承后的特点——成员方法" class="headerlink" title="2.4 继承后的特点——成员方法"></a>2.4 继承后的特点——成员方法</h3><ul>
<li>如果子父类成员方法不同名时，取决于调用哪个方法名</li>
<li>如果子父类的成员方法同名时，那么使用子类对象去调用方法时，优先访问子类的成员方法。</li>
<li>我们可以在子类的方法中，使用<code>super.方法名()</code>，指定父类中的某个方法</li>
</ul>
<h3 id="2-5-继承后的特点——构造方法"><a href="#2-5-继承后的特点——构造方法" class="headerlink" title="2.5 继承后的特点——构造方法"></a>2.5 继承后的特点——构造方法</h3><ul>
<li><p>子类无法继承父类的构造方法</p>
</li>
<li><p>子类的任何构造方法中第一行会有一句隐藏的代码<code>super();</code>，调用父类的无参构造</p>
</li>
</ul>
<h3 id="2-6-方法重写"><a href="#2-6-方法重写" class="headerlink" title="2.6 方法重写"></a>2.6 方法重写</h3><p>注意事项：</p>
<ul>
<li>在方法重写的，参数列表必须相同</li>
<li>子类方法的权限必须大于等于父类方法的权限</li>
<li>私有方法不能重写</li>
</ul>
<p><code>方法重写时,方法名,参数列表,修饰符,返回值类型一般都是一致的</code></p>
<p>应用场景：父类方法不能满足子类需要时，就可以在子类进行方法的重写。</p>
<p>@Override：方法重写注解</p>
<p>作用：如果我们在方法上写了@Override注解，那么就代表方法是重写的，编译器就会帮助我们检查重写的语法是否正确</p>
<h3 id="2-7-super-…-和this-…"><a href="#2-7-super-…-和this-…" class="headerlink" title="2.7 super(…)和this(…)"></a>2.7 super(…)和this(…)</h3><h4 id="2-7-1-super"><a href="#2-7-1-super" class="headerlink" title="2.7.1 super"></a>2.7.1 super</h4><p>super的三种用途：</p>
<ul>
<li>可以访问父类的成员变量：<code>super.变量名;</code></li>
<li>可以访问父类的成员方法：<code>super.方法名();</code></li>
<li>可以调用父类的构造方法：<code>super(参数);</code></li>
</ul>
<h4 id="2-7-2-this"><a href="#2-7-2-this" class="headerlink" title="2.7.2 this"></a>2.7.2 this</h4><p>this的三种用途：</p>
<ul>
<li>可以访问本类的成员变量：<code>this.变量名;</code></li>
<li>调用本类的其他成员方法：<code>this.方法名();</code></li>
<li>调用本类的其他构造方法：<code>this(参数);</code></li>
</ul>
<h3 id="2-8-继承的特点"><a href="#2-8-继承的特点" class="headerlink" title="2.8 继承的特点"></a>2.8 继承的特点</h3><ol>
<li>Java只支持单继承，不支持多继承<ul>
<li>一个子类，最多只能有一个父类</li>
</ul>
</li>
<li>一个类可以有多个子类。<ul>
<li>一个父类，可以有多个子类</li>
</ul>
</li>
<li>可以多层继承<ul>
<li>一个子类，可以继承一个父类，这个父类可以继承他的父类，它的父类有继承其他类</li>
</ul>
</li>
</ol>
<h2 id="三、抽象类"><a href="#三、抽象类" class="headerlink" title="三、抽象类"></a>三、抽象类</h2><h3 id="3-1-抽象类的概念和引入"><a href="#3-1-抽象类的概念和引入" class="headerlink" title="3.1 抽象类的概念和引入"></a>3.1 抽象类的概念和引入</h3><p>抽象类：含有抽象方法的类，那么该类一定是一个抽象类。</p>
<p>抽象方法：只有方法的声明(头部)，没有方法体的方法，我们称为抽象方法</p>
<h3 id="3-2-abstract使用格式"><a href="#3-2-abstract使用格式" class="headerlink" title="3.2 abstract使用格式"></a>3.2 abstract使用格式</h3><p>抽象方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> 返回值类型 方法名(参数列表);</span><br></pre></td></tr></table></figure>

<p>抽象类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    <span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>抽象类的使用：</p>
<ol>
<li>抽象类不能直接new对象</li>
<li>抽象类天生就是被其它类继承的</li>
<li>其他类继承抽象类后，必须重写抽象类的所有抽象方法，让后才能创建子类对象，否则子类还会是一个抽象类</li>
</ol>
<p>【定义抽象类—&gt;定义一个子类继承抽象类—&gt;重写抽象类中的所有抽象方法】</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"猫跑跑跑..."</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-3-抽象类的特征和注意事项"><a href="#3-3-抽象类的特征和注意事项" class="headerlink" title="3.3 抽象类的特征和注意事项"></a>3.3 抽象类的特征和注意事项</h3><p>抽象类的特点：有得有失</p>
<ul>
<li><p>得：得到了拥有抽象方法得能力</p>
</li>
<li><p>失：失去了创建对象得能力</p>
</li>
</ul>
<p>除了以上两点，在其他方面与普通类没有多大区别</p>
<p>注意事项：</p>
<ul>
<li>抽象类不能创建对象</li>
<li>抽象类是有构造方法的，构造方法可以给成员变量赋值</li>
<li>抽象类中，不一定含有抽象方法，但是含有抽象方法的类一定是抽象类（抽象类中可以没有抽象方法）</li>
<li>抽象类的子类，必须重写抽象父类中所有的抽象方法，不然子类也是一个抽象类</li>
<li>抽象类的作用为了让子类继承，抽象方法的作用为了让所有子类重写，作为类的模板！</li>
</ul>
<h3 id="3-4-抽象类存在的意义"><a href="#3-4-抽象类存在的意义" class="headerlink" title="3.4 抽象类存在的意义"></a>3.4 抽象类存在的意义</h3><p>抽象类体现的是模板思想</p>
<h3 id="3-5-模板设计模式"><a href="#3-5-模板设计模式" class="headerlink" title="3.5 模板设计模式"></a>3.5 模板设计模式</h3><p><code>模板模式思想：将固定的流程定义在父类中，不同的地方使用抽象方法，让子类去继承重写</code>。</p>
<p>需求：</p>
<ul>
<li><p>新司机开车：开门、点火、双手紧握方向盘、刹车、熄火</p>
</li>
<li><p>老司机开车：开门、点火、右手握方向盘左手抽烟、刹车、熄火</p>
</li>
</ul>
<p>案例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 父类：司机类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Driver</span> </span>&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开车的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">driver</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"开门..."</span>);</span><br><span class="line">        System.out.println(<span class="string">"点火..."</span>);</span><br><span class="line">        <span class="comment">//不同的司机开车的姿势不一样</span></span><br><span class="line">        ziShi();</span><br><span class="line">        System.out.println(<span class="string">"刹车..."</span>);</span><br><span class="line">        System.out.println(<span class="string">"熄火..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开车的姿势</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">ziShi</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子类：新司机</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewDriver</span> <span class="keyword">extends</span> <span class="title">Driver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ziShi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"双手紧握方向盘..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子类：老司机</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OldDriver</span> <span class="keyword">extends</span> <span class="title">Driver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ziShi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"右手握方向盘左手抽烟..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDriver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        NewDriver nb = <span class="keyword">new</span> NewDriver();</span><br><span class="line">        nb.driver();</span><br><span class="line">        System.out.println(<span class="string">"=================="</span>);</span><br><span class="line">        OldDriver ob = <span class="keyword">new</span> OldDriver();</span><br><span class="line">        ob.driver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="四、final关键字"><a href="#四、final关键字" class="headerlink" title="四、final关键字"></a>四、final关键字</h2><h3 id="4-1-final关键字"><a href="#4-1-final关键字" class="headerlink" title="4.1 final关键字"></a>4.1 final关键字</h3><p><code>final</code>：最终的，最后的，不可变的</p>
<p>可以用来修饰：<code>类、成员变量、局部变量（基本类型、引用类型），成员方法</code></p>
<h3 id="4-2-final的作用"><a href="#4-2-final的作用" class="headerlink" title="4.2 final的作用"></a>4.2 final的作用</h3><h4 id="4-2-1-final修饰类"><a href="#4-2-1-final修饰类" class="headerlink" title="4.2.1 final修饰类"></a>4.2.1 final修饰类</h4><p>作用：<code>被final修饰的类</code>，称为太监类：该类<code>不能被继承</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span></span>&#123;	<span class="comment">//编译报错，因为不能继承final修饰的类Fu</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-2-final修饰方法"><a href="#4-2-2-final修饰方法" class="headerlink" title="4.2.2 final修饰方法"></a>4.2.2 final修饰方法</h4><p>作用：<code>被final修饰的方法，称为最终方法：该方法不能被子类重写</code></p>
<h4 id="4-2-3-final修饰局部变量：基本类型变量"><a href="#4-2-3-final修饰局部变量：基本类型变量" class="headerlink" title="4.2.3 final修饰局部变量：基本类型变量"></a>4.2.3 final修饰局部变量：基本类型变量</h4><p>作用：<code>被final修饰的基本类型变量，只能赋值一次。</code>【这种变量一般称为常量，<code>常量名一般大写，多个单词之间下划线隔开</code>】</p>
<h4 id="4-2-4-final修饰引用类型变量"><a href="#4-2-4-final修饰引用类型变量" class="headerlink" title="4.2.4 final修饰引用类型变量"></a>4.2.4 final修饰引用类型变量</h4><p>作用：<code>被final修饰的引用类型变量，只能赋值一次</code>，该引用类型中<code>保存的地址值不能改变</code>，但是<code>地址指向的空间中的内容是可以改变的</code>。</p>
<h4 id="4-2-5-final修饰成员变量"><a href="#4-2-5-final修饰成员变量" class="headerlink" title="4.2.5 final修饰成员变量"></a>4.2.5 final修饰成员变量</h4><p>作用：<code>被final修饰的成员变量，只能赋值一次，必须在创建对象之前赋值(默认值不算)</code>。</p>
<p>我们可以在<code>定义成员变量时直接赋值</code>，也可以先定义成员变量，<code>在构造方法给成员变量赋值</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span></span>&#123;</span><br><span class="line">	<span class="keyword">final</span> <span class="keyword">int</span> AGE = <span class="number">10</span>; <span class="comment">//直接赋值</span></span><br><span class="line">	<span class="keyword">final</span> String NAME;  <span class="comment">//先定义不赋值</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        NAME = “加菲”; <span class="comment">//在构造方法中赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-6-final的注意事项"><a href="#4-2-6-final的注意事项" class="headerlink" title="4.2.6 final的注意事项"></a>4.2.6 final的注意事项</h4><ol>
<li><code>final和abstract不能同时修饰类</code></li>
<li><code>final和abstract不能同时修饰方法</code></li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h3><p>概念：如果我们创建对象时，没有用变量接收对象的地址，那么就是一个匿名对象。</p>
<p>格式：<code>new 数据类型();</code></p>
<p>好处：稍微简化我们的写法</p>
<p>使用场景：</p>
<ul>
<li>如果某个对象只用一次，可以使用匿名对象</li>
<li>可以使用匿名对象作为方法参数传递</li>
</ul>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>概念：Java中国继承描述的时事务之间的所属关系：比如老师属于员工，就可以让老师类继承员工类。</p>
<p>好处：提高代码的复用性。子类继承父类会自动拥有父类的所有成员</p>
<p>特点：类与类之间只能单继承，Java支持多级继承，一个父类可以有多个子类</p>
<p>方法的重写：</p>
<ul>
<li>如果子类中出现了和父类一样的方法，那么这个就是方法得重写</li>
<li>使用场景：如果父类的方法不能满足子类的需求，可以在子类中重写方法</li>
</ul>
<p>继承中构造方法的特点：</p>
<ol>
<li>构造方法不能继承</li>
<li>创建子类对象时，会先执行父类的构造方法，因为在子类构造方法的第一行有一个隐藏的super</li>
<li>我们也可以使用super手动调用父类的构造方法。</li>
<li>如果super调用父类的构造方法，只能写在第一行。</li>
</ol>
<p>super关键字：</p>
<ul>
<li><p>可以访问父类的成员方法：<code>super.方法名()</code></p>
</li>
<li><p>可以访问父类的成员变量：<code>super.变量名</code></p>
</li>
<li><p>可以访问父类的构造方法：<code>super()</code></p>
</li>
</ul>
<p>this关键字：</p>
<ul>
<li><p>可以访问本类的成员方法：<code>this.方法名()</code></p>
</li>
<li><p>可以访问本类的成员变量：<code>this.变量名</code></p>
</li>
<li><p>可以访问本类的构造方法：<code>this()</code></p>
</li>
</ul>
<h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>当某个方法的方法体我们说不清，不知道怎么写时，可以把这个方法定义成抽象方法，抽象方法所在的类必须是抽象类。</p>
<p>抽象类格式：<code>public abstract class 类名 {}</code></p>
<p>抽象方法格式：<code>public abstract 返回值类型 方法名(参数列表);</code></p>
<p>抽象类的使用：</p>
<ol>
<li>抽象类是给子类用的，我们要定义一个类，去继承抽象类。</li>
<li>重写抽象类中的所有的抽象方法。</li>
<li>创建这个子类对象，调用方法。</li>
</ol>
<p>抽象类的注意事项：</p>
<ol>
<li>抽象类不能创建对象</li>
<li>抽象类中也可以有构造方法，构造方法是给子类使用的.</li>
<li>抽象类中可以有抽象方法，也可以有非抽象的内容。抽象方法所在的类必须是一个抽象类。</li>
<li>一个普通类在继承抽象类时，需要重写里面所有的抽象方法。一个抽象类在继承抽象类时，可以不重写里面的抽象方法。</li>
<li>抽象类都是作为父类存在，抽象类体现的是模板思想【司机开车案例】</li>
</ol>
<h3 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h3><p><code>final</code>表示最终的不可改变的。</p>
<p>注意：</p>
<ul>
<li><p>如果final修饰类，这个类不能被继承，但是可以继承其他类。</p>
</li>
<li><p>如果fianl修饰方法，这个方法不能被重写，但是可以被子类继承使用。</p>
</li>
<li><p>如果final修饰变量，该变量就变成了常量。只能被赋值一次，一旦赋值就不能更改了。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>学习</tag>
        <tag>面向对象</tag>
        <tag>设计模式</tag>
        <tag>模板设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>static、接口、多态、内部类</title>
    <url>/2020/07/24/static%E3%80%81%E6%8E%A5%E5%8F%A3%E3%80%81%E5%A4%9A%E6%80%81%E3%80%81%E5%86%85%E9%83%A8%E7%B1%BB/</url>
    <content><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="一、static关键字"><a href="#一、static关键字" class="headerlink" title="一、static关键字"></a>一、static关键字</h2><h3 id="static修饰变量"><a href="#static修饰变量" class="headerlink" title="static修饰变量"></a>static修饰变量</h3><p>如果某个成员变量用<code>static</code>关键字修饰，那么这个成员变量就不再属于对象了，<code>属于类</code>。会被该类的<code>所有对象共享</code></p>
<p>被<code>static</code>修饰的成员，可以通过对象调用，也可以通过类名直接调用【推荐<code>类名直接调用</code>】</p>
<a id="more"></a>

<p>格式：</p>
<p><code>类名.成员变量</code></p>
<p>小结：</p>
<ul>
<li>如果某个成员变量不使用static修饰，那么这个成员变量是属于对象的，要有对象才能调用</li>
<li>如果某个成员变量使用static修饰，那么这个成员变量是属于类的，可以通过类名直接调用</li>
</ul>
<h3 id="static修饰方法"><a href="#static修饰方法" class="headerlink" title="static修饰方法"></a>static修饰方法</h3><p>如果一个方法使用static修饰，就不属于对象了，属于类，可以通过类名直接调用</p>
<p>静态方法和非静态方法：</p>
<ul>
<li>静态方法：可以通过类名，也可以通过对象名调用，建议通过类名调用</li>
<li>非静态方法：必须有对象才能调用。</li>
</ul>
<p><strong>如果调用本类中的静态方法，可以省略类名。</strong></p>
<h3 id="静态中的注意事项"><a href="#静态中的注意事项" class="headerlink" title="静态中的注意事项"></a>静态中的注意事项</h3><ol>
<li>静态中不能直接访问非静态的内容<ul>
<li>静态属于类，非静态属于对象，刚开始有类的时候还没有对象呢，所以不能再静态中使用非静态内容</li>
</ul>
</li>
<li>静态方法中不能使用this和super关键字</li>
</ol>
<h2 id="二、接口"><a href="#二、接口" class="headerlink" title="二、接口"></a>二、接口</h2><h3 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h3><p>接口是一种规范（给类定义的规范，类和接口发生关系后，类需要重写接口中所有的抽象方法）</p>
<p>接口也是一种引用类型。</p>
<p>什么是接口？</p>
<ul>
<li>接口是一种极端的抽象类，接口中只能定义【抽象方法】。【<code>JDK8之前</code>】</li>
<li>接口中新增【默认方法】和【静态方法】【<code>JDK8的时候</code>】</li>
<li>接口中又新增了【私有方法】【<code>JDK9的时候</code>，了解即可】</li>
</ul>
<h3 id="2-2-定义格式"><a href="#2-2-定义格式" class="headerlink" title="2.2 定义格式"></a>2.2 定义格式</h3><p>定义接口关键字：<code>interface</code></p>
<p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 接口名</span>&#123;</span><br><span class="line">	<span class="comment">//抽象方法【jdk8之前】</span></span><br><span class="line">    <span class="comment">//默认方法【jdk8】</span></span><br><span class="line">    <span class="comment">//静态方法【jdk8】</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>·<strong>注意：</strong></p>
<ul>
<li><p>接口中的抽象方法可以省略public abstract关键字</p>
</li>
<li><p>如果省略public abstract，那么抽象方法也是使用public abstract修饰的</p>
</li>
</ul>
<h3 id="2-3-接口的使用"><a href="#2-3-接口的使用" class="headerlink" title="2.3 接口的使用"></a>2.3 接口的使用</h3><p>接口与抽象类都不能创建对象</p>
<p>接口也是用于给别的类“实现”的，实现的作用和继承基本类似。</p>
<p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 实现类 <span class="keyword">implements</span> 接口名</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//实现类必须重写接口中的所有抽象方法</span></span><br><span class="line">	<span class="comment">//实现类可以选择性重写接口中的默认方法（重写后不能有default关键字）</span></span><br><span class="line">    <span class="comment">//静态方法没有重写的说法，因为静态方法通过其所在的接口名/类名即可调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-4-接口的多实现"><a href="#2-4-接口的多实现" class="headerlink" title="2.4 接口的多实现"></a>2.4 接口的多实现</h3><p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 实现类 <span class="keyword">implements</span> 接口名1,接口名2,...</span>&#123;</span><br><span class="line">	<span class="comment">//实现类必须重写接口中所有的抽象方法，如果有一样的抽象方法，实现类是需要重写一次</span></span><br><span class="line">    <span class="comment">//实现类选择性重写所有接口的默认方法，如果有一样的默认方法，实现类必须重写一次</span></span><br><span class="line">    <span class="comment">//静态方法没有重写的说法，因为静态方法通过其所在的接口名/类名即可调用，如果有一样的静态方法，也不影响</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-5-实现和继承的优先级问题"><a href="#2-5-实现和继承的优先级问题" class="headerlink" title="2.5 实现和继承的优先级问题"></a>2.5 实现和继承的优先级问题</h3><p>Java中允许继承和实现同时存在，允许一个类继承一个父类的同时实现多个接口。</p>
<p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 子类/实现类 <span class="keyword">extends</span> 父类 <span class="keyword">implements</span> 接口1,接口2,...</span>&#123;</span><br><span class="line">		<span class="comment">//1.必须重写父类以及接口中的所有抽象方法</span></span><br><span class="line">    			<span class="comment">//如果有一样的抽象方法，只需要重写一次</span></span><br><span class="line">        <span class="comment">//2.选择性重写父类的普通方法和所有接口的默认方法，</span></span><br><span class="line">    			<span class="comment">//如果有一样的默认方法，必须重写一次</span></span><br><span class="line">                <span class="comment">//如果有父类的普通方法和接口的默认方法一样，实现类可以不重写</span></span><br><span class="line">        <span class="comment">//3.静态方法没有重写的说法。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>【继承比实现的优先级高】</p>
<h3 id="2-6-接口的的多继承【了解】"><a href="#2-6-接口的的多继承【了解】" class="headerlink" title="2.6 接口的的多继承【了解】"></a>2.6 接口的的多继承【了解】</h3><p><code>类和类         单继承</code></p>
<p><code>类和接口     多实现</code></p>
<p><code>接口和接口     多继承</code></p>
<p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 子接口 <span class="keyword">extends</span> 父接口1,父接口2,...</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>如果多个父接口中有同名的抽象方法，没有影响，抽象方法没有方法体，将来肯定要重写，，重写之后的内容是什么，执行的内容就是什么</p>
</li>
<li><p>如果父接口中有同名的默认方法，有影响，必须在子接口中进行重写</p>
</li>
</ol>
<h3 id="2-7-接口中其他成员特点"><a href="#2-7-接口中其他成员特点" class="headerlink" title="2.7 接口中其他成员特点"></a>2.7 接口中其他成员特点</h3><ol>
<li>接口中无法定义普通的成员变量，只能定义常量，常量必须有三个修饰符修饰：public static final</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> AGE = <span class="number">18</span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>接口中没有构造方法，接口也不能创建对象</p>
</li>
<li><p>接口中，没有静态代码块</p>
</li>
<li><p>在接口有很多地方可以省略</p>
<ul>
<li>接口中方法默认权限都是public(可以省略)</li>
<li>接口中抽象方法连abstract关键字都可以省略(抽象类不行)</li>
<li>接口中常量，默认修饰符是public static final，并且可以省略</li>
</ul>
</li>
</ol>
<h3 id="2-8-抽象类和接口练习"><a href="#2-8-抽象类和接口练习" class="headerlink" title="2.8 抽象类和接口练习"></a>2.8 抽象类和接口练习</h3><p>通过实例进行分析和代码演示抽象类和接口的用法。</p>
<p>举例：</p>
<p>犬：</p>
<ul>
<li>行为：吼叫；吃饭；</li>
</ul>
<p>缉毒犬：</p>
<ul>
<li>行为：吼叫；吃饭；缉毒；</li>
</ul>
<p>由于犬分为很多种类，他们吼叫和吃饭的方式不一样，在描述的时候不能具体化，也就是吼叫和吃饭的行为不能明确。当描述行为时，行为的具体动作不能明确，这时可以将这个行为写为抽象行为，那么这个类也就是抽象类。可是有的犬还有其他额外功能，而这个功能并不在这个事物的体系中 , 例如 : 缉毒犬。缉毒的这个功能有好多种动物都有 , 例如 : 缉毒猪 , 缉毒鼠。我们可以将这个额外功能定义接口中 ,让缉毒犬继承犬且实现缉毒接口 , 这样缉毒犬既具备犬科自身特点也有缉毒功能。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 父类：狗类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span>  </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 叫</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 吃</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JiDu</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缉毒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">jidu</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 缉毒犬类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JiDuDog</span> <span class="keyword">extends</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">JiDu</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"嗷嗷叫!!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"嗷嗷吃!!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jidu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"缉毒中..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 测试类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    JiDuDog dog = <span class="keyword">new</span> JiDuDog();</span><br><span class="line"></span><br><span class="line">    dog.bark();</span><br><span class="line">    dog.eat();</span><br><span class="line">    dog.jidu();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="三、多态"><a href="#三、多态" class="headerlink" title="三、多态"></a>三、多态</h2><h3 id="3-1-概念"><a href="#3-1-概念" class="headerlink" title="3.1 概念"></a>3.1 概念</h3><p>多态是继封装、继承之后，面向对象的第三大特性。</p>
<p>一种事物具备多种形态，这个就是多态。</p>
<p>比如：小明是一个学生，同时肯定也是一个人，所以小明同时具备学生和人的形态，这个就是多态</p>
<p><strong>多态：是指同一行为，具有多个不同表现形式。</strong></p>
<h3 id="3-2-多态的体现"><a href="#3-2-多态的体现" class="headerlink" title="3.2 多态的体现"></a>3.2 多态的体现</h3><p>多态在代码中的体现(父类变量(引用)指向子类对象)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">父类类型 变量名 = <span class="keyword">new</span> 子类类型();</span><br></pre></td></tr></table></figure>

<p>父类类型：指子类对象继承的父类类型,或者实现的父接口类型</p>
<p>接口多态格式(接口类型指向实现类对象)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">接口类型 变量名 = <span class="keyword">new</span> 实现类类型();</span><br></pre></td></tr></table></figure>



<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建对象</span></span><br><span class="line">Animal dog = <span class="keyword">new</span> Dog();</span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line">dog.say()</span><br></pre></td></tr></table></figure>

<p><strong>当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误；如果有，执行的是子类重写后方法。</strong></p>
<p>根据多态性，我们可以把子类类型当成父类类型去看待【狗肯定是动物，可以把狗当成动物去看待】</p>
<p><code>多态在代码中的体现为父类引用指向子类对象。</code></p>
<p><strong>小结：如果我们通过多态的方式创建对象，调用方法时，运行的是子类的方法(<code>创建的是谁的对象，调用的就是谁的方法</code>)</strong></p>
<h3 id="3-3-多态的好处"><a href="#3-3-多态的好处" class="headerlink" title="3.3 多态的好处"></a>3.3 多态的好处</h3><p>好处：方法参数如果是父类类型，那么可以传递任何子类对象。</p>
<p>原因：根据多态性，子类类型可以当作父类类型去看待。比如狗肯定是动物，所以可以当成动物去看待。</p>
<p>参数需要时动物(父类)类型，那么我们可以传递狗(子类)对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动物类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 狗类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"汪汪汪...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 猫类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"喵喵喵..."</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        showSay(<span class="keyword">new</span> Dog());</span><br><span class="line">        showSay(<span class="keyword">new</span> Cat());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showSay</span><span class="params">(Animal animal)</span></span>&#123;</span><br><span class="line">        animal.say();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">汪汪汪....</span><br><span class="line">喵喵喵...</span><br></pre></td></tr></table></figure>



<p><strong><code>小结：多态的好处是提高程序的灵活性，扩展性</code></strong></p>
<h3 id="3-4-多态访问成员的特点以及优缺点"><a href="#3-4-多态访问成员的特点以及优缺点" class="headerlink" title="3.4 多态访问成员的特点以及优缺点"></a>3.4 多态访问成员的特点以及优缺点</h3><p><code>多态访问成员变量的特点</code>【了解，不用】</p>
<ul>
<li>编译看左边父类，如果父类没有这个变量。编译时期，语法报错</li>
<li>运行也看左边父类，运行时，真正执行的时父类的变量</li>
</ul>
<p><code>多态访问成员方法的特点</code>【重要】</p>
<ul>
<li>编译看左边父类，如果父类中没有这个方法，会编译报错</li>
<li>运行看右边子类，如果程序运行，运行的是子类的方法。</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">20</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"父类方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"子类方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Fu fu = <span class="keyword">new</span> Zi();</span><br><span class="line">        System.out.println(fu.num);</span><br><span class="line">        fu.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">20</span></span><br><span class="line">子类方法</span><br></pre></td></tr></table></figure>

<h4 id="3-4-1-多态的优缺点："><a href="#3-4-1-多态的优缺点：" class="headerlink" title="3.4.1 多态的优缺点："></a>3.4.1 多态的优缺点：</h4><ul>
<li>优点：让程序更加灵活，参数时父类类型，可以传递子类对象</li>
<li>缺点，只能访问父类有的东西，不能访问子类特有的内容。【多态方式使用成员，编译看左边父类】</li>
</ul>
<h3 id="3-5-引用类型转换"><a href="#3-5-引用类型转换" class="headerlink" title="3.5 引用类型转换"></a>3.5 引用类型转换</h3><h4 id="3-5-1-向上转型"><a href="#3-5-1-向上转型" class="headerlink" title="3.5.1 向上转型"></a>3.5.1 向上转型</h4><p>向上转型：子类类型转成父类类型，多态本身是子类类型向父类类型向上转换的过程，这个过程是默认的。</p>
<p><code>父类类型 变量名 = new 子类类型();</code></p>
<h4 id="3-5-2-向下转型"><a href="#3-5-2-向下转型" class="headerlink" title="3.5.2 向下转型"></a>3.5.2 向下转型</h4><p>向下转型：父类类型向子类类型向下转换的过程，这个过程是强制的。</p>
<p>前提：向下转型之前必须要有向上转型</p>
<p>格式：</p>
<ul>
<li><code>子类类型变量名= (子类类型) 父类变量名;</code></li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//向上转型</span></span><br><span class="line">Animal a1 = <span class="keyword">new</span> Cat();</span><br><span class="line">Animal a2 = <span class="keyword">new</span> Dog();</span><br><span class="line"><span class="comment">// 向下转型</span></span><br><span class="line">Cat cat = (Cat) a1;</span><br><span class="line">Dog dog = (Dog) a2;</span><br></pre></td></tr></table></figure>



<h4 id="3-5-3-为什么要向下转型"><a href="#3-5-3-为什么要向下转型" class="headerlink" title="3.5.3 为什么要向下转型"></a>3.5.3 为什么要向下转型</h4><p><strong>多态的弊端就是不能调用子类特有的方法，如果想要调用子类特有的内容，需要向下转型。</strong></p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"狗吃肉..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//特有的行为</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lookDoor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"看门..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"猫吃鱼..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">catchMouse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"猫抓老师"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向上转型</span></span><br><span class="line">        Animal a1 = <span class="keyword">new</span> Cat();</span><br><span class="line">        Animal a2 = <span class="keyword">new</span> Dog();</span><br><span class="line">        <span class="comment">// 向下转型</span></span><br><span class="line">        Cat cat = (Cat) a1;</span><br><span class="line">        Dog dog = (Dog) a2;</span><br><span class="line"></span><br><span class="line">        a1.eat();</span><br><span class="line">        cat.catchMouse();</span><br><span class="line">        a2.eat();</span><br><span class="line">        dog.lookDoor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-5-4-转型的异常"><a href="#3-5-4-转型的异常" class="headerlink" title="3.5.4 转型的异常"></a>3.5.4 转型的异常</h4><p>如果父类类型表示的对象不是目标类型，在转换的时候就会报错。（如果父类类型表示的时髦，但是我们却把他向下转型成后，就会出现异常）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 向上转型</span></span><br><span class="line">    Animal a=<span class="keyword">new</span> Cat();  </span><br><span class="line">    a.eat();     			<span class="comment">// 调用的是 Cat 的 eat           </span></span><br><span class="line">    <span class="comment">// 向下转型</span></span><br><span class="line">    Dog d= (Dog)a;      </span><br><span class="line">    d.watchHouse();        <span class="comment">// 调用的是 Dog 的 watchHouse 【运行报错】    &#125;  &#125;</span></span><br></pre></td></tr></table></figure>

<p>上述代码会报错，<code>ClassCastException</code>：类型转换异常。</p>
<p>解决方法：</p>
<p>可以在向下转型之前进行判断，Java提供了<code>instanceof</code>关键字。</p>
<p><code>instanceof</code>：可以判断某个变量表示的是否是该类型的对象</p>
<p>格式：</p>
<ul>
<li><code>变量名 instanceof 数据类型</code></li>
</ul>
<p>举例：</p>
<p><code>a instanceof Dog</code>：判断a是否是Dog类型的对象。</p>
<p>使用场景：</p>
<ul>
<li>在向下转型之前，可以使用<code>instanceof</code>关键字进行判断，如果类型符合，在进行向下转换</li>
</ul>
<p>代码示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Animal a = <span class="keyword">new</span> Cat();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">///判断a属于创建的哪个子类，向下转型成相应的子类，执行相应的方法。</span></span><br><span class="line">        <span class="keyword">if</span> (a <span class="keyword">instanceof</span> Dog)&#123;</span><br><span class="line">            Dog dog = (Dog) a;</span><br><span class="line">            dog.lookDoor();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(a <span class="keyword">instanceof</span> Cat)&#123;</span><br><span class="line">            Cat cat = (Cat) a;</span><br><span class="line">            cat.catchMouse();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="四、内部类"><a href="#四、内部类" class="headerlink" title="四、内部类"></a>四、内部类</h2><h3 id="4-1-什么是内部类"><a href="#4-1-什么是内部类" class="headerlink" title="4.1 什么是内部类"></a>4.1 什么是内部类</h3><p>将一个类A定义在另一个类B里面，里面的那个类A就称为内部类，B则称为外部类</p>
<h3 id="4-2-成员内部类"><a href="#4-2-成员内部类" class="headerlink" title="4.2 成员内部类"></a>4.2 成员内部类</h3><ul>
<li>成员内部类：定义在类中方法外的类。</li>
</ul>
<p>定义格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 外部类</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 内部类</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 人类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 心脏类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Heart</span></span>&#123;</span><br><span class="line">        <span class="comment">//心房属性</span></span><br><span class="line">        <span class="keyword">int</span> heartRoom = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//心跳方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jump</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"心脏蹦蹦跳"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-1-成员内部类的使用"><a href="#4-2-1-成员内部类的使用" class="headerlink" title="4.2.1 成员内部类的使用"></a>4.2.1 成员内部类的使用</h4><ul>
<li>在创建成员类对象是，需要创建外部类对象</li>
</ul>
<p>格式：<code>外部类名.内部类名对象名=new外部类型().new内部类型()</code></p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Person.Heart heart = <span class="keyword">new</span> Person().<span class="keyword">new</span> Heart();</span><br><span class="line">    System.out.println(heart.heartRoom);</span><br><span class="line">    heart.jump();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-2-注意"><a href="#4-2-2-注意" class="headerlink" title="4.2.2 注意"></a>4.2.2 注意</h4><ol>
<li>内部类编译之后也会生成.class文件，名字为: 外部类$内部类.class</li>
<li>内部类中可以访问外部类的成员</li>
<li>外部类中不能访问内部类成员</li>
</ol>
<h3 id="4-3-匿名内部类"><a href="#4-3-匿名内部类" class="headerlink" title="4.3 匿名内部类"></a>4.3 匿名内部类</h3><p>匿名内部类也是一种内部类，只不过这种内部类没有名字</p>
<p>作用：临时定义某个类的子类，在创建该子类的对象。</p>
<p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> 父类或接口()&#123;</span><br><span class="line">    重写的方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Person()&#123;</span><br><span class="line">    重写的方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码真正创建的是Person子类对象，但是这个子类叫什么，我们不知道，因为是匿名的。</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 吃</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//匿名内部类的格式创建Animal的子类对象</span></span><br><span class="line">    <span class="keyword">new</span> Animal()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"某种动物在吃..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>扩展：匿名内部类其实是有名字的，名字的格式为：【外部类$1】,【外部类$2】</strong></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><p>概念：</p>
<ul>
<li>被static修饰的东西属于类，不属于对象，可以被该类的所有对象共享。</li>
<li>被static修饰的东西可以通过类名直接调用，可以通过对象调用，推荐通过类名调用。</li>
<li>没有被static修饰的东西属于对象的，必须有对象才能调用。</li>
</ul>
<p>注意：</p>
<ul>
<li>静态不能直接使用非静态的内容。</li>
<li>静态方法中不能出现this和super</li>
</ul>
<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>概念：接口是用来定义规范的</p>
<p>定义格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 接口名 </span>&#123;</span><br><span class="line">    抽象方法【抽象方法】</span><br><span class="line">    常量</span><br><span class="line">    默认方法</span><br><span class="line">    静态方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h4><ul>
<li>格式：<code>public abstract 返回值类型 方法名(参数列表);</code></li>
<li>使用：实现类在实现接口时，需要重写这个接口中的所有的抽象方法。除非实现类是一个抽象类。</li>
</ul>
<h4 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h4><ul>
<li><p>格式：</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">default</span> 返回值类型 方法名(参数列表) &#123;</span><br><span class="line">    方法体;</span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用：实现类在实现接口时，可以不重写默认方法。</p>
</li>
</ul>
<h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><ul>
<li><p>格式：</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> 返回值类型 方法名(参数列表) &#123;</span><br><span class="line">    方法体;</span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用：接口中的静态方法要通过接口名字直接调用。</p>
</li>
</ul>
<h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><ul>
<li>格式：<code>public static final 数据类型 常量名 = 值;</code></li>
<li>使用：接口中的常量要通过接口名直接调用。</li>
</ul>
<h4 id="接口和类的关系"><a href="#接口和类的关系" class="headerlink" title="接口和类的关系"></a>接口和类的关系</h4><ul>
<li>类和类之间是继承，一个类只能继承一个父类。</li>
<li>类和接口是实现，一个类可以实现多个接口。</li>
<li>接口和接口是继承，一个接口可以继承多个接口。</li>
</ul>
<p>继承关键字：<code>extends</code></p>
<p>实现关键字：<code>implements</code></p>
<h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>概念：一种事物具备多种形态，比如小明是学生，肯定也是一个人。</p>
<p>在代码中的体现（<strong>父类类型指向子类对象</strong>）：<code>父类类型 变量名 = new 子类类型();</code></p>
<p><strong>在多态中，子类类型可以当成父类类型去看待。</strong></p>
<h4 id="优势与弊端"><a href="#优势与弊端" class="headerlink" title="优势与弊端"></a>优势与弊端</h4><p>优势：提高代码的灵活性，方法的参数是父类类型，那么可以传递任何子类对象。</p>
<p>弊端：不能访问子类特有的内容。</p>
<h4 id="多态访问方法的特点"><a href="#多态访问方法的特点" class="headerlink" title="多态访问方法的特点"></a>多态访问方法的特点</h4><p>编译看左边父类：如果父类没有该方法会报错。</p>
<p>运行看右边子类：运行执行的是子类的方法。</p>
<h4 id="引用类型的转换"><a href="#引用类型的转换" class="headerlink" title="引用类型的转换"></a>引用类型的转换</h4><ul>
<li><p>向上转型（子类类型转成父类类型）：<code>父类类型 变量名 = new 子类类型();</code></p>
</li>
<li><p>向下转型（父类类型转成子类类型）：<code>子类类型 变量名 = (子类类型) 父类变量;</code></p>
</li>
</ul>
<p><strong>向下转型的目的：为了访问子类的特有内容</strong></p>
<h4 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h4><ul>
<li>格式：<code>变量名 instanceof 数据类型</code></li>
<li>作用：判断该变量表示的对象是否是指定类型的。</li>
<li>举例：<code>a interfaceof Dog</code>(判断a表示的对象是否是Dog类型)</li>
</ul>
<h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p>成员内部类【了解】</p>
<h4 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h4><p>作用：临时定义某个类的子类，创建该子类的对象。</p>
<p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> 父类或接口() &#123;</span><br><span class="line">    重写的方法;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Person() &#123;</span><br><span class="line">    重写的方法;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个代码真正创建的时Person类的子类对象，只不过这个子类叫什么名字，我们不知道，因为没有名字。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>学习</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>权限修饰符、代码块、常用API</title>
    <url>/2020/07/26/%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6%E3%80%81%E4%BB%A3%E7%A0%81%E5%9D%97%E3%80%81%E5%B8%B8%E7%94%A8API/</url>
    <content><![CDATA[<h2 id="一、权限修饰符"><a href="#一、权限修饰符" class="headerlink" title="一、权限修饰符"></a>一、权限修饰符</h2><p><strong>不同权限的访问能力：</strong></p>
<table>
<thead>
<tr>
<th>描述\修饰符名称</th>
<th>public</th>
<th>protected</th>
<th>(空的)</th>
<th>private</th>
</tr>
</thead>
<tbody><tr>
<td>同一类中</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>同一个包中(子类与无关类)</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td></td>
</tr>
<tr>
<td>不同包的子类</td>
<td>√</td>
<td>√</td>
<td></td>
<td></td>
</tr>
<tr>
<td>不同包的无关类</td>
<td>√</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>编写代码时，如果没有特殊的考虑，建议这样使用权限：</p>
<ul>
<li>成员变量使用private，隐藏细节。</li>
<li>构造方法使用public，方便创建对象。</li>
<li>成员方法使用public，方便调用方法。</li>
</ul>
<a id="more"></a>

<h2 id="二、代码块"><a href="#二、代码块" class="headerlink" title="二、代码块"></a>二、代码块</h2><h3 id="2-1-构造代码块"><a href="#2-1-构造代码块" class="headerlink" title="2.1 构造代码块"></a>2.1 构造代码块</h3><p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	代码块的内容</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义位置：定义在类的成员位置</p>
<p>执行时机：</p>
<ul>
<li>构造代码块会在每次创建对象的时候执行(优先于构造方法执行)</li>
</ul>
<h3 id="2-2-静态代码块"><a href="#2-2-静态代码块" class="headerlink" title="2.2 静态代码块"></a>2.2 静态代码块</h3><p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">    静态代码块内容</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义位置：静态代码块要定义在类的成员位置</p>
<p>执行时机：</p>
<ul>
<li>静态代码块的内容会在类加载的时候执行，静态代码块终身只会执行一次</li>
<li>当我们使用一个类时，这个类先加载到方法区才能使用，这个过程就是类加载，当我们第一次使用这个类时，这个类会加载到方法区，类只会加载一次。</li>
<li>静态代码块优先于构造代码块执行。</li>
</ul>
<p>使用场景：</p>
<ul>
<li>一些项目的准备工作可以方法静态代码块中。比如后期的JDBC阶段注册驱动就会放到静态代码块中</li>
</ul>
<h2 id="三、Object类"><a href="#三、Object类" class="headerlink" title="三、Object类"></a>三、Object类</h2><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h3><ul>
<li>所有类都直接或间接的继承自Object,Object是所有类的父类</li>
<li>如果一个类我们没有使用extends关键字继承其他类，那么这个类就是继承自Object的</li>
</ul>
<h3 id="3-2-toString方法"><a href="#3-2-toString方法" class="headerlink" title="3.2 toString方法"></a>3.2 toString方法</h3><p>在Object中，有一个方法叫<code>toString</code>,可以将对象转成字符串。</p>
<p><code>String toString()</code>：返回对象的字符串表示形式。</p>
<ul>
<li><p><code>toString</code>方法返回该对象的字符串表示，其实该字符串内容就是：对象的类型名+@+对象哈希码的无符号十六进制表示。</p>
</li>
<li><p>由于<code>toString</code>方法返回的结果不易阅读，而在开发中，经常需要按照对象的属性得到相应的字符串表现形式，因此也需要重写它。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//构造方法、get/set方法略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>扩展：</strong>在我们直接使用输出语句输出对象名的时候,其实通过该对象调用了其<code>toString()</code>方法。</p>
<p>小结：<code>toString</code>方法可以将对象转成字符串。</p>
<h3 id="3-3-equals方法"><a href="#3-3-equals方法" class="headerlink" title="3.3 equals方法"></a>3.3 equals方法</h3><p><code>boolean equals(Object obj)</code> ：判断其他某个对象是否与此对象“相等”。</p>
<p>调用成员方法equals并指定参数为另一个对象，则可以判断这两个对象是否是相同的。这里的“相同”有默认和自定义两种方式。</p>
<p>如果没有覆盖重写equals方法，那么Object类中默认进行==运算符的对象地址比较，只要不是同一个对象，结果必然为false。</p>
<p>如果想要进行对象内容的比较，即所有或指定的部分成员变量相同就判定两个对象相同，则可以覆盖重写equals方法。</p>
<p>小结：equals方法可以判断两个对象是否相同，如果要定义自己的比较规则，需要进行重写。</p>
<h3 id="3-4-native本地方法"><a href="#3-4-native本地方法" class="headerlink" title="3.4 native本地方法"></a>3.4 native本地方法</h3><p>方法被native修饰的方法，例如Object类中的<code>public native int hashCode();</code>方法，就是一个本地方法，底层用C++实现的方法。</p>
<h3 id="3-5-Objects类"><a href="#3-5-Objects类" class="headerlink" title="3.5 Objects类"></a>3.5 Objects类</h3><p>在JDK7的时候，多了一个工具类叫做<code>Objects</code>。这个类里面有大量的方法可以操作对象。(了解)</p>
<ul>
<li><code>static boolean equals(Object a, Object b)</code>：比较两个对象是否相同。比较a和b这两个对象是否相同。</li>
</ul>
<p>调用Objects的equals时，内部会调用Object的equals方法。所以如果想要根据属性比较两个对象是否相同，还需要重写equals。</p>
<h2 id="四、Date类"><a href="#四、Date类" class="headerlink" title="四、Date类"></a>四、Date类</h2><p>Date(java.util.Date)类可以叫做日期类</p>
<ul>
<li>虽然叫做日期类，但是表示的是特点的时间瞬间，精确到毫秒</li>
</ul>
<p>构造方法：</p>
<ul>
<li><p><code>Date()</code>：使用空参数的狗咱方法会根据当前计算机的时间创建Date对象。</p>
</li>
<li><p><code>Date(long date)</code>：参数要传递long类型的毫秒值，表示从1970年1月1日0时0分0秒开始，过了多少毫秒。</p>
<ul>
<li>中国是东八区的时间，比标准时间要快8小时，所以时间是从1970年1月1日8时0分0秒开始</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Date</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//通过空参数构造方法创建对象（这个Date对象表示是当前电脑的时间）</span></span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(date);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用有参构造方法创建对象</span></span><br><span class="line">        Date date2 = <span class="keyword">new</span> Date(<span class="number">0L</span>);</span><br><span class="line">        System.out.println(date2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-1-常用方法"><a href="#4-1-常用方法" class="headerlink" title="4.1 常用方法"></a>4.1 常用方法</h3><p><code>long getTime()</code>：获取Date对象对应的毫秒值。<br><code>void setTime(long time)</code>：参数是毫秒值，表示从1970年1月1日开始过了多少毫秒</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02DateGetTime</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="keyword">long</span> millis = date.getTime();</span><br><span class="line">        System.out.println(millis);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03DateSetTime</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(date);</span><br><span class="line"></span><br><span class="line">        date.setTime(<span class="number">1000L</span>);</span><br><span class="line">        System.out.println(date);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="五、DateFormat类"><a href="#五、DateFormat类" class="headerlink" title="五、DateFormat类"></a>五、DateFormat类</h2><p><code>java.text.DateFormat</code>是日期/时间格式化子类的抽象类。</p>
<p>如果要把Date对象转成我们喜欢的格式进行显示，那么可以使用DateFormat进行格式化（将Date对象转成指定格式的字符串就是格式化）<br><code>DateFormat</code>是抽象类，如果要用，需要使用子类，最常用的子类是<code>SimpleDateFormat</code></p>
<p><code>SimpleDateFormat</code>的构造方法：</p>
<ul>
<li><code>SimpleDateFormat(String pattern)</code>：参数要传递一个字符串类型的模式</li>
</ul>
<p>模式就是要转换的格式：</p>
<ul>
<li>要转换的最终格式： 2020年07月6日 12时12分12秒</li>
<li>对应的模式：yyyy年MM月dd日 HH时mm分ss秒</li>
</ul>
<p>模式就是要转换的格式，只不过要使用英语字母代替掉格式中的数字</p>
<table>
<thead>
<tr>
<th>年</th>
<th>y</th>
</tr>
</thead>
<tbody><tr>
<td>月</td>
<td>M</td>
</tr>
<tr>
<td>日</td>
<td>d</td>
</tr>
<tr>
<td>时</td>
<td>H</td>
</tr>
<tr>
<td>分</td>
<td>m</td>
</tr>
<tr>
<td>秒</td>
<td>s</td>
</tr>
</tbody></table>
<h3 id="5-1-format方法"><a href="#5-1-format方法" class="headerlink" title="5.1 format方法"></a>5.1 format方法</h3><p><code>SimpleDateFormat</code>转换的方法：</p>
<ul>
<li><code>String format(Date date)</code>：将Date对象转成一个字符串并返回。</li>
</ul>
<p>Date对象转字符串的步骤：</p>
<ul>
<li>创建SimpleDateFormat，并在构造方法中指定模式。</li>
<li>调用SimpleDateFormat的format方法，将Date对象转成字符串。</li>
<li>输出结果。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01DateFormat</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        DateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日 hh时mm分ss秒"</span>);</span><br><span class="line">        String date = dateFormat.format(<span class="keyword">new</span> Date());</span><br><span class="line">        System.out.println(date);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-2-parse方法"><a href="#5-2-parse方法" class="headerlink" title="5.2 parse方法"></a>5.2 parse方法</h3><p>如果想要将一个字符串转成Date对象，那么也可以使用SimpleDateFormat去完成（字符串转成Date对象也叫做解析）</p>
<p><code>Date parse(String source)</code>：将字符串转成Date对象。</p>
<p>字符串转Date对象的步骤：</p>
<ul>
<li>定义字符串表示时间。</li>
<li>创建SimpleDateFormat对象，指定模式。</li>
<li>通过SimpleDateFormat对象调用parse方法， 将字符串转成Date对象</li>
<li>输出结果。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01DateFormat</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        DateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日 hh时mm分ss秒"</span>);</span><br><span class="line">        String date = dateFormat.format(<span class="keyword">new</span> Date());</span><br><span class="line">        System.out.println(date);</span><br><span class="line">        Date parse = dateFormat.parse(date);</span><br><span class="line">        System.out.println(parse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-3-小结"><a href="#5-3-小结" class="headerlink" title="5.3 小结"></a>5.3 小结</h3><p><code>Date -&gt; String</code>： 格式化。 使用SimpleDateFormat中的<code>format()</code>方法完成。</p>
<p><code>String -&gt; Date</code>： 解析。 使用SimpleDateFormat中的<code>parse()</code>方法完成。</p>
<h2 id="六、Calendar类"><a href="#六、Calendar类" class="headerlink" title="六、Calendar类"></a>六、Calendar类</h2><h3 id="6-1-概述和获取对象"><a href="#6-1-概述和获取对象" class="headerlink" title="6.1 概述和获取对象"></a>6.1 概述和获取对象</h3><p><code>Calendar</code>叫做日历类</p>
<ul>
<li><p>虽然Calendar叫做日历类，但是他和Date类一样，可以表示特定的时间瞬间，精确到毫秒。</p>
</li>
<li><p>Calendar是一个抽象类，如果要用，需要使用子类。</p>
</li>
<li><p>由于时间地区的敏感性，Calendar子类对象不能由我们自己去创建，要通过Calendar的静态方法getInstance获取。</p>
<ul>
<li><p><code>static Calendar getInstance()</code>：获取一个日历对象（Calendar子类对象）</p>
</li>
<li><p>示例</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取日历对象对象</span></span><br><span class="line">Calendar c = Calendar.getInstance();</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">System.out.println(c);</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<p><strong>注意：之前创建对象都是自己new，现在获取日历对象需要调用Calendar的静态方法getInstance获取。</strong></p>
<h3 id="6-2-其他方法"><a href="#6-2-其他方法" class="headerlink" title="6.2 其他方法"></a>6.2 其他方法</h3><p><code>int get(int field)</code>： 获取指定字段的值。参数filed表示获取哪个字段的值。</p>
<p><code>void set(int field, int value)</code>：给指定日历字段设置值。</p>
<p><code>void add(int field, int amount)</code>：对指定字段的值进行计算。</p>
<p>演示：</p>
<p><code>get():</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在Calendar中有一个方法叫get，可以获取指定字段值</span></span><br><span class="line"><span class="comment"> *      int get(int field):获取日历中指定字段的值并返回</span></span><br><span class="line"><span class="comment"> * 举例：</span></span><br><span class="line"><span class="comment"> *      get(年)：获取年数据</span></span><br><span class="line"><span class="comment"> *      get(月)：获取月数据</span></span><br><span class="line"><span class="comment"> *      get(日)：获取日数据</span></span><br><span class="line"><span class="comment"> * get方法的参数时int类型，所以要传递int数字，我们可以使用int数字表示日历中的指定字段</span></span><br><span class="line"><span class="comment"> * 但是如果每次调用get党法，都传递数字，阅读性就会非常差</span></span><br><span class="line"><span class="comment"> * 在Calendar中给我们提供了很多静态常量，这些常量是一些数字，并根据变量名可以起到见名知意的作用，在调用get方法时最好传递这些常量。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 注意：Calendar中的月份是从0开始的，范围时0-11，比我们生活中的月份少1.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02CalendarGet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Calendar c = Calendar.getInstance();</span><br><span class="line">        <span class="keyword">int</span> year = c.get(Calendar.YEAR);</span><br><span class="line">        System.out.println(year);</span><br><span class="line">        <span class="comment">//Calendar中的月份是从0开始的，范围时0-11，比我们生活中的月份少1.</span></span><br><span class="line">        <span class="keyword">int</span> month = c.get(Calendar.MONTH) + <span class="number">1</span>;</span><br><span class="line">        System.out.println(month);</span><br><span class="line">        <span class="keyword">int</span> date = c.get(Calendar.DATE);</span><br><span class="line">        System.out.println(date);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>set():</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在Calendar有一个方法叫set，可以设定指定字段的值。</span></span><br><span class="line"><span class="comment"> * void set(int field, int value):给指定字段设置值</span></span><br><span class="line"><span class="comment"> *      参数field:给哪个字段设置值</span></span><br><span class="line"><span class="comment"> *      参数value:设置成什么值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03CalendarSet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Calendar c = Calendar.getInstance();</span><br><span class="line">        System.out.println(c.get(Calendar.YEAR)+ <span class="string">"-"</span> + (c.get(Calendar.MONTH) + <span class="number">1</span>) + <span class="string">"-"</span> + c.get(Calendar.DATE));</span><br><span class="line">        <span class="comment">//重新给指定字段设置值</span></span><br><span class="line">        c.set(Calendar.YEAR,<span class="number">1996</span>);</span><br><span class="line">        c.set(Calendar.MONTH,<span class="number">6</span>);</span><br><span class="line">        c.set(Calendar.DATE,<span class="number">6</span>);</span><br><span class="line">        System.out.println(c.get(Calendar.YEAR)+ <span class="string">"-"</span> + (c.get(Calendar.MONTH) + <span class="number">1</span>) + <span class="string">"-"</span> + c.get(Calendar.DATE));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>add():</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Calendar中的add()方法：可以对指定的值进行计算</span></span><br><span class="line"><span class="comment"> *      void add(int field, int amount)</span></span><br><span class="line"><span class="comment"> *          参数field:对哪个字段进行计算</span></span><br><span class="line"><span class="comment"> *          参数amount:如果计算</span></span><br><span class="line"><span class="comment"> *                  如果该数是一个正数，表示加上该值</span></span><br><span class="line"><span class="comment"> *                  如果该数是一个负数，表示减去该值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04CalendarAdd</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Calendar c = Calendar.getInstance();</span><br><span class="line">        System.out.println(c.get(Calendar.YEAR)+ <span class="string">"-"</span> + (c.get(Calendar.MONTH) + <span class="number">1</span>) + <span class="string">"-"</span> + c.get(Calendar.DATE));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        c.add(Calendar.YEAR,-<span class="number">24</span>);</span><br><span class="line">        System.out.println(c.get(Calendar.YEAR)+ <span class="string">"-"</span> + (c.get(Calendar.MONTH) + <span class="number">1</span>) + <span class="string">"-"</span> + c.get(Calendar.DATE));</span><br><span class="line">        c.add(Calendar.YEAR,<span class="number">25</span>);</span><br><span class="line">        System.out.println(c.get(Calendar.YEAR)+ <span class="string">"-"</span> + (c.get(Calendar.MONTH) + <span class="number">1</span>) + <span class="string">"-"</span> + c.get(Calendar.DATE));</span><br><span class="line">        c.set(Calendar.MONTH,<span class="number">0</span>);</span><br><span class="line">        c.add(Calendar.MONTH,<span class="number">11</span>);</span><br><span class="line">        System.out.println(c.get(Calendar.YEAR)+ <span class="string">"-"</span> + (c.get(Calendar.MONTH) + <span class="number">1</span>) + <span class="string">"-"</span> + c.get(Calendar.DATE));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="七、Math类"><a href="#七、Math类" class="headerlink" title="七、Math类"></a>七、Math类</h2><p>Math是Java中的一个数学工具类，里面有很多用于数学运算的方法。</p>
<h3 id="7-1-常见方法"><a href="#7-1-常见方法" class="headerlink" title="7.1 常见方法"></a>7.1 常见方法</h3><p><code>public static int abs(int a )</code>：求绝对值</p>
<p><code>public static double ceil(double a)</code>：向上取整</p>
<p><code>public static double floor(double a)</code>：向下取整</p>
<p><code>public static long round(double a)</code>：四舍五入</p>
<p><code>public static double pow(double a, double b)</code>：获取a的b次幂(方)</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Math</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Math.abs(-<span class="number">3</span>));</span><br><span class="line">        System.out.println(Math.abs(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(Math.ceil(<span class="number">3.14</span>));</span><br><span class="line">        System.out.println(Math.ceil(-<span class="number">3.14</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(Math.floor(<span class="number">3.14</span>));</span><br><span class="line">        System.out.println(Math.floor(-<span class="number">3.14</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(Math.round(<span class="number">3.5</span>));</span><br><span class="line">        System.out.println(Math.round(<span class="number">4.4</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(Math.pow(<span class="number">3</span>,<span class="number">2</span>));</span><br><span class="line">        System.out.println(Math.pow(<span class="number">5</span>,<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="八、System"><a href="#八、System" class="headerlink" title="八、System"></a>八、System</h2><p>System可以称为系统类，里面有一些方法可以完成系统的操作。</p>
<h3 id="8-1-常见方法"><a href="#8-1-常见方法" class="headerlink" title="8.1 常见方法"></a>8.1 常见方法</h3><ul>
<li><p><code>static void exit(int status)</code>:终止正在运行的Java虚拟机。</p>
<ul>
<li>参数是状态码，0表示正常终止。</li>
</ul>
</li>
<li><p><code>static long currentTimeMillis()</code>:获取当前的时间，以毫秒为单位【从1970年1月1日开始过了多少毫秒】</p>
</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01TestSystem</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">        <span class="comment">//System.exit(0);</span></span><br><span class="line">        System.out.println(<span class="string">"world"</span>);</span><br><span class="line">        <span class="keyword">long</span> time = System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>currentTimeMillis()</code>方法可以用来计算程序的执行时间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02System</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"hello,world!!!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"==============="</span>);</span><br><span class="line">        System.out.println((end-start)+<span class="string">"毫秒"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="九、BigInteger类"><a href="#九、BigInteger类" class="headerlink" title="九、BigInteger类"></a>九、BigInteger类</h2><p>如果是非常大的数字，用long也是无法表示或者进行计算的。此时就需要使用<code>BigInteger</code>了。</p>
<ul>
<li><code>BigInteger</code>表述数字，这个数字可以无限大</li>
</ul>
<h3 id="9-1-构造方法"><a href="#9-1-构造方法" class="headerlink" title="9.1 构造方法"></a>9.1 构造方法</h3><p><code>BigInteger(String val)</code>:根据字符串创建BigInteger对象。</p>
<h3 id="9-2-运算方法"><a href="#9-2-运算方法" class="headerlink" title="9.2 运算方法"></a>9.2 运算方法</h3><p><code>BigInteger add(BigInteger val)</code>:进行加法运算</p>
<p><code>BigInteger subtract(BigInteger val)</code>:进行减法运算</p>
<p><code>BigInteger multiply(BigInteger val)</code>:进行乘法运算</p>
<p><code>BigInteger divide(BigInteger val)</code>:进行除法运算</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01BigInteger</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BigInteger a = <span class="keyword">new</span> BigInteger(<span class="string">"99999999999999999999999999999999999999999999999999999999999999999999"</span>);</span><br><span class="line">        System.out.println(a);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加法</span></span><br><span class="line">        System.out.println(a.add(<span class="keyword">new</span> BigInteger(<span class="string">"1"</span>)));</span><br><span class="line">        <span class="comment">//减法</span></span><br><span class="line">        System.out.println(a.subtract(<span class="keyword">new</span> BigInteger(<span class="string">"9999999999"</span>)));</span><br><span class="line">        <span class="comment">//乘法</span></span><br><span class="line">        System.out.println(a.multiply(<span class="keyword">new</span> BigInteger(<span class="string">"2"</span>)));</span><br><span class="line">        <span class="comment">//除法</span></span><br><span class="line">        System.out.println(a.divide(<span class="keyword">new</span> BigInteger(<span class="string">"9"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="十、BigDecimal类"><a href="#十、BigDecimal类" class="headerlink" title="十、BigDecimal类"></a>十、BigDecimal类</h2><p><code>BigDecimal</code>表示精确的小数</p>
<p>java中小数是不精确的，在运算优势出现精度问题，比如1.3+2.1结果是3.4000000000000004。</p>
<p>如果想要在运算时解决这个精度问题，就可以使用<code>BigDecimal</code>。</p>
<h3 id="10-1-构造方法"><a href="#10-1-构造方法" class="headerlink" title="10.1 构造方法"></a>10.1 构造方法</h3><p><code>BigDecimal(double val)</code>：根据double小数创建一个BigDecimal对象【会产生精度问题，不推荐！！!】</p>
<p><code>BigDecimal(String val)</code>:根据String创建一个BigDecimal对象【推荐！！！】</p>
<h3 id="10-2-运算方法"><a href="#10-2-运算方法" class="headerlink" title="10.2 运算方法"></a>10.2 运算方法</h3><p><code>BigDecimal add(BigDecimal augend)</code>：加法运算</p>
<p><code>BigDecimal subtract(BigDecimal subtrahend)</code>：减法运算</p>
<p><code>BigDecimal multiply(BigDecimal multiplicand)</code> ：乘法运算</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01BigDecimal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BigDecimal a = <span class="keyword">new</span> BigDecimal(<span class="string">"1.6"</span>);</span><br><span class="line">        BigDecimal b = <span class="keyword">new</span> BigDecimal(<span class="string">"1.3"</span>);</span><br><span class="line">        <span class="comment">//加法</span></span><br><span class="line">        System.out.println(a.add(b));</span><br><span class="line">        <span class="comment">//减法</span></span><br><span class="line">        System.out.println(a.subtract(b));</span><br><span class="line">        <span class="comment">//乘法</span></span><br><span class="line">        System.out.println(a.multiply(b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>BigDecimal中的除法运算：</p>
<p><code>BigDecimal divide(BigDecimal divisor)</code>：除法运算，如果除不尽时，会报错。</p>
<p><code>BigDecimal divide(BigDecimal divisor, int scale, int roundingMode)</code>：除法运算，可以保留指定为的小数部分</p>
<ul>
<li>参数<code>divisor</code>：表示除以几</li>
<li>参数<code>scale</code>：保留几位小数</li>
<li>参数<code>roundingMode</code>:舍入模式 。这个参数我们要是哟个常量，Round_HALF_UP 表示四舍五入的模式。</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02BigDecimal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BigDecimal a = <span class="keyword">new</span> BigDecimal(<span class="string">"10"</span>);</span><br><span class="line">        BigDecimal b = <span class="keyword">new</span> BigDecimal(<span class="string">"3"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//除法</span></span><br><span class="line">        <span class="comment">//System.out.println(a.divide(b));//除不尽，会报错。</span></span><br><span class="line">        System.out.println(a.divide(b,<span class="number">5</span>,BigDecimal.ROUND_HALF_UP));<span class="comment">//保留五位小数，四舍五入模式</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="十一、Arrays类"><a href="#十一、Arrays类" class="headerlink" title="十一、Arrays类"></a>十一、Arrays类</h2><p>Arrays是操作数组的工具类。</p>
<h3 id="11-1-常用方法"><a href="#11-1-常用方法" class="headerlink" title="11.1 常用方法"></a>11.1 常用方法</h3><p><code>static String toString(数组)</code>：将数组内容转成指定格式的字符串并返回</p>
<p><code>static void sort(数组)</code>:对数组的内容进行排序</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Arrays</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">66</span>,<span class="number">77</span>,<span class="number">99</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>&#125;;</span><br><span class="line">        <span class="comment">//将数组内容转成字符串</span></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">        <span class="comment">//对数组进行排序:从小到大</span></span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="十二、包装类"><a href="#十二、包装类" class="headerlink" title="十二、包装类"></a>十二、包装类</h2><h3 id="12-1-概念引入"><a href="#12-1-概念引入" class="headerlink" title="12.1 概念引入"></a>12.1 概念引入</h3><p>基本类型：基本类型只是一些简单的数据，只能直接使用或者进行运算，无法调用方法，优点效率高。</p>
<p>包装类：包装类是引用类型，可以创建对象，并且可以调用方法。功能比较强大。</p>
<p>每一个基本类型都有对应的包装类，包装类是引用类型。</p>
<table>
<thead>
<tr>
<th>基本类型</th>
<th>引用类型(包装类)</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>Byte</td>
</tr>
<tr>
<td>short</td>
<td>Short</td>
</tr>
<tr>
<td>int</td>
<td>Integer</td>
</tr>
<tr>
<td>long</td>
<td>Long</td>
</tr>
<tr>
<td>float</td>
<td>Float</td>
</tr>
<tr>
<td>double</td>
<td>Double</td>
</tr>
<tr>
<td>boolean</td>
<td>Boolean</td>
</tr>
<tr>
<td>char</td>
<td>Character</td>
</tr>
</tbody></table>
<p>在使用方式上，基本类型和包装类的使用方式基本一致。</p>
<h3 id="12-2-自动拆装箱"><a href="#12-2-自动拆装箱" class="headerlink" title="12.2 自动拆装箱"></a>12.2 自动拆装箱</h3><p>在<code>JDK5</code>的时候，多了一个自动拆装箱的特性，所以基本类型可以和对应得包装类自动转换</p>
<p>自动拆装箱：</p>
<ul>
<li>自动拆箱：包装类类型转成基本类型</li>
<li>自动装箱：基本类型转成对象的包装类类型</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Wrap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//自动装箱：10默认时基本类型，把int类型赋值给Integer类型，那么基本类型会自动转成包装类类型</span></span><br><span class="line">        Integer a = <span class="number">10</span>;</span><br><span class="line">        Integer b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自动拆箱--&gt;自动装箱：先拆后装</span></span><br><span class="line">        <span class="comment">//Integer没有办法进行加减乘除的运算，首先进行自动拆箱，转成int类型，然后在运算，计算完成后，结果是int类型，将结果进行自动装箱，转成Integer类型。</span></span><br><span class="line">        Integer sum = a + b;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="12-3-手动拆装箱-了解"><a href="#12-3-手动拆装箱-了解" class="headerlink" title="12.3 手动拆装箱(了解)"></a>12.3 手动拆装箱(了解)</h3><p>手动装箱（int—&gt;Integer）</p>
<ul>
<li>可以使用Integer中的静态方法valueOf完成</li>
<li><code>static Integer valueOf(int i)</code>：将参数int值转成Integer并返回</li>
</ul>
<p>手动拆箱（Integer —&gt; int）</p>
<ul>
<li>可以使用intValue完成</li>
<li><code>int intValue()</code>:将Integer转成int并返回</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Wrap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">        <span class="comment">//手动装箱</span></span><br><span class="line">        Integer numIn = Integer.valueOf(num);</span><br><span class="line">        System.out.println(numIn);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"================="</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//手动拆箱</span></span><br><span class="line">        <span class="keyword">int</span> basisNum = numIn.intValue();</span><br><span class="line">        System.out.println(basisNum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="12-4-Integer中的常见方法"><a href="#12-4-Integer中的常见方法" class="headerlink" title="12.4 Integer中的常见方法"></a>12.4 Integer中的常见方法</h3><ul>
<li><code>Integer(int value)</code>:根据int数字创建Integer对象。—  装箱</li>
<li><code>Integer(String s)</code>:根据字符串创建Integer对象</li>
<li><code>static Integer valueOf(int i)</code>:将int转成Integer并返回</li>
<li><code>static Integer valueOf(String s)</code>:将String转成Integer并返回</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoInteger</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//public Integer(int value)：构造方法，根据一个int数字创建Integer对象（已过时）</span></span><br><span class="line">        Integer a = <span class="keyword">new</span> Integer(<span class="number">10</span>);</span><br><span class="line">        System.out.println(a);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public Integer(String s)：构造方法， 根据一个String创建Integer对象（已过时）</span></span><br><span class="line">        Integer b = <span class="keyword">new</span> Integer(<span class="string">"10"</span>);</span><br><span class="line">        System.out.println(b);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public static Integer valueOf(int i)：静态方法， 根据一个int数字获取Integer对象。</span></span><br><span class="line">        <span class="comment">//Integer c = 10; 内部会自动装箱，装箱代码（Integer c = Integer.valueOf(10)）</span></span><br><span class="line">        Integer c = Integer.valueOf(<span class="number">10</span>);<span class="comment">//装箱代码。</span></span><br><span class="line">        System.out.println(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// public static Integer valueOf(String s)：静态方法， 根据一个String获取Integer对象。</span></span><br><span class="line">        Integer d = Integer.valueOf(<span class="string">"10"</span>);</span><br><span class="line">        System.out.println(d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="12-5-字符串和基本类型相互转换"><a href="#12-5-字符串和基本类型相互转换" class="headerlink" title="12.5 字符串和基本类型相互转换"></a>12.5 字符串和基本类型相互转换</h3><ul>
<li><p>基本类型 -&gt; 字符串</p>
<ul>
<li><p>直接在基本类型数据后面加上<code>&quot;&quot;</code>;例如：  <code>1+&quot;abc&quot; -&gt; &quot;1abc&quot;</code></p>
</li>
<li><p>调用String的静态方法valueOf</p>
<p> ​    <code>static String valueOf(基本数据类型数据)</code>：将数据转成字符串并返回</p>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>字符串 -&gt; 基本类型</p>
<ul>
<li>如果要把字符串转成基本类型，可以使用基本类型对应的包装类中的parseXxx方法</li>
<li>除了Character,每个包装类中都有一个静态方法parseXxx，可以把字符串转成对应的基本类型<ul>
<li>比如:要把字符串转成int类型，使用Integer中的parseInt方法进行转换<ul>
<li><code>Integer.parseInt(String s)</code></li>
<li>…</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04Parse</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">        <span class="comment">// String s = num + "";</span></span><br><span class="line">        String s = String.valueOf(num);</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"=========================="</span>);</span><br><span class="line">        String ss = <span class="string">"123456789"</span>;</span><br><span class="line">        <span class="keyword">int</span> num1 = Integer.parseInt(ss);</span><br><span class="line">        System.out.println(num1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>学习</tag>
        <tag>面向对象</tag>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>Collection、List、泛型、数据结构</title>
    <url>/2020/07/29/Collection%E3%80%81List%E3%80%81%E6%B3%9B%E5%9E%8B%E3%80%81%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h2 id="一、Collection集合"><a href="#一、Collection集合" class="headerlink" title="一、Collection集合"></a>一、Collection集合</h2><h3 id="1-1-集合概述"><a href="#1-1-集合概述" class="headerlink" title="1.1 集合概述"></a>1.1 集合概述</h3><ul>
<li>集合：集合是一种容器 ，可以用来存储多个数据。</li>
</ul>
<p><strong>集合和数组的区别？</strong></p>
<ul>
<li>数组的长度是固定的，集合长度可变。</li>
<li><strong>数据中可以存储</strong>任意类型的数据，包括<strong>基本类型和引用类型</strong>。<strong>集合只能存储引用类型数据</strong>，如果想要存储基本类型数据，需要使用基本类型对应的包装类(引用类型)。</li>
</ul>
<a id="more"></a>

<h3 id="1-2-集合的继承体系"><a href="#1-2-集合的继承体系" class="headerlink" title="1.2 集合的继承体系"></a>1.2 集合的继承体系</h3><p>Collection：单列集合的根接口，用于存储一些列符合某种规则的元素。</p>
<p>Collection的子接口、子接口特点及其常见实现类</p>
<ul>
<li><code>java.util.List</code>：List接口的特点是<strong>元素有序，且元素可重复</strong>。<ul>
<li><code>java.util.LinkedList</code></li>
<li><code>java.util.ArrayList</code></li>
</ul>
</li>
<li><code>java.util.Set</code>：Set接口的特点是<strong>元素不可重复</strong>。<ul>
<li><code>java.util.HashSet</code><ul>
<li><code>java.util.LinkedHashSet</code></li>
</ul>
</li>
<li><code>java.util.TreeSet</code></li>
</ul>
</li>
</ul>
<p>继承体系：</p>
<p>Collection(interface)</p>
<ul>
<li>List(interface)<ul>
<li>LinkedList(class)</li>
<li>ArrayList(class)</li>
</ul>
</li>
<li>Set(interface)<ul>
<li>HashSet(class)<ul>
<li>LinkedHashSet(class)</li>
</ul>
</li>
<li>TreeSet(class)</li>
</ul>
</li>
</ul>
<p>注意：以上只是常用的一些集合，还有很多其他集合，可以查询API文档搜索Collection，查询其子接口及其子接口的实现类。</p>
<h3 id="1-3-Collection中的常用方法"><a href="#1-3-Collection中的常用方法" class="headerlink" title="1.3 Collection中的常用方法"></a>1.3 Collection中的常用方法</h3><p>Collection是所有单列集合的父接口，所以在Collection中定义了一些共性的方法，这些方法可以用于操作所有单列集合。</p>
<ul>
<li><code>public boolean add(E e)</code>：把指定元素添加到集合中</li>
<li><code>public void clear()</code>：清空集合元素</li>
<li><code>public boolean remove(E e)</code>：在集合中移除指定的元素</li>
<li><code>public boolean contains(Object obj)</code>：判断集合中是否包含给定的对象</li>
<li><code>public boolean isEmpty()</code>：判断当前集合是否为空</li>
<li><code>public int size()</code>：返回集合的长度</li>
<li><code>public Object[] toArray()</code>：把集合中的元素存储到数组中</li>
</ul>
<p>Collection还有很多其他的方法，查看API即可查看学习。</p>
<p>方法演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01CollectionMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合</span></span><br><span class="line">        Collection&lt;String&gt; c = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        c.add(<span class="string">"aa"</span>);</span><br><span class="line">        c.add(<span class="string">"bb"</span>);</span><br><span class="line">        c.add(<span class="string">"cc"</span>);</span><br><span class="line">        c.add(<span class="string">"dd"</span>);</span><br><span class="line">        c.add(<span class="string">"ee"</span>);</span><br><span class="line">        System.out.println(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将集合转成数组</span></span><br><span class="line">        Object[] obj = c.toArray();</span><br><span class="line">        System.out.println(Arrays.toString(obj));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判度集合中是否包含指定元素</span></span><br><span class="line">        System.out.println(c.contains(<span class="string">"cc"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除指定元素</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = c.remove(<span class="string">"cc"</span>);</span><br><span class="line">        System.out.println(flag);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取集合大小</span></span><br><span class="line">        <span class="keyword">int</span> s = c.size();</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//清空集合</span></span><br><span class="line">        c.clear();</span><br><span class="line">        System.out.println(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判度胺集合是否为空</span></span><br><span class="line">        System.out.println(c.isEmpty());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="二、Iterator迭代器"><a href="#二、Iterator迭代器" class="headerlink" title="二、Iterator迭代器"></a>二、Iterator迭代器</h2><h3 id="2-1-Iterator介绍"><a href="#2-1-Iterator介绍" class="headerlink" title="2.1 Iterator介绍"></a>2.1 Iterator介绍</h3><p><strong>迭代</strong>：就是Collection集合元素的通用获取方法。在取元素之前先判断集合中有没有元素，如果有，就把这个元素取出来，然后继续判断，重复这个过程，直到集合中所有元素全部驱逐。这种取出的方法叫做迭代。</p>
<p>在Java中，专门提供了一个<code>接口</code>来实现迭代操作：<code>java.util.Iterator</code></p>
<p>迭代器其实就是一个遍历集合的工具，内部有一个光标，这个光标最开始指向了集合的最开头位置。</p>
<p>获取迭代器的方法：</p>
<ul>
<li><code>public Iterator iteratoc()</code>:获取集合对应的迭代器，进行集合的遍历。<ul>
<li>使用格式：<code>Iterator&lt;集合中存储的数据类型&gt; it = 集合变量名.iterator();</code></li>
</ul>
</li>
</ul>
<p>Iterator接口的常用方法：</p>
<ul>
<li><code>public boolean hasNext()</code>：判断集合中是否还有元素可以获取，有则返回true</li>
<li><code>public E next()</code>：获取当前光标位置的元素，然后把光标向后移动</li>
</ul>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Iterator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Collection&lt;String&gt; c = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        c.add(<span class="string">"aa"</span>);</span><br><span class="line">        c.add(<span class="string">"bb"</span>);</span><br><span class="line">        c.add(<span class="string">"cc"</span>);</span><br><span class="line">        c.add(<span class="string">"dd"</span>);</span><br><span class="line">        c.add(<span class="string">"ee"</span>);</span><br><span class="line">        <span class="comment">//获取迭代器对象</span></span><br><span class="line">        Iterator&lt;String&gt; it = c.iterator();</span><br><span class="line">        <span class="comment">//循环判断光标处有没有元素</span></span><br><span class="line">        <span class="keyword">while</span> (it.hasNext())&#123;</span><br><span class="line">            <span class="comment">//有则进入循环，next方法，获取元素并且方法会让光标向后移动一位。</span></span><br><span class="line">            String str = it.next();</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>扩展知识：</p>
<ol>
<li><p>在进行集合元素获取时，如果集合中已经没有元素了，再继续使用next方法时，将会抛出<code>java.util.NoSuchElementException</code>(没有集合元素异常)</p>
</li>
<li><p>在进行集合元素获取时，在这个过程中同时进行添加或移除操作，将无法进行迭代操作，将会抛出<code>java.util.ConcurrentModificationException</code>(并发修改异常)</p>
</li>
</ol>
</blockquote>
<h3 id="2-2-迭代器实现原理"><a href="#2-2-迭代器实现原理" class="headerlink" title="2.2 迭代器实现原理"></a>2.2 迭代器实现原理</h3><h3 id="2-3-增强for循环"><a href="#2-3-增强for循环" class="headerlink" title="2.3 增强for循环"></a>2.3 增强for循环</h3><p>增强for循环(也称<code>for each循环</code>)是 <code>JDK5</code>以后出来的一个高级for循环，专门用来遍历数组和集合的。</p>
<p><strong>遍历集合</strong></p>
<ul>
<li>它的内部原理其实是个Iterator迭代器，所以在遍历的过程中，不能用集合的删除方法对集合中的元素进行删除操作。</li>
</ul>
<p><strong>遍历数组</strong></p>
<ul>
<li>增强for是一种语法糖，语法糖指的是本质没有变，只不过写法更加优雅，更加简洁了</li>
<li>增强for的本质就是for循环</li>
</ul>
<p>使用格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(元素数据类型 变量名 : 需要遍历的集合或数组)&#123;</span><br><span class="line">	<span class="comment">//操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01ForEach</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arrInt = &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> n : arrInt)&#123;</span><br><span class="line">            System.out.println(n);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Collection&lt;String&gt; c = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        c.add(<span class="string">"aa"</span>);</span><br><span class="line">        c.add(<span class="string">"bb"</span>);</span><br><span class="line">        c.add(<span class="string">"cc"</span>);</span><br><span class="line">        c.add(<span class="string">"dd"</span>);</span><br><span class="line">        c.add(<span class="string">"ee"</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : c) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="三、泛型"><a href="#三、泛型" class="headerlink" title="三、泛型"></a>三、泛型</h2><h3 id="3-1-什么是泛型"><a href="#3-1-什么是泛型" class="headerlink" title="3.1 什么是泛型"></a>3.1 什么是泛型</h3><p>泛型：泛型是一种未知的，不确定的类型</p>
<p>举例：比如<code>ArrayList&lt;E&gt;</code>，这个<strong>E</strong>就是泛型。但是E表示哪种数据类型，不确定，索引泛型是一种未知的，不确定的类型。</p>
<ul>
<li>虽然泛型类型E表示是一种不确定的类型，但是等我们将来使用这个类创建对象时，这个E表示的数据类型就可以确定下来。</li>
<li>比如：<ul>
<li>ArrayList<String> 此时这个泛型类型E表示的就是String</li>
<li>ArrayList<Person> 此时这个泛型类型E表示的就是Person</li>
</ul>
</li>
</ul>
<blockquote>
<p>泛型也是可以省略的，如果省略泛型，相当于泛型是Object。</p>
</blockquote>
<h3 id="3-2-使用泛型的好处"><a href="#3-2-使用泛型的好处" class="headerlink" title="3.2 使用泛型的好处"></a>3.2 使用泛型的好处</h3><ul>
<li>可以省略向下转型的代码。<ul>
<li>可以将运行时的问题提前到编译时期。</li>
</ul>
</li>
</ul>
<blockquote>
<p>小结：</p>
<p>1.将运行期类型转换异常<code>(java.util.ClassCastException)</code>，转移到了编译时期，提前编译报错。</p>
<p>2.避免了进行强制类型转换的麻烦</p>
</blockquote>
<blockquote>
<p>扩展：</p>
<p>泛型擦除：Java中的泛型时伪泛型，泛型只在源代码阶段有效，一旦编译，泛型就会消失。也叫泛型擦除。</p>
</blockquote>
<h3 id="3-3-泛型的定义和使用"><a href="#3-3-泛型的定义和使用" class="headerlink" title="3.3 泛型的定义和使用"></a>3.3 泛型的定义和使用</h3><h4 id="3-3-1-含有泛型的类"><a href="#3-3-1-含有泛型的类" class="headerlink" title="3.3.1 含有泛型的类"></a>3.3.1 含有泛型的类</h4><p>如果在定义类的时候，在类名后面加上<T>,就表示在类中定义了一个不确定的类型T。</p>
<ul>
<li>T可以是任何字母，一般是一个大写字母。</li>
<li>T真正表示一种数据类型，只不过它在刚写出来的时候是未知的</li>
<li>当我们使用这个类(创建对象)时，会指定这个T是什么类型，那么此时这个T表示的数据类型就可以确定了。</li>
<li>这个T就是一个泛型。</li>
</ul>
<p>定义格式：<code>修饰符 class 类名&lt;代表泛型的变量&gt; {...}</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>&lt;<span class="title">T</span>&gt;</span>&#123;<span class="comment">//定义了一个泛型类型T</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">method</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>小结：</strong>如果是在类上面定义的泛型，在整个类中都可以使用，类上面定义的泛型需要等到使用这个类(创建对象)，才会指定这个泛型是什么类型。</p>
</blockquote>
<h4 id="3-3-2-含有泛型的方法"><a href="#3-3-2-含有泛型的方法" class="headerlink" title="3.3.2 含有泛型的方法"></a>3.3.2 含有泛型的方法</h4><p>如果想要在调用方法时才确定具体的类型，那么我们可以使用泛型方法(在方法上定义泛型)</p>
<ul>
<li>在方法上定义泛型，那么这个泛型会在调用方法时才指定。</li>
</ul>
<p>定义格式：<code>修饰符 &lt;代表泛型的变量&gt; 返回值类型 方法名(参数列表){方法体}</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     &lt;E&gt;：表示方法中定义了一个未知的，不确定的泛型类型E</span></span><br><span class="line"><span class="comment">     返回值处E：使用了未知的，不确定的类型E当作了返回值类型</span></span><br><span class="line"><span class="comment">     参数上的E：实用类未知的,不确定的类型E当作了参数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> &lt;E&gt; <span class="function">E <span class="title">method</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">	<span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>小结：</strong>如果是在方法上定义的泛型，在方法中可以使用。方法上面定义的泛型需要等到调用方法时才能确定这个泛型是什么类型。</p>
</blockquote>
<h4 id="3-3-3-含有泛型的接口"><a href="#3-3-3-含有泛型的接口" class="headerlink" title="3.3.3 含有泛型的接口"></a>3.3.3 含有泛型的接口</h4><p>如果在定义接口时，在接口后面写上<T>，那么就表示在接口中定义了一个泛型类型T(不确定的类型)</p>
<p>定义格式：<code>修饰符 interface 接口名&lt;代表泛型的变量&gt;{...}</code></p>
<p>定义在接口上的泛型有两种使用方式：</p>
<ul>
<li>在实现类实现接口时，可以直接指定泛型类型</li>
<li>实现类在实现接口时，可以不指定泛型，等到使用实现类时再指定</li>
</ul>
<p><strong>演示：</strong></p>
<p>接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span>&lt;<span class="title">T</span>&gt; </span>&#123;<span class="comment">// 在接口中定义了一个泛型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义方法，使用泛型类型T当作参数类型和返回值类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> T <span class="title">method</span><span class="params">(T t)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现类在实现接口时指定泛型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 实现类在实现接口时，可以直接在接口后面写上尖括号去指定泛型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Sunmoon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterfaceImpl1</span> <span class="keyword">implements</span> <span class="title">MyInterface</span>&lt;<span class="title">Phone</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Phone <span class="title">method</span><span class="params">(Phone phone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现类在实现接口时,不指定泛型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 我们在定义类或者接口时，只有在当前类或者接口名字后面写的尖括号是在定义泛型，其他都是再使用泛型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterfaceImpl2</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">MyInterface</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">method</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口泛型测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03GenericTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        MyInterfaceImpl1 mi1 = <span class="keyword">new</span> MyInterfaceImpl1();</span><br><span class="line">        Phone phone = mi1.method(<span class="keyword">new</span> Phone());</span><br><span class="line"></span><br><span class="line">        MyInterfaceImpl2&lt;Pad&gt; mi2 = <span class="keyword">new</span> MyInterfaceImpl2&lt;&gt;();</span><br><span class="line">        Pad pad = mi2.method(<span class="keyword">new</span> Pad());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小贴士：</p>
<ul>
<li>泛型表示一种未知的数据类型<ul>
<li>定义在类上的泛型，使用类的时候会确定泛型的类型</li>
<li>定义在方法上的泛型，会在使用方法的时候确定泛型</li>
<li>定义在接口上的泛型，需要使用接口的时候确定泛型。</li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="3-3-4-泛型通配符"><a href="#3-3-4-泛型通配符" class="headerlink" title="3.3.4 泛型通配符"></a>3.3.4 泛型通配符</h3><p>当使用泛型类或者接口时，传递的数据中，泛型类型不确定，可以通过通配符<code>&lt;?&gt;</code>表示。但是一旦使用泛型的通配<br>符后，只能使用Object类中的共性方法，集合中元素自身方法无法使用。</p>
<h5 id="通配符基本使用"><a href="#通配符基本使用" class="headerlink" title="通配符基本使用"></a>通配符基本使用</h5><p><strong>泛型的通配符</strong>：不知道使用什么类型来接收的时候,此时可以使用<code>?</code>,<code>?表示未知通配符</code>。</p>
<ul>
<li>此时只能接受数据,不能往该集合中存储数据。</li>
</ul>
<h5 id="通配符高级使用—-受限泛型"><a href="#通配符高级使用—-受限泛型" class="headerlink" title="通配符高级使用—-受限泛型"></a>通配符高级使用—-受限泛型</h5><p>之前设置泛型的时候，实际上是可以任意设置的，只要是类就可以设置。但是在JAVA的泛型中可以指定一个泛型的<br><strong>上限</strong>和<strong>下限</strong>。</p>
<p><strong>泛型的上限：</strong></p>
<ul>
<li>格式：<code>类型名称 &lt;? extends 类&gt; 对象名称</code></li>
<li>意义：只能接收该类型及其子类</li>
</ul>
<p><strong>泛型的下限：</strong></p>
<ul>
<li>格式：<code>类型名称 &lt;? super 类&gt; 对象名称</code></li>
<li>意义：只能接收该类型及其父类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 泛型限定</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 作用：可以对泛型通配符?的取值范围进行限制</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;? extends A&gt;：泛型要么是A类，要么是A类的子类——上限</span></span><br><span class="line"><span class="comment"> * &lt;? super A&gt;：泛型要么是A类，要么是A类的父类——下限</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 泛型主要用于代码的重构，代码得优化。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Sunmoon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Generic</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="string">"张三"</span>,<span class="number">18</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="string">"拉拉"</span>,<span class="number">20</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="string">"李四"</span>,<span class="number">30</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="string">"王五"</span>,<span class="number">40</span>));</span><br><span class="line">        printArrayList(list);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Person&gt; personList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        printArrayList(personList);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Object&gt; objList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// printArrayList(objList);参数集合泛型是Person的父类，报错</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用method方法</span></span><br><span class="line">        <span class="comment">// method(list);//参数是Person的子类，有问题</span></span><br><span class="line">        method(personList);<span class="comment">//参数是Person，没问题</span></span><br><span class="line">        method(objList);<span class="comment">//参数是Person的父类，没问题</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义方法，用来保存Person或者Person的子类的集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list 参数集合的泛型要么是Person要么是Person的子类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArrayList</span><span class="params">(ArrayList&lt;? extends Person&gt; list)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对集合进行遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Person person : list) &#123;</span><br><span class="line">            System.out.println(person);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用泛型下限</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list 参数集合的泛型要么是Person，要么是Person的父类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(ArrayList&lt;? <span class="keyword">super</span> Person&gt; list)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结：<code>?</code>表示泛型通配符，如果要对?泛型通配符的取值范围进行限制，可以使用泛型限定</p>
</blockquote>
<h2 id="四、数据结构介绍"><a href="#四、数据结构介绍" class="headerlink" title="四、数据结构介绍"></a>四、数据结构介绍</h2><p>数据结构：存储数据的方式。如果某个容器存储数据的方式不同，那么他们的特点也不同。</p>
<h3 id="4-1-常见的数据结构"><a href="#4-1-常见的数据结构" class="headerlink" title="4.1 常见的数据结构"></a>4.1 常见的数据结构</h3><p>常见的数据结构有：栈、队列、数组、链表和红黑树。</p>
<h4 id="4-1-1-栈"><a href="#4-1-1-栈" class="headerlink" title="4.1.1 栈"></a>4.1.1 栈</h4><p>栈：stack，又称为堆栈</p>
<p>举例：弹夹</p>
<p><strong>特点：</strong></p>
<ul>
<li>先进后出。</li>
<li>栈的入口和出口都是栈的顶端位置</li>
</ul>
<p><strong>名词解释：</strong></p>
<ul>
<li><p><strong>压栈</strong>：就是存元素。把元素存到栈顶，栈中其他元素依次向栈底移动一个位置</p>
</li>
<li><p><strong>弹栈</strong>：取元素。把栈的顶端位置元素取出，栈中其他元素一次向栈顶移动一个位置.</p>
</li>
</ul>
<h4 id="4-1-2-队列"><a href="#4-1-2-队列" class="headerlink" title="4.1.2 队列"></a>4.1.2 队列</h4><p>举例：排队</p>
<p><strong>特点：</strong></p>
<ul>
<li>先进先出</li>
<li>队列的入口和出口各自占一侧。</li>
</ul>
<h4 id="4-1-3-数组"><a href="#4-1-3-数组" class="headerlink" title="4.1.3 数组"></a>4.1.3 数组</h4><p>特点：</p>
<ul>
<li>查询快：可以通过索引快速定位到元素。</li>
<li>增删元素慢</li>
</ul>
<h4 id="4-1-4-链表"><a href="#4-1-4-链表" class="headerlink" title="4.1.4 链表"></a>4.1.4 链表</h4><p>链表中由很多的节点组成。每个节点都至少包含两部分内容，一部分是该系欸但保存的数据，另一部分指向下个节点的地址值。</p>
<p>单向链表特点：</p>
<ul>
<li><p>多个节点之间，通过地址值连接。</p>
</li>
<li><p>查找元素慢：在数组中离散存储，离散存储指的是每个节点在内存中是不连续的。</p>
</li>
<li><p>增删元素快：对链表进行操作，只需要操作某个节点。</p>
</li>
</ul>
<h3 id="4-2-树的基本结构"><a href="#4-2-树的基本结构" class="headerlink" title="4.2 树的基本结构"></a>4.2 树的基本结构</h3><p>树具有的特点：</p>
<ul>
<li>每一个节点有零个或者多个子节点</li>
<li>没有父节点的节点称为根节点，一个树最多只有一个根节点</li>
<li>每个非根节点有且只有一个父节点</li>
</ul>
<p><strong>名词解释</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>节点</td>
<td>指树中的一个元素</td>
</tr>
<tr>
<td>叶子的度</td>
<td>节点拥有子树的个数，二叉树的度不大于2</td>
</tr>
<tr>
<td>叶子节点</td>
<td>度为0的节点，也称之为终端节点</td>
</tr>
<tr>
<td>高度</td>
<td>叶子节点的高度为1，叶子节点的父节点高度为2，以此类推，根节点的高度最高</td>
</tr>
<tr>
<td>层</td>
<td>根节点在第一层，以此类推</td>
</tr>
<tr>
<td>父节点</td>
<td>若一个节点含有子节点，则这个节点称之为其子节点的父节点</td>
</tr>
<tr>
<td>子节点</td>
<td>子节点是父节点的下一层节点</td>
</tr>
<tr>
<td>兄弟节点</td>
<td>拥有共同父节点的节点互称为兄弟节点</td>
</tr>
</tbody></table>
<h4 id="4-2-1-二叉树"><a href="#4-2-1-二叉树" class="headerlink" title="4.2.1 二叉树"></a>4.2.1 二叉树</h4><p><strong>二叉树：</strong>树结构中的每个节点的子节点的个数不超过2，那么该树就是一个二叉树。</p>
<p>图解：略…</p>
<h4 id="4-2-2-二叉查找树"><a href="#4-2-2-二叉查找树" class="headerlink" title="4.2.2 二叉查找树"></a>4.2.2 二叉查找树</h4><p>图解：略…</p>
<p><strong>特点：</strong></p>
<ul>
<li><p>左子树上所有的节点的值均小于它的根节点的值。</p>
</li>
<li><p>右子树上所有的节点的值均大于他的根节点的值</p>
</li>
<li><p>每一个节点最多有两个子树。</p>
</li>
</ul>
<p>二叉查找树在遍历获取元素的时候可以按照【左中右】的顺序进行遍历</p>
<blockquote>
<p>小贴士</p>
<ul>
<li>二叉查找树存在的问题：会出现【瘸子】的现象，影响查找效率。</li>
</ul>
</blockquote>
<h4 id="4-2-3-平衡二叉树"><a href="#4-2-3-平衡二叉树" class="headerlink" title="4.2.3 平衡二叉树"></a>4.2.3 平衡二叉树</h4><h5 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h5><p>平衡二叉树：在二叉查找树的基础上，它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。</p>
<h5 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h5><p>图解：略…</p>
<h4 id="4-2-4-红黑树"><a href="#4-2-4-红黑树" class="headerlink" title="4.2.4 红黑树"></a>4.2.4 红黑树</h4><p>图解：略…</p>
<p>特点：</p>
<ul>
<li>每一个节点或是红色，或者是黑色的。</li>
<li>根节点必须是黑色的</li>
<li>每个叶节点(Nil)是黑色的；（如果一个节点没有子节点或者父节点，则该节点相应的指针属性值为Nil，这些Nil视为叶节点）</li>
<li>如果某一个节点是红色，那么它的子节点必须是黑色（不能出现两个红色节点相连的情况）</li>
<li>对每一个节点，从该节点到其所有后代叶节点的简单路径上，均包含相同数目的黑色节点。</li>
</ul>
<blockquote>
<p>小贴士</p>
<p>在进行元素插入的时候，和之前一样； 每一次插入完毕以后，使用黑色规则进行校验，如果不满足红黑规则，就需 要通过变色，左旋和右旋来调整树，使其满足红黑规则。</p>
</blockquote>
<h2 id="五、List接口"><a href="#五、List接口" class="headerlink" title="五、List接口"></a>五、List接口</h2><h3 id="5-1-List接口介绍"><a href="#5-1-List接口介绍" class="headerlink" title="5.1 List接口介绍"></a>5.1 List接口介绍</h3><p><code>java.util.List</code>接口继承自<code>Collection</code>接口。</p>
<p>List接口特点：</p>
<ul>
<li><strong>元素有序</strong>：即是在元素的存入和取出时，顺序的一致的。例如：存入{1，23，10}，在集合中也是按照这个顺序存储的，取出也是一样的顺序。</li>
<li><strong>带有索引</strong>：集合中元素是带有索引的，可以通过索引紧缺的操作集合中的元素(参考数组索引)。</li>
<li><strong>可存重复元素</strong>：集合中的元素是可以重复的，可以使用equals方法来判断是否是重复元素。</li>
</ul>
<h3 id="5-2-List接口中的常用方法"><a href="#5-2-List接口中的常用方法" class="headerlink" title="5.2 List接口中的常用方法"></a>5.2 List接口中的常用方法</h3><p>List接口作为Collection的子接口，继承了Collention中的全部方法，还增加了一些根据元素索引操作集合的特有方法。</p>
<ul>
<li><p><code>public void add(int index, E element)</code>：将指定元素(element)，添加到集合中的指定位置(index)上。</p>
</li>
<li><p><code>public E get(int index)</code>：获取集合中指定索引位置(index)的元素，并返回。</p>
</li>
<li><p><code>public E remove(int index)</code>：移除集合中指定位置(index)的元素，并返回</p>
</li>
<li><p><code>public E set(int index, E element)</code>：用指定元素(element)替换集合中指定索引位置(index)的元素，返回值时被替换掉的元素。</p>
</li>
</ul>
<h3 id="5-3-ArrayList集合"><a href="#5-3-ArrayList集合" class="headerlink" title="5.3 ArrayList集合"></a>5.3 ArrayList集合</h3><p><code>java.util.ArrayList</code>集合数据存的结构是<strong>数组结构</strong>。</p>
<p>默认以原来数组的1.5倍进行扩容。</p>
<p><strong>特点：</strong>元素增删慢，查找快。</p>
<blockquote>
<p>小贴士：</p>
<p>由于日常开发中使用最多的功能为查询、遍历数据，所以ArrayList集合是最常用的集合。</p>
<p>在开发中随意的使用ArrayList集合完成任何需求，这样做法并不严禁，<strong>不提倡</strong>。</p>
</blockquote>
<h3 id="5-4-LinkedList集合"><a href="#5-4-LinkedList集合" class="headerlink" title="5.4 LinkedList集合"></a>5.4 LinkedList集合</h3><p><code>java.util.LinkedList</code>集合数据存储的结构是<strong>链表结构</strong>。(双向链表)</p>
<p><strong>特点：</strong>方便元素的添加、删除等操作。</p>
<p><strong>常见方法：</strong></p>
<ul>
<li><code>public void addFirst(E e)</code>：将指定元素插入到集合的开头。</li>
<li><code>public void addLast(E e)</code>：将指定元素插入到集合的末尾。</li>
<li><code>public E getFirst()</code>：返回集合中第一个元素。</li>
<li><code>public E getLast()</code>：返回集中的最后一个元素。</li>
<li><code>public E removeFirst()</code>：移除并返回集合中的第一个元素。</li>
<li><code>public E removeLast()</code>：移除并返回集合中最后一个元素。</li>
<li><code>public E pop()</code>：从此列表表示的堆栈中弹出一个元素。(弹栈)</li>
<li><code>public void push(E e)</code>：将元素推入此列表所表示的堆栈。(压栈)</li>
<li><code>public boolean isEmpty</code>：判断集合是否为空，为空则返回true。</li>
</ul>
<p>方法演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03LinkedList</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkedList&lt;String&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"hello"</span>);</span><br><span class="line">        list.add(<span class="string">"world"</span>);</span><br><span class="line">        list.add(<span class="string">"java"</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        System.out.println(<span class="string">"================="</span>);</span><br><span class="line">        list.push(<span class="string">"php"</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// String pop = list.pop();</span></span><br><span class="line">        <span class="comment">// System.out.println(pop);</span></span><br><span class="line">        <span class="comment">// String s = list.removeFirst();</span></span><br><span class="line">        <span class="comment">// String s = list.removeLast();</span></span><br><span class="line">        <span class="comment">// System.out.println(s);</span></span><br><span class="line">        <span class="comment">// System.out.println(list);</span></span><br><span class="line">        <span class="comment">// list.addFirst("php");</span></span><br><span class="line">        <span class="comment">// list.addLast("php");</span></span><br><span class="line">        <span class="comment">// System.out.println(list);</span></span><br><span class="line">        <span class="comment">// String first = list.getFirst();</span></span><br><span class="line">        <span class="comment">// String last = list.getLast();</span></span><br><span class="line">        <span class="comment">// System.out.println(first);</span></span><br><span class="line">        <span class="comment">// System.out.println(last);</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"==================="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="六、集合综合案例"><a href="#六、集合综合案例" class="headerlink" title="六、集合综合案例"></a>六、集合综合案例</h2><p><strong>斗地主案例：</strong></p>
<p>需求：</p>
<ul>
<li>按照斗地主的规则，完成洗牌发牌的动作。 <ul>
<li>使用54张牌打乱顺序,三个玩家参与游戏，三人交替摸牌，每人17张牌，最后三张留作底牌。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 斗地主案例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 步骤：</span></span><br><span class="line"><span class="comment"> *      1. 准备牌</span></span><br><span class="line"><span class="comment"> *          a.创建集合，用来保存牌</span></span><br><span class="line"><span class="comment"> *          b.向集合中添加54张牌</span></span><br><span class="line"><span class="comment"> *      2. 洗牌</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      3. 发牌</span></span><br><span class="line"><span class="comment"> *      4. 看牌</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Sunmoon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//准备容器——牌盒</span></span><br><span class="line">        List&lt;String&gt; poker = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="comment">//准备花色数组</span></span><br><span class="line">        String[] colors = &#123;<span class="string">"♠"</span>,<span class="string">"♥"</span>,<span class="string">"♣"</span>,<span class="string">"♦"</span>&#125;;</span><br><span class="line">        <span class="comment">//准备数字牌</span></span><br><span class="line">        String[] nums = &#123;<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">"6"</span>,<span class="string">"7"</span>,<span class="string">"8"</span>,<span class="string">"9"</span>,<span class="string">"10"</span>,<span class="string">"J"</span>,<span class="string">"Q"</span>,<span class="string">"K"</span>,<span class="string">"A"</span>,<span class="string">"2"</span>&#125;;</span><br><span class="line">        <span class="comment">//添加大🃏，小🃏,进入牌盒</span></span><br><span class="line">        poker.add(<span class="string">"大🃏"</span>);</span><br><span class="line">        poker.add(<span class="string">"小🃏"</span>);</span><br><span class="line">        <span class="comment">//把花色和数字组合，加入牌盒</span></span><br><span class="line">        <span class="keyword">for</span> (String color : colors) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String num : nums) &#123;</span><br><span class="line">                poker.add(color+num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//洗牌，使用Collections工具类中的shuffle()方法</span></span><br><span class="line">        Collections.shuffle(poker);</span><br><span class="line">        <span class="comment">//发牌</span></span><br><span class="line">        <span class="comment">//玩家1</span></span><br><span class="line">        ArrayList&lt;String&gt; playerOne = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//玩家2</span></span><br><span class="line">        ArrayList&lt;String&gt; playerTwo = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//玩家3</span></span><br><span class="line">        ArrayList&lt;String&gt; playerThree = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//底牌</span></span><br><span class="line">        ArrayList&lt;String&gt; bottomCard = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//普通for循环遍历牌盒集合，把对应的牌加入对应玩家的集合中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; poker.size(); i++) &#123;</span><br><span class="line">            <span class="comment">//先判断是否是最后三张牌，是则加入底牌集合</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt;= poker.size() - <span class="number">3</span>)&#123;</span><br><span class="line">                bottomCard.add(poker.get(i));</span><br><span class="line">                <span class="comment">//是则跳过本次循环，不执行下面发牌动作了</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//发牌时，第一个人拿的到牌的索引为0，3，6，...&#125;第二个人拿到牌的索引&#123;1，4，7，...&#125;,第三个人拿到牌的索引&#123;2，5，8，...&#125;</span></span><br><span class="line">            <span class="comment">//可以看出以下结论</span></span><br><span class="line">            <span class="comment">//判断索引对3取余等于0就给第一个人发牌</span></span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                playerOne.add(poker.get(i));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//对3取余等于1则给第二个人发牌</span></span><br><span class="line">                playerTwo.add(poker.get(i));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//此处意思是对3取余等于2则给第三个人发牌</span></span><br><span class="line">                playerThree.add(poker.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//看牌</span></span><br><span class="line">        lookCard(<span class="string">"张三"</span>,playerOne);</span><br><span class="line">        lookCard(<span class="string">"李四"</span>,playerTwo);</span><br><span class="line">        lookCard(<span class="string">"王五"</span>,playerThree);</span><br><span class="line">        lookCard(<span class="string">"底牌"</span>,bottomCard);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看牌面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 玩家姓名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list 玩家牌面</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">lookCard</span><span class="params">(String name, ArrayList&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"【"</span>+name + <span class="string">"】牌面："</span>);</span><br><span class="line">        <span class="keyword">for</span> (String card : list) &#123;</span><br><span class="line">            System.out.print(card + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>学习</tag>
        <tag>集合</tag>
        <tag>泛型</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Collections、Set、Map</title>
    <url>/2020/07/30/Collections%E3%80%81Set%E3%80%81Map/</url>
    <content><![CDATA[<h2 id="一、Collections类"><a href="#一、Collections类" class="headerlink" title="一、Collections类"></a>一、Collections类</h2><p>Collections是操作集合的工具类</p>
<h3 id="1-1-Collections常用方法"><a href="#1-1-Collections常用方法" class="headerlink" title="1.1 Collections常用方法"></a>1.1 Collections常用方法</h3><ul>
<li><code>static void shuffle(List&lt;?&gt; list)</code>：打乱集合的顺序</li>
<li><code>static void sort(List list)</code>：对集合的内容进行排序【自然排序】</li>
<li><code>static void sort(List list, Comparator c)</code>：对集合的内容进行排序，第一个参数是集合，第二个参数是比较器</li>
<li><code>static &lt;T&gt; boolean addAll(Collection&lt;? super T&gt; c, T... elements)</code> ：向集合中批量添加数据。</li>
</ul>
<a id="more"></a>

<h4 id="1-1-1-shuffle-方法"><a href="#1-1-1-shuffle-方法" class="headerlink" title="1.1.1 shuffle()方法"></a>1.1.1 shuffle()方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Collections</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"aaa"</span>);</span><br><span class="line">        list.add(<span class="string">"bbb"</span>);</span><br><span class="line">        list.add(<span class="string">"ccc"</span>);</span><br><span class="line">        list.add(<span class="string">"ddd"</span>);</span><br><span class="line">        list.add(<span class="string">"eee"</span>);</span><br><span class="line">        Collections.shuffle(list);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-1-2-addAll-方法"><a href="#1-1-2-addAll-方法" class="headerlink" title="1.1.2 addAll()方法"></a>1.1.2 addAll()方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04Collections</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function">        List&lt;String&gt; list </span>= <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Collections.addAll(list,<span class="string">"aa"</span>,<span class="string">"bb"</span>,<span class="string">"cc"</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="1-1-3-自然排序sort-方法"><a href="#1-1-3-自然排序sort-方法" class="headerlink" title="1.1.3 自然排序sort()方法"></a>1.1.3 自然排序sort()方法</h4><p>如果想要使用上面的sort方法进行自然排序，那么必须保证事物本身就具备比较的功能。</p>
<ul>
<li>使用sort方法进行自然排序，那么必须保证事物本身就具备比较的功能。例如：String、Integer</li>
</ul>
<p>如果想要对自定义的类型进行排序，必须在类上实现了Comparable接口，那么就表示该事物具备比较的功能，那么才可以使用自然排序的方式进行排序。</p>
<p><strong>测试类：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Collections</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合</span></span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">200</span>);</span><br><span class="line">        list.add(<span class="number">100</span>);</span><br><span class="line">        list.add(<span class="number">300</span>);</span><br><span class="line">        <span class="comment">//排序</span></span><br><span class="line">        Collections.sort(list);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"======================="</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; strList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        strList.add(<span class="string">"bb"</span>);</span><br><span class="line">        strList.add(<span class="string">"aa"</span>);</span><br><span class="line">        strList.add(<span class="string">"cc"</span>);</span><br><span class="line">        Collections.sort(strList);</span><br><span class="line">        System.out.println(strList);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"======================="</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自定义类型进行自然排序</span></span><br><span class="line">        List&lt;Person&gt; personList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">"张三"</span>, <span class="number">22</span>));</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">"李四"</span>, <span class="number">18</span>));</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">"王五"</span>, <span class="number">21</span>));</span><br><span class="line">        Collections.sort(personList);</span><br><span class="line">        System.out.println(personList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>自定义类型Person：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Person</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在使用自然排序时，内部会自动调用compareTo方法比较两个对象谁大谁小</span></span><br><span class="line"><span class="comment">     * 如果方法的返回时正数，表示调用者对象大于参数对象</span></span><br><span class="line"><span class="comment">     * 如果方法返回值是0，相等</span></span><br><span class="line"><span class="comment">     * 如果方法的返回值是负数，表示调用者小于参数对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 我们要做的是在compareTo中定义排序规则</span></span><br><span class="line"><span class="comment">     * 公式： 升序就是我(调用者)减他(参数)</span></span><br><span class="line"><span class="comment">     *      想要根据对象的什么属性进行排序，就让什么属性相减。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Person o)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//根据年龄升序排序</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age-o.age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//构造方法、get/set方法，略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：要使用自然排序的集合，里面的泛型必须要实现Comparable接口。</strong></p>
<blockquote>
<p>小结</p>
<ol>
<li>自然排序指的是事物本身就具有比较的功能，那么我们就可以使用sort方法直接进行排序。</li>
<li>自定义类必须实现Comparable接口才具备了比较的功能，才可以使用自然排序</li>
<li>实现Comparable后要重写compareTo方法，公式：升序就是我减他</li>
</ol>
</blockquote>
<h3 id="1-2-Comparator比较器排序"><a href="#1-2-Comparator比较器排序" class="headerlink" title="1.2 Comparator比较器排序"></a>1.2 Comparator比较器排序</h3><p>假如某个类没有实现Comparable接口，就表示该事物不具备比较的功能，那么我们就不能直接对他进行排序了。</p>
<p>在这种情况下，我们想要进行排序，可以找一个法官来帮助他们进行比较，这个法官就可以叫做<strong>比较器</strong>。</p>
<p>上面提到的sort方法有一个重载，<code>static void sort(List list, Comparator c)</code>，这个方法就是传入比较器对象进行排序。</p>
<ul>
<li>第一个参数为集合</li>
<li>第二个参数为比较器</li>
</ul>
<p>其中第二个参数<code>Comparator</code>是一个接口，该接口表示比较器。如果参数是接口，我们需要传递实现类对象，这个实现类需要我们自己创建。</p>
<p>对Studente类型进行排序：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03Collections</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="string">"拉拉"</span>,<span class="number">20</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="string">"哈哈"</span>,<span class="number">30</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="string">"呵呵"</span>,<span class="number">18</span>));</span><br><span class="line">        Collections.sort(list, <span class="keyword">new</span> Rule());</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义比较器实现类(也可以使用匿名内部类)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Comparator这个接口表示比较器，当我们使用Rule类实现类这个接口，Rule表示的也就是比较器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rule</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * compare会在比较器排序时由系统自动调用，compare方法的作用是比较两个对象谁大谁小</span></span><br><span class="line"><span class="comment">     * 如果方法的返回值是正数，表示第一个参数对象大于第二个参数对象(o1&gt;o2)</span></span><br><span class="line"><span class="comment">     * 如果方法的返回值是0,表示两者相等(o1=o2)</span></span><br><span class="line"><span class="comment">     * 如果方法的返回值是负数，表示第一个参数对象小于第二个参数对象(o1&lt;o2)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 公式：</span></span><br><span class="line"><span class="comment">     *  升序：就是一减二</span></span><br><span class="line"><span class="comment">     *  想要根据什么属性排序，就让什么属性相减。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student o1, Student o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o1.getAge()-o2.getAge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>sort()方法小结：</p>
<ul>
<li>自然排序：如果某个类实现类Comparable接口，那么表示该事物具备了比较的功能，那么可以直接使用sort方法进行排序，这种排序方式叫做自然排序。</li>
<li><strong>比较器排序【主要】</strong>：我们也可以找一个法官来帮这些对象进行排序，这种排序的方式是比较器排序。如果要进行比较器排序，我们要定义一个类，实现Comparator接口，然后重写compare方法，在调用Collections的sort方法，传递集合和比较器即可。</li>
</ul>
</blockquote>
<h3 id="1-3-可变参数"><a href="#1-3-可变参数" class="headerlink" title="1.3 可变参数"></a>1.3 可变参数</h3><p>在JDK5的时候，多了一个新特性，叫做可变参数。可变参数的方法可以在参数位置传递任意个数据。</p>
<p><code>Collections类中的addAll()方法第二个参数就是可变参数</code></p>
<p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数类型... 参数名)&#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在调用带有可变参数的方法时，我们可以向可变参数位置传递任意个数据。</li>
<li>可变参数的本质时数组，所以我们直接将可变参数当成数组使用即可。</li>
<li>因为可变参数本质是数组，所以在调用可变参数的方法时，也可以传递数组。</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01ChangeParams</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sum  = getSum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span>... nums)</span></span>&#123;<span class="comment">//nums本质是数组</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">            sum += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意</p>
<ol>
<li>一个方法中最多只能有一个可变参数</li>
<li>可变参数只能放到方法参数的最后一个位置</li>
</ol>
</blockquote>
<h2 id="二、Set接口"><a href="#二、Set接口" class="headerlink" title="二、Set接口"></a>二、Set接口</h2><p>Set是Collection下面的另一个子接口</p>
<p>Set接口下的特点：</p>
<ul>
<li>无序（存取顺序不能保证一致）</li>
<li>无索引（不可以根据索引操作元素）</li>
<li>不可重复（存储元素不能重复）</li>
</ul>
<p>Set是一个接口，如果要用，需要使用实现类，Set接口下面最常用的实现类是HashSet</p>
<ul>
<li>HashSet满足Set接口的所有的特点</li>
</ul>
<h3 id="2-1-Set接口的遍历"><a href="#2-1-Set接口的遍历" class="headerlink" title="2.1 Set接口的遍历"></a>2.1 Set接口的遍历</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Set集合的遍历。</span></span><br><span class="line"><span class="comment">    因为Set集合是没有索引的，所以不能使用普通for遍历，可以使用迭代器或增强for遍历，强烈推荐增强for</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Set</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        set.add(<span class="string">"hello"</span>);</span><br><span class="line">        set.add(<span class="string">"world"</span>);</span><br><span class="line">        set.add(<span class="string">"java"</span>);</span><br><span class="line">        set.add(<span class="string">"php"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String s : set) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-2-Hash集合存储数据的结构——哈希表"><a href="#2-2-Hash集合存储数据的结构——哈希表" class="headerlink" title="2.2 Hash集合存储数据的结构——哈希表"></a>2.2 Hash集合存储数据的结构——哈希表</h3><p>哈希表是归并后的结果。</p>
<h4 id="2-2-1-哈希值概念"><a href="#2-2-1-哈希值概念" class="headerlink" title="2.2.1 哈希值概念"></a>2.2.1 哈希值概念</h4><p>哈希值:就是一个int数字，我们可以把哈希值堪称对象的标识(特征码)</p>
<p>在Object中，有一个方法hashCode，可以获取到哈希值(hashCode)。</p>
<ul>
<li><code>int hashCode()</code>:获取对象的哈希值。</li>
</ul>
<blockquote>
<p>Object中的hashCode方法，是根据对象的地址值计算的哈希值</p>
</blockquote>
<p>对象的哈希值根据地址值计算一般来说意义不大，我们更多的是希望哈希值是根据属性计算的，如果两个对象的属性完全相同，哈希值也应该相同。</p>
<p>如果想要自己定义哈希值的计算规则，需要重写hashCode方法。</p>
<p>哈希值是对象的一个标识，但并不是唯一的标识，对象的哈希值允许重复。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01HashCode</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Person p = <span class="keyword">new</span> Person(<span class="string">"张三丰"</span>,<span class="number">108</span>);</span><br><span class="line">        <span class="comment">//获取哈希值并输出</span></span><br><span class="line">        System.out.println(p.hashCode());</span><br><span class="line"></span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person(<span class="string">"张三丰"</span>,<span class="number">108</span>);</span><br><span class="line">        System.out.println(p2.hashCode());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = name != <span class="keyword">null</span> ? name.hashCode() : <span class="number">0</span>;</span><br><span class="line">        result = <span class="number">31</span> * result + age;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写hashCode方法，自己定义哈希值的计算规则</span></span><br><span class="line"><span class="comment">     * 根据姓名和年龄计算哈希值，如果对象的姓名和年龄相同，得到的哈希值也应该相同</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public int hashCode() &#123;</span></span><br><span class="line"><span class="comment">        //获取姓名的哈希值加上年龄，结果就是该对象的哈希值</span></span><br><span class="line"><span class="comment">        return name.hashCode() * 31 + age;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * p1 = new Person("张三",13);  3 + 13 -&gt; 16</span></span><br><span class="line"><span class="comment">     * p2 = new Person("李四",12);  4 + 12 -&gt; 16</span></span><br><span class="line"><span class="comment">     * "张三"：3</span></span><br><span class="line"><span class="comment">     * "李四"：4</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//get...set...构造方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-2-哈希表"><a href="#2-2-2-哈希表" class="headerlink" title="2.2.2 哈希表"></a>2.2.2 哈希表</h4><p>哈希表：哈希表是一个数组，数组中每一个元素都是一个链表</p>
<blockquote>
<p>扩展：</p>
<p>桶：数组中每一个元素(链表)都是一个桶</p>
<p>哈希冲突：如果两个对象出现在了同一个桶内，就表示发生了哈希冲突</p>
<p>加载因子：是一个百分比，默认是0.75，如果哈希表中桶的使用比例超过加载因子，就会对哈希表进行再哈希。</p>
<p>再哈希：对哈希表扩容，让分类更广。</p>
</blockquote>
<p><strong>哈希表图解：</strong></p>
<p><img data-src="/image/hash_img.png" alt="hash_img"></p>
<h3 id="2-3-HashSet保证数据唯一性"><a href="#2-3-HashSet保证数据唯一性" class="headerlink" title="2.3 HashSet保证数据唯一性"></a>2.3 HashSet保证数据唯一性</h3><p>图解：</p>
<p><img data-src="/image/HashSet%E4%BF%9D%E8%AF%81%E6%95%B0%E6%8D%AE%E5%94%AF%E4%B8%80%E6%80%A7.png" alt="HashSet保证数据唯一性"></p>
<p>HashSet判断唯一性的过程</p>
<ol>
<li>先比较对象的哈希值。<ul>
<li>如果哈希值不同，肯定是不同的对象。 </li>
<li>如果哈希值相同，不一定是同一个对象。</li>
</ul>
</li>
<li>如果哈希值相同，还会调用equals进行比较。<ul>
<li>如果equals的结果是true，表示对象相同。</li>
<li>如果equals的结果是false，表示对象不同</li>
</ul>
</li>
</ol>
<h4 id="2-3-1-练习"><a href="#2-3-1-练习" class="headerlink" title="2.3.1 练习"></a>2.3.1 练习</h4><p>要求：使用HashSet保存学生对象，然后并遍历。</p>
<ul>
<li>学生对象要保证唯一性（如果学生的姓名和年龄相同，就看成是同一个学生）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01HashSet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建HashSet集合</span></span><br><span class="line">        Set&lt;Student&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        set.add(<span class="keyword">new</span> Student(<span class="string">"柳岩"</span>, <span class="number">36</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> Student(<span class="string">"李小璐"</span>, <span class="number">34</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> Student(<span class="string">"马蓉"</span>, <span class="number">32</span>));</span><br><span class="line"></span><br><span class="line">        set.add(<span class="keyword">new</span> Student(<span class="string">"柳岩"</span>, <span class="number">36</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合，输出集合中的每一个学生对象</span></span><br><span class="line">        <span class="keyword">for</span> (Student stu : set) &#123;</span><br><span class="line">            System.out.println(stu);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        Student student = (Student) o;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (age != student.age) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> name != <span class="keyword">null</span> ? name.equals(student.name) : student.name == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = name != <span class="keyword">null</span> ? name.hashCode() : <span class="number">0</span>;</span><br><span class="line">        result = <span class="number">31</span> * result + age;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    get..set..构造方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>结论：如果使用HashSet存储自定义对象并保证唯一性（对象的属性相同就看成是同一个对象），需要同时重写hashCode和equals，缺一不可。</p>
</blockquote>
<h3 id="2-4-LinkedHashSet"><a href="#2-4-LinkedHashSet" class="headerlink" title="2.4 LinkedHashSet"></a>2.4 LinkedHashSet</h3><p>LinkedHashSet也是Set接口下的实现类。</p>
<p>LinkedHashSet内部除了有一个哈希表之外，还有一个链表。</p>
<ul>
<li>链表的作用是保证有序。LinkedHashSet是有序的</li>
</ul>
<blockquote>
<p>小贴士：Set接口是无序的，但是他不能保证所有的实现类都无序。</p>
</blockquote>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01LinkedHashSet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建LinkedHashSet集合</span></span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">        set.add(<span class="string">"张三丰"</span>);</span><br><span class="line">        set.add(<span class="string">"张无忌"</span>);</span><br><span class="line">        set.add(<span class="string">"灭绝师太"</span>);</span><br><span class="line">        set.add(<span class="string">"金花婆婆"</span>);</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        System.out.println(set);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-5-TreeSet集合"><a href="#2-5-TreeSet集合" class="headerlink" title="2.5 TreeSet集合"></a>2.5 TreeSet集合</h3><p>TreeSet也是Set接口下的实现类。</p>
<p>TreeSet内部是一个二叉树，TreeSet可以自动对集合中的内容进行排序。</p>
<p>构造方法：</p>
<ul>
<li><code>TreeSet()</code>：空参的构造方法创建的TreeSet集合会使用自然排序的方式对集合中的元素进行排序</li>
<li><code>TreeSet(Comparator comparator)</code>：参数需要传递一个比较器，会使用比较器的方式对集合中的内容进行排序</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02TreeSet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建TreeSet集合，使用自然排序的方式进行排序</span></span><br><span class="line">        <span class="comment">// Set&lt;Integer&gt; set = new TreeSet&lt;&gt;();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个TreeSet集合，传递比较器。使用比较器的方式进行排序&#123;使用降序排序&#125;</span></span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> TreeSet&lt;&gt;(<span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o2-o1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        set.add(<span class="number">100</span>);</span><br><span class="line">        set.add(<span class="number">200</span>);</span><br><span class="line">        set.add(<span class="number">400</span>);</span><br><span class="line">        set.add(<span class="number">300</span>);</span><br><span class="line">        System.out.println(set);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="三、Map集合"><a href="#三、Map集合" class="headerlink" title="三、Map集合"></a>三、Map集合</h2><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h3><p>Map集合是一个双列集合。双列集合中的每个元素都是由两部分组成的。一部分是<code>键(Key)</code>，另一部分是<code>值(Value)</code>，<strong>一个键对应(映射)一个值</strong>。可以根据<strong>键找值</strong>。</p>
<p>在双列集合中，键不允许重复，值允许重复。</p>
<p>Map其实是一个接口，所有的双列集合都实现了这个接口，所以我们就把Map集合称为双列集合。</p>
<p>Map接口下做常用的实现类是HashMap。</p>
<h3 id="3-2-Map的常用子类"><a href="#3-2-Map的常用子类" class="headerlink" title="3.2 Map的常用子类"></a>3.2 Map的常用子类</h3><ul>
<li><p><code>HashMap&lt;K,V&gt;</code>：存储数据采用的哈希表结构，元素的存取顺序不能保证一致。由于要保证键的唯一、不重复，需要重写键的hashCode()方法、equals()方法。</p>
</li>
<li><p><code>LinkedHashMap&lt;K,V&gt;</code>：HashMap下有个子类LinkedHashMap，存储数据采用的哈希表结构+链表结构。通过链表结构可以保证元素的存取顺序一致；通过哈希表结构可以保证的键的唯一、不重复，需要重写键的hashCode()方法、equals()方法。</p>
</li>
<li><p><code>TreeMap&lt;K,V&gt;</code>：TreeMap集合和Map相比没有特有的功能，底层的数据结构是红黑树；可以对元素的键进行排序，排序方式有两种:自然排序和比较器排序</p>
</li>
</ul>
<h3 id="3-3-Map的常用方法"><a href="#3-3-Map的常用方法" class="headerlink" title="3.3 Map的常用方法"></a>3.3 Map的常用方法</h3><p>Map&lt;K,V&gt;有两个泛型，K表示键的数据类型，V表示值得数据类型</p>
<ul>
<li><code>V put(K key, V value)</code>：向Map集合中添加键值对元素，如果键已经存在，会使用新的值覆盖原有得值</li>
<li><code>V get(Object key)</code>：根据键获取对应得值并返回</li>
<li><code>V remove(Object key)</code>：根据键删除整个键值对，并返回被删除得值</li>
<li><code>boolean containsKey(Object key)</code>：判断Map集合中是否包含指定得键</li>
</ul>
<p>演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo01Map</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Map集合</span></span><br><span class="line">        Map&lt;Integer,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="number">100</span>,<span class="string">"张三"</span>);</span><br><span class="line">        map.put(<span class="number">200</span>,<span class="string">"李四"</span>);</span><br><span class="line">        map.put(<span class="number">300</span>,<span class="string">"王五"</span>);</span><br><span class="line">        <span class="comment">// map.put(200,"拉拉");</span></span><br><span class="line">        System.out.println(map);</span><br><span class="line">        System.out.println(<span class="string">"==========================="</span>);</span><br><span class="line">        String s1 = map.get(<span class="number">100</span>);</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        String s = map.get(<span class="number">10000</span>);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        System.out.println(<span class="string">"==========================="</span>);</span><br><span class="line">        String s2 = map.remove(<span class="number">300</span>);</span><br><span class="line">        System.out.println(s2);</span><br><span class="line">        System.out.println(<span class="string">"==========================="</span>);</span><br><span class="line">        <span class="keyword">boolean</span> flag = map.containsKey(<span class="number">200</span>);</span><br><span class="line">        System.out.println(flag);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-4-Map的遍历"><a href="#3-4-Map的遍历" class="headerlink" title="3.4 Map的遍历"></a>3.4 Map的遍历</h3><p>Map集合不能直接通过迭代器或者增强for遍历。</p>
<p>想要遍历Map集合有两种方法，<code>keySet()</code>和<code>entrySet()</code>。</p>
<h4 id="3-4-1-keySet-推荐"><a href="#3-4-1-keySet-推荐" class="headerlink" title="3.4.1 keySet[推荐]"></a>3.4.1 keySet[推荐]</h4><p><strong>原理：</strong>使用map集合调用keySet方法，拿到Map集合中的每一键，存储到一个Set集合中并返回，然后再遍历Set集合，拿到Map集合的每一个Key，使用Map集合的get方法通过键找值得方式，遍历出Map集合中的每一个元素。</p>
<ul>
<li><code>Set&lt;K&gt; keySet()</code>:可以获取到所有的键，并将所有的键放入到Set集合中返回</li>
</ul>
<p><strong>使用步骤：</strong></p>
<ol>
<li>调用Map集合的keySet方法，获取所有的键，放入到Set集合中返回</li>
<li>遍历Set集合，拿到Set集合中每一个键</li>
<li>根据遍历到的键获取对应的值</li>
</ol>
<p><strong>演示：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02KeySet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="number">1</span>,<span class="number">10</span>);</span><br><span class="line">        map.put(<span class="number">2</span>,<span class="number">20</span>);</span><br><span class="line">        map.put(<span class="number">3</span>,<span class="number">30</span>);</span><br><span class="line">        map.put(<span class="number">4</span>,<span class="number">40</span>);</span><br><span class="line">        map.put(<span class="number">5</span>,<span class="number">50</span>);</span><br><span class="line">        <span class="comment">//调用Map集合的keySet方法，获取所有的键，放入到Set集合中返回</span></span><br><span class="line">        Set&lt;Integer&gt; keys = map.keySet();</span><br><span class="line">        <span class="comment">//遍历Set集合，拿到Set集合中每一个键</span></span><br><span class="line">        <span class="keyword">for</span> (Integer key : keys) &#123;</span><br><span class="line">            <span class="comment">//根据遍历到的键获取对应的值</span></span><br><span class="line">            Integer value = map.get(key);</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-4-2-entrySet"><a href="#3-4-2-entrySet" class="headerlink" title="3.4.2 entrySet"></a>3.4.2 entrySet</h4><p><strong>原理：</strong>Map集合中有很多键值对，每一个键值对其实就是一个Entry对象。entrySet()方法就是先获取到Map集合中所有的Entry对象，把所有的对象放到Set集合中，然后再遍历Set集合，拿到每一个Entry对象，最后通过Entry中获取键和值的方法<code>getKey()</code>和<code>getValue</code>，获取Map集合中存储的键值对。</p>
<blockquote>
<p>提示:Entry是Map中的内部接口，在使用时，要加上外部接口名Map.Entry</p>
</blockquote>
<p><strong>涉及方法：</strong></p>
<ul>
<li><code>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code>:获取所有的entry对象并放入Set集合中返回。</li>
<li><code>K getKey()</code>：获取Entry中的键</li>
<li><code>V getValue()</code>：获取Entry中的值</li>
</ul>
<p><strong>使用步骤：</strong></p>
<ol>
<li>调用Map集合中的entrySet()方法，获取所有的Entry对象放入到Set集合中并返回</li>
<li>遍历Set集合，拿到Set集合中的每一个Entry对象</li>
<li>通过Entry对象调用getKey()和getValue()获取键和值</li>
</ol>
<p><strong>使用演示：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03EntrySet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">32</span>);</span><br><span class="line">        map.put(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">        map.put(<span class="number">2</span>, <span class="number">20</span>);</span><br><span class="line">        map.put(<span class="number">3</span>, <span class="number">30</span>);</span><br><span class="line">        <span class="comment">//1.调用Map集合中的entrySet()方法，获取所有的Entry对象放入到Set集合中并返回</span></span><br><span class="line">        Set&lt;Map.Entry&lt;Integer, Integer&gt;&gt; entries = map.entrySet();</span><br><span class="line">        <span class="comment">//2.遍历Set集合，拿到Set集合中的每一个Entry对象</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : entries) &#123;</span><br><span class="line">            <span class="comment">//3.通过Entry对象调用getKey()和getValue()获取键和值</span></span><br><span class="line">            Integer key = entry.getKey();</span><br><span class="line">            Integer value = entry.getValue();</span><br><span class="line">            System.out.println(key + <span class="string">"="</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-5-HashMap存储自定义类型判断键的唯一性"><a href="#3-5-HashMap存储自定义类型判断键的唯一性" class="headerlink" title="3.5 HashMap存储自定义类型判断键的唯一性"></a>3.5 HashMap存储自定义类型判断键的唯一性</h3><p>练习：每位学生（姓名，年龄）都有自己的家庭住址。那么，既然有对应关系，则将学生对象和家庭住址存储到map集合中。学生作为键, 家庭住址作为值。</p>
<ul>
<li>学生姓名相同并且年龄相同视为同一名学生。</li>
</ul>
<blockquote>
<p>HashMap保证唯一性(键)的方式和HashSet是一模一样。 因为HashSet内部就是在使用HashMap保存数据。</p>
</blockquote>
<p><strong>判断唯一性的方式：</strong></p>
<ol>
<li>先比较两个对象的哈希值。<ul>
<li>如果对象的哈希值不同，肯定是不同的对象。</li>
<li>如果对象的哈希值相同，不一定是同一个对象。</li>
</ul>
</li>
<li>然后比较两个对象的equals方法<ul>
<li>如果equals方法结果是true，表示两个对象相同。</li>
<li>如果equals方法结果是false，表示两个对象不同。</li>
</ul>
</li>
</ol>
<p><strong>代码演示：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04MapTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;Student,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">32</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> Student(<span class="string">"张三"</span>,<span class="number">18</span>),<span class="string">"北京"</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> Student(<span class="string">"李四"</span>,<span class="number">20</span>),<span class="string">"上海"</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> Student(<span class="string">"王五"</span>,<span class="number">22</span>),<span class="string">"广州"</span>);</span><br><span class="line"></span><br><span class="line">        map.put(<span class="keyword">new</span> Student(<span class="string">"张三"</span>,<span class="number">18</span>),<span class="string">"南京"</span>);<span class="comment">//南京覆盖掉北京，因为Student属性相同，视为一个对象，即Key相同</span></span><br><span class="line"></span><br><span class="line">        Set&lt;Student&gt; keys = map.keySet();</span><br><span class="line">        <span class="keyword">for</span> (Student key : keys) &#123;</span><br><span class="line">            String value = map.get(key);</span><br><span class="line">            System.out.println(key+<span class="string">"::"</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        Student student = (Student) o;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (age != student.age) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> name != <span class="keyword">null</span> ? name.equals(student.name) : student.name == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = name != <span class="keyword">null</span> ? name.hashCode() : <span class="number">0</span>;</span><br><span class="line">        result = <span class="number">31</span> * result + age;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    get...set...构造方法...略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结：如果要使用HashMap保存数据并保证数据的唯一性(属性相同就看成是同一个对象)，需要重写hashCode和equals方法。</p>
</blockquote>
<h3 id="3-6-LinkedHashMap"><a href="#3-6-LinkedHashMap" class="headerlink" title="3.6 LinkedHashMap"></a>3.6 LinkedHashMap</h3><p>LinkedHashMap也是一个双列集合。</p>
<ul>
<li>里面采用的是哈希表+链表的结构。</li>
<li>链表的作用是保证有序，LinkedHashMap是有序的。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05LinkedHashMap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        map.put(<span class="number">1</span>,<span class="number">100</span>);</span><br><span class="line">        map.put(<span class="number">2</span>,<span class="number">200</span>);</span><br><span class="line">        map.put(<span class="number">3</span>,<span class="number">300</span>);</span><br><span class="line">        System.out.println(map);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-7-TreeMap"><a href="#3-7-TreeMap" class="headerlink" title="3.7 TreeMap"></a>3.7 TreeMap</h3><p>TreeMap也是一个双列集合</p>
<ul>
<li>内部是一个二叉树，可以自动对键进行排序</li>
</ul>
<p>构造方法：</p>
<ul>
<li>TreeMap():会使用自然排序的方式进行自然排序</li>
<li>TreeMap(Comparator comparator)：参数需要传递一个比较器，可以对集合中的内容根据比较器进行排序</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06TreeMap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;Integer,String&gt; map = <span class="keyword">new</span> TreeMap&lt;&gt;(<span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//降序</span></span><br><span class="line">                <span class="keyword">return</span> o2-o1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        map.put(<span class="number">427</span>,<span class="string">"张三"</span>);</span><br><span class="line">        map.put(<span class="number">281</span>,<span class="string">"李四"</span>);</span><br><span class="line">        map.put(<span class="number">354</span>,<span class="string">"王五"</span>);</span><br><span class="line">        map.put(<span class="number">110</span>,<span class="string">"拉拉"</span>);</span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-8-练习"><a href="#3-8-练习" class="headerlink" title="3.8 练习"></a>3.8 练习</h3><p>要求：键盘录入一个字符串，统计该字符串中每个字符出现的次数。</p>
<ul>
<li>例如：aaabbbccc  a:3  b:3  c:3</li>
</ul>
<p><strong>思路：</strong></p>
<ol>
<li><p>键盘录入一个字符串</p>
</li>
<li><p>定义map集合当作计数器，键是要统计的字符，值是该字符出现的次数</p>
</li>
<li><p>遍历字符串，拿到字符串的中每一个字符</p>
</li>
<li><p>判断遍历到的字符在map集合中是否存在</p>
<ul>
<li>如果不存在，表示该字符没有统计过，那么就将该字符放入到Map集合中，次数设置为1</li>
<li>如果存在，就表示该字符统计过，就获取该字符出现的次数，然后把次数+1，重新放入到map集合。</li>
</ul>
</li>
<li><p>输出map</p>
</li>
</ol>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo07Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入一个字符串："</span>);</span><br><span class="line">        <span class="comment">//1.键盘录入一个字符串</span></span><br><span class="line">        String str = sc.nextLine();</span><br><span class="line">        <span class="comment">//2.定义map集合当作计数器，键是要统计的字符，值是该字符出现的次数</span></span><br><span class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">32</span>);</span><br><span class="line">        <span class="comment">//   3.遍历字符串，拿到字符串的中每一个字符</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> ch = str.charAt(i);</span><br><span class="line">            <span class="comment">//4.判断遍历到的字符在map集合中是否存在</span></span><br><span class="line">            <span class="comment">/*if (map.containsKey(ch)) &#123;</span></span><br><span class="line"><span class="comment">                //4.1如果存在，就表示该字符统计过，就获取该字符出现的次数，然后把次数+1，重新放入到map集合。</span></span><br><span class="line"><span class="comment">                map.put(ch, map.get(ch) + 1);</span></span><br><span class="line"><span class="comment">            &#125; else &#123;</span></span><br><span class="line"><span class="comment">                //4.2如果不存在，表示该字符没有统计过，那么就将该字符放入到Map集合中，次数设置为1</span></span><br><span class="line"><span class="comment">                map.put(ch, 1);</span></span><br><span class="line"><span class="comment">            &#125;*/</span></span><br><span class="line">            <span class="comment">//扩展写法</span></span><br><span class="line">            map.put(ch, map.containsKey(ch) ? map.get(ch) + <span class="number">1</span> : <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出map</span></span><br><span class="line">        Set&lt;Character&gt; keys = map.keySet();</span><br><span class="line">        <span class="keyword">for</span> (Character key : keys) &#123;</span><br><span class="line">            System.out.println(key + <span class="string">"-"</span> + map.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="四、集合的嵌套"><a href="#四、集合的嵌套" class="headerlink" title="四、集合的嵌套"></a>四、集合的嵌套</h2><p>集合嵌套演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; listOne = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        listOne.add(<span class="string">"张三"</span>);</span><br><span class="line">        listOne.add(<span class="string">"李四"</span>);</span><br><span class="line">        listOne.add(<span class="string">"王五"</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; listTwo = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        listTwo.add(<span class="string">"哈哈"</span>);</span><br><span class="line">        listTwo.add(<span class="string">"呵呵"</span>);</span><br><span class="line">        listTwo.add(<span class="string">"嘿嘿"</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;String&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(listOne);</span><br><span class="line">        list.add(listTwo);</span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span> (List&lt;String&gt; stuList : list)&#123;</span><br><span class="line">            <span class="keyword">for</span> (String str : stuList) &#123;</span><br><span class="line">                System.out.println(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="五、斗地主案例——排序"><a href="#五、斗地主案例——排序" class="headerlink" title="五、斗地主案例——排序"></a>五、斗地主案例——排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 斗地主案例——排序版</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Sunmoon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DouDiZhu</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 准备牌，假用索引表示牌的大小，索引值越大，牌的权值越大——用于排序</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//扑克索引</span></span><br><span class="line">        ArrayList&lt;Integer&gt; poker = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//扑克字典，</span></span><br><span class="line">        Map&lt;Integer,String&gt; pokerMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//花色</span></span><br><span class="line">        String[] colors = &#123;<span class="string">"♠"</span>,<span class="string">"♥"</span>,<span class="string">"♣"</span>,<span class="string">"♦"</span>&#125;;</span><br><span class="line">        <span class="comment">//数字</span></span><br><span class="line">        String[] nums = &#123;<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">"6"</span>,<span class="string">"7"</span>,<span class="string">"8"</span>,<span class="string">"9"</span>,<span class="string">"10"</span>,<span class="string">"J"</span>,<span class="string">"Q"</span>,<span class="string">"K"</span>,<span class="string">"A"</span>,<span class="string">"2"</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义开始索引为0</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//组合牌，遍历花色和数字数组，poker集合存储牌的索引0-53，pokerMap存储索引对应的牌面</span></span><br><span class="line">        <span class="keyword">for</span> (String num : nums) &#123;</span><br><span class="line">            <span class="keyword">for</span>(String color : colors)&#123;</span><br><span class="line">                poker.add(index);</span><br><span class="line">                pokerMap.put(index,color+num);</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//添加小王</span></span><br><span class="line">        poker.add(index);</span><br><span class="line">        pokerMap.put(index,<span class="string">"小🎴"</span>);</span><br><span class="line">        <span class="comment">//索引加一，添加大王</span></span><br><span class="line">        poker.add(++index);</span><br><span class="line">        pokerMap.put(index,<span class="string">"大🎴"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//洗牌，打乱存储牌所以的集合poker即可</span></span><br><span class="line">        Collections.shuffle(poker);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发牌，准备三个集合代表三个玩家，在准备一个集合存储底牌</span></span><br><span class="line">        ArrayList&lt;Integer&gt; playerOne = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; playerTwo = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; playerThree = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; bottomCard = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//开始发牌，遍历存储扑克索引的集合poker——操作索引，使用fori循环</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; poker.size(); i++) &#123;</span><br><span class="line">            <span class="comment">//先判断是否是最后三张，是则添加到底牌集合中，并结束当前循序，进行下一次循环</span></span><br><span class="line">            <span class="keyword">if</span> (i&gt;=<span class="number">51</span>)&#123;</span><br><span class="line">                bottomCard.add(poker.get(i));</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>)&#123;<span class="comment">//给第一个人发牌</span></span><br><span class="line">                playerOne.add(poker.get(i));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">3</span> ==<span class="number">1</span>)&#123;<span class="comment">//给第二个人发牌</span></span><br><span class="line">                playerTwo.add(poker.get(i));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// i % 3 == 2 给第三个人发牌</span></span><br><span class="line">                playerThree.add(poker.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">		<span class="comment">//调用方法看牌</span></span><br><span class="line">        lookCard(<span class="string">"张三"</span>,playerOne,pokerMap);</span><br><span class="line">        lookCard(<span class="string">"李四"</span>,playerTwo,pokerMap);</span><br><span class="line">        lookCard(<span class="string">"王五"</span>,playerThree,pokerMap);</span><br><span class="line">        lookCard(<span class="string">"底牌"</span>,bottomCard,pokerMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看牌面方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 玩家姓名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list 玩家的牌面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pokerMap 存储牌面的字典</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">lookCard</span><span class="params">(String name, ArrayList&lt;Integer&gt; list, Map&lt;Integer, String&gt; pokerMap)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//排序</span></span><br><span class="line">        Collections.sort(list);</span><br><span class="line">        <span class="comment">//输出玩家姓名</span></span><br><span class="line">        System.out.print(name + <span class="string">" : "</span>);</span><br><span class="line">        <span class="comment">//遍历list集合，根据Map字典查找牌面并输出</span></span><br><span class="line">        <span class="keyword">for</span> (Integer key : list)&#123;</span><br><span class="line">            System.out.print(pokerMap.get(key) + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//换行</span></span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小扩展：</p>
<p>在类上添加注解：@SuppressWarnings(“all”)：该注解的作用是抑制警告</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>学习</tag>
        <tag>集合</tag>
      </tags>
  </entry>
  <entry>
    <title>排序算法、异常、多线程</title>
    <url>/2020/07/31/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E3%80%81%E5%BC%82%E5%B8%B8%E3%80%81%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="一、冒泡排序"><a href="#一、冒泡排序" class="headerlink" title="一、冒泡排序"></a>一、冒泡排序</h2><p><strong>冒泡排序图解</strong></p>
<p><img data-src="/image/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F.png" alt="冒泡排序"></p>
<a id="more"></a>

<p><strong>代码实现：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Sort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义数组</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">7</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//最终版本</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span> - j; i++) &#123;</span><br><span class="line">                <span class="comment">//arr[i]表示前面的元素，arr[i + 1]表示后面的元素。</span></span><br><span class="line">                <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="comment">//交换</span></span><br><span class="line">                    <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">                    arr[i] = arr[i + <span class="number">1</span>];</span><br><span class="line">                    arr[i + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        //第一轮排序</span></span><br><span class="line"><span class="comment">        //使用循环完成第一轮排序</span></span><br><span class="line"><span class="comment">        for (int i = 0; i &lt; 4 - 1 - 0; i++) &#123;//i = 0 1 2</span></span><br><span class="line"><span class="comment">            //arr[i]表示前面的元素，arr[i + 1]表示后面的元素。</span></span><br><span class="line"><span class="comment">            if (arr[i] &gt; arr[i + 1]) &#123;</span></span><br><span class="line"><span class="comment">                //交换</span></span><br><span class="line"><span class="comment">                int temp = arr[i];</span></span><br><span class="line"><span class="comment">                arr[i] = arr[i + 1];</span></span><br><span class="line"><span class="comment">                arr[i + 1] = temp;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        //第二轮排序</span></span><br><span class="line"><span class="comment">        for (int i = 0; i &lt; 4 - 1 - 1; i++) &#123;</span></span><br><span class="line"><span class="comment">            //arr[i]表示前面的元素，arr[i + 1]表示后面的元素。</span></span><br><span class="line"><span class="comment">            if (arr[i] &gt; arr[i + 1]) &#123;</span></span><br><span class="line"><span class="comment">                //交换</span></span><br><span class="line"><span class="comment">                int temp = arr[i];</span></span><br><span class="line"><span class="comment">                arr[i] = arr[i + 1];</span></span><br><span class="line"><span class="comment">                arr[i + 1] = temp;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        //第三轮排序</span></span><br><span class="line"><span class="comment">        for (int i = 0; i &lt; 4 - 1 - 2; i++) &#123;</span></span><br><span class="line"><span class="comment">            //arr[i]表示前面的元素，arr[i + 1]表示后面的元素。</span></span><br><span class="line"><span class="comment">            if (arr[i] &gt; arr[i + 1]) &#123;</span></span><br><span class="line"><span class="comment">                //交换</span></span><br><span class="line"><span class="comment">                int temp = arr[i];</span></span><br><span class="line"><span class="comment">                arr[i] = arr[i + 1];</span></span><br><span class="line"><span class="comment">                arr[i + 1] = temp;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//输出数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : arr) &#123;</span><br><span class="line">            System.out.print(num + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="二、选择排序"><a href="#二、选择排序" class="headerlink" title="二、选择排序"></a>二、选择排序</h2><p><strong>选择排序图解</strong></p>
<p><img data-src="/image/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F.png" alt="选择排序"></p>
<p><strong>代码实现</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 选择排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 第一个和后面的挨个比较</span></span><br><span class="line"><span class="comment"> * 第二个和后面的挨个比较</span></span><br><span class="line"><span class="comment"> * ...</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Sort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">23</span>, <span class="number">43</span>&#125;;</span><br><span class="line">        <span class="comment">//选择排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="comment">//arr[i]前面的元素，arr[j]是后面的元素</span></span><br><span class="line">                <span class="comment">//如果前面的元素比后面元素大，就交换</span></span><br><span class="line">                <span class="keyword">if</span> (arr[i] &gt; arr[j]) &#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">                    arr[i] = arr[j];</span><br><span class="line">                    arr[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Arrays.sort();//JDK8以及之后，用的是归并排序算法，  8之后快速排序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="三、二分查找"><a href="#三、二分查找" class="headerlink" title="三、二分查找"></a>三、二分查找</h2><p><strong>二分查找图解</strong></p>
<p><img data-src="/image/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.png" alt="二分查找"></p>
<p><strong>代码实现</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二分查找</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Sunmoon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Search</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">12</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">27</span>, <span class="number">32</span>, <span class="number">45</span>, <span class="number">66</span>, <span class="number">88</span>, <span class="number">99</span>, <span class="number">101</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> i = binarySearch(arr, <span class="number">102</span>);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义方法：该方法用来进行二分查找，查找某个元素在数组中的索引。</span></span><br><span class="line"><span class="comment">     * 		参数：int[] arr【要在哪个数组中查找】</span></span><br><span class="line"><span class="comment">     * 			 int value 【要查找哪个元素】</span></span><br><span class="line"><span class="comment">     * 如果要查找的元素不存在，那么就返回一个-1；</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义两个变量，表示光标，分别指向数组的两边</span></span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//循环进行二分查找</span></span><br><span class="line">        <span class="comment">//只要left和right没有交错，那么就进行二分查找</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="comment">//获取中间位置索引</span></span><br><span class="line">            <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">//判断要查找的元素和中间位置的元素</span></span><br><span class="line">            <span class="comment">//如果要查找的元素比中间元素大，那么就应该去mid右边查找，就将left设置到mid右边</span></span><br><span class="line">            <span class="keyword">if</span> (target&gt;nums[mid])&#123;</span><br><span class="line">                left = mid +<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(target&lt;nums[mid])&#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//否则就表示两个元素相等，就表示找到了该元素，找到该元素就直接返回该元素的索引</span></span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果循环结束了，表述left比right大了，表示没有找到该元素，返回-1</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>要进行二分查找的数组，必须是已经排好序的数组。</p>
</blockquote>
<h2 id="四、异常"><a href="#四、异常" class="headerlink" title="四、异常"></a>四、异常</h2><h3 id="4-1-异常概念"><a href="#4-1-异常概念" class="headerlink" title="4.1 异常概念"></a>4.1 异常概念</h3><p>异常指的是不正常，指的是程序出现了某些问题。</p>
<p>在Java中所有的问题都可以使用一个类来表示，这个类叫做<code>Throwable</code>。</p>
<blockquote>
<p>Throwable是所有异常和错误的父类。</p>
</blockquote>
<h3 id="4-2-异常继承体系及分类"><a href="#4-2-异常继承体系及分类" class="headerlink" title="4.2 异常继承体系及分类"></a>4.2 异常继承体系及分类</h3><p><code>Throwable</code>：是所有异常和错误的父类。</p>
<ul>
<li><code>Error</code>：错误</li>
<li><code>Exception</code>：异常<ul>
<li><code>RuntimeException</code>：运行期异常</li>
</ul>
</li>
</ul>
<p>###<img data-src="/image/%E5%BC%82%E5%B8%B8%E7%BB%A7%E6%89%BF%E4%BD%93%E7%B3%BB.png" alt="异常继承体系"></p>
<p><strong>分类</strong></p>
<p>运行期异常：RuntimeException以及RuntimeException下的所有子类都是运行时异常</p>
<p>编译时异常：Exception以及除了RuntimeException之外的其他子类都是编译时异常</p>
<h3 id="4-4-异常产生过程解析"><a href="#4-4-异常产生过程解析" class="headerlink" title="4.4 异常产生过程解析"></a>4.4 异常产生过程解析</h3><p><img data-src="/image/%E5%BC%82%E5%B8%B8%E4%BA%A7%E7%94%9F%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90.png" alt="异常产生过程分析"></p>
<blockquote>
<p>异常一旦向外抛，后面代码就不再执行了。</p>
</blockquote>
<h2 id="五、异常的处理"><a href="#五、异常的处理" class="headerlink" title="五、异常的处理"></a>五、异常的处理</h2><h3 id="5-1-抛出异常——throw"><a href="#5-1-抛出异常——throw" class="headerlink" title="5.1 抛出异常——throw"></a>5.1 抛出异常——throw</h3><p>throw：用来手动向外抛出异常。</p>
<p>使用格式：<code>throw new 异常类名();</code></p>
<p>使用场景：</p>
<ul>
<li>如果我们想要手动制造一个问题，就可以用throw关键字，比如年龄录入是错误的，我们希望程序直接报错，就可以使用throw关键字手动向外抛出异常。</li>
</ul>
<p>演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03Throw</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];</span><br><span class="line">        System.out.println(getValue(arr, <span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//对索引进行一个判断，如果索引不合法，就手动向外抛出索引越界异常！</span></span><br><span class="line">        <span class="keyword">if</span> (target &lt; <span class="number">0</span> || target &gt;= arr.length) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">"索引越界！"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> arr[target];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在创建异常对象时，我们也可以在小括号中传递一个字符串类型的异常信息。</p>
</blockquote>
<h3 id="5-2-Objects的非空判断"><a href="#5-2-Objects的非空判断" class="headerlink" title="5.2 Objects的非空判断"></a>5.2 Objects的非空判断</h3><p>在工具类Objects中，有一个方法，可以进行对象的非空判断</p>
<ul>
<li><code>static &lt;T&gt; T requireNonNull(T obj)</code>:判断obj是否时null。如果obj是null，会引发空指针异常。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04Objects</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Object obj = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用Objects中的requireNonNull方法</span></span><br><span class="line">        Objects.requireNonNull(obj);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断obj是否是null，如果是null，就手动抛出异常</span></span><br><span class="line">        <span class="comment">/*if (obj == null)&#123;</span></span><br><span class="line"><span class="comment">            throw new NullPointerException();</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过null调用任何非静态的属性和方法都会引发空指针异常。</span></span><br><span class="line">        obj.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-3-throws关键字"><a href="#5-3-throws关键字" class="headerlink" title="5.3 throws关键字"></a>5.3 throws关键字</h3><p>对比一下前面的throw</p>
<ul>
<li>throw:用来手动向外抛出异常</li>
<li><strong>throws:用来进行异常声明，声明某个方法有可能出现异常，出现问题。</strong></li>
</ul>
<p>throws的格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数列表) <span class="keyword">throws</span> 异常类名&#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05Throws</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        method();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在方法中有可能出现多个异常,可以直接抛出它们的父类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method4</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (num % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SQLException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在方法中有可能出现多个异常，需要进行多异常的声明</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> <span class="keyword">throws</span> IOException,SQLException</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (num % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SQLException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在方法中抛出运行时异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在方法中抛出编译时异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//抛出异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>throws的注意事项</strong></p>
<ol>
<li>如果在方法中抛出了编译时异常，那么就必须要使用throws进行异常声明。</li>
<li>如果调用了使用throws声明异常的方法，那么调用者使用try…catch解决，要么也要加throws声明</li>
<li>如果在方法中抛出了运行时一茶馆，那么可以加throws声明，也可以不加。</li>
<li>如果方法中有可能抛出多个异常，那么需要进行多异常的声明</li>
<li>如果方法中有可能抛出多个异常，那么也可以直接声明他们的父类异常</li>
</ol>
<h3 id="5-4-try…catch"><a href="#5-4-try…catch" class="headerlink" title="5.4 try…catch"></a>5.4 try…catch</h3><p>作用：用来真正解决异常</p>
<p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    可能出现异常的代码</span><br><span class="line">&#125; <span class="keyword">catch</span>(类名 变量名)&#123;</span><br><span class="line">    出现异常后执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果catch小括号中的类名和try中引发的异常一样，那么就表示捕获到了异常。如果捕获到了异常，就表示把异常解决了。</p>
</blockquote>
<p>执行流程：</p>
<ul>
<li><p>第一种情况：如果try中代码没有异常，那么catch不会执行。</p>
<ul>
<li>第二种情况：如果try中的代码有异常，并且catch捕获到了这个异常，那么代码会从try直接执行到catch。</li>
</ul>
<ul>
<li>第三种情况：如果try中的代码有异常，但是catch没有捕获到这个异常，那么异常会依旧向外抛。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06TryCatch</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"1. try...start"</span>);</span><br><span class="line">            Object obj = <span class="comment">/*new Object()*/</span> <span class="keyword">null</span>;</span><br><span class="line">            obj.toString();</span><br><span class="line">            System.out.println(<span class="string">"2. try...end"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="comment">/*ArrayIndexOutOfBoundsException*/</span> NullPointerException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"3. 出现异常了"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"4. main...end"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结:</p>
<p>异常处理有两种方式</p>
<ul>
<li>向外抛(甩锅)：throw throws</li>
<li>解决异常：try…catch</li>
</ul>
</blockquote>
<h3 id="5-5-finally代码块"><a href="#5-5-finally代码块" class="headerlink" title="5.5 finally代码块"></a>5.5 finally代码块</h3><p>finally : try…catch后面可以追加finally代码块</p>
<p>格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    【A】可能出现异常的代码</span><br><span class="line">&#125; <span class="keyword">catch</span>(类名 变量名)&#123;</span><br><span class="line">    【B】出现异常后执行的代码</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    【C】一定会执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>特点 : finally代码块的内容无论如果一定会执行。</strong></p>
<p>执行流程：</p>
<ul>
<li>第一种情况：如果try中代码没有异常，执行流程为【A】、【C】</li>
<li>第二种情况：如果try中代码有异常，并且catch捕获到了这个异常，执行流程为【A】、【B】、【C】</li>
<li>第三种情况：如果try中代码有异常，但是catch没有捕获到这个异常，执行流程为【A】、【C】、抛出异常</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo07Finally</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"1. try...start"</span>);</span><br><span class="line">            Object obj = <span class="comment">/*new Object()*/</span> <span class="keyword">null</span>;</span><br><span class="line">            obj.toString();</span><br><span class="line">            System.out.println(<span class="string">"2. try...end"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(<span class="comment">/*ArrayIndexOutOfBoundsException*/</span>NullPointerException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"3. catch..."</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"4. finally..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"5. main....end"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用场景:必须要执行的代码会放到finally中。[例如:释放资源，释放链接]</p>
</blockquote>
<h2 id="六、自定义异常"><a href="#六、自定义异常" class="headerlink" title="六、自定义异常"></a>六、自定义异常</h2><p>如何自定义异常？</p>
<ul>
<li><p>就是认贼作父，定义一个类，继承一个异常类集合</p>
</li>
<li><p>如果一个类继承的是编译时异常，那么该类也就是编译时异常。</p>
</li>
<li><p>如果一个类继承的是运行时异常，那么该类也就是运行时异常。</p>
</li>
</ul>
<p><strong>测试类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(createStudent());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AgeException e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="comment">//e.printStackTrace();</span></span><br><span class="line">            System.out.println(<span class="string">"服务器忙..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"main...end"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个方法，该方法用来获取一个学生对象，学生姓名和年龄来源于键盘录入</span></span><br><span class="line"><span class="comment">     * 并且必须保证年龄的正确性，如果年龄是非法数字，那么我们就抛出异常</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Student <span class="title">createStudent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入学生姓名："</span>);</span><br><span class="line">        String name = sc.nextLine();</span><br><span class="line">        System.out.println(<span class="string">"请输入学生年龄："</span>);</span><br><span class="line">        <span class="keyword">int</span> age = Integer.parseInt(sc.nextLine());</span><br><span class="line">        <span class="keyword">if</span> (age &lt; <span class="number">0</span> || age &gt;= <span class="number">200</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//throw new RuntimeException("年龄不合法，请您注意");</span></span><br><span class="line">            <span class="comment">//抛出年龄异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AgeException(<span class="string">"年龄不合法，请您注意"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Student(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>异常类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgeException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供一个参数为字符串的构造方法，用来给异常提供信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AgeException</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        <span class="comment">//使用super调用父类的构造方法，将异常信息传递给父类</span></span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AgeException</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以在自定义异常中提供一个构造方法，用来传递异常信息【在该构造方法中要将异常信息交给父类的构造方法】</p>
</blockquote>
<h2 id="七、多线程"><a href="#七、多线程" class="headerlink" title="七、多线程"></a>七、多线程</h2><h3 id="7-1-进程和线程"><a href="#7-1-进程和线程" class="headerlink" title="7.1 进程和线程"></a>7.1 进程和线程</h3><p><strong>进程</strong>：正在运行的程序就是进程</p>
<p><strong>线程</strong>：是程序中的执行单元，每个线程都可以执行一个任务</p>
<p>在一个程序中，如果只有一个线程，那么这个程序就是一个单线程程序。</p>
<p>如果一个程序有多个线程，那么就是一个多线程程序。</p>
<p><img data-src="/image/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B.png" alt="进程与线程"></p>
<h3 id="7-2-并发和并行"><a href="#7-2-并发和并行" class="headerlink" title="7.2 并发和并行"></a>7.2 并发和并行</h3><p><strong>并发</strong>：同一时间，多个线程一起执行，但是这个同时并不是真正意义上的同时，CPU在多个线程之前快速切换，因为切换的速度非常快，所以可以看成同时。</p>
<p><strong>并行</strong>：同一个时间，多个线程一起执行，这个同时是真正意义的同时，同一个时间点，多个线程一起执行。</p>
<blockquote>
<p>并行必须要有CPU的支持</p>
</blockquote>
<p><img data-src="/image/%E5%B9%B6%E5%8F%91%E4%B8%8E%E5%B9%B6%E8%A1%8C.png" alt="并发与并行"></p>
<h3 id="7-3-main线程"><a href="#7-3-main线程" class="headerlink" title="7.3 main线程"></a>7.3 main线程</h3><p>每个程序至少要有一个线程，Java程序也一样。</p>
<ul>
<li>当我们运行程序时，JVM会创建一个main线程，执行main方法。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01MainThread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"HelloWorld！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"HelloJava！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在程序中只有一个执行线程main线程，所以目前的程序是一个单线程程序。</p>
<p>单线程程序同时只能做一件事情，如果有多个任务，只能执行一个，在执行一个。</p>
<p>如果想要同时做多个事情，那么需要使用多线程程序。</p>
<h3 id="7-4-多线程的第一种实现方式"><a href="#7-4-多线程的第一种实现方式" class="headerlink" title="7.4 多线程的第一种实现方式"></a>7.4 多线程的第一种实现方式</h3><p>Java中Thread表示线程，我们可以使用Thread类完成多线程程序。</p>
<p>多线程的第一种实现方式：</p>
<ol>
<li>定义一个类，继承Thread类</li>
<li>在子类中重写run方法，并在run方法中定义线程要完成的任务</li>
<li>创建Thread子类对象，调用start()方法，启动线程</li>
</ol>
<p><strong>线程类：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Thread表示线程类，当MyThread继承Thread类时，MyThread也就变成了线程类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写Thread中的润方法，在里面定义线程要执行的任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Hello,World"</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Thread</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"main...start"</span>);</span><br><span class="line">        <span class="comment">//创建Thread子类对象</span></span><br><span class="line">        <span class="comment">//创建一个新线程，只不过该线程还没有执行</span></span><br><span class="line">        MyThread m = <span class="keyword">new</span> MyThread();</span><br><span class="line">        <span class="comment">//执行线程，该线程会调用自己的run方法</span></span><br><span class="line">        m.start();</span><br><span class="line">        <span class="comment">//输出HelloJava</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Hello,Java"</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Thread中的start方法：<code>void start()</code>：让线程执行，线程会执行自己的run方法</p>
</blockquote>
<p><strong>多线程内存图</strong></p>
<p><img data-src="/image/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%86%85%E5%AD%98%E5%9B%BE.png" alt="多线程内存图"></p>
<h3 id="7-5-Thread中的方法"><a href="#7-5-Thread中的方法" class="headerlink" title="7.5 Thread中的方法"></a>7.5 Thread中的方法</h3><p>Thread中的构造方法：</p>
<ul>
<li>Thread() ：空参数的构造方法。</li>
<li>Thread(String name)：参数可以传递字符串类型的线程名</li>
</ul>
<p>Thread中的其他方法：</p>
<ul>
<li><code>String getName()</code>：获取线程名字</li>
<li><code>void setName(String name)</code>:设置线程名字</li>
<li><code>[*]static Thread currentThread()</code>：获取正在执行的线程对象</li>
<li><code>[*]static void sleep(long millis)</code>：线程休眠,参数是要休眠的毫秒值</li>
</ul>
<blockquote>
<p>标*的重点记忆</p>
</blockquote>
<p>代码示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread m = <span class="keyword">new</span> MyThread(<span class="string">"哈哈"</span>);</span><br><span class="line">        <span class="comment">//调用方法，给线程设置名字</span></span><br><span class="line">        <span class="comment">//m.setName("呵呵");</span></span><br><span class="line">        m.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取main线程的名字并输出</span></span><br><span class="line">        <span class="comment">//获取当前正在执行的线程对象[该方法是通过哪个线程调用执行的，那么就获取到的就是哪个线程]</span></span><br><span class="line">        <span class="comment">//因为下面代码是由main方法执行的，所以获取到的就是main线程对象</span></span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        System.out.println(t.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// new MyThread().start();</span></span><br><span class="line">        <span class="comment">// new MyThread().start();</span></span><br><span class="line">        <span class="comment">// new MyThread().start();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程休眠的方法</span></span><br><span class="line"><span class="comment"> *      [*]static void sleep(long millis)：线程休眠,参数是要休眠的毫秒值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Sleep</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"开始"</span>);</span><br><span class="line">        <span class="comment">//让线程休眠5秒钟</span></span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"结束"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="7-6-多线程的第二种实现方式"><a href="#7-6-多线程的第二种实现方式" class="headerlink" title="7.6 多线程的第二种实现方式"></a>7.6 多线程的第二种实现方式</h3><p>多线程的第二种实现方式</p>
<ol>
<li>定义类实现Runnable接口</li>
<li>重写run方法，在run方法中定义线程要执行的任务</li>
<li>创建Runnable接口的实现类对象</li>
<li>创建Thread线程对象，将Runnable接口的实现类对象作为参数传递</li>
<li>通过线程调用start方法，启动</li>
</ol>
<p>代码演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在java中，Thread才表示线程类</span></span><br><span class="line"><span class="comment"> * Task和Thread没有关系，所以Task并不是线程类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Runnable接口只有一个run方法，run方法中只需要关注线程要执行的任务，Runnable接口只需要关注任务即可。</span></span><br><span class="line"><span class="comment"> * 我们也可以把Runnable接口看成线程任务接口</span></span><br><span class="line"><span class="comment"> * Teak实现了Runnable接口，只需要重写run方法，只需要在里面关注线程任务，所以我们可以把Teak看成线程任务类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"HelloWorld"</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Runnable接口的实现类对象</span></span><br><span class="line">        <span class="comment">//Teak表示线程任务，现在表示创建了一个线程任务对象【表示线程要执行的任务】</span></span><br><span class="line">        Task task = <span class="keyword">new</span> Task();</span><br><span class="line">        <span class="comment">//创建Thread线程对象，，将Runnable接口的实现类对象作为参数传递</span></span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(task);<span class="comment">//将创建的线程和线程任务Task绑定，如果以后该线程启动，执行的就是Task中的run方法</span></span><br><span class="line">        t.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"HelloJava"</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结</p>
<p>多线程的两种实现方式：</p>
<ul>
<li>继承Thread类</li>
<li>实现Runnable接口，重写run方法。</li>
</ul>
<p><strong>推荐使用第二种实现方式(实现Runnable接口)</strong></p>
<p><strong>第二种方式的好处</strong></p>
<ul>
<li>可以解决类与类之间单继承的局限性</li>
<li>可以降低耦合性(关联性)</li>
<li>Runnable接口中只有一个run方法，没有start，setName,sleep,只需要在里面关注线程任务<ul>
<li>功能更加纯粹，符合设计模式中的单一职责原则。</li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="7-7-匿名内部类实现多线程"><a href="#7-7-匿名内部类实现多线程" class="headerlink" title="7.7 匿名内部类实现多线程"></a>7.7 匿名内部类实现多线程</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 匿名内部类实现多线程</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 匿名内部类格式：</span></span><br><span class="line"><span class="comment"> *  new 父类或父接口()&#123;</span></span><br><span class="line"><span class="comment"> *      重写的方法</span></span><br><span class="line"><span class="comment"> *  &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  作用：创建某个类(接口)的子类(实现类)对象</span></span><br><span class="line"><span class="comment"> *  举例：new Person()&#123;</span></span><br><span class="line"><span class="comment"> *      重写的方法</span></span><br><span class="line"><span class="comment"> *  &#125;</span></span><br><span class="line"><span class="comment"> *  创建了一个Person的子类对象，但是这个子类对象没有名字</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Runnable接口的实现类对象</span></span><br><span class="line">        Runnable r= <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"线程执行了"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//创建线程，传递Runnable接口的实现类，启动线程</span></span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(r);</span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//最终写法[能看懂并写出来]</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"线程执行了"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; System.out.println(Thread.currentThread().getName()+<span class="string">"线程执行了"</span>)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>学习</tag>
        <tag>简单排序算法</tag>
        <tag>异常</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>线程安全、volatile关键字、原子性、并发包</title>
    <url>/2020/08/02/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E3%80%81volatile%E5%85%B3%E9%94%AE%E5%AD%97%E3%80%81%E5%8E%9F%E5%AD%90%E6%80%A7%E3%80%81%E5%B9%B6%E5%8F%91%E5%8C%85/</url>
    <content><![CDATA[<h2 id="一、高并发及线程安全"><a href="#一、高并发及线程安全" class="headerlink" title="一、高并发及线程安全"></a>一、高并发及线程安全</h2><h3 id="1-1-高并发及线程安全"><a href="#1-1-高并发及线程安全" class="headerlink" title="1.1  高并发及线程安全"></a>1.1  高并发及线程安全</h3><p><strong>高并发：</strong>是指在某个时间点上，有大量的用户(线程)同时访问同一资源。</p>
<p><strong>线程安全：</strong>在某个时间点上，当大量用户(线程)访问同一资源时，由于多线程运行机制的原因，可能会导致被访问的资源出现”数据污染”的问题。</p>
<a id="more"></a>

<h3 id="1-2-多线程的运行机制"><a href="#1-2-多线程的运行机制" class="headerlink" title="1.2 多线程的运行机制"></a>1.2 多线程的运行机制</h3><p>当一个线程启动后，JVM会为其分配一个独立的”线程栈区”，这个线程会在这个独立的栈区中运行。</p>
<p>栈内存是线程私有的，每一个线程都有一个自己的栈空间，用来运行自己的方法。</p>
<p>方法是通过哪个线程调用的，那么该方法就在哪个线程的栈空间中运行。</p>
<p><img data-src="/image/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%86%85%E5%AD%98%E5%9B%BE2.png" alt="多线程内存图2"></p>
<h3 id="1-3-多线程的安全性问题-可见性"><a href="#1-3-多线程的安全性问题-可见性" class="headerlink" title="1.3 多线程的安全性问题 - 可见性"></a>1.3 多线程的安全性问题 - 可见性</h3><h4 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h4><p>Java内存模型：是线程对于共享数据的一个访问规则</p>
<p>主内存：线程共享的数据会保存到主内存中。</p>
<p>线程的工作内存，保存的是数据的副本，当线程要操作的共享数据时，会先把主内存中的数据读取到自己的工作内存中，然后再操作。</p>
<p>线程无法直接访问主内存中的数据，如果线程要操作主内存中的数据，会先把主内存中的数据复制一份放到自己的工作内存中。然后在自己的工作内存中进行操作，操作完之后再把工作内存中的数据放回主内存。</p>
<p>各个线程的工作内存，是相互不可见。</p>
<p><img data-src="/image/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.png" alt="Java内存模型"></p>
<h4 id="线程的可见性问题"><a href="#线程的可见性问题" class="headerlink" title="线程的可见性问题"></a>线程的可见性问题</h4><p><img data-src="/image/%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8F%AF%E8%A7%81%E6%80%A7%E9%97%AE%E9%A2%98.png" alt="线程的可见性问题"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 演示线程的可见性问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread m = <span class="keyword">new</span> MyThread();</span><br><span class="line">        m.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在main线程中用死循环判断，如果线程对象中flag变成了true，就输出一句话</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (m.flag)&#123;</span><br><span class="line">                System.out.println(m.getName() + <span class="string">"线程执行了"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//休眠三秒</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将flag改成true</span></span><br><span class="line">        flag = <span class="keyword">true</span>;</span><br><span class="line">        System.out.println(<span class="string">"flag已经更改成为："</span> + flag) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1-4-多线程的安全性问题-有序性"><a href="#1-4-多线程的安全性问题-有序性" class="headerlink" title="1.4 多线程的安全性问题 - 有序性"></a>1.4 多线程的安全性问题 - 有序性</h3><p>编译器在编译时回对代码进行重排序。</p>
<p>如果代码先后顺序在方法中不受影响，编译器编译时，就有可能进行重排序。</p>
<p>如果多线程程序中出现重排序，有可能有风险。</p>
<p><img data-src="/image/%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%9C%89%E5%BA%8F%E6%80%A7%E9%97%AE%E9%A2%98.png" alt="线程的有序性问题"></p>
<h3 id="1-5-多线程的安全性问题-原子性"><a href="#1-5-多线程的安全性问题-原子性" class="headerlink" title="1.5 多线程的安全性问题 - 原子性"></a>1.5 多线程的安全性问题 - 原子性</h3><p><strong>原子性：密不可分的一组操作。</strong></p>
<p><img data-src="/image/%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8E%9F%E5%AD%90%E6%80%A7%E9%97%AE%E9%A2%98.png" alt="线程的原子性问题"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 原子性问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Task t = <span class="keyword">new</span> Task();</span><br><span class="line">        <span class="keyword">new</span> Thread(t).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(t).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(t).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//count自增一百次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">5</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            count++;</span><br><span class="line">            System.out.println(<span class="string">"count-&gt;"</span> + count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="二、volatile关键字"><a href="#二、volatile关键字" class="headerlink" title="二、volatile关键字"></a>二、volatile关键字</h2><p><strong>volatile</strong>：可以保证多线程中的可见性问题</p>
<ul>
<li>volatile修饰的成员变量，该变量每次修改后对于其他变量是可见的。</li>
<li>volatile修饰的成员变量，每次线程在操作时，都会从主内存中读取数据。</li>
</ul>
<h4 id="2-1-volatile解决可见性问题"><a href="#2-1-volatile解决可见性问题" class="headerlink" title="2.1 volatile解决可见性问题"></a>2.1 volatile解决可见性问题</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread m = <span class="keyword">new</span> MyThread();</span><br><span class="line">        m.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在main线程中用死循环判断，如果线程对象中flag变成了true，就输出一句话</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//flag已经使用volatile修饰了，所以每次循环都会去主内存中读取新数据，可以解决可见性问题</span></span><br><span class="line">            <span class="keyword">if</span> (m.flag)&#123;</span><br><span class="line">                System.out.println(m.getName() + <span class="string">"线程执行了"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//休眠三秒</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将flag改成true</span></span><br><span class="line">        flag = <span class="keyword">true</span>;</span><br><span class="line">        System.out.println(<span class="string">"flag已经更改成为："</span> + flag) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2-2-volatile解决有序性问题"><a href="#2-2-volatile解决有序性问题" class="headerlink" title="2.2 volatile解决有序性问题"></a>2.2 volatile解决有序性问题</h4><p>有序性问题主要因为发生了代码“重排”，volatile修饰变量时，会禁止代码重排。</p>
<p><img data-src="/image/volatile%E8%A7%A3%E5%86%B3%E6%9C%89%E5%BA%8F%E6%80%A7%E9%97%AE%E9%A2%98.png" alt="volatile解决有序性问题"></p>
<blockquote>
<p>小结</p>
<ul>
<li><p>volatile可以解决多线程的可见性和有序性问题</p>
</li>
<li><p>不能解决多线程的原子性问题</p>
</li>
</ul>
</blockquote>
<h2 id="三、原子类"><a href="#三、原子类" class="headerlink" title="三、原子类"></a>三、原子类</h2><h3 id="3-1-原子类概述"><a href="#3-1-原子类概述" class="headerlink" title="3.1 原子类概述"></a>3.1 原子类概述</h3><p>在<code>java.util.concurrent.atomic</code>包下定义了一些对“变量”操作的“原子类”:</p>
<ul>
<li><code>java.util.concurrent.atomic.AtomicInteger</code>：对int变量操作的“原子类”;</li>
<li><code>java.util.concurrent.atomic.AtomicLong</code>：对long变量操作的“原子类”;</li>
<li><code>java.util.concurrent.atomic.AtomicBoolean</code>：对boolean变量操作的“原子类”;</li>
</ul>
<p>它们可以保证对“变量”操作的：原子性、有序性、可见性。</p>
<h3 id="3-2-AtomicInteger示例"><a href="#3-2-AtomicInteger示例" class="headerlink" title="3.2 AtomicInteger示例"></a>3.2 AtomicInteger示例</h3><p>AtomicInteger是整数原子类，里面支持原子性操作。</p>
<ul>
<li>举例：如果AtomicInteger进行自增操作，自增中的很多操作步骤都是一个整体，不能被插队执行。</li>
</ul>
<p>构造方法：</p>
<ul>
<li><code>AtomicInteger()</code>：使用空参后遭方法创建的对象表示整数0</li>
<li><code>AtomicInteger(int initialValue)</code>:根据指定的整数创建AtomicInteger对象。</li>
</ul>
<p>其他方法：</p>
<ul>
<li><code>int getAndIncrement()</code>：先获取当前值，然后自增，返回的是自增前的值【相当于i++】</li>
<li><code>int incrementAndGet()</code>：先自增，然后获取自增后的值。返回的是自增后的值【相当于++i】</li>
<li><code>int get()</code>：获取AtomicInteger对象的int数字。</li>
</ul>
<p>演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Atomic</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建AtomicInteger</span></span><br><span class="line">        AtomicInteger a = <span class="keyword">new</span> AtomicInteger(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//System.out.println(a);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// int getAndIncrement() :先获取当前值，然后自增，返回的是自增前的值【相当于i++】</span></span><br><span class="line">        <span class="comment">//int num = a.getAndIncrement();  a:11  num:10</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//int incrementAndGet()：先自增，然后获取自增后的值。返回的是自增后的值【相当于++i】</span></span><br><span class="line">        <span class="keyword">int</span> num = a.incrementAndGet(); <span class="comment">// a:11 num:11</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"a:"</span> + a);</span><br><span class="line">        System.out.println(<span class="string">"num:"</span> + num);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// int get()：获取AtomicInteger对象的int数字。</span></span><br><span class="line">        <span class="keyword">int</span> aa = a.get();</span><br><span class="line">        System.out.println(<span class="string">"aa:"</span> + aa);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-1-AtomicInteger保证数据原子性"><a href="#3-2-1-AtomicInteger保证数据原子性" class="headerlink" title="3.2.1 AtomicInteger保证数据原子性"></a>3.2.1 AtomicInteger保证数据原子性</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用AtomicInteger解决原子性问题</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Sunmoon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建的原子类对象，表示数字0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    AtomicInteger num = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">5</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//自增</span></span><br><span class="line">            <span class="keyword">int</span> count = num.incrementAndGet();</span><br><span class="line">            System.out.println(<span class="string">"count:"</span> + count);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Task t = <span class="keyword">new</span> Task();</span><br><span class="line">        <span class="keyword">new</span> Thread(t).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(t).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(t).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-3-CAS机制"><a href="#3-3-CAS机制" class="headerlink" title="3.3 CAS机制"></a>3.3 CAS机制</h3><p>AtomicInteger就是通过<strong>CAS机制</strong>来保证数据的原子性</p>
<p>CAS(Compare and swap)：比较与交换</p>
<ul>
<li><p>CAS是通过记录旧的预期值得方式来保证原子性得。</p>
</li>
<li><p>旧的预期值：原来得值（修改前得值）</p>
</li>
</ul>
<p><strong>CAS机制解决原子性过程：</strong></p>
<ol>
<li>线程一会先主内存中的数据读取到自己的工作内存中，并记录旧的预期值。</li>
<li>如果CPU的执行权被其他线程抢走了，线程二执行了，线程二将主内存中的数据读取到自己的工作内存中，并在自己的工作内存中进行修改，修改后在保存到主内存中。</li>
<li>线程一要将工作内存中的数据进行修改(自增)</li>
<li>线程一会将工作内存中的数据保存到主内存，在保存到主内存之前，会先对比一下自己记录的旧的预期值和主内存中的数据是否一致，如果旧的预期值和主内存中的数据一样，表示主内存中的数据没有被修改过，那么可以直接将工作内存中的数据保存到主内存。如果工作内存中的数据和主内存中的数据不一样，就表示主内存中的数据已经被修改过，那么线程一会重新读取主内存中的新数据，并记录旧的预期值，然后在自己的工作内存中修改，修改完之后再次对比旧的预期值和主内存中的数据并进行操作。</li>
</ol>
<p>图解：</p>
<p><img data-src="/image/CAS%E6%9C%BA%E5%88%B6.png" alt="CAS机制"></p>
<h2 id="四、synchronized关键字"><a href="#四、synchronized关键字" class="headerlink" title="四、synchronized关键字"></a>四、synchronized关键字</h2><p><strong><code>synchronized</code>可以解决多行代码的原子性问题</strong></p>
<h3 id="4-1-售票案例引发的安全问题"><a href="#4-1-售票案例引发的安全问题" class="headerlink" title="4.1 售票案例引发的安全问题"></a>4.1 售票案例引发的安全问题</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 电影院要卖票，我们模拟电影院的卖票过程。</span></span><br><span class="line"><span class="comment"> * 假设要播放的电影是 “葫芦娃大战奥特曼”，本次电影的座位共100个(本场电影只能卖100张票)。</span></span><br><span class="line"><span class="comment"> * 我们来模拟电影院的售票窗口，实现多个窗口同时卖 “葫芦娃大战奥特曼”这场电影票(多个窗口一起卖这100张票)需要窗口，</span></span><br><span class="line"><span class="comment"> * 采用线程对象来模拟；需要票，Runnable接口子类来模拟。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 使用三个线程卖100张票</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Ticket对象</span></span><br><span class="line">        Ticket t = <span class="keyword">new</span> Ticket();</span><br><span class="line">        <span class="comment">//使用三个线程去卖票</span></span><br><span class="line">        <span class="keyword">new</span> Thread(t).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(t).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(t).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果多线程同时操作共享数据，就有可能会引发线程安全问题。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义变量，表示票的数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 要使用多个线程一起卖票，所以要在run方法中定义卖票任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//因为售票窗口要一致卖票，死循环</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//判断有没有票，有票在卖</span></span><br><span class="line">            <span class="keyword">if</span> (count&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//增加出现问题机率</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">5</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//模拟卖票操作</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"正在卖票"</span> + count);</span><br><span class="line">                <span class="comment">//减少票</span></span><br><span class="line">                count--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-同步代码块"><a href="#4-2-同步代码块" class="headerlink" title="4.2 同步代码块"></a>4.2 同步代码块</h3><p>使用synchronized解决线程安全问题（多行代码原子性问题）</p>
<ul>
<li><p>synchronized表示同步，可以修饰方法，也可以修饰代码块</p>
</li>
<li><p>如果synchronized修饰代码块，就叫同步代码块</p>
</li>
</ul>
<p>同步代码块格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(锁对象)&#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>锁对象就是一个普通的Java对象，锁对象可以是任何类型的，可以是Student，ArrayList，Object…</p>
<p>锁对象仅仅起到一个标记作用，除此之外，没有其他的含义</p>
</blockquote>
<p><strong>同步代码块的作用：</strong></p>
<ul>
<li><p>只有持有锁的线程才能够进入同步代码块中</p>
</li>
<li><p>【多行代码如果加了同步代码块，那么只有一个线程可以执行了，不允许其他线程柴堆执行，就保证了多行代码的原子性】</p>
</li>
</ul>
<blockquote>
<p>线程同步会保证安全，但是牺牲了效率。</p>
</blockquote>
<h4 id="4-2-1同步代码块解决售票案例的安全问题"><a href="#4-2-1同步代码块解决售票案例的安全问题" class="headerlink" title="4.2.1同步代码块解决售票案例的安全问题"></a>4.2.1同步代码块解决售票案例的安全问题</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Ticket2 t2 = <span class="keyword">new</span> Ticket2();</span><br><span class="line">        <span class="keyword">new</span> Thread(t2).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(t2).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(t2).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 任务类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ticket2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义变量，表示票的数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">//创建对象，表示锁对象，锁对象可以是任何类型的（Object、Student、....）。仅仅起到一个标记作用</span></span><br><span class="line">    <span class="comment">//多个线程使用的锁对象，必须是唯一的。多个线程使用同一个锁</span></span><br><span class="line">    Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 要使用多个线程一起卖票，所以要在run方法中定义卖票任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//因为售票窗口要一致卖票，死循环</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//当线程执行到同步代码块是，会看一下同步代码块上还有没有锁</span></span><br><span class="line">            <span class="comment">//如果同步代码块上还有锁，此时线程会获取到锁，然后进入到同步代码块中。</span></span><br><span class="line">            <span class="comment">//如果同步代码块上面没有锁，那么此时线程会一直在这里等着获取锁。</span></span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                <span class="comment">//判断有没有票，有票在卖</span></span><br><span class="line">                <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//增加出现问题机率</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">5</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//模拟卖票操作</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">"正在卖票"</span> + count);</span><br><span class="line">                    <span class="comment">//减少票</span></span><br><span class="line">                    count--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果线程离开了同步代码块，线程会释放自己的锁[把锁还回去]</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-3-同步方法"><a href="#4-3-同步方法" class="headerlink" title="4.3 同步方法"></a>4.3 同步方法</h3><p>如果synchronized修饰方法，那么这个方法叫做同步方法，也可以解决线程安全问题。</p>
<p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 <span class="keyword">synchronized</span> 返回值类型 方法名(参数列表)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>同步方法其实就是相当于把整个方法都加了同步代码块</p>
</blockquote>
<p><strong>同步方法也是有锁的</strong>：</p>
<ul>
<li>如果同步方法是非静态的，那么锁对象是【this】</li>
<li>如果同步方法是静态的，锁对象是【类名.class】（当前类的字节码文件对象，反射阶段学习）</li>
</ul>
<h4 id="4-3-1-同步方法解决售票案例安全问题"><a href="#4-3-1-同步方法解决售票案例安全问题" class="headerlink" title="4.3.1 同步方法解决售票案例安全问题"></a>4.3.1 同步方法解决售票案例安全问题</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Ticket3 t = <span class="keyword">new</span> Ticket3();</span><br><span class="line">        <span class="keyword">new</span> Thread(t).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(t).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(t).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//任务类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ticket3</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义变量，表示票的数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//调用sell方法进行卖票</span></span><br><span class="line">            sell();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义方法，使用同步方法</span></span><br><span class="line"><span class="comment">     * 同步方法相当于把整个方法都加了同步代码块【锁对象是this】</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">5</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"正在卖票"</span> + count);</span><br><span class="line">            count--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结：</p>
<ol>
<li><p>同步代码块</p>
<ul>
<li>优点：使用起来比较灵活</li>
<li>缺点：语法不如同步方法简洁</li>
</ul>
</li>
<li><p>同步方法</p>
<ul>
<li>优点：语法简洁</li>
<li>缺点：使用起来不如同步代码块灵活。</li>
</ul>
</li>
</ol>
</blockquote>
<h3 id="4-4-Lock接口"><a href="#4-4-Lock接口" class="headerlink" title="4.4 Lock接口"></a>4.4 Lock接口</h3><p>在<code>JDK5</code>的时候，提供了Lock接口，里面有手动获取锁和释放锁的方法。</p>
<p><code>void lock()</code>:获取锁</p>
<p><code>void unlock()</code>:释放锁</p>
<blockquote>
<p>Lock是一个接口，不能直接去使用，Lock最常用的实现类是<code>ReentrantLock</code></p>
</blockquote>
<h4 id="4-4-1-Lock解决售票案例安全性问题"><a href="#4-4-1-Lock解决售票案例安全性问题" class="headerlink" title="4.4.1 Lock解决售票案例安全性问题"></a>4.4.1 Lock解决售票案例安全性问题</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Ticket4 t = <span class="keyword">new</span> Ticket4();</span><br><span class="line">        <span class="keyword">new</span> Thread(t).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(t).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(t).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//任务类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ticket4</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">//创建一个Lock对象</span></span><br><span class="line">    Lock l = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//通过方法手动获取锁</span></span><br><span class="line">            l.lock();</span><br><span class="line">            <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">5</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"正在卖票"</span> + count);</span><br><span class="line">                count--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//手动释放锁</span></span><br><span class="line">            l.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="五、并发包"><a href="#五、并发包" class="headerlink" title="五、并发包"></a>五、并发包</h2><p><code>java.util.concurrent</code>叫做<strong>并发包(简称：juc)</strong>，里面很多类都和线程有关</p>
<p>例如：</p>
<ul>
<li><code>java.util.concurrent.CopyOnWriteArrayList</code></li>
<li><code>java.util.concurrent.CopyOnWriteArraySet</code></li>
<li><code>java.util.concurrent.ConcurrentHashMap</code></li>
<li><code>java.util.concurrent.CountDownLatch</code></li>
<li><code>java.util.concurrent.CyclicBarrier</code></li>
<li><code>java.util.concurrent.Semaphore</code></li>
<li><code>java.util.concurrent.Exchanger</code></li>
<li>等等…</li>
</ul>
<p>下面就分别介绍</p>
<h3 id="5-1-CopyOnWriteArrayList"><a href="#5-1-CopyOnWriteArrayList" class="headerlink" title="5.1 CopyOnWriteArrayList"></a>5.1 CopyOnWriteArrayList</h3><p>ArrayList是线程不安全的，多个线程一起对ArrayList进行操作有可能会有安全问题。例如下面案例三个线程同时操作集合时会导致结果的不准确。</p>
<p><strong>CopyOnWriteArrayList是线程安全的，可以用它来解决这个问题。</strong></p>
<p>使用演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//任务类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个集合【ArrayList是线程不安全的，会引发线程安全问题】</span></span><br><span class="line">    <span class="comment">// List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();</span></span><br><span class="line">    <span class="comment">//CopyOnWriteArrayList是线程安全的，可以用它来解决这个问题</span></span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">5</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            list.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"添加完毕"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Task t = <span class="keyword">new</span> Task();</span><br><span class="line">        <span class="keyword">new</span> Thread(t).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(t).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(t).start();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="comment">//输出集合大小</span></span><br><span class="line">        System.out.println(t.list.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-2-CopyOnWriteArraySet"><a href="#5-2-CopyOnWriteArraySet" class="headerlink" title="5.2 CopyOnWriteArraySet"></a>5.2 CopyOnWriteArraySet</h3><p>HashSet也是线程不安全的，进行多线程操作时，会产生安全性问题</p>
<p><strong>CopyOnWriteArraySet是线程安全的，可以使用这个集合实现多线程操作。</strong></p>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建HashSet集合【HashSet线程不安全，如果多线程同时对HashSet集合进行线程操作，有可能产生安全性问题】</span></span><br><span class="line">    <span class="comment">// Set&lt;Integer&gt; set = new HashSet&lt;&gt;();</span></span><br><span class="line">    <span class="comment">//CopyOnWriteArraySet是线程安全的，我们可以使用这个集合实现多线程操作。</span></span><br><span class="line">    Set&lt;Integer&gt; set = <span class="keyword">new</span> CopyOnWriteArraySet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">5</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            set.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"添加完成！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Task t = <span class="keyword">new</span> Task();</span><br><span class="line">        <span class="keyword">new</span> Thread(t).start();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="comment">//在main线程中添加2000-3000之间的数字</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2000</span>; i &lt; <span class="number">3000</span> ; i++) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">5</span>);</span><br><span class="line">            t.set.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        System.out.println(t.set.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-3-ConcurrentHashMap"><a href="#5-3-ConcurrentHashMap" class="headerlink" title="5.3 ConcurrentHashMap"></a>5.3 ConcurrentHashMap</h3><p>HashMap是线程不安全的，如果多线程操作HashMap，很可能出现安全性问题</p>
<p>Hashtable是线程安全的，多线程操作Hashtable不会有线程安全问题，但是这个集合效率非常低，已经淘汰了</p>
<p>ConcurrentHashMap是线程安全的，效率比Hashtable高。<code>ConcurrentHashMap内部使用的 分段锁+CAS</code>。</p>
<blockquote>
<p>Hashtable:Hashtable内部使用的时synchronized来保证线程安全。在进行一个操作时锁定整个表，其他操作也同时锁定。例如：在线程1进行put操作时，线程2不能使用put添加元素，也不能使用get元素获取元素，所以Hashtable的效率低下。</p>
<p>ConcurrentHashMap:内部使用分段锁+CAS的方式来保证线程安全。在操作时只进行局部锁定，其他元素不受影响，其他线程也可以进行其他元素的操作。所以说ConcurrentHashMap的效率较高。</p>
</blockquote>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建Map集合</span></span><br><span class="line">    <span class="comment">// Map&lt;String, String&gt; map = new HashMap&lt;&gt;();</span></span><br><span class="line">    <span class="comment">// Map&lt;String, String&gt; map = new Hashtable&lt;&gt;();</span></span><br><span class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//注意键不要重复</span></span><br><span class="line">            map.put(Thread.currentThread().getName() + i, i+<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"添加完毕"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Task t = <span class="keyword">new</span> Task();</span><br><span class="line">        <span class="keyword">new</span> Thread(t).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(t).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(t).start();</span><br><span class="line">        <span class="comment">//休眠</span></span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        <span class="comment">//输出集合大小</span></span><br><span class="line">        System.out.println(t.map.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-4-CountDownLatch"><a href="#5-4-CountDownLatch" class="headerlink" title="5.4 CountDownLatch"></a>5.4 CountDownLatch</h3><p><code>CountDownLatch</code>允许一个或多个线程等待其他线程完成操作。</p>
<p>例如：线程1要打印A、C，线程2要打印B，但是要求在线程1打印完A之后，要等线程2打印B，等待线程2打印完成后，线程1继续打印C，总的来说就是要，线程1打印完A之后要等待线程2打印完B之后再继续执行。</p>
<p>CountDownLatch就可以完成上述的场景。</p>
<p>构造方法：</p>
<ul>
<li><code>CountDownLatch(int count)</code>：参数count表示计数器</li>
</ul>
<p>其他方法：</p>
<ul>
<li><code>void await()：</code>让线程等待，如果计数器变成0，那么该线程就会往下执行。</li>
<li><code>void countDown()</code>：让计数器的值减1。</li>
</ul>
<p>使用CountDownLatch完成上面两个线程打印ABC的案例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//线程A  完成打印A、C</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义CountDownLatch</span></span><br><span class="line">    CountDownLatch c;</span><br><span class="line">    <span class="comment">//提供构造方法，接收外界传递过来的CountDownLatch对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThreadA</span><span class="params">(CountDownLatch c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.c = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"A"</span>);</span><br><span class="line">            <span class="comment">//输出玩字符串A，让线程等待，知道CountDownLatch计数器变成0</span></span><br><span class="line">            c.await();</span><br><span class="line">            System.out.println(<span class="string">"C"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//线程B 打印B</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThreadB</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    CountDownLatch c;</span><br><span class="line">    <span class="comment">//提供构造方法，接收外界传递过来的CountDownLatch对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThreadB</span><span class="params">(CountDownLatch c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.c = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"B"</span>);</span><br><span class="line">        c.countDown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建CountDownLatch对象</span></span><br><span class="line">        CountDownLatch c = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//创建线程对象并执行</span></span><br><span class="line">        <span class="keyword">new</span> MyThreadA(c).start();</span><br><span class="line">        <span class="keyword">new</span> MyThreadB(c).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小贴士</p>
<ul>
<li><strong>CountDownLatch是通过一个计数器来实现的</strong>，每当一个线程完成了自己的任务后，可以调用<strong>countDown()方法让计数器-1</strong>，当<strong>计数器到达0时</strong>，等待的线程继续执行<strong>调用CountDownLatch.await()方法的线程阻塞状态解除</strong>，继续执行。</li>
</ul>
</blockquote>
<h3 id="5-5-CyclicBarrier"><a href="#5-5-CyclicBarrier" class="headerlink" title="5.5 CyclicBarrier"></a>5.5 CyclicBarrier</h3><p>CyclicBarrier的字面意思是可循环使用(Cyclic)的屏障(Barrier)。它要做的事情是，让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续运行。</p>
<p>举例：公司要召集5名员工开会，但是要等5名员工到齐之后才开始。</p>
<p>构造方法：</p>
<ul>
<li><code>CyclicBarrier(int count, Runnable barrierAction)</code>：当count个线程到达同步点【屏障】时，会执行barrierAction任务</li>
</ul>
<p>其他方法：</p>
<ul>
<li><code>int await()</code>：线程等待，并且会通知CyclicBarrier已经到达同步点【屏障】</li>
</ul>
<p>使用CyclicBarrier完成召集员工开会</p>
<ul>
<li>创建五个员工，一个开会线程任务。使用CyclicBarrier保证5名员工都到了，再开始开会任务</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//开会任务类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Meeting</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"人都到了，开始开会。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//员工线程类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义CyclicBarrier</span></span><br><span class="line">    CyclicBarrier c;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义构造方法，让外界传递一个CyclicBarrier</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PersonThread</span><span class="params">(CyclicBarrier c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.c = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//线程要执行的任务。让员工休眠随机的毫秒值后，然后再来到办公室。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//产生随机数</span></span><br><span class="line">            <span class="keyword">int</span> randomTime = <span class="keyword">new</span> Random().nextInt(<span class="number">3000</span>);</span><br><span class="line">            <span class="comment">//让线程休眠</span></span><br><span class="line">            Thread.sleep(randomTime);</span><br><span class="line">            <span class="comment">//模拟来到办公室</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"来到了办公室"</span>);</span><br><span class="line">            <span class="comment">//让线程等待，知道所有人都来到办公室(同步点)才能开会</span></span><br><span class="line">            c.await();<span class="comment">//让线程等待，并通知已经到达了同步点</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建会议任务对象</span></span><br><span class="line">        Meeting meet = <span class="keyword">new</span> Meeting();</span><br><span class="line">        <span class="comment">//创建CyclicBarrier，并指定5个线程到达同步点，再开始任务。</span></span><br><span class="line">        CyclicBarrier c = <span class="keyword">new</span> CyclicBarrier(<span class="number">5</span>,meet);</span><br><span class="line">        <span class="comment">//创建员工线程，模拟进行会议室</span></span><br><span class="line">        <span class="keyword">new</span> PersonThread(c).start();</span><br><span class="line">        <span class="keyword">new</span> PersonThread(c).start();</span><br><span class="line">        <span class="keyword">new</span> PersonThread(c).start();</span><br><span class="line">        <span class="keyword">new</span> PersonThread(c).start();</span><br><span class="line">        <span class="keyword">new</span> PersonThread(c).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用场景：CyclicBarrier可以用于多线程计算数据，最后合并计算结果的场景。</p>
<p>需求：使用两个线程读取2个文件中的数据，当两个文件中的数据都读取完毕以后，进行数据的汇总操作。</p>
</blockquote>
<h3 id="5-6-Semaphore"><a href="#5-6-Semaphore" class="headerlink" title="5.6 Semaphore"></a>5.6 Semaphore</h3><p><strong>Semaphore的主要作用是控制线程的并发数量。</strong></p>
<ul>
<li>synchronized可以起到”锁”的作用，但某个时间段内，只能有一个线程允许执行。</li>
<li>Semaphore可以设置同时允许几个线程执行。</li>
</ul>
<p>构造方法：</p>
<ul>
<li><code>Semaphore(int permits)</code>：参数表示允许几个线程执行代码</li>
</ul>
<p>其他方法：</p>
<ul>
<li><code>void acquire()</code>:获取凭证【获取锁】</li>
<li><code>void release():</code>释放凭证【释放锁】</li>
</ul>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义Semaphore类</span></span><br><span class="line">    Semaphore s;</span><br><span class="line">    <span class="comment">//定义构造方法，接收外界传递过来的Semaphore对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(Semaphore s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.s = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取凭证</span></span><br><span class="line">            s.acquire();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"进来了"</span>);</span><br><span class="line">            <span class="comment">//线程休眠</span></span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"出去了"</span>);</span><br><span class="line">            <span class="comment">//释放凭证</span></span><br><span class="line">            s.release();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Semaphore s = <span class="keyword">new</span> Semaphore(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">new</span> MyThread(s).start();</span><br><span class="line">        <span class="keyword">new</span> MyThread(s).start();</span><br><span class="line">        <span class="keyword">new</span> MyThread(s).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-7-Exchanger"><a href="#5-7-Exchanger" class="headerlink" title="5.7 Exchanger"></a>5.7 Exchanger</h3><p><strong>Exchanger(交换者)</strong>是一个用于线程间协作的工具类。</p>
<ul>
<li><strong>可以用于进行线程间的数据交换。</strong></li>
</ul>
<p>构造方法：</p>
<ul>
<li><code>Exchanger()</code>：创建一个新的 Exchanger对象。</li>
</ul>
<p>其他方法：</p>
<ul>
<li><code>V exchange(V x)</code>：参数表示借给其他类型的数据。返回值是其他线程发送过来的数据，调用该方法后线程会一直等着其他线程</li>
</ul>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//线程A</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个Exchanger</span></span><br><span class="line">    <span class="comment">//交换什么类型的数据，泛型就写什么</span></span><br><span class="line">    Exchanger&lt;String&gt; e;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThreadA</span><span class="params">(Exchanger&lt;String&gt; e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.e = e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"线程A等待来自线程B的礼物"</span>);</span><br><span class="line">            System.out.println(<span class="string">"线程A送出了自己的礼物，并收到了来自线程B的礼物："</span> + e.exchange(<span class="string">"礼物A"</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//线程B</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThreadB</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个Exchanger</span></span><br><span class="line">    <span class="comment">//交换什么类型的数据，泛型就写什么</span></span><br><span class="line">    Exchanger&lt;String&gt; e;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThreadB</span><span class="params">(Exchanger&lt;String&gt; e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.e = e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"线程B等待来自线程A的礼物"</span>);</span><br><span class="line">            System.out.println(<span class="string">"线程B送出了自己的礼物，并收到了来自线程A的礼物："</span> + e.exchange(<span class="string">"礼物B"</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Exchanger对象</span></span><br><span class="line">        Exchanger&lt;String&gt; e = <span class="keyword">new</span> Exchanger&lt;&gt;();</span><br><span class="line">        <span class="comment">//创建线程，启动</span></span><br><span class="line">        <span class="keyword">new</span> MyThreadA(e).start();</span><br><span class="line">        <span class="keyword">new</span> MyThreadB(e).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用场景：可以做数据校对工作</p>
<p>需求：比如我们需要将纸制银行流水通过人工的方式录入成电子银行流水。为了避免错误，采用AB岗两人进行录入，录入到两个文件中，系统需要加载这两个文件，并对两个文件数据进行校对，看看是否录入一致。</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>学习</tag>
        <tag>多线程</tag>
        <tag>线程安全</tag>
        <tag>并发</tag>
        <tag>并发包</tag>
      </tags>
  </entry>
  <entry>
    <title>线程池、死锁、线程状态、等待与唤醒、Lambda表达式、Stream流</title>
    <url>/2020/08/03/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E3%80%81%E6%AD%BB%E9%94%81%E3%80%81%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E3%80%81%E7%AD%89%E5%BE%85%E4%B8%8E%E5%94%A4%E9%86%92%E3%80%81Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E3%80%81Stream%E6%B5%81/</url>
    <content><![CDATA[<h2 id="一、线程池"><a href="#一、线程池" class="headerlink" title="一、线程池"></a>一、线程池</h2><p><strong>为什么使用线程池？</strong></p>
<p>如果并发的线程数量很多，并且每个线程都是执行一个时间很短的任务就结束了，这样频繁创建线程就会大大降低系统的效率，因为频繁创建线程和销毁线程对性能的影响是非常大的。</p>
<a id="more"></a>

<h3 id="1-1-线程池概念"><a href="#1-1-线程池概念" class="headerlink" title="1.1 线程池概念"></a>1.1 线程池概念</h3><p><img data-src="/image/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%BB%8B%E7%BB%8D.png" alt="线程池介绍"></p>
<p>线程池：其实就是一个容纳多个线程的容器，其中的线程可以反复使用，省去了频繁创建线程对象的操作，无需反复创建线程而消耗过多资源。</p>
<blockquote>
<p>合理利用线程池能够带来三个好处：</p>
<ol>
<li>降低资源消耗。减少了创建和销毁线程的次数，每个工作线程都可以被重复利用，可执行多个任务。</li>
<li>提高响应速度。当任务到达时，任务可以不需要的等到线程创建就能立即执行。</li>
<li>提高线程的可管理性。可以根据系统的承受能力，调整线程池中工作线线程的数目，防止因为消耗过多的内存，而把服务器累趴下(每个线程需要大约1MB内存，线程开的越多，消耗的内存也就越大，最后死机)。</li>
</ol>
</blockquote>
<h3 id="1-2-线程池的使用"><a href="#1-2-线程池的使用" class="headerlink" title="1.2 线程池的使用"></a>1.2 线程池的使用</h3><p><strong>线程池相关API</strong></p>
<ul>
<li><code>Executor</code>:接口，该接口是线程池的根接口，这个接口提供了执行线程任务的方法。<ul>
<li><code>ExecutorService</code>：是Executor的子接口，也表示线程池。里面除了提供了执行线程任务的方法，还提供了管理线程的方法。</li>
<li><code>Executors</code>：线程池的工具类，里面提供了获取线程池的方法</li>
</ul>
</li>
</ul>
<p><strong>注意：线程池不是我们自己new出来的，是通过Executors工具类获取的</strong>。</p>
<p><strong>Executors获取线程池的方法：</strong></p>
<ul>
<li><code>static ExecutorService newFixedThreadPool(int nThreads)</code>：创建一个定长的线程池，参数表示线程池的长度</li>
</ul>
<p><strong>ExecutorService表示线程池，里面有一些有关线程使用的方法</strong></p>
<ul>
<li><code>submit(Runnable task)</code>：提交线程任务并执行</li>
<li><code>shutdown()</code>:销毁线程池</li>
</ul>
<p><strong>线程池使用步骤：</strong></p>
<ol>
<li>调用<code>Executors</code>的<code>newFixedThreadPool</code>方法获取线程池</li>
<li>定义一个<code>Runnable</code>实现类，表示线程任务</li>
<li>通过线程池调用<code>submit</code>,传递<code>Runnable</code>接口的实现类对象，执行线程任务</li>
<li>销毁线程池（一般不做）</li>
</ol>
<p><strong>使用示例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//线程要执行的任务</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">":HelloWorld"</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01ThreadPool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.调用Executors的newFixedThreadPool方法获取线程池</span></span><br><span class="line">        ExecutorService threadPool = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//2.定义一个Runnable实现类，表示线程任务</span></span><br><span class="line">        Task t = <span class="keyword">new</span> Task();</span><br><span class="line">        <span class="comment">//3.通过线程池调用submit,传递Runnable接口的实现类对象，执行线程任务</span></span><br><span class="line">        threadPool.submit(t);</span><br><span class="line">        threadPool.submit(t);</span><br><span class="line">        threadPool.submit(t);</span><br><span class="line">        <span class="comment">//4.销毁线程池（一般不做）</span></span><br><span class="line">        threadPool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1-3-多线程的第三种实现方式"><a href="#1-3-多线程的第三种实现方式" class="headerlink" title="1.3 多线程的第三种实现方式"></a>1.3 多线程的第三种实现方式</h3><p>通过实现<strong>Callable接口</strong>的方式实现多线程</p>
<p><strong>步骤：</strong></p>
<ol>
<li>定义类，然后实现Callable接口</li>
<li>重写Callable接口中的call方法，在call方法中定义线程要执行的任务</li>
<li>获取一个线程池【<strong>该方式完成多线程必须要有线程池</strong>】</li>
<li>调用线程池的submit方法，传递Callable接口的实现类对象，执行线程任务</li>
<li>处理结果</li>
</ol>
<p><strong>涉及方法：</strong></p>
<ul>
<li><code>Future submit(Callable&lt;T&gt; task)</code>:提交线程任务。返回值是Future类型，表示将来线程运行后产出的结果</li>
</ul>
<p><strong>获取线程之后结构之后Future里封装的结果</strong></p>
<ul>
<li><code>V get()</code>:获取线程执行后的结果【如果线程没有执行结束，get方法会等着线程执行完毕】</li>
</ul>
<p><strong>使用演示</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallableImpl</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//输出100次helloworld</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Java"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Callable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        ExecutorService threadPool = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">        Future&lt;String&gt; result = threadPool.submit(<span class="keyword">new</span> CallableImpl());</span><br><span class="line">        System.out.println(result.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="二、死锁"><a href="#二、死锁" class="headerlink" title="二、死锁"></a>二、死锁</h2><h3 id="2-1-什么是死锁"><a href="#2-1-什么是死锁" class="headerlink" title="2.1 什么是死锁"></a>2.1 什么是死锁</h3><p><img data-src="/image/%E6%AD%BB%E9%94%81%E4%BB%8B%E7%BB%8D.png" alt="死锁介绍"></p>
<p>多个线程各自持有锁，并且等待其他线程释放锁，这种情况下就产生了死锁。</p>
<ul>
<li>在多线程程序中,使用了多把锁,造成线程之间相互等待，程序不往下走了。</li>
</ul>
<h3 id="2-2-死锁产生的条件"><a href="#2-2-死锁产生的条件" class="headerlink" title="2.2 死锁产生的条件"></a>2.2 死锁产生的条件</h3><ol>
<li><p>有多把锁</p>
</li>
<li><p>有多个线程</p>
</li>
<li><p>有同步代码块嵌套</p>
</li>
</ol>
<h3 id="2-3-死锁代码"><a href="#2-3-死锁代码" class="headerlink" title="2.3 死锁代码"></a>2.3 死锁代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//锁对象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Locks</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建两个对象，表示两个锁</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object LockA = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object LockB = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//线程A</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (Locks.LockA)&#123;</span><br><span class="line">            System.out.println(<span class="string">"MyThreadA。。。LockA"</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (Locks.LockB)&#123;</span><br><span class="line">                System.out.println(<span class="string">"MyThreadA。。。LockB"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//线程B</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThreadB</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (Locks.LockB)&#123;</span><br><span class="line">            System.out.println(<span class="string">"MyThreadB。。。LockB"</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (Locks.LockA)&#123;</span><br><span class="line">                System.out.println(<span class="string">"MyThreadB。。。LockA"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建两个线程并执行</span></span><br><span class="line">        <span class="keyword">new</span> MyThreadA().start();</span><br><span class="line">        <span class="keyword">new</span> MyThreadB().start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>死锁是有可能不产生的，可以在同步代码块上增加死循环，增加死锁的产生机率。</p>
</blockquote>
<h2 id="三、线程状态"><a href="#三、线程状态" class="headerlink" title="三、线程状态"></a>三、线程状态</h2><h3 id="3-1-线程状态概述"><a href="#3-1-线程状态概述" class="headerlink" title="3.1 线程状态概述"></a>3.1 线程状态概述</h3><p>线程拥有六种状态：</p>
<table>
<thead>
<tr>
<th>线程状态</th>
<th>状态发生的条件</th>
</tr>
</thead>
<tbody><tr>
<td>新建（NEW）</td>
<td>刚刚创建出来但是没有运行的线程处于此状态。</td>
</tr>
<tr>
<td>运行（RUNNABLE）</td>
<td>调用start方法启动后的线程处于运行状态</td>
</tr>
<tr>
<td>受阻塞（BLOCKED）</td>
<td>等待获取锁的线程处于此状态。</td>
</tr>
<tr>
<td>无限等待（WAITING）</td>
<td>当线程调用wait()方法时，线程会处于无限等待状态【没有时间的等待】</td>
</tr>
<tr>
<td>计时等待（TIMED_WAITING）</td>
<td>当线程调用wait(毫秒值)方法或sleep(毫秒值)时，线程会处于计时等待状态【有时间的等待】</td>
</tr>
<tr>
<td>退出（TERMINATED）</td>
<td>当线程执行完了自己的run方法或者调用了stop方法，会进入退出状态。</td>
</tr>
</tbody></table>
<h3 id="3-2-线程状态图"><a href="#3-2-线程状态图" class="headerlink" title="3.2 线程状态图"></a>3.2 线程状态图</h3><p>线程六种状态之间也是可以进行切换的</p>
<p>线程状态图解：</p>
<p><img data-src="/image/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E5%9B%BE.png" alt="线程状态图"></p>
<h3 id="3-3-等待与唤醒"><a href="#3-3-等待与唤醒" class="headerlink" title="3.3 等待与唤醒"></a>3.3 等待与唤醒</h3><p>在Object中，有两种方法让线程等待以及唤醒线程。</p>
<ul>
<li><code>void wait()</code>:让线程等待，直到有其他线程唤醒它</li>
<li><code>void wait(long timeout)</code>:让线程等待，知道有其他线程唤醒她，或者时间到了也会自己醒。参数是毫秒值</li>
<li><code>void notify()</code>:唤醒一个等待的线程</li>
<li><code>void notifyAll()</code>:唤醒所有等待的线程</li>
</ul>
<p>wait方法用于等待，notify方法用于唤醒，它们一起使用，一般叫做等待唤醒机制，一般用于线程间的通信。</p>
<blockquote>
<p><strong>wait和notify是Object中的方法。</strong></p>
</blockquote>
<p>wait和notify一定要放到同步代码(同步代码块或同步方法)，通过锁对象去调用。</p>
<ul>
<li>通过哪个锁调用的notify，那么唤醒的就是通过哪个锁调用wait等待的线程。</li>
</ul>
<blockquote>
<p>wait()方法和sleep()方法的区别</p>
<ul>
<li>wait:进入等待状态会释放自己的锁对象</li>
<li>sleep:执行时不会释放锁对象</li>
</ul>
</blockquote>
<h3 id="3-4-等待与睡醒案例-包子铺卖包子"><a href="#3-4-等待与睡醒案例-包子铺卖包子" class="headerlink" title="3.4 等待与睡醒案例(包子铺卖包子)"></a>3.4 等待与睡醒案例(包子铺卖包子)</h3><p>使用等待与唤醒机制实现包子铺卖包子案例</p>
<ul>
<li>包子铺线程每次只能生产一个包子，吃货线程每次吃一个。</li>
<li>包子铺生产完包子之后通知(唤醒)吃货吃包子</li>
<li>吃货吃完包子之后通知(唤醒)包子铺生产包子</li>
</ul>
<p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 包子类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaoZi</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 属性：表示包子是否存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 包子铺</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaoZiPu</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 包子铺要使用包子，包子铺使用的包子要和吃货使用的是一个，</span></span><br><span class="line"><span class="comment">     * 所以定义BaoZi类型的变量，然后通过构造方法赋值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> BaoZi baoZi;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供构造方法，接收外界传递进来的包子</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> baoZi</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaoZiPu</span><span class="params">(BaoZi baoZi)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.baoZi = baoZi;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义线程要执行的任务</span></span><br><span class="line"><span class="comment">     * 对于包子铺来说要执行的任务是要一直生产包子，等着吃货吃包子</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//一直不停的生产包子</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//包子铺和吃货都要操作包子，多个线程操作共享数据使用线程同步保证安全,baoZi是唯一的，所以可以使用baoZi当作锁对象</span></span><br><span class="line">            <span class="keyword">synchronized</span> (baoZi)&#123;</span><br><span class="line">                <span class="comment">//判断 如果有包子等着吃货吃包子</span></span><br><span class="line">                <span class="keyword">if</span> (baoZi.flag)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//等待[wait方法要通过锁对象去调用]</span></span><br><span class="line">                        baoZi.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//如果没有包子</span></span><br><span class="line">                System.out.println(<span class="string">"包子铺生产一个了包子..."</span>);</span><br><span class="line">                <span class="comment">//更改标记，表示包子存在了</span></span><br><span class="line">                baoZi.flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="comment">//唤醒吃货吃包子</span></span><br><span class="line">                baoZi.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 吃货</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChiHuo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 包子铺要使用包子，包子铺使用的包子要和吃货使用的是一个，</span></span><br><span class="line"><span class="comment">     * 所以定义BaoZi类型的变量，然后通过构造方法赋值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> BaoZi baoZi;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供构造方法，接收外界传递进来的包子</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> baoZi</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChiHuo</span><span class="params">(BaoZi baoZi)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.baoZi = baoZi;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对于吃货来说，要做的事情是一直吃包子，等着包子铺生产包子</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (baoZi)&#123;</span><br><span class="line">                <span class="comment">//判断 ，没有包子，吃货要等着包子铺生产包子</span></span><br><span class="line">                <span class="keyword">if</span> (!baoZi.flag)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        baoZi.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//如果有包子</span></span><br><span class="line">                System.out.println(<span class="string">"吃货正在吃包子..."</span>);</span><br><span class="line">                <span class="comment">//吃完,更改标记</span></span><br><span class="line">                baoZi.flag = <span class="keyword">false</span>;</span><br><span class="line">                <span class="comment">//唤醒包子铺生产包子</span></span><br><span class="line">                baoZi.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建包子对象</span></span><br><span class="line">        BaoZi baoZi = <span class="keyword">new</span> BaoZi();</span><br><span class="line">        <span class="comment">//创建包子铺和吃货线程，传递包子对象，执行线程。</span></span><br><span class="line">        <span class="keyword">new</span> ChiHuo(baoZi).start();</span><br><span class="line">        <span class="keyword">new</span> BaoZiPu(baoZi).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="四、定时器"><a href="#四、定时器" class="headerlink" title="四、定时器"></a>四、定时器</h2><p><strong>Timer类</strong>：表示定时器，可以只执行一次，也可以周期性的执行。</p>
<p>构造方法：</p>
<ul>
<li><code>Timer()</code>：创建一个新的计时器。</li>
</ul>
<p>其他方法：</p>
<ul>
<li><code>void schedule(TimerTask task, long delay)</code> :指定毫秒值【delay】后，执行任务【task】，只执行一次</li>
<li><code>void schedule(TimerTask task, Date firstTime, long period)</code>：指定毫秒值【delay】后，执行任务【task】，该方法会周期性的执行任务，每隔period毫秒执行一次。</li>
<li><code>void schedule(TimerTask task, Date time)</code>：安排定时器在指定的时间【time】执行任务【task】</li>
<li><code>void schedule(TimerTask task, Date firstTime, long period)</code>：安排定时器在指定的时间【firstTime】执行任务【task】，每隔【period】毫秒执行一次</li>
</ul>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Timer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建定时器对象</span></span><br><span class="line">        Timer t = <span class="keyword">new</span> Timer();</span><br><span class="line">        <span class="comment">//设置定时器，3秒后启动，输出一次砰砰砰</span></span><br><span class="line">        t.schedule(<span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"砰砰砰~"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">3000</span>);</span><br><span class="line">        <span class="comment">//设置定时器。5秒后启动，每隔1秒输出一次biubiubiu</span></span><br><span class="line">        t.schedule(<span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"biubiubiu~"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">5000</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置定时器，参数传递一个特点瞬间的日期对象，然后执行，只会执行一次</span></span><br><span class="line">        Calendar c = Calendar.getInstance();</span><br><span class="line">        c.set(Calendar.HOUR_OF_DAY, <span class="number">11</span>);</span><br><span class="line">        c.set(Calendar.MINUTE, <span class="number">44</span>);</span><br><span class="line">        c.set(Calendar.SECOND, <span class="number">10</span>);</span><br><span class="line">        Date date = c.getTime();</span><br><span class="line">        t.schedule(<span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"你好啊！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, date);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="五、Lambda表达式"><a href="#五、Lambda表达式" class="headerlink" title="五、Lambda表达式"></a>五、Lambda表达式</h2><h3 id="5-1-函数时编程思想"><a href="#5-1-函数时编程思想" class="headerlink" title="5.1 函数时编程思想"></a>5.1 函数时编程思想</h3><p><strong>Lambda表达式使用的是函数式编程思想，在函数式编程思想中可推导，就是可省略</strong>。</p>
<p>在数学中，函数就是有输入量、输出量的一套计算方案，也就是“拿什么东西做什么事情”。相对而言，面向对象过分强调“必须通过对象的形式来做事情”，而<strong>函数式思想则尽量忽略面向对象的复杂语法——强调做什么，而不是以什么形式做。</strong></p>
<p><strong>做什么，而不是怎么做</strong></p>
<p>我们真的希望创建一个匿名内部类对象吗？不。我们只是为了做这件事情而不得不创建一个对象。我们真正希望做的事情是：将run方法体内的代码传递给Thread类知晓。</p>
<p>传递一段代码——这才是我们真正的目的。而创建对象只是受限于面向对象语法而不得不采取的一种手段方式。那，有没有更加简单的办法？如果我们将关注点从“怎么做”回归到“做什么”的本质上，就会发现只要能够更好地达到目的，过程与形式其实并不重要。</p>
<h3 id="5-2-Lambda优化"><a href="#5-2-Lambda优化" class="headerlink" title="5.2 Lambda优化"></a>5.2 Lambda优化</h3><p>Lambda表达式的标准格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(参数类型 参数名) -&gt; &#123;</span><br><span class="line">	方法体;</span><br><span class="line">	<span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>格式：</p>
<ul>
<li>小括号中参数的写法，和普通方法的参数写法一致，如果有多个参数，逗号隔开。</li>
<li>-&gt; 是一个运算符，表示指向性动作</li>
<li>{}大括号中的内容和普通方法中的内容是一样的。</li>
</ul>
</blockquote>
<p>Lambda表达式可以让我们省去了面向对象中的这些条条框框，让我们只关注最核心的部分。</p>
<p>Lambda表达式使用的是函数式编程思想，在函数式编程思想中可推导，就是可省略。</p>
<h4 id="5-2-1-使用Lambda表达式完成多线程"><a href="#5-2-1-使用Lambda表达式完成多线程" class="headerlink" title="5.2.1 使用Lambda表达式完成多线程"></a>5.2.1 使用Lambda表达式完成多线程</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Lambda</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用Lambda简略格式完成多线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt; System.out.println(Thread.currentThread().getName()+<span class="string">"执行了"</span>)).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用Lambda标准格式完成多线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"执行了"</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-2-2-使用比较器排序对Person类对年龄进行排序"><a href="#5-2-2-使用比较器排序对Person类对年龄进行排序" class="headerlink" title="5.2.2 使用比较器排序对Person类对年龄进行排序"></a>5.2.2 使用比较器排序对Person类对年龄进行排序</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person类略....</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03Collections</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Person&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> Person(<span class="string">"张三"</span>,<span class="number">19</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Person(<span class="string">"李四"</span>,<span class="number">18</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Person(<span class="string">"王五"</span>,<span class="number">20</span>));</span><br><span class="line"></span><br><span class="line">        Collections.sort(list, <span class="keyword">new</span> Comparator&lt;Person&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Person o1, Person o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o1.getAge()-o2.getAge();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//Collections.sort(list,(Person o1, Person o2) -&gt; &#123;</span></span><br><span class="line">        <span class="comment">//    return o1.getAge()-o2.getAge();</span></span><br><span class="line">        <span class="comment">//&#125;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Collections.sort(list,(o1,o2)-&gt;o1.getAge()-o2.getAge());</span></span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-3-Lambda的省略格式"><a href="#5-3-Lambda的省略格式" class="headerlink" title="5.3 Lambda的省略格式"></a>5.3 Lambda的省略格式</h3><p><strong>省略规则：</strong></p>
<ul>
<li>小括号的参数类型可以省略</li>
<li>如果小括号能只有一个参数，小括号也可以省略</li>
<li>如果大括号内只有一条语句，那么可以省略大括号、return、以及分号。[三者要省略只能一起省略]</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04SimpleLambda</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用Lambda标准格式完成多线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"执行了"</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//使用Lambda简略格式完成多线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt; System.out.println(Thread.currentThread().getName()+<span class="string">"执行了"</span>)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-4-Lambda的省略前提"><a href="#5-4-Lambda的省略前提" class="headerlink" title="5.4 Lambda的省略前提"></a>5.4 Lambda的省略前提</h3><ul>
<li>必须要有接口(不能是抽象类)，接口中有且仅有一个需要被重写的抽象方法。</li>
<li>必须支持上下文推导。要能推导出来Lambda表达式表示的是哪个接口中的方法。<ul>
<li>最常用的上下文推导方式是使用接口作为方法参数，然后传递Lambda表达式</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>函数式接口:某个接口中有且仅有一个需要被重写的抽象方法，那么该接口也叫做函数式接口。</strong></p>
</blockquote>
<h2 id="六、Stream流"><a href="#六、Stream流" class="headerlink" title="六、Stream流"></a>六、Stream流</h2><h3 id="6-1-传统方式操作集合的弊端"><a href="#6-1-传统方式操作集合的弊端" class="headerlink" title="6.1 传统方式操作集合的弊端"></a>6.1 传统方式操作集合的弊端</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    操作要求：</span></span><br><span class="line"><span class="comment">        1. 首先筛选所有姓张的人；</span></span><br><span class="line"><span class="comment">        2. 然后筛选名字有三个字的人；</span></span><br><span class="line"><span class="comment">        3. 最后进行对结果进行打印输出。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01PrintList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"张无忌"</span>);</span><br><span class="line">        list.add(<span class="string">"周芷若"</span>);</span><br><span class="line">        list.add(<span class="string">"赵敏"</span>);</span><br><span class="line">        list.add(<span class="string">"张强"</span>);</span><br><span class="line">        list.add(<span class="string">"张三丰"</span>);</span><br><span class="line">        <span class="comment">//1. 首先筛选所有姓张的人；</span></span><br><span class="line">        <span class="comment">//定义集合，保存本次筛选后的结果</span></span><br><span class="line">        List&lt;String&gt; zhangList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//遍历集合，拿到每一个元素，判断是否以张开头</span></span><br><span class="line">        <span class="keyword">for</span> (String str : list) &#123;</span><br><span class="line">            <span class="keyword">if</span>(str.startsWith(<span class="string">"张"</span>)) &#123;</span><br><span class="line">                zhangList.add(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2. 然后筛选名字有三个字的人；</span></span><br><span class="line">        <span class="comment">//定义集合，保存本次筛选后的结果</span></span><br><span class="line">        List&lt;String&gt; threeList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//遍历上次筛选后的结果，拿到里面的每一个元素，判断是否是三个字</span></span><br><span class="line">        <span class="keyword">for</span> (String str : zhangList) &#123;</span><br><span class="line">            <span class="keyword">if</span>(str.length() == <span class="number">3</span>) &#123;</span><br><span class="line">                threeList.add(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3. 最后进行对结果进行打印输出。</span></span><br><span class="line">        <span class="keyword">for</span> (String str : threeList) &#123;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"================================="</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Stream流初体验</span></span><br><span class="line">        list.stream().filter(s -&gt; s.startsWith(<span class="string">"张"</span>)).filter(s -&gt; s.length() == <span class="number">3</span>).forEach(s -&gt; System.out.println(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>操作繁琐，需要反复的去遍历集合，创建集合存储操作之后的元素，而使用<strong>流式思想</strong>将大大简化我们的操作</p>
<h3 id="6-2-流式思想"><a href="#6-2-流式思想" class="headerlink" title="6.2 流式思想"></a>6.2 流式思想</h3><p>流式思想类似于工厂车间的“生产流水线”</p>
<p>图解：</p>
<p><img data-src="/image/%E6%B5%81%E5%BC%8F%E6%80%9D%E6%83%B3.png" alt="流式思想"></p>
<blockquote>
<p><strong>Stream流</strong>其实是一个集合元素的函数模型，他不是集合，也不是树蕨结构，其本身并不存储任何元素(或地址值)。</p>
</blockquote>
<h3 id="6-3-获取流的方式"><a href="#6-3-获取流的方式" class="headerlink" title="6.3 获取流的方式"></a>6.3 获取流的方式</h3><p>获取流有两种方式：</p>
<ul>
<li>通过Collection集合(单列集合)调用steam()方法获取</li>
<li>通过Stream中的静态方法of获取(根据数组获取)</li>
</ul>
<h4 id="6-3-1-Collection获取流"><a href="#6-3-1-Collection获取流" class="headerlink" title="6.3.1 Collection获取流"></a>6.3.1 Collection获取流</h4><p>通过单列集合的实现类调用stream()方法可以获取到流对象。</p>
<ul>
<li><code>Stream&lt;T&gt; stream()</code>:可以获取到集合对应的的流</li>
</ul>
<p>演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02CollectionGetStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"Hello"</span>);</span><br><span class="line">        list.add(<span class="string">"World"</span>);</span><br><span class="line">        list.add(<span class="string">"Java"</span>);</span><br><span class="line">        <span class="comment">//通过集合获取流</span></span><br><span class="line">        Stream&lt;String&gt; stream = list.stream();</span><br><span class="line">        <span class="comment">//输出，将流转成一个数组，通过数组的工具类转成字符串并输出</span></span><br><span class="line">        System.out.println(Arrays.toString(stream.toArray()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-3-2-Stream静态方法获取流"><a href="#6-3-2-Stream静态方法获取流" class="headerlink" title="6.3.2 Stream静态方法获取流"></a>6.3.2 Stream静态方法获取流</h4><p>在Stream中有一个静态方法of，可以通过数组获取流</p>
<ul>
<li><code>static Stream of(T... values)</code>:根据数组或者多个元素获取流</li>
</ul>
<p>演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03ArrayGetStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] strArr = &#123;<span class="string">"aa"</span>,<span class="string">"bb"</span>,<span class="string">"cc"</span>&#125;;</span><br><span class="line">        <span class="comment">//根据数组获取流</span></span><br><span class="line">        <span class="comment">//Stream&lt;String&gt; strStream = Stream.of(strArr);</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//因为of方法参数是可变参数，所以也可以根据多个元素获取流</span></span><br><span class="line">        Stream&lt;String&gt; strStream = Stream.of(<span class="string">"aa"</span>, <span class="string">"bb"</span>, <span class="string">"cc"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将流内容输出</span></span><br><span class="line">        System.out.println(Arrays.toString(strStream.toArray()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="6-4-Stream中的方法"><a href="#6-4-Stream中的方法" class="headerlink" title="6.4 Stream中的方法"></a>6.4 Stream中的方法</h3><h4 id="6-4-1-forEach方法"><a href="#6-4-1-forEach方法" class="headerlink" title="6.4.1 forEach方法"></a>6.4.1 forEach方法</h4><p>在Stream中有一个方法叫做forEach，可以对流中的元素进行逐一处理，逐一操作。</p>
<ul>
<li><code>void forEach(Consumer action)</code>:对流中的元素逐一处理，逐一操作。参数Consumer表示处理规则。<ul>
<li>参数Consumer是一个函数式接口，里面只有一个抽象方法<ul>
<li>void accept(T t):对数据进行处理、操作。</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>forEach方法的参数是Consumer函数式接口，那么我们就可以传递Lambda表达式，这个Lambda表达式表示Consumer中唯一的一个抽象方法accept的内容，accept表示对每一个元素如何处理，所以我们要在Lambda表达式中编写处理规则。</p>
</blockquote>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04ForEach</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个流对象</span></span><br><span class="line">        Stream&lt;String&gt; stream = Stream.of(<span class="string">"aa"</span>, <span class="string">"bb"</span>, <span class="string">"cc"</span>, <span class="string">"dd"</span>, <span class="string">"ee"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对流中的每一个元素进行逐一处理(输出)</span></span><br><span class="line">        <span class="comment">//Lambda表达式中的s就是流中的每一个元素</span></span><br><span class="line">        stream.forEach(s -&gt; System.out.println(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="6-4-2-count方法"><a href="#6-4-2-count方法" class="headerlink" title="6.4.2 count方法"></a>6.4.2 count方法</h4><p>在Stream中有一个方法叫做Count，可以获取流中数据元素的个数</p>
<ul>
<li><code>long count()</code>：获取流中元素的个数</li>
</ul>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06Count</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取流</span></span><br><span class="line">        Stream&lt;String&gt; stream = Stream.of(<span class="string">"aa"</span>, <span class="string">"bb"</span>, <span class="string">"cc"</span>, <span class="string">"dd"</span>, <span class="string">"ee"</span>);</span><br><span class="line">        <span class="comment">//获取流中元素个数</span></span><br><span class="line">        <span class="keyword">long</span> size = stream.count();</span><br><span class="line">        System.out.println(size);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="6-4-3-limit方法"><a href="#6-4-3-limit方法" class="headerlink" title="6.4.3 limit方法"></a>6.4.3 limit方法</h4><p>在Stream中有一个方法叫做limit，该方法可以获取流中的前几个元素</p>
<ul>
<li><code>Stream limit(long n)</code>:获取流中的前n个元素，并放入新的流中</li>
</ul>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo07Limit</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取流</span></span><br><span class="line">        Stream&lt;String&gt; stream = Stream.of(<span class="string">"aa"</span>, <span class="string">"bb"</span>, <span class="string">"cc"</span>, <span class="string">"dd"</span>, <span class="string">"ee"</span>);</span><br><span class="line">        <span class="comment">//获取流中的前3个元素</span></span><br><span class="line">        Stream&lt;String&gt; newStream = stream.limit(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//对新的流进行输出</span></span><br><span class="line">        newStream.forEach(s -&gt; System.out.println(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="6-4-4-skip方法"><a href="#6-4-4-skip方法" class="headerlink" title="6.4.4 skip方法"></a>6.4.4 skip方法</h4><p>在Stream中有一个方法叫做skip，可以跳过前几个元素，获取剩下的</p>
<ul>
<li><code>Stream&lt;T&gt; skip(long n)</code>:跳过前n个元素，获取剩下的元素放入新的流中并返回</li>
</ul>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo08Skip</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取流</span></span><br><span class="line">        Stream&lt;String&gt; stream = Stream.of(<span class="string">"aa"</span>, <span class="string">"bb"</span>, <span class="string">"cc"</span>, <span class="string">"dd"</span>, <span class="string">"ee"</span>);</span><br><span class="line">        <span class="comment">//跳过前3个元素，获取剩下的</span></span><br><span class="line">        Stream&lt;String&gt; newStream = stream.skip(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//输出新的流</span></span><br><span class="line">        newStream.forEach(s -&gt; System.out.println(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="6-4-5-filter方法"><a href="#6-4-5-filter方法" class="headerlink" title="6.4.5 filter方法"></a>6.4.5 filter方法</h4><p>在Stream中有一个方法叫做filter，可以对流中的数据进行过滤筛选</p>
<ul>
<li><code>Stream&lt;T&gt; filter(Predicate predicate)</code>:用来对流中的数据进行过滤筛选，参数返回值是过滤后新的流。predicate表示过滤规则<ul>
<li>Predicate是一个函数式接口，里面只有一个抽象方法test<ul>
<li>boolean test(T t)：判断数据是否符合规则。</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>filter方法的参数式Predicate函数式接口，所以我们可以向参数位置传递Lambda表达式，该Lambda表达式表示Predicate中唯一的一个抽象方法test的内容(重写后),在test中定义过滤的规则。</p>
<p>也就是要在Lambda表达式中编写过滤的规则，因为Lambda表达式表示的就是重写后的test。</p>
</blockquote>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05Filter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Stream&lt;String&gt; stream = Stream.of(<span class="string">"aa"</span>, <span class="string">"bbbbbb"</span>, <span class="string">"ccc"</span>, <span class="string">"dddddd"</span>, <span class="string">"ee"</span>);</span><br><span class="line">        <span class="comment">//对流中的数据进行筛选，只留下长度小于4的元素</span></span><br><span class="line">        <span class="comment">//Lambda表达式中的参数s表示的就是流中的每一个元素。如果Lambda表达式的解惑式true，元素就留下。</span></span><br><span class="line">        Stream&lt;String&gt; newStream = stream.filter(s -&gt; s.length() &lt; <span class="number">4</span>);</span><br><span class="line">        <span class="comment">//将新的流中的每一个数据输出</span></span><br><span class="line">        newStream.forEach(s -&gt; System.out.println(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="6-4-6-concat方法"><a href="#6-4-6-concat方法" class="headerlink" title="6.4.6 concat方法"></a>6.4.6 concat方法</h4><p>在Stream中有一个<strong>静态方法</strong>，可以对两个流合并，合并成一个流。</p>
<ul>
<li>static <T> Stream<T> concat(Stream a, Stream b)：将参数a和b两个流进行合并，返回值式合并后新的流</li>
</ul>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo09Concat</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建两个流</span></span><br><span class="line">        Stream&lt;String&gt; streamOne = Stream.of(<span class="string">"aa"</span>, <span class="string">"bb"</span>);</span><br><span class="line">        Stream&lt;String&gt; streamTwo = Stream.of(<span class="string">"cc"</span>, <span class="string">"dd"</span>);</span><br><span class="line">        <span class="comment">//合并流并返回</span></span><br><span class="line">        Stream&lt;String&gt; newStream = Stream.concat(streamOne, streamTwo);</span><br><span class="line"></span><br><span class="line">        newStream.forEach(s -&gt; System.out.println(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="6-4-7-map方法"><a href="#6-4-7-map方法" class="headerlink" title="6.4.7 map方法"></a>6.4.7 map方法</h4><p>Stream中的map方法：</p>
<ul>
<li><code>Stream map(Function mapper)</code>:将流中的元素映射到新的流中返回，参数Function mapper表示映射规则<ul>
<li>Function是一个函数式接口，里面只有一个抽象方法apply()<ul>
<li>R apply(T t)：对数据进行处理，然后返回处理后的结果。</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>map方法参数式函数式接口Function，所以我们可以传递Lambda表达式，这个Lambda表达式表示的是Function接口中的唯一的一个抽象方法apply的内容，我们因为要在apply中定义映射(处理)规则。</p>
<p>所以可以将映射的规则直接写在Lambda表达式中即可，因为Lambda表达式表示的就是重写后的Function中的apply方法</p>
</blockquote>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo10Map</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个Stream流</span></span><br><span class="line">        Stream&lt;String&gt; stream = Stream.of(<span class="string">"10"</span>, <span class="string">"20"</span>, <span class="string">"30"</span>);</span><br><span class="line">        <span class="comment">//将流中的每一个元素转成数字，保存到新的流中(映射)</span></span><br><span class="line">        <span class="comment">/*Stream&lt;Integer&gt; newStream = stream.map(s -&gt; &#123;</span></span><br><span class="line"><span class="comment">            return Integer.parseInt(s);</span></span><br><span class="line"><span class="comment">        &#125;);*/</span></span><br><span class="line">        <span class="comment">//简化lambda</span></span><br><span class="line">        <span class="comment">//s表示流中的每一个元素，此时是拿到原来流中的每一个字符串，然后放到新的流中返回</span></span><br><span class="line">        Stream&lt;Integer&gt; newStream = stream.map(s -&gt; Integer.parseInt(s));</span><br><span class="line">        <span class="comment">//输出新的流</span></span><br><span class="line">        newStream.forEach(num -&gt; System.out.println(num));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="6-5-Stream流的注意事项"><a href="#6-5-Stream流的注意事项" class="headerlink" title="6.5 Stream流的注意事项"></a>6.5 Stream流的注意事项</h3><ol>
<li><strong>Stream流的非终结方法返回值类型都是本身Stream类型，但是返回的并不是本身的对象。</strong></li>
<li><strong>Stream流只能一次性使用，不能多次使用。</strong></li>
</ol>
<h3 id="6-6-Stream流案例"><a href="#6-6-Stream流案例" class="headerlink" title="6.6 Stream流案例"></a>6.6 Stream流案例</h3><p>现在有两个ArrayList集合存储队伍当中的多个成员姓名，<br>使用Stream流完成下面操作：</p>
<ol>
<li>第一个队伍只要名字为3个字的成员姓名；</li>
<li>第一个队伍筛选之后只要前3个人；</li>
<li>第二个队伍只要姓张的成员姓名；</li>
<li>第二个队伍筛选之后不要前2个人；</li>
<li>将两个队伍合并为一个队伍；</li>
<li>根据姓名创建Person对象；</li>
<li>打印整个队伍的Person对象信息。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 现在有两个ArrayList集合存储队伍当中的多个成员姓名，</span></span><br><span class="line"><span class="comment"> * 使用Stream流完成下面操作</span></span><br><span class="line"><span class="comment"> * 1. 第一个队伍只要名字为3个字的成员姓名；</span></span><br><span class="line"><span class="comment"> * 2. 第一个队伍筛选之后只要前3个人；</span></span><br><span class="line"><span class="comment"> * 3. 第二个队伍只要姓张的成员姓名；</span></span><br><span class="line"><span class="comment"> * 4. 第二个队伍筛选之后不要前2个人；</span></span><br><span class="line"><span class="comment"> * 5. 将两个队伍合并为一个队伍；</span></span><br><span class="line"><span class="comment"> * 6. 根据姓名创建Person对象；</span></span><br><span class="line"><span class="comment"> * 7. 打印整个队伍的Person对象信息。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Sunmoon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo13StreamTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; one = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        one.add(<span class="string">"迪丽热巴"</span>);</span><br><span class="line">        one.add(<span class="string">"宋远桥"</span>);</span><br><span class="line">        one.add(<span class="string">"苏星河"</span>);</span><br><span class="line">        one.add(<span class="string">"老子"</span>);</span><br><span class="line">        one.add(<span class="string">"庄子"</span>);</span><br><span class="line">        one.add(<span class="string">"孙子"</span>);</span><br><span class="line">        one.add(<span class="string">"洪七公"</span>);</span><br><span class="line">        one.add(<span class="string">"欧阳锋"</span>);</span><br><span class="line">        List&lt;String&gt; two = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        two.add(<span class="string">"古力娜扎"</span>);;</span><br><span class="line">        two.add(<span class="string">"张三丰"</span>);</span><br><span class="line">        two.add(<span class="string">"张无忌"</span>);</span><br><span class="line">        two.add(<span class="string">"赵丽颖"</span>);</span><br><span class="line">        two.add(<span class="string">"张天爱"</span>);</span><br><span class="line">        two.add(<span class="string">"张二狗"</span>);</span><br><span class="line">        two.add(<span class="string">"张三"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一支队伍</span></span><br><span class="line">        Stream&lt;String&gt; streamOne = one.stream().filter(s -&gt; s.length() == <span class="number">3</span>).limit(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//第二支队伍</span></span><br><span class="line">        Stream&lt;String&gt; streamTwo = two.stream().filter(s -&gt; s.startsWith(<span class="string">"张"</span>)).skip(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//合并流</span></span><br><span class="line">        Stream.concat(streamOne,streamTwo).map(name -&gt; <span class="keyword">new</span> Person(name)).forEach(person -&gt; System.out.println(person));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="6-7-收集Stream结果"><a href="#6-7-收集Stream结果" class="headerlink" title="6.7 收集Stream结果"></a>6.7 收集Stream结果</h3><h4 id="6-7-1-收集到集合"><a href="#6-7-1-收集到集合" class="headerlink" title="6.7.1 收集到集合"></a>6.7.1 收集到集合</h4><p>将流中的元素收集到集合[也就是将流转成集合]</p>
<p>在Stream中有一个方法叫做collect，该方法可以将流中的元素收集到集合</p>
<ul>
<li><code>R collect(Collector collector)</code>：该方法可以将流中的元素收集到集合。参数collector表示收集到哪种集合</li>
</ul>
<blockquote>
<p>方法的参数类型Collector是一个接口，如果要用需要使用实现类，这个实现了不是由我们创建的，而是通过Collectors工具类获取的。</p>
<p>Collectors获取Collector对象的方法:</p>
<ul>
<li><code>static Collector toList()</code>:获取到的Collector对象表示将数据收集到List集合中</li>
<li><code>static Collector toSet()</code>:获取到的Collector对象表示将数据收集到Set集合中</li>
</ul>
</blockquote>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01StreamToCollection</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//将流中元素收集到List集合中</span></span><br><span class="line">        Stream&lt;String&gt; stream = Stream.of(<span class="string">"aa"</span>,<span class="string">"bb"</span>,<span class="string">"cc"</span>,<span class="string">"dd"</span>,<span class="string">"ee"</span>);</span><br><span class="line">        List&lt;String&gt; list = stream.collect(Collectors.toList());</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将流中数据收集到Set集合中</span></span><br><span class="line">        Stream&lt;String&gt; stream1 = Stream.of(<span class="string">"aa"</span>,<span class="string">"bb"</span>,<span class="string">"cc"</span>,<span class="string">"dd"</span>,<span class="string">"ee"</span>,<span class="string">"ff"</span>);</span><br><span class="line">        Set&lt;String&gt; set = stream1.collect(Collectors.toSet());</span><br><span class="line">        System.out.println(set);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="6-7-2-收集到数组"><a href="#6-7-2-收集到数组" class="headerlink" title="6.7.2 收集到数组"></a>6.7.2 收集到数组</h4><p>在Stream中有一个方法叫toArray，可以将流中数据收集到数组中[转成数组]</p>
<ul>
<li>Object[] toArray():将流转成数组</li>
</ul>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02StreamToArray</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Stream&lt;String&gt; stream = Stream.of(<span class="string">"aa"</span>,<span class="string">"bb"</span>,<span class="string">"cc"</span>,<span class="string">"dd"</span>,<span class="string">"ee"</span>);</span><br><span class="line">        <span class="comment">//将流转成数组</span></span><br><span class="line">        Object[] objArray = stream.toArray();</span><br><span class="line">        System.out.println(Arrays.toString(objArray));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>学习</tag>
        <tag>多线程</tag>
        <tag>线程状态</tag>
        <tag>等待与唤醒</tag>
        <tag>Lambda</tag>
        <tag>Stream</tag>
      </tags>
  </entry>
  <entry>
    <title>File类、递归、IO、字节流、字符流</title>
    <url>/2020/08/04/File%E7%B1%BB%E3%80%81%E9%80%92%E5%BD%92%E3%80%81IO%E3%80%81%E5%AD%97%E8%8A%82%E6%B5%81%E3%80%81%E5%AD%97%E7%AC%A6%E6%B5%81/</url>
    <content><![CDATA[<h2 id="一、File类"><a href="#一、File类" class="headerlink" title="一、File类"></a>一、File类</h2><p><code>java.util.File</code>类是文件和目录路径名的抽象表示，<strong>主要用于文件和目录的创建、查找和删除等操作</strong>。</p>
<h3 id="1-1-构造方法"><a href="#1-1-构造方法" class="headerlink" title="1.1 构造方法"></a>1.1 构造方法</h3><p>File类的构造方法</p>
<ul>
<li><code>File(String pathname)</code>：根据文件或文件夹得路径创建File对象</li>
<li><code>File(String parent, String child)</code>：根据父路径和子路径创建一个File对象。<ul>
<li>文件的路径：E:\file_test\aa.txt</li>
<li>父路径：E:\file_test</li>
<li>子路径：aa.txt</li>
</ul>
</li>
<li><code>File(File parent, String child)</code>：根据父路径和子路径创建一个File对象</li>
</ul>
<blockquote>
<p>小贴士：</p>
<ul>
<li><p>File可以表示计算机中的文件或文件夹</p>
</li>
<li><p>File表示的文件或文件夹可以存在，也可以不存在。</p>
</li>
</ul>
</blockquote>
<a id="more"></a>

<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02FileConstructor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// File(String pathname)：根据文件或文件夹得路径创建File对象</span></span><br><span class="line">        <span class="comment">//在Java中\是特殊字符，叫做转义字符，表示将后面的字符改变意思。</span></span><br><span class="line">        <span class="comment">//如果想要表示普通的\,需要写两个\\</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"E:\\file_test\\aa.txt"</span>);</span><br><span class="line">        System.out.println(file);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//File(String parent, String child):根据父路径和子路径创建一个File对象。</span></span><br><span class="line">        File file2 = <span class="keyword">new</span> File(<span class="string">"E:\\file_test"</span>,<span class="string">"aa.txt"</span>);</span><br><span class="line">        System.out.println(file2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//File(File parent, String child)：根据父路径和子路径创建一个File对象</span></span><br><span class="line">        File parent = <span class="keyword">new</span> File(<span class="string">"E:\\file_test"</span>);</span><br><span class="line">        File file3 = <span class="keyword">new</span> File(parent,<span class="string">"aa.txt"</span>);</span><br><span class="line">        System.out.println(file3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小贴士：</p>
<ul>
<li>直接输出对象名相当于调用对象的<code>getPath()</code>方法</li>
</ul>
</blockquote>
<h3 id="1-2-常用方法"><a href="#1-2-常用方法" class="headerlink" title="1.2 常用方法"></a>1.2 常用方法</h3><h4 id="1-2-1-获取方法"><a href="#1-2-1-获取方法" class="headerlink" title="1.2.1 获取方法"></a>1.2.1 获取方法</h4><ul>
<li><code>String getAbsolutePath()</code>：获取File对象表示的文件或文件夹的<strong>绝对路径</strong></li>
<li><code>String getPath()</code>：获取对象的路径名称，以字符串形式返回（创建File对象传递的路径字符串是什么，获取到的就是什么）</li>
<li><code>String getName()</code>：获取文件或文件夹的名字</li>
<li><code>long length()</code>：获取文件字节数大小。<strong>只能对文件使用，如果对文件夹使用，得到的是一个不确定的数字</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01GetMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        method4();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * long Length():获取文件字节数大小。</span></span><br><span class="line"><span class="comment">     * 如果此路径名表示一个目录，则返回值是不确定的。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//File file = new File("E:\\file_test");</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"E:\\file_test\\aa.txt"</span>);</span><br><span class="line">        System.out.println(file.length());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * String getName()：获取文件或文件夹的名字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"E:\\\\file_test\\\\aa.txt"</span>);</span><br><span class="line">        System.out.println(file.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * String getPath()获取路径</span></span><br><span class="line"><span class="comment">     * 如果创建File对象写的相对路径，那么获取的就是相对路径</span></span><br><span class="line"><span class="comment">     * 写的绝对路径，获取的就是绝对路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//File file = new File("E:\\file_test\\aa.txt");</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"aa.txt"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(file.getPath());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * String getAbsolutePath()：获取File对象表示的文件或文件夹的绝对路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//File file = new File("E:\\file_test\\aa.txt");</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"aa.txt"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(file.getAbsolutePath());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h5 id="绝对路径和相对路径"><a href="#绝对路径和相对路径" class="headerlink" title="绝对路径和相对路径"></a>绝对路径和相对路径</h5><ul>
<li><strong>绝对路径</strong>：是一个完整的路径，从盘符开始的路径。例如：D：\aa.txt</li>
<li><strong>相对路径</strong>：是一个简单的路径，不是从盘符开始的，在idea中，相对路径相对的是当前项目，指的是当前项目下的东西。</li>
</ul>
<blockquote>
<p><strong>如果要区分相对路径和绝对路径，只看是不是从盘符开始就可以。</strong></p>
</blockquote>
<h4 id="1-2-2-判断功能的方法"><a href="#1-2-2-判断功能的方法" class="headerlink" title="1.2.2 判断功能的方法"></a>1.2.2 判断功能的方法</h4><ul>
<li><code>public boolean exists()</code>：判断File表示的文件或文件夹是否存在</li>
<li><code>public boolean isDirectory()</code>：判断是否是文件夹</li>
<li><code>public boolean isFile()</code>：判断是否为文件</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02FileMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"E:\\file_test\\aa.txt"</span>);</span><br><span class="line">        <span class="comment">//boolean isDirectory()：判断是否是文件夹</span></span><br><span class="line">        System.out.println(<span class="string">"是否是文件夹："</span> + file.isDirectory());</span><br><span class="line">        <span class="comment">//boolean isFile()：判断是否是一个文件</span></span><br><span class="line">        System.out.println(<span class="string">"是否是文件："</span> + file.isFile());</span><br><span class="line">        <span class="comment">//boolean exists()：判断File表示的文件或文件夹是否存在</span></span><br><span class="line">        System.out.println(<span class="string">"是否存在："</span> + file.exists());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="1-2-3-创建、删除功能的方法"><a href="#1-2-3-创建、删除功能的方法" class="headerlink" title="1.2.3 创建、删除功能的方法"></a>1.2.3 创建、删除功能的方法</h4><ul>
<li><p><code>public boolean createNewFile()</code>：创建文件，如果已经存在返回false</p>
</li>
<li><p><code>public boolean delete()</code>：删除文件或目录</p>
</li>
<li><p><code>public boolean mkdir()</code>：创建文件夹，如果文件夹已经存在，返回false</p>
</li>
<li><p><code>public boolean mkdirs()</code>：创建文件夹，如果文件夹已经存在，那么创建失败【如果上级目录不存在，同时回创建上级目录】</p>
</li>
</ul>
<p><strong>创建方法：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03FileMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        method3();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * boolean mkdirs():创建文件夹，如果文件夹已经存在，那么创建失败【如果上级目录不存在，同时回创建上级目录】</span></span><br><span class="line"><span class="comment">     * 使用mkdirs创建文件夹，可以创建多级目录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"E:\\file_test\\dd\\ee"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> flag = file.mkdirs();</span><br><span class="line">        System.out.println(flag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * boolean mkdir()：创建文件夹，如果文件夹已经存在，返回false</span></span><br><span class="line"><span class="comment">     * 如果创建文件夹，上级目录不存在，那么会创建失败【不会报错】</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"E:\\file_test\\bb"</span>);</span><br><span class="line">        <span class="comment">//创建文件夹</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = file.mkdir();</span><br><span class="line">        System.out.println(flag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * boolean createNewFile():创建文件，如果已经存在返回false</span></span><br><span class="line"><span class="comment">     * 如果创建文件，上级目录不存在。那么会报错</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"E:\\file_test2\\aa.txt"</span>);</span><br><span class="line">        <span class="comment">//创建文件</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = file.createNewFile();</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        System.out.println(flag);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>删除方法：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04FileMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"E:\\file_test\\dd"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> flag = file.delete();</span><br><span class="line">        System.out.println(flag);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<ul>
<li>delete方法删除的文件夹必须是一个空文件夹，如果里面有东西是无法删除的。</li>
<li>delete方法删除的内容不走回收站</li>
</ul>
</blockquote>
<h3 id="1-3-目录的遍历"><a href="#1-3-目录的遍历" class="headerlink" title="1.3 目录的遍历"></a>1.3 目录的遍历</h3><ul>
<li><code>public String[] list()</code>：获取指定目录下所有文件和文件夹的名字，放入到字符串数组中返回。</li>
<li><code>public File[] listFiles()</code>：获取指定目录下所有文件和文件夹并放入File数组中返回。</li>
</ul>
<blockquote>
<p>注意：</p>
<ul>
<li>如果<strong>File对象</strong>表示的是一个<strong>文件</strong>，那么调用<code>listFiles</code>得到的是<strong>null</strong>值</li>
<li>如果<strong>File的对象</strong>表示的<strong>目录不存在</strong>，调用<code>listFiles</code>得到的也是<strong>null</strong>值</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05ListMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        method2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"E:\\file_test\\bb"</span>);</span><br><span class="line"></span><br><span class="line">        File[] files = file.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File file1 : files) &#123;</span><br><span class="line">            System.out.println(file1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//System.out.println(files);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"E:\\file_test"</span>);</span><br><span class="line"></span><br><span class="line">        File[] files = file.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File file1 : files) &#123;</span><br><span class="line">            System.out.println(file1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"E:\\file_test"</span>);</span><br><span class="line">        <span class="comment">//调用list方法，获取file_test目录下所有的文件和文件夹的名字</span></span><br><span class="line">        String[] fileName = file.list();</span><br><span class="line">        <span class="keyword">for</span> (String name : fileName) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="二、递归"><a href="#二、递归" class="headerlink" title="二、递归"></a>二、递归</h2><p><strong>递归：指在当前方法内调用自己的这种现象。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">	method();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<ul>
<li>递归必须要有出口【结束条件】</li>
<li>递归次数不能太多【否则会栈内存溢出】</li>
</ul>
<p>使用场景：</p>
<ul>
<li>在不确定层级的场景，可以使用递归【比如遍历文件夹，比如遍历菜单】</li>
</ul>
</blockquote>
<p>代码示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01DiDui</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//method();</span></span><br><span class="line">        printNum(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 结束条件为当number为10000时，结束方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> number</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printNum</span><span class="params">(<span class="keyword">int</span> number)</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断number是10000，结束方法</span></span><br><span class="line">        <span class="keyword">if</span> (number == <span class="number">10000</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(number);</span><br><span class="line">        number++;</span><br><span class="line">        printNum(number);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个方法会报错</span></span><br><span class="line"><span class="comment">     * 因为没有结束条件，发生栈内存溢出</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"method方法执行了！"</span>);</span><br><span class="line">        method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-1-递归练习"><a href="#2-1-递归练习" class="headerlink" title="2.1 递归练习"></a>2.1 递归练习</h3><h4 id="2-1-1-求阶乘"><a href="#2-1-1-求阶乘" class="headerlink" title="2.1.1 求阶乘"></a>2.1.1 求阶乘</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用递归求阶乘</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 求阶乘的公式：</span></span><br><span class="line"><span class="comment"> *      5! = 5 * 4 * 3 * 2 * 1</span></span><br><span class="line"><span class="comment"> * 递归的思路：</span></span><br><span class="line"><span class="comment"> *      5! = 5 * 4!</span></span><br><span class="line"><span class="comment"> *      4! = 4 * 3!</span></span><br><span class="line"><span class="comment"> *      。。。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02DiGuiTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = getFactorial(<span class="number">10</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递归求阶乘</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getFactorial</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num * getFactorial(num - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2-1-2-递归遍历目录"><a href="#2-1-2-递归遍历目录" class="headerlink" title="2.1.2 递归遍历目录"></a>2.1.2 递归遍历目录</h4><p>使用递归遍历输出指定文件夹下所有的文件夹和文件名</p>
<p>步骤：</p>
<ul>
<li>定义一个方法，该方法遍历指定的文件夹</li>
<li>调用<code>listFiles()</code>方法，获取该文件夹下所有的文件和文件夹放入到File数组中保存</li>
<li>遍历File数组，拿到里面的每一个文件夹</li>
<li>判断。<ul>
<li>如果遍历到的是文件夹，那么就应该继续遍历该文件夹，输出该文件下下的所有文件的名字</li>
<li>如果遍历到的是文件，那么直接获取文件名输出</li>
</ul>
</li>
</ul>
<p><strong>代码示例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03PrintDirTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        File dir = <span class="keyword">new</span> File(<span class="string">"E:\\file_test"</span>);</span><br><span class="line">        printDir(dir);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遍历指定文件下所有内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dir 文件目录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printDir</span><span class="params">(File dir)</span></span>&#123;</span><br><span class="line">        <span class="comment">//调用方法，获取该文件夹下所有的文件和文件夹放入到File数组中保存</span></span><br><span class="line">        File[] files = dir.listFiles();</span><br><span class="line">        <span class="comment">//遍历File数组，拿到里面的每一个文件或文件夹</span></span><br><span class="line">        <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">            <span class="comment">//判断如果是否是文件夹</span></span><br><span class="line">            <span class="keyword">if</span> (file.isDirectory())&#123;</span><br><span class="line">                <span class="comment">//是，进入文件夹继续遍历该文件夹——递归</span></span><br><span class="line">                System.out.println(file);</span><br><span class="line">                printDir(file);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//不是，输出文件名</span></span><br><span class="line">                System.out.println(file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2-1-3-递归遍历目录下的-java-文件"><a href="#2-1-3-递归遍历目录下的-java-文件" class="headerlink" title="2.1.3 递归遍历目录下的[.java]文件"></a>2.1.3 递归遍历目录下的[.java]文件</h4><p>在上面的的遍历过程中多加一次判断，当判断是文件时，在判断该文件是否以<code>.java</code>结尾，是则输出。</p>
<p><strong>代码示例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03PrintJavaFile</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File dir = <span class="keyword">new</span> File(<span class="string">"E:\\file_test"</span>);</span><br><span class="line">        printDir(dir);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遍历指定文件下所有的.java文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dir 文件目录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printDir</span><span class="params">(File dir)</span></span>&#123;</span><br><span class="line">        <span class="comment">//调用方法，获取该文件夹下所有的文件和文件夹放入到File数组中保存</span></span><br><span class="line">        File[] files = dir.listFiles();</span><br><span class="line">        <span class="comment">//遍历File数组，拿到里面的每一个文件或文件夹</span></span><br><span class="line">        <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">            <span class="comment">//判断如果是否是文件夹</span></span><br><span class="line">            <span class="keyword">if</span> (file.isDirectory())&#123;</span><br><span class="line">                <span class="comment">//是，进入文件夹继续遍历该文件夹——递归</span></span><br><span class="line">                printDir(file);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//不是，判断是不是.java结尾</span></span><br><span class="line">                <span class="keyword">if</span> (file.getName().endsWith(<span class="string">".java"</span>)) &#123;</span><br><span class="line">                    <span class="comment">//是，输出文件</span></span><br><span class="line">                    System.out.println(file);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="三、IO概述"><a href="#三、IO概述" class="headerlink" title="三、IO概述"></a>三、IO概述</h2><p>Java中的IO操作主要使用<code>java.io</code>包下的内容，进行输入、输出操作，<strong>输入</strong>也叫做<strong>读取</strong>数据，<strong>输出</strong>也叫做<strong>写出</strong>数据。</p>
<h3 id="3-1-IO的分类"><a href="#3-1-IO的分类" class="headerlink" title="3.1 IO的分类"></a>3.1 IO的分类</h3><p>根据数据的流向分为：<strong>输入流</strong>和<strong>输出流</strong>。</p>
<ul>
<li>输入流：把数据从其他设备中读取到内存中的流</li>
<li>输出流：把数据从内存写出到其他设备上的流</li>
</ul>
<p>根据数据的类型分为：<strong>字节流</strong>和<strong>字符流</strong></p>
<ul>
<li><p>字节流：以字节为单位，进行数据的读写</p>
</li>
<li><p>字符流：以字符为单位，进行数据的读写</p>
</li>
</ul>
<h3 id="3-2-IO的流向说明"><a href="#3-2-IO的流向说明" class="headerlink" title="3.2 IO的流向说明"></a>3.2 IO的流向说明</h3><p><strong>内存  <code>---输出---&gt;</code>  硬盘</strong></p>
<p><strong>硬盘  <code>---输入---&gt;</code>  内存</strong></p>
<h3 id="3-3-顶级分类"><a href="#3-3-顶级分类" class="headerlink" title="3.3 顶级分类"></a>3.3 顶级分类</h3><table>
<thead>
<tr>
<th></th>
<th>输入流</th>
<th>输出流</th>
</tr>
</thead>
<tbody><tr>
<td>字节流</td>
<td>字节输入流：<code>InputStream</code></td>
<td>字节输出流：<code>OutputStream</code></td>
</tr>
<tr>
<td>字符流</td>
<td>字符输入流：<code>Reader</code></td>
<td>字符输出流：<code>Writer</code></td>
</tr>
</tbody></table>
<h2 id="四、字节流"><a href="#四、字节流" class="headerlink" title="四、字节流"></a>四、字节流</h2><h3 id="4-1-字节输出流【OutputStream】"><a href="#4-1-字节输出流【OutputStream】" class="headerlink" title="4.1 字节输出流【OutputStream】"></a>4.1 字节输出流【OutputStream】</h3><p><code>java.io.OutputStream</code>抽象类是表示输出字节流的所有类的超类，将指定的字节(以字节为单位)信息写出到目的地。常用的子类为<code>FileOutputStream</code></p>
<h3 id="4-2-FileOutputStream类"><a href="#4-2-FileOutputStream类" class="headerlink" title="4.2 FileOutputStream类"></a>4.2 FileOutputStream类</h3><p><code>java.io.FileOutputStream</code>类是字节输出流，用于将数据写出到文件。</p>
<p>使用步骤：</p>
<ul>
<li>创建字节输出流对象，并绑定一个目的地文件</li>
<li>向文件中写数据</li>
<li>关闭流</li>
</ul>
<h4 id="4-2-1-构造方法"><a href="#4-2-1-构造方法" class="headerlink" title="4.2.1 构造方法"></a>4.2.1 构造方法</h4><ul>
<li><code>FileInputStream(File file)</code>：参数要传递一个File类型的对象，表示向该文件中写数据，</li>
<li><code>FileOutputStream(String name)</code>：参数需要传递一个字符串类型的文件路径，表示向该文件中写数据</li>
</ul>
<h4 id="4-2-2-其他方法"><a href="#4-2-2-其他方法" class="headerlink" title="4.2.2 其他方法"></a>4.2.2 其他方法</h4><ul>
<li><code>public abstract void write(int b)</code>：向文件中写一个字节</li>
<li><code>public void write(byte[] b)</code>：向文件中写一个字节数组的内容</li>
<li><code>public void write(byte[] b, int off, int len)</code>：向文件中写入字节数据的一部分，参数off表示从哪个位置开始写，len表示写多少个字节。</li>
<li><code>public void close()</code>：关闭流</li>
</ul>
<blockquote>
<p>使用流操作完成后，一定要调用<code>close()</code>方法关闭流。</p>
</blockquote>
<h4 id="4-2-3-写出字节数据"><a href="#4-2-3-写出字节数据" class="headerlink" title="4.2.3 写出字节数据"></a>4.2.3 写出字节数据</h4><p>写一个字节：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01OutputStream</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 下面代码做了哪些事情</span></span><br><span class="line"><span class="comment">         * 1.创建字节输出流对象</span></span><br><span class="line"><span class="comment">         * 2.调用操作系统的资源，创建文件cc.txt。如果该文件已经存在，就会覆盖该文件</span></span><br><span class="line"><span class="comment">         * 3.将流和文件进行绑定，以后通过该流，操作的就都是这个文件了。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        OutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="string">"E:\\file_test\\cc.txt"</span>);</span><br><span class="line"></span><br><span class="line">        os.write(<span class="number">97</span>);<span class="comment">//查询ASCII表，写入对应的字符</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果不关闭流，并且Java程序不结束，该文件会一直处于被占用的状态</span></span><br><span class="line">        <span class="comment">//关闭流(可以解决文件被占用的状态)</span></span><br><span class="line">        os.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>写字节数组：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02OutputStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        OutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="string">"xxx\\a.txt"</span>);</span><br><span class="line"></span><br><span class="line">        String s = <span class="string">"你好啊"</span>;</span><br><span class="line">        <span class="comment">//通过字符串转成一个byte数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = s.getBytes();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] arr = &#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>,<span class="number">100</span>,<span class="number">101</span>&#125;;</span><br><span class="line">        <span class="comment">//void write(byte[] b)：向文件中写一个字节数组的内容</span></span><br><span class="line">        <span class="comment">// os.write(bytes);</span></span><br><span class="line">        <span class="comment">//void write(byte[], int off, int len)：向文件中写入字节数据的一部分，</span></span><br><span class="line">        os.write(arr,<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//关闭流</span></span><br><span class="line">        os.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小贴士：</p>
<ul>
<li>ASCII码表上的字符，在计算机中都是占一个字节的。</li>
<li>在计算机中，文字是占多个字节的。<ul>
<li>使用GBK编码：一个中文占2字节</li>
<li>使用UTF-8编码：一个中文占3字节</li>
</ul>
</li>
</ul>
</blockquote>
<h4 id="4-2-4-追加写"><a href="#4-2-4-追加写" class="headerlink" title="4.2.4 追加写"></a>4.2.4 追加写</h4><p>FileOutputStream还有两个构造方法</p>
<ul>
<li><code>FileOutputStream(File file, boolean append)</code>：第二个参数append表示是否续写， true为续写,</li>
<li><code>FileOutputStream(String name, boolean append)</code>：第二个参数append表示是否续写， true为续写。</li>
</ul>
<blockquote>
<p>这两个构造方法都需要一个boolean类型的参数，传递<code>true</code>表示在原来的基础上追加写数据。</p>
<p>使用这两个构造方法创建文件输出流对象，就可以指定是否追加写数据。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03AppendWrite</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建流时传递第二个参数，类型为boolean，true为追加写，flase为创建一个新文件覆盖源文件</span></span><br><span class="line">        OutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="string">"xxx\\b.txt"</span>,<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//向文件中追加写写一句诗</span></span><br><span class="line">        os.write(<span class="string">"床前明月光"</span>.getBytes());</span><br><span class="line">        os.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-4-写换行"><a href="#4-2-4-写换行" class="headerlink" title="4.2.4 写换行"></a>4.2.4 写换行</h4><blockquote>
<p>回车符<code>\r</code>和换行符<code>\n</code>：</p>
<ul>
<li>回车符：回到一行的开头</li>
<li>换行符：下一行</li>
</ul>
<p>不同系统中的换行：</p>
<ul>
<li>Windows：每行的结尾是<strong>回车+换行</strong>，即<code>\r\n</code></li>
<li>Unix：每行结尾只有<strong>换行</strong>，即<code>\n</code></li>
<li>Mac：每行结尾是<strong>回车</strong>，即<code>\r</code>。从MacOS X开始于Unix统一。</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04WriteLine</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        OutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="string">"xxx\\c.txt"</span>);</span><br><span class="line"></span><br><span class="line">        os.write(<span class="string">"啦啦啦"</span>.getBytes());</span><br><span class="line">        <span class="comment">//写换行</span></span><br><span class="line">        os.write(<span class="string">"\r\n"</span>.getBytes());</span><br><span class="line">        os.write(<span class="string">"哈哈哈"</span>.getBytes());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-3-字节输入流【InputStream】"><a href="#4-3-字节输入流【InputStream】" class="headerlink" title="4.3 字节输入流【InputStream】"></a>4.3 字节输入流【InputStream】</h3><p><code>java.io.InputStream</code>抽象类是表示字节输入流的所有类的超类，可以读取字节信息到内存中。其中定义了字节输入流的一些共性方法：</p>
<ul>
<li><code>public void close()</code>：关闭流</li>
<li><code>int read()</code>：从文件中读取一个字节并返回，如果文件已经读取结束了，返回的是-1</li>
<li><code>int read(byte[] b)</code>：将数据读取到字节数组中，返回值是读取到的字节个数，如果文件已经读取结束了，返回-1。</li>
</ul>
<h3 id="4-4-FileInputStream类"><a href="#4-4-FileInputStream类" class="headerlink" title="4.4 FileInputStream类"></a>4.4 FileInputStream类</h3><p><code>java.io.FileInputStream</code>类是文件输入流，从文件中读取字节。</p>
<h4 id="4-4-1-构造方法"><a href="#4-4-1-构造方法" class="headerlink" title="4.4.1 构造方法"></a>4.4.1 构造方法</h4><p><code>FileInputStream(File file)</code>：参数需要传递一个File类型的文件，表示要从该文件中读取数据。</p>
<p><code>FileInputStream(String name)</code>：参数需要传递一个字符串类型的文件路径，表示要从该文件中读取数据。</p>
<blockquote>
<p>当你创建一个流对象时，必须传入一个文件路径。该路径下，如果没有该文件,会抛出<code>FileNotFoundException</code>(文件找不到异常)</p>
</blockquote>
<h4 id="4-4-2-读取字节数据"><a href="#4-4-2-读取字节数据" class="headerlink" title="4.4.2 读取字节数据"></a>4.4.2 读取字节数据</h4><p>读取字节：<code>read()</code>方法，每次可以<strong>读取一个</strong>字节的数据，提升为<strong>int类型</strong>，<strong>读</strong>取到文件<strong>末尾</strong>，返回<strong>-1</strong>，代码使用演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01InputStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//如果指定的文件不存在，会报错FileNotFoundException</span></span><br><span class="line">        InputStream is = <span class="keyword">new</span> FileInputStream(<span class="string">"xxx\\source01.txt"</span>);</span><br><span class="line">        <span class="comment">//source01.txt内容&#123;abc&#125;</span></span><br><span class="line">        <span class="comment">/*int b = is.read();</span></span><br><span class="line"><span class="comment">        System.out.println(b); //97</span></span><br><span class="line"><span class="comment">        b = is.read();</span></span><br><span class="line"><span class="comment">        System.out.println(b); //98</span></span><br><span class="line"><span class="comment">        b = is.read();</span></span><br><span class="line"><span class="comment">        System.out.println(b); //99</span></span><br><span class="line"><span class="comment">        b = is.read();</span></span><br><span class="line"><span class="comment">        System.out.println(b); //-1*/</span></span><br><span class="line">        <span class="comment">//定义变量接收每次读取到的字节</span></span><br><span class="line">        <span class="keyword">int</span> i ;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1.通过输入流调用read方法读取了一个字节</span></span><br><span class="line"><span class="comment">         * 2.将读取到的字节赋值给i</span></span><br><span class="line"><span class="comment">         * 3.判断i是否不等于-1，如果i不是-1，表示读取到了数据，进行处理</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">while</span> ((i = is.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        is.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>中文是占多个字节的，不能使用字节输入流一次读取一个字节。</p>
<p>字节流读取中文会有乱码问题，要避免。</p>
</blockquote>
<p><code>int read(byte[] b)</code>:将数据读取到字节数组中，返回值是读取到的字节个数，如果文件已经读取结束了，返回-1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02InputStream</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="comment">//source02文件内容【abcde】</span></span><br><span class="line">        InputStream is = <span class="keyword">new</span> FileInputStream(<span class="string">"xxx\\source02.txt"</span>);</span><br><span class="line">        <span class="comment">//循环改进</span></span><br><span class="line">        <span class="keyword">byte</span>[] bArr = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 循环读取</span></span><br><span class="line"><span class="comment">         * 1.通过流将数据读取到字节数组中</span></span><br><span class="line"><span class="comment">         * 2.将读取到的字节个数返回，赋值给len</span></span><br><span class="line"><span class="comment">         * 3.判断en是不是-1，不是则进入循序，进行处理</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">while</span> ((len = is.read(bArr)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(bArr,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*// int read(byte[] b):将数据读取到字节数组中，返回值是读取到的字节个数</span></span><br><span class="line"><span class="comment">        byte[] bArr = new byte[2];</span></span><br><span class="line"><span class="comment">        int count = is.read(bArr);</span></span><br><span class="line"><span class="comment">        //输出字节数组</span></span><br><span class="line"><span class="comment">        System.out.println(Arrays.toString(bArr)); //[97, 98]</span></span><br><span class="line"><span class="comment">        //将字节数组转成字符串——读到几个数据转几个</span></span><br><span class="line"><span class="comment">        System.out.println(new String(bArr,0,count));</span></span><br><span class="line"><span class="comment">        //输出字节个数</span></span><br><span class="line"><span class="comment">        System.out.println(count); //2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        count = is.read(bArr);</span></span><br><span class="line"><span class="comment">        //输出字节数组</span></span><br><span class="line"><span class="comment">        System.out.println(Arrays.toString(bArr)); //[99, 100]</span></span><br><span class="line"><span class="comment">        //将字节数组转成字符串——读到几个数据转几个</span></span><br><span class="line"><span class="comment">        System.out.println(new String(bArr,0,count));</span></span><br><span class="line"><span class="comment">        //输出字节个数</span></span><br><span class="line"><span class="comment">        System.out.println(count); //2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        count = is.read(bArr);</span></span><br><span class="line"><span class="comment">        //输出字节数组</span></span><br><span class="line"><span class="comment">        System.out.println(Arrays.toString(bArr)); //[101, 100]</span></span><br><span class="line"><span class="comment">        //将字节数组转成字符串——读到几个数据转几个</span></span><br><span class="line"><span class="comment">        System.out.println(new String(bArr,0,count));</span></span><br><span class="line"><span class="comment">        //输出字节个数</span></span><br><span class="line"><span class="comment">        System.out.println(count); //1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        count = is.read(bArr);</span></span><br><span class="line"><span class="comment">        //输出字节数组</span></span><br><span class="line"><span class="comment">        System.out.println(Arrays.toString(bArr)); //[101, 100]</span></span><br><span class="line"><span class="comment">        //将字节数组转成字符串——读到几个数据转几个</span></span><br><span class="line"><span class="comment">        System.out.println(new String(bArr,0,count));</span></span><br><span class="line"><span class="comment">        //输出字节个数</span></span><br><span class="line"><span class="comment">        System.out.println(count); //-1*/</span></span><br><span class="line"></span><br><span class="line">        is.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在上面代码读取的过程中，第三次读取时到末尾，字节数组出现[101,100]的情况，是因为数组中保存着上一次读取到的内容，字节数组的容量为<code>2</code>，<code>source02.txt</code>的内容为<code>abcde</code>,而第三次读取时只能读取到一个e(101)，覆盖掉之前数组的第一个元素c(99),之后读取就没有数据了，所以d(100)就保存了下来。在继续读取也不会有内容，byte数组的内容就不会变了。</p>
</blockquote>
<h3 id="4-6-字节流练习：复制图片"><a href="#4-6-字节流练习：复制图片" class="headerlink" title="4.6 字节流练习：复制图片"></a>4.6 字节流练习：复制图片</h3><p>文件复制的本质就是文件的读写，从源文件中读取字节，然后写到目的地文件。</p>
<p>步骤：</p>
<ul>
<li>创建字节输入流，用来读取</li>
<li>创建字节输出流，用来写</li>
<li>使用输入流读取数据，每一读取一个字节数据，读取到的数据写到目的地文件中</li>
<li>释放资源</li>
</ul>
<p>代码示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03Copy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建字节输入流，用来读取，参数传递要复制的文件路径</span></span><br><span class="line">        InputStream is = <span class="keyword">new</span> FileInputStream(<span class="string">"xxx\\1.png"</span>);</span><br><span class="line">        <span class="comment">//2.创建字节输出流，用来写,参数传递目的路径</span></span><br><span class="line">        OutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="string">"xxx\\1_new.png"</span>);</span><br><span class="line">        <span class="comment">//3.使用输入流读取数据，每一读取一个字节数据，读取到的数据写到目的地文件中</span></span><br><span class="line">        <span class="comment">//3.1创建字节数组【数组的藏毒一般是1024的整数倍】</span></span><br><span class="line">        <span class="keyword">byte</span>[] bArr = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="comment">//3.2创建变量len，接收读取到的字节个数</span></span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="comment">//开始循环读取</span></span><br><span class="line">        <span class="keyword">while</span> ((len = is.read(bArr)) !=-<span class="number">1</span>)&#123;</span><br><span class="line">            os.write(bArr,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4.释放资源</span></span><br><span class="line">        os.close();</span><br><span class="line">        is.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>流的关闭原则：先开后关，后开先关。</p>
</blockquote>
<h2 id="五、字符流"><a href="#五、字符流" class="headerlink" title="五、字符流"></a>五、字符流</h2><p>当使用字节流读取文本文件时，可能会有一个小问题。就是遇到中文字符时，可能不会显示完整的字符，那是因为一个中文字符可能占用多个字节存储。所以Java提供一些字符流类，以字符为单位读写数据，专门用于处理文本文件。</p>
<h3 id="5-1-字符输入流【Reader】"><a href="#5-1-字符输入流【Reader】" class="headerlink" title="5.1 字符输入流【Reader】"></a>5.1 字符输入流【Reader】</h3><p><code>java.io.Reader</code>抽象类是表示用于读取字符流的所有类的超类，可以读取字符信息到内存中。它定义了字符输入流的基本共性功能方法：</p>
<ul>
<li><code>public void close()</code>：关闭流。</li>
<li><code>public int read()</code>：读取一个字符并返回，如果读取到末尾了，返回-1</li>
<li><code>public int read(char[] cbuf)</code>：将数据读取到字符数组，并返回读取到的字符个数，读取到末尾返回-1</li>
</ul>
<h3 id="5-2-FileReader类"><a href="#5-2-FileReader类" class="headerlink" title="5.2 FileReader类"></a>5.2 FileReader类</h3><p><code>java.io.FileReader</code>类是读取字符文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。</p>
<h4 id="5-2-1-构造方法"><a href="#5-2-1-构造方法" class="headerlink" title="5.2.1 构造方法"></a>5.2.1 构造方法</h4><ul>
<li><code>FileReader(File file)</code>：参数需要传递File类型的文件对象，表示从该文件中读取数据</li>
<li><code>FileReader(String fileName)</code>：参数需要穿覅字符串类型的文件路径，表示从该文件中读取数据</li>
</ul>
<h4 id="5-2-2-读取字符数据"><a href="#5-2-2-读取字符数据" class="headerlink" title="5.2.2 读取字符数据"></a>5.2.2 读取字符数据</h4><p>读取字符：<code>read()</code>方法，每次可以读取一个字符的数据，提升为int类型，读取到文件末尾，返回-1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Reader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Reader r = <span class="keyword">new</span> FileReader(<span class="string">"xxx\\source03.txt"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((i = r.read())!= -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println((<span class="keyword">char</span>)i);</span><br><span class="line">        &#125;</span><br><span class="line">        r.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用字符数组读取：<code>read(char[] cbuf)</code>，每次读取多个字符到数组中，返回读取到的有效字符个数，读取到末尾时，返回-1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Reader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Reader r = <span class="keyword">new</span> FileReader(<span class="string">"day13_file&amp;io\\source03.txt"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] c = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = r.read(c)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(c,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-3-字符输出流【Writer】"><a href="#5-3-字符输出流【Writer】" class="headerlink" title="5.3 字符输出流【Writer】"></a>5.3 字符输出流【Writer】</h3><p><code>java.io.Writer</code>抽象类是表示用于写出字符流的所有类的超类，将指定的字符信息写出到目的地。它定义了字节输出流的基本共性功能方法。</p>
<ul>
<li><code>public abstract void close()</code>：关闭此输出流并释放与此流相关联的任何系统资源。</li>
<li><code>public abstract void flush()</code>：刷新此输出流并强制任何缓冲的输出字符被写出。</li>
<li><code>void write(int c)</code>：写出一个字符。</li>
<li><code>write(char[] cbuf)</code>：写字符数组</li>
<li><code>void write(char[] b, int off, int len)</code>：写字符数组的一部分。off开始，写len个</li>
<li><code>void write(String str)</code>：写出一个字符串。</li>
<li><code>void write(String str, int off, int len)</code>：写字符串的一部分。off开始，写len个</li>
</ul>
<h3 id="5-4-FileWriter类"><a href="#5-4-FileWriter类" class="headerlink" title="5.4 FileWriter类"></a>5.4 FileWriter类</h3><p><code>java.io.FileWriter</code>类是写出字符到文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。</p>
<h4 id="5-4-1-构造方法"><a href="#5-4-1-构造方法" class="headerlink" title="5.4.1 构造方法"></a>5.4.1 构造方法</h4><ul>
<li><p><code>FileWriter(File file)</code>：参数需要传递一个File类型的文件对象，表示向该文件写数据</p>
</li>
<li><p><code>FileWriter(String fileName)</code>：参数需要传递一个字符串类型的文件路径，表示向该文件写数据</p>
</li>
</ul>
<h4 id="5-4-2-基本使用"><a href="#5-4-2-基本使用" class="headerlink" title="5.4.2 基本使用"></a>5.4.2 基本使用</h4><p>步骤：</p>
<ol>
<li>创建字符输出流</li>
<li>写数据</li>
<li>刷新</li>
<li>关闭流</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03Writer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建字符输出流</span></span><br><span class="line">        Writer w = <span class="keyword">new</span> FileWriter(<span class="string">"xxx\\ff.txt"</span>);</span><br><span class="line">        <span class="comment">//开始写数据</span></span><br><span class="line">        <span class="comment">//void write(String str):写字符串</span></span><br><span class="line">        w.write(<span class="string">"hello"</span>);</span><br><span class="line">        <span class="comment">//void write(String str, int off, int len):写字符串的一部分。off开始，写len个</span></span><br><span class="line">        w.write(<span class="string">"worldjava"</span>,<span class="number">0</span>,<span class="number">5</span>);</span><br><span class="line">        <span class="comment">//void write(int c):写单个字符</span></span><br><span class="line">        w.write(<span class="string">'A'</span>);</span><br><span class="line">        <span class="comment">//void write(char[] cbuf):写字符数组</span></span><br><span class="line">        w.write(<span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;);</span><br><span class="line">        <span class="comment">//void write(char[] cbuf, int off, int len):写字符数组的一部分。off开始，写len个</span></span><br><span class="line">        w.write(<span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>&#125;,<span class="number">3</span>,<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//刷新关闭流</span></span><br><span class="line">        w.flush();</span><br><span class="line">        w.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>只有字符输出流必须要刷新</p>
</blockquote>
<h4 id="5-4-3-关闭和刷新"><a href="#5-4-3-关闭和刷新" class="headerlink" title="5.4.3 关闭和刷新"></a>5.4.3 关闭和刷新</h4><p>因为内置缓冲区的原因，如果不关闭输出流，无法写出字符到文件中。但是关闭的流对象，是无法继续写出数据的。如果我们既想写出数据，又想继续使用流，就需要flush方法了。</p>
<ul>
<li><code>flush()</code>：刷新缓冲区，流对象可以继续使用。</li>
<li><code>close()</code>：关闭流，释放系统资源。关闭前会刷新缓冲区。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02FlushAndClose</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Writer w = <span class="keyword">new</span> FileWriter(<span class="string">"day13_file&amp;io\\ee.txt"</span>);</span><br><span class="line">        w.write(<span class="string">"你好"</span>);</span><br><span class="line"></span><br><span class="line">        w.flush();</span><br><span class="line">        w.write(<span class="string">"你也蛮好的"</span>);</span><br><span class="line">        w.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>注意：</p>
<ul>
<li>字符流，只能操作文本文件，不能操作图片，视频等非文本文件。</li>
<li>当我们单纯读或者写文本文件时使用字符流其他情况使用字节流</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>学习</tag>
        <tag>IO流</tag>
        <tag>递归</tag>
        <tag>File类</tag>
      </tags>
  </entry>
  <entry>
    <title>Propertoes类、缓冲流、转换流、序列化流、装饰者模式、commons-io工具包</title>
    <url>/2020/08/06/Propertoes%E7%B1%BB%E3%80%81%E7%BC%93%E5%86%B2%E6%B5%81%E3%80%81%E8%BD%AC%E6%8D%A2%E6%B5%81%E3%80%81%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81%E3%80%81%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F%E3%80%81commons-io%E5%B7%A5%E5%85%B7%E5%8C%85/</url>
    <content><![CDATA[<h2 id="一、IO资源的处理"><a href="#一、IO资源的处理" class="headerlink" title="一、IO资源的处理"></a>一、IO资源的处理</h2><h3 id="1-1-JDK7之前的处理"><a href="#1-1-JDK7之前的处理" class="headerlink" title="1.1 JDK7之前的处理"></a>1.1 JDK7之前的处理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Exception</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Writer w = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">             w = <span class="keyword">new</span> FileWriter(<span class="string">"xxx\\file01.txt"</span>);</span><br><span class="line">             w.write(<span class="string">"你好"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//判断w不是null，那么才表示流成功创建了，那么才关闭</span></span><br><span class="line">                <span class="keyword">if</span> (w != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    w.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="1-2-JDK7的处理"><a href="#1-2-JDK7的处理" class="headerlink" title="1.2 JDK7的处理"></a>1.2 JDK7的处理</h3><p>在JDK7的时候，多了一种try…with…resource语句，可以快捷的处理IO流中的异常以及施放资源的问题。</p>
<p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>(创建流对象的代码)&#123;</span><br><span class="line">	</span><br><span class="line">&#125; <span class="keyword">catch</span>(类名 变量名)&#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在try小括号中创建的流对象，只要流对象创建出来了，肯定会自动调用close方法，关闭流。</p>
<p>小括号中也可以创建多个对象，多个对象之间用分号隔开。</p>
</blockquote>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Exception</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//小括号中创建的流对象，整个try...catch执行完后，会自动调用close方法</span></span><br><span class="line">        <span class="keyword">try</span> (Writer w = <span class="keyword">new</span> FileWriter(<span class="string">"xxx\\file02.txt"</span>);)&#123;</span><br><span class="line">            w.write(<span class="string">"hello"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小贴士：</p>
<p>在try小括号中创建的对象，必须实现AutoCloseable接口。</p>
</blockquote>
<h2 id="二、Properties类-属性集"><a href="#二、Properties类-属性集" class="headerlink" title="二、Properties类(属性集)"></a>二、Properties类(属性集)</h2><p>Properties是一个双列集合，也叫做属性集。</p>
<p>特点：</p>
<ul>
<li>Properties实现类Map接口，拥有Map接口中所有的方法</li>
<li>Properties没有泛型，键和值都是字符串</li>
<li>Properties可以从流中(文件中)中读取键值对</li>
</ul>
<p>构造方法：</p>
<ul>
<li><code>Properties()</code>:空参的构造方法</li>
</ul>
<p>其他方法：</p>
<ul>
<li><code>Object setProperty(String key, String value)</code>:添加键值对</li>
<li><code>String getProperty(String key)</code>:根据键获取值</li>
<li><code>Set&lt;String&gt; stringPropertyNames()</code>：获取所有键并放入Set集合中返回</li>
</ul>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Properties</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Properties p = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//添加键值对</span></span><br><span class="line">        p.setProperty(<span class="string">"s001"</span>,<span class="string">"hehe"</span>);</span><br><span class="line">        p.setProperty(<span class="string">"s002"</span>,<span class="string">"haha"</span>);</span><br><span class="line">        p.setProperty(<span class="string">"s003"</span>,<span class="string">"heihei"</span>);</span><br><span class="line">        <span class="comment">//输出Properties</span></span><br><span class="line">        System.out.println(p);</span><br><span class="line">        <span class="comment">//根据键获取值</span></span><br><span class="line">        System.out.println(p.getProperty(<span class="string">"s001"</span>));</span><br><span class="line">        System.out.println(p.getProperty(<span class="string">"s002"</span>));</span><br><span class="line">        <span class="comment">//Set&lt;String&gt; stringPropertyNames()：获取所有键并放入Set集合中返回</span></span><br><span class="line">        Set&lt;String&gt; keys = p.stringPropertyNames();</span><br><span class="line">        <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">            System.out.println(key + <span class="string">"-"</span> + p.getProperty(key));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-1-Properties有关流的方法"><a href="#2-1-Properties有关流的方法" class="headerlink" title="2.1 Properties有关流的方法"></a>2.1 Properties有关流的方法</h3><p>Properties有关流的方法，<strong>可以从文件中获取键值对</strong>：</p>
<ul>
<li><code>void load(InputStream inStream)</code>：参数需要传递字节输入流</li>
<li><code>void load(Reader reader)</code>：参数需要传递字符输入流</li>
</ul>
<blockquote>
<p>load方法可以传递输入流，该输入流绑定的文件是什么，就可以从该文件中加载(读取)键值对</p>
</blockquote>
<p><strong>使用load方法读取文件的要求</strong>：</p>
<ul>
<li>文件一般以<code>【.properties】</code>结尾(<strong>软性要求</strong>，properties文件也叫做配置文件)</li>
<li>文件中的键值对必须按照指定格式存放(<strong>硬性要求</strong>)<ul>
<li>例如：<ul>
<li>键 = 值(username = jack)</li>
<li>键和值之间用=号隔开，每个键值对换一行</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">文件内容：</span><br><span class="line">username = JJ</span><br><span class="line">password = <span class="number">123456</span></span><br><span class="line">gender = man</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Properties</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建Properties对象</span></span><br><span class="line">        Properties p = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//创建输入流，绑定文件</span></span><br><span class="line">        InputStream is = <span class="keyword">new</span> FileInputStream(<span class="string">"xxx\\prop.properties"</span>);</span><br><span class="line">        <span class="comment">//在家文件到Properties中</span></span><br><span class="line">        p.load(is);</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        System.out.println(p);</span><br><span class="line">        <span class="comment">//关闭流</span></span><br><span class="line">        is.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="三、ResourceBundle"><a href="#三、ResourceBundle" class="headerlink" title="三、ResourceBundle"></a>三、ResourceBundle</h2><p>除了Properties之外，在Java中还提供了<strong>ResourceBundle用来读取properties配置文件</strong>中的内容。</p>
<p><strong>ResourceBundle操作更简便。</strong></p>
<p>ResourceBundle是一个<strong>抽象类</strong>，如果要用，需要使用子类，他的子类对象不是需要我们new的，而是要通过ResourceBundle的<strong>静态方法获取</strong>的。</p>
<p><strong>ResourceBundle获取对象的方法</strong>：</p>
<ul>
<li><code>static ResourceBundle getBundle(String baseName)</code>：获取ResourceBundle子类对象，参数表示要操作的配置文件</li>
</ul>
<blockquote>
<p>ResourceBundle对<strong>配置文件位置</strong>的要求：</p>
<ul>
<li>ResourceBundle读取的properties文件必须放在src目录下，在调用getBundle传递文件路径时，不要带扩展名。</li>
</ul>
</blockquote>
<p><strong>ResourceBundle其他方法</strong>：</p>
<ul>
<li><code>String getString(Stirring key)</code>：根据键获取值。</li>
</ul>
<p><strong>使用示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01ResourceBundle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//获取ResourceBundle对象，参数传递配置文件名。</span></span><br><span class="line">        ResourceBundle bundle = ResourceBundle.getBundle(<span class="string">"target"</span>);</span><br><span class="line">        System.out.println(bundle.getString(<span class="string">"username"</span>));</span><br><span class="line">        System.out.println(bundle.getString(<span class="string">"password"</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="四、缓冲流"><a href="#四、缓冲流" class="headerlink" title="四、缓冲流"></a>四、缓冲流</h2><h3 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h3><p>缓冲流,也叫高效流，是对4个基本的FileXxx流的增强，所以也是4个流，按照数据类型分类：</p>
<ul>
<li>字节缓冲流<ul>
<li>字节输入缓冲流：<code>BufferedInputStream</code></li>
<li>字节输出缓冲流：<code>BufferedOutputStream</code></li>
</ul>
</li>
<li>字符缓冲流<ul>
<li>字符输入缓冲流：<code>BufferedReader</code></li>
<li>字符输出缓冲流：<code>BufferedWriter</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>小贴士：</p>
<ul>
<li>缓冲流的特点是效率高，缓冲流内部有一个缓冲区，可以提高效率【缓冲区使用的就是数组】</li>
<li>缓冲流本身并不具备读或写的功能，它的作用是给其他流提供加速</li>
</ul>
</blockquote>
<h3 id="4-2-字节缓冲流"><a href="#4-2-字节缓冲流" class="headerlink" title="4.2 字节缓冲流"></a>4.2 字节缓冲流</h3><p><strong>构造方法：</strong></p>
<ul>
<li><code>BufferedInputStream(InputStream in)</code>：参数需要传递一个字节输入流</li>
<li><code>BufferedOutputStream(OutputStream out)</code>：参数需要传递一个字节输出流</li>
</ul>
<p><strong>字节缓冲流的使用方式、方法和字节流的方法相同。</strong></p>
<p><strong>效率对比及使用示例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用普通字节流一次读写一个字节的方式复制文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Copy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStream is = <span class="keyword">new</span> FileInputStream(<span class="string">"xxx\\1.png"</span>);</span><br><span class="line">        OutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="string">"xxx\\1_new.png"</span>);</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">while</span> ((i = is.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">            os.write(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"共耗时:"</span> + (end-start));<span class="comment">//大概需要15000ms完成复制</span></span><br><span class="line">        os.close();</span><br><span class="line">        is.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用字节缓冲流一次读取一个字节的方式复制文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02BufferedStream</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"xxx\\1.png"</span>));</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"xxx\\1_new.png"</span>));</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">while</span> ((i = bis.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">            bos.write(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(end-start);<span class="comment">//大概需要100ms完成复制</span></span><br><span class="line">        bos.close();</span><br><span class="line">        bis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用字节缓冲流结合字节数组的方式复制文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03BufferedStream</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"xxx\\1.png"</span>));</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"xxx\\1_new.png"</span>));</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">while</span> ((len = bis.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            bos.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(end-start);<span class="comment">//大概需要10ms完成复制</span></span><br><span class="line">        bos.close();</span><br><span class="line">        bis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>对比上面三种方式复制文件，可以得知，效率是越来愈高的，使用缓冲流进行文件的操作可以很大程度的提高效率。</p>
</blockquote>
<h3 id="4-3-字符缓冲流"><a href="#4-3-字符缓冲流" class="headerlink" title="4.3 字符缓冲流"></a>4.3 字符缓冲流</h3><p>构造方法：</p>
<ul>
<li><code>BufferedReader(Reader in)</code>：参数需要传递字符输入流</li>
<li><code>BufferedWriter(Writer out)</code>：参数需要传递字符输出流</li>
</ul>
<p><strong>字节缓冲流的使用方式、方法和字节流的方法相同。</strong></p>
<p>字符缓冲流中的特有方法：</p>
<ul>
<li>在BufferedWriter里面有一个方法newLine(),可以实现跨平台的换行<ul>
<li><code>void newLine()</code>:写一个换行，这个换行是跨平台的</li>
</ul>
</li>
<li>在BufferedReader里面有一个方法readLine()，可以读一行数据<ul>
<li><code>String readLine()</code>：一次读取一行数据，并以字符串形式返回读取到的数据。如果已经读取结束了，返回值是null</li>
</ul>
</li>
</ul>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04BufferedStream</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        method1();</span><br><span class="line">        method2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * String readLine():一次读取一行数据，并以字符串形式返回读取到的数据。如果已经读取结束了，返回值是null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"xxx\\file03.txt"</span>));</span><br><span class="line">        String s;</span><br><span class="line">        <span class="keyword">while</span> ((s = br.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * void newLine():写一个换行，这个换行是跨平台的</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"xxx\\file03.txt"</span>));</span><br><span class="line">        bw.write(<span class="string">"窗前明月光，"</span>);</span><br><span class="line">        bw.newLine();</span><br><span class="line">        bw.write(<span class="string">"疑是地上霜。"</span>);</span><br><span class="line">        bw.flush();</span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-4-练习——文本排序"><a href="#4-4-练习——文本排序" class="headerlink" title="4.4 练习——文本排序"></a>4.4 练习——文本排序</h3><p>需求：使用缓冲流读取文章内容依据文章开始的序号完成下面文章内容的排序，然后写入到新文件中。(下面的文字内容由序号开始每段内容单独占一行)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span>.侍中、侍郎郭攸之、费祎、董允等，此皆良实，志虑忠纯，是以先帝简拔以遗陛下。愚以为宫中之事，事无大小，悉以咨之，然后施行，必得裨补阙漏，有所广益。</span><br><span class="line"><span class="number">8</span>.愿陛下托臣以讨贼兴复之效，不效，则治臣之罪，以告先帝之灵。若无兴德之言，则责攸之、祎、允等之慢，以彰其咎；陛下亦宜自谋，以咨诹善道，察纳雅言，深追先帝遗诏，臣不胜受恩感激。</span><br><span class="line"><span class="number">4</span>.将军向宠，性行淑均，晓畅军事，试用之于昔日，先帝称之曰能，是以众议举宠为督。愚以为营中之事，悉以咨之，必能使行阵和睦，优劣得所。</span><br><span class="line"><span class="number">2</span>.宫中府中，俱为一体，陟罚臧否，不宜异同。若有作奸犯科及为忠善者，宜付有司论其刑赏，以昭陛下平明之理，不宜偏私，使内外异法也。</span><br><span class="line"><span class="number">1</span>.先帝创业未半而中道崩殂，今天下三分，益州疲弊，此诚危急存亡之秋也。然侍卫之臣不懈于内，忠志之士忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气，不宜妄自菲薄，引喻失义，以塞忠谏之路也。</span><br><span class="line"><span class="number">9</span>.今当远离，临表涕零，不知所言。</span><br><span class="line"><span class="number">6</span>.臣本布衣，躬耕于南阳，苟全性命于乱世，不求闻达于诸侯。先帝不以臣卑鄙，猥自枉屈，三顾臣于草庐之中，咨臣以当世之事，由是感激，遂许先帝以驱驰。后值倾覆，受任于败军之际，奉命于危难之间，尔来二十有一年矣。</span><br><span class="line"><span class="number">7</span>.先帝知臣谨慎，故临崩寄臣以大事也。受命以来，夙夜忧叹，恐付托不效，以伤先帝之明，故五月渡泸，深入不毛。今南方已定，兵甲已足，当奖率三军，北定中原，庶竭驽钝，攘除奸凶，兴复汉室，还于旧都。此臣所以报先帝而忠陛下之职分也。至于斟酌损益，进尽忠言，则攸之、祎、允之任也。</span><br><span class="line"><span class="number">5</span>.亲贤臣，远小人，此先汉所以兴隆也；亲小人，远贤臣，此后汉所以倾颓也。先帝在时，每与臣论此事，未尝不叹息痛恨于桓、灵也。侍中、尚书、长史、参军，此悉贞良死节之臣，愿陛下亲之信之，则汉室之隆，可计日而待也。</span><br></pre></td></tr></table></figure>

<p>代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建集合，用来保存读取到的每行课文。</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//2.创建字符输入缓冲流，用来读取。</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"xxx\\in.txt"</span>));</span><br><span class="line">        String line;</span><br><span class="line">        <span class="comment">//3.开始读取，一次读取一行</span></span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//4.将读取到的的这行数据添加到集和中</span></span><br><span class="line">            list.add(line);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.关闭流</span></span><br><span class="line">        br.close();</span><br><span class="line">        <span class="comment">//6.根据首个字符对集合中的内容进行排序</span></span><br><span class="line">        Collections.sort(list, (o1, o2) -&gt; o1.charAt(<span class="number">0</span>) - o2.charAt(<span class="number">0</span>));</span><br><span class="line">        <span class="comment">//7.创建字符输出缓冲流，用来写</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"xxx\\out.txt"</span>));</span><br><span class="line">        <span class="comment">//8.遍历集合，拿到集合中的每一个元素</span></span><br><span class="line">        <span class="keyword">for</span> (String strLine : list) &#123;</span><br><span class="line">            <span class="comment">//9.将遍历到的元素写到目的地文件</span></span><br><span class="line">            bw.write(strLine);</span><br><span class="line">            <span class="comment">//10.换行</span></span><br><span class="line">            bw.newLine();</span><br><span class="line">            <span class="comment">//11.刷新流</span></span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//12.关闭流</span></span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="五、转换流"><a href="#五、转换流" class="headerlink" title="五、转换流"></a>五、转换流</h2><h3 id="5-1-字符编码和字符集"><a href="#5-1-字符编码和字符集" class="headerlink" title="5.1 字符编码和字符集"></a>5.1 字符编码和字符集</h3><p>编码和解码：</p>
<ul>
<li>编码：字符 -&gt; 字节</li>
<li>解码；字节 -&gt; 字符</li>
</ul>
<p>字符编码Character Encoding : 就是一套自然语言的字符与二进制数之间的对应规则。</p>
<p>字符集Charset：也叫编码表。是一个系统支持的所有字符的集合，包括各国家文字、标点符号、图形符号、数字等。</p>
<table>
<thead>
<tr>
<th>字符集</th>
<th>占用字节数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>ASCII码表</td>
<td>1字节</td>
<td>有128个英文字母数字以及标点符号。</td>
</tr>
<tr>
<td>ISO8859-1(Latin)</td>
<td>1字节</td>
<td>有256个内容。包含了ASCII码表的内容以及拉丁文。</td>
</tr>
<tr>
<td>GB2312(1980)</td>
<td>1或2字节</td>
<td>支持六千多个汉字或者字符</td>
</tr>
<tr>
<td>BIG5</td>
<td>1或2字节</td>
<td>支持繁体字</td>
</tr>
<tr>
<td>GBK</td>
<td>1或2字节</td>
<td>支持两万多汉字或者字符。</td>
</tr>
</tbody></table>
<p>国际标准码表(unicode)：unicode中可以保存任何国家的任何语言，在unicode中每个字符都是使用两个字节保存的。在unicode8.0版本，甚至保存emoji。</p>
<p>万国码：UTF-8</p>
<ul>
<li>UTF-32：每一个字符都使用4个字节保存。</li>
<li>UTF-16：每一个字符都使用2或3或4个字节保存。</li>
<li>UTF-8：每一个字符都使用1或2或3或4个字节保存。</li>
</ul>
<blockquote>
<p>在GBK中每一个汉字占2个字节。</p>
<p>在UTF-8编码中每一个汉字占3个字节。</p>
</blockquote>
<blockquote>
<p>小贴士：</p>
<ul>
<li>在IDEA中，使用的默认编码是UTF-8</li>
<li>在windows中， 使用的默认编码是UTF-8（最近win10更新，新版本的win10默认编码已经变成utf-8）</li>
</ul>
</blockquote>
<h3 id="5-2-编码引出的问题"><a href="#5-2-编码引出的问题" class="headerlink" title="5.2 编码引出的问题"></a>5.2 编码引出的问题</h3><p>下面代码使用FileReader读取GBK文件的内容。</p>
<p>FileReader会使用idea默认编码UTF-8方式进行读取，此时文件的编码是GBK，两种编码不一致，于是产生了问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01FileReader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"E:\\file_test\\cc.txt"</span>);</span><br><span class="line">        <span class="keyword">int</span> read = fr.read();</span><br><span class="line">        System.out.println((<span class="keyword">char</span>) read);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果要指定编码进行读取，那么就可以使用转换流去做。</p>
</blockquote>
<h3 id="5-3-InputStreamReader"><a href="#5-3-InputStreamReader" class="headerlink" title="5.3 InputStreamReader"></a>5.3 InputStreamReader</h3><p><strong>InputStreamReader</strong>是转换流，用来<strong>读</strong>，可以按照<strong>指定编码</strong>将文件中的数据读取到Java程序中。</p>
<ul>
<li>InputStreamReader是字符流，会以字符为单位进行读取</li>
</ul>
<p>构造方法：</p>
<ul>
<li><code>InputStreamReader(InputStream in)</code>：参数需要传递一个字节输入流，使用该构造方法创建的转换流对象会使用idea默认的编码(utf-8)进行读取</li>
<li><code>InputStreamReader(InputStream in , String charsetName)</code>：第一个参数是字节输入流，第二个蚕食是编码方式。可以指定编码进行读取</li>
</ul>
<p><strong>InputStreamReader是使用方式和字符流的使用方式一样</strong></p>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02InoutStreamReader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// readGBK();</span></span><br><span class="line">        readUTF8();</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//读取utf-8文件</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readUTF8</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// InputStreamReader isr = new InputStreamReader(new FileInputStream("E:\\file_test\\file02-utf8.txt"),"utf8");</span></span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">"E:\\file_test\\file02-utf8.txt"</span>));</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">while</span> ((i = isr.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println((<span class="keyword">char</span>) i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//读取GBK文件</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readGBK</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">"E:\\file_test\\file01-gbk.txt"</span>),<span class="string">"GBK"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">while</span> ((i = isr.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println((<span class="keyword">char</span>) i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-4-OutputStreamWriter"><a href="#5-4-OutputStreamWriter" class="headerlink" title="5.4 OutputStreamWriter"></a>5.4 OutputStreamWriter</h3><p><strong>OutputStreamWriter</strong>是一个转换流，用来<strong>写</strong>，可以将Java程序中的数据按照<strong>指定编码</strong>写到文件中。</p>
<ul>
<li>OutputStreamWriter是一个字符流，会以字符为单位写数据</li>
</ul>
<p>构造方法：</p>
<ul>
<li><code>OutputStreamWriter(OutputStream out)</code>:参数要传递字节输出流。会使用idea默认的编码(utf-8)进行写操作</li>
<li><code>OutputStreamWriter(OutputStream out, String charsetName)</code>:第一个参数要传递字节输出流，第二个参数表示编码方式。会使用指定的编码进行写操作</li>
</ul>
<p><strong>OutputStreamWriter和字符流写数据的方法一样</strong></p>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03OutputStreamWriter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        writeGBK();</span><br><span class="line">        writeUTF8();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeUTF8</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream("E:\\file_test\\writeUTF8.txt"),"UTF8");</span></span><br><span class="line">        OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"E:\\file_test\\writeUTF8.txt"</span>));</span><br><span class="line">        osw.write(<span class="string">"你好"</span>);</span><br><span class="line">        osw.flush();</span><br><span class="line">        osw.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeGBK</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"E:\\file_test\\writeGBK.txt"</span>),<span class="string">"GBK"</span>);</span><br><span class="line">        osw.write(<span class="string">"你好"</span>);</span><br><span class="line">        osw.flush();</span><br><span class="line">        osw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="六、序列化"><a href="#六、序列化" class="headerlink" title="六、序列化"></a>六、序列化</h2><h3 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a>6.1 概述</h3><p><strong>序列化</strong>：把对象信息持久化存储到硬盘中，保存为一个文件。</p>
<p><strong>反序列化</strong>：读取保存在硬盘中的文件，进行反序列化，获取对象的信息。</p>
<h3 id="6-2-ObjectOutputStream类"><a href="#6-2-ObjectOutputStream类" class="headerlink" title="6.2 ObjectOutputStream类"></a>6.2 ObjectOutputStream类</h3><p><strong>ObjectOutputStream</strong>是<strong>序列化流</strong>，可以将Java程序中的对象序列化到文件中。</p>
<p>构造方法：</p>
<ul>
<li><code>ObjectOutputStream(OutputStream out)</code>：参数需要传递字节输出流</li>
</ul>
<p>ObjectOutputStream写对象的方法【<strong>特有方法</strong>】</p>
<ul>
<li><code>void writeObject(Object obj)</code>：向文件中写对象</li>
</ul>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01ObjectOutputStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"xxx\\file01-obj.txt"</span>));</span><br><span class="line">        Person p = <span class="keyword">new</span> Person(<span class="string">"张三"</span>,<span class="number">15</span>);</span><br><span class="line">        oos.writeObject(p);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Person类略....</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意!!!</p>
<ul>
<li>想要进行序列化的接口必须实现Serializable接口</li>
</ul>
<p>Serializable：序列化接口</p>
<ul>
<li>Serializable里面没有任何东西，这个接口只是起到一个标记作用，必须实现接口，那么类的对象才可以被序列化，才可以写到文件中</li>
</ul>
</blockquote>
<h3 id="6-3-ObjectInputStream类"><a href="#6-3-ObjectInputStream类" class="headerlink" title="6.3 ObjectInputStream类"></a>6.3 ObjectInputStream类</h3><p>ObjectInputStream是反序列化流，可以将文件中的对象读取到Java程序中</p>
<p>构造方法：</p>
<ul>
<li><code>ObjectInputStream(InputStream in)</code>：参数传递一个字节输入流</li>
</ul>
<p>ObjectInputStream读对象的方法【<strong>特有方法</strong>】</p>
<ul>
<li><code>Object readObject()</code>:从文件中读取对象</li>
</ul>
<p>使用示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02ObjectInputStream</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"xxx\\file01-obj.txt"</span>));</span><br><span class="line">        Object obj = ois.readObject();</span><br><span class="line"></span><br><span class="line">        System.out.println((Person)obj);</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<p>如果使用反序列化流读取数据，如果读取的对象所属的类不存在，那么会报错[<strong>ClassNotFoundException</strong>]</p>
</blockquote>
<h3 id="6-4-序列化中注意事项"><a href="#6-4-序列化中注意事项" class="headerlink" title="6.4 序列化中注意事项"></a>6.4 序列化中注意事项</h3><p><strong>static</strong>和<strong>transient</strong>关键字</p>
<ul>
<li>被static修饰的属性不能被序列化。被static修饰的属性属于类，不属于对象，而序列化操作写的是对象。</li>
<li>如果我们不希望某个属性被序列化，同时不希望使用static关键字，那么可以使用transient。<ul>
<li>transient表示瞬态，被transient修饰的属性无法被序列化。</li>
</ul>
</li>
</ul>
<p>例如：</p>
<ul>
<li><p><code>private transient int age;</code></p>
</li>
<li><p><code>private static int age;</code></p>
</li>
</ul>
<h3 id="6-5-序列化中的序列号"><a href="#6-5-序列化中的序列号" class="headerlink" title="6.5 序列化中的序列号"></a>6.5 序列化中的序列号</h3><p><strong>问题</strong>：在进行反序列的的时候，从文件中读取对象时，会对比文件中保存的版本号和class文件中的版本号是否一致，如果不一致，就会报错。如果要解决版本号冲突问题，我们可以给类固定一个版本号，不管该类怎么修改，版本号都不变。这样就解决了问题。</p>
<p><strong>解决方法</strong>：可以在类中提供一个常量<code>serialVersionUID</code>，该常量就表示类的版本号，我们可以自己手动提供版本号。</p>
<p>定义<code>serialVersionUID</code>要求：</p>
<ul>
<li>必须被<code>private static final</code> 修饰</li>
<li>必须是<code>long</code>类型的</li>
<li>名字必须叫做<code>serialVersionUID</code></li>
</ul>
<h3 id="6-6-练习"><a href="#6-6-练习" class="headerlink" title="6.6 练习"></a>6.6 练习</h3><p>要求：</p>
<ul>
<li>将存有多个学生对象的集合序列化，保存到list.txt中</li>
<li>反序列化，并遍历集合，打印对象信息</li>
</ul>
<p>代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    get/set/构造方法略...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：Student类也需要实现Serilizable接口</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建集合，用来保存学生</span></span><br><span class="line">        List&lt;Student&gt; stuList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//2.添加学生</span></span><br><span class="line">        stuList.add(<span class="keyword">new</span> Student(<span class="string">"张三"</span>,<span class="number">18</span>));</span><br><span class="line">        stuList.add(<span class="keyword">new</span> Student(<span class="string">"李四"</span>,<span class="number">19</span>));</span><br><span class="line">        stuList.add(<span class="keyword">new</span> Student(<span class="string">"王五"</span>,<span class="number">20</span>));</span><br><span class="line">        <span class="comment">//3.创建ObjectOutputStream序列化流，用来写对象</span></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"xxx\\stuList.txt"</span>));</span><br><span class="line">        <span class="comment">//4.调用write方法，将集合写到文件中</span></span><br><span class="line">        oos.writeObject(stuList);</span><br><span class="line">        <span class="comment">//5.释放资源</span></span><br><span class="line">        oos.close();</span><br><span class="line">        <span class="comment">//6.创建ObjectInputStream反序列化流，用来读</span></span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"xxx\\stuList.txt"</span>));</span><br><span class="line">        <span class="comment">//7.调用readObject方法读取对象</span></span><br><span class="line">        List&lt;Student&gt; list = (List&lt;Student&gt;) ois.readObject();</span><br><span class="line">        <span class="comment">//8.释放资源</span></span><br><span class="line">        ois.close();</span><br><span class="line">        <span class="comment">//9.遍历读取到的集合中的对象，输出里面的信息</span></span><br><span class="line">        <span class="keyword">for</span> (Student student : list) &#123;</span><br><span class="line">            System.out.println(student);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="七、打印流"><a href="#七、打印流" class="headerlink" title="七、打印流"></a>七、打印流</h2><p><code>PrintStream</code>是打印流。</p>
<p>打印流特点：</p>
<ul>
<li>只有输出，没有输入</li>
<li>打印流写数据十分方便</li>
</ul>
<p>构造方法：</p>
<ul>
<li><code>PrintStream(String fileName)</code>：参数需要传递字符串类型的文件路径</li>
<li><code>PrintStream(File file)</code>：参数需要传递File类型的文件</li>
<li><code>PrintStream(OutputStream out)</code>：参数需要传递字节输出流</li>
</ul>
<p>特有方法：</p>
<ul>
<li><code>void print(任何类型)</code>:写数据</li>
<li><code>void println(任何类型)</code>:写数据并换行</li>
</ul>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01PrintStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        PrintStream ps = <span class="keyword">new</span> PrintStream(<span class="string">"xxx\\file06.txt"</span>);</span><br><span class="line">        <span class="comment">// ps.print("你好");</span></span><br><span class="line">        <span class="comment">// ps.print("你也蛮好的");</span></span><br><span class="line">        ps.println(<span class="number">97</span>);</span><br><span class="line">        ps.println(<span class="number">98</span>);</span><br><span class="line">        ps.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：打印流在打印上面97、98的时候，直接写的是数字97、98。不像字节流出现a、b</p>
</blockquote>
<h3 id="7-1-扩展"><a href="#7-1-扩展" class="headerlink" title="7.1 扩展"></a>7.1 扩展</h3><p><code>System.out.println</code>中的<code>System.out</code>就是打印流</p>
<p><code>System.out</code>叫做<code>标准输出流</code>，该流的目的地是控制台。</p>
<p>可以通过System中的静态方法叫做<code>setOut()</code>改变这个标准输出流的目的地</p>
<ul>
<li><code>static void setOut(PrintStream out)</code>：重新分配”标准“输出流。参数PrintStream目的地是什么，将来System.out的目的地就是什么</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02PrintStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        PrintStream ps = <span class="keyword">new</span> PrintStream(<span class="string">"xxx\\file07.txt"</span>);</span><br><span class="line">        System.setOut(ps);</span><br><span class="line">        System.out.println(<span class="string">"HelloWorld!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="八、装饰设计模式"><a href="#八、装饰设计模式" class="headerlink" title="八、装饰设计模式"></a>八、装饰设计模式</h2><p><strong>装饰器设计模式：在不改变原有类，并且不适用继承的前提下，对一个类进行增强。</strong></p>
<ul>
<li>装饰的类和被装饰的类要实现一个接口</li>
<li>在装饰的类中接收被装饰的对象</li>
<li>在需要增强的方法中直接写增强后的内容</li>
<li>如果某个方法不需要增强，直接通过被装饰的类调用该方法</li>
</ul>
<h3 id="8-1-Demo演示"><a href="#8-1-Demo演示" class="headerlink" title="8.1 Demo演示"></a>8.1 Demo演示</h3><p>要求：使用超级刘德华(装饰的类)对原来的类(被装饰的类)进行增强(对刘德华的功能进行扩展)</p>
<p>接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 明星接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Star</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 唱歌</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跳舞</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dance</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>被装饰的类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LiuDeHua</span> <span class="keyword">implements</span> <span class="title">Star</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"刘德华在唱歌"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"刘德华在跳舞"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>装饰者类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperLiuDeHua</span> <span class="keyword">implements</span> <span class="title">Star</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收被装饰(增强)的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> LiuDeHua liuDeHua;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供构造方法，用来接收外界传递过来的liudehua对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> liuDeHua</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SuperLiuDeHua</span><span class="params">(LiuDeHua liuDeHua)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.liuDeHua = liuDeHua;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对唱歌方法进行增强</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"刘德华在鸟巢唱歌，下面很多粉丝尖叫~~~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 不对跳舞的方法进行增强，直接通过刘德华调用跳舞的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        liuDeHua.dance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LiuDeHua l = <span class="keyword">new</span> LiuDeHua();</span><br><span class="line">        l.sing();</span><br><span class="line">        l.dance();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 创建超级刘德华</span></span><br><span class="line"><span class="comment">         * 必须要传递要增强的对象，也就是一个普通的刘德华</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        SuperLiuDeHua superLiuDeHua = <span class="keyword">new</span> SuperLiuDeHua(l);</span><br><span class="line">        superLiuDeHua.sing();<span class="comment">//增强的方法</span></span><br><span class="line">        superLiuDeHua.dance();<span class="comment">//没有被增强</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="九、commons-io工具包"><a href="#九、commons-io工具包" class="headerlink" title="九、commons-io工具包"></a>九、commons-io工具包</h2><p>commons-io是由第三方(Apache)提供的对于IO流操作的工具包</p>
<p>如果要使用第三方工具包，一般需要导入jar包</p>
<blockquote>
<p>jar就是java的压缩包，里面会有很多的class文件，供我们使用</p>
<p>如果导入了jar包，这个jar包中的类就都可以使用了</p>
</blockquote>
<p>导入jar步骤：</p>
<ul>
<li>在当前模块下面新建一个文件夹lib</li>
<li>将jar包复制到lib文件夹下</li>
<li>模块上右键，点击 [add as library]</li>
</ul>
<h3 id="9-1-方法介绍"><a href="#9-1-方法介绍" class="headerlink" title="9.1 方法介绍"></a>9.1 方法介绍</h3><p>IOUtils里面的方法：</p>
<ul>
<li><code>static int copy(InputStream input, OutputStream output)</code>:把input输入流中的内容拷贝到output输出流中，返回拷贝的字节个数(适合文件大小为2GB以下)</li>
<li><code>static long copyLarge(InputStream input, OutputStream output)</code>:把input输入流中的内容拷贝到output输出流中，返回拷贝的字节个数(适合文件大小为2GB以上)</li>
</ul>
<p>FileUtils里面的方法：</p>
<ul>
<li><p><code>static void copyFileToDirectory(File srcFile, File destDir)</code> ：复制文件到另外一个目录下。srcFile表示要复制的文件，destDir表示要复制到的文件夹</p>
</li>
<li><p><code>static void copyDirectoryToDirectory(File srcDir , File destDir )</code>：复制srcDir目录到destDir位置。srcDir表示源文件夹，destDir表示目标文件夹</p>
</li>
</ul>
<p><strong>代码演示：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        IOUtils.copy(<span class="keyword">new</span> FileInputStream(<span class="string">"xxx\\1.png"</span>),<span class="keyword">new</span> FileOutputStream(<span class="string">"xxx\\2.png"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>学习</tag>
        <tag>IO流</tag>
        <tag>设计模式</tag>
        <tag>装饰器模式</tag>
      </tags>
  </entry>
  <entry>
    <title>JUnit单元测试、Socket网络编程</title>
    <url>/2020/08/07/JUnit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E3%80%81Socket%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="一、JUnit单元测试"><a href="#一、JUnit单元测试" class="headerlink" title="一、JUnit单元测试"></a>一、JUnit单元测试</h2><p>JUnit是单元测试，可以替代程序中的main方法，程序可以直接从单元测试方法直接开始执行。</p>
<p>如果在一个方法上加上<code>@Test</code>注解，那么这个方法就是单元测试方法了，程序就可以从这个方法直接开始执行了。</p>
<a id="more"></a>

<h3 id="1-1-基本使用"><a href="#1-1-基本使用" class="headerlink" title="1.1 基本使用"></a>1.1 基本使用</h3><p>单元测试方法的要求：</p>
<ul>
<li>方法一般以test开头(<strong>软性规定</strong>)</li>
<li>方法用public修饰，没有参数没有返回值(<strong>硬性规定</strong>)</li>
</ul>
<p>单元测试方法的执行：</p>
<ul>
<li>方式一：选中方法右键run</li>
<li>方式二：选中类，然后右键run【执行该类中的所有单元测试方法】</li>
</ul>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Junit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFunction</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"testFunction"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"testMethod"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-单元测试的其他注解"><a href="#1-2-单元测试的其他注解" class="headerlink" title="1.2 单元测试的其他注解"></a>1.2 单元测试的其他注解</h3><p><code>JUnit4</code>：</p>
<ul>
<li><code>@Before</code>:使用该注解修饰的方法，会在每次单元测试方法执行之前执行</li>
<li><code>@After</code>：使用该注解修饰的方法，会在每次单元测试方法执行之后执行</li>
<li><code>@BeforeClass</code>:使用该注解修饰的方法，会在所有方法执行之前执行，只执行一次。</li>
<li><code>@AfterClass</code>:使用该注解修饰的方法，会在所有方法执行之后执行，只执行一次。</li>
</ul>
<p>注意：<code>BeforeClass</code>和<code>AfterClass</code>注解修饰的方法必须使用<code>static</code>静态修饰</p>
<p><code>JUnit5</code>：</p>
<ul>
<li><code>@BeforeEach</code>：用来修饰方法，该方法会在每一个测试方法执行之前执行一次。</li>
<li><code>@AfterEach</code>：用来修饰方法，该方法会在每一个测试方法执行之后执行一次。</li>
<li><code>@BeforeAll</code>：用来静态修饰方法，该方法会在所有测试方法之前执行一次。</li>
<li><code>@AfterAll</code>：用来静态修饰方法，该方法会在所有测试方法之后执行一次。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02JUnit</span> </span>&#123;</span><br><span class="line">    <span class="meta">@AfterClass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">afterClassMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"afterClassMethod..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeClass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">beforeClassMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"beforeClassMethod..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"afterMethod..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"beforeMethod..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"testMethod..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"testFunction..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="二、网络编程入门"><a href="#二、网络编程入门" class="headerlink" title="二、网络编程入门"></a>二、网络编程入门</h2><h3 id="2-1-IP地址介绍"><a href="#2-1-IP地址介绍" class="headerlink" title="2.1 IP地址介绍"></a>2.1 IP地址介绍</h3><p><strong>IP地址：是网络中对于设备的一个唯一的标识(编号)</strong></p>
<p><img data-src="/image/IP%E5%9C%B0%E5%9D%80%E4%BB%8B%E7%BB%8D.png" alt="IP地址介绍"></p>
<h3 id="2-2-端口号"><a href="#2-2-端口号" class="headerlink" title="2.2 端口号"></a>2.2 端口号</h3><p><strong>端口号：在计算机中对于应用程序的唯一标识</strong></p>
<p><img data-src="/image/%E7%AB%AF%E5%8F%A3%E5%8F%B7%E4%BB%8B%E7%BB%8D.png" alt="端口号介绍"></p>
<h3 id="2-3-客户端和服务器"><a href="#2-3-客户端和服务器" class="headerlink" title="2.3 客户端和服务器"></a>2.3 客户端和服务器</h3><p>图解:</p>
<p><img data-src="/image/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%99%A8.png" alt="客户端和服务器"></p>
<h3 id="2-4-TCP中的IO流"><a href="#2-4-TCP中的IO流" class="headerlink" title="2.4 TCP中的IO流"></a>2.4 TCP中的IO流</h3><p>图解：</p>
<p><img data-src="/image/TCP%E4%B8%AD%E7%9A%84IO%E6%B5%81.png" alt="TCP中的IO流"></p>
<h2 id="三、TCP通信程序"><a href="#三、TCP通信程序" class="headerlink" title="三、TCP通信程序"></a>三、TCP通信程序</h2><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h3><p>TCP ==&gt;Transfer Control Protocol ==&gt; 传输控制协议</p>
<p>TCP协议是面向连接的通信协议，即在传输数据前先在客户端和服务器端建立逻辑连接，然后再传输数据。它提供了两台计算机之间可靠无差错的数据传输。</p>
<p>TCP协议的特点：</p>
<ul>
<li>面向连接的协议</li>
</ul>
<ul>
<li>只能由客户端主动发送数据给服务器端，服务器端接收到数据之后，可以给客户端响应数据。</li>
</ul>
<ul>
<li>通过三次握手建立连接，连接成功形成数据传输通道。</li>
</ul>
<ul>
<li>通过四次挥手断开连接</li>
<li>基于IO流进行数据传输</li>
<li>传输数据大小没有限制</li>
</ul>
<ul>
<li>因为面向连接的协议，速度慢，但是是可靠的协议。</li>
</ul>
<p>TCP协议的使用场景</p>
<ul>
<li>文件上传和下载</li>
<li>邮件发送和接收</li>
<li>远程登录</li>
</ul>
<p><strong>TCP协议相关的类</strong>：</p>
<ul>
<li><code>Socket</code>：该类的对象就代表客户端程序。</li>
<li><code>ServerSocket</code>：该类的对象就代表服务器端程序</li>
</ul>
<p><strong>Socket类构造方法</strong>：</p>
<ul>
<li><code>Socket(String host, int port)</code>：参数host是目标服务器的ip地址，参数port目标服务器程序的端口号</li>
</ul>
<blockquote>
<p>注意：只要执行该方法，就会立即连接指定的服务器程序，如果连接不成功，则会抛出异常。</p>
</blockquote>
<p><strong>ServerSocket类的构造方法</strong>：</p>
<ul>
<li><code>ServerSocket(int port)</code>:参数表示服务器程序的端口</li>
<li>特有方法：<ul>
<li><code>Socket accept()</code>:监听(等待)并获取客户端的请求(Socket)</li>
</ul>
</li>
</ul>
<p><strong>Socket类常用方法：</strong></p>
<ul>
<li><code>OutputStream getOutputStream()</code>:获取字节输出流，该流用来发送数据</li>
<li><code>InputStream getInputStream()</code>:获取字节输入流，该流用来接收数据</li>
<li><code>void close()</code>:释放资源</li>
</ul>
<h3 id="3-2-TCP通信基本案例"><a href="#3-2-TCP通信基本案例" class="headerlink" title="3.2 TCP通信基本案例"></a>3.2 TCP通信基本案例</h3><h4 id="3-2-1-TCP案例客户端"><a href="#3-2-1-TCP案例客户端" class="headerlink" title="3.2.1 TCP案例客户端"></a>3.2.1 TCP案例客户端</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TCP客户端的实现步骤：</span></span><br><span class="line"><span class="comment"> *      1.创建socket对象，表示客户端，并要指定要连接的服务器ip地址以及端口号</span></span><br><span class="line"><span class="comment"> *      2.通过socket调用getOutputStream获取字节输出流，该流用来向服务器发送数据</span></span><br><span class="line"><span class="comment"> *      3.通过流调用write方法，写(发)数据</span></span><br><span class="line"><span class="comment"> *      4.通过socket调用getInputStream获取字节输入流，该流用来读取都武器发送过类的数据</span></span><br><span class="line"><span class="comment"> *      5.通过流调用read()方法，读取(接收)数据</span></span><br><span class="line"><span class="comment"> *      6.释放资源</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Sunmoon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建socket对象，表示客户端，并要指定要连接的服务器ip地址以及端口号</span></span><br><span class="line">        <span class="comment">//创建Socket对象是会主动连接服务器，如果连接失败，会报错。【三次握手】</span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>,<span class="number">1234</span>);</span><br><span class="line">        <span class="comment">//2.通过socket调用getOutputStream获取字节输出流，该流用来向服务器发送数据</span></span><br><span class="line">        OutputStream out = socket.getOutputStream();</span><br><span class="line">        <span class="comment">//3.通过流调用write方法，写(发)数据</span></span><br><span class="line">        out.write(<span class="string">"Hello!"</span>.getBytes());</span><br><span class="line">        <span class="comment">//4.通过socket调用getInputStream获取字节输入流，该流用来读取都武器发送过类的数据</span></span><br><span class="line">        InputStream in = socket.getInputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] bArr = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="comment">// 5.通过流调用read()方法，读取(接收)数据</span></span><br><span class="line">        <span class="keyword">int</span> len = in.read(bArr);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(bArr,<span class="number">0</span>,len));</span><br><span class="line">        <span class="comment">// 6.释放资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-2-TCP案例服务器端"><a href="#3-2-2-TCP案例服务器端" class="headerlink" title="3.2.2 TCP案例服务器端"></a>3.2.2 TCP案例服务器端</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * TCP服务器端实现步骤：</span></span><br><span class="line"><span class="comment"> *      1.创建一个ServerSocket，表示TCP服务器</span></span><br><span class="line"><span class="comment"> *      2.通过ServerSocket调用accept方法监听并获取客户端的请求(客户端Socket)</span></span><br><span class="line"><span class="comment"> *      3.通过socket调用getInputStream方法获取输入流，接收客户端发送过来的数据</span></span><br><span class="line"><span class="comment"> *      4.通过流掉用read方法接收数据</span></span><br><span class="line"><span class="comment"> *      5.通过socket调用getOutputStream方法获取输出流，用来给客户端发送数据</span></span><br><span class="line"><span class="comment"> *      6.通过流调用write方法，写数据</span></span><br><span class="line"><span class="comment"> *      7.释放资源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">1234</span>);</span><br><span class="line">        Socket socket = server.accept();</span><br><span class="line">        InputStream in = socket.getInputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] bArr = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = in.read(bArr);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(bArr,<span class="number">0</span>,len));</span><br><span class="line">        OutputStream out = socket.getOutputStream();</span><br><span class="line">        out.write(<span class="string">"收到"</span>.getBytes());</span><br><span class="line">        socket.close();</span><br><span class="line">        server.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="四、综合案例"><a href="#四、综合案例" class="headerlink" title="四、综合案例"></a>四、综合案例</h2><h3 id="4-1-文件上传案例"><a href="#4-1-文件上传案例" class="headerlink" title="4.1 文件上传案例"></a>4.1 文件上传案例</h3><p>分析：</p>
<p><img data-src="/image/%E4%B8%8A%E4%BC%A0%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90.png" alt="上传案例分析"></p>
<p><strong>多线程实现：</strong></p>
<p>客户端任务类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建客户端</span></span><br><span class="line">            Socket socket = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>,<span class="number">59512</span>);</span><br><span class="line">            <span class="comment">//创建字节输入流读取要上传的文件</span></span><br><span class="line">            InputStream is = <span class="keyword">new</span> FileInputStream(<span class="string">"E:\\file_test\\client\\1.png"</span>);</span><br><span class="line">            <span class="comment">//获取输出流对象，向服务器发送数据</span></span><br><span class="line">            OutputStream out = socket.getOutputStream();</span><br><span class="line">            <span class="comment">//创建字节数组</span></span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">8</span>];</span><br><span class="line">            <span class="comment">//定义变量</span></span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="comment">//循环读取</span></span><br><span class="line">            <span class="keyword">while</span> ((len = is.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//向服务器写数据</span></span><br><span class="line">                out.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//关流</span></span><br><span class="line">            is.close();</span><br><span class="line">            <span class="comment">//告知服务器写完毕</span></span><br><span class="line">            socket.shutdownOutput();</span><br><span class="line">            <span class="comment">//获取输入流对象，接收客户端会显数据</span></span><br><span class="line">            InputStream in = socket.getInputStream();</span><br><span class="line">            <span class="keyword">while</span> ((len = in.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.println(<span class="keyword">new</span> String(bytes,<span class="number">0</span>,len));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//关闭客户端</span></span><br><span class="line">            socket.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span>  </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        ExecutorService e = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        e.submit(<span class="keyword">new</span> Task());</span><br><span class="line">        e.submit(<span class="keyword">new</span> Task());</span><br><span class="line">        e.submit(<span class="keyword">new</span> Task());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>服务器端：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建服务器对象</span></span><br><span class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">59512</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//开启监听</span></span><br><span class="line">            Socket socket = server.accept();</span><br><span class="line">            <span class="comment">//每次监听到请求都开启一个新线程</span></span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//创建字节输出流，写数据,随机生成文件名</span></span><br><span class="line">                    OutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="string">"E:\\file_test\\server\\"</span> + UUID.randomUUID() + <span class="string">".png"</span>);</span><br><span class="line">                    <span class="comment">//调用getInputStream方法接收数据</span></span><br><span class="line">                    InputStream in = socket.getInputStream();</span><br><span class="line">                    <span class="comment">//定义字节数组</span></span><br><span class="line">                    <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">8</span>];</span><br><span class="line">                    <span class="comment">//定义变量</span></span><br><span class="line">                    <span class="keyword">int</span> len;</span><br><span class="line">                    <span class="comment">//循环读取</span></span><br><span class="line">                    <span class="keyword">while</span> ((len = in.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                        os.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//关闭资源</span></span><br><span class="line">                    os.close();</span><br><span class="line">                    <span class="comment">//获取字节输出流，给客户端回显</span></span><br><span class="line">                    OutputStream out = socket.getOutputStream();</span><br><span class="line">                    out.write(<span class="string">"上传成功"</span>.getBytes());</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="4-2-模拟B-S服务器"><a href="#4-2-模拟B-S服务器" class="headerlink" title="4.2 模拟B\S服务器"></a>4.2 模拟B\S服务器</h3><p>准备一个web页面，可以放在模块文件夹下，然后通过<code>本机IP+端口号</code>即可访问页面，查看到页面内容。</p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建ServerSocket服务器</span></span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">1234</span>);</span><br><span class="line">        <span class="comment">//死循环，使用死循环一直监听请求，并处理操作</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//通过服务器调用accept方法，监听客户端请求</span></span><br><span class="line">            Socket socket = serverSocket.accept();</span><br><span class="line">            <span class="comment">//每监听到请求，就创建新的线程执行任务</span></span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//创建字节输入流，用来读取index.html文件的内容</span></span><br><span class="line">                    InputStream is = <span class="keyword">new</span> FileInputStream(<span class="string">"xxx\\index.html"</span>);</span><br><span class="line">                    <span class="comment">//通过Socket调用getOutputStream，获取输出流，用来向浏览器【客户端】发送数据</span></span><br><span class="line">                    OutputStream out = socket.getOutputStream();</span><br><span class="line">                    <span class="comment">//如果浏览器作为客户端访问服务器，要遵循http协议。</span></span><br><span class="line">                    <span class="comment">//根据http协议规范，服务器回复给浏览器的前三行数据是固定的</span></span><br><span class="line">                    out.write(<span class="string">"HTTP/1.1 200 OK\r\n"</span>.getBytes());<span class="comment">//第一行</span></span><br><span class="line">                    out.write(<span class="string">"Content-Type=html/text\r\n"</span>.getBytes());<span class="comment">//第二行</span></span><br><span class="line">                    out.write(<span class="string">"\r\n"</span>.getBytes());<span class="comment">//第三行是一个空换行。</span></span><br><span class="line">                    <span class="comment">//开始将html文件中的内容写给浏览器</span></span><br><span class="line">                    <span class="keyword">int</span> i;</span><br><span class="line">                    <span class="keyword">while</span> ((i = is.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                        out.write(i);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//关闭资源</span></span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>学习</tag>
        <tag>JUnit</tag>
        <tag>Socket</tag>
      </tags>
  </entry>
  <entry>
    <title>NIO&amp;AIO</title>
    <url>/2020/08/09/NIO-AIO/</url>
    <content><![CDATA[<h2 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h2><h3 id="NIO介绍"><a href="#NIO介绍" class="headerlink" title="NIO介绍"></a>NIO介绍</h3><p>同步和异步（线程通信的机制）</p>
<ul>
<li>同步：线程在完成某个功能时，必须等待这个功能执行完才能再继续往下执行。</li>
<li>异步：线程在完成功能的时候，不用等到该功能执行结束也可以去做其他事情。 得到该功能结束后，系统会通知线程该功能执行完了</li>
</ul>
<p>阻塞和非阻塞(线程的状态)</p>
<ul>
<li>阻塞：线程在执行任务时，会挂起。</li>
<li>非阻塞：线程在执行任务时，不会挂起，可以继续执行其他任务。</li>
</ul>
<a id="more"></a>

<p>BIO：同步阻塞IO<br>NIO：同步非阻塞IO<br>AIO：异步非阻塞IO</p>
<blockquote>
<p>NIO有三个重要的组成部分，Buffer， Channel， Selector</p>
</blockquote>
<h3 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h3><h4 id="Buffer的创建"><a href="#Buffer的创建" class="headerlink" title="Buffer的创建"></a>Buffer的创建</h4><p>Buffer是缓冲区，本质就是由数组组成的。</p>
<blockquote>
<p>在NIO中，数据都是要在缓冲区进行操作的。</p>
</blockquote>
<p>常见的缓冲区</p>
<ul>
<li>ByteBuffer</li>
<li>CharBuffer</li>
<li>DoubleBuffer</li>
<li>FloatBuffer</li>
<li>IntBuffer</li>
<li>LongBuffer</li>
<li>ShortBuffer</li>
</ul>
<p>ByteBuffer的三种创建方式：</p>
<ul>
<li><code>static ByteBuffer allocate(int capacity)</code>：创建一个字节缓冲区并返回，参数是缓冲区的长度（间接缓冲区）</li>
<li><code>static ByteBuffer allocateDirect(int capacity)</code>：创建一个字节缓冲区并返回，参数是缓冲区的长度（直接缓冲区）</li>
<li><code>static ByteBuffer wrap(byte[] array)</code>：根据字节数组创建字节缓冲区并返回（间接缓冲区）</li>
</ul>
<blockquote>
<ul>
<li>间接缓冲区：在Java的内存中创建的缓冲区。</li>
<li>直接缓冲区：在系统内存中创建的缓冲区。</li>
<li>间接缓冲区的创建和销毁效率比直接缓冲区要高，但是工作效率比直接缓冲区要低。</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Buffer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// static ByteBuffer allocate(int capacity)：创建一个字节缓冲区并返回，参数是缓冲区的长度（间接缓冲区）</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//将ByteBuffer转成数组，然后借助工具类Arrays.toString输出</span></span><br><span class="line">        System.out.println(Arrays.toString(buffer.array()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//static ByteBuffer allocateDirect(int capacity)：创建一个字节缓冲区并返回，参数是缓冲区的长度（直接缓冲区）</span></span><br><span class="line">        ByteBuffer buffer2 = ByteBuffer.allocateDirect(<span class="number">10</span>);</span><br><span class="line">        System.out.println(buffer2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//static ByteBuffer wrap(byte[] array)：根据字节数组创建字节缓冲区并返回（间接缓冲区）</span></span><br><span class="line">        ByteBuffer buffer3 = ByteBuffer.wrap(<span class="string">"hello"</span>.getBytes());</span><br><span class="line">        System.out.println(Arrays.toString(buffer3.array()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Buffer的put方法"><a href="#Buffer的put方法" class="headerlink" title="Buffer的put方法"></a>Buffer的put方法</h4><p>在ByteBuffer中有一些方法叫做put，可以向缓冲区中添加元素。</p>
<ul>
<li><code>ByteBuffer put(byte b)</code>：向当前位置添加一个字节。</li>
<li><code>ByteBuffer put(byte[] src)</code>：向当前位置添加一个字节数组。</li>
<li><code>ByteBuffer put(byte[] src, int offset, int length)</code>：添加字节数组的一部分。参数offset是数组起始索引，参数length是元素个数</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02BufferPut</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取缓冲区</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//ByteBuffer put(byte b)：向当前位置添加一个字节。</span></span><br><span class="line">        buffer.put((<span class="keyword">byte</span>) <span class="number">100</span>);</span><br><span class="line">        buffer.put((<span class="keyword">byte</span>) <span class="number">101</span>);</span><br><span class="line">        buffer.put((<span class="keyword">byte</span>) <span class="number">102</span>);</span><br><span class="line">        <span class="comment">//ByteBuffer put(byte[] src)：向当前位置添加一个字节数组。</span></span><br><span class="line">        <span class="keyword">byte</span>[] bArr = &#123;<span class="number">90</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">93</span>, <span class="number">94</span>&#125;;</span><br><span class="line">        <span class="comment">//buffer.put(bArr);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//ByteBuffer put(byte[] src, int offset, int length)：添加字节数组的一部分。参数offset是数组起始索引，参数length是元素个数</span></span><br><span class="line">        buffer.put(bArr, <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        System.out.println(Arrays.toString(buffer.array()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Buffer的capacity方法"><a href="#Buffer的capacity方法" class="headerlink" title="Buffer的capacity方法"></a>Buffer的capacity方法</h4><p>在ByteBuffer中有一个方法叫做capacity，可以获取到缓冲区的容量</p>
<ul>
<li><code>int capacity()</code>：返回缓冲区的容量。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03Capacity</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取缓冲区</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//输出容量</span></span><br><span class="line">        System.out.println(<span class="string">"容量："</span> + buffer.capacity());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Buffer的limit方法"><a href="#Buffer的limit方法" class="headerlink" title="Buffer的limit方法"></a>Buffer的limit方法</h4><p>在ByteBuffer中，有一个方法叫做limit，可以对缓冲区进行限制（比如限制缓冲区中只能使用前5个元素</p>
<ul>
<li><p><code>int limit()</code>：获取缓冲区的限制。</p>
</li>
<li><p><code>Buffer limit(int newLimit)</code>：设置缓冲区的限制。 参数表示新的限制，比如参数是5，就表示只能使用5个元素</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04Limit</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取缓冲区</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        System.out.println(<span class="string">"容量："</span> + buffer.capacity() + <span class="string">"，限制："</span> + buffer.limit());</span><br><span class="line">        <span class="comment">//设置limit</span></span><br><span class="line">        buffer.limit(<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">"容量："</span> + buffer.capacity() + <span class="string">"，限制："</span> + buffer.limit());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        buffer.put((<span class="keyword">byte</span>) <span class="number">100</span>);</span><br><span class="line">        buffer.put((<span class="keyword">byte</span>) <span class="number">101</span>);</span><br><span class="line">        <span class="comment">//限制了只能使用前两个元素，如果添加第三个，就会报错</span></span><br><span class="line">        buffer.put((<span class="keyword">byte</span>) <span class="number">102</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Buffer的position方法"><a href="#Buffer的position方法" class="headerlink" title="Buffer的position方法"></a>Buffer的position方法</h4><p>在ByteBuffer中有一个方法叫做Position，可以获取以及设置缓冲区的元素位置(位置是几，将来就是在哪个位置添加)</p>
<ul>
<li><p><code>int position()</code>：获取缓冲区的元素位置。</p>
</li>
<li><p><code>Buffer position(int newPosition)</code>：设置缓冲区的元素位置，参数表示新设置的位置。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05Position</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取缓冲区</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//输出缓冲区的信息</span></span><br><span class="line">        System.out.println(<span class="string">"位置："</span> + buffer.position() + <span class="string">", 限制："</span> + buffer.limit() + <span class="string">", 容量："</span> + buffer.capacity());</span><br><span class="line">        <span class="comment">//添加</span></span><br><span class="line">        buffer.put((<span class="keyword">byte</span>) <span class="number">100</span>);</span><br><span class="line">        buffer.put((<span class="keyword">byte</span>) <span class="number">101</span>);</span><br><span class="line">        buffer.put((<span class="keyword">byte</span>) <span class="number">102</span>);</span><br><span class="line">        <span class="comment">//输出缓冲区的信息</span></span><br><span class="line">        System.out.println(<span class="string">"位置："</span> + buffer.position() + <span class="string">", 限制："</span> + buffer.limit() + <span class="string">", 容量："</span> + buffer.capacity());</span><br><span class="line">        <span class="comment">//设置缓冲区的位置</span></span><br><span class="line">        buffer.position(<span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">"位置："</span> + buffer.position() + <span class="string">", 限制："</span> + buffer.limit() + <span class="string">", 容量："</span> + buffer.capacity());</span><br><span class="line">        buffer.put((<span class="keyword">byte</span>) <span class="number">50</span>);</span><br><span class="line">        buffer.put((<span class="keyword">byte</span>) <span class="number">51</span>);</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        System.out.println(Arrays.toString(buffer.array()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Buffer的mark方法"><a href="#Buffer的mark方法" class="headerlink" title="Buffer的mark方法"></a>Buffer的mark方法</h4><p>在ByteBuffer中有一个方法叫做mark，可以设置缓冲区的标记</p>
<ul>
<li><code>Buffer mark()</code>：设置缓冲区的标记</li>
<li><code>Buffer reset()</code>：恢复之前的标记</li>
</ul>
<blockquote>
<p>调用mark方法时position是几，那么调用reset方法后恢复的position就是几。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Deo06Mark</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取缓冲区</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//输出缓冲区的信息</span></span><br><span class="line">        System.out.println(<span class="string">"位置："</span> + buffer.position() + <span class="string">", 限制："</span> + buffer.limit() + <span class="string">", 容量："</span> + buffer.capacity());</span><br><span class="line">        <span class="comment">//添加</span></span><br><span class="line">        buffer.put((<span class="keyword">byte</span>) <span class="number">100</span>);</span><br><span class="line">        buffer.put((<span class="keyword">byte</span>) <span class="number">101</span>);</span><br><span class="line">        buffer.put((<span class="keyword">byte</span>) <span class="number">102</span>);</span><br><span class="line">        System.out.println(<span class="string">"位置："</span> + buffer.position() + <span class="string">", 限制："</span> + buffer.limit() + <span class="string">", 容量："</span> + buffer.capacity());</span><br><span class="line">        <span class="comment">//设置标记</span></span><br><span class="line">        buffer.mark();</span><br><span class="line">        <span class="comment">//添加</span></span><br><span class="line">        buffer.put((<span class="keyword">byte</span>) <span class="number">103</span>);</span><br><span class="line">        buffer.put((<span class="keyword">byte</span>) <span class="number">104</span>);</span><br><span class="line">        System.out.println(<span class="string">"位置："</span> + buffer.position() + <span class="string">", 限制："</span> + buffer.limit() + <span class="string">", 容量："</span> + buffer.capacity());</span><br><span class="line">        <span class="comment">//调用reset，恢复之间做标记是的位置.</span></span><br><span class="line">        buffer.reset();</span><br><span class="line">        System.out.println(<span class="string">"位置："</span> + buffer.position() + <span class="string">", 限制："</span> + buffer.limit() + <span class="string">", 容量："</span> + buffer.capacity());</span><br><span class="line">        buffer.put((<span class="keyword">byte</span>) <span class="number">10</span>);</span><br><span class="line">        buffer.put((<span class="keyword">byte</span>) <span class="number">11</span>);</span><br><span class="line">        <span class="comment">//输出元素</span></span><br><span class="line">        System.out.println(Arrays.toString(buffer.array()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Buffer的其他方法"><a href="#Buffer的其他方法" class="headerlink" title="Buffer的其他方法"></a>Buffer的其他方法</h4><p><code>Buffer flip()</code>：缩小limit的范围</p>
<ul>
<li>将limit设置到position位置。</li>
<li>将position设置为0</li>
<li>丢弃标记</li>
</ul>
<p><code>Buffer clear()</code>:还原缓冲区的状态。</p>
<ul>
<li>将limit设置到capacity</li>
<li>将position设置为0</li>
<li>丢弃标记</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo07OtherMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取缓冲区</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//输出缓冲区的信息</span></span><br><span class="line">        System.out.println(<span class="string">"位置："</span> + buffer.position() + <span class="string">", 限制："</span> + buffer.limit() + <span class="string">", 容量："</span> + buffer.capacity());</span><br><span class="line">        <span class="comment">//添加</span></span><br><span class="line">        buffer.put((<span class="keyword">byte</span>) <span class="number">100</span>);</span><br><span class="line">        buffer.put((<span class="keyword">byte</span>) <span class="number">101</span>);</span><br><span class="line">        buffer.put((<span class="keyword">byte</span>) <span class="number">102</span>);</span><br><span class="line">        System.out.println(<span class="string">"位置："</span> + buffer.position() + <span class="string">", 限制："</span> + buffer.limit() + <span class="string">", 容量："</span> + buffer.capacity());</span><br><span class="line">        <span class="comment">//缩小limit范围</span></span><br><span class="line">        buffer.flip();</span><br><span class="line">        System.out.println(<span class="string">"位置："</span> + buffer.position() + <span class="string">", 限制："</span> + buffer.limit() + <span class="string">", 容量："</span> + buffer.capacity());</span><br><span class="line">        <span class="comment">//还原缓冲区状态</span></span><br><span class="line">        buffer.clear();</span><br><span class="line">        System.out.println(<span class="string">"位置："</span> + buffer.position() + <span class="string">", 限制："</span> + buffer.limit() + <span class="string">", 容量："</span> + buffer.capacity());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Channel通道"><a href="#Channel通道" class="headerlink" title="Channel通道"></a>Channel通道</h3><p> Channel表示<strong>通道</strong>，在NIO中数据的读写都是使用通道完成的。我们可以将通道看成之前的流，只不过流是单向的，通道是双向的，通道既有读取的方法，也有写方法。</p>
<p>常见的通道：</p>
<ul>
<li>FileChannel：从文件读取数据的</li>
<li>DatagramChannel：读写UDP网络协议数据</li>
<li>SocketChannel：读写TCP网络协议数据</li>
<li>ServerSocketChannel：可以监听TCP连接</li>
</ul>
<h4 id="FileChannel复制文件"><a href="#FileChannel复制文件" class="headerlink" title="FileChannel复制文件"></a>FileChannel复制文件</h4><p>通过NIO的方式复制文件，如果要对文件读写，需要使用FileChannel。</p>
<p>如何获取<code>FileChannel</code>：</p>
<ul>
<li>在<code>FileInputStream</code>和<code>FileOutputStream</code>中，有一个方法叫做<code>getChannel</code>，可以获取通道<ul>
<li><code>FileChannel getChannel()</code>：获取通道。</li>
</ul>
</li>
</ul>
<p>在通道（Channel）中还有用于读写的方法</p>
<ul>
<li><code>int write(ByteBuffer src)</code>:写数据，参数是缓冲区。</li>
<li><code>int read(ByteBuffer dst)</code>：读取数据，参数是缓冲区</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Channel</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建字节流</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"d:\\aa.jpg"</span>);</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"d:\\bb.jpg"</span>);</span><br><span class="line">        <span class="comment">//获取通道</span></span><br><span class="line">        FileChannel inChannel = fis.getChannel();</span><br><span class="line">        FileChannel outChannel = fos.getChannel();</span><br><span class="line">        <span class="comment">//先定义缓冲区</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);<span class="comment">//</span></span><br><span class="line">        <span class="comment">//定义变量，表示读取到的字节个数</span></span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="comment">//开始循环</span></span><br><span class="line">        <span class="keyword">while</span> ((len = inChannel.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//如果条件成立，就表示读取到了数据，那么就进行处理。</span></span><br><span class="line">            <span class="comment">//缩小limit范围（将limit设置到position位置），读取到几个，就让缓冲区中的几个元素是有效的。</span></span><br><span class="line">            buffer.flip();</span><br><span class="line">            <span class="comment">//将读取到的数据写到目的地文件了</span></span><br><span class="line">            outChannel.write(buffer);</span><br><span class="line">            <span class="comment">//重置缓冲区（将position设置为0，将limit设置到capacity，丢弃标记）</span></span><br><span class="line">            buffer.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="RandomAccessFile-复制文件"><a href="#RandomAccessFile-复制文件" class="headerlink" title="RandomAccessFile 复制文件"></a>RandomAccessFile 复制文件</h4><p>上例直接使用FileChannel结合ByteBuffer实现的管道读写，但并不能提高文件的读写效率。</p>
<p> ByteBuffer有个子类：<code>MappedByteBuffer</code>，它可以创建一个“直接缓冲区”，并可以将文件直接映射至内存，可以提高大文件的读写效率。</p>
<p><code>RandomAccessFile</code>类（是一个可以设置读写模式的IO流类）:</p>
<ul>
<li><code>RandomAccessFile(String name, String mode)</code>: 第一个参数是字符串的文件路径，第二个参数是模式。举例：”r”表示只读。 “rw”表示读写</li>
</ul>
<p>RandomAccessFile其他的方法：</p>
<ul>
<li><code>FileChannel getChannel()</code>：获取通道</li>
</ul>
<p>FileChannel获取MappedByteBuffer方法</p>
<ul>
<li><code>MappedByteBuffer map(FileChannel.MapMode mode, long position, long size)</code>：获取直接缓冲区<ul>
<li>参数mode：表示模式</li>
<li>参数position：表示起始位置</li>
<li>参数size：映射的大小</li>
</ul>
</li>
</ul>
<blockquote>
<p>注意：上面的方式不能复制超过2G的文件。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02FastCopy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建RandomAccessFile对象</span></span><br><span class="line">        <span class="comment">//创建的RandomAccessFile，绑定了源文件，模式只读</span></span><br><span class="line">        RandomAccessFile source = <span class="keyword">new</span> RandomAccessFile(<span class="string">"d:\\aa.rar"</span>, <span class="string">"r"</span>);</span><br><span class="line">        <span class="comment">//创建的RandomAccessFile，绑定了目的地文件，模式读写</span></span><br><span class="line">        RandomAccessFile target = <span class="keyword">new</span> RandomAccessFile(<span class="string">"d:\\bb.rar"</span>, <span class="string">"rw"</span>);</span><br><span class="line">        <span class="comment">//获取通道</span></span><br><span class="line">        FileChannel inChannel = source.getChannel();</span><br><span class="line">        FileChannel outChannel = target.getChannel();</span><br><span class="line">        <span class="comment">//记录时间</span></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//获取源文件大小</span></span><br><span class="line">        <span class="keyword">long</span> size = inChannel.size();</span><br><span class="line">        <span class="comment">//获取MappedByteBuffer缓冲区</span></span><br><span class="line">        MappedByteBuffer mbbi = inChannel.map(FileChannel.MapMode.READ_ONLY, <span class="number">0</span>, size);</span><br><span class="line">        MappedByteBuffer mbbo = outChannel.map(FileChannel.MapMode.READ_WRITE, <span class="number">0</span>, size);</span><br><span class="line">        <span class="comment">//遍历mbbi，将每一个字节都放入到mbbo缓冲区中.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="comment">//获取到mbbi中索引为i的字节</span></span><br><span class="line">            <span class="keyword">byte</span> b = mbbi.get();</span><br><span class="line">            <span class="comment">//将获取到的放入到mbbo中</span></span><br><span class="line">            mbbo.put(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//记录时间</span></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(end - start);</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        target.close();</span><br><span class="line">        source.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="SocketChannel网络通信"><a href="#SocketChannel网络通信" class="headerlink" title="SocketChannel网络通信"></a>SocketChannel网络通信</h4><h5 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h5><p>SocketChannel表示客户端通道，我们可以使用该类表示TCP中的客户端。</p>
<p>如何获取SocketChannel</p>
<ul>
<li><code>static SocketChannel open()</code>：获取SocketChannel</li>
</ul>
<p>SocketChannel方法：</p>
<ul>
<li><code>boolean connect(SocketAddress remote)</code>：连接服务器。参数是目标服务器的IP地址以及端口号</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取SocketChannel对象</span></span><br><span class="line">        SocketChannel socketChannel = SocketChannel.open();</span><br><span class="line">        <span class="comment">//连接服务器</span></span><br><span class="line">        socketChannel.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">"localhost"</span>, <span class="number">8888</span>));</span><br><span class="line">        <span class="comment">//给服务器发送数据</span></span><br><span class="line">        <span class="comment">//将要发送的数据封装到缓冲区中</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.wrap(<span class="string">"你好"</span>.getBytes());</span><br><span class="line">        <span class="comment">//将数据发送给服务器</span></span><br><span class="line">        socketChannel.write(buffer);</span><br><span class="line">        <span class="comment">//接收服务器回复过来的数据</span></span><br><span class="line">        <span class="comment">//创建一个长度是1024的缓冲区，用来接收服务器回复过来的数据</span></span><br><span class="line">        ByteBuffer buffer2 = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        <span class="comment">//接收服务器的数据</span></span><br><span class="line">        socketChannel.read(buffer2);</span><br><span class="line">        <span class="comment">//缩小limit限制</span></span><br><span class="line">        buffer2.flip();</span><br><span class="line">        <span class="comment">//将缓冲区的内容转成字符串输出。</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(buffer2.array(), <span class="number">0</span>, buffer2.limit()));</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        socketChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h5><p>ServerSocketChannel是服务器通道，我们可以使用这个类来表示TCP端的服务器。</p>
<p>ServerSocketChannel获取方式：</p>
<ul>
<li><code>static ServerSocketChannel open()</code>：获取ServerSocketChannel对象。</li>
</ul>
<p>ServerSocketChannel其他方法；</p>
<ul>
<li><p><code>ServerSocketChannel bind(SocketAddress local)</code>：参数要绑定自己程序的端口号。</p>
</li>
<li><p><code>SocketChannel accept()</code>：监听并获取客户端的请求（通道）</p>
</li>
<li><p><code>SelectableChannel configureBlocking(boolean block)</code>：设置是否为阻塞状态，如果是false，表示非阻塞</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取服务器通道</span></span><br><span class="line">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line">        <span class="comment">//设置服务器为非阻塞</span></span><br><span class="line">        <span class="comment">//serverSocketChannel.configureBlocking(false);</span></span><br><span class="line">        <span class="comment">//给服务器绑定端口号</span></span><br><span class="line">        serverSocketChannel.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">8888</span>));</span><br><span class="line">        <span class="comment">//监听客户端的请求</span></span><br><span class="line">        SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line">        System.out.println(<span class="string">"有客户端来连接了"</span>);</span><br><span class="line">        <span class="comment">//获取客户端发送过来的数据</span></span><br><span class="line">        <span class="comment">//定义ByteBuffer用来保存客户端发来的数据</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        <span class="comment">//通过通道接受数据</span></span><br><span class="line">        socketChannel.read(buffer);</span><br><span class="line">        <span class="comment">//缩小limit范围。</span></span><br><span class="line">        buffer.flip();</span><br><span class="line">        <span class="comment">//输出读取到的内容</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(buffer.array(), <span class="number">0</span>, buffer.limit()));</span><br><span class="line">        <span class="comment">//给客户端回复数据</span></span><br><span class="line">        <span class="comment">//创建缓冲区，用来保存发送的数据</span></span><br><span class="line">        ByteBuffer buffer2 = ByteBuffer.wrap(<span class="string">"收到"</span>.getBytes());</span><br><span class="line">        <span class="comment">//使用通道将数据写给客户端</span></span><br><span class="line">        socketChannel.write(buffer2);</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        socketChannel.close();</span><br><span class="line">        serverSocketChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Selector选择器"><a href="#Selector选择器" class="headerlink" title="Selector选择器"></a>Selector选择器</h3><p>Selector选择器可以实现多路复用的效果。我们可以使用一个Selector监听三个服务器的状态，哪个服务器有客户端来请求了，那么我们就可以让哪个服务器去处理客户端的请求。</p>
<p>如何获取Selector选择器：</p>
<ul>
<li><code>static Selector open()</code>：获取一个选择器。</li>
</ul>
<p>如何将通道注册到选择器：</p>
<ul>
<li><p><code>channel.configureBlocking(false)</code>：将通道设置为非阻塞。</p>
</li>
<li><p><code>SelectionKey key = channel.register(selector,SelectionKey.OP_ACCEPT)</code>：参数selector表示选择器。<code>SelectionKey.OP_ACCEPT</code>表示监听服务器接受就绪事件。</p>
</li>
</ul>
<p>Selector选择器中的方法：</p>
<ul>
<li><p><code>Set&lt;SelectionKey&gt; keys()</code>：获取已经注册到选择器的通道（编号）并放入到Set集合中返回。 SelectionKey可以理解为通道的编号</p>
</li>
<li><p><code>Set&lt;SelectionKey&gt; selectedKeys()</code>: 获取已经连接的通道（编号）并放入到Set集合中返回。</p>
</li>
<li><p><code>int select()</code>：调用select方法后，程序会等着，一直到有客户端来连接。</p>
</li>
</ul>
<h4 id="Selector的基本使用"><a href="#Selector的基本使用" class="headerlink" title="Selector的基本使用"></a>Selector的基本使用</h4><p>要求：使用Selector选择器监听三个服务器的状态。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Selector</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建三个服务器，并将三个服务器设置为非阻塞</span></span><br><span class="line">        ServerSocketChannel serverSocketChannelOne = ServerSocketChannel.open();</span><br><span class="line">        serverSocketChannelOne.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">7777</span>));</span><br><span class="line">        serverSocketChannelOne.configureBlocking(<span class="keyword">false</span>);<span class="comment">//设置为非阻塞</span></span><br><span class="line"></span><br><span class="line">        ServerSocketChannel serverSocketChannelTwo = ServerSocketChannel.open();</span><br><span class="line">        serverSocketChannelTwo.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">8888</span>));</span><br><span class="line">        serverSocketChannelTwo.configureBlocking(<span class="keyword">false</span>);<span class="comment">//设置为非阻塞</span></span><br><span class="line"></span><br><span class="line">        ServerSocketChannel serverSocketChannelThree = ServerSocketChannel.open();</span><br><span class="line">        serverSocketChannelThree.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">9999</span>));</span><br><span class="line">        serverSocketChannelThree.configureBlocking(<span class="keyword">false</span>);<span class="comment">//设置为非阻塞</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取Selector选择器</span></span><br><span class="line">        Selector selector = Selector.open();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//让上面三个服务器通道注册到Selector选择器上</span></span><br><span class="line">        serverSocketChannelOne.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">        serverSocketChannelTwo.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">        serverSocketChannelThree.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//死循环，让程序一直执行(选择器一直监听服务器通道的状态)</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//调用选择器的select方法，等着客户端来连接服务器</span></span><br><span class="line">            selector.select();</span><br><span class="line">            <span class="comment">//如果程序向下执行，表示有客户端来连接了。就获取已经连接的服务器通道</span></span><br><span class="line">            Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class="line">            <span class="comment">//获取迭代器</span></span><br><span class="line">            Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();</span><br><span class="line">            <span class="comment">//遍历</span></span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                <span class="comment">//获取遍历到的元素</span></span><br><span class="line">                SelectionKey selectionKey = iterator.next();</span><br><span class="line">                <span class="comment">//通过selectionKey获取到通道</span></span><br><span class="line">                ServerSocketChannel serverSocketChannel = (ServerSocketChannel) selectionKey.channel();</span><br><span class="line">                <span class="comment">//让服务器监听客户端请求</span></span><br><span class="line">                SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line">                <span class="comment">//获取缓冲区，用来保存接收到的数据</span></span><br><span class="line">                ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">                <span class="comment">//进行读取</span></span><br><span class="line">                socketChannel.read(buffer);</span><br><span class="line">                <span class="comment">//缩小缓冲区的limit范围</span></span><br><span class="line">                buffer.flip();</span><br><span class="line">                <span class="comment">//输出读取到的内容</span></span><br><span class="line">                System.out.println(<span class="keyword">new</span> String(buffer.array(), <span class="number">0</span>, buffer.limit()));</span><br><span class="line">                <span class="comment">//客户端通道关闭</span></span><br><span class="line">                socketChannel.close();</span><br><span class="line">                <span class="comment">//如果某个服务器处理完了客户端请求，那么就从集合中删除。</span></span><br><span class="line">                iterator.remove();<span class="comment">//删除遍历的元素</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//获取SocketChannel</span></span><br><span class="line">                SocketChannel socketChannel = SocketChannel.open();</span><br><span class="line">                <span class="comment">//连接服务器</span></span><br><span class="line">                socketChannel.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">"localhost"</span>, <span class="number">7777</span>));</span><br><span class="line">                <span class="comment">//准备缓冲区，保存要发送的数据</span></span><br><span class="line">                ByteBuffer buffer = ByteBuffer.wrap(<span class="string">"我要连接7777"</span>.getBytes());</span><br><span class="line">                <span class="comment">//将数据发给服务器</span></span><br><span class="line">                socketChannel.write(buffer);</span><br><span class="line">                <span class="comment">//释放资源</span></span><br><span class="line">                socketChannel.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//获取SocketChannel</span></span><br><span class="line">                SocketChannel socketChannel = SocketChannel.open();</span><br><span class="line">                <span class="comment">//连接服务器</span></span><br><span class="line">                socketChannel.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">"localhost"</span>, <span class="number">8888</span>));</span><br><span class="line">                <span class="comment">//准备缓冲区，保存要发送的数据</span></span><br><span class="line">                ByteBuffer buffer = ByteBuffer.wrap(<span class="string">"我要连接8888"</span>.getBytes());</span><br><span class="line">                <span class="comment">//将数据发给服务器</span></span><br><span class="line">                socketChannel.write(buffer);</span><br><span class="line">                <span class="comment">//释放资源</span></span><br><span class="line">                socketChannel.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//获取SocketChannel</span></span><br><span class="line">                SocketChannel socketChannel = SocketChannel.open();</span><br><span class="line">                <span class="comment">//连接服务器</span></span><br><span class="line">                socketChannel.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">"localhost"</span>, <span class="number">9999</span>));</span><br><span class="line">                <span class="comment">//准备缓冲区，保存要发送的数据</span></span><br><span class="line">                ByteBuffer buffer = ByteBuffer.wrap(<span class="string">"我要连接9999"</span>.getBytes());</span><br><span class="line">                <span class="comment">//将数据发给服务器</span></span><br><span class="line">                socketChannel.write(buffer);</span><br><span class="line">                <span class="comment">//释放资源</span></span><br><span class="line">                socketChannel.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="AIO"><a href="#AIO" class="headerlink" title="AIO"></a>AIO</h3><p>AIO有关的通道：</p>
<ul>
<li><p><code>AsynchronousSocketChannel</code>：TCP中的客户端异步通道</p>
</li>
<li><p><code>AsynchronousServerSocketChannel</code>：TCP中的服务器异步通道</p>
</li>
<li><p><code>AsynchronousFileChannel</code>：文件操作的异步通道</p>
</li>
<li><p><code>AsynchronousDatagramChannel</code>：UDP通信异步通道</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//获取一个异步服务器通道</span></span><br><span class="line">        AsynchronousServerSocketChannel asynchronousServerSocketChannel = AsynchronousServerSocketChannel.open();</span><br><span class="line">        <span class="comment">//绑定端口号</span></span><br><span class="line">        asynchronousServerSocketChannel.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">8888</span>));</span><br><span class="line">        <span class="comment">//监听客户端的请求</span></span><br><span class="line">        Future&lt;AsynchronousSocketChannel&gt; accept = asynchronousServerSocketChannel.accept();</span><br><span class="line">        <span class="comment">//调用get方法，获取服务器监听到的客户端通道</span></span><br><span class="line">        AsynchronousSocketChannel asynchronousSocketChannel = accept.get();</span><br><span class="line">        <span class="comment">//创建ByteBuffer缓冲区，用来接收读取到的数据</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        <span class="comment">//调用read方法进行读取</span></span><br><span class="line">        Future&lt;Integer&gt; readFuture = asynchronousSocketChannel.read(buffer);</span><br><span class="line">        <span class="comment">//判断如果read方法没有读取结束，那么就去干一些其他事情</span></span><br><span class="line">        <span class="keyword">if</span> (!readFuture.isDone()) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//缩小缓冲区limit限制</span></span><br><span class="line">        buffer.flip();</span><br><span class="line">        <span class="comment">//输出读取到的结果</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(buffer.array(), <span class="number">0</span>, buffer.limit()));</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        asynchronousSocketChannel.close();</span><br><span class="line">        asynchronousServerSocketChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    AsynchronousSocketChannel：TCP中的客户端异步通道</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//获取客户端异步通道</span></span><br><span class="line">        AsynchronousSocketChannel asynchronousSocketChannel = AsynchronousSocketChannel.open();</span><br><span class="line">        <span class="comment">//连接服务器</span></span><br><span class="line">        Future&lt;Void&gt; future = asynchronousSocketChannel.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">"localhost"</span>, <span class="number">8888</span>));</span><br><span class="line">        <span class="comment">//判断如果连接没有建立成功，就做一些其他事情</span></span><br><span class="line">        <span class="keyword">if</span>(!future.isDone()) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//让客户端给服务器发送数据</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.wrap(<span class="string">"你好"</span>.getBytes());</span><br><span class="line">        <span class="comment">//调用方法，发送数据</span></span><br><span class="line">        asynchronousSocketChannel.write(buffer);</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        asynchronousSocketChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>学习</tag>
        <tag>NIO</tag>
        <tag>AIO</tag>
      </tags>
  </entry>
  <entry>
    <title>反射、注解、动态代理</title>
    <url>/2020/08/11/%E5%8F%8D%E5%B0%84%E3%80%81%E6%B3%A8%E8%A7%A3%E3%80%81%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h2 id="一、类加载器"><a href="#一、类加载器" class="headerlink" title="一、类加载器"></a>一、类加载器</h2><h3 id="1-1-类的加载时机"><a href="#1-1-类的加载时机" class="headerlink" title="1.1 类的加载时机"></a>1.1 类的加载时机</h3><p>当我们第一次使用某个类时，这个类会加载到方法区。</p>
<ul>
<li>创建类的实例(创建对象)</li>
<li>类的静态变量，或者为静态变量赋值</li>
<li>类的静态方法</li>
<li>使用反射方式来强制创建某个类或接口对象的<code>java.lang.Class</code>对象。</li>
<li>初始化某个类的子类</li>
<li>直接使用java.exe命令来运行某个主类</li>
</ul>
<p>以上六种情况的任何一种，都可以导致JVM将一个类加载到方法区。</p>
<a id="more"></a>

<h3 id="1-2-类的加载机制"><a href="#1-2-类的加载机制" class="headerlink" title="1.2 类的加载机制"></a>1.2 类的加载机制</h3><p>Java中有三种类加载器，它们分别用于加载不同种类的class：</p>
<ul>
<li>启动类加载器(Bootstrap ClassLoader)：用于加载系统类库\bin目录下的 class，例如：rt.jar。</li>
<li>扩展类加载器(Extension ClassLoader)：：用于加载扩展类库<JAVA_HOME>\lib\ext目录下的<br>  class。</li>
<li>应用程序类加载器(Application ClassLoader)：用于加载我们自定义类的加载器。</li>
</ul>
<h4 id="1-2-1-双亲委派机制"><a href="#1-2-1-双亲委派机制" class="headerlink" title="1.2.1 双亲委派机制"></a>1.2.1 双亲委派机制</h4><p><img data-src="/image/%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%88%B6.png" alt="双亲委派机制"></p>
<h2 id="二、反射"><a href="#二、反射" class="headerlink" title="二、反射"></a>二、反射</h2><h3 id="1-1-反射的概念"><a href="#1-1-反射的概念" class="headerlink" title="1.1 反射的概念"></a>1.1 反射的概念</h3><ul>
<li>反射是一种机制，利用该机制可以在程序运行过程中对类进行解剖并操作类中的所有成员(成员变量，成员方<br>  法，构造方法)</li>
</ul>
<blockquote>
<p>使用反射的前提：要获得该类字节码文件对象，就是Class对象。</p>
<p>反射的应用：</p>
<ul>
<li>开发IDE(集成开发环境)，比如IDEA,Eclipse</li>
<li>各种框架的设计和学习 比如Spring，Hibernate，Mybaits….</li>
</ul>
</blockquote>
<p>反射图解：</p>
<p><img data-src="/image/%E5%8F%8D%E5%B0%84.png" alt="反射"></p>
<h3 id="1-2-获取Class对象的三种方式"><a href="#1-2-获取Class对象的三种方式" class="headerlink" title="1.2 获取Class对象的三种方式"></a>1.2 获取Class对象的三种方式</h3><ol>
<li><p>通过对象调用getClass方法获取</p>
<ul>
<li><code>Class getClass()</code>:获取类的Class对象</li>
</ul>
</li>
<li><p>通过类名调用Class属性获取</p>
<ul>
<li><code>类名.class</code></li>
</ul>
</li>
<li><p>通过Class的静态方法forName获取</p>
<ul>
<li><code>static Class forName(String className)</code>：根据全类名获取对应的Class对象</li>
</ul>
</li>
</ol>
<p>代码示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01GetClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        Class&lt;? extends Person&gt; pClass = p.getClass();</span><br><span class="line">        System.out.println(pClass);</span><br><span class="line"></span><br><span class="line">        Class personClass = Person<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        System.out.println(personClass);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">"com.sun.demo02_reflect.Person"</span>);</span><br><span class="line">        System.out.println(aClass);</span><br><span class="line"></span><br><span class="line">        System.out.println(pClass == personClass);</span><br><span class="line">        System.out.println(aClass == personClass);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小贴士：</p>
<ul>
<li>一个类的Class对象只有一个，不管怎么获取，获取的都是同一个。</li>
</ul>
</blockquote>
<h4 id="1-2-1-Class中的常见方法"><a href="#1-2-1-Class中的常见方法" class="headerlink" title="1.2.1 Class中的常见方法"></a>1.2.1 Class中的常见方法</h4><ul>
<li><code>String getName()</code>:获取全限定类名(包名+类名)</li>
<li><code>String getSimpleName()</code>:获取简单类名</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Method</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取Person类的Class</span></span><br><span class="line">        Class personClass = Person<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        <span class="comment">//String getName():获取全限定类名</span></span><br><span class="line">        System.out.println(personClass.getName());</span><br><span class="line">        <span class="comment">//String getSimpleName():获取简单类名</span></span><br><span class="line">        System.out.println(personClass.getSimpleName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1-3-反射之操作构造函数"><a href="#1-3-反射之操作构造函数" class="headerlink" title="1.3 反射之操作构造函数"></a>1.3 反射之操作构造函数</h3><p><code>Class</code>中有一些方法，可以拿到类中的<code>构造方法</code></p>
<ul>
<li><code>Constructor[] getConstructors()</code>：获取类中所有的构造方法</li>
<li><code>Constructor getConstructors(Class... parameterTypes)</code>：获取类中指定的构造方法。参数表示要获取的构造方法的参数列表</li>
</ul>
<blockquote>
<p>注意：上面的方法，只能获取public权限的方法，其他权限获取不到</p>
</blockquote>
<p><code>Constructor</code>常用方法：</p>
<ul>
<li>T newInstance(Object… initargs)：通过该构造方法创建对象。<ul>
<li>参数initargs：通过构造方法创建对象时传递的<strong>实际参数</strong></li>
<li>返回值：创建出来的对象</li>
</ul>
</li>
</ul>
<p>代码演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03Constructor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException </span>&#123;</span><br><span class="line">        <span class="comment">//method1();</span></span><br><span class="line">        <span class="comment">//method2();</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructor getConstructors(Class... parameterTypes)：获取类中指定的构造方法。参数表示要获取的构造方法的参数列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 获取空参的构造方法并使用构造方法创建对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line">        Class&lt;?&gt; personClass = Class.forName(<span class="string">"com.sun.demo02_reflect.Person"</span>);</span><br><span class="line">        <span class="comment">//因为没有传递任何参数，所以获取的是空参数的构造方法</span></span><br><span class="line">        Constructor&lt;?&gt; constructor = personClass.getConstructor();</span><br><span class="line">        <span class="comment">//newInstance小括号表示调用构造方法时的实际参数，因为调用的时空参数的构造方法，所有没有实际参数</span></span><br><span class="line">        Object obj = constructor.newInstance();</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructor[] getConstructors()：获取类中所有的构造方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        Class personClass = Class.forName(<span class="string">"com.sun.demo02_reflect.Person"</span>);</span><br><span class="line">        Constructor[] cs = personClass.getConstructors();</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Constructor c : cs) &#123;</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>获取带参数的构造方法：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04Constructor</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过反射获取Person类的带参数的构造方法，并根据该方法创建对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line">        Class&lt;?&gt; personClass = Class.forName(<span class="string">"com.sun.demo02_reflect.Person"</span>);</span><br><span class="line">        <span class="comment">//因为getConstructor第一个参数是String.class,第二个参数是int.class，所以表示获取的第一个参数为字符串，第二个参数为int的构造方法</span></span><br><span class="line">        Constructor&lt;?&gt; c = personClass.getConstructor(String<span class="class">.<span class="keyword">class</span>, <span class="title">int</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        <span class="comment">//根据该构造方法创建对象，因为在调用nreInstance方法的时候传递的两个参数分别是张三，18，所以表示调用构造方法时传递的实际参数为张三，18</span></span><br><span class="line">        Object obj = c.newInstance(<span class="string">"张三"</span>, <span class="number">18</span>);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-3-1-newInstance"><a href="#1-3-1-newInstance" class="headerlink" title="1.3.1 newInstance"></a>1.3.1 newInstance</h4><p>在Class中有一个方法叫newInstance,，可以十分方便的创建对象</p>
<ul>
<li><code>T newInstance()</code>:使用空参数的构造方法创建对象</li>
</ul>
<p>如果通过空参数的构造方法创建对象，那么不需要像之前那样先获取构造方法，然后通过构造方法创建对象了。</p>
<p>我们可以通过Class直接调用newInstance方法，利用空参数构造方法创建对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06NewInstance</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException </span>&#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">"com.sun.demo02_reflect.Person"</span>);</span><br><span class="line"></span><br><span class="line">        Object obj = clazz.newInstance();</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1-4-暴力反射"><a href="#1-4-暴力反射" class="headerlink" title="1.4 暴力反射"></a>1.4 暴力反射</h3><p>暴力反射：暴力反射可以<strong>获取</strong>类中<strong>任何权限</strong>的内容并使用。</p>
<blockquote>
<p>不推荐使用暴力反射，会破坏封装性</p>
</blockquote>
<p> 在Class中，有一些方法可以获取到类中的所有权限的构造方法：</p>
<ul>
<li><code>Constructor[] getDeclaredConstructors()</code>：获取类中所有的构造方法</li>
<li><code>Constructor getDeclaredConstructor(Class... parameterTypes)</code>：获取类中指定的构造方法，参数是构造方法的参数列表</li>
</ul>
<blockquote>
<p>上面的方法可以获取到任何权限的构造方法。</p>
<p>注意：通过上面的方法虽然可以获取到私有的成员，但是不能直接使用。因为Java中有一个权限检查机制，私有的东西是不能在外面使用的。我们可以取消这个权限检查机制。</p>
</blockquote>
<p>反射有关的类：</p>
<ul>
<li>Constructor：构造方法</li>
<li>Method：成员方法</li>
<li>Field：成员变量</li>
</ul>
<p>上面这三个类都有一个父类叫做AccessibleObject，在AccessibleObject中有一个方法可以取消检查机制。</p>
<ul>
<li><code>void setAccessible(boolean flag)</code>：如果参数是true表示取消权限检查</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05Constructor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException </span>&#123;</span><br><span class="line">        <span class="comment">//method();</span></span><br><span class="line">        method2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException, ClassNotFoundException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">"com.sun.demo02_reflect.Person"</span>);</span><br><span class="line">        Constructor&lt;?&gt; c = aClass.getDeclaredConstructor(String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//取消权限检查</span></span><br><span class="line">        c.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object obj = c.newInstance(<span class="string">"张三"</span>);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        Class aClass = Class.forName(<span class="string">"com.sun.demo02_reflect.Person"</span>);</span><br><span class="line">        Constructor[] dcs = aClass.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor dc : dcs) &#123;</span><br><span class="line">            System.out.println(dc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1-5-反射之操作成员方法"><a href="#1-5-反射之操作成员方法" class="headerlink" title="1.5 反射之操作成员方法"></a>1.5 反射之操作成员方法</h3><p>在Class中有一些功能，可以获取类中的成员方法</p>
<ul>
<li><code>Method[] getMethods()</code>:获取类中的所有成员方法</li>
<li><code>Method getMethod(String name, Class... parameterTypes)</code>：获取指定的成员方法。参数name表示要获取的方法的名字。参数parameterTypes表示方法的参数列表</li>
</ul>
<blockquote>
<p>注意：上面的的两个方法只能获取public权限的方法，不能获取其他权限</p>
<p><strong>如果想要获取其他权限的方法，需要使用暴力反射</strong></p>
</blockquote>
<p>其中Method表示方法，里面的功能：</p>
<ul>
<li><code>Object invoke(Object obj, Object... args)</code>:让该方法执行<ul>
<li>参数obj：表示通过哪个对象调用了该方法。如果是静态方法，该参数可以传递null</li>
<li>参数args：调用该方法时，传递的实际参数</li>
<li>返回值：表示方法调用后的返回值。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo07Method</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//method();</span></span><br><span class="line">        method1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Method getMethod(String name, Class... parameterTypes)：获取指定的成员方法。</span></span><br><span class="line"><span class="comment">     * 参数name表示要获取的方法的名字。参数parameterTypes表示方法的参数列表</span></span><br><span class="line"><span class="comment">     * 获取sleep方法并执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, InstantiationException </span>&#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">"com.sun.demo02_reflect.Person"</span>);</span><br><span class="line">        <span class="comment">//第一个参数表示方法的名字，</span></span><br><span class="line">        <span class="comment">//第二个参数时可变参数，该参数位置没有传递任何东西，表示获取的方法时空参数的方法</span></span><br><span class="line">        Method sleepMethod = clazz.getMethod(<span class="string">"sleep"</span>);</span><br><span class="line">        <span class="comment">//创建Person对象，以后调用方法时使用</span></span><br><span class="line">        Object obj = clazz.newInstance();</span><br><span class="line">        <span class="comment">//调用方法invoke，让sleep方法执行</span></span><br><span class="line">        <span class="comment">//因为通过sleepMethod调用了invoke方法，sleepMethod对象表示的时sleep方法，所有sleep方法执行了</span></span><br><span class="line">        <span class="comment">// 因为invoke方法第一个参数传递的时obj，表示obj调用了sleep</span></span><br><span class="line">        <span class="comment">// 因为invoke方法第二个参数没有传递任何数据，所以表示调用sleep方法时，没有传递任何内容，</span></span><br><span class="line">        sleepMethod.invoke(obj); <span class="comment">//相当于 obj.sleep()</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Method[] getMethods():获取类中的所有成员方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassNotFoundException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">"com.sun.demo02_reflect.Person"</span>);</span><br><span class="line">        Method[] methods = clazz.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>操作有参数有返回值的成员方法</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo08Method</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException </span>&#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">"com.sun.demo02_reflect.Person"</span>);</span><br><span class="line">        Method m = clazz.getMethod(<span class="string">"eat"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Object obj = m.invoke(clazz.newInstance(), <span class="string">"馒头"</span>);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>Person类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"睡觉觉。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">eat</span><span class="params">(String food)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"吃"</span> + food);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"粑粑"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Person</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    set\get略...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1-6-反射操作成员变量【了解】"><a href="#1-6-反射操作成员变量【了解】" class="headerlink" title="1.6 反射操作成员变量【了解】"></a>1.6 反射操作成员变量【了解】</h3><p>在Class中有一些方法可以获取到类中的成员变量</p>
<ul>
<li><code>Field[] getFields()</code>：获取类中所有的成员变量</li>
<li><code>Field getField(String name)</code>：获取类中指定的成员变量，参数是成员变量的名字。</li>
</ul>
<blockquote>
<p>上面的两个方法只能获取public权限的成员变量，其他权限无法获取。</p>
<p><strong>如果想要获取其他权限的方法，需要使用暴力反射</strong></p>
</blockquote>
<p>Field表示成员变量，里面功能：</p>
<ul>
<li>void set(Object obj, Object value):给成员变量赋值。<ul>
<li>参数obj：表示给哪个对象的成员变量赋值。</li>
<li>参数value：将该成员变量赋成什么值</li>
</ul>
</li>
<li>Object get(Object obj)：获取成员变量的值。<ul>
<li>参数obj：表示获取哪个对象的成员变量的值。</li>
<li>返回值：获取到的结果</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo09ReflectField</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取Person类的hobby属性，然后进行赋值取值操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException, InstantiationException </span>&#123;</span><br><span class="line">        <span class="comment">//获取Person类的Class</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.itheima.demo01_reflect.Person"</span>);</span><br><span class="line">        <span class="comment">//获取Person类中的hobby属性</span></span><br><span class="line">        Field field = clazz.getField(<span class="string">"hobby"</span>);</span><br><span class="line">        <span class="comment">//创建Person对象</span></span><br><span class="line">        Object obj = clazz.newInstance();</span><br><span class="line">        <span class="comment">//给对象hobby属性赋值</span></span><br><span class="line">        field.set(obj, <span class="string">"写代码"</span>); <span class="comment">//相当于 obj.hobby = "写代码";</span></span><br><span class="line">        System.out.println(obj);</span><br><span class="line">        <span class="comment">//获取hobby属性的值</span></span><br><span class="line">        <span class="comment">//获取obj的hobby属性的值</span></span><br><span class="line">        Object result = field.get(obj);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1-7-反射练习"><a href="#1-7-反射练习" class="headerlink" title="1.7 反射练习"></a>1.7 反射练习</h3><p>要求：将类名和方法名放到文件中，通过读取文件的方式决定创建哪个类的对象以及调用哪个方法</p>
<p>步骤：</p>
<ol>
<li>创建配置文件，保存类名和方法名</li>
<li>创建Properties集合</li>
<li>创建输入流</li>
<li>调用load方法，将文件的键值对加载到集合中</li>
<li>调用Properties集合根据建获取值</li>
<li>获取该类的Class文件</li>
<li>通过Class调用getMethod，获取对应的方法</li>
<li>让方法执行</li>
</ol>
<p>代码示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException, IOException </span>&#123;</span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">        FileInputStream in = <span class="keyword">new</span> FileInputStream(<span class="string">"day17\\prop.properties"</span>);</span><br><span class="line">        prop.load(in);</span><br><span class="line">        in.close();</span><br><span class="line">        Class&lt;?&gt; name = Class.forName(prop.getProperty(<span class="string">"className"</span>));</span><br><span class="line">        Method m = name.getMethod(prop.getProperty(<span class="string">"methodName"</span>));</span><br><span class="line">        Object obj = name.newInstance();</span><br><span class="line">        Object invoke = m.invoke(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"老师讲课..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"学生学习..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置文件内容</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">className</span> = <span class="string">com.sun.demo03_reflect_test.Student</span></span><br><span class="line"><span class="attr">methodName</span> = <span class="string">study</span></span><br></pre></td></tr></table></figure>



<h2 id="三、注解"><a href="#三、注解" class="headerlink" title="三、注解"></a>三、注解</h2><h3 id="3-1-注解介绍"><a href="#3-1-注解介绍" class="headerlink" title="3.1 注解介绍"></a>3.1 注解介绍</h3><ul>
<li><p>注解是JDK1.5开始有的</p>
</li>
<li><p>注解可以加在<strong>类</strong>上，<strong>方法</strong>上，<strong>变量</strong>上</p>
</li>
<li><p>程序可以根据注解完成一些功能</p>
</li>
</ul>
<blockquote>
<p>注释和注解：</p>
<ul>
<li>注释：是给程序员看的，注释不会被编译执行</li>
<li>注解：是给程序看的，程序可以根据注解完成一些功能</li>
</ul>
</blockquote>
<p><strong>常见的注解：</strong></p>
<ul>
<li><code>@Override</code>：该注解用来验证一个方法是否重写父类的方法</li>
<li><code>@FunctionalInterface</code>：该注解用来验证一个接口是否是函数式接口。</li>
<li><code>@Deprecated</code>：标记已过时</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Anno</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        method();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"method..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-2-自定义注解"><a href="#3-2-自定义注解" class="headerlink" title="3.2 自定义注解"></a>3.2 自定义注解</h3><p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> 注解名&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在注解中可以提供一些属性，格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数据类型 属性名();</span><br><span class="line">数据类型 属性名() <span class="keyword">default</span> 默认值;</span><br></pre></td></tr></table></figure>

<p><strong>注意，注解的属性只能是下面这个类型：</strong></p>
<ul>
<li>八种基本类型 byte short int long float double char boolean</li>
<li>String，Class，枚举，注解</li>
<li>以上所有类型的数组</li>
</ul>
<p><strong>注解的使用格式</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">@注解名</span><br><span class="line">@注解名(属性名<span class="number">1</span>=属性值<span class="number">1</span>,属性名<span class="number">2</span>=属性值,...)</span><br></pre></td></tr></table></figure>



<p>代码示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Student &#123;</span><br><span class="line">    <span class="comment">//姓名</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//年龄</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line">    <span class="comment">//爱好</span></span><br><span class="line">    String[] hobbies();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Anno</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Student</span>(name = <span class="string">"张三"</span>,hobbies = &#123;<span class="string">"唱"</span>,<span class="string">"跳"</span>,<span class="string">"rap"</span>,<span class="string">"篮球"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-1-注解使用的注解事项"><a href="#3-2-1-注解使用的注解事项" class="headerlink" title="3.2.1 注解使用的注解事项"></a>3.2.1 注解使用的注解事项</h4><ul>
<li>如果注解中有属性没有默认值，那么在使用时，必须给这些属性赋值</li>
<li>如果注解中的属性有默认值，那么在使用注解时，可以不赋值</li>
<li>如果直接的属性是数组类型，那么在赋值时可以用大括号包裹多个元素</li>
<li>如果注解的属性是数组类型时，并且只赋值一个元素的情况下，可以省略大括号</li>
</ul>
<h4 id="3-2-2-注解中的特殊属性value"><a href="#3-2-2-注解中的特殊属性value" class="headerlink" title="3.2.2 注解中的特殊属性value"></a>3.2.2 注解中的特殊属性value</h4><p><strong>如果注解中只有一个没有默认值的属性，并且这个属性叫做value，那么在给该属性赋值时，可以省略属性名，否则必须写全。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Book &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供value属性：表示书名</span></span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @Book(value = "Java")</span></span><br><span class="line"><span class="meta">@Book</span>(<span class="string">"Java"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03Anno</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-3-元注解"><a href="#3-3-元注解" class="headerlink" title="3.3 元注解"></a>3.3 元注解</h3><h4 id="3-3-1-介绍"><a href="#3-3-1-介绍" class="headerlink" title="3.3.1 介绍"></a>3.3.1 介绍</h4><ul>
<li>元注解本身就是注解</li>
<li>元注解是修饰注解的注解</li>
</ul>
<p><strong>常见的元注解：</strong></p>
<ul>
<li><code>@Target</code>：用来限制注解的使用位置</li>
<li><code>@Retention</code>：用来限制注解的生命周期</li>
</ul>
<h4 id="3-3-2-Target"><a href="#3-3-2-Target" class="headerlink" title="3.3.2 @Target"></a>3.3.2 @Target</h4><p><code>@Target</code>是一个元注解</p>
<p><strong>作用：</strong>这个元注解用来限制注解的使用位置。如果某个注解<strong>不使用@Target进行修饰</strong>，那么这个注解<strong>可以用在任何位置</strong>（类上,方法上,变量上…）</p>
<p>在@Target这个元注解中，只有一个属性叫做value，那么在给该属性赋值时，可以省略属性名。value属性表示被修饰的注解可以在哪个位置使用</p>
<ul>
<li>这个value是ElementType数组类型的，ElementType是枚举类型，枚举就是特殊的类，枚举中的每一个属性都是自身的一个对象</li>
<li>在给value属性赋值时，我们需要使用<strong>ElementType</strong>中的<strong>属性</strong>，每一个属性都有自己的作用：<ul>
<li><code>ElementType.TYPE</code>，类、接口</li>
<li><code>ElementType.FIELD</code>，成员变量</li>
<li><code>ElementType.METHOD</code>，成员方法</li>
<li><code>ElementType.PARAMETER</code>，方法参数</li>
<li><code>ElementType.CONSTRUCTOR</code>，构造方法</li>
<li><code>ElementType.LOCAL_VARIABLE</code>，局部变量</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @Target(ElementType.TYPE) //被修饰的注解只能用在类上</span></span><br><span class="line"><span class="comment">// @Target(ElementType.METHOD) //被修饰的注解只能用在方法上</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE,ElementType.METHOD&#125;)  <span class="comment">//被修饰的注解可以用在类以及方法上，</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnno &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-3-3-Retention"><a href="#3-3-3-Retention" class="headerlink" title="3.3.3 @Retention"></a>3.3.3 @Retention</h4><p><code>@Retention</code>这个元注解设置注解的生命周期，如果某个注解不使用@Retention进行修饰，那么该注解在源代码阶段以及编译后的.class中有效，一旦运行，就会消失。</p>
<p>@Retention里面有一个属性叫做value，该属性表示被修饰的注解的生命周期，这个value是RetentionPolicy类型的</p>
<ul>
<li>RetentionPolicy是枚举类型，我们使用@Retention元注解时，可以给value属性赋值为<strong>RetentionPolicy属性值</strong>：<ul>
<li><code>RetentionPolicy.SOURCE</code>:被修饰的注解只在源代码中有效，在编译后的.class以及运行时期内存中是没有的</li>
<li><code>RetentionPolicy.CLASS</code>：被修饰的注解在源代码阶段以及编译后的class文件中有效，在运行时器内存中是没有的【<strong>默认值</strong>】</li>
<li><code>RetentionPolicy.RUNTIME</code>：被修饰的注解，在源代码阶段和以及编译后的class文件、运行时器内存中都有效。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.SOURCE) <span class="comment">//被修饰的注解只在源代码阶段有效</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnno &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.CLASS) <span class="comment">//被修饰的注解在源代码阶段和class文件中有效</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnno2 &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME) <span class="comment">//被修饰的注解在任何时候都有效</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnno3&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-4-注解的解析"><a href="#3-4-注解的解析" class="headerlink" title="3.4 注解的解析"></a>3.4 注解的解析</h3><p><strong>注解解析</strong>：就是获取注解中的内容【属性】，然后使用。</p>
<p><strong>解析相关API：</strong></p>
<ul>
<li><p><code>Annotation</code>：是所有注解的跟接口，所有的注解都会默认实现这个接口</p>
</li>
<li><p><code>AnnotatedElement</code>：这个接口定义了操作注解的方法</p>
<ul>
<li><code>Annotation[] getAnnotations()</code>：获取所有的注解</li>
<li><code>T getAnnotation(Class annotationClass)</code>：获取指定的注解。参数表示注解的CLass</li>
<li><code>boolean isAnnotationPresent(Class annotationClass)</code>：判断是否存在指定的注解，参数是注解的Class</li>
</ul>
</li>
</ul>
<blockquote>
<p>反射有关的类：Class、Constructor、Method、Filed 都实现了AnnotatedElement这个接口。</p>
</blockquote>
<p>注解的解析要结合反射技术实现：</p>
<ul>
<li>如果要操作类上的注解，通过Class对象调用上面的方法进行操作</li>
<li>如果要操作构造方法上的注解，通过Constructor对象调用上面的方法进行操作</li>
<li>如果要操作成员方法上的注解，通过Method对象调用上面的方法进行操作</li>
</ul>
<h4 id="3-4-1-练习"><a href="#3-4-1-练习" class="headerlink" title="3.4.1 练习"></a>3.4.1 练习</h4><p>要求：</p>
<ul>
<li>定义一个Book注解类里面定义一些属性</li>
<li>定义一个BookStore类，在该类上加上定义好的注解。</li>
<li>获取注解的属性并输出</li>
</ul>
<p>分析：获取BookStore类上面的注解，可以先获取BookStore对象的CLass对象，通过Class对象调用注解解析有关的方法就是在操作BookStore类上的注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)<span class="comment">//设置注解在运行时也有效</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Book &#123;</span><br><span class="line">    <span class="comment">//书名</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//价格</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">price</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//作者</span></span><br><span class="line">    <span class="function">String <span class="title">author</span><span class="params">()</span> <span class="keyword">default</span> "佚名"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Book</span>(name = <span class="string">"水浒传"</span>,price = <span class="number">100</span>,author = <span class="string">"施耐庵"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookStore</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01ParseAnno</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.sun.demo07_parse_anno.BookStore"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> flag = clazz.isAnnotationPresent(Book<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(flag);</span><br><span class="line">        <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">            <span class="comment">//条件成立，表示BookStore上有注解，那么就可以获取注解</span></span><br><span class="line">            Annotation anno = clazz.getAnnotation(Book<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="comment">//向下转型，将Annotation向下转成Book</span></span><br><span class="line">            Book book = (Book) anno;</span><br><span class="line">            <span class="comment">//获取属性</span></span><br><span class="line">            System.out.println(book.name());</span><br><span class="line">            System.out.println(book.author());</span><br><span class="line">            System.out.println(book.price());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：在定义注解时一定要指定注解的生命周期，不然则默认使用RetentionPolicy.CLASS属性值，导致解析不到，因为注解并没有跟随程序进入运行内存，需要指定生命周期为@Retention(RetentionPolicy.RUNTIME)，运行时也有效，才能被解析到。</p>
</blockquote>
<h3 id="3-5-练习——模拟单元测试"><a href="#3-5-练习——模拟单元测试" class="headerlink" title="3.5 练习——模拟单元测试"></a>3.5 练习——模拟单元测试</h3><p>要求：自定义@MyTest注解，然后在一个类中的多个方法上使用@MyTest注解，然后运行带有@MyTest注解的方法。</p>
<p>步骤：</p>
<ol>
<li>获取TestDemo的Class对象<ol start="2">
<li>创建TestDemo对象</li>
</ol>
</li>
<li>通过Class对象调用getMethods获取所有的成员方法</li>
<li>遍历这些成员方法，拿到里面的每一个方法（Method）</li>
<li>判断该方法上有没有@MyTest注解。</li>
<li>如果有该注解，就让这个方法执行。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.METHOD) <span class="comment">//限制该注解只能用在方法上</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME) <span class="comment">//在运行时内存中也有效</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyTest &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"methodOne"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@MyTest</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodTwo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"methodTwo"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodThree</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"methodThree"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@MyTest</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodFour</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"methodFour"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodFive</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"methodFive"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalAccessException, InstantiationException, ClassNotFoundException, InvocationTargetException </span>&#123;</span><br><span class="line">        Class testDemo = Class.forName(<span class="string">"com.sun.demo08_anno_test.TestDemo"</span>);</span><br><span class="line">        Object obj = testDemo.newInstance();</span><br><span class="line">        Method[] methods = testDemo.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> flag = method.isAnnotationPresent(MyTest<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">                method.invoke(obj);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="四、动态代理"><a href="#四、动态代理" class="headerlink" title="四、动态代理"></a>四、动态代理</h2><p><strong>动态代理</strong>：可以对一个类(对象)的功能进行<strong>增强</strong>。</p>
<ul>
<li>动态：会在程序运行过程中，创建一个代理类以及对象</li>
<li>代理：会创建一个代理对象对原有的对象进行增强。</li>
</ul>
<p>在Proxy类中有一个方法，叫做<code>newProxyInstance</code>，这个方法可以创建一个代理对象：</p>
<ul>
<li><code>static Object newProxyInstance(ClassLoader loader, Class[] interfaces, InvocationHandler h)</code>：该方法可以创建动态代理对象并返回<ul>
<li><code>参数loader</code>：表示类加载器，<strong>固定写法，当前类.class.getClassLoader();</strong></li>
<li><code>参数interfaces</code>：代理对象实现的接口.这些接口一般与被代理对象实现的接口一致。<strong>固定写法：被代理对象.getClass.getInterfaces();</strong></li>
<li><code>参数h</code>：参数时InvocationHandle类型，表示执行处理类(真正是接口)，里面有一个<strong>方法叫做invoke</strong></li>
</ul>
</li>
</ul>
<p><code>Object invoke(Object proxy, Method method, Object[] args)</code>：<strong>这个invoke方法会在每次动态代理对象调用任何方法的时候执行</strong></p>
<ul>
<li><strong>参数proxy：表示代理对象</strong></li>
<li><strong>参数method：代理对象调用的方法</strong></li>
<li><strong>参数args：代理对象调用方法时的实际参数</strong></li>
<li><strong>返回值：代理对象调用方法后产出结果</strong></li>
</ul>
<p>代码演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 小汽车接口，里面定义了小汽车的功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Carable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跑</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 说话</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">say</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">implements</span> <span class="title">Carable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"小汽车在跑..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"有人按喇叭了..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"滴滴"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01ProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Carable car = <span class="keyword">new</span> Car();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个动态代理对象【对Car进行代理，进行增强】</span></span><br><span class="line">        Carable superCar = (Carable) Proxy.newProxyInstance(Demo01ProxyTest<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>(), <span class="title">car</span>.<span class="title">getClass</span>().<span class="title">getInterfaces</span>(), <span class="title">new</span> <span class="title">InvocationHandler</span>() </span>&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="comment">//判断调用的方法是不是run,如果是run，在正确</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"run"</span>.equals(method.getName()))&#123;</span><br><span class="line">                    System.out.println(<span class="string">"跑着跑着飞起来了"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//System.out.println(method);</span></span><br><span class="line">                <span class="comment">//通过被代理对象调用method方法，让方法去执行[放行操作]</span></span><br><span class="line">                Object obj = method.invoke(car,args);</span><br><span class="line">                <span class="keyword">return</span> obj;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        superCar.run();</span><br><span class="line">        String result = superCar.say();</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>反射</tag>
        <tag>注解</tag>
        <tag>动态代理</tag>
      </tags>
  </entry>
  <entry>
    <title>XML、dom4j、JDK8新特性</title>
    <url>/2020/08/12/XML%E3%80%81dom4j%E3%80%81JDK8%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h2 id="一、XML"><a href="#一、XML" class="headerlink" title="一、XML"></a>一、XML</h2><h3 id="1-1-xml介绍"><a href="#1-1-xml介绍" class="headerlink" title="1.1 xml介绍"></a>1.1 xml介绍</h3><p>Extensible markup language：可扩展标记语言</p>
<ul>
<li>可扩展：标签都是自定义的</li>
</ul>
<p><strong>作用：存储数据，传输数据</strong></p>
<a id="more"></a>

<h3 id="1-2-xml语法"><a href="#1-2-xml语法" class="headerlink" title="1.2 xml语法"></a>1.2 xml语法</h3><h4 id="1-2-1-文档声明"><a href="#1-2-1-文档声明" class="headerlink" title="1.2.1 文档声明"></a>1.2.1 文档声明</h4><p>格式：</p>
<ul>
<li><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</code></li>
</ul>
<p>注意：</p>
<ul>
<li>必须以 <code>&lt;?xml</code> 开头，以 <code>?&gt;</code> 结尾</li>
<li>文档声明必须放到xml的<strong>第一行</strong></li>
<li>文档声明可以省略</li>
<li>文档声明有两个属性<ul>
<li>version:表示版本号</li>
<li>encoding:表示编码</li>
</ul>
</li>
</ul>
<h4 id="1-2-2-元素"><a href="#1-2-2-元素" class="headerlink" title="1.2.2 元素"></a>1.2.2 元素</h4><p>格式：</p>
<ul>
<li><code>&lt;元素名&gt;&lt;/元素名&gt;</code></li>
<li><code>&lt;开始标签&gt;&lt;/结束标签&gt;</code></li>
</ul>
<p>注意：</p>
<ul>
<li>元素一般都是由开始标签、结束标签、、元素的内容(元素体)组成的。</li>
<li>元素体可以是文本内容，也可以是其他标签</li>
<li>每一个xml有且仅有一个根标签</li>
<li>空元素，如果某个元素没有元素体，它就是一个空元素。空元素可以写成自闭和的形式，格式：<code>&lt;元素名/&gt;</code></li>
<li>xml标签区分大小写</li>
<li>在xml中，元素命名不要使用xml,Xml,XML这些名字，也不要带有一些特殊字符。</li>
</ul>
<h4 id="1-2-3-属性"><a href="#1-2-3-属性" class="headerlink" title="1.2.3 属性"></a>1.2.3 属性</h4><p>格式：</p>
<ul>
<li><code>&lt;开始标签 属性名1=属性值1 属性名2=属性值2 ...&gt;&lt;/结束标签&gt;</code></li>
</ul>
<p>注意事项：</p>
<ul>
<li>属性要写在开始标签中。</li>
<li>属性可以有任意个，多个属性之间用空格隔开，一个元素中的多个属性，属性名不能相同</li>
<li>属性值必须用双引号或单引号包裹，<strong>推荐双引号</strong></li>
<li>属性名在命名时不要有特殊字符，属性名不能以数字开头</li>
</ul>
<h4 id="1-2-4-注释"><a href="#1-2-4-注释" class="headerlink" title="1.2.4 注释"></a>1.2.4 注释</h4><p>格式：</p>
<ul>
<li><code>&lt;!-- 注释内容 --&gt;</code></li>
</ul>
<p>注意：</p>
<ul>
<li>在xml中，注释也是不会被解析的。</li>
</ul>
<p><strong>使用示例：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    persons是根元素，一个xml中只能有一个根元素。</span></span><br><span class="line"><span class="comment">    person是persons的子元素</span></span><br><span class="line"><span class="comment">    每一个person标签有两个属性，分别是name和age</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">persons</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">person</span> <span class="attr">name</span>=<span class="string">"jack"</span> <span class="attr">age</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">person</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">person</span> <span class="attr">name</span>=<span class="string">"rose"</span> <span class="attr">age</span>=<span class="string">"20"</span>&gt;</span><span class="tag">&lt;/<span class="name">person</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">person</span> <span class="attr">name</span>=<span class="string">"tom"</span> <span class="attr">age</span>=<span class="string">"12"</span>&gt;</span><span class="tag">&lt;/<span class="name">person</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">persons</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="1-2-5-转义字符"><a href="#1-2-5-转义字符" class="headerlink" title="1.2.5 转义字符"></a>1.2.5 转义字符</h4><p>注意：如果要在xml中表示特殊字符，需要使用转义字符</p>
<p>例如：<code>&gt; &lt; &quot; &#39; &amp;</code></p>
<table>
<thead>
<tr>
<th>字符</th>
<th>转义字符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>&gt;</td>
<td><code>&amp;lt;</code></td>
<td>大于</td>
</tr>
<tr>
<td>&lt;</td>
<td><code>&amp;gt;</code></td>
<td>小于</td>
</tr>
<tr>
<td>“</td>
<td><code>&amp;quot;</code></td>
<td>双引号</td>
</tr>
<tr>
<td>‘</td>
<td><code>&amp;apos;</code></td>
<td>单引号</td>
</tr>
<tr>
<td>&amp;</td>
<td><code>&amp;amp;</code></td>
<td>与符号</td>
</tr>
</tbody></table>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">    1 <span class="symbol">&amp;lt;</span> 2</span><br><span class="line">    <span class="symbol">&amp;gt;</span></span><br><span class="line">    <span class="symbol">&amp;quot;</span></span><br><span class="line">    <span class="symbol">&amp;apos;</span></span><br><span class="line">    <span class="symbol">&amp;amp;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="1-2-6-CDATA区"><a href="#1-2-6-CDATA区" class="headerlink" title="1.2.6 CDATA区"></a>1.2.6 CDATA区</h4><p>CDATA 指的是不应由 XML 解析器进行解析的文本数据(Unparsed Character Data)</p>
<p>如果xml中出现大量的转义字符，会大大影响程序的阅读性，可以使用CDATA区解决这个问题：</p>
<p>格式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;![CDATA[</span><br><span class="line">	...</span><br><span class="line">]]&gt;</span><br></pre></td></tr></table></figure>

<p>作用：<strong>在CDATA区写任何东西，都会原样显示。</strong></p>
<blockquote>
<p>注意：</p>
<ul>
<li>CDATA 部分不能包含字符串 “]]&gt;”。也不允许嵌套的 CDATA 部分。</li>
<li>标记 CDATA 部分结尾的 “]]&gt;” 不能包含空格或折行。</li>
</ul>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">    &lt;![CDATA[</span><br><span class="line">        public static void main(String[] args)&#123;</span><br><span class="line">        System.out.println(1 &lt; 2);</span><br><span class="line">        System.out.println(1 &lt; 3);</span><br><span class="line">        System.out.println(1 &lt; 5);</span><br><span class="line">        System.out.println("hello");</span><br><span class="line">        System.out.println(true &amp; false);</span><br><span class="line">    &#125;</span><br><span class="line">    ]]&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="1-3-xml约束"><a href="#1-3-xml约束" class="headerlink" title="1.3 xml约束"></a>1.3 xml约束</h3><p>概念：规定xml文档的书写规则</p>
<ul>
<li>作为框架的使用者(程序员)：<ol>
<li>能够在xml中引入约束文档</li>
<li>能够简单的读懂约束文档</li>
</ol>
</li>
</ul>
<p>xml的写法是非常灵活的，但是很多情况下太灵活也不是一件好事，所以我们要给xml定义一个规范，规范xml中应该写什么内容。这个规范就是约束。</p>
<p>约束可以限制元素名，属性，元素体，元素的顺序等等</p>
<p>xml约束有两种：<code>dtd</code>，<code>schema</code></p>
<h4 id="1-3-1-DTD约束"><a href="#1-3-1-DTD约束" class="headerlink" title="1.3.1 DTD约束"></a>1.3.1 DTD约束</h4><p>如果要使用约束，需要把约束给引入过来。这个引入也称为导入。</p>
<p>dtd的三种引入方式</p>
<ul>
<li><p>内部DTD，将dtd嵌入到xml文件中，支队当前的xml文件有效</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE 根元素 [</span></span><br><span class="line"><span class="meta">	dtd语法</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>外部dtd - 本地dtd：将约束的规则定义在外部dtd文件中</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE 书架 <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"bookshelf.dtd"</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>外部dtd - 公共dtd：将dtd文件放在网络中。</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//Sun Microsystems, Inc.//DTD Web Application2.3//EN"</span> <span class="meta-string">"http://java.sun.com/dtd/web-app_2_3.dtd"</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<p><strong>dtd文件数量词：</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">*：表示可以出现任意次</span><br><span class="line">+：表示可以出现至少一次</span><br><span class="line">?：表示出现<span class="number">0</span>次或<span class="number">1</span>次</span><br><span class="line">,：顺序</span><br><span class="line">|:多个选一个</span><br></pre></td></tr></table></figure>



<p><strong>示例：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	复制内容如下:</span></span><br><span class="line"><span class="comment">	&lt;!DOCTYPE 书架 SYSTEM "bookshelf.dtd"&gt;</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT 书架 (书+)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT 书 (书名,作者,售价)&gt;</span><span class="comment">&lt;!--约束元素书的子元素必须为书名、作者、售价--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT 书名 (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT 作者 (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT 售价 (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE 书架 <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"bookshelf.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">书架</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">书</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">书名</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">书名</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">作者</span>&gt;</span>吴承恩<span class="tag">&lt;/<span class="name">作者</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">售价</span>&gt;</span>99<span class="tag">&lt;/<span class="name">售价</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">书</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">书</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">书名</span>&gt;</span>红楼梦<span class="tag">&lt;/<span class="name">书名</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">作者</span>&gt;</span>曹雪芹<span class="tag">&lt;/<span class="name">作者</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">售价</span>&gt;</span>100<span class="tag">&lt;/<span class="name">售价</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">书</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">书</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">书名</span>&gt;</span>三国演义<span class="tag">&lt;/<span class="name">书名</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">作者</span>&gt;</span>罗贯中<span class="tag">&lt;/<span class="name">作者</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">售价</span>&gt;</span>101<span class="tag">&lt;/<span class="name">售价</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">书</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">书</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">书名</span>&gt;</span>水浒传<span class="tag">&lt;/<span class="name">书名</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">作者</span>&gt;</span>施耐庵<span class="tag">&lt;/<span class="name">作者</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">售价</span>&gt;</span>108<span class="tag">&lt;/<span class="name">售价</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">书</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">书架</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="1-3-2-schema"><a href="#1-3-2-schema" class="headerlink" title="1.3.2 schema"></a>1.3.2 schema</h4><p>引入schema约束的方式和引入dtd约束的方式一样，都是从约束文件的注释中找到相对应得代码给复制到xml文件中。<br>复制过来得schema注释中的代码是一个开始标签，需要我们手动补齐结束标签</p>
<ul>
<li>引入过来的标签其实就是一个根标签</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	&lt;书架 xmlns="http://www.xxx.cn"</span></span><br><span class="line"><span class="comment">		  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line"><span class="comment">		  xsi:schemaLocation="http://www.xxx.cn bookshelf.xsd"</span></span><br><span class="line"><span class="comment">    &gt;</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xs:schema</span> <span class="attr">xmlns:xs</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">targetNamespace</span>=<span class="string">"http://www.xxx.cn"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">elementFormDefault</span>=<span class="string">"qualified"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">'书架'</span> &gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">xs:sequence</span> <span class="attr">maxOccurs</span>=<span class="string">'unbounded'</span> &gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">'书'</span> &gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">                                                     <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">'书名'</span> <span class="attr">type</span>=<span class="string">'xs:string'</span> /&gt;</span></span><br><span class="line">                                                     <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">'作者'</span> <span class="attr">type</span>=<span class="string">'xs:string'</span> /&gt;</span></span><br><span class="line">                                                     <span class="tag">&lt;<span class="name">xs:element</span> <span class="attr">name</span>=<span class="string">'售价'</span> <span class="attr">type</span>=<span class="string">'xs:double'</span> /&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">xs:sequence</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">xs:complexType</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xs:element</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xs:schema</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">书架</span> <span class="attr">xmlns</span>=<span class="string">"http://www.xxx.cn"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.xxx.cn bookshelf.xsd"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">书</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">书名</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">书名</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">作者</span>&gt;</span>吴承恩<span class="tag">&lt;/<span class="name">作者</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">售价</span>&gt;</span>99<span class="tag">&lt;/<span class="name">售价</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">书</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">书架</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>解析：</p>
<p><code>xmlns=&quot;http://www.xxx.cn&quot;</code>:表示引入过来的schema文件的名称空间</p>
<p><code>xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</code>:引入的是w3c官方的内容，固定写法。</p>
<p><code>xsi:schemaLocation=&quot;http://www.xxx.cn bookshelf.xsd&quot;</code>: 引入的schema文件的位置。</p>
<ul>
<li>格式：名称空间 位置</li>
</ul>
<p>名称空间：</p>
<ul>
<li>隐式名称空间（之前用的都是隐式名称空间）</li>
<li>显式的名称空间（给名称空间起一个别名，通过别名去使用元素）<ul>
<li>xmlns:别名 = “名称空间”</li>
<li>使用方式：<ul>
<li><code>&lt;别名:元素名&gt;</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aa:书架</span> <span class="attr">xmlns:aa</span>=<span class="string">"http://www.xxx.cn"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.xxx.cn bookshelf.xsd"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aa:书</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aa:书名</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">aa:书名</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aa:作者</span>&gt;</span>吴承恩<span class="tag">&lt;/<span class="name">aa:作者</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aa:售价</span>&gt;</span>100<span class="tag">&lt;/<span class="name">aa:售价</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aa:书</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aa:书架</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="二、dom4j"><a href="#二、dom4j" class="headerlink" title="二、dom4j"></a>二、dom4j</h2><h3 id="2-1-XML解析"><a href="#2-1-XML解析" class="headerlink" title="2.1 XML解析"></a>2.1 XML解析</h3><p>XML解析就是获取xml文件的内容。</p>
<p>常见的<strong>解析方式</strong>：</p>
<ul>
<li>DOM解析(会把整个xml文件都加载到内存中，然后进行解析)<ul>
<li>优点:会保留整个xml文档的结构，可以对里面的元素进行增删操作。</li>
<li>缺点：有可能会内存溢出</li>
</ul>
</li>
<li>SAX解析(会逐行解析xml，没解析一行，就释放一行)<ul>
<li>优点：效率高，不会内存溢出</li>
<li>缺点：不能保留xml文档结构，只能读</li>
</ul>
</li>
<li>PULL解析(安卓内置的，类似SAX)</li>
</ul>
<p>常见的<strong>解析工具包</strong>：</p>
<ul>
<li><p>JAXP：sun公司提供支持DOM和SAX开发包</p>
</li>
<li><p>Dom4j：比较简单的的解析开发包(常用)</p>
</li>
<li><p>JDom：与Dom4j类似</p>
</li>
<li><p>Jsoup：功能强大DOM方式的XML解析开发包，尤其对HTML解析更加方便</p>
</li>
</ul>
<h3 id="2-2-dom4j的基本使用"><a href="#2-2-dom4j的基本使用" class="headerlink" title="2.2 dom4j的基本使用"></a>2.2 dom4j的基本使用</h3><h4 id="2-2-1-dom4j解析原理-dom解析-："><a href="#2-2-1-dom4j解析原理-dom解析-：" class="headerlink" title="2.2.1 dom4j解析原理(dom解析)："></a>2.2.1 dom4j解析原理(dom解析)：</h4><ul>
<li>dom解析会将整个xml文件读取到内存中，会生成一个DOM树(在xml中，每一个元素，属性，文本都是DOM树中的节点)，并获 得一个Document对象，通过Document对象就可以对DOM进行操作。</li>
</ul>
<p><img data-src="/image/dom%E8%A7%A3%E6%9E%90.png" alt="dom解析"></p>
<h4 id="2-2-2-使用dom4j解析xml"><a href="#2-2-2-使用dom4j解析xml" class="headerlink" title="2.2.2 使用dom4j解析xml"></a>2.2.2 使用dom4j解析xml</h4><p>解析相关的API</p>
<ul>
<li><p>SAXReader：核心类</p>
<ul>
<li><code>Document read(String systemId)</code>：read方法可以读取xml文件，生成dom树创建Document对象</li>
</ul>
</li>
<li><p>Document:表示整个xml文档</p>
<ul>
<li><code>Element getRootElement();</code>：表示获取根元素</li>
</ul>
</li>
<li><p>Element：表示元素</p>
<ul>
<li><code>List elements([String ele] )</code>： 获得指定名称的所有子元素。可以不指定名称</li>
<li><code>Element element([String ele])</code>：获得指定名称第一个子元素。可以不指定名称</li>
<li><code>String getName()</code>：获得当前元素的元素名</li>
<li><code>String attributeValue(String attrName)</code>：获得指定属性名的属性值</li>
<li><code>String elementText(Sting ele)</code> ：获得指定名称子元素的文本值</li>
<li><code>String getText()</code>：获得当前元素的文本内容</li>
</ul>
</li>
</ul>
<p>使用步骤：</p>
<ul>
<li>准备工作(导包、准备要解析的xml文件)</li>
<li>开始写代码，创建SAXReader对象</li>
<li>调用read方法，读取xml，得到Document对象</li>
<li>调用getRootElement获取根元素</li>
<li>开始解析操作</li>
</ul>
<p>代码示例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">books</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">book</span> <span class="attr">id</span>=<span class="string">"0001"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">author</span>&gt;</span>吴承恩<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sale</span>&gt;</span>101.00元<span class="tag">&lt;/<span class="name">sale</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">book</span> <span class="attr">id</span>=<span class="string">"0002"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>三国演义<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">author</span>&gt;</span>罗贯中<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sale</span>&gt;</span>100.00元<span class="tag">&lt;/<span class="name">sale</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">books</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Parse</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> DocumentException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建SAXReader对象。</span></span><br><span class="line">        SAXReader saxReader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">        <span class="comment">//2.调用read方法，读取xml，得到Document</span></span><br><span class="line">        Document document = saxReader.read(<span class="string">"xxx\\book.xml"</span>);</span><br><span class="line">        <span class="comment">//3.调用getRootElement获取根元素</span></span><br><span class="line">        Element rootElement = document.getRootElement();</span><br><span class="line">        <span class="comment">//调用elements方法获取所有子元素</span></span><br><span class="line">        List&lt;Element&gt; bookList = rootElement.elements();</span><br><span class="line">        <span class="comment">//遍历集合，拿到每一个book元素</span></span><br><span class="line">        <span class="keyword">for</span> (Element bookElement : bookList) &#123;</span><br><span class="line">            String id = bookElement.attributeValue(<span class="string">"id"</span>);</span><br><span class="line">            System.out.println(<span class="string">"id="</span> + id);</span><br><span class="line">            <span class="comment">//获取book下面所有的子元素</span></span><br><span class="line">            List&lt;Element&gt; bookChildElements = bookElement.elements();</span><br><span class="line">            <span class="keyword">for</span> (Element bookChildElement : bookChildElements) &#123;</span><br><span class="line">                <span class="comment">//调用getName方法，获取元素名字</span></span><br><span class="line">                String elementName = bookChildElement.getName();</span><br><span class="line">                <span class="comment">//调用getText，拿到该元素的文本内容</span></span><br><span class="line">                String text = bookChildElement.getText();</span><br><span class="line">                <span class="comment">//输出</span></span><br><span class="line">                System.out.println(elementName + <span class="string">":"</span> + text);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-3-XPath"><a href="#2-3-XPath" class="headerlink" title="2.3 XPath"></a>2.3 XPath</h3><p>XPath可以根据一个路径表达式获取xml中的指定元素。</p>
<p>XPath使用步骤：</p>
<ul>
<li>导入jar包(dom4j-1.6.1.jar 和 jaxen-1.1-beta-6.jar)</li>
<li>通过dom4j的SAXReader读取xml文件，获取Document对象</li>
<li>调用方法，根据XPath表达式获取元素<ul>
<li>document根据XPath表达式获取元素的方法：<ul>
<li><code>List selectNodes(&quot;表达式&quot;)</code>：获取多个满足要求的元素</li>
<li><code>Node selectSingNode(&quot;表达式&quot;)</code>：获取第一个满足要求的元素</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>表达式规则</strong>：</p>
<ul>
<li>绝对路径表达式方式 例如: /元素/子元素/子子元素…</li>
<li>相对路径表达式方式 例如: 子元素/子子元素.. 或者 ./子元素/子子元素..</li>
<li>全文搜索路径表达式方式 例如: //子元素//子子元素</li>
<li>谓语（条件筛选）方式 例如: //元素[@属性名=属性值]</li>
</ul>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03XPath</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> DocumentException </span>&#123;</span><br><span class="line">        <span class="comment">//创建SAXReader</span></span><br><span class="line">        SAXReader saxReader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">        <span class="comment">//调用read方法读取</span></span><br><span class="line">        Document document = saxReader.read(<span class="string">"day18_xml&amp;dom4j\\book.xml"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.谓语（条件筛选）方式 例如: //元素[@attr1=value]</span></span><br><span class="line">        Node node = document.selectSingleNode(<span class="string">"/books/book[@id='0002']/author"</span>);</span><br><span class="line">        System.out.println(node.getText());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.全文搜索路径表达式方式。例如：//子元素//子子元素</span></span><br><span class="line">        <span class="comment">// Node node = document.selectSingleNode("//book//name");</span></span><br><span class="line">        <span class="comment">// System.out.println(node.getText());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.相对路径表达式方式， 例如： 子元素/子子元素... 或者 ./子元素/子子元素...  【】</span></span><br><span class="line">        <span class="comment">// Element rootElement = document.getRootElement();</span></span><br><span class="line">        <span class="comment">// Node node = rootElement.selectSingleNode("book/name");</span></span><br><span class="line">        <span class="comment">// System.out.println(node.getText());</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.绝对路径表达式。例如：/元素/子元素/子子元素/...【绝对路径是从根开始找】</span></span><br><span class="line">        <span class="comment">// //获取一个元素</span></span><br><span class="line">        <span class="comment">// //Node node = document.selectSingleNode("/books/book/sale");</span></span><br><span class="line">        <span class="comment">// //获取元素的文本并输出</span></span><br><span class="line">        <span class="comment">// // System.out.println(node.getText);</span></span><br><span class="line">        <span class="comment">// List&lt;Node&gt; list = document.selectNodes("/books/book/author");</span></span><br><span class="line">        <span class="comment">// for (Node node : list) &#123;</span></span><br><span class="line">        <span class="comment">//     System.out.println(node);</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="三、JDK8新特性"><a href="#三、JDK8新特性" class="headerlink" title="三、JDK8新特性"></a>三、JDK8新特性</h2><h3 id="3-1-方法引用"><a href="#3-1-方法引用" class="headerlink" title="3.1 方法引用"></a>3.1 方法引用</h3><p>方法引用是Lambda表达式的简化写法。也是函数式编程的内容。</p>
<ul>
<li>当Lambda表达式拿到参数之后<strong>直接</strong>对参数进行<strong>处理</strong>，那么就可以换成方法引用</li>
</ul>
<p>方法引用的符号：<code>::</code></p>
<p>例如：</p>
<ul>
<li><p><code>s -&gt; System.out.println(s)</code></p>
</li>
<li><p>该Lambda表达式，拿到s之后，直接对s进行了输出处理，那么可以换成方法引用</p>
</li>
</ul>
<p>代码示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01MethodRef</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"hello"</span>);</span><br><span class="line">        list.add(<span class="string">"world"</span>);</span><br><span class="line">        list.add(<span class="string">"java"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//使用stream流的方式对集合中的每一个元素遍历输出</span></span><br><span class="line">        list.stream().forEach(s -&gt; System.out.println(s));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方法引用</span></span><br><span class="line">        list.stream().forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-2-四种常见的方法引用"><a href="#3-2-四种常见的方法引用" class="headerlink" title="3.2 四种常见的方法引用"></a>3.2 四种常见的方法引用</h3><ul>
<li>对象引用成员方法</li>
<li>类名引用静态方法</li>
<li>类的构造器引用</li>
<li>数组的构造器引用</li>
</ul>
<h4 id="3-2-1-对象引用成员方法"><a href="#3-2-1-对象引用成员方法" class="headerlink" title="3.2.1 对象引用成员方法"></a>3.2.1 对象引用成员方法</h4><p>格式：<code>对象名::方法名</code></p>
<p>演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printUpperCase</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        System.out.println(str.toUpperCase());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01MethodRef</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalAccessException, InstantiationException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建集合</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"hello"</span>);</span><br><span class="line">        list.add(<span class="string">"world"</span>);</span><br><span class="line">        list.add(<span class="string">"java"</span>);</span><br><span class="line">        <span class="comment">//遍历集合，将集中中每一个元素转成大写输出</span></span><br><span class="line">        <span class="comment">//list.stream().forEach(s -&gt; System.out.println(s.toUpperCase()));</span></span><br><span class="line"></span><br><span class="line">        MyClass myClass = MyClass<span class="class">.<span class="keyword">class</span>.<span class="title">newInstance</span>()</span>;</span><br><span class="line">        <span class="comment">// list.stream().forEach(s -&gt; myClass.printUpperCase(s));</span></span><br><span class="line">        list.stream().forEach(myClass::printUpperCase);<span class="comment">//表示Lambda表达式拿到参数之后，直接通过myClass的printUpperCase方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-2-2-类名引用静态方法"><a href="#3-2-2-类名引用静态方法" class="headerlink" title="3.2.2 类名引用静态方法"></a>3.2.2 类名引用静态方法</h4><p>格式：<code>类名::静态方法名</code></p>
<p>演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01ClassRef</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(-<span class="number">10</span>);</span><br><span class="line">        list.add(<span class="number">20</span>);</span><br><span class="line">        list.add(-<span class="number">30</span>);</span><br><span class="line">        list.add(<span class="number">40</span>);</span><br><span class="line">        <span class="comment">// list.stream().map(num -&gt; Math.abs(num)).forEach(s-&gt; System.out.println(s));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//类名::静态方法名</span></span><br><span class="line">        list.stream().map(Math::abs).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-2-3-类的构造器引用"><a href="#3-2-3-类的构造器引用" class="headerlink" title="3.2.3 类的构造器引用"></a>3.2.3 类的构造器引用</h4><p>格式：<code>类名::new</code></p>
<p>演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01MethodRef</span> </span>&#123;</span><br><span class="line">    <span class="comment">//使用函数式接口作为方法参数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(PersonBuilder personBuilder)</span></span>&#123;</span><br><span class="line">        Person p = personBuilder.createPerson(<span class="string">"张三"</span>,<span class="number">13</span>);</span><br><span class="line">        System.out.println(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用method方法，传递Lambda表达式</span></span><br><span class="line">        method((name,age)-&gt; <span class="keyword">new</span> Person(name, age));</span><br><span class="line">        method(Person::<span class="keyword">new</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonBuilder</span> </span>&#123;</span><br><span class="line">    <span class="comment">//接收姓名和年龄。就可以创建一个person对象返回。</span></span><br><span class="line">    <span class="function">Person <span class="title">createPerson</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    构造方法/set/get方法略...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-2-3-数组的构造器引用"><a href="#3-2-3-数组的构造器引用" class="headerlink" title="3.2.3 数组的构造器引用"></a>3.2.3 数组的构造器引用</h4><p>格式：<code>数据类型[]::new</code></p>
<p>演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01ArrayRef</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用方法让函数式接口当作方法参数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(ArrayBuilder arrayBuilder)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = arrayBuilder.createArray(<span class="number">10</span>);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        method( len -&gt; <span class="keyword">new</span> <span class="keyword">int</span>[len]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//数组的构造器引用---数据类型[]::new</span></span><br><span class="line">        method(<span class="keyword">int</span>[]::<span class="keyword">new</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArrayBuilder</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供方法，接收参数(数组长度)，就可以创建int数组返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span>[] createArray(<span class="keyword">int</span> len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-3-Base64"><a href="#3-3-Base64" class="headerlink" title="3.3 Base64"></a>3.3 Base64</h3><h4 id="3-3-1-概述"><a href="#3-3-1-概述" class="headerlink" title="3.3.1 概述"></a>3.3.1 概述</h4><p>Base64是网络上最常见的用于传输8Bit字节码的编码方式之一，Base64就是一种基于64个可打印字符<br>来表示二进制数据的方法。</p>
<p>在Java 8中，Base64编码已经成为Java类库的标准。</p>
<p>Java 8 内置了 Base64 编码的编码器和解码器。</p>
<p>Base64工具类提供了一套静态方法获取下面三种Base64编解码器：</p>
<ul>
<li><p>基本：输出被映射到一组字符A-Za-z0-9+/，编码不添加任何行标，输出的解码仅支持A-Za-z0-<br>  9+/。</p>
</li>
<li><p>URL：输出映射到一组字符A-Za-z0-9+_，输出是URL和文件。</p>
</li>
<li><p>MIME：输出隐射到MIME友好格式。输出每行不超过76字符，并且使用’\r’并跟随’\n’作为分割。<br>  编码输出最后没有行分割。</p>
</li>
</ul>
<blockquote>
<p>Base64用来编码和解码</p>
</blockquote>
<h4 id="3-3-2-Base64的内部类和方法"><a href="#3-3-2-Base64的内部类和方法" class="headerlink" title="3.3.2 Base64的内部类和方法"></a>3.3.2 Base64的内部类和方法</h4><p>内部类：</p>
<ul>
<li><code>static class Base64.Decoder</code> ：用来解码</li>
<li><code>static class Base64.Encoder</code> ：用来编码</li>
</ul>
<p>获取编码器、解解器方法：</p>
<ul>
<li><code>static Base64.Decoder getDecoder()</code>：获取一个标准的Base64解码器</li>
<li><code>static Base64.Decoder getEncoder()</code>：获取一个标准的Base64编码器</li>
<li><code>static Base64.Decoder getUrlDecoder()</code>：获取一个标准的URL解码器</li>
<li><code>static Base64.Decoder getUrlEncoder()</code>：获取一个标准的URL编码器</li>
<li><code>static Base64.Decoder getMimeDecoder()</code>：获取一个标准的MIME的解码器</li>
<li><code>static Base64.Decoder getMimeEncoder()</code>：获取一个标准的MIME的编码器</li>
</ul>
<p>Base64.Encoder方法：</p>
<ul>
<li><code>String encodeToString(byte[] src)</code>：编码，将byte数组编码成字符串</li>
</ul>
<p>Base64.Decoder方法：</p>
<ul>
<li><code>byte[] decode(String src)</code>：解码，将字符串编程byte数组</li>
</ul>
<p>使用演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Base64</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义字符串</span></span><br><span class="line">        String str = <span class="string">"哈哈哈呵呵呵嘿嘿"</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//使用标准Base64进行编码</span></span><br><span class="line">        Base64.Encoder encoder = Base64.getEncoder();</span><br><span class="line">        String base64Code = encoder.encodeToString(str.getBytes());</span><br><span class="line">        System.out.println(<span class="string">"base64编码后："</span> + base64Code);</span><br><span class="line">        <span class="comment">//解码</span></span><br><span class="line">        Base64.Decoder decoder = Base64.getDecoder();</span><br><span class="line">        <span class="keyword">byte</span>[] base64Bytes = decoder.decode(base64Code);</span><br><span class="line">        System.out.println(<span class="string">"base64解码后："</span> + <span class="keyword">new</span> String(base64Bytes));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用URL进行编码</span></span><br><span class="line">        String urlCode = Base64.getUrlEncoder().encodeToString(str.getBytes());</span><br><span class="line">        System.out.println(<span class="string">"URL编码后："</span> + urlCode);</span><br><span class="line">        <span class="comment">//解码</span></span><br><span class="line">        <span class="keyword">byte</span>[] urlBytes = Base64.getUrlDecoder().decode(urlCode);</span><br><span class="line">        System.out.println(<span class="string">"URL解码后："</span> + <span class="keyword">new</span> String(urlBytes));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用MIME编码</span></span><br><span class="line">        String mimeCode = Base64.getMimeEncoder().encodeToString(str.getBytes());</span><br><span class="line">        System.out.println(<span class="string">"MIME编码后："</span> + mimeCode);</span><br><span class="line">        <span class="comment">//解码</span></span><br><span class="line">        <span class="keyword">byte</span>[] mimeBytes = Base64.getMimeDecoder().decode(mimeCode);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(mimeBytes));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>学习</tag>
        <tag>XML</tag>
        <tag>dom4j</tag>
        <tag>方法引用</tag>
        <tag>Base64</tag>
      </tags>
  </entry>
  <entry>
    <title>单例、多例、枚举、工厂模式、正则表达式</title>
    <url>/2020/08/13/%E5%8D%95%E4%BE%8B%E3%80%81%E5%A4%9A%E4%BE%8B%E3%80%81%E6%9E%9A%E4%B8%BE%E3%80%81%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E3%80%81%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="一、单例模式"><a href="#一、单例模式" class="headerlink" title="一、单例模式"></a>一、单例模式</h2><p><strong>单例模式：</strong>是一种常用的软件设计模式。通过单例模式可以保证系统中，应用该模式的这个类只有一个<br>实例。即一个类只有一个对象实例。</p>
<a id="more"></a>

<h3 id="1-1-实现步骤"><a href="#1-1-实现步骤" class="headerlink" title="1.1 实现步骤"></a>1.1 实现步骤</h3><ol>
<li>将构造方法私有化，使其不能在类的外部通过new关键字实例化对象。</li>
<li>在类的内部产生一个唯一的一个实例化对象，并且将其封装为<code>private static</code>类型的成员变量</li>
<li>定义一个静态方法返回这个唯一对象</li>
</ol>
<h3 id="1-2-单例设计模式的类型"><a href="#1-2-单例设计模式的类型" class="headerlink" title="1.2 单例设计模式的类型"></a>1.2 单例设计模式的类型</h3><p>根据对象实例化的时机，单例模式可分为以下两种：</p>
<ul>
<li>饿汉单例模式</li>
<li>懒汉单例模式</li>
</ul>
<h3 id="1-3-饿汉单例模式"><a href="#1-3-饿汉单例模式" class="headerlink" title="1.3 饿汉单例模式"></a>1.3 饿汉单例模式</h3><p>饿汉单例模式：其含义就是在使用类的时候对象已经创建完毕，不管以后会不会使用到这个对象。</p>
<p>代码示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供静态属性，并创建对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Cat cat = <span class="keyword">new</span> Cat();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将构造方法私有，防止外界使用new关键字创建对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Cat</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供静态方法用来获取对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Cat <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Cat.getInstance());</span><br><span class="line">        System.out.println(Cat.getInstance());</span><br><span class="line">        System.out.println(Cat.getInstance());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1-4-懒汉单例模式"><a href="#1-4-懒汉单例模式" class="headerlink" title="1.4 懒汉单例模式"></a>1.4 懒汉单例模式</h3><p>懒汉单例模式：其含义就是在调用方法获取对象的时候才创建对象，先不急着创建对象，等着需要使用的时候才实例化对象。</p>
<p>代码示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义Dog类型的变量。用来接收getInstance方法中创建的Dog对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Dog dog = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私有构造方法，让外界不能通过new的方式创建对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Dog</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义静态方法，用来获取Dog对象</span></span><br><span class="line"><span class="comment">     * 多线程可能出现线程安全问题，加synchronized</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Dog <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//当调用getInstance方法创建对象时，判断dog变量是否是null，如果是null表示之前没有获取过Dog对象，那么就创建一个Dog对象赋值给dog</span></span><br><span class="line">        <span class="keyword">if</span> (dog == <span class="keyword">null</span>)&#123;</span><br><span class="line">            dog = <span class="keyword">new</span> Dog();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将之前获取的dog返回</span></span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(Dog.getInstance());</span><br><span class="line">        System.out.println(Dog.getInstance());</span><br><span class="line">        System.out.println(Dog.getInstance());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：懒汉单例模式在多线程环境下可能会实例化多个对象，不能保证单例的状态，所以在方法上加上synchronized关键字，保证线程安全。</p>
</blockquote>
<blockquote>
<p>小结：</p>
<ul>
<li><p>饿汉单例模式：先创建对象，不管以后能不能用到这个对象</p>
</li>
<li><p>懒汉单例模式：后创建对象，等到需要使用对象的时候在进行实例化对象。</p>
</li>
<li><p><strong>单例模式可以保证系统中一个类只有一个实例对象。</strong></p>
</li>
</ul>
</blockquote>
<h2 id="二、多例模式"><a href="#二、多例模式" class="headerlink" title="二、多例模式"></a>二、多例模式</h2><p>多例模式，是一种常用的软件设计模式。通过多例模式可以保证系统中，应用该模式的类有固定数量的<br>实例。多例类要自我创建并管理自己的实例，还要向外界提供获取本类实例的方法。</p>
<h3 id="2-1-实现步骤"><a href="#2-1-实现步骤" class="headerlink" title="2.1 实现步骤"></a>2.1 实现步骤</h3><ol>
<li>将构造方法私有化，使外部不能通过new关键字创建对象。</li>
<li>定义list集合，存放实例化的对象</li>
<li>定义静态代码块，实例化一定数量的对象并添加到集合中</li>
<li>定义静态方法，给外界提供获取对象的方式。</li>
</ol>
<h3 id="2-2-代码演示"><a href="#2-2-代码演示" class="headerlink" title="2.2 代码演示"></a>2.2 代码演示</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建集合，用来保存程序中所有的Person对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Person&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将构造方法私有，防止外界通过new的方式创建对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义静态代码块，在静态代码块中创建Person对象，并添加到集合中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> Person());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义方法，用来随机获取程序中的Person对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Person <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">return</span> list.get(r.nextInt(list.size()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">            System.out.println(Person.getInstance());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结：</p>
<ul>
<li>多例模式可以保证系统中一个类有固定个数的对象实例，在实现需求的基础上，提高对象的复用性。</li>
</ul>
</blockquote>
<h2 id="三、枚举"><a href="#三、枚举" class="headerlink" title="三、枚举"></a>三、枚举</h2><h3 id="3-1-不使用枚举存在的问题"><a href="#3-1-不使用枚举存在的问题" class="headerlink" title="3.1 不使用枚举存在的问题"></a>3.1 不使用枚举存在的问题</h3><p>假如我们要定义一个人类，属性包含姓名和性别，数据类型都为字符串，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    </span><br><span class="line">    set、get、构造方法略...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] agrs)</span></span>&#123;</span><br><span class="line">		Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.setName(<span class="string">"张三"</span>);</span><br><span class="line">        person.setGender(<span class="string">"hello"</span>);<span class="comment">//性别的数据类型是字符串，所以可以传入任意字符串</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不适用枚举时，就出现了上面的问题，可以给性别传递任意的字符串，导致性别非法。</p>
<h3 id="3-2-枚举的应用场景"><a href="#3-2-枚举的应用场景" class="headerlink" title="3.2 枚举的应用场景"></a>3.2 枚举的应用场景</h3><p>当一个方法接收的参数或者一个属性的取值在固定的范围，那么我们就可以使用枚举。例如，人的性别，一年的四个季度。</p>
<h3 id="3-3-枚举入门"><a href="#3-3-枚举入门" class="headerlink" title="3.3 枚举入门"></a>3.3 枚举入门</h3><ul>
<li>枚举本质就是类，枚举是多例的体现。</li>
<li>枚举中有很多属性，枚举中的每个属性都是自身的一个对象。</li>
</ul>
<h4 id="3-3-1-定义格式"><a href="#3-3-1-定义格式" class="headerlink" title="3.3.1 定义格式"></a>3.3.1 定义格式</h4><p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> 枚举名&#123;</span><br><span class="line">    属性<span class="number">1</span>,属性<span class="number">2</span>,属性<span class="number">3</span>,...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-3-2-代码示例"><a href="#3-3-2-代码示例" class="headerlink" title="3.3.2 代码示例"></a>3.3.2 代码示例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Gender &#123;</span><br><span class="line"></span><br><span class="line">    BOY,</span><br><span class="line"></span><br><span class="line">    GIRL</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Gender gender;</span><br><span class="line">	</span><br><span class="line">    set、get、构造方法略...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">        p1.setName(<span class="string">"张三"</span>);</span><br><span class="line">        p1.setGender(Gender.BOY);</span><br><span class="line">        System.out.println(p1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在上面代码中，在设置人的性别的时候，只能传递BOY或者GIRL，这样就解决的文中一开始提到的问题。</p>
</blockquote>
<h3 id="3-4-枚举类反编译"><a href="#3-4-枚举类反编译" class="headerlink" title="3.4 枚举类反编译"></a>3.4 枚举类反编译</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Gender &#123;</span><br><span class="line">    BOY,</span><br><span class="line">    GIRL</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进行反编译：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Gender</span> <span class="keyword">extends</span> <span class="title">Enum</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Gender BOY;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Gender GIRL;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Gender $VALUES[];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Gender[] values()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> (Gender[])$VALUES.clone();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Gender <span class="title">valueOf</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (Gender)Enum.valueOf(com/sun/demo03enum/Gender, name);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Gender</span><span class="params">(String s, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(s, i);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> </span><br><span class="line">	&#123;</span><br><span class="line">		BOY = <span class="keyword">new</span> Gender(<span class="string">"BOY"</span>, <span class="number">0</span>);</span><br><span class="line">		GIRL = <span class="keyword">new</span> Gender(<span class="string">"GIRL"</span>, <span class="number">1</span>);</span><br><span class="line">		$VALUES = (<span class="keyword">new</span> Gender[] &#123;</span><br><span class="line">			BOY, GIRL</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>枚举中的每个属性默认都是使用static final修饰的，因为使用final修饰了，所以是常量，在命名时都大写。</p>
<p>因为使用static修饰了，所以在使用属性时，可以通过枚举名字直接去使用</p>
</blockquote>
<h2 id="四、工厂设计模式"><a href="#四、工厂设计模式" class="headerlink" title="四、工厂设计模式"></a>四、工厂设计模式</h2><p>工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一。这种类型的设计模式属于创建型模<br>式，它提供了一种创建对象的最佳方式。</p>
<ul>
<li>工厂模式可以将对象的创建操作从我们自己转交给工厂，让工厂去创建对象，创建好之后再交给我们。</li>
</ul>
<h3 id="工厂模式示例"><a href="#工厂模式示例" class="headerlink" title="工厂模式示例"></a>工厂模式示例</h3><p>步骤：</p>
<ul>
<li>定义Car作为父类，里面提供run方法。</li>
<li>定义FaLaLi、Alto继承Car</li>
<li>定义Factory工厂，里面改提供一个生成小汽车的方法。</li>
<li>在测试类中通过工厂获取小汽车</li>
</ul>
<p>代码演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Alto</span> <span class="keyword">extends</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"奥拓在慢慢的跑..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FaLaLi</span> <span class="keyword">extends</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"法拉利在嗖嗖的跑..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 汽车工厂类</span></span><br><span class="line"><span class="comment"> * 用来获取小汽车</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义方法，用来获取小汽车</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">getCar</span><span class="params">(String carName)</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断传递过来的参数</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"法拉利"</span>.equals(carName))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> FaLaLi();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"奥拓"</span>.equals(carName))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Alto();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//其他表示工厂不能生产</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//通过工厂获取对象</span></span><br><span class="line">        Car c = CarFactory.getCar(<span class="string">"法拉利"</span>);</span><br><span class="line">        <span class="comment">//让小汽车运行</span></span><br><span class="line">        c.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>工厂模式好处：让程序更加灵活，易于扩展，易维护。</p>
</blockquote>
<h2 id="五、正则表达式"><a href="#五、正则表达式" class="headerlink" title="五、正则表达式"></a>五、正则表达式</h2><h3 id="5-1-正则表达式介绍"><a href="#5-1-正则表达式介绍" class="headerlink" title="5.1 正则表达式介绍"></a>5.1 正则表达式介绍</h3><p><strong>正则表达式</strong>：用来验证一个字符串是否符合规则。</p>
<p>在String中，有一个方法可以使用正则表达式验证。</p>
<ul>
<li><code>boolean matches(String regex)</code>：根据正则表达式验证字符串是否符合规则。</li>
</ul>
<p>正则表达式的一些规则：</p>
<p><code>[abc]</code>：表示a或者b或者c。<br><code>[^abc]</code>：表示除了a,b,c之外的字符。<br><code>[a-z]</code>：表示a-z中的任意一个。<br><code>[A-Z]</code>：表示A-Z中的任意一个。<br><code>[0-9]</code>：表示0-9中的任意一个。<br><code>[a-zA-Z0-9]</code>：表示匹配a-z，A-Z，0-9中的任意一个字符<br><code>[a-mp-x]</code>：表示匹配a-m或p-x中的任意一个字符<br><code>\d</code>数字：<code>[0-9]</code><br><code>\D</code> 非数字：<code>[^0-9]</code><br><code>\s</code>空白字符：空格 tab等等<br><code>\S</code>非空白字符<br><code>\w</code> 单词字符：<code>[a-zA-Z0-9_]</code><br><code>\W</code>非单词字符：<code>[^a-zA-Z0-9_]</code><br><code>?</code>：0次或1次<br><code>*</code>：任意次<br><code>+</code>：一次或多次<br><code>{n}</code>：恰巧n次<br><code>{n,}</code>：至少n次<br><code>{n,m}</code>：n到m次</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Regex</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//使用正则表达式验证一个qq号书否符合规则</span></span><br><span class="line">        <span class="comment">//规则：5-12位，第一位不能为0</span></span><br><span class="line">        String qq = <span class="string">"12345"</span>;</span><br><span class="line">        <span class="keyword">boolean</span> flag = qq.matches(<span class="string">"[1-9]\\d&#123;4,11&#125;"</span>);</span><br><span class="line">        System.out.println(flag);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用正则表达式验证手机号是否符合规则</span></span><br><span class="line">        <span class="comment">//规则：11位纯数字，第一位必须是1，第二位可以是35678，剩下的必须是0-9的数组</span></span><br><span class="line">        String phoneNum = <span class="string">"13800012345"</span>;</span><br><span class="line">        <span class="keyword">boolean</span> f2 = phoneNum.matches(<span class="string">"[1][35678][0-9]&#123;9&#125;"</span>);</span><br><span class="line">        System.out.println(f2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用正则表达式验证邮箱是否符合规则</span></span><br><span class="line">        <span class="comment">//规则 xxx@126.com   xxx@xx.cn  xxx@xx.com.cn</span></span><br><span class="line">        String email = <span class="string">"jack@163.com.cn"</span>;</span><br><span class="line">        <span class="keyword">boolean</span> f3 = email.matches(<span class="string">"\\w+@\\w+(\\.\\w+)+"</span>);</span><br><span class="line">        System.out.println(f3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>正则有关的方法：</p>
<ul>
<li><code>String[] split(String regex)</code>：根据正则表达式切割字符串</li>
<li><code>String replaceAll(String regex, String replacement)</code>：根据正则表达式进行替换</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义字符串</span></span><br><span class="line">        String s = <span class="string">"aaa   bb   cc  ddd"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用*替换掉字符串中的空白</span></span><br><span class="line">        String sNew = s.replaceAll(<span class="string">"\\s+"</span>, <span class="string">"*"</span>);</span><br><span class="line">        System.out.println(sNew);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据一个或者多个空格切割</span></span><br><span class="line">        String[] sArr = s.split(<span class="string">"\\s+"</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s1 : sArr) &#123;</span><br><span class="line">            System.out.println(s1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-2-常用正则"><a href="#5-2-常用正则" class="headerlink" title="5.2 常用正则"></a>5.2 常用正则</h3><h4 id="5-2-1-校验数字的表达式"><a href="#5-2-1-校验数字的表达式" class="headerlink" title="5.2.1 校验数字的表达式"></a>5.2.1 校验数字的表达式</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">1 数字：^[0-9]*$</span><br><span class="line">2 n位的数字：^\d&#123;n&#125;$</span><br><span class="line">3 至少n位的数字：^\d&#123;n,&#125;$</span><br><span class="line">4 m-n位的数字：^\d&#123;m,n&#125;$</span><br><span class="line">5 零和非零开头的数字：^(0|[<span class="string">1-9</span>][<span class="symbol">0-9</span>]*)$</span><br><span class="line">6 非零开头的最多带两位小数的数字：^([<span class="string">1-9</span>][<span class="symbol">0-9</span>]*)+(.[0-9]&#123;1,2&#125;)?$</span><br><span class="line">7 带1-2位小数的正数或负数：^(\-)?\d+(\.\d&#123;1,2&#125;)?$</span><br><span class="line">8 正数、负数、和小数：^(\-|\+)?\d+(\.\d+)?$</span><br><span class="line">9 有两位小数的正实数：^[0-9]+(.[0-9]&#123;2&#125;)?$</span><br><span class="line">10 有1~3位小数的正实数：^[0-9]+(.[0-9]&#123;1,3&#125;)?$</span><br><span class="line">11 非零的正整数：^[<span class="string">1-9</span>]\d<span class="emphasis">*$ 或 ^([1-9][0-9]*</span>)&#123;1,3&#125;$ 或 ^\+?[<span class="string">1-9</span>][<span class="symbol">0-9</span>]*$</span><br><span class="line">12 非零的负整数：^\-[<span class="string">1-9</span>][<span class="symbol"></span>]0-9"<span class="emphasis">*$ 或 ^-[1-9]\d*</span>$</span><br><span class="line">13 非负整数：^\d+$ 或 ^[1-9]\d*|0$</span><br><span class="line">14 非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</span><br><span class="line">15 非负浮点数：^\d+(\.\d+)?$ 或 ^[1-9]\d<span class="emphasis">*\.\d*</span>|0\.\d<span class="emphasis">*[1-9]\d*</span>|0?\.0+|0$</span><br><span class="line">16 非正浮点数：^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 或 ^(-([1-9]\d<span class="emphasis">*\.\d*</span>|0\.\d<span class="emphasis">*[1-9]\d*</span>))|0?\.0+|0$</span><br><span class="line">17 正浮点数：^[<span class="string">1-9</span>]\d<span class="emphasis">*\.\d*</span>|0\.\d<span class="emphasis">*[1-9]\d*</span>$ 或 ^(([<span class="string">0-9</span>]+\.[<span class="string">0-9</span>]<span class="emphasis">*[1-9][0-9]*</span>)|([<span class="string">0-9</span>]<span class="emphasis">*[1-9][0-9]*</span>\.[<span class="string">0-9</span>]+)|([<span class="string">0-9</span>]<span class="emphasis">*[1-9][0-9]*</span>))$</span><br><span class="line">18 负浮点数：^-([<span class="string">1-9</span>]\d<span class="emphasis">*\.\d*</span>|0\.\d<span class="emphasis">*[1-9]\d*</span>)$ 或 ^(-(([<span class="string">0-9</span>]+\.[<span class="string">0-9</span>]<span class="emphasis">*[1-9][0-9]*</span>)|([<span class="string">0-9</span>]<span class="emphasis">*[1-9][0-9]*</span>\.[<span class="string">0-9</span>]+)|([<span class="string">0-9</span>]<span class="emphasis">*[1-9][0-9]*</span>)))$</span><br><span class="line">19 浮点数：^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d<span class="emphasis">*\.\d*</span>|0\.\d<span class="emphasis">*[1-9]\d*</span>|0?\.0+|0)$</span><br><span class="line">12345678910111213141516171819</span><br></pre></td></tr></table></figure>



<h4 id="5-2-2-校验字符的表达式"><a href="#5-2-2-校验字符的表达式" class="headerlink" title="5.2.2 校验字符的表达式"></a>5.2.2 校验字符的表达式</h4><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">1 </span>汉字：^[\u4e00-\u9fa5]&#123;<span class="number">0</span>,&#125;$</span><br><span class="line"><span class="symbol">2 </span>英文和数字：^[A-Za-z0-<span class="number">9</span>]+$ 或 ^[A-Za-z0-<span class="number">9</span>]&#123;<span class="number">4</span>,<span class="number">40</span>&#125;$</span><br><span class="line"><span class="symbol">3 </span>长度为<span class="number">3</span>-<span class="number">20</span>的所有字符：^.&#123;<span class="number">3</span>,<span class="number">20</span>&#125;$</span><br><span class="line"><span class="symbol">4 </span>由<span class="number">26</span>个英文字母组成的字符串：^[A-Za-z]+$</span><br><span class="line"><span class="symbol">5 </span>由<span class="number">26</span>个大写英文字母组成的字符串：^[A-Z]+$</span><br><span class="line"><span class="symbol">6 </span>由<span class="number">26</span>个小写英文字母组成的字符串：^[a-z]+$</span><br><span class="line"><span class="symbol">7 </span>由数字和<span class="number">26</span>个英文字母组成的字符串：^[A-Za-z0-<span class="number">9</span>]+$</span><br><span class="line"><span class="symbol">8 </span>由数字、<span class="number">26</span>个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w&#123;<span class="number">3</span>,<span class="number">20</span>&#125;$</span><br><span class="line"><span class="symbol">9 </span>中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-<span class="number">9</span>_]+$</span><br><span class="line"><span class="symbol">10 </span>中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-<span class="number">9</span>]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-<span class="number">9</span>]&#123;<span class="number">2</span>,<span class="number">20</span>&#125;$</span><br><span class="line"><span class="symbol">11 </span>可以输入含有^%&amp;<span class="comment">',;=?$\"等字符：[^%&amp;',;=?$\x22]+</span></span><br><span class="line"><span class="symbol">12 </span>禁止输入含有~的字符：[^~\x22]+</span><br><span class="line"><span class="number">123456789101112</span></span><br></pre></td></tr></table></figure>



<h4 id="5-2-3-特殊需求表达式"><a href="#5-2-3-特殊需求表达式" class="headerlink" title="5.2.3 特殊需求表达式"></a>5.2.3 特殊需求表达式</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">1 Email地址：^\w+([-+.]\w+)<span class="emphasis">*@\w+([-.]\w+)*</span>\.\w+([-.]\w+)*$</span><br><span class="line">2 域名：[<span class="string">a-zA-Z0-9</span>][<span class="symbol">-a-zA-Z0-9</span>]&#123;0,62&#125;(/.[<span class="string">a-zA-Z0-9</span>][<span class="symbol">-a-zA-Z0-9</span>]&#123;0,62&#125;)+/.?</span><br><span class="line">3 InternetURL：[a-zA-z]+://[^\s]<span class="emphasis">* 或 ^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*</span>)?$</span><br><span class="line">4 手机号码：^(13[0-9]|14[0-9]|15[0-9]|166|17[0-9]|18[0-9]|19[8|9])\d&#123;8&#125;$</span><br><span class="line">5 电话号码("XXX-XXXXXXX"、"XXXX-XXXXXXXX"、"XXX-XXXXXXX"、"XXX-XXXXXXXX"、"XXXXXXX"和"XXXXXXXX)：^(\(\d&#123;3,4&#125;-)|\d&#123;3.4&#125;-)?\d&#123;7,8&#125;$ </span><br><span class="line">6 国内电话号码(0511-4405222、021-87888822)：\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125; </span><br><span class="line">7 18位身份证号码(数字、字母x结尾)：^((\d&#123;18&#125;)|([0-9x]&#123;18&#125;)|([0-9X]&#123;18&#125;))$</span><br><span class="line">8 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[<span class="string">a-zA-Z</span>][<span class="symbol">a-zA-Z0-9_</span>]&#123;4,15&#125;$</span><br><span class="line">9 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w&#123;5,17&#125;$</span><br><span class="line">10 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.<span class="emphasis">*\d)(?=.*</span>[a-z])(?=.*[A-Z]).&#123;8,10&#125;$  </span><br><span class="line">11 日期格式：^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;</span><br><span class="line">12 一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$</span><br><span class="line">13 一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$ </span><br><span class="line">14 xml文件：^([<span class="string">a-zA-Z</span>]+-?)+[<span class="string">a-zA-Z0-9</span>]+\\.[<span class="string">x|X</span>][<span class="symbol">m|M</span>][<span class="string">l|L</span>]$</span><br><span class="line">15 中文字符的正则表达式：[\u4e00-\u9fa5]</span><br><span class="line">16 双字节字符：[^\x00-\xff]    (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</span><br><span class="line">17 空白行的正则表达式：\n\s*\r    (可以用来删除空白行)</span><br><span class="line">18 HTML标记的正则表达式：<span class="xml"><span class="tag">&lt;<span class="name">(\S*?)[^</span>&gt;</span></span>]<span class="emphasis">*&gt;.*</span>?<span class="xml"><span class="tag">&lt;/<span class="name">\1</span>&gt;</span></span>|<span class="xml"><span class="tag">&lt;<span class="name">.*?</span> /&gt;</span></span>    (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</span><br><span class="line">19 首尾空白字符的正则表达式：^\s<span class="emphasis">*|\s*</span>$或(^\s<span class="emphasis">*)|(\s*</span>$)    (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</span><br><span class="line">20 腾讯QQ号：[<span class="string">1-9</span>][<span class="symbol">0-9</span>]&#123;4,&#125;    (腾讯QQ号从10000开始)</span><br><span class="line">21 中国邮政编码：[1-9]\d&#123;5&#125;(?!\d)    (中国邮政编码为6位数字)</span><br><span class="line">22 IP地址：\d+\.\d+\.\d+\.\d+    (提取IP地址时有用)</span><br><span class="line">23 IP地址：((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.)&#123;3&#125;(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>学习</tag>
        <tag>设计模式</tag>
        <tag>枚举</tag>
        <tag>单例模式</tag>
        <tag>多例模式</tag>
        <tag>工厂模式</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS入门</title>
    <url>/2020/08/16/CSS%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="一、CSS概述"><a href="#一、CSS概述" class="headerlink" title="一、CSS概述"></a>一、CSS概述</h2><p>概念：层叠样式表（Cascading Style Sheet）</p>
<blockquote>
<p>层叠样式: 对同一个标签添加多个不同的样式,所有样式会叠加在一起展示出效果</p>
</blockquote>
<p>作用：页面美化和控制布局</p>
<p>CSS的优点：</p>
<ul>
<li>实现了样式和内容的分离，提高了显示效果和样式的复用性。</li>
<li>降低耦合性，分工更加明确，CSS专门用于美化，HTML专门用于结构搭建。</li>
</ul>
<a id="more"></a>

<h2 id="二、CSS入门"><a href="#二、CSS入门" class="headerlink" title="二、CSS入门"></a>二、CSS入门</h2><h3 id="2-1-HTML引入CSS"><a href="#2-1-HTML引入CSS" class="headerlink" title="2.1 HTML引入CSS"></a>2.1 HTML引入CSS</h3><p>HTML有三种引入CSS的方式分别是：</p>
<ul>
<li><p>行内样式</p>
<ul>
<li>在标签中使用<strong>style</strong>属性指定css代码</li>
<li>如：<code>&lt;div style=&quot;color:red;&quot;&gt;hello,world&lt;/div&gt;</code></li>
</ul>
</li>
<li><p>内部样式</p>
<ul>
<li><p>在head标签内，定义style标签，在style标签体内写css代码</p>
</li>
<li><pre><code class="html"><span class="tag">&lt;<span class="name">style</span>&gt;</span>
    div{
<span class="css">        <span class="selector-tag">color</span><span class="selector-pseudo">:red</span>;</span>
    }
<span class="tag">&lt;/<span class="name">style</span>&gt;</span>
<span class="comment"><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">+ 外部样式</span><br><span class="line"></span><br><span class="line">	+ 通过link标签引入外部css文件</span><br><span class="line"></span><br><span class="line">	+ ```html</span><br><span class="line">		&lt;link <span class="attribute">rel</span>=<span class="string">"stylesheet"</span>  <span class="attribute">href</span>=<span class="string">"外部css文件"</span>/&gt;</span><br><span class="line">			<span class="attribute">rel</span>=<span class="string">"stylesheet"</span> :告知浏览器引入的外部文件为css样式表</span><br></pre></td></tr></table></figure></span>


</code></pre>
</li>
</ul>
</li>
</ul>
<h3 id="2-2-CSS书写规范"><a href="#2-2-CSS书写规范" class="headerlink" title="2.2 CSS书写规范"></a>2.2 CSS书写规范</h3><p>注释：<code>/*注释内容*/</code></p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">选择器&#123;</span><br><span class="line">	样式名:样式值;</span><br><span class="line">	样式名:样式值;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line"><span class="selector-tag">span</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-3-基本选择器"><a href="#2-3-基本选择器" class="headerlink" title="2.3 基本选择器"></a>2.3 基本选择器</h3><p>选择器作用：找出页面一组特定的标签</p>
<ul>
<li>标签选择器：<ul>
<li>语法：<code>标签名{css样式}</code></li>
<li>特点：指定标签</li>
</ul>
</li>
<li>类选择器：<ul>
<li><code>.class名{css样式}</code></li>
<li>特点：分组设置样式</li>
</ul>
</li>
<li>ID选择器：<ul>
<li><code>#id名{css样式}</code></li>
<li>特点：唯一</li>
</ul>
</li>
</ul>
<p>代码示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>基本选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        span&#123;</span><br><span class="line">            font-size: 20px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.female</span>&#123;</span></span><br><span class="line">            color: pink;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.male</span>&#123;</span></span><br><span class="line">            color: skyblue;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.hero</span>&#123;</span></span><br><span class="line">            font-weight: bold;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#boss</span>&#123;</span></span><br><span class="line">            font-size: 40px;</span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#9900FF</span>;</span></span><br><span class="line">            font-style: italic;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"female"</span>&gt;</span>古力娜扎<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"female"</span>&gt;</span>迪丽热巴<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"female hero"</span>&gt;</span>黑寡妇<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"male hero"</span>&gt;</span>钢铁侠<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"male hero"</span>&gt;</span>超人<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"boss"</span> <span class="attr">class</span>=<span class="string">"male"</span>&gt;</span>灭霸<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>选择器优先级：id &gt; class &gt; 标签</p>
</blockquote>
<h3 id="2-4-扩展选择器"><a href="#2-4-扩展选择器" class="headerlink" title="2.4 扩展选择器"></a>2.4 扩展选择器</h3><p>选择所有元素：</p>
<ul>
<li>语法：<code>*{css样式}</code></li>
</ul>
<p>并集选择器：</p>
<ul>
<li>语法：<code>选择器1,选择器2,选择器3....{css样式}</code></li>
</ul>
<p>父子选择器：</p>
<ul>
<li>语法：<code>父选择器 &gt; 子选择器{css样式}</code></li>
</ul>
<p>后代选择器：</p>
<ul>
<li>语法：<code>父选择器 后代选择器{css样式}</code></li>
</ul>
<p>属性选择器：</p>
<ul>
<li>语法：<code>标签[属性名=&quot;属性值&quot;]{css样式}</code></li>
</ul>
<p>伪类选择器：选择一些元素具有的状态</p>
<ul>
<li>语法： 元素:状态{}</li>
<li>如： <code>&lt;a&gt;:状态{}</code><ul>
<li>状态：<ul>
<li>link：初始化的状态</li>
<li>visited：被访问过的状态</li>
<li>active：正在访问状态</li>
<li>hover：鼠标悬浮状态</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>代码示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>04-扩展选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        span,label&#123;</span><br><span class="line">            font-size: 20px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        div&gt;span&#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        div span&#123;</span><br><span class="line">            border: 1px solid black;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">input</span><span class="selector-attr">[name=<span class="string">"username"</span>]</span>&#123;</span></span><br><span class="line">            background-color: gold;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>烟幕弹<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"gbl"</span>&gt;</span>高爆雷<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"jjx"</span>&gt;</span>急救箱<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"Jack"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="2-5-CSS属性介绍"><a href="#2-5-CSS属性介绍" class="headerlink" title="2.5 CSS属性介绍"></a>2.5 CSS属性介绍</h3><p>字体、文本</p>
<ul>
<li>font-size：字体大小<ul>
<li>color：文本颜色</li>
<li>text-align：对其方式</li>
<li>line-height：行高 </li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>字体和文本属性<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        p&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-tag">green</span>; <span class="comment">/*1.p段落文字绿色*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">font-size</span>: 20<span class="selector-tag">px</span>; <span class="comment">/*2.p段落文字大小20px*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">line-height</span>: 40<span class="selector-tag">px</span>; <span class="comment">/*3.p段落行高40px*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">font-weight</span>: <span class="selector-tag">bold</span>; <span class="comment">/*4.p段落字体加粗*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">font-family</span>: 楷体; <span class="comment">/*5.p段落字体楷体*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">font-style</span>: <span class="selector-tag">italic</span>; <span class="comment">/*6.p段落文字倾斜*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">text-indent</span>: 40<span class="selector-tag">px</span>; <span class="comment">/*设置段落的首行缩进*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line">        a&#123;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span> 学习的误区：<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        眼睛：看了一遍记住了<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        耳朵：听了一遍明白了<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        脑子：想了一遍搞懂了<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        手：你们会个屁！^_^ <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>背景</p>
<ul>
<li>background</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>背景属性<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div&#123;</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 200px;</span><br><span class="line">            border: 1px solid red;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#div1</span>&#123;</span></span><br><span class="line">            background-color: lightpink;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#div2</span>&#123;</span></span><br><span class="line">            background-image: url("../img/girl.jpg");</span><br><span class="line">            background-repeat: no-repeat;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-position</span>: <span class="selector-tag">center</span>; <span class="comment">/* center center */</span></span></span><br><span class="line">            background-color: antiquewhite;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span></span><br><span class="line">    我可以输入一切内容。。。。</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>边框</p>
<ul>
<li>border：设置边框属性</li>
</ul>
<p>尺寸</p>
<ul>
<li>width：宽度</li>
<li>height：高度</li>
</ul>
<p>盒子模型：控制布局</p>
<ul>
<li><p>margin：外边距</p>
</li>
<li><p>padding：内边距</p>
<ul>
<li>默认情况下内边距会影响整个盒子的大小</li>
<li>box-sizing: border-box;  设置盒子的属性，让width和height就是最终盒子的大小</li>
</ul>
</li>
<li><p>float：浮动</p>
<ul>
<li>left</li>
<li>right</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>盒子模型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span>&#123;</span></span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 300px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 10<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">red</span>; <span class="comment">/*同时指定四个边框*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">padding</span>: 30<span class="selector-tag">px</span>;<span class="comment">/*同时指定四个内边距为30px*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">margin</span><span class="selector-pseudo">:auto</span>;</span></span><br><span class="line">            margin-top: 50px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    盒子模型：</span></span><br><span class="line"><span class="comment">        边框：border</span></span><br><span class="line"><span class="comment">            top、right、bottom、left</span></span><br><span class="line"><span class="comment">        内边距：padding</span></span><br><span class="line"><span class="comment">            top、right、bottom、left</span></span><br><span class="line"><span class="comment">        外边距：margin</span></span><br><span class="line"><span class="comment">             top、right、bottom、left</span></span><br><span class="line"><span class="comment">        盒子水平居中：margin:auto;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../img/girl.jpg"</span> <span class="attr">width</span>=<span class="string">"300px"</span> <span class="attr">height</span>=<span class="string">"300px"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>显示属性</p>
<ul>
<li>display<ul>
<li>block：指定标签为块级元素</li>
<li>inline：指定标签为行内元素</li>
<li>none：隐藏元素</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>显示属性<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div,span&#123;</span><br><span class="line">            background-color: red;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        span&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">display</span>: <span class="selector-tag">block</span>; <span class="comment">/*指定标签为块级元素*/</span></span></span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        div&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">display</span>: <span class="selector-tag">none</span>; <span class="comment">/*指定标签为行内元素*/</span></span></span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ul li&#123;</span><br><span class="line">            display: inline;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>内联标签span1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>内联标签span2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>内联标签span3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>块级标签div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>块级标签div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>块级标签div3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>萨瓦迪卡<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>鼓励娜扎<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>马尔扎哈<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML入门</title>
    <url>/2020/08/16/HTML%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="一、HTML概述"><a href="#一、HTML概述" class="headerlink" title="一、HTML概述"></a>一、HTML概述</h2><p>HTML: (Hyper Text Markup Language)超文本标记语言。</p>
<ul>
<li>超文本:不仅可以展示文字,还可以显示超链接,图片,音乐,视频等丰富内容.</li>
<li>标记语言:描述特定功能的标签。</li>
<li>W3C(World Wide Web Consortium)世界万维网联盟给我们定义好了这套标签。</li>
</ul>
<blockquote>
<p>html和xml：</p>
<ul>
<li><p>xml（EXtensible Markup Language）：</p>
<ul>
<li>特点：标签自定义，存储数据</li>
</ul>
</li>
<li><p>html（Hyper Text Markup Language）：</p>
<ul>
<li>特点：标签预定义（语义，功能）、展示数据</li>
</ul>
</li>
</ul>
</blockquote>
<a id="more"></a>

<h2 id="二、HTML基础"><a href="#二、HTML基础" class="headerlink" title="二、HTML基础"></a>二、HTML基础</h2><h3 id="2-1-入门案例"><a href="#2-1-入门案例" class="headerlink" title="2.1 入门案例"></a>2.1 入门案例</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span> <span class="comment">&lt;!--文档声明：声明当前的html是5的这个版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span> <span class="comment">&lt;!--声明当前页面的字符集--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    hello，world！！！</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-HTML组成和规范"><a href="#2-2-HTML组成和规范" class="headerlink" title="2.2 HTML组成和规范"></a>2.2 HTML组成和规范</h3><ol>
<li><p>html文档声明：<code>&lt;!DOCTYPE html&gt;</code></p>
<ul>
<li>要求：必须在页面的第一行，固定值</li>
</ul>
</li>
<li><p>html预定义标签</p>
<ul>
<li>双标签：<code>&lt;html&gt;&lt;/HTML&gt;</code></li>
<li>单标签：<code>&lt;img&gt;</code></li>
<li>特点：html语法比较松散</li>
</ul>
</li>
<li><p>html属性</p>
<ul>
<li>语法：<code>&lt;html 属性名=&quot;属性值&quot; 属性名=&#39;属性值&#39;&gt;&lt;/HTML&gt;</code></li>
<li>特点：属性必须在开始标签</li>
</ul>
</li>
<li><p>html文本</p>
<ul>
<li>特点：写在指定的标签体中</li>
</ul>
</li>
<li><p>html注释</p>
<ul>
<li><code>&lt;!-- 注释内容 --&gt;</code></li>
</ul>
</li>
</ol>
<h2 id="三、HTML常用标签"><a href="#三、HTML常用标签" class="headerlink" title="三、HTML常用标签"></a>三、HTML常用标签</h2><p>标题标签：h1~h6</p>
<ul>
<li><code>&lt;h1&gt;&lt;/h1&gt; | &lt;h2&gt;&lt;/h2&gt; | ....</code></li>
</ul>
<p>水平线：<code>&lt;hr&gt;</code></p>
<p>段落：<code>&lt;p&gt;&lt;/p&gt;</code></p>
<p>换行：<code>&lt;br&gt;</code></p>
<p>超链接：<code>&lt;a href=&quot;跳转路径&quot; target=&quot;跳转方式&quot;&gt;&lt;/a&gt;</code></p>
<ul>
<li>href<ul>
<li>绝对地址</li>
<li>相对地址<ul>
<li><code>./</code>当前目录</li>
<li><code>../</code>上一级目录</li>
</ul>
</li>
</ul>
</li>
<li>target<ul>
<li><code>_self</code>：<strong>默认值</strong>，在当前页跳转</li>
<li><code>_blank</code>：打开一个新标签页</li>
</ul>
</li>
</ul>
<p>img：<code>&lt;img src=&quot;图片地址&quot; width=&quot;图片宽度,单位px(像素)&quot; alt=&quot;图片加载失败显示的文字&quot;&gt;</code></p>
<p>列表：</p>
<ul>
<li><code>ul</code>：无序列表</li>
<li><code>ol</code>：有序列表</li>
<li><code>li</code>：列表项</li>
</ul>
<p>容器：</p>
<ul>
<li>div：<code>&lt;div&gt;内容&lt;/div&gt;</code><ul>
<li>块级元素，占一行</li>
</ul>
</li>
<li>span：<code>&lt;span&gt;内容&lt;/span&gt;</code><ul>
<li>行内元素，根据内容自适应大小</li>
</ul>
</li>
</ul>
<p>转义字符：</p>
<ul>
<li><code>&amp;nbsp;</code>：英文空格</li>
<li><code>&amp;emsp;</code>：中文空格</li>
</ul>
<p>表格：</p>
<ul>
<li>table：定义表格<ul>
<li>width：宽度</li>
<li>border：边框</li>
<li>cellpadding：定义内容和单元格的距离</li>
<li>cellspacing：定义单元格之间的距离。如果指定为0，则单元格的线会合为一条、</li>
<li>bgcolor：背景色</li>
<li>align：对齐方式</li>
</ul>
</li>
<li>tr：定义行<ul>
<li>bgcolor：背景色</li>
<li>align：对齐方式</li>
</ul>
</li>
<li>td：定义单元格<ul>
<li>colspan：合并列</li>
<li>rowspan：合并行</li>
</ul>
</li>
<li>th：定义表头单元格</li>
<li><code>&lt;caption&gt;</code>：表格标题</li>
<li><code>&lt;thead&gt;</code>：表示表格的头部分</li>
<li><code>&lt;tbody&gt;</code>：表示表格的体部分</li>
<li><code>&lt;tfoot&gt;</code>：表示表格的脚部分</li>
</ul>
<h2 id="四、HTML表单"><a href="#四、HTML表单" class="headerlink" title="四、HTML表单"></a>四、HTML表单</h2><p>表单：</p>
<ul>
<li><code>&lt;form&gt;&lt;/form&gt;</code> ：它只是一个容器（我们看不到），所有的表单项必须被它包裹，才能采集和发送…</li>
</ul>
<p>常用属性：</p>
<ul>
<li>action：表单的提交地址，暂时使用#代替（#：表示当前页面）</li>
<li>method：表单的提交方式，有二种：get（默认值）  | post<ul>
<li>get<ul>
<li>格式：页面地址?参数名=参数值 &amp; 参数名=参数值<ul>
<li>请求参数在地址栏拼接</li>
<li>请求方式不太安全</li>
<li>请求大小是有限制</li>
</ul>
</li>
</ul>
</li>
<li>post<ul>
<li>格式：在http协议请求体；参数名=参数值 &amp; 参数名=参数值<ul>
<li>参数不在地址拼接</li>
<li>请求方式相对安全</li>
<li>请求大小是没有限制</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>表单项：</p>
<ul>
<li><p>文本框</p>
<ul>
<li><p><code>&lt;input type=&quot;&quot; name=&quot;&quot; value=&quot;&quot;/&gt;</code></p>
</li>
<li><p>type 类型，有很多种，不同类型有不同的功能和展示效果</p>
<ul>
<li>text：普通文本框</li>
<li>password：密码框 特点：掩码</li>
<li>date：日期选择框</li>
<li>radio：单选框<ul>
<li>特点：name属性相同分为一组，完成互斥效果</li>
<li>默认选中：checked</li>
</ul>
</li>
<li>checkbox：复选框<ul>
<li>特点：name属性相同分为一组，不会出现互斥的效果</li>
<li>默认选中：checked</li>
</ul>
</li>
<li>file：文件上传<ul>
<li>要求：表单的提交方式必须为post</li>
</ul>
</li>
<li>submit：提交按钮<ul>
<li>功能：将表单提交到服务器</li>
<li>注意：此按钮不需要name属性，value是按钮显示名称</li>
</ul>
</li>
<li>reset：重置按钮<ul>
<li>功能：将表单元素重置</li>
</ul>
</li>
<li>button：普通按钮，通常与js结合使用</li>
</ul>
<blockquote>
<p>注意：</p>
<ul>
<li>name 文本框名称，必须存在，不然此表单的不会被提交</li>
<li>value 文本框的值 （1.用户输入  2.用户选择）</li>
</ul>
</blockquote>
</li>
</ul>
</li>
<li><p>下拉框</p>
<ul>
<li>语法：<code>&lt;select name=&quot;&quot; multiple&gt;&lt;select&gt;</code><ul>
<li>multiple ：多选</li>
<li>下拉选项：<code>&lt;option value=&quot;&quot;&gt;&lt;/option&gt;</code><ul>
<li>默认选中：selected</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>文本域</p>
<ul>
<li>语法：<code>&lt;textarea name=&quot;&quot;&gt; &lt;/textarea&gt;</code></li>
<li>常用属性：<ul>
<li>rows：行高</li>
<li>cols：列宽</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>11-表单控件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">    用户：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生日：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"date"</span> <span class="attr">name</span>=<span class="string">"birthday"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    性别：</span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"male"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"male"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"男"</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"female"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"female"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"女"</span> &gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    爱好：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"somke"</span>&gt;</span> 抽烟</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"drink"</span> <span class="attr">checked</span>&gt;</span> 喝酒</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"perm"</span>&gt;</span>  烫头 <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    头像：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"pic"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    学历：</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"edu"</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>小学<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>初中<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"3"</span> &gt;</span>高中<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"4"</span> <span class="attr">selected</span>&gt;</span>大学<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    介绍：</span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"intro"</span> <span class="attr">rows</span>=<span class="string">"10"</span> <span class="attr">cols</span>=<span class="string">"30"</span>&gt;</span> <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册 | 登录 | 提交"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">value</span>=<span class="string">"重置"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"我是普通按钮，在表单中没啥卵用"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript</title>
    <url>/2020/08/16/JavaScript/</url>
    <content><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h3 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h3><p>概念：一门客户端脚本语言。</p>
<ul>
<li>运行在客户端浏览器中的，每一个浏览器都有JavaScript的解析引擎</li>
<li>脚本语言：不需要编译，直接就可以被浏览器解析执行。</li>
</ul>
<a id="more"></a>

<h3 id="1-2-功能"><a href="#1-2-功能" class="headerlink" title="1.2 功能"></a>1.2 功能</h3><p>功能：可以来增强用户和HTML页面的交互过程，可以控制HTML元素，让页面有一些动态的效果，增强用户体验。</p>
<h3 id="1-3-特点"><a href="#1-3-特点" class="headerlink" title="1.3 特点"></a>1.3 特点</h3><ul>
<li><p>JS源码不需要编译，浏览器可以直接解释运行</p>
</li>
<li><p>JS是弱类型语言，js变量声明不需要指明类型</p>
</li>
</ul>
<blockquote>
<p>小结：js是弱类型的脚本语言，可以直接在浏览器解释运行</p>
</blockquote>
<h3 id="1-4-JavaScript的组成"><a href="#1-4-JavaScript的组成" class="headerlink" title="1.4 JavaScript的组成"></a>1.4 JavaScript的组成</h3><table>
<thead>
<tr>
<th>组成部分</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>ECMA Script</td>
<td>构成了JS核心的语法基础</td>
</tr>
<tr>
<td>BOM</td>
<td>Browser Object Model 浏览器对象模型，用来操作浏览器上的对象</td>
</tr>
<tr>
<td>DOM</td>
<td>Document Object Model 文档对象模型，用来操作网页中的元素（标签）</td>
</tr>
</tbody></table>
<h2 id="二、基础语法"><a href="#二、基础语法" class="headerlink" title="二、基础语法"></a>二、基础语法</h2><h3 id="2-1-HTML引入JS"><a href="#2-1-HTML引入JS" class="headerlink" title="2.1 HTML引入JS"></a>2.1 HTML引入JS</h3><p>在HTML中引入JS有两种方式：</p>
<ul>
<li>内部脚本<ul>
<li>语法：<code>&lt;script type=&quot;text/javascript&quot;&gt; js代码 &lt;/script&gt;</code></li>
<li>作用范围：当前页面</li>
</ul>
</li>
<li>外部脚本<ul>
<li>语法：<code>&lt;script type=&quot;text/javascript&quot; src=&quot;外部js文件路径&quot;&gt;&lt;/script&gt;</code></li>
<li>作用范围：所有引入当前JS文件的页面</li>
</ul>
</li>
</ul>
<blockquote>
<p>小贴士：</p>
<ul>
<li><p>扩展:在开发时 style和link标签通常在head头部，script标签在body尾部…</p>
</li>
<li><p>注意：如果script标签引入了外部脚本，那么标签体不能自闭合，而且不允许有js代码</p>
</li>
</ul>
</blockquote>
<h3 id="2-2-注释"><a href="#2-2-注释" class="headerlink" title="2.2 注释"></a>2.2 注释</h3><ul>
<li>单行注释：<code>//注释内容</code></li>
<li>多行注释：<code>/* 注释内容 */</code></li>
</ul>
<h3 id="2-3-JS的三种输出方式"><a href="#2-3-JS的三种输出方式" class="headerlink" title="2.3 JS的三种输出方式"></a>2.3 JS的三种输出方式</h3><p>在JavaScript中，有三种输出方式，分别是</p>
<ul>
<li><p>在浏览器弹框输出：<code>alert(&#39;内容&#39;);</code></p>
</li>
<li><p>输出到html页面：<code>document.write(&#39;内容&#39;);</code></p>
</li>
<li><p>输出到浏览器控制台：<code>cosole.log(&#39;内容&#39;);</code></p>
</li>
</ul>
<p>代码示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS三种输出方式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1. 浏览器弹框输出字符</span></span></span><br><span class="line"><span class="actionscript">    alert(<span class="string">'哈哈'</span>)</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2. 输出html内容到页面</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.write(<span class="string">'呵呵'</span>)</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 3. 输出到浏览器控制台</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">'嘻嘻'</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="2-4-JS的数据类型及其变量声明"><a href="#2-4-JS的数据类型及其变量声明" class="headerlink" title="2.4 JS的数据类型及其变量声明"></a>2.4 JS的数据类型及其变量声明</h3><h4 id="2-4-1-数据类型"><a href="#2-4-1-数据类型" class="headerlink" title="2.4.1 数据类型"></a>2.4.1 数据类型</h4><p>数据类型可分为原始数据类型和引用数据类型：</p>
<ul>
<li>原始数据类型<ul>
<li>number：数值。包括整数、浮点数、NaN(not a number 一个不是数字的数字类型)</li>
<li>string：字符串。</li>
<li>boolean：true、flase</li>
<li>undefine：未定义</li>
<li>null：一个对象为空的占位符</li>
</ul>
</li>
<li>引用数据类型：对象(Object)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">'哈哈'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> str);</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">521</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> i);</span><br><span class="line">    <span class="keyword">let</span> u;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> u);</span><br><span class="line">    <span class="keyword">let</span> b = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> b);</span><br><span class="line">    <span class="keyword">let</span> n = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> n);</span><br><span class="line">    <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> date);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>小贴士：</p>
<ul>
<li><code>typeof 变量名</code>：可以查看变量的数据类型</li>
</ul>
</blockquote>
<h4 id="2-4-2-变量声明"><a href="#2-4-2-变量声明" class="headerlink" title="2.4.2 变量声明"></a>2.4.2 变量声明</h4><p>Java语言是强类型语言，而<strong>JavaScript是弱类型语言</strong>。</p>
<ul>
<li>强类型：在开辟变量存储空间时，定义了空间将来存储的数据的数据类型。只能存储固定类型的数据</li>
<li><strong>弱类型</strong>：在开辟变量存储空间时，不定义空间将来的存储数据类型，<strong>可以存放任意类型的数据</strong>。</li>
</ul>
<p>定义语法(这里讲解<code>ES6</code>的语法)：</p>
<ul>
<li><p>变量：<code>let 变量名 = 变量值;</code></p>
</li>
<li><p>常量：<code>const 常量名 = 常量值;</code></p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//Java: String str = "你好";</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">'你好'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(str);</span><br><span class="line">    <span class="comment">//Java: int i = 1314;</span></span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">1314</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">    <span class="comment">//Java: double d = 521.1314;</span></span><br><span class="line">    <span class="keyword">let</span> d = <span class="number">521.1314</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(d);</span><br><span class="line">    <span class="comment">//Java: final Integer PI = 3.14;</span></span><br><span class="line">    <span class="keyword">const</span> PI = <span class="number">3.14</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(PI);</span><br><span class="line">    <span class="comment">//Java: boolean b = true;</span></span><br><span class="line">    <span class="keyword">let</span> b = <span class="literal">true</span></span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="2-5-JS的运算符"><a href="#2-5-JS的运算符" class="headerlink" title="2.5 JS的运算符"></a>2.5 JS的运算符</h3><ol>
<li>一元运算符：只有一个运算数的运算符<ul>
<li>++，–，+【正号】</li>
</ul>
</li>
<li>算数运算符<ul>
<li>+，-，*，/，%…</li>
</ul>
</li>
<li>赋值运算符<ul>
<li>=，+=，-=</li>
</ul>
</li>
<li>比较运算符<ul>
<li>&lt;，&gt;，&gt;=，&lt;=，==，===(全等于)</li>
</ul>
</li>
<li>逻辑运算符<ul>
<li>&amp;&amp;，||，!</li>
<li>其他类型转boolean：<ol>
<li>number：0或NaN为假，其他为真</li>
<li>string：除了空字符串(“”)，其他都是true【双引号内有空格不算空串】</li>
<li>null&amp;undefined:都是false</li>
<li>对象：所有对象都为true</li>
</ol>
</li>
</ul>
</li>
<li>三元运算符<ul>
<li>? :</li>
<li>语法：<ul>
<li>表达式? 值1:值2;</li>
<li>判断表达式的值，如果是true则取值1，如果是false则取值2；</li>
</ul>
</li>
</ul>
</li>
</ol>
<blockquote>
<p>js与java的运算符使用方法大致相同。</p>
<p>NaN：not a number（意思是不是一个数字）</p>
<p>需要注意的是:</p>
<ul>
<li><p>js的数值可以与字符串参与数学运算，底层进行了隐式转换</p>
</li>
<li><p><code>===</code>：全等于，数值和数据类型全部一样才为true，<code>==</code>只比较数值</p>
</li>
</ul>
</blockquote>
<h3 id="2-6-JS流程控制"><a href="#2-6-JS流程控制" class="headerlink" title="2.6 JS流程控制"></a>2.6 JS流程控制</h3><p>高级语言中的三种基本结构：顺序、分支、循环 。</p>
<h4 id="2-6-1-条件判断"><a href="#2-6-1-条件判断" class="headerlink" title="2.6.1 条件判断"></a>2.6.1 条件判断</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>if判断</span><br><span class="line"><span class="code">		if (条件表达式) &#123;</span></span><br><span class="line"><span class="code">            代码块;</span></span><br><span class="line"><span class="code">        &#125; else if(条件表达式) &#123;</span></span><br><span class="line"><span class="code">            代码块;</span></span><br><span class="line"><span class="code">        &#125; else &#123;</span></span><br><span class="line"><span class="code">            代码块;</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">		</span></span><br><span class="line"><span class="bullet">2. </span>switch判断	</span><br><span class="line"><span class="code">		switch(条件表达式)&#123;</span></span><br><span class="line"><span class="code">            case 满足条件1 :</span></span><br><span class="line"><span class="code">            	代码块 break;</span></span><br><span class="line"><span class="code">            case 满足条件2 :</span></span><br><span class="line"><span class="code">            	代码块 break;</span></span><br><span class="line"><span class="code">            default:</span></span><br><span class="line"><span class="code">            	默认代码块;</span></span><br><span class="line"><span class="code">		&#125;</span></span><br></pre></td></tr></table></figure>



<p>代码示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// let flag = false;</span></span><br><span class="line">    <span class="comment">// let flag = ' '; // 非空串为真</span></span><br><span class="line">    <span class="comment">// let flag = 0; // 非零为真</span></span><br><span class="line">    <span class="comment">// let flag = new Date();  // 有对象为真</span></span><br><span class="line">    <span class="comment">// let flag ; // 未定义未假</span></span><br><span class="line">    <span class="keyword">let</span> flag = <span class="literal">null</span>; <span class="comment">// 空值为假</span></span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"真的"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"假的"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="2-6-2-循环语句"><a href="#2-6-2-循环语句" class="headerlink" title="2.6.2 循环语句"></a>2.6.2 循环语句</h4><p>在js中，有五种循环分别是：</p>
<ul>
<li><p>普通for循环</p>
<ul>
<li><pre><code class="js"><span class="keyword">for</span>(<span class="keyword">let</span> i= <span class="number">0</span>; i&lt;<span class="number">10</span>; i++){
    需要执行的代码;
}
&lt;!--￼<span class="number">5</span>--&gt;</code></pre>
</li>
</ul>
</li>
<li><p>索引for循环(for…in)</p>
<ul>
<li><pre><code class="js"><span class="keyword">for</span>(<span class="keyword">let</span> index <span class="keyword">in</span> array){
    需要执行的代码;
}
&lt;!--￼<span class="number">6</span>--&gt;</code></pre>
</li>
</ul>
</li>
<li><p>do..while循环</p>
<ul>
<li><pre><code class="js"><span class="keyword">do</span>{
    需要执行的代码;
}<span class="keyword">while</span>(条件表达式);
&lt;!--￼<span class="number">7</span>--&gt;


</code></pre>
</li>
</ul>
</li>
</ul>
<h3 id="2-7-扩展"><a href="#2-7-扩展" class="headerlink" title="2.7 扩展"></a>2.7 扩展</h3><p>在ES6之前，js定义变量使用var关键字定义。</p>
<ul>
<li>而var声明的变量没有块级作用域</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用var声明的变量没有块级作用域</span></span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> a = <span class="number">15</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">//10</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span> ; i  &lt; <span class="number">5</span> ; i++)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"haha"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(i); <span class="comment">//5</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'hehe'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(j);<span class="comment">//报错，j is not defined</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>上述代码，除出了for循环仍可以获取i的值，值为5</p>
</blockquote>
<h2 id="三、JS函数"><a href="#三、JS函数" class="headerlink" title="三、JS函数"></a>三、JS函数</h2><p>js函数是执行特定功能的代码块.也可以称为js方法</p>
<h3 id="3-1-普通函数"><a href="#3-1-普通函数" class="headerlink" title="3.1 普通函数"></a>3.1 普通函数</h3><p>格式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">参数<span class="number">1</span>,参数<span class="number">2</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> xxx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用：<code>函数名(实际参数1，实际参数2...);</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 二个数求和</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// console.log(a + b);</span></span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 三个数求和</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">return</span> a + b + c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 求N个数的和</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(args);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> arg <span class="keyword">of</span> args) &#123;</span><br><span class="line">            result+= arg;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// NaN not a number 这不是一个数</span></span><br><span class="line">    <span class="keyword">let</span> result = sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>js函数特点：</p>
<ul>
<li>声明的函数不需要定义返回值</li>
<li>声明的函数形参不需要使用变量修饰符声明</li>
<li>如果有返回值就加上return</li>
<li>js没有方法重载，重名的会被覆盖…</li>
<li>js的函数参数个数不太严谨【了解】</li>
<li>所有的函数体内置了arguments数组，用于接收调用时传递的实际参数</li>
<li>js函数支持可变参数</li>
</ul>
</blockquote>
<h3 id="3-2-匿名函数"><a href="#3-2-匿名函数" class="headerlink" title="3.2 匿名函数"></a>3.2 匿名函数</h3><p>格式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="四、事件"><a href="#四、事件" class="headerlink" title="四、事件"></a>四、事件</h2><p>事件：JS可以监听用户的行为,并调用函数来完成用户交互功能.</p>
<h3 id="4-1-常用事件"><a href="#4-1-常用事件" class="headerlink" title="4.1 常用事件"></a>4.1 常用事件</h3><p>点击事件：</p>
<ul>
<li>onclick：单击事件</li>
<li>ondbclick：双击事件</li>
</ul>
<p>焦点事件：</p>
<ul>
<li>onblur：失去焦点</li>
<li>onfocus：元素获得焦点</li>
</ul>
<p>加载事件：</p>
<ul>
<li>onload：页面加载完成后立即发生</li>
</ul>
<p>鼠标事件：</p>
<ul>
<li>onmousedown    鼠标按钮被按下。</li>
<li>onmouseup    鼠标按键被松开。</li>
<li>onmousemove    鼠标被移动。</li>
<li>onmouseover    鼠标移到某元素之上。</li>
<li>onmouseout    鼠标从某元素移开。</li>
</ul>
<p>键盘事件：</p>
<ul>
<li><p>onkeydown    某个键盘按键被按下。    </p>
</li>
<li><p>onkeyup        某个键盘按键被松开。</p>
</li>
<li><p>onkeypress    某个键盘按键被按下并松开。</p>
</li>
</ul>
<p>改变事件：</p>
<ul>
<li>onchange    域的内容被改变。</li>
</ul>
<p>表单事件：</p>
<ul>
<li>onsubmit    提交按钮被点击。</li>
</ul>
<h3 id="4-2-事件绑定"><a href="#4-2-事件绑定" class="headerlink" title="4.2 事件绑定"></a>4.2 事件绑定</h3><p>将事件与HTML标签进行绑定，实现交互功能。</p>
<p>代码示例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>08-事件绑定<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"普通函数"</span> <span class="attr">onclick</span>=<span class="string">"fun1()"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"匿名函数"</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 普通函数</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">fun1</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'我是普通函数...'</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 匿名函数</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1.获取button按钮的js对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2.给onclick属性绑定匿名函数</span></span></span><br><span class="line"><span class="actionscript">    btn.onclick=<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'我是匿名函数'</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>).onclick=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'我是匿名函数'</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="4-3-案例：页面交互"><a href="#4-3-案例：页面交互" class="headerlink" title="4.3 案例：页面交互"></a>4.3 案例：页面交互</h3><p>需求：给页面表单控件绑定对应事件，实现交互功能</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>案例：页面交互<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">姓名 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">学历</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"edu"</span> <span class="attr">id</span>=<span class="string">"edu"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>本科<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>大专<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span> <span class="attr">method</span>=<span class="string">"get"</span> <span class="attr">id</span>=<span class="string">"myForm"</span>&gt;</span></span><br><span class="line">    文本框：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"text"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//1. onload 页面加载完成</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  <span class="comment">// 当前窗口加载完毕后，触发的事件，执行函数完成某些功能</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//  alert('页面加载完毕。。。')</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// alert('haha')</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//2. onfocus 获取焦点</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'username'</span>).onfocus = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//  document.getElementById('username').value='哈哈';</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// js对象绑定事件时，也有this的概念，this表示当前的js对象</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.value = <span class="string">'呵呵'</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//3. onblur 失去焦点</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'username'</span>).onblur = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.value = <span class="string">''</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//4. onchange 表单控件的值改变时</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'edu'</span>).onchange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="keyword">this</span>.value)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//5. onclick 鼠标单击</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>).ondblclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'哎呀妈呀，我被点了》。。'</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 6. onsubmit 表单事件</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'myForm'</span>).onsubmit=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">       <span class="comment">// return true; // 表单正常提交</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">// 表单拦截</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="五、JS内置对象"><a href="#五、JS内置对象" class="headerlink" title="五、JS内置对象"></a>五、JS内置对象</h2><h3 id="5-1-string对象"><a href="#5-1-string对象" class="headerlink" title="5.1 string对象"></a>5.1 string对象</h3><p>字符串对象</p>
<ul>
<li>js构造字符串对象可以使用单引号(<code>&#39;&#39;</code>)，双引号(<code>&quot;&quot;</code>)，反引号<code>(``)</code>三种方式</li>
</ul>
<p>字符串的常用方法：</p>
<ul>
<li>substring(startIndex,endIndex) [start,end)  字符串截取</li>
<li>trim()  去掉左右空格</li>
<li>split()  切割字符串，变为数组</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="comment">//构造字符串对象可以使用  双引号,单引号,反引号</span></span><br><span class="line">    <span class="comment">// 双引号</span></span><br><span class="line">    <span class="keyword">let</span> str1 = <span class="string">"哈哈"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 单引号</span></span><br><span class="line">    <span class="keyword">let</span> str2 = <span class="string">'呵呵'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反引号：通过 $&#123;变量占位符&#125; ，帮助我们快速实现字符串拼接</span></span><br><span class="line">    <span class="keyword">let</span> str3 = <span class="string">`hello`</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> str3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 举个栗子</span></span><br><span class="line">    <span class="keyword">let</span> hero = <span class="string">"蔡文姬"</span>;</span><br><span class="line">    <span class="keyword">let</span> winRate = <span class="number">70</span>;</span><br><span class="line">    <span class="comment">// let str = "您选择的英雄是：" + hero + ",它的历史胜率为：" + winRate + "%";</span></span><br><span class="line">    <span class="keyword">let</span> str=<span class="string">`您选择的英雄是：<span class="subst">$&#123;hero&#125;</span>,</span></span><br><span class="line"><span class="string">            它的历史胜</span></span><br><span class="line"><span class="string">            率为<span class="subst">$&#123;winRate&#125;</span>%`</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(str);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ------------ 2. 字符串常用方法</span></span><br><span class="line">    <span class="keyword">let</span> test = <span class="string">`     你好啊！`</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(test.substring(<span class="number">5</span>, <span class="number">7</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(test.trim());</span><br><span class="line">    <span class="built_in">console</span>.log(test.split(<span class="string">','</span>));</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="5-2-array对象"><a href="#5-2-array对象" class="headerlink" title="5.2 array对象"></a>5.2 array对象</h3><p>数组对象：</p>
<p>构造数组对象有两种方式</p>
<ul>
<li><code>let arr = [ele1,ele2,ele3];</code></li>
<li><code>let arr = new Array(ele1,ele2,ele3);</code></li>
</ul>
<blockquote>
<p>特点：js数组长度和类型可以任意，所以我们可以简单理解为数组就是java中的list集合</p>
</blockquote>
<p>数组的常用方法：</p>
<ul>
<li><p>添加元素</p>
<ul>
<li>push() 向尾部添加</li>
<li>unshift() 向头部添加</li>
</ul>
</li>
<li><p>删除元素</p>
<ul>
<li>pop() 弹出最后一个元素</li>
<li>shift() 弹出第一个元素</li>
</ul>
</li>
<li><p>合并数组</p>
<ul>
<li>concat()</li>
</ul>
</li>
<li><p>数组排序</p>
<ul>
<li>sort()</li>
</ul>
</li>
<li><p>将数组转为字符串  （与字符串对象.split()方法相反 ）</p>
<ul>
<li>join()</li>
</ul>
</li>
<li><p>数组反转</p>
<ul>
<li>reverse()</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//1. 创建数组</span></span><br><span class="line">    <span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="string">'a'</span>,<span class="literal">true</span>,<span class="keyword">new</span> <span class="built_in">Date</span>()];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(arr1);</span><br><span class="line">    <span class="keyword">let</span> arr2= <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">'a'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(arr2);</span><br><span class="line">    <span class="comment">//2. 数组合并</span></span><br><span class="line">    <span class="keyword">let</span> newArray = arr1.concat(arr2);</span><br><span class="line">    <span class="built_in">console</span>.log(newArray);</span><br><span class="line">    <span class="comment">//3. 添加元素</span></span><br><span class="line">    newArray.push(<span class="string">'hehe'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(newArray);</span><br><span class="line">    <span class="comment">//4. 删除元素</span></span><br><span class="line">    <span class="keyword">let</span> result = newArray.pop();</span><br><span class="line">    <span class="built_in">console</span>.log(newArray);</span><br><span class="line">    <span class="comment">//5. 数组元素拼接为字符串</span></span><br><span class="line">    <span class="keyword">let</span> str = newArray.join(<span class="string">'-'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(str);</span><br><span class="line">    <span class="comment">//6. 排序数组元素 【了解】</span></span><br><span class="line">    <span class="keyword">let</span> array = [<span class="string">'a'</span>,<span class="string">'e'</span>,<span class="string">'c'</span>,<span class="string">'w'</span>]</span><br><span class="line">    <span class="built_in">console</span>.log(array.sort()); <span class="comment">// 升序</span></span><br><span class="line">    <span class="built_in">console</span>.log(array.sort().reverse()); <span class="comment">// 降序</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="5-3-Date对象"><a href="#5-3-Date对象" class="headerlink" title="5.3 Date对象"></a>5.3 Date对象</h3><p>日期对象：<code>let date = new Date();</code></p>
<p>常用方法：</p>
<ul>
<li><p>获取年份：<code>getFullYear()</code></p>
</li>
<li><p>获取月份：<code>getMonth()</code></p>
</li>
<li><p>获取几号：<code>getDate()</code></p>
</li>
<li><p>获取1970-至今的毫秒值：<code>getTime()</code></p>
</li>
<li><p>等等….</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="built_in">console</span>.log(date);</span><br><span class="line">    <span class="built_in">console</span>.log(date.toLocaleString()); <span class="comment">// 转为本地时间格式字符串</span></span><br><span class="line">    <span class="built_in">console</span>.log(date.getFullYear());<span class="comment">// 获取4位年份</span></span><br><span class="line">    <span class="built_in">console</span>.log(date.getMonth()+<span class="number">1</span>); <span class="comment">// 获取月份  （0~11）  需要+1</span></span><br><span class="line">    <span class="built_in">console</span>.log(date.getDate()); <span class="comment">// 获取几号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> nowDate = <span class="string">`<span class="subst">$&#123;date.getFullYear()&#125;</span>年<span class="subst">$&#123;date.getMonth()+<span class="number">1</span>&#125;</span>月<span class="subst">$&#123;date.getDate()&#125;</span>日`</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(nowDate);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(date.getTime()); <span class="comment">// 获取1970-今 的毫秒值 （时间戳 唯一性...）</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="5-4-Math对象"><a href="#5-4-Math对象" class="headerlink" title="5.4 Math对象"></a>5.4 Math对象</h3><p>数学运算对象：</p>
<ul>
<li>四舍五入：<code>round()</code></li>
<li>向下取整：<code>floor()</code></li>
<li>向上取整：<code>ceil()</code></li>
<li>产生随机数：<code>random()</code>【返回[0,1])之间的随机数，左闭右开，包含0不包含1】</li>
</ul>
<blockquote>
<p>可以理解为Math对象为Java中的数学工具类Math,里面的方法直接通过<code>Math.方法名</code>调用即可.</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script &gt;</span><br><span class="line">    <span class="keyword">let</span> n = <span class="number">1234.567</span>;</span><br><span class="line">    <span class="comment">//1. 四舍五入取整</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(n));</span><br><span class="line">    <span class="comment">//2. 向下取整</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor(n));</span><br><span class="line">    <span class="comment">//3. 向上取整</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Math</span>.ceil(n));</span><br><span class="line">    <span class="comment">//4. 产生随机数</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Math</span>.random());</span><br><span class="line">    <span class="comment">//5.练习生成[1-10] 随机数</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor((<span class="built_in">Math</span>.random() * <span class="number">10</span>) + <span class="number">1</span>));</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="5-5-全局函数"><a href="#5-5-全局函数" class="headerlink" title="5.5 全局函数"></a>5.5 全局函数</h3><p>全局函数：不需要创建对象，可以直接调用的函数，称为全局函数。</p>
<p>常用：</p>
<ul>
<li><p>字符串转为数字、</p>
<ul>
<li><p><code>parseInt()</code>  转为整型</p>
</li>
<li><p><code>parseFloat()</code>转为浮点型</p>
<blockquote>
<p>注意：从第一个字符开始转换，遇到非数值字符停止转换</p>
</blockquote>
</li>
</ul>
</li>
<li><p>对字符串编码和解码</p>
<ul>
<li><code>encodeURI()</code>编码</li>
<li><code>decodeURI()</code> 解码</li>
</ul>
</li>
<li><p>把字符串当作js表达式来执行</p>
<ul>
<li><code>eval(&quot;js代码&quot;)</code></li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script &gt;</span><br><span class="line">    <span class="comment">// 字符串转为数值</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">'a13a14.5a21'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(str));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(str));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 中文及特殊符号编码和解码</span></span><br><span class="line">    <span class="keyword">let</span> encode = <span class="built_in">encodeURI</span>(<span class="string">'全局函数'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(encode);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> decode = <span class="built_in">decodeURI</span>(<span class="string">'%E5%85%A8%E5%B1%80%E5%87%BD%E6%95%B0'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(decode);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="string">"alert('1')"</span></span><br><span class="line">    <span class="comment">// 执行js字符串的语句</span></span><br><span class="line">    <span class="built_in">eval</span>(<span class="string">"alert('1')"</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="六、BOM对象"><a href="#六、BOM对象" class="headerlink" title="六、BOM对象"></a>六、BOM对象</h2><p>浏览器对象模型：Browser Object Model</p>
<p>作用：把浏览器抽象成为一个对象模型,我们可以使用js模拟浏览器的一些功能。</p>
<h3 id="6-1-window对象"><a href="#6-1-window对象" class="headerlink" title="6.1 window对象"></a>6.1 window对象</h3><p> window对象：是当前窗口的一个顶级对象</p>
<h4 id="6-1-1-三种弹框"><a href="#6-1-1-三种弹框" class="headerlink" title="6.1.1 三种弹框"></a>6.1.1 三种弹框</h4><p>警告(提示)框：<code>alert()</code></p>
<p>确认框：<code>confirm()</code></p>
<ul>
<li>点击确定 返回true，点击取消 返回false</li>
</ul>
<p>输入框：<code>prompt()</code></p>
<ul>
<li>点击确定返回 用户输入值，点击取消返回 null</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 1.警告框</span></span><br><span class="line">    alert(<span class="string">'xxxxx'</span>);</span><br><span class="line">    <span class="comment">// 2.确认框</span></span><br><span class="line">    <span class="built_in">console</span>.log(confirm(<span class="string">'您确定要删除吗？'</span>));</span><br><span class="line">    <span class="comment">// 3.输入框</span></span><br><span class="line">    <span class="built_in">console</span>.log(prompt(<span class="string">'请输入你要搜索的内容？'</span>));</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="6-1-2-二种定时器"><a href="#6-1-2-二种定时器" class="headerlink" title="6.1.2 二种定时器"></a>6.1.2 二种定时器</h4><p>周期性定时器：</p>
<ul>
<li>创建：<code>let interval = setInterval(&#39;js代码&#39;,毫秒值)</code></li>
<li>销毁：<code>clearInterval(interval);</code></li>
</ul>
<p>一次性定时器</p>
<ul>
<li>创建：<code>let timeout = setTimeout(&#39;js代码&#39;,毫秒值);</code></li>
<li>销毁：<code>clearTimeout(timeout);</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>02-js二个定时器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn1"</span>&gt;</span>取消打印时间<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn2"</span>&gt;</span>取消打印自然数<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1. 定时3秒之后在警告框打印当前时间</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> timeout = setTimeout(<span class="string">'alert(new Date().toLocaleString())'</span>,<span class="number">3000</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2. 点击按钮取消打印时间</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>).onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">        clearTimeout(timeout)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 3. 每隔2秒在控制台打印递增自然数</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> num = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> interval = setInterval(<span class="string">'console.log(num++)'</span>,<span class="number">2000</span>);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 4. 点击按钮取消打印自然数</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'btn2'</span>).onclick=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">        clearInterval(interval)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="6-2-Location对象"><a href="#6-2-Location对象" class="headerlink" title="6.2 Location对象"></a>6.2 Location对象</h3><blockquote>
<p>把浏览器的地址栏封装为location对象</p>
</blockquote>
<p>Location地址</p>
<ul>
<li>获取当前窗口地址<ul>
<li><code>ocation.href</code></li>
</ul>
</li>
<li>刷新当前窗口<ul>
<li><code>location.reload()</code></li>
</ul>
</li>
<li>当前页跳转<ul>
<li><code>location.href=&#39;新地址&#39;</code></li>
</ul>
</li>
</ul>
<p>扩展：如果想打开一个新标签页，跳转新的页面</p>
<ul>
<li><code>window.open(&#39;新地址&#39;)</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>03-location对象<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"addr()"</span>&gt;</span>获取当前浏览器地址<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"refresh()"</span>&gt;</span>刷新当前页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"jump()"</span>&gt;</span> 跳转页面(重点)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"toOpen()"</span>&gt;</span> 打开新窗口<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 获取当前浏览器地址</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">addr</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">window</span>.location.href);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 刷新当前页面</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">refresh</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line">        location.reload()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 跳转页面(重点)</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">jump</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        location.href=<span class="string">'https://taobao.com'</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 打开新窗口</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">toOpen</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.open(<span class="string">'https://baidu.com'</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="七、DOM对象"><a href="#七、DOM对象" class="headerlink" title="七、DOM对象"></a>七、DOM对象</h2><p>文档对象模型：Document Object Model</p>
<p>作用：把页面中所有标签抽象为一个Document对象，然后通过JS动态修改标签及属性内容。</p>
<h3 id="7-1-DOM获取元素"><a href="#7-1-DOM获取元素" class="headerlink" title="7.1 DOM获取元素"></a>7.1 DOM获取元素</h3><p>第一种方式(ES6之前)：</p>
<ul>
<li>获取一个：<code>document.getElementById(id属性值)</code></li>
<li>获取多个：<ul>
<li><code>document.getElementsByTagName(标签名)</code>：返回数组</li>
<li><code>document.getElementsByClassName(class属性值)</code>：返回数组</li>
<li><code>document.getElementsByName(name属性值)</code>：返回数组</li>
</ul>
</li>
</ul>
<p>第二种方式：</p>
<ul>
<li>获取一个：<code>document.querySelector(id选择器)</code></li>
<li>获取多个：<code>document.querySelectorAll(css选择器)</code>：返回数组    </li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>dom获取元素<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">    姓名 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"德玛西亚"</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    密码 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    生日 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"date"</span> <span class="attr">name</span>=<span class="string">"birthday"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    性别</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"male"</span> <span class="attr">class</span>=<span class="string">"radio"</span>&gt;</span>男<span class="symbol">&amp;emsp;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"female"</span> <span class="attr">class</span>=<span class="string">"radio"</span>/&gt;</span>女<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    爱好</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"smoke"</span>&gt;</span>抽烟</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"drink"</span>&gt;</span>喝酒</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"perm"</span>&gt;</span>烫头<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    头像 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"pic"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    学历</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"edu"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>入门<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>精通<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span>放弃<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    简介</span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"userIntro"</span> <span class="attr">cols</span>=<span class="string">"30"</span> <span class="attr">rows</span>=<span class="string">"10"</span>&gt;</span>默认值<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">value</span>=<span class="string">"清空按钮"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交按钮"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1.获取id="username"的标签对象</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">'username'</span>));</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.querySelector(<span class="string">"#username"</span>));</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2.获取class="radio"的标签对象数组</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementsByClassName(<span class="string">'radio'</span>));</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.querySelectorAll(<span class="string">'.radio'</span>));</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 3.获取所有的option标签对象数组</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementsByTagName(<span class="string">"option"</span>));</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.querySelectorAll(<span class="string">'option'</span>));</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 4.获取name="hobby"的input标签对象数组</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementsByName(<span class="string">"hobby"</span>));</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.querySelectorAll(<span class="string">'input[name="hobby"]'</span>));</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 5.获取文件上传选择框</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.querySelectorAll(<span class="string">'form input[name="pic"]'</span>));</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取一个推荐使用getElementById，获取多个推荐使用ES6的语法。</p>
</blockquote>
<h3 id="7-2-DOM操作内容"><a href="#7-2-DOM操作内容" class="headerlink" title="7.2 DOM操作内容"></a>7.2 DOM操作内容</h3><ol>
<li><p>获取或者修改元素的   纯文本内容</p>
<ul>
<li>语法：js（元素）对象.innerText; </li>
</ul>
</li>
<li><p>获取或者修改元素的    html内容（可以解析标签）</p>
<ul>
<li>语法：js（元素）对象.innerHTML; </li>
</ul>
</li>
<li><p>获取或者修改包含自身的html内容（了解）</p>
<ul>
<li>语法：js（元素）对象.outerHTML; </li>
</ul>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>dom操作内容<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#myDiv</span>&#123;</span></span><br><span class="line">            border: 1px solid red;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myDiv"</span>&gt;</span>程序猿最讨厌的四件事：<span class="tag">&lt;<span class="name">br</span>&gt;</span>写注释、写文档…… <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> myDiv = <span class="built_in">document</span>.getElementById(<span class="string">'myDiv'</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1.innerText操作div内容</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1.1获取纯文本内容</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(myDiv.innerText);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1.2 覆盖原来的纯文本</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// myDiv.innerText='别人不写注释 &lt;br&gt; 别人不写文档';</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1.3 追加纯文本</span></span></span><br><span class="line"><span class="actionscript">   <span class="comment">// myDiv.innerText+='别人不写注释 &lt;br&gt; 别人不写文档';</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2.innerHTML操作div内容</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2.1获取超文本内容</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(myDiv.innerHTML);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2.2 覆盖原来的超文本</span></span></span><br><span class="line"><span class="actionscript">   <span class="comment">// myDiv.innerHTML='别人不写注释 &lt;br&gt; 别人不写文档';</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2.3 追加超文本</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    myDiv.innerHTML+='<span class="tag">&lt;<span class="name">br</span>&gt;</span>别人不写注释 <span class="tag">&lt;<span class="name">br</span>&gt;</span> 别人不写文档';</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 3.outerHTML操作div本身</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    myDiv.outerHTML='<span class="tag">&lt;<span class="name">p</span>&gt;</span>我原本是div，现在变成了p<span class="tag">&lt;/<span class="name">p</span>&gt;</span>'</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="7-3-DOM操作属性"><a href="#7-3-DOM操作属性" class="headerlink" title="7.3 DOM操作属性"></a>7.3 DOM操作属性</h3><ol>
<li><p>获取文本框的值,单选框或复选框的选中状态</p>
<ul>
<li>语法: <ul>
<li><code>js对象.属性名</code> 获取指定属性值</li>
<li><code>js对象.属性名=&#39;xxx&#39;</code> 设置指定属性的新值</li>
</ul>
</li>
</ul>
</li>
<li><p>给元素设置自定义属性使用: </p>
<ul>
<li>语法: <code>js对象.setAttribute(属性名,属性值)</code></li>
</ul>
</li>
<li><p>获取元素的自定义属性值<br> 语法: <code>js对象.getAttribute(属性名)</code></p>
</li>
<li><p>移除元素的自定义属性（了解）<br> 语法:<code>js对象.removeAttribute(属性名)</code></p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>dom操作属性<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">    姓名 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"德玛西亚"</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    爱好</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"smoke"</span>&gt;</span>抽烟</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"drink"</span>&gt;</span>喝酒</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"perm"</span> &gt;</span>烫头<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">value</span>=<span class="string">"清空按钮"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交按钮"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1.获取文本框预定义的属性值</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">'username'</span>).value);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'username'</span>).value = <span class="string">'草丛伦'</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2.给文本框设置自定义属性</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'username'</span>).setAttribute(<span class="string">"data-msg"</span>, <span class="string">'喜欢大宝剑...'</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 3.获取文本框自定义属性</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">'username'</span>).getAttribute(<span class="string">"data-msg"</span>));</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 4.移出文本框自定义属性</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'username'</span>).removeAttribute(<span class="string">"data-msg"</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="7-4-DOM操作样式"><a href="#7-4-DOM操作样式" class="headerlink" title="7.4 DOM操作样式"></a>7.4 DOM操作样式</h3><ol>
<li><p>给标签的style属性设置一个css样式</p>
<ul>
<li>语法: <code>js对象.style.样式名=&#39;样式值&#39;</code></li>
<li>js的样式名：fontSize</li>
</ul>
</li>
<li><p>给标签的style属性批量设置css样式</p>
<ul>
<li>语法:<code>js对象.style.cssText=&#39;css样式&#39;</code><ul>
<li>css的样式名：font-size</li>
</ul>
</li>
</ul>
</li>
<li><p>给标签绑定class的类选择器</p>
<ul>
<li>语法: <code>js对象.className=&#39;class选择器名&#39;</code></li>
</ul>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>dom操作样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#p1</span>&#123; <span class="attribute">background-color</span>: red;&#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.mp</span> &#123;</span></span><br><span class="line">            color: green</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.mpp</span> &#123;</span></span><br><span class="line">            background-color: lightgray;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p1"</span> <span class="attr">style</span>=<span class="string">""</span>&gt;</span>1. 设置一个css样式<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p2"</span>&gt;</span>2. 批量设置css样式<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p3"</span> &gt;</span>3. 通过class设置样式<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> p1 = <span class="built_in">document</span>.getElementById(<span class="string">"p1"</span>);<span class="comment">//获取段落标签</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> p2 = <span class="built_in">document</span>.getElementById(<span class="string">"p2"</span>);<span class="comment">//获取段落标签</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> p3 = <span class="built_in">document</span>.getElementById(<span class="string">"p3"</span>);<span class="comment">//获取段落标签</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1. 设置一个css样式</span></span></span><br><span class="line"><span class="actionscript">    p1.style.backgroundColor=<span class="string">'skyblue'</span>;</span></span><br><span class="line"><span class="actionscript">    p1.style.border=<span class="string">'1px solid red'</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1.1.获取第一个p标签 style属性 的背景css样式</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(p1.style.backgroundColor);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2. 批量设置css样式</span></span></span><br><span class="line"><span class="actionscript">    p2.style.cssText=<span class="string">'background-color:red;border:2px double black'</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 3. 通过class设置样式</span></span></span><br><span class="line"><span class="actionscript">    p3.className=<span class="string">"mp mpp"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="7-5-DOM操作元素"><a href="#7-5-DOM操作元素" class="headerlink" title="7.5 DOM操作元素"></a>7.5 DOM操作元素</h3><ol>
<li><p>创建一个标签对象</p>
<ul>
<li>语法：<code>document.createElement(&#39;标签名称&#39;)</code></li>
</ul>
</li>
<li><p>给父标签添加一个子标签</p>
<ul>
<li>语法：<code>父标签对象.appendChild(子标签对象)</code></li>
</ul>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>dom操作元素<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"star"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>古力娜扎<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>迪丽热巴<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 需求：添加一个新列表项</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 方式一：</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1.创建 li标签</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2.设置文本</span></span></span><br><span class="line"><span class="actionscript">    li.innerText=<span class="string">'萨瓦快递'</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 3.挂靠在 dom的 ul下面</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'star'</span>).appendChild(li);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 方式二： 推荐</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'star'</span>).innerHTML+=<span class="string">'&lt;li&gt;马尔扎哈&lt;/li&gt;'</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="八、JS正则"><a href="#八、JS正则" class="headerlink" title="八、JS正则"></a>八、JS正则</h2><p>作用：根据定义好的规则，过滤文本内容；这里我们用于校验表单</p>
<p>JS中的正则：</p>
<ul>
<li>创建：<ul>
<li><code>let rege = new RegExp(“正则表达式字符串”);</code></li>
<li><code>let rege = /正则表达式/;</code></li>
</ul>
</li>
<li>验证方法<ul>
<li><code>正则对象.test(要验证的字符串)</code><ul>
<li>符合正则规则就返回true，否则false</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>小扩展：</p>
<ul>
<li>在线正则表达式网站：<a href="https://tool.oschina.net/regex/#" target="_blank" rel="noopener">https://tool.oschina.net/regex/#</a></li>
</ul>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>09-正则表达式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//创建一个校验手机号的正则表达式，要求：11位、1开头，第二位：3456789</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// let reg = new RegExp('^1[3456789]\\d&#123;9&#125;$')</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> reg = <span class="regexp">/^1[3456789]\d&#123;9&#125;$/</span>;<span class="comment">//推荐这种方式创建正则对象</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">   	<span class="comment">//校验用户输入的值</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> value = <span class="string">'15933016675'</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(reg.test(value));</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 以邮箱举例</span></span></span><br><span class="line">    /*</span><br><span class="line">        mm@qqcn</span><br><span class="line">        jj@163.com</span><br><span class="line">        ...</span><br><span class="line">		邮箱后缀</span><br><span class="line">            com</span><br><span class="line">            cn</span><br><span class="line">            com.cn</span><br><span class="line">     */</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> emailReg = <span class="regexp">/^([a-z0-9\_.-]+)@([\da-z\.-]+)\.([a-z\.]&#123;2,6&#125;)$/</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(emailReg.test(<span class="string">'jj@126.cn'</span>));</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="九、练习案例"><a href="#九、练习案例" class="headerlink" title="九、练习案例"></a>九、练习案例</h2><h3 id="9-1-表单校验"><a href="#9-1-表单校验" class="headerlink" title="9.1 表单校验"></a>9.1 表单校验</h3><p>代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>注册页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        span&#123;</span><br><span class="line">            color: red;</span><br><span class="line">            font-size: 12px;</span><br><span class="line">            display: none;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span> <span class="attr">method</span>=<span class="string">"get"</span> <span class="attr">id</span>=<span class="string">"myForm"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"td_left"</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">placeholder</span>=<span class="string">"请输入账号"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"userInfo"</span>&gt;</span>用户名不合法<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"td_left"</span>&gt;</span>手机号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"telephone"</span> <span class="attr">name</span>=<span class="string">"telephone"</span> <span class="attr">placeholder</span>=<span class="string">"请输入手机号"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"telInfo"</span>&gt;</span>手机号不合法<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"td_left"</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"pwdInfo"</span>&gt;</span>密码不合法<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"td_left"</span>&gt;</span>验证码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"smsCode"</span> <span class="attr">id</span>=<span class="string">"smsCode"</span> <span class="attr">placeholder</span>=<span class="string">"请输入验证码"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>发送手机验证码<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"codeInfo"</span>&gt;</span>验证码不合法<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span> <span class="attr">align</span>=<span class="string">"center"</span> <span class="attr">width</span>=<span class="string">"373"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    /*</span><br><span class="line">        用户名正则，4到16位（字母，数字，下划线，减号）：/^[a-zA-Z0-9_-]&#123;4,16&#125;$/</span><br><span class="line">        必须是包含大小写字母和数字的组合，不能使用特殊字符，长度在6-10之间：/^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).&#123;6,10&#125;$/</span><br><span class="line">        手机号正则：/^1[3456789]\d&#123;9&#125;$/</span><br><span class="line">        验证码正则：/^\d&#123;6&#125;$/</span><br><span class="line">    */</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> userInput = <span class="built_in">document</span>.getElementById(<span class="string">'username'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> phoneInput = <span class="built_in">document</span>.getElementById(<span class="string">'telephone'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> pswInput = <span class="built_in">document</span>.getElementById(<span class="string">'password'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> smsCode = <span class="built_in">document</span>.getElementById(<span class="string">'smsCode'</span>);</span></span><br><span class="line">    /**</span><br><span class="line">     * 验证用户名</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">checkUser</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//定义正则</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> userReg = <span class="regexp">/^[a-zA-Z0-9_-]&#123;4,16&#125;$/</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> flag = userReg.test(userInput.value);</span></span><br><span class="line"><span class="actionscript">        noneOfInline(<span class="string">'userInfo'</span>,flag);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> flag;</span></span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 验证手机号</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">checkPhone</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//定义正则</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> phoneReg = <span class="regexp">/^1[3456789]\d&#123;9&#125;$/</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> flag = phoneReg.test(phoneInput.value);</span></span><br><span class="line"><span class="actionscript">        noneOfInline(<span class="string">'telInfo'</span>,flag);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> flag;</span></span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 验证密码</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">checkPsw</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//定义正则</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> pswReg = <span class="regexp">/^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).&#123;6,10&#125;$/</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> flag = pswReg.test(pswInput.value);</span></span><br><span class="line"><span class="actionscript">        noneOfInline(<span class="string">'pwdInfo'</span>,flag);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> flag;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 验证验证码</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">checkCode</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> codeReg = <span class="regexp">/^\d&#123;6&#125;$/</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> flag = codeReg.test(smsCode.value);</span></span><br><span class="line"><span class="actionscript">        noneOfInline(<span class="string">'codeInfo'</span>,flag);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> flag;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 定义函数，控制span标签的显示与隐藏</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">noneOfInline</span><span class="params">(info, flag)</span> </span>&#123;</span></span><br><span class="line">        if (flag)&#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(info).style.display = <span class="string">'none'</span>;</span></span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(info).style.display = <span class="string">'inline'</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    userInput.onblur = checkUser;</span><br><span class="line">    phoneInput.onblur = checkPhone;</span><br><span class="line">    pswInput.onblur = checkPsw;</span><br><span class="line">    smsCode.onblur = checkCode;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">    * 表单提交时验证全部是否都合法</span><br><span class="line">    */</span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'myForm'</span>).onsubmit = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> checkCode() &amp;&amp; checkPhone() &amp;&amp; checkPsw() &amp;&amp; checkUser();</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="9-2-商品全选"><a href="#9-2-商品全选" class="headerlink" title="9.2 商品全选"></a>9.2 商品全选</h3><p>代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>案例-商品全选<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">商品全选</span></span><br><span class="line"><span class="comment">    1. 全选 点击全选按钮,所有复选框都被选中</span></span><br><span class="line"><span class="comment">    2. 反选 点击反选按钮,所有复选框状态取反</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn1"</span>&gt;</span>1. 全选<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn2"</span>&gt;</span>2. 反选<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span>电脑</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span>手机</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span>汽车</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span>别墅</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">checked</span>=<span class="string">"checked"</span>&gt;</span>笔记本</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> boxs = <span class="built_in">document</span>.querySelectorAll(<span class="string">'input[type="checkbox"]'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; boxs.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">            boxs[i].checked = <span class="literal">true</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'btn2'</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> boxs = <span class="built_in">document</span>.querySelectorAll(<span class="string">'input[type="checkbox"]'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; boxs.length; i++) &#123;</span></span><br><span class="line">            boxs[i].checked = !boxs[i].checked;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="9-3-省市联动"><a href="#9-3-省市联动" class="headerlink" title="9.3 省市联动"></a>9.3 省市联动</h3><p>代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>案例-省市级联<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"provinceId"</span> <span class="attr">style</span>=<span class="string">"width:150px"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>----请-选-择-省----<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>河北<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>辽宁<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span>天津<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"cityId"</span> <span class="attr">style</span>=<span class="string">"width:150px"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>----请-选-择-市----<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">    /*</span><br><span class="line">	省市级联</span><br><span class="line">		1. 页面加载完成后自动装载省数据</span><br><span class="line">		2. 当选中省时,装载该省的市数据</span><br><span class="line">	*/</span><br><span class="line">    </span><br><span class="line"><span class="actionscript">    <span class="comment">// 准备数据</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> data = <span class="keyword">new</span> <span class="built_in">Array</span>();</span></span><br><span class="line"><span class="actionscript">    data[<span class="number">0</span>] = [<span class="string">'顺义区'</span>, <span class="string">'昌平区'</span>, <span class="string">'朝阳区'</span>];</span></span><br><span class="line"><span class="actionscript">    data[<span class="number">1</span>] = [<span class="string">"保定"</span>, <span class="string">"石家庄"</span>, <span class="string">"廊坊"</span>];</span></span><br><span class="line"><span class="actionscript">    data[<span class="number">2</span>] = [<span class="string">"沈阳"</span>, <span class="string">"铁岭"</span>, <span class="string">"抚顺"</span>];</span></span><br><span class="line"><span class="actionscript">    data[<span class="number">3</span>] = [<span class="string">"滨海新区"</span>, <span class="string">"宝坻区"</span>, <span class="string">"南开区"</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> provinceSelect = <span class="built_in">document</span>.getElementById(<span class="string">"provinceId"</span>);<span class="comment">//获取省下拉列表</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> citySelect = <span class="built_in">document</span>.getElementById(<span class="string">"cityId"</span>);<span class="comment">//获取市下拉列表</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    provinceSelect.onchange=<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//每次先复原</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        citySelect.innerHTML='<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>----请-选-择-市----<span class="tag">&lt;/<span class="name">option</span>&gt;</span>';</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//获取对应数组</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> citys=data[<span class="keyword">this</span>.value];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> city <span class="keyword">of</span> citys) &#123;</span></span><br><span class="line"><span class="javascript">            citySelect.innerHTML+=<span class="string">`&lt;option value="<span class="subst">$&#123;city&#125;</span>"&gt;<span class="subst">$&#123;city&#125;</span>&lt;/option&gt;`</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="9-4-隔行换色"><a href="#9-4-隔行换色" class="headerlink" title="9.4 隔行换色"></a>9.4 隔行换色</h3><p>代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>案例-隔行变色<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">"tab1"</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">width</span>=<span class="string">"800"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">width</span>=<span class="string">"100px"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"allCheck"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"check"</span>&gt;</span>全/<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"reCheck"</span> <span class="attr">name</span>=<span class="string">"check"</span> <span class="attr">type</span>=<span class="string">"radio"</span>&gt;</span>反选<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>分类ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>分类名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>分类描述<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"checkbox"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>手机数码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>手机数码类商品<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span>|<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"checkbox"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>电脑办公<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>电脑办公类商品<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span>|<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"checkbox"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>鞋靴箱包<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>鞋靴箱包类商品<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span>|<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"checkbox"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>家居饰品<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>家居饰品类商品<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span>|<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"checkbox"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>5<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>牛奶制品<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>牛奶制品类商品<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span>|<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"checkbox"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>6<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>大豆制品<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>大豆制品类商品<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span>|<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">隔行变色</span></span><br><span class="line"><span class="comment">	1. 表格奇偶行颜色不同</span></span><br><span class="line"><span class="comment">	2. 鼠标移入颜色高亮</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> trs = <span class="built_in">document</span>.querySelectorAll(<span class="string">'tr'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> oldColor;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; trs.length; i++) &#123;</span></span><br><span class="line">        if (i%2===0)&#123;</span><br><span class="line"><span class="actionscript">            trs[i].style.backgroundColor = <span class="string">'pink'</span>;</span></span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">            trs[i].style.backgroundColor = <span class="string">'lightgray'</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="comment">//鼠标移入改变背景色</span></span></span><br><span class="line"><span class="actionscript">        trs[i].onmouseover = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//记录旧的颜色</span></span></span><br><span class="line">            oldColor = trs[i].style.backgroundColor;</span><br><span class="line"><span class="actionscript">            trs[i].style.backgroundColor = <span class="string">'gold'</span>;</span></span><br><span class="line">        &#125;;</span><br><span class="line"><span class="actionscript">        <span class="comment">//移出鼠标复原颜色</span></span></span><br><span class="line"><span class="actionscript">        trs[i].onmouseout = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line">            trs[i].style.backgroundColor = oldColor;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> all = <span class="built_in">document</span>.getElementById(<span class="string">'allCheck'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> reverse = <span class="built_in">document</span>.getElementById(<span class="string">'reCheck'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> boxs = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.checkbox'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    all.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> box <span class="keyword">of</span> boxs) &#123;</span></span><br><span class="line"><span class="actionscript">            box.checked = <span class="literal">true</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="actionscript">    reverse.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> box <span class="keyword">of</span> boxs) &#123;</span></span><br><span class="line">            box.checked = !box.checked;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet</title>
    <url>/2020/08/22/Servlet/</url>
    <content><![CDATA[<h2 id="一、Servlet概述"><a href="#一、Servlet概述" class="headerlink" title="一、Servlet概述"></a>一、Servlet概述</h2><ul>
<li>servlet= server+applet 运行在服务器端的java程序。</li>
<li>Servlet是一个接口，一个类要想通过浏览器被访问到,那么这个类就必须直接或间接的实现Servlet接口</li>
</ul>
<p><strong>作用：接收请求，处理逻辑，响应结果</strong></p>
<blockquote>
<p>Servlet是一个接口，一个类想要通过浏览器被访问到，那么这个类就必须直接或者间接的实现Servlet接口</p>
</blockquote>
<a id="more"></a>



<h2 id="二、Servlet快速入门"><a href="#二、Servlet快速入门" class="headerlink" title="二、Servlet快速入门"></a>二、Servlet快速入门</h2><h3 id="2-1-代码编写"><a href="#2-1-代码编写" class="headerlink" title="2.1 代码编写"></a>2.1 代码编写</h3><ol>
<li>创建JavaEE项目</li>
<li>定义一个类，实现Servlet接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Servlet快速入门...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>实现接口中的抽象方法</p>
</li>
<li><p>配置Servlet</p>
<ul>
<li>在web.xml中配置如下：</li>
</ul>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>QuickServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.sun.servlet.QuickServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>QuickServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/quickServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>部署到Tomcat启动服务器访问即可</li>
</ol>
<h3 id="2-2-访问流程"><a href="#2-2-访问流程" class="headerlink" title="2.2 访问流程"></a>2.2 访问流程</h3><ol>
<li>当服务器接收到客户端浏览器的请求后，会解析请求URL路径，获取访问的Servlet的资源路径</li>
<li>查找web.xml文件，是否有对应的<url-pattern>标签体内容</li>
<li>如果有，则在找到对应的<servlet-class>全类名</li>
<li>tomcat会将字节码文件加载进内存，创建其对象</li>
<li>调用其方法</li>
</ol>
<p><img data-src="/img/servlet%E8%AE%BF%E9%97%AE%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90.png" alt="servlet访问流程分析"></p>
<h2 id="三、Servlet相关API"><a href="#三、Servlet相关API" class="headerlink" title="三、Servlet相关API"></a>三、Servlet相关API</h2><h3 id="3-1-生命周期相关"><a href="#3-1-生命周期相关" class="headerlink" title="3.1 生命周期相关"></a>3.1 生命周期相关</h3><h4 id="3-1-1-思想介绍"><a href="#3-1-1-思想介绍" class="headerlink" title="3.1.1 思想介绍"></a>3.1.1 思想介绍</h4><p>生命周期：指的是一个对象从生（创建）到死（销毁）的一个过程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.servlet创建时，执行init初始化方法,只执行一次</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig servletConfig)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.用户访问时，执行service服务方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.servlet销毁时，执行destroy销毁方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p><img data-src="/img/Servlet%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="Servlet生命周期"></p>
<p><strong>① 创建：</strong></p>
<ul>
<li>默认情况下：用户第一次访问时，servlet创建，只创建一次</li>
<li>指定创建时机，在服务器启动时，创建<ul>
<li>配置web.xml文件servlet标签中<ul>
<li><code>&lt;load-on-startup&gt;&lt;/load-on-startup&gt;</code></li>
<li>正数：4~ ，因为tomcat内部也有一些servlet需要启动时创建</li>
<li>负数：-1（默认值），表示用户第一次访问时，创建</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>② 运行(提供服务)：</strong></p>
<ul>
<li>用户访问该servlet，都会执行service方法，执行多次</li>
</ul>
<p><strong>③ 销毁：</strong></p>
<ul>
<li>服务器关闭，servlet销毁</li>
</ul>
<blockquote>
<p>小贴士</p>
<ul>
<li>Servlet是一个单例的</li>
</ul>
<p>注意：在servlet中不要使用成员变量存值，会造成线程安全问题。</p>
</blockquote>
<h4 id="3-1-2-代码演示"><a href="#3-1-2-代码演示" class="headerlink" title="3.1.2 代码演示"></a>3.1.2 代码演示</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifeServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"LifeServlet创建了.."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"用户访问了LifeServlet，执行service方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"LifeServlet销毁了..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LifeServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.sun.LifeServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>4<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LifeServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/LifeServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="3-2-ServletConfig接口"><a href="#3-2-ServletConfig接口" class="headerlink" title="3.2 ServletConfig接口"></a>3.2 ServletConfig接口</h3><p>Tomcat在Servlet对象创建时，执行init()方法，并创建一个ServletConfig 配置对象。</p>
<ul>
<li>主要作用：读取web.xml配置文件Servlet中<init-param>信息，实现参数和代码的解耦</li>
</ul>
<p><strong>代码演示：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodeServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明变量</span></span><br><span class="line">    <span class="keyword">private</span> ServletConfig servletConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.servletConfig= servletConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供获取servletConfig公共方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> servletConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对外提供服务器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 对中文进行编码</span></span><br><span class="line">        String encode = getServletConfig().getInitParameter(<span class="string">"encode"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向浏览器输出结果</span></span><br><span class="line">        servletResponse.getWriter().write(encode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>EncodeServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.sun.EncodeServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encode<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>gbk<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>EncodeServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/EncodeServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="四、Servlet的继承体系"><a href="#四、Servlet的继承体系" class="headerlink" title="四、Servlet的继承体系"></a>四、Servlet的继承体系</h2><p><img data-src="/img/Servlet%E7%BB%A7%E6%89%BF%E4%BD%93%E7%B3%BB.png" alt="Servlet继承体系"></p>
<h3 id="4-1-GenericServlet"><a href="#4-1-GenericServlet" class="headerlink" title="4.1 GenericServlet"></a>4.1 GenericServlet</h3><ol>
<li>编写普通类，继承GenericServlet<ul>
<li>只需重写service()方法即可</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo1</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我重写init方法..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对外提供服务的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(getServletConfig());</span><br><span class="line">        System.out.println(<span class="string">"ServletDemo1 extends GenericServlet"</span>);</span><br><span class="line">        servletResponse.getWriter().write(<span class="string">"ServletDemo1 extends GenericServlet"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我重写destroy方法..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ol start="2">
<li>配置web.xml</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletDemo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.sun.ServletDemo1<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletDemo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/ServletDemo1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="4-2-HttpServlet"><a href="#4-2-HttpServlet" class="headerlink" title="4.2 HttpServlet"></a>4.2 HttpServlet</h3><p><img data-src="/img/%E7%BB%A7%E6%89%BFHttpServlet.png" alt="继承HttpServlet"></p>
<ol>
<li>编写普通类，继承HttpServlet<ul>
<li>重写 doGet()、doPost()</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo2</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"get方式请求....."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"post方式请求....."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>配置web.xml</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletDemo2<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.sun.ServletDemo2<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletDemo2<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/ServletDemo2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>编写表单</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>demo2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://localhost:8080/servlet/ServletDemo2"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"http://localhost:8080/servlet/ServletDemo2"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="五、Servlet路径"><a href="#五、Servlet路径" class="headerlink" title="五、Servlet路径"></a>五、Servlet路径</h2><h3 id="5-1-url-pattern"><a href="#5-1-url-pattern" class="headerlink" title="5.1 url-pattern"></a>5.1 url-pattern</h3><p>作用：将一个请求网络地址和servlet类建立一个映射关系</p>
<blockquote>
<p>小贴士：一个Servlet可以映射多个网络地址</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- url-pattern 标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletDemo3<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.sun.ServletDemo3<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--映射的第一个地址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletDemo3<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/haha<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--映射的第二个地址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletDemo3<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hehe<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="5-2-绝对、相对路径"><a href="#5-2-绝对、相对路径" class="headerlink" title="5.2 绝对、相对路径"></a>5.2 绝对、相对路径</h3><p>举例：</p>
<ul>
<li>当前页面地址：<code>http://localhost:8080/servlet/static/path.html</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>path<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>当前页面的地址：http://localhost:8080/servlet/static/path.html<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        绝对路径</span></span><br><span class="line"><span class="comment">            完整格式：</span></span><br><span class="line"><span class="comment">                http://域名:端口/项目网络地址/资源网络地址</span></span><br><span class="line"><span class="comment">            （推荐）简化：</span></span><br><span class="line"><span class="comment">                /项目网络地址/资源网络地址</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://localhost:8080/servlet/QuickServlet"</span>&gt;</span>绝对路径完整版<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/day06-servlet-xml/QuickServlet"</span>&gt;</span>绝对路径简化版<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        相对路径（当前页面和目标页面的相对位置关系）</span></span><br><span class="line"><span class="comment">            ./ 当前目录下</span></span><br><span class="line"><span class="comment">            ../ 上级目录下</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"../QuickServlet"</span>&gt;</span>相对路径<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="六、Servlet3-0"><a href="#六、Servlet3-0" class="headerlink" title="六、Servlet3.0"></a>六、Servlet3.0</h2><ul>
<li>通过注解的方式配置Servlet，简化web.xml配置Servlet复杂性，提高开发效率。</li>
</ul>
<h3 id="6-1-快速入门"><a href="#6-1-快速入门" class="headerlink" title="6.1 快速入门"></a>6.1 快速入门</h3><p>步骤：</p>
<ul>
<li>创建JavaEE项目，选择Servlet的版本3.0以上，可以不创建web.xml</li>
<li>定义一个类，实现Servlet接口</li>
<li>复写方法</li>
<li>在类上使用@WebServlet注解，进行配置<ul>
<li>@WebServlet(“资源路径”)</li>
</ul>
</li>
</ul>
<p>注解类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> WebServlet &#123;</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;<span class="comment">//相当于&lt;Servlet-name&gt;</span></span><br><span class="line">    </span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;<span class="comment">//代表urlPatterns()属性配置</span></span><br><span class="line">    </span><br><span class="line">    String[] urlPatterns() <span class="keyword">default</span> &#123;&#125;;<span class="comment">//相当于&lt;url-pattern&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">loadOnStartup</span><span class="params">()</span> <span class="keyword">default</span> -1</span>;<span class="comment">//相当于&lt;load-on-startup&gt;</span></span><br><span class="line">    </span><br><span class="line">    WebInitParam[] initParams() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">asyncSupported</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">smallIcon</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">    <span class="function">String <span class="title">largeIcon</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">    <span class="function">String <span class="title">description</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">    <span class="function">String <span class="title">displayName</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>代码示例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @WebServlet(name = "QuickServlet", urlPatterns = "/QuickServlet")</span></span><br><span class="line"><span class="comment">// @WebServlet(urlPatterns = "/QuickServlet")</span></span><br><span class="line"><span class="comment">// @WebServlet(value = "/QuickServlet")</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/QuickServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"servlet3.0注解开发..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="七、ServletContext"><a href="#七、ServletContext" class="headerlink" title="七、ServletContext"></a>七、ServletContext</h2><h3 id="7-1-概述"><a href="#7-1-概述" class="headerlink" title="7.1 概述"></a>7.1 概述</h3><p><strong>ServletContext</strong>：上下文对象</p>
<ul>
<li>web容器（tomcat）在启动时，它会为每个web项目承建一个对应的ServletContext对象</li>
<li>它代表：当前web项目</li>
</ul>
<p><strong>主要作用：</strong></p>
<ul>
<li>获取全局的配置参数</li>
<li>获取资源在服务器的真实（磁盘）地址</li>
<li>域对象（共享数据）</li>
<li>获取文件MIME类型</li>
</ul>
<p><strong>获取Serlvet对象的两种方式：</strong></p>
<ul>
<li><p>通过request对象获取：<code>ServletContext sc = request.getServletContext();</code></p>
</li>
<li><p>继承HttpServlet后，可以直接调用：<code>ServletContext sc = getServletContext();</code></p>
</li>
</ul>
<h3 id="7-2-域对象-共享数据"><a href="#7-2-域对象-共享数据" class="headerlink" title="7.2 域对象(共享数据)"></a>7.2 域对象(共享数据)</h3><p>在当前项目范围内，共享数据（多个servlet都可以获取）</p>
<p><img data-src="/img/ServletContext%E5%9F%9F%E5%AF%B9%E8%B1%A1%E5%9B%BE%E8%A7%A3.png" alt="ServletContext域对象图解"></p>
<p><strong>相关API：</strong></p>
<ul>
<li>存储数据：<code>void setAttribute(String name,Object value)</code></li>
<li>获取数据：<code>Object getAttribute(String name)</code></li>
<li>删除数据：<code>void removeAttribute(String name)</code></li>
</ul>
<h4 id="代码演示："><a href="#代码演示：" class="headerlink" title="代码演示："></a>代码演示：</h4><p>① OneServlet（存数据）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/OneServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OneServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取对象</span></span><br><span class="line">        ServletContext servletContext = getServletContext();</span><br><span class="line">        <span class="comment">//存储数据</span></span><br><span class="line">        servletContext.setAttribute(<span class="string">"user"</span>,<span class="string">"jack"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>② TwoServlet(取、删数据)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取数据</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/TwoServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取对象</span></span><br><span class="line">        ServletContext servletContext = getServletContext();</span><br><span class="line">        <span class="comment">//获取数据</span></span><br><span class="line">        Object userName = servletContext.getAttribute(<span class="string">"user"</span>);</span><br><span class="line">        String name = (String) userName;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除数据</span></span><br><span class="line">        servletContext.removeAttribute(<span class="string">"user"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向浏览器写数据</span></span><br><span class="line">        response.getWriter().write(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>域对象的生命周期</p>
<ul>
<li>创建：项目加载成功后，创建</li>
<li>销毁：项目关闭时，销毁</li>
<li>作用范围：整个web项目(与项目共存亡)</li>
</ul>
</blockquote>
<h3 id="7-3-获取资源在服务器的真实地址"><a href="#7-3-获取资源在服务器的真实地址" class="headerlink" title="7.3 获取资源在服务器的真实地址"></a>7.3 获取资源在服务器的真实地址</h3><p>相关API：</p>
<ul>
<li><code>String getRealPath(String path);</code></li>
</ul>
<p>代码演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/ServletDemo02"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo02</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext servletContext = getServletContext();</span><br><span class="line">        <span class="comment">//获取web.xml的真实路径</span></span><br><span class="line">        String webPath = servletContext.getRealPath(<span class="string">"WEB-INF/web.xml"</span>);</span><br><span class="line">        System.out.println(webPath);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="7-4-获取全局的配置参数"><a href="#7-4-获取全局的配置参数" class="headerlink" title="7.4 获取全局的配置参数"></a>7.4 获取全局的配置参数</h3><ul>
<li>读取web.xml配置文件中<context-param>标签信息，实现参数和代码的解耦（多个servlet都可以获取）</li>
</ul>
<p>相关API：</p>
<ul>
<li><code>String getInitParameter(String key);</code></li>
</ul>
<p>代码演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/ServletDemo03"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo03</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext servletContext = getServletContext();</span><br><span class="line">        String sex = servletContext.getInitParameter(<span class="string">"sex"</span>);</span><br><span class="line">        System.out.println(sex);	<span class="comment">// boy</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>sex<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>boy<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="7-5-获取文件MIME类型"><a href="#7-5-获取文件MIME类型" class="headerlink" title="7.5 获取文件MIME类型"></a>7.5 获取文件MIME类型</h3><p>相关API：</p>
<ul>
<li>String getMimeType(String var1)</li>
</ul>
<p><strong>MIME类型：</strong></p>
<ul>
<li>在互联网通信过程中定义的一种文件数据类型</li>
<li>格式：<code>大类型/小类型</code> 例如：<code>text/html text/xml text/plan image/jpeg</code></li>
</ul>
<p><img data-src="/img/MIME%E7%B1%BB%E5%9E%8B.png" alt="MIME类型"></p>
<p>代码演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/ServletDemo04"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo04</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String fileName = <span class="string">"1.mp3"</span>;</span><br><span class="line">        <span class="comment">//设置字符集</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset:utf-8"</span>);</span><br><span class="line">        <span class="comment">//获取ServletContext对象</span></span><br><span class="line">        ServletContext servletContext = getServletContext();</span><br><span class="line">        String fileMime = servletContext.getMimeType(fileName);</span><br><span class="line">        response.getWriter().write(<span class="string">"&lt;h1&gt;"</span>+fileMime+<span class="string">"&lt;/h1&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="7-5-练习——统计网站访问次数"><a href="#7-5-练习——统计网站访问次数" class="headerlink" title="7.5 练习——统计网站访问次数"></a>7.5 练习——统计网站访问次数</h3><p><img data-src="/img/%E7%BB%9F%E8%AE%A1%E7%BD%91%E7%AB%99%E8%AE%BF%E9%97%AE%E6%AC%A1%E6%95%B0%E6%80%9D%E8%B7%AF.png" alt="统计网站访问次数思路"></p>
<p>代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/ServletCall"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletCall</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        ServletContext servletContext = getServletContext();</span><br><span class="line">        <span class="comment">// 定义初始访问次数为0,存储到域对象中</span></span><br><span class="line">        servletContext.setAttribute(<span class="string">"count"</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//设置文本类型，字符集</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">        ServletContext servletContext = getServletContext();</span><br><span class="line">        <span class="comment">//获取域对象中保存的变量</span></span><br><span class="line">        Integer count = (Integer) servletContext.getAttribute(<span class="string">"count"</span>);</span><br><span class="line">        <span class="comment">//+1</span></span><br><span class="line">        count++;</span><br><span class="line">        <span class="comment">//重新设置到域对象中保存</span></span><br><span class="line">        servletContext.setAttribute(<span class="string">"count"</span>,count);</span><br><span class="line">        <span class="comment">//向浏览器写数据，显示访问次数</span></span><br><span class="line">        response.getWriter().write(<span class="string">"&lt;h1&gt;访问次数为："</span>+count+<span class="string">"&lt;/h1&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery</title>
    <url>/2020/08/19/jQuery/</url>
    <content><![CDATA[<h2 id="一、jQuery概述"><a href="#一、jQuery概述" class="headerlink" title="一、jQuery概述"></a>一、jQuery概述</h2><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h3><p>jQuery是一款优秀的javascript的轻量级框架之一，封装了dom操作、事件绑定、Ajax等功能。</p>
<p>特别值得一提的是基于jQuery平台的插件非常丰富，大多数前端业务场景都有其封装好的工具可直接使用。</p>
<a id="more"></a>

<p><strong>jQuery下载</strong></p>
<ul>
<li>官网地址：<a href="http://jquery.com" target="_blank" rel="noopener">http://jquery.com</a> </li>
</ul>
<blockquote>
<p>小贴士：</p>
<ul>
<li>jquery-xxx.js<ul>
<li>开发版本：有良好的缩进和注释格式，方便开发者阅读源代码</li>
</ul>
</li>
<li>jquery-xxx.min.js<ul>
<li>生产版本：对代码压缩、注释删除，易于网络传输</li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="1-2-自定义JS框架"><a href="#1-2-自定义JS框架" class="headerlink" title="1.2 自定义JS框架"></a>1.2 自定义JS框架</h3><p><strong>框架（Framework）</strong>是完成某种功能的半成品，抽取重复繁琐的代码，提供简洁强大的方法实现。</p>
<p>代码演示：</p>
<p><strong>my.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对获取js对方的方法进行抽取</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jQuery</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.querySelector(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>html</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>自定义js框架<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/my.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myDiv"</span>&gt;</span>世界上最遥远的距离不是生与死，而是你亲手制造的BUG就在你眼前，你却怎么都找不到她。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">   /* </span><br><span class="line"><span class="actionscript">    <span class="comment">// js对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> myDiv = <span class="built_in">document</span>.querySelector(<span class="string">"#myDiv"</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 操作属性</span></span></span><br><span class="line"><span class="actionscript">    myDiv.innerHTML = <span class="string">'js修改了内容。。。'</span>;</span></span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">    $(<span class="string">"#myDiv"</span>).innerHTML=<span class="string">'js封装后修改了内容'</span>;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="二、jQuery基础语法"><a href="#二、jQuery基础语法" class="headerlink" title="二、jQuery基础语法"></a>二、jQuery基础语法</h2><h3 id="2-1-HTMl引入jQuery"><a href="#2-1-HTMl引入jQuery" class="headerlink" title="2.1 HTMl引入jQuery"></a>2.1 HTMl引入jQuery</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML引入Jquery<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	//引入jQuery</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/jquery-3.2.1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myDiv"</span>&gt;</span>世界上最远的距离，是我在if里你在else里，虽然经常一起出现，但却永不结伴执行。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 操作jq</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#myDiv'</span>).html(<span class="string">'jq修改的内容...'</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="2-2-jQuery和JS区别"><a href="#2-2-jQuery和JS区别" class="headerlink" title="2.2 jQuery和JS区别"></a>2.2 jQuery和JS区别</h3><p>jQuery虽然本质上也是js，但如果使用jQuery的属性和方法那么必须保证对象是jQuery对象而不是js对象。</p>
<p>通过js方式获取的是js对象，通过jQuery方式获取的是jQuery对象。两者的关系与区别总结如下：</p>
<h4 id="2-2-1-JS对象和jQuery对象的相互转换"><a href="#2-2-1-JS对象和jQuery对象的相互转换" class="headerlink" title="2.2.1 JS对象和jQuery对象的相互转换"></a>2.2.1 JS对象和jQuery对象的相互转换</h4><p>js—&gt;jQuery ：<code>$(js对象)  or  jQuery(js对象)</code></p>
<p>jQuery—&gt;js：<code>jq对象[索引]   or  jq对象.get(索引)</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>jq与js对象相互转换<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/jquery-3.2.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myDiv"</span>&gt;</span>通过不同方式获得文本内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 通过js方式修改文本内容</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> myDiv = <span class="built_in">document</span>.querySelector(<span class="string">"#myDiv"</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// myDiv.innerHTML='js修改文本..'</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 通过jq方式修改文本内容</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> $myDiv = $(<span class="string">'#myDiv'</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// $myDiv.html('jq修改文本..')</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// js对象和jq对象的：属性和方法不同通用</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// js操作jq的方法</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// myDiv.html('js操作jq方法...')</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// js --&gt; jq</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// $(myDiv).html('js操作jq方法...')</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// jq操作js属性</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// $myDiv.innerHTML = 'jq操作js属性';</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// jq --&gt;  js   jq本质上是一个js数组对象，数组的每一个元素就是原生的js对象</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($myDiv);</span></span><br><span class="line"><span class="actionscript">     $myDiv[<span class="number">0</span>].innerHTML = <span class="string">'jq操作js属性'</span>;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="2-2-2-页面加载事件"><a href="#2-2-2-页面加载事件" class="headerlink" title="2.2.2 页面加载事件"></a>2.2.2 页面加载事件</h4><p>语法：</p>
<ul>
<li><p>js：<code>window.onload=function(){...}</code></p>
</li>
<li><p>jQuery：<code>$(function(){})</code></p>
</li>
</ul>
<p>特点：</p>
<ul>
<li><strong>js：只能定义一次，后面的会覆盖前面的</strong></li>
<li><strong>jQuery：可以定义多次…</strong>    </li>
</ul>
<h2 id="三、jQuery选择器"><a href="#三、jQuery选择器" class="headerlink" title="三、jQuery选择器"></a>三、jQuery选择器</h2><blockquote>
<p>css、js、jquery选择器语法一样…</p>
</blockquote>
<h3 id="3-1-基本选择器"><a href="#3-1-基本选择器" class="headerlink" title="3.1 基本选择器"></a>3.1 基本选择器</h3><ul>
<li>标签（元素）选择器<ul>
<li>语法：<code>$(&quot;html标签名&quot;)</code> 获得所有匹配标签名称的元素</li>
</ul>
</li>
<li>id选择器<ul>
<li>语法：<code>$(&quot;#id的属性值&quot;)</code> 获得与指定id属性值匹配的元素</li>
</ul>
</li>
<li>类选择器<ul>
<li>语法：<code>$(&quot;.class的属性值&quot;)</code>获得与指定的class属性值匹配的元素</li>
</ul>
</li>
<li>并集选择器<ul>
<li>语法：<code>$(&quot;选择器1,选择器2....&quot;)</code>获取多个选择器选中的所有元素</li>
</ul>
</li>
</ul>
<p>使用演示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>基本选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/jquery-3.2.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"female"</span>&gt;</span>古力娜扎<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"female"</span>&gt;</span>迪丽热巴<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"female hero"</span>&gt;</span>黑寡妇<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"male hero"</span>&gt;</span>钢铁侠<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"male hero"</span>&gt;</span>超人<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"boss"</span>&gt;</span>灭霸<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1.获取span标签的jquery对象</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="string">'span'</span>).length);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2.获取class有hero的jquery对象</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="string">'.hero'</span>).length);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 3.获得id="boss"的jquery对象</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="string">'#boss'</span>).length);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 4.并集选择器</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="string">'span,div'</span>).length);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="3-2-层级关系选择器"><a href="#3-2-层级关系选择器" class="headerlink" title="3.2 层级关系选择器"></a>3.2 层级关系选择器</h3><ul>
<li><p>后代选择器</p>
<ul>
<li>语法：<code>$(&quot;A B&quot;)</code> 选择A元素内部的所有B元素</li>
</ul>
</li>
<li><p>父子选择器</p>
<ul>
<li>语法：<code>$(&quot;A &gt; B&quot;)</code> 选择A元素内部的所有B子元素</li>
</ul>
</li>
</ul>
<p>使用演示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>层级关系选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/jquery-3.2.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"kangxi"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>儿子：雍正<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">b</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>孙子：乾隆<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>牛顿<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1. 获取div的后代span的文本</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="string">'#kangxi span'</span>).text());</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2. 获取div儿子辈span</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="string">'#kangxi &gt; span'</span>).text());</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="3-3-属性选择器"><a href="#3-3-属性选择器" class="headerlink" title="3.3 属性选择器"></a>3.3 属性选择器</h3><ul>
<li>属性选择器：<ul>
<li>语法：<code>$(&quot;A[属性名=&#39;值&#39;]&quot;)</code>包含指定属性等于指定值的选择器</li>
</ul>
</li>
<li>复合属性选择器：<ul>
<li>语法：<code>$(&quot;A[属性名=&#39;值&#39;][]...&quot;)</code> 包含多个属性条件的选择器</li>
</ul>
</li>
</ul>
<p>使用演示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>属性选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/jquery-3.2.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"用户名"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"nickname"</span> <span class="attr">value</span>=<span class="string">"昵称"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1.获取type='text'的input标签</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="string">'input[type="text"]'</span>).length);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2.获取type='text' 且 name="nickname" 的input标签</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="string">'input[type="text"][name="nickname"]'</span>).length);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="3-4-过滤选择器"><a href="#3-4-过滤选择器" class="headerlink" title="3.4 过滤选择器"></a>3.4 过滤选择器</h3><ul>
<li>首元素选择器<ul>
<li>语法： :first 获得选择的元素中的第一个元素        </li>
</ul>
</li>
<li>尾元素选择器<ul>
<li>语法： :last 获得选择的元素中的最后一个元素</li>
</ul>
</li>
<li>偶数选择器（奇数行）<ul>
<li>语法： :even 偶数，从 0 开始计数</li>
</ul>
</li>
<li>奇数选择器（偶数行）<ul>
<li>语法： :odd 奇数，从 0 开始计数</li>
</ul>
</li>
<li>指定索引选择器<ul>
<li>语法： :eq(index) 指定索引元素</li>
</ul>
</li>
</ul>
<p>使用演示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>过滤选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/jquery-3.2.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>大娃（红娃）<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>二娃（橙娃）<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>三娃（黄娃）<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>四娃（绿娃）<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>五娃（青娃）<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>六娃（蓝娃）<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>七娃（紫娃）<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1.获取第一个元素</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="string">'li:first'</span>).text());</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2.获取偶数索引元素</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="string">'li:even'</span>).text());</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 3.获取指定索引2的(三娃)元素</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="string">'li:eq(2)'</span>).text());</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="3-5-对象的遍历"><a href="#3-5-对象的遍历" class="headerlink" title="3.5 对象的遍历"></a>3.5 对象的遍历</h3><p>语法：<code>jQuery对象.each(function(index, element){...})</code></p>
<p>使用演示：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>对象遍历<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/jquery-3.2.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"city"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>天津<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 获取ul的jq对象</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// let $city = $('#city li');</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> city = <span class="built_in">document</span>.querySelectorAll(<span class="string">'#city li'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// js普通for</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; city.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(city[i].innerText);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// js增强for</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> ele <span class="keyword">of</span> city) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(ele.innerText);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// jq遍历方法，集各家之所长...</span></span></span><br><span class="line"><span class="javascript">    $(city).each(<span class="function"><span class="keyword">function</span> (<span class="params">index,element</span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// console.log(index);</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// console.log($city[index].innerText);</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// console.log(element);</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//console.log(element.innerText);</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// console.log($(element).text()); // js转jq，调用jq方法..</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log($(<span class="keyword">this</span>).text()); <span class="comment">// this表示当前 遍历的元素js对象</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="四、jQuery的DOM操作"><a href="#四、jQuery的DOM操作" class="headerlink" title="四、jQuery的DOM操作"></a>四、jQuery的DOM操作</h2><h3 id="4-1-jQuery操作内容"><a href="#4-1-jQuery操作内容" class="headerlink" title="4.1 jQuery操作内容"></a>4.1 jQuery操作内容</h3><ul>
<li><p><code>text()</code>：获取/设置元素的标签体纯文本内容</p>
<ul>
<li>相当于js：innerText属性</li>
</ul>
</li>
<li><p><code>html()</code>: 获取/设置元素的标签体超文本内容</p>
<ul>
<li>相当于js：innerHTML属性</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>dom操作内容<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/jquery-3.2.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myDiv"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>天王盖地虎<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1.text()操作内容</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1.1 获取div纯文本</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// console.log($('#myDiv').text());</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1.2 设置div纯文本</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    // $('#myDiv').text('<span class="tag">&lt;<span class="name">h1</span>&gt;</span>小鸡炖蘑菇<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>')</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2.html()操作内容</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2.1 获取div超文本</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="string">'#myDiv'</span>).html());</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2.2 设置div超文本</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">   // $('#myDiv').html('<span class="tag">&lt;<span class="name">h1</span>&gt;</span>小鸡炖蘑菇<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>');</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2.3 追加</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#myDiv'</span>).html($(<span class="string">"#myDiv"</span>).html() + <span class="string">'&lt;h1&gt;小鸡炖蘑菇&lt;/h1&gt;'</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="4-2-jQuery操作属性"><a href="#4-2-jQuery操作属性" class="headerlink" title="4.2 jQuery操作属性"></a>4.2 jQuery操作属性</h3><ul>
<li><p><code>val()</code>：获取/设置 （input标签）value属性值</p>
<ul>
<li>相当于：input的js对象.value属性</li>
</ul>
</li>
<li><p><code>attr()</code>: 获取/设置元素的属性</p>
</li>
<li><p><code>removeAttr()</code>：删除属性</p>
</li>
</ul>
<p>jQuery在1.6版本之后，提供另一组API prop 通常处理属性值为布尔类型操作</p>
<ul>
<li><p>例如：checked selected等</p>
</li>
<li><p><code>prop()</code>：获取/设置元素的属性</p>
</li>
<li><p><code>removeProp()</code>：删除属性</p>
</li>
</ul>
<p>使用示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>dom操作属性<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/jquery-3.2.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">    姓名 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"德玛西亚"</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    爱好</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"hobby"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"perm"</span>  &gt;</span>烫头<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">value</span>=<span class="string">"清空按钮"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交按钮"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1.获取文本框value属性</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// console.log($("#username").val());</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#username'</span>).val(<span class="string">'草丛伦...'</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 获取指定属性的值</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="string">'#hobby'</span>).attr(<span class="string">'value'</span>));</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 设置/更新指定属性的值</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#hobby'</span>).attr(<span class="string">'value'</span>,<span class="string">'烫头'</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 删除属性</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#hobby'</span>).removeAttr(<span class="string">'value'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2.获取爱好的checked属性</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// attr() 方法操作 boolean类型的属性比较麻烦...</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// console.log($('#hobby').attr('checked'));</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="string">'#hobby'</span>).prop(<span class="string">'checked'</span>));</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="4-3-jQuery操作样式"><a href="#4-3-jQuery操作样式" class="headerlink" title="4.3 jQuery操作样式"></a>4.3 jQuery操作样式</h3><ol>
<li><p>直接修改jQuery对象的样式属性</p>
<ul>
<li><p>语法：<code>jQuery对象.css()</code></p>
<ul>
<li><p>css(样式名) 获取</p>
</li>
<li><p>css(样式名,样式值) 设置</p>
<blockquote>
<p>兼容性好：样式名支持：fontSize | font-size</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
<li><p>添加/删除jQuery对象样式</p>
<ul>
<li>语法：<ul>
<li>添加：<code>jQuery对象.addClass()</code></li>
<li>删除：<code>jQuery对象.removeClass()</code></li>
</ul>
</li>
</ul>
</li>
<li><p>切换jq对象样式</p>
<ul>
<li>语法：<code>jQuery对象.toggleClass()</code>  无添加，有删除</li>
</ul>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>dom操作样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/jquery-3.2.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#p1</span>&#123; <span class="attribute">background-color</span>: red;&#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.mp</span> &#123;</span></span><br><span class="line">            color: green</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.mpp</span> &#123;</span></span><br><span class="line">            background-color: lightgray;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p1"</span>&gt;</span>1. 设置一个css样式<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p2"</span>&gt;</span>2. 批量设置css样式<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p3"</span>&gt;</span>3. 通过class设置样式<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p4"</span>&gt;</span>4. <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"toggle"</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span>class样式 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> $p1 = $(<span class="string">'#p1'</span>);<span class="comment">//获取p1</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> $p2 = $(<span class="string">'#p2'</span>);<span class="comment">//获取p2</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> $p3 = $(<span class="string">'#p3'</span>);<span class="comment">//获取p3</span></span></span><br><span class="line"><span class="javascript">	<span class="keyword">let</span> $p4 = $(<span class="string">'#p4'</span>);<span class="comment">//获取p4</span></span></span><br><span class="line">	</span><br><span class="line"><span class="handlebars"><span class="xml">    // 1. 设置一个css样式   <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p1"</span> <span class="attr">style</span>=<span class="string">"xxxxxxx"</span>&gt;</span>1. 设置一个css样式<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//$p1.css('backgroundColor','skyblue');</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// $p1.css('background-color','skyblue');</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2. 批量设置css样式</span></span></span><br><span class="line"><span class="actionscript">    $p2.css(&#123;<span class="string">"background-color"</span>:<span class="string">"gold"</span>,<span class="string">"border"</span>:<span class="string">"1px solid red"</span>&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="handlebars"><span class="xml">    // 3. 通过class设置样式  <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p3"</span> <span class="attr">class</span>=<span class="string">"mp mpp"</span>&gt;</span>3. 通过class设置样式<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="actionscript">    $p3.addClass(<span class="string">'mp mpp'</span>);</span></span><br><span class="line"><span class="actionscript">    $p3.removeClass(<span class="string">'mpp'</span>)</span></span><br><span class="line">	</span><br><span class="line"><span class="actionscript">	<span class="comment">// 4. toggleClass() 切换一个class</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#toggle'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        $p4.toggleClass(<span class="string">'mp mpp'</span>)</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="4-4-jQuery操作元素"><a href="#4-4-jQuery操作元素" class="headerlink" title="4.4 jQuery操作元素"></a>4.4 jQuery操作元素</h3><ol>
<li>$(标签) 创建一个标签<ul>
<li><code>$(&quot;&lt;a&gt;xx&lt;/a&gt;&quot;)</code>  相当于 document.createElement(‘li’)</li>
</ul>
</li>
<li>prepend()  在当前元素内部，首部添加子元素<ul>
<li><code>父对象.prepend(子对象)</code></li>
</ul>
</li>
<li>append() 在当前元素内部，尾部添加子元素<ul>
<li><code>父对象.append(子对象)</code></li>
</ul>
</li>
</ol>
<ol start="4">
<li><p>empty() 清空子元素 （断子绝孙）</p>
<ul>
<li><code>对象.empty()</code></li>
</ul>
</li>
<li><p>remove() 删除自己  （满门抄斩）</p>
<ul>
<li><code>对象.remove()</code></li>
</ul>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>12-dom操作元素<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/jquery-3.2.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"star"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>古力娜扎<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>迪丽热巴<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> $star = $(<span class="string">'#star'</span>); <span class="comment">// 无序列表</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="string">'&lt;li&gt;萨瓦迪卡&lt;/li&gt;'</span>));</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1.前面添加马尔扎哈</span></span></span><br><span class="line"><span class="javascript">    $star.prepend($(<span class="string">'&lt;li&gt;马尔扎哈&lt;/li&gt;'</span>))</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2.后面添加萨瓦迪卡</span></span></span><br><span class="line"><span class="javascript">    $star.append($(<span class="string">'&lt;li&gt;萨瓦迪卡&lt;/li&gt;'</span>))</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 3.移出所有列表项</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// $star.empty();</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 4.删除无序列表</span></span></span><br><span class="line">    $star.remove()</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="五、jQuery事件绑定"><a href="#五、jQuery事件绑定" class="headerlink" title="五、jQuery事件绑定"></a>五、jQuery事件绑定</h2><p>jQuery的事件与js的事件的功能和作用一样，只是在使用语法上稍微有些差异。</p>
<ul>
<li><p><code>js对象.事件属性=function(){}</code></p>
</li>
<li><p><code>jq对象.事件函数(function(){})</code></p>
</li>
</ul>
<h3 id="常见的事件"><a href="#常见的事件" class="headerlink" title="常见的事件"></a>常见的事件</h3><ol>
<li>点击事件：<ul>
<li><code>click()</code>：单击事件</li>
<li><code>dblclick()</code>：双击事件</li>
</ul>
</li>
<li>焦点事件<ul>
<li><code>blur()</code>：失去焦点</li>
<li><code>focus()</code>:元素获得焦点。</li>
</ul>
</li>
<li>鼠标事件：<ul>
<li><code>mousedown()</code>：鼠标按钮被按下。</li>
<li><code>mouseup()</code>：鼠标按键被松开。</li>
<li><code>mousemove()</code>：鼠标被移动。</li>
<li><code>mouseover()</code>：鼠标移到某元素之上。</li>
<li><code>mouseout()</code>：鼠标从某元素移开。</li>
</ul>
</li>
<li>键盘事件：<ul>
<li><code>keydown()</code>：某个键盘按键被按下。    </li>
<li><code>keyup()</code>：某个键盘按键被松开。</li>
<li><code>keypress()</code>：某个键盘按键被按下并松开。</li>
</ul>
</li>
<li>改变事件<ul>
<li><code>change()</code>：域的内容被改变。</li>
</ul>
</li>
<li>表单事件：<ul>
<li><code>submit()</code>：提交按钮被点击。</li>
</ul>
</li>
<li>页面加载事件：<ul>
<li><code>$(function(){})</code></li>
</ul>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>jq事件绑定<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/jquery-3.2.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"js方式"</span> <span class="attr">id</span>=<span class="string">"jsBtn"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"jq方式"</span> <span class="attr">id</span>=<span class="string">"jqBtn"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// js方式</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'jsBtn'</span>).onclick=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'js方式'</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// jq方式</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#jqBtn'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'jq方式'</span>)</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>Request&amp;Response</title>
    <url>/2020/08/23/request-response/</url>
    <content><![CDATA[<h1 id="Request-amp-Response"><a href="#Request-amp-Response" class="headerlink" title="Request&amp;Response"></a>Request&amp;Response</h1><p>Request请求对象：获取</p>
<ul>
<li>HTTP请求消息格式(行、头、体)</li>
</ul>
<p>Response响应对象：设置</p>
<ul>
<li>HTTP响应消息格式(行、头、体)</li>
</ul>
<a id="more"></a>

<h2 id="一、Request概述"><a href="#一、Request概述" class="headerlink" title="一、Request概述"></a>一、Request概述</h2><ul>
<li>用户通过浏览器访问服务器时，Tomcat将HTTP请求中所有的信息都封装在Request对象中</li>
<li>作用：开发人员可以通过request对象方法，来获取浏览器发送的所有信息。</li>
</ul>
<p><img data-src="/img/request.png" alt="request"></p>
<p><strong>Request体系结构</strong></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">ServletRequest</span><br><span class="line"><span class="code">	|</span></span><br><span class="line">HttpServletRequest</span><br><span class="line"><span class="code">	|</span></span><br><span class="line">org.apache.catalina.connector.RequestFacade（由tomcat厂商提供）</span><br></pre></td></tr></table></figure>



<h2 id="二、Request获取HTTP请求信息"><a href="#二、Request获取HTTP请求信息" class="headerlink" title="二、Request获取HTTP请求信息"></a>二、Request获取HTTP请求信息</h2><h3 id="2-1-获取请求行"><a href="#2-1-获取请求行" class="headerlink" title="2.1 获取请求行"></a>2.1 获取请求行</h3><p>例如(请求行数据)：<code>GET /request/RequestLine HTTP/1.1</code></p>
<p><strong>相关API：</strong></p>
<ul>
<li>获取请求方法：GET<ul>
<li><code>String getMethod()</code></li>
</ul>
</li>
<li>获取请求项目的网络地址(虚拟路径)：/request<ul>
<li><code>String getContextPath()</code></li>
</ul>
</li>
<li>获取请求的URI（统一资源标识符）：/request/RequestLine<ul>
<li><code>String getRequestURI()</code></li>
</ul>
</li>
<li>获取请求的URL（统一资源定位符）：<a href="http://localhost:8080/request/RequestLine" target="_blank" rel="noopener">http://localhost:8080/request/RequestLine</a><ul>
<li><code>StringBuffer getRequestURL()</code></li>
</ul>
</li>
<li>获取请求协议和版本：HTTP/1.1<ul>
<li><code>String getProtocol()</code></li>
</ul>
</li>
</ul>
<p><strong>扩展(不属于请求行)：</strong></p>
<ul>
<li>获取客户端访问ip：<code>String getRemoteAddr()</code><ul>
<li>注意：<ul>
<li>如果localhost访问，显示IPV6</li>
<li>如果127.0.0.1访问，显示IPV4</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>代码演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/RequestLine"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestLine</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"获取请求方式："</span> + request.getMethod());</span><br><span class="line">        System.out.println(<span class="string">"获取虚拟路径："</span> + request.getContextPath());</span><br><span class="line">        System.out.println(<span class="string">"获取请求的URI："</span> + request.getRequestURI());</span><br><span class="line">        System.out.println(<span class="string">"获取请求的URL："</span> + request.getRequestURL());</span><br><span class="line">        System.out.println(<span class="string">"获取请求的协议和版本："</span> + request.getProtocol());</span><br><span class="line">        System.out.println(<span class="string">"获取客户端IP："</span> + request.getRemoteAddr());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-2-获取请求头信息"><a href="#2-2-获取请求头信息" class="headerlink" title="2.2 获取请求头信息"></a>2.2 获取请求头信息</h3><p>例如：<code>host: localhost:8080</code></p>
<p><strong>相关API：</strong></p>
<ul>
<li>根据请求头的名称获取对应的值【不区分大小写】：<ul>
<li><code>String getHeader(String name)</code></li>
</ul>
</li>
<li>获取所有请求头的名称：<ul>
<li><code>Enumeration&lt;String&gt; getHeaderNames()</code><ul>
<li>Enumeration是Iterator的前身，用于属于的遍历</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>代码演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/RequestHeader"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestHeader</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// getHeader(String name):获取请求头名称对应的值</span></span><br><span class="line">        System.out.println(<span class="string">"host:"</span> + request.getHeader(<span class="string">"host"</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"===================================="</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Enumeration&lt;String&gt; getHeaderNames():获取所有请求头名称</span></span><br><span class="line">        Enumeration&lt;String&gt; requestHeaderNames = request.getHeaderNames();</span><br><span class="line">        <span class="comment">// 迭代遍历数据</span></span><br><span class="line">        <span class="keyword">while</span> (requestHeaderNames.hasMoreElements())&#123; <span class="comment">// 判断还有没有数据</span></span><br><span class="line">            <span class="comment">// 获取数据</span></span><br><span class="line">            String headerName = requestHeaderNames.nextElement();</span><br><span class="line">            <span class="comment">// 打印输出</span></span><br><span class="line">            System.out.println(headerName + <span class="string">":"</span> + request.getHeader(headerName));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-3-Request案例"><a href="#2-3-Request案例" class="headerlink" title="2.3 Request案例"></a>2.3 Request案例</h3><h4 id="2-3-1-视频防盗链"><a href="#2-3-1-视频防盗链" class="headerlink" title="2.3.1 视频防盗链"></a>2.3.1 视频防盗链</h4><p><strong>原理：</strong></p>
<ul>
<li><strong>获取请求头信息中的referer头，判断是否是官方域名跳转过来的，不是则不许播放视频，是则可以播放。</strong></li>
</ul>
<blockquote>
<p>注意：如果是浏览器地址栏直接访问，没有referer这个头</p>
</blockquote>
<p><strong>代码实现：</strong></p>
<p><strong>QQLiveServlet</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 防盗链案例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/QQLiveServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QQLiveServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//设置文本格式及字符集</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">        <span class="comment">//获取referer头信息</span></span><br><span class="line">        String referer = request.getHeader(<span class="string">"referer"</span>);</span><br><span class="line">        <span class="comment">//判断是否以指定域名开头</span></span><br><span class="line">        <span class="keyword">if</span> (referer.startsWith(<span class="string">"http://localhost:8080/request_response/"</span>))&#123;</span><br><span class="line">            <span class="comment">// 是，正常播放</span></span><br><span class="line">            response.getWriter().write(<span class="string">"&lt;h1&gt;播放中....&lt;/h1&gt;"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//否 友情提示</span></span><br><span class="line">            String url = request.getRequestURL().toString();</span><br><span class="line">            response.getWriter().write(<span class="string">"&lt;h1&gt;请来官网观看视频，点击跳转:&lt;a href=\""</span>+url+<span class="string">"\"&gt;打开链接&lt;/a&gt;&lt;/h1&gt;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>内部页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/request_response/QQLiveServlet"</span>&gt;</span>打开视频<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>外部网站页面</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://localhost:8080/request_response/QQLiveServlet"</span>&gt;</span>打开视频<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="2-3-2-浏览器兼容性案例"><a href="#2-3-2-浏览器兼容性案例" class="headerlink" title="2.3.2 浏览器兼容性案例"></a>2.3.2 浏览器兼容性案例</h3><p>原理：通过获取请求头中的<strong>user-agent</strong>，里面包含了浏览器的版本信息，判断是什么浏览器，进行不同的处理方式。</p>
<p><img data-src="/img/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7%E6%A1%88%E4%BE%8B.png" alt="浏览器兼容性案例"></p>
<blockquote>
<p>user-agent：保存了浏览器版本信息</p>
</blockquote>
<p><strong>代码实现</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 浏览器兼容案例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/BrowserServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrowserServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//设置编码</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">        <span class="comment">//获取浏览器请求头信息user-agent，客户端版本信息</span></span><br><span class="line">        String agent = request.getHeader(<span class="string">"user-agent"</span>);</span><br><span class="line">        <span class="keyword">if</span> (agent.contains(<span class="string">"Chrome"</span>))&#123;</span><br><span class="line">            <span class="comment">//谷歌浏览器</span></span><br><span class="line">            response.getWriter().write(<span class="string">"&lt;h1&gt;这是谷歌浏览器...&lt;/h1&gt;"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (agent.contains(<span class="string">"Firefox"</span>))&#123;</span><br><span class="line">            response.getWriter().write(<span class="string">"&lt;h1&gt;这是火狐浏览器...&lt;/h1&gt;"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            response.getWriter().write(<span class="string">"&lt;h1&gt;其他浏览器...&lt;/h1&gt;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-4-Request获取请求参数"><a href="#2-4-Request获取请求参数" class="headerlink" title="2.4 Request获取请求参数"></a>2.4 Request获取请求参数</h3><ul>
<li><p><strong>不论get还是post请求方式，都可以使用下列方法来获取请求参数</strong></p>
</li>
<li><p><strong>浏览器中参数格式</strong>：username=jack&amp;age=18&amp;hobby=drink&amp;hobby=perm</p>
</li>
</ul>
<p><strong>获取参数相关API：</strong></p>
<ul>
<li>根据参数名获取单个值：<code>String getParameter(String name)</code></li>
<li>根据参数名获取多个值【用在复选框】：<code>String[] getParameterValues(String name)</code></li>
<li>获取所有参数名和参数值数组：<code>Map&lt;String,String[]&gt; getParameterMap()</code></li>
</ul>
<blockquote>
<p>中文乱码问题：</p>
<ul>
<li>get方式：在tomcat8版本之后，已经处理了乱码问题<ul>
<li>浏览器提交UTF-8编码，服务器接收UTF-8解码</li>
</ul>
</li>
<li>post方式：出现了中文乱码(可以通过设置指定post提交的解码方式)<ul>
<li>浏览器提交UTF-8编码，服务器接收ISO-8859-1解码</li>
<li><code>request.setCharacterEncoding(&quot;编码表名称&quot;);</code></li>
</ul>
</li>
</ul>
</blockquote>
<p><strong>代码演示：</strong></p>
<p>表单提交页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>form<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>get请求<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/request_response/RequestParam"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">    用户：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"age"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    爱好：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"smoking"</span>&gt;</span> 抽烟</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"drink"</span>&gt;</span> 喝酒</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"perm"</span>&gt;</span> 烫头 <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"get提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>post请求<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/request_response/RequestParam"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    用户：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"age"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    爱好：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"smoking"</span>&gt;</span> 抽烟</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"drink"</span>&gt;</span> 喝酒</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"perm"</span>&gt;</span> 烫头 <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"post提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>java接收参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/RequestParam"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestParam</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"get请求"</span>);</span><br><span class="line">        <span class="comment">//根据参数名获取单个值    String getParameter(String name)</span></span><br><span class="line">        System.out.println(<span class="string">"username="</span> + request.getParameter(<span class="string">"username"</span>));</span><br><span class="line">        System.out.println(<span class="string">"=========================================================="</span>);</span><br><span class="line">        <span class="comment">//根据参数名获取多个值【用在复选框】 String[] getParameterValues(String name)</span></span><br><span class="line">        String[] hobbies = request.getParameterValues(<span class="string">"hobby"</span>);</span><br><span class="line">        System.out.println(<span class="string">"hobby="</span> + Arrays.toString(hobbies));</span><br><span class="line">        System.out.println(<span class="string">"=========================================================="</span>);</span><br><span class="line">        <span class="comment">//获取所有参数名和参数值数组 Map&lt;String,String[]&gt; getParameterMap()</span></span><br><span class="line">        Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">        parameterMap.forEach((k,v) -&gt; System.out.println(k + <span class="string">"="</span> + Arrays.toString(v)));</span><br><span class="line">        System.out.println(<span class="string">"=========================================================="</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//解决post中文乱码</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        System.out.println(<span class="string">"post请求"</span>);</span><br><span class="line">        <span class="keyword">this</span>.doGet(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-5-扩展：BeanUtils"><a href="#2-5-扩展：BeanUtils" class="headerlink" title="2.5 扩展：BeanUtils"></a>2.5 扩展：BeanUtils</h3><p>BeanUtils 是 Apache 提供的一套工具包，可以将一个表单提交的所有数据封装到JavaBean（User对象）中；主要用于简化封装数据的操作。</p>
<blockquote>
<p>可以获取表单数据，直接封装到一个Java实体类中，方便操作以及保存。</p>
</blockquote>
<p>使用演示：</p>
<p><strong>① 导包</strong></p>
<p><strong>② 准备实体类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String[] hobby;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// get、set方法略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>③ 前端页面</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>BeanUtils请求<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/day07-request/BeanUtilsTest"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    用户：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"age"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    爱好：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"smoking"</span>&gt;</span> 抽烟</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"drink"</span>&gt;</span> 喝酒</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"perm"</span>&gt;</span> 烫头 <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"post提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>④ 前置条件</strong></p>
<ul>
<li><strong>实体类的变量名必须与表单的name属性的值一样，才能使用BeanUtils调用populate方法进行封装</strong></li>
</ul>
<p><strong>⑤ 代码实现</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    将前端表单提交的参数，封装到 User实体中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/BeanUtilsTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanUtilsTest</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        <span class="comment">// 1.获取所有表单的参数和值</span></span><br><span class="line">        Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">        <span class="comment">// 2.准备user实体</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 3.调用apache工具类，实现快速封装</span></span><br><span class="line">            BeanUtils.populate(user, parameterMap);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="三、Request的其他功能"><a href="#三、Request的其他功能" class="headerlink" title="三、Request的其他功能"></a>三、Request的其他功能</h2><h3 id="3-1-请求转发"><a href="#3-1-请求转发" class="headerlink" title="3.1 请求转发"></a>3.1 请求转发</h3><p><strong>请求转发</strong>：是服务器内部的一种资源跳转方式，浏览器中的URL没有发生改变，并且这个过程浏览器是不可见的。在转发的过程中，浏览器值发送了一次请求，产生一对request和response对象，在转发的过程中req和resp对象将伴随着转发到目标servlet中。完成浏览器的请求。在完成本次请求时，req和resp对象销毁。</p>
<p><strong>完成请求转发的相关API：</strong></p>
<ul>
<li>方式一：<ul>
<li>通过request对象，获取转发器对象：RequestDispatcher getRequestDispatcher(String path)</li>
<li>通过RequestDispatcher对象，实现请求转发功能：void forward(ServletRequest request, ServletResponse response) </li>
</ul>
</li>
<li>方式二：链式编程<ul>
<li><code>request.getRequestDispatcher(&quot;/BServlet&quot;).forward(request, response);</code></li>
</ul>
</li>
</ul>
<h3 id="3-2-Request域对象-共享数据"><a href="#3-2-Request域对象-共享数据" class="headerlink" title="3.2 Request域对象(共享数据)"></a>3.2 Request域对象(共享数据)</h3><ul>
<li>域对象：一个有作用范围的对象，可以在范围内共享数据</li>
<li>reqest域：代表一次请求的范围，一般用于一次请求中转发的多个资源中共享数据</li>
</ul>
<p><strong>相关API：</strong></p>
<ul>
<li>存数据：<code>void setAttribute(String name,Object o);</code></li>
<li>取数据：<code>Object getAttribute(String name);</code></li>
<li>删数据：<code>void removeAttribute(String name);</code></li>
</ul>
<p><strong>request域的生命周期：</strong></p>
<ul>
<li>创建：用户发送请求时</li>
<li>销毁：服务器做出响应后</li>
<li>作用范围：一次请求，多次转发之间</li>
</ul>
<h3 id="3-3-Request案例——用户登录"><a href="#3-3-Request案例——用户登录" class="headerlink" title="3.3 Request案例——用户登录"></a>3.3 Request案例——用户登录</h3><p>需求：</p>
<ul>
<li><p>实现用户的登录功能</p>
</li>
<li><p>登录成功跳转到SuccessServlet展示：登录成功！xxx,欢迎您</p>
</li>
<li><p>登录失败跳转到FailServlet展示：登录失败，用户名或密码错误</p>
</li>
</ul>
<p>前端页面：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"margin: 0 auto;width: 300px;height: 150px;border: 1px solid red;padding: 50px"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>用户登录<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/request_response/LoginServlet"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">            用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            密<span class="symbol">&amp;emsp;</span>码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登录"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>LoginServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sun.request.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.request.test.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/LoginServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//定义User对象</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        <span class="comment">//获取请求参数的Map集合</span></span><br><span class="line">        Map&lt;String, String[]&gt; userMap = request.getParameterMap();</span><br><span class="line">        <span class="comment">//封装数据</span></span><br><span class="line">        <span class="comment">/*userMap.forEach((k,v)-&gt;&#123;</span></span><br><span class="line"><span class="comment">            if ("username".equals(k))&#123;</span></span><br><span class="line"><span class="comment">                user.setUsername(v[0]);</span></span><br><span class="line"><span class="comment">            &#125; else if ("password".equals(k)) &#123;</span></span><br><span class="line"><span class="comment">                user.setPassword(v[0]);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);*/</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BeanUtils.populate(user,userMap);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException | InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 测试是否是否获取到了数据</span></span><br><span class="line">        System.out.println(user.getUsername());</span><br><span class="line">        System.out.println(user.getPassword());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断用户名密码是否正确，进行不同页面的转发</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"jack"</span>.equals(user.getUsername()) &amp;&amp; <span class="string">"123"</span>.equals(user.getPassword()))&#123;</span><br><span class="line">            <span class="comment">//正确</span></span><br><span class="line">            <span class="comment">//向request域对象中存入用户名</span></span><br><span class="line">            request.setAttribute(<span class="string">"username"</span>,user.getUsername());</span><br><span class="line">            <span class="comment">//获取转发器，参数传递转发的Servlet，调用forward方法转发，参数传递req和resp对象</span></span><br><span class="line">            request.getRequestDispatcher(<span class="string">"/LoginSuccess"</span>).forward(request,response);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//错误</span></span><br><span class="line">            <span class="comment">//获取转发器，参数传递转发的Servlet，调用forward方法转发，参数传递req和resp对象</span></span><br><span class="line">            request.getRequestDispatcher(<span class="string">"/LoginFail"</span>).forward(request,response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>LoginSuccess</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sun.request.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登录成功</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/LoginSuccess"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginSuccess</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//设置文本类型及字符集</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">        <span class="comment">//用户名和密码正确登录成功</span></span><br><span class="line">        <span class="comment">//获取到request域对象中存储的用户姓名，并向页面进行展示</span></span><br><span class="line">        String username = (String) request.getAttribute(<span class="string">"username"</span>);</span><br><span class="line">        response.getWriter().write(<span class="string">"&lt;h1&gt;登录成功，欢迎您："</span> + username + <span class="string">"&lt;/h1&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>LoginFail</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/LoginFail"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFail</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">        <span class="comment">//登录失败，提示用户名或密码错误</span></span><br><span class="line">        response.getWriter().write(<span class="string">"&lt;h1&gt;登录失败，用户名或密码错误&lt;/h1&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="四、Response概述"><a href="#四、Response概述" class="headerlink" title="四、Response概述"></a>四、Response概述</h2><ul>
<li>response对象表示web服务器给浏览器返回的响应信息</li>
<li>作用：开发人员可以使用response对象的方法，设置要返回给浏览器的响应信息</li>
</ul>
<p><img data-src="/img/response.png" alt="response"></p>
<p><strong>Response体系结构</strong></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">ServletResponse 接口</span><br><span class="line"><span class="code">		|	</span></span><br><span class="line">HttpServletResponse 接口</span><br><span class="line"><span class="code">		|	</span></span><br><span class="line">org.apache.catalina.connector.ResponseFacade 实现类（由tomcat提供的）</span><br></pre></td></tr></table></figure>



<h2 id="五、Response设置Http响应消息"><a href="#五、Response设置Http响应消息" class="headerlink" title="五、Response设置Http响应消息"></a>五、Response设置Http响应消息</h2><h3 id="5-1-Response相关API"><a href="#5-1-Response相关API" class="headerlink" title="5.1 Response相关API"></a>5.1 Response相关API</h3><p>① 响应行：</p>
<ul>
<li>设置响应状态码：<code>void setStatus(int sc)</code></li>
</ul>
<p>② 响应头：</p>
<ul>
<li>设置响应名称和对应的值：<code>void setHeader(String name, String value)</code></li>
</ul>
<p>③ 响应体：</p>
<ul>
<li>设置字符输出流<ul>
<li><code>PrintWriter getWriter()</code><ul>
<li>print()：将其他类型转为字符，再进行输出</li>
<li>write()：只能输出字符</li>
</ul>
</li>
</ul>
</li>
<li>设置字节输出流<ul>
<li><code>ServletOutputStream getOutputStream()</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>注意：在同一个servlet内，只能同时使用一种流对象，这两个流是互斥的….</p>
</blockquote>
<h3 id="5-2-响应重定向"><a href="#5-2-响应重定向" class="headerlink" title="5.2 响应重定向"></a>5.2 响应重定向</h3><p><strong>需求：用户访问AServlet后，服务器告诉浏览器重定向到BServlet</strong></p>
<p>实现思路：</p>
<ul>
<li><p>方式一：</p>
<ul>
<li>设置响应状态码：<code>response.setStatus(302);</code></li>
<li>设置响应头Location跳转的地址：<code>response.setHeader(&quot;location&quot;,&quot;/项目网络地址/资源网络地址&quot;);</code></li>
</ul>
</li>
<li><p>方式二：专门提供了一个重定向的方法</p>
<ul>
<li><code>response.sendRedirect(&quot;/项目网络地址/资源网络地址&quot;);</code></li>
</ul>
</li>
</ul>
<p>代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/AServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 方式一：</span></span><br><span class="line">        <span class="comment">//设置状态码</span></span><br><span class="line">        <span class="comment">// response.setStatus(302);</span></span><br><span class="line">        <span class="comment">//设置转发路径</span></span><br><span class="line">        <span class="comment">// response.setHeader("location","/day07_request_response/BServlet");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式二</span></span><br><span class="line">        response.sendRedirect(<span class="string">"/day07_request_response/BServlet"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/BServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">        response.getWriter().write(<span class="string">"处理了请求"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="重定向的特点"><a href="#重定向的特点" class="headerlink" title="重定向的特点"></a>重定向的特点</h5><ul>
<li>地址栏发生改变</li>
<li>浏览器发送二次请求</li>
<li>request和response创建二次（AServlet和BServlet不能共享这二个对象）</li>
<li>重定向是客户端行为，浏览器清楚发生的变化</li>
</ul>
<h3 id="5-3-转发与重定向的区别"><a href="#5-3-转发与重定向的区别" class="headerlink" title="5.3 转发与重定向的区别"></a>5.3 转发与重定向的区别</h3><p><strong>哪个对象?</strong></p>
<ul>
<li>转发（request对象的方法)<ul>
<li>request.getRequestDispatcher(“/BServlet”).forward(request,response);</li>
</ul>
</li>
<li>重定向（response对象的方法）        <ul>
<li>response.sendRedirect(“/day07-response/BServlet”);</li>
</ul>
</li>
</ul>
<p><strong>几次请求</strong></p>
<ul>
<li>转发<ul>
<li>地址栏： 没有改变</li>
<li>浏览器： 发了一次请求</li>
<li>服务器： 只有一对请求和响应对象</li>
<li>发生的位置： 服务器内部</li>
</ul>
</li>
<li>重定向<ul>
<li>地址栏： 发生了改变</li>
<li>浏览器： 发了两次请求</li>
<li>服务器： 有两对请求和响应对象</li>
<li>发生的位置： 浏览器外部</li>
</ul>
</li>
</ul>
<h3 id="5-4-Response响应中文"><a href="#5-4-Response响应中文" class="headerlink" title="5.4 Response响应中文"></a>5.4 Response响应中文</h3><p>向浏览器输出中文数据时不能乱码</p>
<p>解决：指定编码</p>
<ol>
<li>指定服务器响应编码<ul>
<li><code>void setCharacterEncoding(String charset)</code></li>
</ul>
</li>
<li>统一服务器和客户端编码和解码（掌握）<ul>
<li><code>void setHeader(&quot;Content-Type&quot;,&quot;text/html;charset=utf-8&quot;);</code></li>
<li><code>void setContentType(&quot;text/html;charset=utf-8&quot;);</code></li>
</ul>
</li>
</ol>
<p>代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/ResponseCode"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseCode</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/* // 指定服务器响应编码</span></span><br><span class="line"><span class="comment">        response.setCharacterEncoding("gbk");*/</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// 统一服务器和客户端编码和解码</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取response的字符输出流</span></span><br><span class="line">        PrintWriter writer = response.getWriter();</span><br><span class="line">        writer.write(<span class="string">"你好，你也蛮好的！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-5-Response文件下载案例"><a href="#5-5-Response文件下载案例" class="headerlink" title="5.5 Response文件下载案例"></a>5.5 Response文件下载案例</h3><p>需求：用户点击链接，浏览器开始下载文件。</p>
<p>思路：</p>
<ul>
<li>需要使用两个响应头，两个字节流。</li>
</ul>
<p>大致步骤：</p>
<ul>
<li>被下载文件的字节输入流<ul>
<li>FileInputStream</li>
</ul>
</li>
<li>response字节输出流<ul>
<li>ServletOutputStream</li>
</ul>
</li>
<li>告知客户端下载文件的MIME类型<ul>
<li>Content-Type:MIME类型</li>
</ul>
</li>
<li>告知浏览器以附件的方式保存<ul>
<li>Content-Disposition:attachment;filename=文件名</li>
</ul>
</li>
</ul>
<blockquote>
<p>注意：在这个下载过程如果文件名时中午，可能出现乱码情况，所以需要对不同的浏览器做出不同的处理</p>
</blockquote>
<p>代码实现：</p>
<p>前端页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>文件下载<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/request_response/FileDownload?filename=test.zip"</span>&gt;</span>test.zip<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/request_response/FileDownload?filename=demo.docx"</span>&gt;</span>demo.docx<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/request_response/FileDownload?filename=car.jpg"</span>&gt;</span>car.jpg<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/request_response/FileDownload?filename=禽兽.jpg"</span>&gt;</span>禽兽.jpg<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Servlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sun.response.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.io.IoUtil;</span><br><span class="line"><span class="keyword">import</span> com.sun.utils.DownLoadUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件下载案例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/FileDownload"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileDownload</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取要下载的文件名</span></span><br><span class="line">        String filename = request.getParameter(<span class="string">"filename"</span>);</span><br><span class="line">        <span class="comment">// 获取要下载的文件真实路径</span></span><br><span class="line">        String filePath = getServletContext().getRealPath(<span class="string">"/download/"</span> + filename);</span><br><span class="line">        <span class="comment">// 获取文件字节输入流</span></span><br><span class="line">        FileInputStream in = <span class="keyword">new</span> FileInputStream(filePath);</span><br><span class="line">        <span class="comment">// 获取response字节输出流</span></span><br><span class="line">        ServletOutputStream out = response.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 中文文件名会出现乱码问题，使用工具类对不同的浏览器对中文进行编码</span></span><br><span class="line">        <span class="comment">// 获取浏览器版本</span></span><br><span class="line">        filename = DownLoadUtils.getName(<span class="string">"user-agent"</span>, filename);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取文件的MIME类型告知浏览器</span></span><br><span class="line">        String mimeType = getServletContext().getMimeType(filename);</span><br><span class="line">        response.setContentType(mimeType);</span><br><span class="line">        <span class="comment">// 告知浏览器以附件形式下载文件</span></span><br><span class="line">        response.setHeader(<span class="string">"Content-Disposition"</span>,<span class="string">"attachment;filename="</span> + filename);</span><br><span class="line">        <span class="comment">// 一读一写复制文件</span></span><br><span class="line">        <span class="keyword">byte</span>[] bArr = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8092</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = in.read(bArr)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            out.write(bArr,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关流，释放资源</span></span><br><span class="line">        out.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编码解码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownLoadUtils</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getName</span><span class="params">(String agent, String filename)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (agent.contains(<span class="string">"Firefox"</span>)) &#123;</span><br><span class="line">			<span class="comment">// 火狐浏览器</span></span><br><span class="line">			BASE64Encoder base64Encoder = <span class="keyword">new</span> BASE64Encoder();</span><br><span class="line">			filename = <span class="string">"=?utf-8?B?"</span> + base64Encoder.encode(filename.getBytes(<span class="string">"utf-8"</span>)) + <span class="string">"?="</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">// 其它浏览器</span></span><br><span class="line">			filename = URLEncoder.encode(filename, <span class="string">"utf-8"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> filename;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>request</tag>
        <tag>response</tag>
      </tags>
  </entry>
  <entry>
    <title>Json&amp;AJAX入门</title>
    <url>/2020/08/19/Json-AJAX%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="一、Json"><a href="#一、Json" class="headerlink" title="一、Json"></a>一、Json</h2><h3 id="1-1-Json概述"><a href="#1-1-Json概述" class="headerlink" title="1.1 Json概述"></a>1.1 Json概述</h3><p>JavaScript对象表示形式（JavaScript Object Notation）</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">java对象表示形式:</span><br><span class="line"><span class="code">    User user = new User();</span></span><br><span class="line"><span class="code">    user.setUsername("后羿");</span></span><br><span class="line"><span class="code">    user.setAge(23);</span></span><br><span class="line"><span class="code">    user.setSex("男");</span></span><br><span class="line"><span class="code">			</span></span><br><span class="line">javaScript对象表示形式:</span><br><span class="line"><span class="code">    let user = &#123;"username":"后羿","age":18,"sex":"男"&#125;;</span></span><br><span class="line"><span class="code">        取值：user.username</span></span><br><span class="line"><span class="code">        赋值：user.username="安其拉";</span></span><br><span class="line"><span class="code">    let product = &#123;&#125;;</span></span><br><span class="line"><span class="code">    let car = &#123;&#125;;</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p><img data-src="/img/json.png" alt="json"></p>
<p>Json可以取代XML笨重的数据结构，和XML相比：更小、更快、更易解析。</p>
<h3 id="1-2-Json基础语法"><a href="#1-2-Json基础语法" class="headerlink" title="1.2 Json基础语法"></a>1.2 Json基础语法</h3><blockquote>
<p>前端语法比较松散，name 可以不使用双引号</p>
<p>但是在java中，name必须使用双引号</p>
</blockquote>
<p>例如：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">let user = &#123;username:"后羿",age:18,sex:"男"&#125;;</span><br><span class="line"></span><br><span class="line">String userJson = "&#123;\"username\":\"后羿\",\"age\":18,\"sex\":\"男\"&#125;";</span><br></pre></td></tr></table></figure>



<p>Json定义的三种类型：</p>
<ul>
<li><p>对象类型</p>
  <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="code">	name:value,</span></span><br><span class="line"><span class="code">	name:value</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>数组类型</p>
  <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line"><span class="code">    &#123;name:value,name:value&#125;,</span></span><br><span class="line"><span class="code">    &#123;name:value,name:value&#125;,</span></span><br><span class="line"><span class="code">    &#123;name:value,name:value&#125;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li><p>复杂对象</p>
  <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="code">    name:value,</span></span><br><span class="line"><span class="code">    array:[&#123;name:value&#125;,&#123;&#125;,&#123;&#125;]</span></span><br><span class="line"><span class="code">    user:&#123;name:value&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<p>代码示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JSON基础语法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1.描述用户对象（张三丰、男、32岁）</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// let user = &#123;username:"张三丰",sex:"男",age:32&#125;;</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> user = &#123;<span class="string">"username"</span>: <span class="string">"张三丰"</span>, <span class="string">"sex"</span>: <span class="string">"男"</span>, <span class="string">"age"</span>: <span class="number">32</span>&#125;;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(user.username);</span></span><br><span class="line">    user.age = 50;</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(user);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"---------------------"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2.描述用户数组（张三丰、张翠山、张无忌）</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> array = [</span></span><br><span class="line"><span class="actionscript">        &#123;<span class="string">"username"</span>: <span class="string">"张三丰"</span>, <span class="string">"sex"</span>: <span class="string">"男"</span>, <span class="string">"age"</span>: <span class="number">32</span>&#125;,</span></span><br><span class="line"><span class="actionscript">        &#123;<span class="string">"username"</span>: <span class="string">"张翠山"</span>, <span class="string">"sex"</span>: <span class="string">"男"</span>, <span class="string">"age"</span>: <span class="number">22</span>&#125;,</span></span><br><span class="line"><span class="actionscript">        &#123;<span class="string">"username"</span>: <span class="string">"张无忌"</span>, <span class="string">"sex"</span>: <span class="string">"男"</span>, <span class="string">"age"</span>: <span class="number">12</span>&#125;</span></span><br><span class="line">    ];</span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> user <span class="keyword">of</span> array) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(user.username);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"---------------------"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 3.描述韦小宝（27岁，老婆、师傅）</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> xiaobao = &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="string">"username"</span>: <span class="string">"韦小宝"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">"age"</span>: <span class="number">27</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">"laopo"</span>: [</span></span><br><span class="line"><span class="actionscript">            &#123;<span class="string">"username"</span>: <span class="string">"双儿"</span>, <span class="string">"address"</span>: <span class="string">"扬州"</span>&#125;,</span></span><br><span class="line"><span class="actionscript">            &#123;<span class="string">"username"</span>: <span class="string">"建宁"</span>, <span class="string">"address"</span>: <span class="string">"北京人"</span>&#125;,</span></span><br><span class="line"><span class="actionscript">            &#123;<span class="string">"username"</span>: <span class="string">"皇后"</span>, <span class="string">"address"</span>: <span class="string">"岛国"</span>&#125;</span></span><br><span class="line">        ],</span><br><span class="line"><span class="actionscript">        <span class="string">"shifu"</span>: &#123;<span class="string">"username"</span>: <span class="string">"陈浩南"</span>, <span class="string">"address"</span>: <span class="string">"铜锣湾"</span>&#125;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(xiaobao.username);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> laopo <span class="keyword">of</span> xiaobao.laopo) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(laopo.username + <span class="string">" "</span> + laopo.address);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(xiaobao.shifu.username);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="1-3-Json格式转换"><a href="#1-3-Json格式转换" class="headerlink" title="1.3 Json格式转换"></a>1.3 Json格式转换</h3><ul>
<li>JSON对象与字符串转换的相关函数<ul>
<li>语法：<ul>
<li>Json对象.stringify(object) 把json对象转为字符串</li>
<li>Json对象.parse(string) 把字符串转为json对象</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>代码示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>02-JSON格式转换<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> userStr = <span class="string">"&#123;\"username\":\"后羿\",\"age\":18,\"sex\":\"男\"&#125;"</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> userStr);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//2. JSON.parse(string) 把字符串转为json对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> user = <span class="built_in">JSON</span>.parse(userStr);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> user);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(user.username);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//1. JSON.stringify(object) 把json对象转为字符串</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">JSON</span>.stringify(user));</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="二、AJAX入门"><a href="#二、AJAX入门" class="headerlink" title="二、AJAX入门"></a>二、AJAX入门</h2><h3 id="2-1-AJAX概述"><a href="#2-1-AJAX概述" class="headerlink" title="2.1 AJAX概述"></a>2.1 AJAX概述</h3><p><strong>传统网站中存在的问题</strong></p>
<ul>
<li><p>网速慢的情况下，页面加载时间长，用户只能等待</p>
</li>
<li><p>表单提交后，如果一项内容不合格，需要重新填写所有表单内容</p>
</li>
<li><p>页面跳转，重新加载页面，造成资源浪费，增加用户等待时间</p>
</li>
</ul>
<p><strong>AJAX可以解决以上问题</strong></p>
<p>ajax是浏览器提供的一套方法，在无需重新加载整个网页情况下，能够更新部分网页的技术，从而提高用户浏览网站应用的体验。</p>
<blockquote>
<p>中文音译：阿贾克斯</p>
</blockquote>
<p>应用场景：</p>
<ul>
<li>搜索框提示</li>
<li>表单数据验证</li>
<li>无刷新分页</li>
</ul>
<blockquote>
<p>AJAX：无需加载整个网页，可以向服务器发送异步请求，实现页面的局部刷新…</p>
</blockquote>
<h3 id="2-2-快速入门"><a href="#2-2-快速入门" class="headerlink" title="2.2 快速入门"></a>2.2 快速入门</h3><p>需求：校验用户名是否存在</p>
<h4 id="2-2-1-需求分析"><a href="#2-2-1-需求分析" class="headerlink" title="2.2.1 需求分析"></a>2.2.1 需求分析</h4><p><img data-src="/img/AJAX%E7%99%BB%E5%BD%95%E6%A1%88%E4%BE%8B.png" alt="AJAX登录案例"></p>
<h4 id="2-2-2-代码编写"><a href="#2-2-2-代码编写" class="headerlink" title="2.2.2 代码编写"></a>2.2.2 代码编写</h4><p>前提：需要准备一台服务器处理ajax请求，这里不做代码演示，主要演示AJAX。</p>
<p>JS代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>register<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/jquery-3.2.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"userInfo"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1.给用户名文本框绑定失去焦点事件</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#username'</span>).blur(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">       <span class="keyword">let</span> value=  $(<span class="keyword">this</span>).val();</span></span><br><span class="line"><span class="actionscript">       <span class="comment">// alert(value)</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 2.调用ajax发送请求</span></span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            type:<span class="string">'post'</span>,</span></span><br><span class="line"><span class="actionscript">            url:<span class="string">'http://localhost:8080/check'</span>,</span></span><br><span class="line"><span class="actionscript">            data:<span class="string">'username='</span>+value,</span></span><br><span class="line"><span class="actionscript">            success:<span class="function"><span class="keyword">function</span> <span class="params">(resp)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="string">'#userInfo'</span>).html(resp)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="2-2-3-API介绍"><a href="#2-2-3-API介绍" class="headerlink" title="2.2.3 API介绍"></a>2.2.3 API介绍</h4><blockquote>
<p>jQuery为了简化ajax的操作，提供了 $.ajax() 函数</p>
</blockquote>
<p>语法：<code>$.ajax({name:value,name:value})</code></p>
<p>常用参数：</p>
<ul>
<li>type:请求类型（方式）<ul>
<li>get / post / …</li>
</ul>
</li>
<li>url：请求地址</li>
<li>data：发送请求时，携带参数<ul>
<li>如果是get方式，在地址中拼接</li>
<li>如果post方式，在请求体当中拼接</li>
<li>例如：username=jack&amp;password=123&amp;age=18</li>
</ul>
</li>
<li>success：请求成功，服务器返回结果，帮你调用此函数<ul>
<li>resp：返回的数据变量</li>
</ul>
</li>
</ul>
<h4 id="2-2-4-练习"><a href="#2-2-4-练习" class="headerlink" title="2.2.4 练习"></a>2.2.4 练习</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>lx<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/jquery-3.2.1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"cityId"</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 页面加载成功后，向服务器发送请求，返回对应省份的城市</span></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> province = prompt(<span class="string">'请输入城市'</span>)</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span>(province != <span class="literal">null</span>)&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 发送ajax请求</span></span></span><br><span class="line"><span class="javascript">            $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">                type:<span class="string">'post'</span>,</span></span><br><span class="line"><span class="actionscript">                url:<span class="string">'http://localhost:8080/cityList'</span>,</span></span><br><span class="line"><span class="actionscript">                data:<span class="string">'province='</span>+province,</span></span><br><span class="line"><span class="actionscript">                success:<span class="function"><span class="keyword">function</span> <span class="params">(resp)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">for</span> (<span class="keyword">let</span> city <span class="keyword">of</span> resp) &#123;</span></span><br><span class="line"><span class="javascript">                        $(<span class="string">'#cityId'</span>).append(<span class="string">`&lt;option&gt;<span class="subst">$&#123;city&#125;</span>&lt;/option&gt;`</span>)</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line"><span class="actionscript">                error:<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                    alert(<span class="string">'服务器忙...'</span>)</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>Json</tag>
        <tag>AJAX</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP&amp;Tomcat</title>
    <url>/2020/08/20/HTTP-Tomcat/</url>
    <content><![CDATA[<h2 id="一、Web知识概述"><a href="#一、Web知识概述" class="headerlink" title="一、Web知识概述"></a>一、Web知识概述</h2><h3 id="1-1-软件架构"><a href="#1-1-软件架构" class="headerlink" title="1.1 软件架构"></a>1.1 软件架构</h3><ul>
<li>网络中有很多的计算机，它们直接的信息交流，我们称之为：交互</li>
<li>在互联网交互的过程的有两个非常典型的交互方式——B/S  交互模型（架构）和 C/S  交互模型（架构）</li>
</ul>
<a id="more"></a>

<p>C/S架构：客户端/服务器端</p>
<blockquote>
<p>Client/Server 客户端/服务器</p>
<p>访问服务器资源必须安装客户端软件</p>
<p>例如: QQ，绝地求生，LOL</p>
</blockquote>
<p>B/S：浏览器/服务器端</p>
<blockquote>
<p>Browser/Server 浏览器/服务器</p>
<p>访问服务器资源不需要专门安装客户端软件,而是直接通过浏览器访问服务器资源.</p>
<p>例如: 天猫、京东、知乎网站</p>
</blockquote>
<h3 id="1-2-资源分类"><a href="#1-2-资源分类" class="headerlink" title="1.2 资源分类"></a>1.2 资源分类</h3><ul>
<li><p>静态资源：所有用户访问后，得到的结果都是一样的，称为静态资源。静态资源可以直接被浏览器解析。</p>
<ul>
<li>如：html、css、JavaScript</li>
</ul>
</li>
<li><p>动态资源：每一个用户访问相同资源后，得到的结果可能不一样，称为动态资源。动态资源被访问后，需要先转换为静态资源，在返回给浏览器。</p>
<ul>
<li>如：servlet、jsp、asp、php</li>
</ul>
</li>
</ul>
<h3 id="1-3-网络通信的三要素"><a href="#1-3-网络通信的三要素" class="headerlink" title="1.3 网络通信的三要素"></a>1.3 网络通信的三要素</h3><ol>
<li>IP：电子设备在网络中的唯一标识。</li>
<li>端口：应用程序在计算机中的唯一标识。0~65535</li>
<li>传输协议：规定了数据传输的规则<ul>
<li>基础协议：<ol>
<li>TCP：安全协议，传输过程经过三次握手。速度稍慢</li>
<li>UDP：不安全协议。速度快</li>
</ol>
</li>
</ul>
</li>
</ol>
<h3 id="1-4-常见的Web服务器"><a href="#1-4-常见的Web服务器" class="headerlink" title="1.4 常见的Web服务器"></a>1.4 常见的Web服务器</h3><ul>
<li>Tomcat：Apache组织开源免费的web服务器</li>
</ul>
<ul>
<li>Jetty：Apache组织开源免费的小型web服务器</li>
</ul>
<ul>
<li><p>JBoss:：RedHat红帽公司的开源免费的web服务器</p>
</li>
<li><p>Glass Fish：Sun公司开源免费的web服务器</p>
</li>
<li><p>WebLogic：Oracle公司收费的web服务器</p>
</li>
<li><p>WebSphere：IBM公司收费的web服务器</p>
</li>
</ul>
<p><strong>JavaEE规范</strong></p>
<ul>
<li>在Java中所有的服务器厂商都要实现一组Oracle公司规定的接口，这些接口是称为JavaEE规范。不同厂商的JavaWeb服务器都实现了这些接口，在JavaEE中一共有13种规范。实现的规范越多，功能越强。</li>
</ul>
<h2 id="二、Tomcat服务器"><a href="#二、Tomcat服务器" class="headerlink" title="二、Tomcat服务器"></a>二、Tomcat服务器</h2><h3 id="2-1-Tomcat的使用"><a href="#2-1-Tomcat的使用" class="headerlink" title="2.1 Tomcat的使用"></a>2.1 Tomcat的使用</h3><ul>
<li><p>Tomcat 官网下载地址：<a href="https://tomcat.apache.org/download-80.cgi" target="_blank" rel="noopener">https://tomcat.apache.org/download-80.cgi</a></p>
</li>
<li><p>安装：解压压缩包即可。</p>
<ul>
<li>注意：安装目录不要有中文和空格</li>
</ul>
</li>
<li><p>卸载：删除Tomcat目录</p>
</li>
<li><p>目录结构：</p>
<p>  <img data-src="/img/tomcat%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt="tomcat目录结构"></p>
</li>
<li><p>启动和关闭</p>
<p>  <img data-src="/img/tomcat%E5%90%AF%E5%8A%A8%E5%92%8C%E5%85%B3%E9%97%AD.png" alt="tomcat启动和关闭"></p>
</li>
</ul>
<blockquote>
<p>关闭补充：在tomcat的黑窗口内，按住 ctrl + c （也能正常关闭）</p>
</blockquote>
<ul>
<li>访问测试：浏览器输入<code>localhost:8080</code>，出现以下页面及成功。</li>
</ul>
<p><img data-src="/img/tomcat%E8%AE%BF%E9%97%AE.png" alt="tomcat访问"></p>
<h3 id="2-2-启动报错"><a href="#2-2-启动报错" class="headerlink" title="2.2 启动报错"></a>2.2 启动报错</h3><h4 id="①-Java环境变量问题"><a href="#①-Java环境变量问题" class="headerlink" title="① Java环境变量问题"></a>① Java环境变量问题</h4><p>tomcat是由Java编写的，如果没有配置环境变量，将出现黑窗口一闪而过。</p>
<ul>
<li>解决办法：正确配置Java环境变量。</li>
</ul>
<h4 id="②-8080端口被占用"><a href="#②-8080端口被占用" class="headerlink" title="② 8080端口被占用"></a>② 8080端口被占用</h4><p>现象：启动时报错</p>
<p>查看日志</p>
<p><img data-src="/img/tomcat%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8.png" alt="tomcat端口占用"></p>
<p>解决方式一：</p>
<ul>
<li><p>暴力：找到对应占用端口号的进程，杀死进程</p>
</li>
<li><p>查找占用端口号的进程——cmd命令：<code>netstat -ano | findstr &quot;8080&quot;</code></p>
</li>
<li><p>修改自身端口号</p>
<ul>
<li><p>打开conf/server.xml配置文件，把所有<code>port=&quot;8080&quot;</code>处都修改为其他端口号即可。</p>
<p><img data-src="/img/tomcat%E4%BF%AE%E6%94%B9%E7%AB%AF%E5%8F%A3%E5%8F%B7.png" alt="tomcat修改端口号"></p>
</li>
</ul>
</li>
</ul>
<h3 id="2-3-发布项目的三种方式"><a href="#2-3-发布项目的三种方式" class="headerlink" title="2.3 发布项目的三种方式"></a>2.3 发布项目的三种方式</h3><h4 id="①-webapps部署"><a href="#①-webapps部署" class="headerlink" title="① webapps部署"></a>① webapps部署</h4><p>直接将项目放到webapps目录下即可</p>
<p><img data-src="/img/tomcat%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE%E6%96%B9%E5%BC%8F%E4%B8%80.png" alt="tomcat部署项目方式一"></p>
<h4 id="②-servver-xml部署"><a href="#②-servver-xml部署" class="headerlink" title="② servver.xml部署"></a>② servver.xml部署</h4><p>在tomcat/conf/server.xml中找到<code>&lt;Host&gt;</code>标签，添加<code>&lt;Context/&gt;</code>标签</p>
<p><img data-src="/img/tomcat%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE%E6%96%B9%E5%BC%8F%E4%BA%8C.png" alt="tomcat部署项目方式二"></p>
<h4 id="③-独立xml部署"><a href="#③-独立xml部署" class="headerlink" title="③ 独立xml部署"></a>③ 独立xml部署</h4><p>在tomcat/conf/Catalina/localhost 目录下创建一个xml文件，添加<code>&lt;Context/&gt;</code>标签</p>
<p><img data-src="/img/tomcat%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE%E6%96%B9%E5%BC%8F%E4%B8%89.png" alt="tomcat部署项目方式三"></p>
<h2 id="三、HTTP协议"><a href="#三、HTTP协议" class="headerlink" title="三、HTTP协议"></a>三、HTTP协议</h2><h3 id="3-1-HTTP协议概述"><a href="#3-1-HTTP协议概述" class="headerlink" title="3.1 HTTP协议概述"></a>3.1 HTTP协议概述</h3><p>超文本传输协议（Hyper Text Transfer Protocol)是互联网上应用最为广泛的一种网络协议。</p>
<p>传输协议：在客户端和服务器端通信时，规范了<span style="color:red">传输数据的格式 </span></p>
<p><img data-src="/img/http%E5%8D%8F%E8%AE%AE.png" alt="http协议"></p>
<h3 id="3-2-HTTP请求"><a href="#3-2-HTTP请求" class="headerlink" title="3.2 HTTP请求"></a>3.2 HTTP请求</h3><h4 id="3-2-1-浏览器中查看HTTP请求协议"><a href="#3-2-1-浏览器中查看HTTP请求协议" class="headerlink" title="3.2.1 浏览器中查看HTTP请求协议"></a>3.2.1 浏览器中查看HTTP请求协议</h4><blockquote>
<p>F12打开控制台</p>
</blockquote>
<h5 id="①-GET方式"><a href="#①-GET方式" class="headerlink" title="① GET方式"></a>① GET方式</h5><p><img data-src="/img/GET%E8%AF%B7%E6%B1%82.png" alt="GET请求"></p>
<h5 id="②-POST方式"><a href="#②-POST方式" class="headerlink" title="② POST方式"></a>② POST方式</h5><p><img data-src="/img/POST%E8%AF%B7%E6%B1%82.png" alt="POST请求"></p>
<h4 id="3-2-2-HTTP请求消息格式"><a href="#3-2-2-HTTP请求消息格式" class="headerlink" title="3.2.2 HTTP请求消息格式"></a>3.2.2 HTTP请求消息格式</h4><h5 id="①-请求行"><a href="#①-请求行" class="headerlink" title="① 请求行"></a>① 请求行</h5><p>格式：<code>请求方式 请求路径 协议/版本号</code></p>
<ul>
<li>例如：<ul>
<li><code>POST /tomcat/static/login.html HTTP/1.1</code>（从请求体获得数据）</li>
<li><code>GET  /tomcat/static/login.html?username=jack&amp;password=123</code> HTTP/1.1（从请求行获得数据）</li>
</ul>
</li>
</ul>
<p>请求方式区别：</p>
<ul>
<li>GET方式：<ul>
<li>参数在请求路径上进行拼接</li>
<li>大小有限制</li>
<li>不太安全    </li>
</ul>
</li>
<li>POST方式：<ul>
<li>参数不在请求路径上拼接（在请求体中）</li>
<li>大小没有限制</li>
<li>相对安全</li>
</ul>
</li>
</ul>
<h5 id="②-请求头"><a href="#②-请求头" class="headerlink" title="② 请求头"></a>② 请求头</h5><p>格式：<code>请求头名称:请求头的值</code></p>
<ul>
<li>例如：<code>Host: localhost:8080</code></li>
</ul>
<p><strong>常见请求头</strong>：Accept开头的，都是浏览器告诉服务器的一些暗语</p>
<ol>
<li><code>Host: localhost:8080</code>访问服务器的地址（域名+端口）</li>
<li><code>Connection: keep-alive</code> 长连接（http1.1协议）</li>
<li><code>Cache-Control: max-age=0</code>设置缓存数据的存活时间，单位秒</li>
<li><code>Upgrade-Insecure-Requests:1</code>  客户端支持https加密协议  </li>
<li><code>Referer: http://baidu.com</code> 上一次请求的地址（请求来源）</li>
<li><code>User-Agent:</code> 客户端系统和浏览器版本</li>
</ol>
<h5 id="③-请求体-正文"><a href="#③-请求体-正文" class="headerlink" title="③ 请求体(正文)"></a>③ 请求体(正文)</h5><blockquote>
<p>POST方式提交才有请求体</p>
</blockquote>
<ul>
<li>格式：参数名=参数值&amp;参数名=参数值<ul>
<li>例如：username=jack&amp;password=123</li>
</ul>
</li>
</ul>
<h3 id="3-3-HTTP响应"><a href="#3-3-HTTP响应" class="headerlink" title="3.3 HTTP响应"></a>3.3 HTTP响应</h3><h4 id="3-3-1-浏览器查看HTTP响应协议"><a href="#3-3-1-浏览器查看HTTP响应协议" class="headerlink" title="3.3.1 浏览器查看HTTP响应协议"></a>3.3.1 浏览器查看HTTP响应协议</h4><p><img data-src="/img/http%E5%93%8D%E5%BA%94.png" alt="http响应"></p>
<h4 id="3-3-2-HTTP响应消息格式"><a href="#3-3-2-HTTP响应消息格式" class="headerlink" title="3.3.2 HTTP响应消息格式"></a>3.3.2 HTTP响应消息格式</h4><h5 id="①-响应行"><a href="#①-响应行" class="headerlink" title="① 响应行"></a>① 响应行</h5><ul>
<li>格式：协议/版本号 状态码 <ul>
<li>例如：HTTP/1.1   200</li>
</ul>
</li>
<li>常见状态码<ul>
<li>200 ：表示成功</li>
<li>302 ：表示重定向</li>
<li>304 ：表示缓存</li>
<li>404：请求未找到</li>
<li>405：请求方法未找到</li>
<li>500：服务器内部错误</li>
</ul>
</li>
</ul>
<h5 id="②-响应头"><a href="#②-响应头" class="headerlink" title="② 响应头"></a>② 响应头</h5><ul>
<li>格式<ul>
<li>响应头名称：响应头的值</li>
</ul>
</li>
<li>例如<ul>
<li>Last-Modified: Thu, 20 Aug 2020 07:45:20 GMT</li>
</ul>
</li>
</ul>
<p><strong>常见的响应头</strong>：Content开头都是服务器告诉客户端一些暗语</p>
<ol>
<li>Location：通常与状态码302一起使用，实现重定向操作<ul>
<li>Location:<a href="http://www.jd.com" target="_blank" rel="noopener">www.jd.com</a></li>
</ul>
</li>
<li>Content-Type：服务器告诉客户端，返回响应体的数据类型和编码方式【重点】<ul>
<li>http协议传输的内容都是字符串（文本）</li>
<li>content-type: application/javascript</li>
</ul>
</li>
<li>Content-Disposition：服务器告诉客户端，以什么样方式打开响应体<ul>
<li>in-line（默认）：浏览器直接打开相应内容，展示给用户</li>
<li>attachment;filename=文件名：浏览器以附件的方式保存文件 【文件下载】</li>
</ul>
</li>
<li>Refresh：：在指定间隔时间后，跳转到某个页面</li>
<li>Last-Modified：通常与状态码304一起使用，实现缓存机制</li>
</ol>
<p><img data-src="/img/%E5%93%8D%E5%BA%94%E7%8A%B6%E6%80%81%E7%A0%81200%E3%80%81304.png" alt="响应状态码200、304"></p>
<p><img data-src="/img/%E5%93%8D%E5%BA%94%E7%8A%B6%E6%80%81%E7%A0%81302.png" alt="响应状态码302"></p>
<h5 id="③-响应体"><a href="#③-响应体" class="headerlink" title="③ 响应体"></a>③ 响应体</h5><p>服务器返回的数据，由浏览器接解析后展示给用户…</p>
]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>HTTP</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>Cookie&amp;Session</title>
    <url>/2020/08/26/Cookie-Session/</url>
    <content><![CDATA[<h2 id="一、会话概述"><a href="#一、会话概述" class="headerlink" title="一、会话概述"></a>一、会话概述</h2><h3 id="1-1-什么是会话"><a href="#1-1-什么是会话" class="headerlink" title="1.1 什么是会话"></a>1.1 什么是会话</h3><p><img data-src="/img/%E4%BB%80%E4%B9%88%E6%98%AF%E4%BC%9A%E8%AF%9D.png" alt="什么是会话"></p>
<a id="more"></a>

<h3 id="1-2-会话技术"><a href="#1-2-会话技术" class="headerlink" title="1.2 会话技术"></a>1.2 会话技术</h3><p><strong>问题：</strong>Http是一个无状态协议，同一个会话的连续两个请求相互独立，彼此并不了解</p>
<p><strong>作用</strong>：用于<span style="color:red">存储</span>浏览器与服务器在请求和响应过程中产生的<span style="color:red">数据</span></p>
<p>客户端会话技术：cookie</p>
<p>服务器端会话技术：session</p>
<p><img data-src="/img/%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF.png" alt="会话技术"></p>
<h2 id="二、Cookie"><a href="#二、Cookie" class="headerlink" title="二、Cookie"></a>二、Cookie</h2><h3 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h3><p>Cookie作用：在一次会话的多次请求之间共享数据，将数据<strong>保存到客户端（浏览器）</strong></p>
<blockquote>
<p>应用场景：</p>
<ul>
<li>JD的购物车</li>
</ul>
</blockquote>
<p><img data-src="/img/cookie.png" alt="cookie"></p>
<h3 id="2-2-快速入门"><a href="#2-2-快速入门" class="headerlink" title="2.2 快速入门"></a>2.2 快速入门</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>SetCookie</span><br><span class="line"><span class="code">	// 1.创建cookie</span></span><br><span class="line"><span class="code">		Cookie cookie = new Cookie(String name,String value);</span></span><br><span class="line"><span class="code">	// 2.写入到浏览器</span></span><br><span class="line"><span class="code">		response.addCookie(cookie);</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>GetCookie</span><br><span class="line"><span class="code">	// 1.从浏览器中获取cookie</span></span><br><span class="line"><span class="code">		Cookie[] cookies = request.getCookies();</span></span><br><span class="line"><span class="code">	// 2.遍历输出（非空判断....）</span></span><br></pre></td></tr></table></figure>



<p>代码演示：</p>
<blockquote>
<p>SetCookie</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/SetCookie"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetCookie</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建cookie</span></span><br><span class="line">        Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"product"</span>,<span class="string">"HuaWeiP40"</span>);</span><br><span class="line">        <span class="comment">// 2.写入到浏览器</span></span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>GetCookie</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/GetCookie"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetCookie</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.从浏览器中获取cookie</span></span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="comment">// 2.遍历输出</span></span><br><span class="line">        <span class="keyword">if</span> (cookies != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">                String name = cookie.getName();</span><br><span class="line">                String value = cookie.getValue();</span><br><span class="line">                System.out.println(name + <span class="string">":"</span> + value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-3-工作原理"><a href="#2-3-工作原理" class="headerlink" title="2.3 工作原理"></a>2.3 工作原理</h3><blockquote>
<p>图解</p>
</blockquote>
<p><img data-src="/img/cookie%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" alt="cookie工作原理"></p>
<h3 id="2-4-Cookie细节"><a href="#2-4-Cookie细节" class="headerlink" title="2.4 Cookie细节"></a>2.4 Cookie细节</h3><h4 id="2-4-1-服务器发送多个Cookie"><a href="#2-4-1-服务器发送多个Cookie" class="headerlink" title="2.4.1 服务器发送多个Cookie?"></a>2.4.1 服务器发送多个Cookie?</h4><blockquote>
<p>同一个会话域名，最多保存50个Cookie</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>答案是可以的</span><br><span class="line"><span class="code">	// 1.创建二个cookie对象</span></span><br><span class="line"><span class="code">		Cookie cookie1 = new Cookie("name","jack");</span></span><br><span class="line"><span class="code">		Cookie cookie2 = new Cookie("age","18");</span></span><br><span class="line"><span class="code">	// 2.response添加二个，响应</span></span><br><span class="line"><span class="code">		response.addCookie(cookie1);</span></span><br><span class="line"><span class="code">		response.addCookie(cookie2);</span></span><br></pre></td></tr></table></figure>

<p><strong>代码演示：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/ResponseMultipart"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseMultipart</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建二个cookie对象</span></span><br><span class="line">        Cookie cookie1 = <span class="keyword">new</span> Cookie(<span class="string">"name"</span>,<span class="string">"jack"</span>);</span><br><span class="line">        Cookie cookie2 = <span class="keyword">new</span> Cookie(<span class="string">"age"</span>,<span class="string">"18"</span>);</span><br><span class="line">        <span class="comment">// 2.response添加二个，响应</span></span><br><span class="line">        response.addCookie(cookie1);</span><br><span class="line">        response.addCookie(cookie2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2-4-2-Cookie在浏览器的保存时间"><a href="#2-4-2-Cookie在浏览器的保存时间" class="headerlink" title="2.4.2 Cookie在浏览器的保存时间"></a>2.4.2 Cookie在浏览器的保存时间</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>默认的情况下，会话（浏览器）关闭，cookie自动销毁</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>我们可以设置它的存活时间</span><br><span class="line"><span class="code">		cookie.setMaxAge(int seconds);</span></span><br><span class="line"><span class="code">			正数：可以设置浏览器的cookie持久化时间，保存到硬盘，到期后自动销毁</span></span><br><span class="line"><span class="code">			负数：默认值（-1），会话（浏览器）关闭，cookie自动销毁</span></span><br><span class="line"><span class="code">			零：立即删除当前cookie</span></span><br></pre></td></tr></table></figure>



<p><strong>代码演示：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/CookieMaxAge"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookieMaxAge</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建cookie</span></span><br><span class="line">        Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"product"</span>, <span class="string">"xiaomi10"</span>);</span><br><span class="line">        <span class="comment">// 2.设置cookie存活时间</span></span><br><span class="line">        <span class="comment">// cookie.setMaxAge(10);  持久化</span></span><br><span class="line">        cookie.setMaxAge(<span class="number">0</span>);  <span class="comment">// 立即删除</span></span><br><span class="line">        <span class="comment">// 3.响应到浏览器</span></span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2-4-3-Cookie是否可以存储中文？"><a href="#2-4-3-Cookie是否可以存储中文？" class="headerlink" title="2.4.3 Cookie是否可以存储中文？"></a>2.4.3 Cookie是否可以存储中文？</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>在tomcat8版本之前，不支持中文</span><br><span class="line"><span class="code">		URLEncode 编码</span></span><br><span class="line"><span class="code">		URLDecode 解码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>在tomcat8版本之后，支持中文</span><br><span class="line"><span class="code">		Rfc6265规范中，不支持特殊符号（空格、分号、逗号....）</span></span><br></pre></td></tr></table></figure>



<p>代码演示：</p>
<blockquote>
<p>CookieCN</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/CookieCN"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookieCN</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 编码</span></span><br><span class="line">        String value = <span class="string">"小米 1,0"</span>;</span><br><span class="line">        value= URLEncoder.encode(value, <span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.创建cookie</span></span><br><span class="line">        Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"product"</span>, value);</span><br><span class="line">        <span class="comment">// 2.发送到浏览器</span></span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>GetCookie</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/GetCookie"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetCookie</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.从浏览器中获取cookie</span></span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="comment">// 2.遍历输出</span></span><br><span class="line">        <span class="keyword">if</span> (cookies != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">                String name = cookie.getName();</span><br><span class="line">                String value = cookie.getValue();</span><br><span class="line">                <span class="comment">// 解码</span></span><br><span class="line">                value = URLDecoder.decode(value, <span class="string">"utf-8"</span>);</span><br><span class="line">                System.out.println(name + <span class="string">":"</span> + value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2-4-4-Cookie共享数据的范围？"><a href="#2-4-4-Cookie共享数据的范围？" class="headerlink" title="2.4.4 Cookie共享数据的范围？"></a>2.4.4 Cookie共享数据的范围？</h4><p><strong>① 在一个tomca服务器中，部署了多个web项目，那么这些web项目的Cookie能否共享？</strong></p>
<p><img data-src="/img/cookie%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE%E8%8C%83%E5%9B%B4.png" alt="cookie共享数据范围"></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>默认情况下不行，因为我们在设置cookie时有一个默认携带路径（当前servlet的父路径）</span><br><span class="line"><span class="code">		设置：http://localhost:8080/cookie/SetCookie</span></span><br><span class="line"><span class="code">		获取：http://localhost:8080/cookie/xxxxxx</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>可以手动指定cookie的携带路径</span><br><span class="line"><span class="code">	刚才案例的默认值：</span></span><br><span class="line"><span class="code">		cookie.setPath("/cookie"); 相当于：http://localhost:8080/cookie</span></span><br><span class="line"><span class="code">	如果你想让二个项目共享cookie：</span></span><br><span class="line"><span class="code">		cookie.setPath("/"); 相当于：http://localhost:8080/</span></span><br><span class="line"><span class="code">			http://localhost:8080/cookie</span></span><br><span class="line"><span class="code">			http://localhost:8080/response</span></span><br><span class="line"><span class="code">			</span></span><br><span class="line"><span class="bullet">* </span>cookie覆盖要求：路径+名称完全一致，就进行覆盖...</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>在默认的情况下，是否能获取/aa/SetCookie</span><br><span class="line"><span class="code">	设置cookie：http://localhost:8080/cookie/aa/SetCookie</span></span><br><span class="line"><span class="code">	获取cookie：http://localhost:8080/cookie/bb/GetCookie</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="code">	解决方案：</span></span><br><span class="line"><span class="code">			cookie.setPath("/cookie");</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>servlet设置多级路径</p>
</blockquote>
<p><img data-src="/img/Servlet%E8%AE%BE%E7%BD%AE%E5%A4%9A%E7%BA%A7%E8%B7%AF%E5%BE%84.png" alt="Servlet设置多级路径"></p>
<p><strong>② 不同tomcat服务器之间Cookie能否共享？</strong></p>
<ul>
<li>默认情况下不能…..</li>
</ul>
<ul>
<li><p>可以指定同一个一级域名下，多台服务器共享 （项目）</p>
<ul>
<li><code>cookie.setDomain(&quot;.jd.com&quot;);</code></li>
</ul>
</li>
</ul>
<p><img data-src="/img/%E4%B8%8D%E5%90%8Ctomcat%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%8B%E9%97%B4%E5%85%B1%E4%BA%ABCookie.png" alt="不同tomcat服务器之间共享Cookie"></p>
<h3 id="2-5-Cookie特点"><a href="#2-5-Cookie特点" class="headerlink" title="2.5 Cookie特点"></a>2.5 Cookie特点</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>cookie存储数据在客户端（浏览器）</span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>cookie只能存储字符串</span><br><span class="line"></span><br><span class="line"><span class="bullet">3. </span>cookie单个大小不能超过4KB</span><br><span class="line"></span><br><span class="line"><span class="bullet">4. </span>cookie在同一域名下数量不超过50个</span><br><span class="line"></span><br><span class="line"><span class="bullet">5. </span>cookie存储数据不太安全</span><br></pre></td></tr></table></figure>



<h3 id="2-6-Cookie案例——用户上次访问记录"><a href="#2-6-Cookie案例——用户上次访问记录" class="headerlink" title="2.6 Cookie案例——用户上次访问记录"></a>2.6 Cookie案例——用户上次访问记录</h3><p><strong>需求</strong></p>
<ul>
<li><p>访问一个Servlet，如果是第一次访问，则提示：您好，欢迎您的到来。</p>
</li>
<li><p>如果不是第一次访问，则提示：欢迎回来，您上次访问时间为: xxxx。</p>
</li>
</ul>
<p><strong>需求分析：</strong></p>
<p><img data-src="/img/cookie%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E7%94%A8%E6%88%B7%E4%B8%8A%E6%AC%A1%E8%AE%BF%E9%97%AE%E8%AE%B0%E5%BD%95.png" alt="cookie案例——用户上次访问记录"></p>
<p><strong>代码实现</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookieUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 根据指定名称，获取对应的cookie对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Cookie <span class="title">queryByName</span><span class="params">(Cookie[] cookies,String name)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 非空判断</span></span><br><span class="line">        <span class="keyword">if</span> (cookies!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 遍历</span></span><br><span class="line">            <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">                <span class="comment">// 对比名称</span></span><br><span class="line">                <span class="keyword">if</span> (name.equals(cookie.getName())) &#123;</span><br><span class="line">                    <span class="keyword">return</span> cookie;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 没有匹配上，返回null</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/LastTimeServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LastTimeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 设置响应编码</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// i.获取上次访问时间</span></span><br><span class="line">        <span class="comment">// 1.获取指定名称的cookie</span></span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        Cookie cookie = CookieUtils.queryByName(cookies, <span class="string">"last_time"</span>);</span><br><span class="line">        <span class="comment">// 2.判断是否为第一次访问</span></span><br><span class="line">        <span class="keyword">if</span> (cookie == <span class="keyword">null</span>) &#123;</span><br><span class="line">            response.getWriter().write(<span class="string">"您好，欢迎您的到来.."</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String last_time = cookie.getValue();  <span class="comment">// 2020-08-25 12:05:11</span></span><br><span class="line">            <span class="comment">// 解码</span></span><br><span class="line">            last_time = URLDecoder.decode(last_time, <span class="string">"UTF-8"</span>);</span><br><span class="line">            response.getWriter().write(<span class="string">"欢迎回来，"</span> + last_time);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ii.记录本次访问时间</span></span><br><span class="line">        <span class="comment">// 1.获取当前时间</span></span><br><span class="line">        LocalDateTime now = LocalDateTime.now();</span><br><span class="line">        String current_time = now.toString();<span class="comment">// 默认获取 2020-08-25 12:05:11 格式</span></span><br><span class="line">        <span class="comment">// 编码</span></span><br><span class="line">        current_time = URLEncoder.encode(current_time, <span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.设置cookie并指定持久化</span></span><br><span class="line">        cookie = <span class="keyword">new</span> Cookie(<span class="string">"last_time"</span>, current_time);</span><br><span class="line">        cookie.setMaxAge(<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.写入到浏览器</span></span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="三、Session"><a href="#三、Session" class="headerlink" title="三、Session"></a>三、Session</h2><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h3><p><strong>使用Cookie问题</strong></p>
<ol>
<li>最多存储4K字符串</li>
<li>存储数据不太安全</li>
</ol>
<p>session作用：在一次会话的多次请求之间共享数据，将数据<strong>保存到服务器端</strong></p>
<blockquote>
<p>Session是基于Cookie实现的</p>
</blockquote>
<p><img data-src="/img/session.png" alt="session"></p>
<h3 id="3-2-快速入门"><a href="#3-2-快速入门" class="headerlink" title="3.2 快速入门"></a>3.2 快速入门</h3><p>HttpSession也是一个域对象</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>API</span><br><span class="line"><span class="bullet">	1. </span>存储数据</span><br><span class="line"><span class="code">			void setAttribute(String name,Object value)</span></span><br><span class="line"><span class="bullet">	2. </span>获取数据</span><br><span class="line"><span class="code">			Object getAttribute(String name)</span></span><br><span class="line"><span class="bullet">	3. </span>删除数据</span><br><span class="line"><span class="code">			void removeAttribute(String name)</span></span><br></pre></td></tr></table></figure>

<p><strong>技术分析</strong></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>SetSession</span><br><span class="line"><span class="code">	// 1.获取session空间（域对象）</span></span><br><span class="line"><span class="code">		HttpSession session = request.getSession();</span></span><br><span class="line"><span class="code">	// 2.存值</span></span><br><span class="line"><span class="code">		session.setAttribute("product","oppoX20");</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>GetSession</span><br><span class="line"><span class="code">	// 1.获取session空间（域对象）</span></span><br><span class="line"><span class="code">		HttpSession session = request.getSession();</span></span><br><span class="line"><span class="code">	// 2.取值</span></span><br><span class="line"><span class="code">		session.getAttribute("product");</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>SetSession</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/SetSession"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetSession</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取session空间（域对象）</span></span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        <span class="comment">// 2.存值</span></span><br><span class="line">        session.setAttribute(<span class="string">"product"</span>,<span class="string">"oppoX20"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>GetSession</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/GetSession"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetSession</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取session空间（域对象）</span></span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        <span class="comment">// 2.取值</span></span><br><span class="line">        String value = (String) session.getAttribute(<span class="string">"product"</span>);</span><br><span class="line">        System.out.println(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-3-工作原理"><a href="#3-3-工作原理" class="headerlink" title="3.3 工作原理"></a>3.3 工作原理</h3><p>Session基于Cookie技术实现</p>
<p><img data-src="/img/session%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" alt="session工作原理"></p>
<h3 id="3-4-Session细节"><a href="#3-4-Session细节" class="headerlink" title="3.4 Session细节"></a>3.4 Session细节</h3><h4 id="3-4-1-客户端关闭，服务器不关闭"><a href="#3-4-1-客户端关闭，服务器不关闭" class="headerlink" title="3.4.1 客户端关闭，服务器不关闭"></a>3.4.1 客户端关闭，服务器不关闭</h4><p>两次获取的Session数据是否为相同？</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>默认的情况下不相同</span><br><span class="line"><span class="code">	因为session是基于cookie实现的，浏览器关闭，cookie销毁，jsessionId也就没了</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="bullet">* </span>我们可以手动设置jsessionid的这个cookie，存活时间</span><br><span class="line"><span class="code">	我们可以覆盖它默认的操作，这样就可以持久化到浏览器磁盘中...</span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    浏览器关闭，jsessionid不会销毁...</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/ClientClose"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientClose</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取session对象</span></span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        <span class="comment">// 2.存数据</span></span><br><span class="line">        session.setAttribute(<span class="string">"product"</span>, <span class="string">"苹果12"</span>);</span><br><span class="line">        <span class="comment">// 通过session对象，获取jsessionid的值</span></span><br><span class="line">        String sessionId = session.getId();</span><br><span class="line">        <span class="comment">// 3.我们吧服务器默认创建的cookie进行覆盖，指定存活时间</span></span><br><span class="line">        Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"JSESSIONID"</span>, sessionId);</span><br><span class="line">        <span class="comment">// 指定路径</span></span><br><span class="line">        cookie.setPath(<span class="string">"/session"</span>);</span><br><span class="line">        <span class="comment">// 指定存活时间</span></span><br><span class="line">        cookie.setMaxAge(<span class="number">100</span>);</span><br><span class="line">        <span class="comment">// 响应到浏览器</span></span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-4-2-客户端不关闭，服务器关闭"><a href="#3-4-2-客户端不关闭，服务器关闭" class="headerlink" title="3.4.2 客户端不关闭，服务器关闭"></a>3.4.2 客户端不关闭，服务器关闭</h4><p>两次获取的Session数据是否为相同？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* 默认情况下是一样的....</span><br><span class="line">	钝化：我们tomcat服务器在关闭时，将内存的session数据，序列化到磁盘文件</span><br><span class="line">	活化：我们tomcat服务器在重新启动时，将磁盘文件，反序列化到，服务器内存中...</span><br><span class="line">	前提条件，我们存放的对象，必须实现序列化接口...</span><br></pre></td></tr></table></figure>



<h4 id="3-4-3-生命周期"><a href="#3-4-3-生命周期" class="headerlink" title="3.4.3 生命周期"></a>3.4.3 生命周期</h4><blockquote>
<p>session是一个域对象，对于它的使用，需要掌握session的生命周期</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>何时创建</span><br><span class="line"><span class="code">		用户请求携带的jsessionid与服务器不匹配时，创建</span></span><br><span class="line"><span class="code">		</span></span><br><span class="line"><span class="bullet">* </span>何时销毁</span><br><span class="line"><span class="code">		1.用户非活跃状态30分钟，销毁</span></span><br><span class="line"><span class="code">		2.服务器非正常关闭，销毁</span></span><br><span class="line"><span class="code">		3.自杀,session.invalidate(); session.removeAttribute("jsessionid");</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>作用范围</span><br><span class="line"><span class="code">		一次会话，多次请求之间，共享数据</span></span><br></pre></td></tr></table></figure>



<h4 id="3-4-4-URL重写-了解"><a href="#3-4-4-URL重写-了解" class="headerlink" title="3.4.4 URL重写(了解)"></a>3.4.4 URL重写(了解)</h4><p><strong>问题：</strong></p>
<ul>
<li>学习了Session的工作原理后，我们知道Session基于Cookie技术实现；浏览器的Cookie是可以禁用的，一旦禁用了之后，Session就会出现问题了。开发中,一般是不关注用户的Cookie是否禁用的，若用户禁用了Cookie，只能别用网站了。</li>
</ul>
<p><strong>解决方案：</strong></p>
<ul>
<li>若真想处理用户端的Cookie禁用，我们可以使用url重写技术：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/OverrideURL"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OverrideURL</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.获取session</span></span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        <span class="comment">// 2.存数据</span></span><br><span class="line">        session.setAttribute(<span class="string">"product"</span>, <span class="string">"我使用了url重写技术，浏览器禁用了cookie，我也不怕哈哈哈"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.重写url（将jsessionid，写入到地址栏）</span></span><br><span class="line">        String url = <span class="string">"/session/GetSession"</span>;</span><br><span class="line"></span><br><span class="line">        url = response.encodeURL(url);</span><br><span class="line"></span><br><span class="line">        response.getWriter().write(<span class="string">"&lt;a href='"</span>+ url +<span class="string">"'&gt;使用了url重写技术&lt;/a&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-5-Session特点"><a href="#3-5-Session特点" class="headerlink" title="3.5 Session特点"></a>3.5 Session特点</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. session存储数据在服务器</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. session存储类型任意（Object）</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>. session存储大小和数量没有限制（相对于内存）</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>. session存储相对安全</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小贴士：(对于cookie和session的选择)</p>
<ul>
<li><p>cookie：将数据保存在浏览器端，数据相对不安全，而且数据大小是有限制的，建议不太敏感的数据使用它</p>
</li>
<li><p>session：将数据保存在服务器端，数据相对安全，数据的大小要比cookie中数据灵活很多，但是会占用服务器内存，建议敏感且小量数据使用它</p>
</li>
</ul>
</blockquote>
<h2 id="五、域对象总结"><a href="#五、域对象总结" class="headerlink" title="五、域对象总结"></a>五、域对象总结</h2><p><code>request</code>、<code>session</code>、<code>ServletContext</code></p>
<p><img data-src="/img/%E5%9F%9F%E5%AF%B9%E8%B1%A1%E6%80%BB%E7%BB%93.png" alt="域对象总结"></p>
<h3 id="5-1-域对象公共API"><a href="#5-1-域对象公共API" class="headerlink" title="5.1 域对象公共API"></a>5.1 域对象公共API</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>设置数据</span><br><span class="line"><span class="code">		void setAttribute(String name, Object o)</span></span><br><span class="line"><span class="code">		</span></span><br><span class="line"><span class="bullet">2. </span>获取数据</span><br><span class="line"><span class="code">		Object getAttribute(String name)</span></span><br><span class="line"><span class="code">		</span></span><br><span class="line"><span class="bullet">3. </span>删除数据</span><br><span class="line"><span class="code">		void removeAttribute(String name)</span></span><br></pre></td></tr></table></figure>



<h3 id="5-2-生命周期"><a href="#5-2-生命周期" class="headerlink" title="5.2 生命周期"></a>5.2 生命周期</h3><h4 id="5-2-1-ServletContext域对象"><a href="#5-2-1-ServletContext域对象" class="headerlink" title="5.2.1 ServletContext域对象"></a>5.2.1 ServletContext域对象</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>何时创建</span><br><span class="line"><span class="code">		服务器启动，项目加载成功后，创建</span></span><br><span class="line"><span class="code">		</span></span><br><span class="line"><span class="bullet">* </span>何时销毁</span><br><span class="line"><span class="code">		服务器关闭，项目卸载后，销毁</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>作用范围</span><br><span class="line"><span class="code">		整个web项目</span></span><br></pre></td></tr></table></figure>



<h4 id="5-2-2-HttpSession域对象"><a href="#5-2-2-HttpSession域对象" class="headerlink" title="5.2.2 HttpSession域对象"></a>5.2.2 HttpSession域对象</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>何时创建</span><br><span class="line"><span class="code">		用户携带jsessionid与服务器不匹配时</span></span><br><span class="line"><span class="code">		</span></span><br><span class="line"><span class="bullet">* </span>何时销毁</span><br><span class="line"><span class="code">		1.非活跃状态30分钟</span></span><br><span class="line"><span class="code">		2.服务器非正常关闭</span></span><br><span class="line"><span class="code">		3.自杀</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>作用范围</span><br><span class="line"><span class="code">		一次会话，多次请求之间</span></span><br></pre></td></tr></table></figure>



<h4 id="5-2-3-HttpServletRequest"><a href="#5-2-3-HttpServletRequest" class="headerlink" title="5.2.3 HttpServletRequest"></a>5.2.3 HttpServletRequest</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>何时创建</span><br><span class="line"><span class="code">		用户发送请求时</span></span><br><span class="line"><span class="code">		</span></span><br><span class="line"><span class="bullet">* </span>何时销毁</span><br><span class="line"><span class="code">		服务器做出响应后</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>作用范围</span><br><span class="line"><span class="code">		一次请求中，多次转发之间</span></span><br></pre></td></tr></table></figure>



<h3 id="5-3-小结"><a href="#5-3-小结" class="headerlink" title="5.3 小结"></a>5.3 小结</h3><blockquote>
<p>使用方法</p>
</blockquote>
<ul>
<li><p>能用小的不用大的：request&lt;session&lt;servletContext</p>
</li>
<li><p>常用的场景:</p>
<ul>
<li>request：一次查询的结果（servlet转发jsp）</li>
<li>session：存放当前会话的私有数据<ul>
<li>用户登录状态</li>
<li>验证码</li>
<li>购物车（后面会用redis…）</li>
</ul>
</li>
</ul>
</li>
<li><p>servletContext:若需要所有的servlet都能访问到,才使用这个域对象.</p>
</li>
</ul>
<h2 id="六、Session案例"><a href="#六、Session案例" class="headerlink" title="六、Session案例"></a>六、Session案例</h2><h3 id="6-1-用户登录-验证码"><a href="#6-1-用户登录-验证码" class="headerlink" title="6.1 用户登录(验证码)"></a>6.1 用户登录(验证码)</h3><p><strong>需求：</strong></p>
<ul>
<li>用户访问带有验证码的登录页面，输入用户名，密码以及验证码实现登录功能。</li>
</ul>
<h4 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h4><p><img data-src="/img/session%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95(%E9%AA%8C%E8%AF%81%E7%A0%81).png" alt="session案例——用户登录"></p>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p><strong>① CheckCodeServlet(绘制验证码，存入Session)</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/CheckCodeServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckCodeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">//  创建画布</span></span><br><span class="line">		<span class="keyword">int</span> width = <span class="number">120</span>;</span><br><span class="line">		<span class="keyword">int</span> height = <span class="number">40</span>;</span><br><span class="line">		BufferedImage bufferedImage = <span class="keyword">new</span> BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);</span><br><span class="line">		<span class="comment">//  获得画笔</span></span><br><span class="line">		Graphics g = bufferedImage.getGraphics();</span><br><span class="line">		<span class="comment">//  填充背景颜色</span></span><br><span class="line">		g.setColor(Color.white);</span><br><span class="line">		g.fillRect(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">		<span class="comment">//  绘制边框</span></span><br><span class="line">		g.setColor(Color.red);</span><br><span class="line">		g.drawRect(<span class="number">0</span>, <span class="number">0</span>, width - <span class="number">1</span>, height - <span class="number">1</span>);</span><br><span class="line">		<span class="comment">//  生成随机字符</span></span><br><span class="line">		<span class="comment">//  准备数据</span></span><br><span class="line">		String data = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890"</span>;</span><br><span class="line">		<span class="comment">//  准备随机对象</span></span><br><span class="line">		Random r = <span class="keyword">new</span> Random();</span><br><span class="line">		<span class="comment">//  声明一个变量 保存验证码</span></span><br><span class="line">		String code = <span class="string">""</span>;</span><br><span class="line">		<span class="comment">//  书写4个随机字符</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">			<span class="comment">//  设置字体</span></span><br><span class="line">			g.setFont(<span class="keyword">new</span> Font(<span class="string">"宋体"</span>, Font.BOLD, <span class="number">28</span>));</span><br><span class="line">			<span class="comment">//  设置随机颜色</span></span><br><span class="line">			g.setColor(<span class="keyword">new</span> Color(r.nextInt(<span class="number">255</span>), r.nextInt(<span class="number">255</span>), r.nextInt(<span class="number">255</span>)));</span><br><span class="line"></span><br><span class="line">			String str = data.charAt(r.nextInt(data.length())) + <span class="string">""</span>;</span><br><span class="line">			g.drawString(str, <span class="number">10</span> + i * <span class="number">28</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">			<span class="comment">//  将新的字符 保存到验证码中</span></span><br><span class="line">			code = code + str;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//  绘制干扰线</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">			<span class="comment">//  设置随机颜色</span></span><br><span class="line">			g.setColor(<span class="keyword">new</span> Color(r.nextInt(<span class="number">255</span>), r.nextInt(<span class="number">255</span>), r.nextInt(<span class="number">255</span>)));</span><br><span class="line"></span><br><span class="line">			g.drawLine(r.nextInt(width), r.nextInt(height), r.nextInt(width), r.nextInt(height));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//  将验证码 打印到控制台</span></span><br><span class="line">		System.out.println(code);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//  将验证码放到session中</span></span><br><span class="line">		request.getSession().setAttribute(<span class="string">"code_session"</span>, code);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//  将画布显示在浏览器中</span></span><br><span class="line">		ImageIO.write(bufferedImage, <span class="string">"jpg"</span>, response.getOutputStream());</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		doGet(request, response);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>② index.jsp(登录页)</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;用户登录&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;用户登录&lt;/h1&gt;</span><br><span class="line">        &lt;form action=<span class="string">"/case/LoginServlet"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">            &lt;label for="username"&gt;用户名&lt;/label&gt;&lt;input type="text" id="username" name="username"&gt;&lt;br&gt;</span><br><span class="line">            &lt;label for="password"&gt;密&amp;emsp;码&lt;/label&gt;&lt;input type="password" id="password" name="password"&gt;&lt;br&gt;</span><br><span class="line">            &lt;label for="checkCode"&gt;验证码&lt;/label&gt;&lt;input type="text" id="checkCode" name="checkCode"&gt;</span><br><span class="line">            &lt;img src=<span class="string">"/case/CheckCodeServlet"</span> id=<span class="string">"toggleCheckCode"</span> alt=<span class="string">""</span>&gt;&lt;br&gt;</span><br><span class="line">            &lt;span style=<span class="string">"color: red"</span>&gt;</span><br><span class="line">                &lt;%</span><br><span class="line">                    <span class="comment">//获取错误信息</span></span><br><span class="line">                    String error = (String) request.getAttribute(<span class="string">"error"</span>);</span><br><span class="line">                    <span class="comment">//判断非空</span></span><br><span class="line">                    <span class="keyword">if</span> (error!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="comment">//输出到页面</span></span><br><span class="line">                        out.write(error);</span><br><span class="line">                    &#125;</span><br><span class="line">                %&gt;</span><br><span class="line">            &lt;/span&gt;</span><br><span class="line">            &lt;br&gt;</span><br><span class="line">            &lt;input type=<span class="string">"submit"</span> value=<span class="string">"登录"</span>&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        document.getElementById(<span class="string">"toggleCheckCode"</span>).onclick = function () &#123;</span><br><span class="line">            <span class="keyword">this</span>.src = <span class="string">"/case/CheckCodeServlet?"</span> + <span class="keyword">new</span> Date().getTime();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><strong>③ LoginServlet</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登录逻辑处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/LoginServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//设置编码</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        <span class="comment">// 获取验证码参数</span></span><br><span class="line">        String checkCode = request.getParameter(<span class="string">"checkCode"</span>);</span><br><span class="line">        <span class="comment">//获取Session中存储的验证码</span></span><br><span class="line">        String code_session = (String) request.getSession().getAttribute(<span class="string">"code_session"</span>);</span><br><span class="line">        <span class="comment">//验证验证码是否正确</span></span><br><span class="line">        <span class="keyword">if</span> (!checkCode.equalsIgnoreCase(code_session))&#123;</span><br><span class="line">            <span class="comment">//友情提示信息，验证码错误,存储到request域对象中</span></span><br><span class="line">            request.setAttribute(<span class="string">"error"</span>,<span class="string">"验证码错误"</span>);</span><br><span class="line">            <span class="comment">//转发到index页面</span></span><br><span class="line">            request.getRequestDispatcher(<span class="string">"/index.jsp"</span>).forward(request, response);</span><br><span class="line">            <span class="comment">//结束程序</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//验证码正确，获取用户名，密码</span></span><br><span class="line">        String username = request.getParameter(<span class="string">"username"</span>);</span><br><span class="line">        String password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line">        <span class="comment">//判断验证码密码不正确</span></span><br><span class="line">        <span class="keyword">if</span> (! (<span class="string">"jack"</span>.equals(username) &amp;&amp; <span class="string">"123"</span>.equals(password)))&#123;</span><br><span class="line">            <span class="comment">//友情提示信息，验证码错误,存储到request域对象中</span></span><br><span class="line">            request.setAttribute(<span class="string">"error"</span>,<span class="string">"用户名或密码错误！"</span>);</span><br><span class="line">            <span class="comment">//转发到index页面</span></span><br><span class="line">            request.getRequestDispatcher(<span class="string">"/index.jsp"</span>).forward(request, response);</span><br><span class="line">            <span class="comment">//结束程序</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//全部正确</span></span><br><span class="line">        <span class="comment">//用户名存入Session</span></span><br><span class="line">        request.getSession().setAttribute(<span class="string">"username"</span>,username);</span><br><span class="line">        <span class="comment">//跳转页面</span></span><br><span class="line">        response.sendRedirect(request.getContextPath() + <span class="string">"/goods.jsp"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>④ goods.jsp（商品页）</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;goods&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;商品列表，</span><br><span class="line">    &lt;%</span><br><span class="line">        String user = (String) session.getAttribute(<span class="string">"user"</span>);</span><br><span class="line">        <span class="keyword">if</span> (user != <span class="keyword">null</span>) &#123;</span><br><span class="line">            out.write(<span class="string">"登录人:"</span> + user);</span><br><span class="line">        &#125;</span><br><span class="line">    %&gt;</span><br><span class="line">&lt;/h3&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<h3 id="6-2-商品购物车"><a href="#6-2-商品购物车" class="headerlink" title="6.2 商品购物车"></a>6.2 商品购物车</h3><p><strong>需求：</strong></p>
<ul>
<li>有一个商品页面，可以点击超链接将商品添加到购物车,还有一个超链接,点击它的时候可以查看购物车中商品信息</li>
</ul>
<h4 id="需求分析-1"><a href="#需求分析-1" class="headerlink" title="需求分析"></a>需求分析</h4><p><img data-src="/img/session%E6%A1%88%E4%BE%8B%E2%80%94%E2%80%94%E5%95%86%E5%93%81%E8%B4%AD%E7%89%A9%E8%BD%A6.png" alt="session案例——商品购物车"></p>
<h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><p><strong>① goods.jsp</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;商品页&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;商品列表&lt;/h1&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        String user = (String) session.getAttribute(<span class="string">"user"</span>);</span><br><span class="line">        <span class="keyword">if</span> (user != <span class="keyword">null</span>) &#123;</span><br><span class="line">            out.write(<span class="string">"登录人:"</span> + user);</span><br><span class="line">        &#125;</span><br><span class="line">    %&gt;</span><br><span class="line">    &lt;h3&gt;&lt;a href="/day08_case/cart.jsp"&gt;查看购物车&lt;/a&gt;&lt;/h3&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;小米10 &lt;a href="/case/AddCartList?goods=Mi10"&gt;添加购物车&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;华为P40 &lt;a href="/case/AddCartList?goods=Hw1P40"&gt;添加购物车&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;一加9 &lt;a href="/case/AddCartList?goods=OnePlus9"&gt;添加购物车&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt; vivoX20 &lt;a href="/case/AddCartList?goods=vivoX20"&gt;添加购物车&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><strong>② AddCartServlet</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 购物车逻辑</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/AddCartList"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddCartList</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 处理中文乱码</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">        <span class="comment">//参数</span></span><br><span class="line">        String goods = request.getParameter(<span class="string">"goods"</span>);</span><br><span class="line">        <span class="comment">//响应添加成功</span></span><br><span class="line">        response.getWriter().write(goods + <span class="string">"商品，成功加入购物车..."</span>);</span><br><span class="line">        <span class="comment">//从session中获取购物车</span></span><br><span class="line">        Map&lt;String, Integer&gt; cartMap = (Map&lt;String, Integer&gt;) request.getSession().getAttribute(<span class="string">"cart"</span>);</span><br><span class="line">        <span class="comment">//判断购物车是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (cartMap == <span class="keyword">null</span>)&#123;</span><br><span class="line">            cartMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">            <span class="comment">//为空设置到session</span></span><br><span class="line">            request.getSession().setAttribute(<span class="string">"cart"</span>,cartMap);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//不为空，判断商品是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (cartMap.containsKey(goods))&#123;</span><br><span class="line">            <span class="comment">//商品数量+1</span></span><br><span class="line">            cartMap.put(goods,cartMap.get(goods) + <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//商品不存在</span></span><br><span class="line">            cartMap.put(goods,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 6.提供查看购物车a标签</span></span><br><span class="line">        response.getWriter().write(<span class="string">"&lt;a href='/day08_case/cart.jsp'&gt;查看购物车&lt;/a&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>③ cart.jsp</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.Map"</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        Map&lt;String,Integer&gt; cart = (Map&lt;String, Integer&gt;) request.getSession().getAttribute(<span class="string">"cart"</span>);</span><br><span class="line">        <span class="comment">//判断购物车是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (cart == <span class="keyword">null</span>)&#123;</span><br><span class="line">            out.write(<span class="string">"您还未选购商品，请去商品页选购吧&lt;a href='goods.jsp'&gt;打开商品页&lt;/a&gt;"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 不为空,遍历map集合，输出商品</span></span><br><span class="line">            <span class="keyword">for</span> (String key : cart.keySet()) &#123;</span><br><span class="line">                out.write(<span class="string">"&lt;div&gt;商品："</span> + key + <span class="string">",数量："</span> + cart.get(key) + <span class="string">"&lt;/div&gt;"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    %&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>cookie</tag>
        <tag>session</tag>
        <tag>web域对象</tag>
        <tag>会话技术</tag>
      </tags>
  </entry>
  <entry>
    <title>JSP&amp;EL&amp;JSTL&amp;MVC思想</title>
    <url>/2020/08/27/JSP-EL-JSTL-MVC%E6%80%9D%E6%83%B3/</url>
    <content><![CDATA[<h2 id="一、JSP"><a href="#一、JSP" class="headerlink" title="一、JSP"></a>一、JSP</h2><h3 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h3><p>在很多动态网页中，绝大部分内容都是固定不变的，只有局部内容需要动态产生和改变。 为了弥补 Servlet的缺陷，SUN公司在Servlet的基础上推出了JSP（Java Server Pages）。</p>
<p>JSP是简化Servlet编写的一种技术，它将Java代码和HTML语句混合在同一个文件中编写，页面动态资源 使用java代码，页面静态资源使用html标签。 </p>
<p><strong>简单来说：可以在html标签中嵌套java代码</strong> </p>
<p><strong>作用：简化书写，展示动态页面</strong></p>
<a id="more"></a>

<h3 id="1-2-快速入门"><a href="#1-2-快速入门" class="headerlink" title="1.2 快速入门"></a>1.2 快速入门</h3><p><strong>需求</strong></p>
<ul>
<li>在JSP页面，动态展示当前时间。</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.time.LocalDateTime"</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;</span><br><span class="line">&lt;%</span><br><span class="line">LocalDateTime now = LocalDateTime.now();</span><br><span class="line">out.write(<span class="string">"当前时间："</span> + now);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/h3&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<h3 id="1-3-工作原理"><a href="#1-3-工作原理" class="headerlink" title="1.3 工作原理"></a>1.3 工作原理</h3><blockquote>
<p>JSP的本质就是一个Servlet…</p>
</blockquote>
<p><img data-src="/img/JSP%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" alt="JSP工作原理"></p>
<h3 id="1-4-脚本和注释"><a href="#1-4-脚本和注释" class="headerlink" title="1.4 脚本和注释"></a>1.4 脚本和注释</h3><h4 id="1-4-1-脚本"><a href="#1-4-1-脚本" class="headerlink" title="1.4.1  脚本"></a>1.4.1  脚本</h4><p><strong>JSP通过脚本方式来定义Java代码</strong></p>
<p>三种脚本：</p>
<ul>
<li><code>&lt;% 代码 %&gt;</code>：脚本片段，生成在java文件中service方法中,每次请求的时候都会执行</li>
<li><code>&lt;%! 代码 %&gt;</code>：声明片段，生成在java文件中的成员位置</li>
<li><code>&lt;%= 代码%&gt;</code>：输出脚本片段,相当于 out.print(“代码”)方法，输出到JSP页面</li>
</ul>
<h4 id="1-4-2-注释"><a href="#1-4-2-注释" class="headerlink" title="1.4.2 注释"></a>1.4.2 注释</h4><ul>
<li><p>html注释</p>
<ul>
<li><code>&lt;!-- 注释静态资源 --&gt;</code></li>
</ul>
</li>
<li><p>JSP注释（JSP页面中都可以使用）</p>
<ul>
<li><code>&lt;%-- 注释所有 --%&gt;</code></li>
</ul>
</li>
<li><p>java注释（JSP脚本内使用）</p>
<ul>
<li><code>// 单行注释</code></li>
<li><code>/* 多行注释 */</code></li>
<li><code>/**文档注释 */</code></li>
</ul>
</li>
</ul>
<h5 id="注释的作用范围"><a href="#注释的作用范围" class="headerlink" title="注释的作用范围"></a>注释的作用范围</h5><table>
<thead>
<tr>
<th>注释</th>
<th>JSP源码</th>
<th>Java源码</th>
<th>Html源码</th>
</tr>
</thead>
<tbody><tr>
<td>HTML</td>
<td>可见</td>
<td>可见</td>
<td>可见</td>
</tr>
<tr>
<td>Java</td>
<td>可见</td>
<td>可见</td>
<td>不可见</td>
</tr>
<tr>
<td>JSP</td>
<td>可见</td>
<td>不可见</td>
<td>不可见</td>
</tr>
</tbody></table>
<blockquote>
<p>小贴士</p>
<ul>
<li>注释是给开发者看的，可见的范围越小，安全级别就越高…</li>
</ul>
</blockquote>
<h3 id="1-5-指令"><a href="#1-5-指令" class="headerlink" title="1.5 指令"></a>1.5 指令</h3><p><strong>指令的作用：</strong></p>
<ul>
<li>用于配置JSP页面，导入资源文件</li>
</ul>
<p><strong>格式：</strong></p>
<ul>
<li><code>&lt;%@ 指令名称 属性名1=&quot;属性值1&quot; 属性名2=&quot;属性值2&quot; ...%&gt;</code></li>
</ul>
<p><strong>JSP中的三大指令：</strong></p>
<ul>
<li><code>page</code>：配置JSP页面</li>
<li><code>include</code>：页面包含(静态包含)</li>
<li><code>taglib</code>：导入资源文件</li>
</ul>
<h4 id="1-5-1-page指令"><a href="#1-5-1-page指令" class="headerlink" title="1.5.1 page指令"></a>1.5.1 page指令</h4><p>例如：<code>&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</code></p>
<p>page中的常用属性：</p>
<ul>
<li><code>contentType</code>：就相当于response.setContentType();<ul>
<li>用于设置响应体的类型和MIME类型</li>
</ul>
</li>
<li><code>language</code>：指定jsp模板的编程语言<ul>
<li>属性值非常鸡肋，就是java</li>
</ul>
</li>
<li><code>import</code>：导包，可以单独使用此属性<ul>
<li>例如：&lt;%@ page import=”java.util.*” %&gt;</li>
</ul>
</li>
<li><code>errorPage</code>：当前页面报错后，可以跳转到指定页面<ul>
<li>例如：errorPage=”500.jsp”</li>
</ul>
</li>
<li><code>isErrorPage</code>：当前页面升级为错误处理页面，可以获取exception异常捕获信息<ul>
<li>例如：isErrorPage=”true” (默认是关闭的…值=false)</li>
</ul>
</li>
</ul>
<p>代码演示：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.*"</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> errorPage=<span class="string">"500.jsp"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">    &lt;title&gt;demo2&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h3&gt;page指令&lt;/h3&gt;</span><br><span class="line">        &lt;%</span><br><span class="line">            Date date = <span class="keyword">new</span> Date();</span><br><span class="line">            ArrayList&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">int</span> a = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        %&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><strong>发生错误跳转到500.jsp</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> isErrorPage=<span class="string">"true"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;500&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;服务器繁忙，请稍后重试&lt;/h3&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            try&#123;</span></span><br><span class="line"><span class="comment">            &#125;catch(Execption e)&#123;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        System.out.println(exception.getMessage());</span><br><span class="line">    %&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小贴士：</p>
<ul>
<li>当指定当前jsp页面为错误页面时，就会产生一个jsp的内置对象，exception异常对象…</li>
</ul>
</blockquote>
<h4 id="1-5-2-include指令"><a href="#1-5-2-include指令" class="headerlink" title="1.5.2 include指令"></a>1.5.2 include指令</h4><p>include指令表示包含(静态包含)。</p>
<p>语法：<code>&lt;%@include file=&quot;被包含的页面&quot; %&gt;</code></p>
<p><img data-src="/img/imclude%E6%8C%87%E4%BB%A4.png" alt="imclude指令"></p>
<p>代码示例：</p>
<ul>
<li><strong>herder.jsp</strong></li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;header&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h3&gt;头部&lt;/h3&gt;</span><br><span class="line">    &lt;div&gt;logo&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;banner&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>主页面</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;demo3&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%<span class="meta">@include</span> file=<span class="string">"header.jsp"</span>%&gt;</span><br><span class="line">    &lt;h3&gt;include指令，页面（静态）包含&lt;/h3&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<h4 id="1-5-3-taglib指令"><a href="#1-5-3-taglib指令" class="headerlink" title="1.5.3 taglib指令"></a>1.5.3 taglib指令</h4><p>用于导入apache提供l标签库</p>
<p>语法：导入jstl标签库</p>
<ul>
<li><code>&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</code></li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">![动态包含和静态包含的区别](C:\Users\Sunmoon\Desktop\就业班\笔记\JavaWeb\img\动态包含和静态包含的区别.png)&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;demo4&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;c:if test="false"&gt;内容&lt;/c:if&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<h4 id="1-5-4-指令小结"><a href="#1-5-4-指令小结" class="headerlink" title="1.5.4 指令小结"></a>1.5.4 指令小结</h4><ul>
<li><p>page指令</p>
<ul>
<li>contentType：指定响应体类型和MIME类型 </li>
<li>language：仅支持java语言</li>
<li>import：导入jar包</li>
</ul>
</li>
<li><p>include指令</p>
<ul>
<li>用于指定静态包含页面资源</li>
</ul>
</li>
<li><p>taglib指令</p>
<ul>
<li>用于导入标签库</li>
</ul>
</li>
</ul>
<h3 id="1-6-内置对象"><a href="#1-6-内置对象" class="headerlink" title="1.6 内置对象"></a>1.6 内置对象</h3><p>作用：在JSP页面中不需要获取和创建， 可以直接使用的对象。</p>
<p>JSP中一共有9个内置对象。</p>
<table>
<thead>
<tr>
<th>变量名</th>
<th>真实类型</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>pageContext</td>
<td>PageContext</td>
<td>当前页面中共享数据</td>
</tr>
<tr>
<td>request</td>
<td>HttpServletRequest</td>
<td>一次请求中共享数据</td>
</tr>
<tr>
<td>session</td>
<td>HttpSession</td>
<td>一次会话中共享数据</td>
</tr>
<tr>
<td>application</td>
<td>ServletContext</td>
<td>整个web应用共享数据</td>
</tr>
<tr>
<td>response</td>
<td>HttpServletResponse</td>
<td>响应对象</td>
</tr>
<tr>
<td>page</td>
<td>Object</td>
<td>当前页面(servlet)对象</td>
</tr>
<tr>
<td>out</td>
<td>JSPWriter</td>
<td>输出对象</td>
</tr>
<tr>
<td>config</td>
<td>ServletConfig</td>
<td>servlet配置对象</td>
</tr>
<tr>
<td>exception</td>
<td>Throwable</td>
<td>异常对象【默认关闭】</td>
</tr>
</tbody></table>
<p>常用：</p>
<ul>
<li>pageContext<ul>
<li>当前页面共享数据，域对象</li>
<li>可以获取其他八个内置对象</li>
</ul>
</li>
<li>request<ul>
<li>接收请求</li>
<li>一次请求中，共享数据</li>
</ul>
</li>
<li>response<ul>
<li>响应结果</li>
</ul>
</li>
<li>out<ul>
<li>jsp页面特有的字符输出对象</li>
</ul>
</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;demo5&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;jsp内置对象&lt;/h3&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        <span class="comment">// pageContext域对象</span></span><br><span class="line">        pageContext.setAttribute(<span class="string">"username"</span>, <span class="string">"lucy"</span>);</span><br><span class="line">        <span class="comment">// pageContext获取其他八个内置对象</span></span><br><span class="line">    %&gt;</span><br><span class="line">    &lt;%=pageContext.getAttribute(<span class="string">"username"</span>)%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<h3 id="1-7-动作标签"><a href="#1-7-动作标签" class="headerlink" title="1.7 动作标签"></a>1.7 动作标签</h3><p>作用：简化JSP页面java代码</p>
<p>常用：</p>
<ul>
<li><code>&lt;jsp:include&gt;</code>：页面包含（动态）<ul>
<li>request.getRequestDispatcher(“footer”).include(request, response);</li>
</ul>
</li>
<li><code>&lt;jsp:forward&gt;</code>：请求转发（页面跳转）<ul>
<li>request.getRequestDispatcher(“b.jsp”).forward(request, response);</li>
</ul>
</li>
<li><code>&lt;jsp:param&gt;</code>：参数传递</li>
</ul>
<h4 id="1-7-1-动态包含"><a href="#1-7-1-动态包含" class="headerlink" title="1.7.1 动态包含"></a>1.7.1 动态包含</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;demo6&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h3&gt;jsp的include标签，页面（动态）包含&lt;/h3&gt;</span><br><span class="line">    &lt;jsp:include page="footer.jsp"&gt;&lt;/jsp:include&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;footer&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h3&gt;尾部&lt;/h3&gt;</span><br><span class="line">    &lt;div&gt;友情链接&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;公司版权&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<h5 id="动态包含和静态包含的区别"><a href="#动态包含和静态包含的区别" class="headerlink" title="动态包含和静态包含的区别"></a>动态包含和静态包含的区别</h5><p><img data-src="/img/%E5%8A%A8%E6%80%81%E5%8C%85%E5%90%AB%E5%92%8C%E9%9D%99%E6%80%81%E5%8C%85%E5%90%AB%E7%9A%84%E5%8C%BA%E5%88%AB.png" alt="动态包含和静态包含的区别"></p>
<blockquote>
<p>特点：在开发中jsp页面使用静态包含，性能好</p>
<p>注意：使用静态包含，多个jsp页面变量不能重名…</p>
</blockquote>
<h4 id="1-7-2-请求转发"><a href="#1-7-2-请求转发" class="headerlink" title="1.7.2 请求转发"></a>1.7.2 请求转发</h4><p><strong>a.jsp</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;a&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">    request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        System.out.println(<span class="string">"a.jsp执行了..."</span>);</span><br><span class="line">    <span class="comment">// 请求转发</span></span><br><span class="line">    <span class="comment">// request.getRequestDispatcher("b.jsp").forward(request, response);</span></span><br><span class="line">    %&gt;</span><br><span class="line">    &lt;jsp:forward page=<span class="string">"b.jsp"</span>&gt;</span><br><span class="line">        &lt;jsp:param name="name" value="呵呵"&gt;&lt;/jsp:param&gt;</span><br><span class="line">        &lt;jsp:param name="age" value="18"&gt;&lt;/jsp:param&gt;</span><br><span class="line">    &lt;/jsp:forward&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><strong>b.jsp</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;b&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">    System.out.println(<span class="string">"b.jsp执行了..."</span>);</span><br><span class="line">    System.out.println(request.getParameter(<span class="string">"name"</span>));</span><br><span class="line">    System.out.println(request.getParameter(<span class="string">"age"</span>));</span><br><span class="line">    %&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：<code>jsp:forward</code>内 不允许出现注释，而且传递的<code>jsp:param</code>编码应该在，a.jsp 处理</p>
</blockquote>
<h2 id="二、MVC模式"><a href="#二、MVC模式" class="headerlink" title="二、MVC模式"></a>二、MVC模式</h2><h3 id="2-1-JSP发展史"><a href="#2-1-JSP发展史" class="headerlink" title="2.1 JSP发展史"></a>2.1 JSP发展史</h3><ul>
<li>早期只有servlet，只能使用response输出html标签，非常麻烦。</li>
</ul>
<p><img data-src="/img/jsp%E5%8F%91%E5%B1%95%E5%8F%B21.png" alt="jsp发展史1"></p>
<ul>
<li>后来有了JSP，简化了servlet开发；如果过度使用JSP，在JSP页面中写了大量的java代码和html标签，造成难于维护，难于分工协作的场景。</li>
</ul>
<p><img data-src="/img/jsp%E5%8F%91%E5%B1%95%E5%8F%B22.png" alt="jsp发展史2"></p>
<ul>
<li>再后来为了弥补过度使用jsp的问题，我们使用servlet+jsp这套组合拳，利于分工协作。</li>
</ul>
<p><img data-src="/img/jsp%E5%8F%91%E5%B1%95%E5%8F%B23.png" alt="jsp发展史3"></p>
<h3 id="2-2-MVC介绍"><a href="#2-2-MVC介绍" class="headerlink" title="2.2 MVC介绍"></a>2.2 MVC介绍</h3><p><strong>MVC设计模式： Model-View-Controller简写。</strong></p>
<ul>
<li><p>MVC是软件工程中的一种软件架构模式，它是一种分离业务逻辑与显示界面的设计方法。</p>
<ul>
<li>M：model（模型）<ul>
<li>JavaBean（普通java类）<ul>
<li>处理业务逻辑</li>
<li>封装实体</li>
</ul>
</li>
</ul>
</li>
<li>V：view（视图）<ul>
<li>Jsp：展示数据（动态资源）</li>
</ul>
</li>
<li>C：controller（控制器）<ul>
<li>Servlet<ul>
<li>接收请求</li>
<li>调用模型</li>
<li>转发视图</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>优缺点：</strong></p>
<ul>
<li>优点：降低耦合性，方便维护和拓展，利于分工协作</li>
<li>缺点：使得项目架构变得复杂，对开发人员要求高</li>
</ul>
<p><img data-src="/img/MVC.png" alt="MVC"></p>
<h2 id="三、EL表达式"><a href="#三、EL表达式" class="headerlink" title="三、EL表达式"></a>三、EL表达式</h2><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h3><p>表达式语言（Expression Language）</p>
<p><strong>作用</strong>：主要用来代替jsp中脚本的功能，简化对java代码的操作。 </p>
<p><strong>语法</strong>：${表达式}</p>
<h3 id="3-2-使用"><a href="#3-2-使用" class="headerlink" title="3.2 使用"></a>3.2 使用</h3><h4 id="3-2-1-获取值"><a href="#3-2-1-获取值" class="headerlink" title="3.2.1 获取值"></a>3.2.1 获取值</h4><blockquote>
<p>EL表达式：只能从域对象（4个域）中获取数据</p>
</blockquote>
<p><strong>EL表达式语法：</strong></p>
<ul>
<li><p>标准语法</p>
<ul>
<li><code>${pageScope.键名}</code> ：从page域中获取指定键名对应的值</li>
<li><code>${requestScope.键名}</code>：从request域中获取指定键名对应的值</li>
<li><code>${sessionScope.键名}</code>：从session域中获取指定键名对应的值</li>
<li><code>${applicationScope.键名}</code>：从ServletContext域中获取指定键名对应的值</li>
</ul>
</li>
<li><p>简化语法</p>
<ul>
<li><code>${键名}</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>小贴士：</p>
<ul>
<li><p>使用EL表达式的简化语法，将从最小的域中开始匹配键名，匹配成功后直接返回数据</p>
</li>
<li><p>注意：使用这种方式，尽量避免四大域的键名重复，否则匹配到的将是最小域中的值…</p>
</li>
</ul>
</blockquote>
<p>代码演示：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;demo1&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;EL表达式只能从域对象中获取数据...&lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">// 模拟servlet，向四个域存值</span></span><br><span class="line">    pageContext.setAttribute(<span class="string">"username"</span>, <span class="string">"苍老师"</span>); <span class="comment">// 仅jsp中存在...</span></span><br><span class="line">    pageContext.setAttribute(<span class="string">"age"</span>, <span class="number">22</span>);</span><br><span class="line">    request.setAttribute(<span class="string">"age"</span>, <span class="number">18</span>);</span><br><span class="line">    session.setAttribute(<span class="string">"sex"</span>, <span class="string">"女"</span>);</span><br><span class="line">    application.setAttribute(<span class="string">"address"</span>, <span class="string">"日本"</span>);</span><br><span class="line">%&gt;</span><br><span class="line">    &lt;h3&gt;el标准语法&lt;/h3&gt;</span><br><span class="line">    $&#123;pageScope.username&#125; &lt;br&gt; &lt;%--EL底层进行<span class="keyword">null</span>值处理..--%&gt;</span><br><span class="line">    $&#123;requestScope.age&#125; &lt;br&gt;</span><br><span class="line">    $&#123;sessionScope.sex&#125; &lt;br&gt;</span><br><span class="line">    $&#123;applicationScope.address&#125; &lt;br&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h3&gt;el简单语法&lt;/h3&gt;</span><br><span class="line">    $&#123;username&#125; &lt;br&gt;</span><br><span class="line">    $&#123;age&#125;&lt;br&gt;</span><br><span class="line">    $&#123;sex&#125;&lt;br&gt;</span><br><span class="line">    $&#123;address&#125; &lt;br&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<h4 id="3-2-2-执行运算"><a href="#3-2-2-执行运算" class="headerlink" title="3.2.2 执行运算"></a>3.2.2 执行运算</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>算数运算符</span><br><span class="line"><span class="code">		语法： + - * /(div) %(mod)</span></span><br><span class="line"><span class="code">		</span></span><br><span class="line"><span class="bullet">* </span>比较运算符</span><br><span class="line"><span class="code">		语法：&gt; &lt; &gt;= &lt;= ==(eq) !=(ne)</span></span><br><span class="line"><span class="code">		</span></span><br><span class="line"><span class="bullet">* </span>逻辑运算符</span><br><span class="line"><span class="code">		语法：&amp;&amp;(and) ||(or) !(not)</span></span><br><span class="line"><span class="code">		</span></span><br><span class="line"><span class="bullet">* </span>三元运算符</span><br><span class="line"><span class="code">		语法：$&#123;条件表达式？为真:为假&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>空运算符</span><br><span class="line"> 		语法：$&#123;not empty 对象&#125;</span><br><span class="line"> 		功能：</span><br><span class="line"> 			可以判断字符串和对象是否为空</span><br><span class="line"> 			可以判断一个集合的长度是否为0</span><br></pre></td></tr></table></figure>



<p>空运算符演示：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"com.itheima.domain.User"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.List"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.ArrayList"</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;demo3&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;空运算符&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    Integer a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    Integer b = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    request.setAttribute(<span class="string">"a"</span>, a);</span><br><span class="line">    request.setAttribute(<span class="string">"b"</span>, b);</span><br><span class="line"></span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    request.setAttribute(<span class="string">"user"</span>, user);</span><br><span class="line"></span><br><span class="line">    List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    list.add(<span class="string">"哈哈"</span>);</span><br><span class="line">    request.setAttribute(<span class="string">"list"</span>, list);</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">    $&#123;a&gt;b?<span class="string">'哈哈a大'</span>:<span class="string">'呵呵b大'</span>&#125;</span><br><span class="line"></span><br><span class="line">    &lt;h3&gt;非空判断&lt;/h3&gt;</span><br><span class="line">    $&#123;not empty user&#125; &lt;br&gt; &lt;%-- <span class="keyword">if</span>(user != <span class="keyword">null</span>)&#123;xxx&#125; --%&gt;</span><br><span class="line">    $&#123;not empty list&#125; &lt;br&gt; &lt;%-- <span class="keyword">if</span>(list !=<span class="keyword">null</span> &amp;&amp; list.size() &gt; <span class="number">0</span> )&#123;xxx&#125; --%&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h3&gt;空值判断&lt;/h3&gt;</span><br><span class="line">    $&#123;empty user&#125; &lt;br&gt;&lt;%-- <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;xxx&#125; --%&gt;</span><br><span class="line">    $&#123;empty list&#125; &lt;br&gt;&lt;%-- <span class="keyword">if</span>(list ==<span class="keyword">null</span> || list.size() &lt; <span class="number">1</span> )&#123;xxx&#125; --%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<h4 id="3-2-3-隐式对象"><a href="#3-2-3-隐式对象" class="headerlink" title="3.2.3 隐式对象"></a>3.2.3 隐式对象</h4><p>el表达式中有11个隐式对象</p>
<p>常用</p>
<ul>
<li>pageContext</li>
<li>他也是jsp的九大内置对象之一，可以获得其他八个内置对象</li>
</ul>
<blockquote>
<p>使用pageContext动态的获取项目的网络地址</p>
<ul>
<li>${pageContext.request.contextPath}</li>
</ul>
</blockquote>
<h4 id="3-2-4-EL扩展"><a href="#3-2-4-EL扩展" class="headerlink" title="3.2.4 EL扩展"></a>3.2.4 EL扩展</h4><p>JSP在2.5之后，默认支持el表达式</p>
<ul>
<li>如果想要在2.5版本之后忽略EL表达式<ul>
<li>忽略当前jsp页面中所有的el表达式<ul>
<li>设置jsp的page指令中：<code>isELIgnored=&quot;true&quot;</code> (属性)</li>
</ul>
</li>
<li>忽略单个el表达式<ul>
<li><code>\${表达式}</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> isELIgnored=<span class="string">"false"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;demo4&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">\$&#123;pageContext.request.contextPath&#125; &lt;br&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 我们在es6中讲过模板字符串</span></span><br><span class="line">    let a = <span class="number">10</span>;</span><br><span class="line">    let str = `哈哈，您购买了\$&#123;a&#125;件商品.....`</span><br><span class="line">    document.write(str)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<h2 id="四、JSTL"><a href="#四、JSTL" class="headerlink" title="四、JSTL"></a>四、JSTL</h2><h3 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h3><p>JSP 标准标签库（Jsp Standard Tag Library），是由Apache组织提供的开源的jsp标签库</p>
<p>作用：替换和简化jsp页面中java代码的编写</p>
<p>JSTL标准标签库有5个子库，但随着发展，目前常使用的是它的核心库</p>
<table>
<thead>
<tr>
<th><strong>标签库</strong></th>
<th><strong>标签库的URI</strong></th>
<th><strong>前缀</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>Core</strong></td>
<td><a href="http://java.sun.com/jsp/jstl/core" target="_blank" rel="noopener">http://java.sun.com/jsp/jstl/core</a></td>
<td>c</td>
</tr>
<tr>
<td>国际化(过时)</td>
<td><a href="http://java.sun.com/jsp/jstl/fmt" target="_blank" rel="noopener">http://java.sun.com/jsp/jstl/fmt</a></td>
<td>fmt</td>
</tr>
<tr>
<td>SQL(过时)</td>
<td><a href="http://java.sun.com/jsp/jstl/sql" target="_blank" rel="noopener">http://java.sun.com/jsp/jstl/sql</a></td>
<td>sql</td>
</tr>
<tr>
<td>XML(过时)</td>
<td><a href="http://java.sun.com/jsp/jstl/xml" target="_blank" rel="noopener">http://java.sun.com/jsp/jstl/xml</a></td>
<td>x</td>
</tr>
<tr>
<td>Functions(几乎不用)</td>
<td><a href="http://java.sun.com/jsp/jstl/functions" target="_blank" rel="noopener">http://java.sun.com/jsp/jstl/functions</a></td>
<td>fn</td>
</tr>
</tbody></table>
<h3 id="4-2-Core标签的使用"><a href="#4-2-Core标签的使用" class="headerlink" title="4.2 Core标签的使用"></a>4.2 Core标签的使用</h3><blockquote>
<p>JSTL属于第三方jsr包,在使用之前需要先导入jsr包</p>
</blockquote>
<p><strong>① 导入jar包</strong></p>
<p><strong>② 在jsp页面引入JSTL标签库</strong></p>
<ul>
<li><code>&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</code></li>
</ul>
<blockquote>
<p>在page指令下引入</p>
</blockquote>
<p><strong>③ 使用</strong></p>
<h4 id="4-2-1-常用标签"><a href="#4-2-1-常用标签" class="headerlink" title="4.2.1 常用标签"></a>4.2.1 常用标签</h4><h5 id="①-c-if-标签"><a href="#①-c-if-标签" class="headerlink" title="① c:if 标签"></a>① c:if 标签</h5><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>相当于java中: if(表达式内容)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>语法：</span><br><span class="line"><span class="code">	&lt;c:if test="表达式内容"&gt;&lt;/c:if&gt;</span></span><br><span class="line"><span class="code">		jstl标签库通常结合el一起使用，完成动态判断功能</span></span><br><span class="line"><span class="code">	注意：c:if标签没有else功能，想要实现取反的效果，需要重写c:if标签，条件进行取反...</span></span><br></pre></td></tr></table></figure>

<p>使用演示：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"com.itheima.domain.User"</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;demo1&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;jstl的if标签&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(<span class="string">"lucy"</span>);</span><br><span class="line">    session.setAttribute(<span class="string">"user"</span>, <span class="keyword">null</span>);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:if test="$&#123;not empty user&#125;"&gt;欢迎您：$&#123;user.username&#125;&lt;/c:if&gt;</span><br><span class="line">&lt;c:if test="$&#123;empty user&#125;"&gt;登录 |注册...&lt;/c:if&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<h5 id="②-c-forEach-标签"><a href="#②-c-forEach-标签" class="headerlink" title="② c:forEach 标签"></a>② c:forEach 标签</h5><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>普通for</span><br><span class="line"><span class="code">	java语法：</span></span><br><span class="line"><span class="code">		for(int i=1;i&lt;=5;i++)&#123;</span></span><br><span class="line"><span class="code">			i</span></span><br><span class="line"><span class="code">		&#125;</span></span><br><span class="line"><span class="code">	jstl语法：</span></span><br><span class="line"><span class="code">		&lt;c:forEach begin="1" end="5" step="1" var="i"&gt;</span></span><br><span class="line"><span class="code">			$&#123;i&#125;</span></span><br><span class="line"><span class="code">		&lt;/c:forEach&gt;</span></span><br><span class="line"><span class="code">			begin：起始值</span></span><br><span class="line"><span class="code">			end：结束值</span></span><br><span class="line"><span class="code">			step：步长</span></span><br><span class="line"><span class="code">			var：当前遍历的临时变量名</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>增强for</span><br><span class="line"><span class="code">	java语法：</span></span><br><span class="line"><span class="code">		for(User user : list)&#123;</span></span><br><span class="line"><span class="code">			user</span></span><br><span class="line"><span class="code">		&#125;</span></span><br><span class="line"><span class="code">	jstl语法：</span></span><br><span class="line"><span class="code">		&lt;c:forEach items="$&#123;list&#125;" var="user" varStatus="vs"&gt;</span></span><br><span class="line"><span class="code">			$&#123;user&#125;</span></span><br><span class="line"><span class="code">		&lt;/c:forEach&gt;</span></span><br><span class="line"><span class="code">			items：需要遍历的集合</span></span><br><span class="line"><span class="code">			var：当前遍历的临时变量名</span></span><br><span class="line"><span class="code">			varStatus：当前遍历元素的状态</span></span><br><span class="line"><span class="code">				index：索引</span></span><br><span class="line"><span class="code">				count：计数器</span></span><br></pre></td></tr></table></figure>

<p>使用演示</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.List"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"com.itheima.domain.User"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.ArrayList"</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;demo2&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;普通for循环&lt;/h3&gt;</span><br><span class="line">&lt;%--</span><br><span class="line">    jstl就使用pageContext这个域对象了...</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;c:forEach begin=<span class="string">"1"</span> end=<span class="string">"5"</span> step=<span class="string">"1"</span> <span class="keyword">var</span>=<span class="string">"i"</span>&gt;</span><br><span class="line">    &lt;div&gt;$&#123;i&#125;&lt;/div&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;h3&gt;增强for循环&lt;/h3&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="keyword">new</span> User(<span class="string">"王昭君"</span>, <span class="number">18</span>, <span class="string">"峡谷"</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> User(<span class="string">"电耗子"</span>, <span class="number">22</span>, <span class="string">"祖安"</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> User(<span class="string">"李白"</span>, <span class="number">39</span>, <span class="string">"大唐"</span>));</span><br><span class="line"></span><br><span class="line">    request.setAttribute(<span class="string">"list"</span>, list);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:forEach items=<span class="string">"$&#123;list&#125;"</span> <span class="keyword">var</span>=<span class="string">"user"</span> varStatus=<span class="string">"vs"</span>&gt;</span><br><span class="line">    &lt;div&gt;$&#123;user.username&#125; | 索引：$&#123;vs.index&#125; | 计数器： $&#123;vs.count&#125;&lt;/div&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>切记，在jsp当中使用jstl标签，务必先引入 core核心标签库</p>
</blockquote>
<h2 id="五、三层架构"><a href="#五、三层架构" class="headerlink" title="五、三层架构"></a>五、三层架构</h2><h3 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h3><p>通常意义上的三层架构就是将整个业务应用划分为：表示层、业务逻辑层、数据访问层。</p>
<p>区分层次的目的：为了<strong>高内聚低耦合</strong>的思想</p>
<blockquote>
<p>表示层：又称为 web层，与浏览器（用户）进行数据交互的。</p>
<p>业务逻辑层：又称为service层，用于处理业务功能的。 </p>
<p>数据访问层：又称为dao层，与数据库进行数据交互的</p>
</blockquote>
<p><img data-src="/img/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84.png" alt="三层架构"></p>
<p><strong>包命名规则：</strong></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>com.sun 公司域名倒写</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>com.sun.dao 持久层</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>com.sun.service 业务层</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>ccom.sun.web 表示层</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>com.sun.domain 实体（JavaBean）</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>com.sun.util 工具包</span><br></pre></td></tr></table></figure>



<h2 id="六、用户信息列表展示"><a href="#六、用户信息列表展示" class="headerlink" title="六、用户信息列表展示"></a>六、用户信息列表展示</h2><p>使用三层架构开发代码，完成用户显示列表功能</p>
<h3 id="6-1-分析"><a href="#6-1-分析" class="headerlink" title="6.1 分析"></a>6.1 分析</h3><p><img data-src="/img/%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%E5%88%97%E8%A1%A8%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90.png" alt="用户信息列表案例分析"></p>
<h3 id="6-2-工程结构"><a href="#6-2-工程结构" class="headerlink" title="6.2 工程结构"></a>6.2 工程结构</h3><p><img data-src="/img/%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%E5%88%97%E8%A1%A8%E6%A1%88%E4%BE%8B%E7%BB%93%E6%9E%84.png" alt="用户信息列表案例结构"></p>
<h3 id="6-3-代码实现"><a href="#6-3-代码实现" class="headerlink" title="6.3 代码实现"></a>6.3 代码实现</h3><h4 id="User实体类"><a href="#User实体类" class="headerlink" title="User实体类"></a>User实体类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> String qq;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="comment">//构造方法、set、get方法略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;查询用户信息&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1 style=<span class="string">"text-align: center;margin-top: 100px"</span> &gt;</span><br><span class="line">            &lt;a href="$&#123;pageContext.request.contextPath&#125;/FindAllServlet"&gt;查询用户列表&lt;/a&gt;</span><br><span class="line">        &lt;/h1&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h4 id="FindAllServlet"><a href="#FindAllServlet" class="headerlink" title="FindAllServlet"></a>FindAllServlet</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/FindAllServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FindAllServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//接收参数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用service查询</span></span><br><span class="line">        UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        <span class="comment">//调用方法查询</span></span><br><span class="line">        List&lt;User&gt; userList = userService.findAll();</span><br><span class="line">        <span class="comment">// 存入request域中</span></span><br><span class="line">        request.setAttribute(<span class="string">"userList"</span>, userList);</span><br><span class="line">        <span class="comment">//转发到list.jsp</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">"/list.jsp"</span>).forward(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="UserService"><a href="#UserService" class="headerlink" title="UserService"></a>UserService</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户list集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>UserServiceImpl</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="UserDao"><a href="#UserDao" class="headerlink" title="UserDao"></a>UserDao</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>UserDaoImpl</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        list.add(<span class="keyword">new</span> User(<span class="string">"1"</span>, <span class="string">"西施"</span>, <span class="string">"女"</span>, <span class="number">28</span>, <span class="string">"香港"</span>, <span class="string">"7766521"</span>, <span class="string">"7766521@qq.com"</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> User(<span class="string">"2"</span>, <span class="string">"甄姬"</span>, <span class="string">"女"</span>, <span class="number">12</span>, <span class="string">"天津"</span>, <span class="string">"7766541"</span>, <span class="string">"7766541@qq.com"</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> User(<span class="string">"3"</span>, <span class="string">"宋轶"</span>, <span class="string">"女"</span>, <span class="number">33</span>, <span class="string">"大连"</span>, <span class="string">"7726521"</span>, <span class="string">"7726521@qq.com"</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> User(<span class="string">"4"</span>, <span class="string">"蔡文姬"</span>, <span class="string">"女"</span>, <span class="number">19</span>, <span class="string">"釜山"</span>, <span class="string">"7736521"</span>, <span class="string">"7736521@qq.com"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="list-jsp"><a href="#list-jsp" class="headerlink" title="list.jsp"></a>list.jsp</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;list&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        *&#123;</span><br><span class="line">            margin: <span class="number">0</span>;</span><br><span class="line">            padding: <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        table&#123;</span><br><span class="line">            margin: <span class="number">100</span>px auto;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        tr&#123;</span><br><span class="line">            height: <span class="number">50</span>px;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line">        td&#123;</span><br><span class="line">            padding: <span class="number">20</span>px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%--$&#123;userList&#125;--%&gt;</span><br><span class="line">    &lt;table border=<span class="string">"1"</span> align=<span class="string">"center"</span> width=<span class="string">"600px"</span> cellspacing=<span class="string">"0"</span> cellpadding=<span class="string">"0"</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th colspan="7"&gt;&lt;h1&gt;用户信息列表&lt;/h1&gt;&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;ID&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;性别&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;年龄&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;地址&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;QQ&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;Email&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;c:forEach items=<span class="string">"$&#123;requestScope.userList&#125;"</span> <span class="keyword">var</span>=<span class="string">"user"</span>&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;$&#123;user.id&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;user.name&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;user.sex&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;user.age&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;user.address&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;user.qq&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;user.email&#125;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/c:forEach&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JSP</tag>
        <tag>EL表达式</tag>
        <tag>JSTL标签库</tag>
        <tag>MVC设计思想</tag>
        <tag>三层架构</tag>
      </tags>
  </entry>
  <entry>
    <title>Filter&amp;Listener</title>
    <url>/2020/08/28/Filter-Listener/</url>
    <content><![CDATA[<h2 id="一、Filter概述"><a href="#一、Filter概述" class="headerlink" title="一、Filter概述"></a>一、Filter概述</h2><p><strong>生活中的过滤器</strong></p>
<ul>
<li>净水器、空气净化器、地铁安检、山大王</li>
</ul>
<p><strong>web中的过滤器</strong></p>
<ul>
<li>当用户访问服务器资源时，过滤器将请求拦截下来，完成一些通用的操作</li>
</ul>
<p><strong>应用场景</strong></p>
<ul>
<li>如：登录验证、统一编码处理、敏感字符过滤</li>
</ul>
<a id="more"></a>

<p><img data-src="/img/Filter%E6%A6%82%E8%BF%B0.png" alt="Filter概述"></p>
<h2 id="二、Filter快速入门"><a href="#二、Filter快速入门" class="headerlink" title="二、Filter快速入门"></a>二、Filter快速入门</h2><p>目标资源：quick.jsp</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;quick&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;quick.jsp 目标资源&lt;/h3&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        System.out.println(<span class="string">"quick.jsp 目标资源"</span>);</span><br><span class="line">    %&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="①-xml版本"><a href="#①-xml版本" class="headerlink" title="① xml版本"></a>① xml版本</h3><p>定义普通类，实现Fileter接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现拦截的方法...</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletRequest：请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletResponse：响应</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filterChain：过滤器链（放行）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"QuickFilter拦截了请求..."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 放行</span></span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"QuickFilter对响应增强..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置XML</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--filter快速入门--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>QuickFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.itheima.a_quick.QuickFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>QuickFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/quick.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="②-注解版本"><a href="#②-注解版本" class="headerlink" title="② 注解版本"></a>② 注解版本</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @WebFilter(filterName = "QuickFilter",urlPatterns ="/quick.jsp" )</span></span><br><span class="line"><span class="comment">// @WebFilter(urlPatterns ="/quick.jsp" )</span></span><br><span class="line"><span class="comment">// @WebFilter(value ="/quick.jsp" )</span></span><br><span class="line"><span class="meta">@WebFilter</span>(<span class="string">"/quick.jsp"</span> )</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 内容参考xml版本代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="三、Filter工作原理"><a href="#三、Filter工作原理" class="headerlink" title="三、Filter工作原理"></a>三、Filter工作原理</h2><p>图解：</p>
<p><img data-src="/img/Filter%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png" alt="Filter工作流程"></p>
<h2 id="四、Filter使用细节"><a href="#四、Filter使用细节" class="headerlink" title="四、Filter使用细节"></a>四、Filter使用细节</h2><h3 id="4-1-生命周期"><a href="#4-1-生命周期" class="headerlink" title="4.1 生命周期"></a>4.1 生命周期</h3><p>生命周期：指的是一个对象从生（创建）到死（销毁）的一个过程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建时，执行init方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户访问被拦截资源时，执行doFilter方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response,FilterChain chain)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 销毁时，执行destroy方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结：</p>
<ul>
<li>创建：服务器启动时创建filter对象，并优于servlet资源的创建</li>
<li>运行(过滤拦截)：用户每次访问被拦截资源时</li>
<li>销毁：服务器关闭后，销毁filter对象</li>
</ul>
</blockquote>
<p><strong>在执行init()方法执行时，会携带一个FilterConfig过滤器配置对象，可以使用它加载一些配置信息</strong></p>
<p>代码演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    生命周期</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifeFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> FilterConfig filterConfig;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建时，执行</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        FilterConfig：过滤器配置对象</span></span><br><span class="line"><span class="comment">            加载一些配置信息...</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"LifeFilter创建了..."</span>);</span><br><span class="line">        <span class="keyword">this</span>.filterConfig=filterConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拦截时，执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"LifeFilter拦截了..."</span>);</span><br><span class="line"></span><br><span class="line">        String encoding = filterConfig.getInitParameter(<span class="string">"encoding"</span>);</span><br><span class="line">        <span class="comment">// servletRequest.setCharacterEncoding(encoding);</span></span><br><span class="line">        System.out.println(encoding);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 放行</span></span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 销毁时，执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"LifeFilter销毁了..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>xml配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--filter生命周期--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>LifeFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.itheima.b_detail.LifeFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>GBK<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>LifeFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/show.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用注解实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebFilter</span>(value = <span class="string">"/show.jsp"</span>,</span><br><span class="line">           initParams = &#123;<span class="meta">@WebInitParam</span>(name = <span class="string">"encoding"</span>,value = <span class="string">"GBK"</span>)&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifeFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-2-拦截路径"><a href="#4-2-拦截路径" class="headerlink" title="4.2 拦截路径"></a>4.2 拦截路径</h3><p>在开发时，可以指定过滤器的拦截路径来定义拦截目标资源的范围</p>
<p><strong>路径匹配规则：</strong></p>
<ul>
<li><p>精准匹配：配置一个指定（/show.jsp）的拦截资源</p>
</li>
<li><p>目录匹配：配置一个指定目录（/user/*）下的资源</p>
</li>
<li><p>后缀名匹配：配置一个指定后缀名（<em>.html、</em>.jsp、*.jpg….）的资源</p>
</li>
<li><p>匹配所有：配置拦截所有（/*）的资源</p>
</li>
</ul>
<p>代码演示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 目录匹配</span></span><br><span class="line"><span class="comment">// @WebFilter("/user/*")</span></span><br><span class="line"><span class="comment">// 后缀名匹配</span></span><br><span class="line"><span class="comment">// @WebFilter("*.html")</span></span><br><span class="line"><span class="comment">// 拦截所有</span></span><br><span class="line"><span class="meta">@WebFilter</span>(<span class="string">"/*"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UrlPatternFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"UrlPatternFilter拦截了请求..."</span>);</span><br><span class="line">        <span class="comment">// 向下转型</span></span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) servletRequest;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) servletResponse;</span><br><span class="line">        <span class="comment">// 放行</span></span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-3-拦截方式"><a href="#4-3-拦截方式" class="headerlink" title="4.3 拦截方式"></a>4.3 拦截方式</h3><p>在开发时，可以指定过滤器的拦截方式来处理不同的应用场景。</p>
<ul>
<li>比如：只拦截从浏览器直接发送过来的请求，或者拦截内部转发的请求</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>拦截外部请求（默认拦截方式）</span><br><span class="line"><span class="code">	用户通过浏览器发送请求时，进行拦截</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>拦截内部转发(forword)</span><br><span class="line"><span class="code">	资源a转发到资源b时，拦截</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="bullet">3. </span>过滤器可以同时配置多种拦截方式</span><br><span class="line"><span class="code">	forward、request</span></span><br></pre></td></tr></table></figure>

<p><strong>代码演示：</strong></p>
<p>注解配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    指定过滤器的拦截方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// @WebFilter(value = "/BServlet", dispatcherTypes = &#123;DispatcherType.FORWARD&#125;) // 内部转发时，进行拦截</span></span><br><span class="line"><span class="meta">@WebFilter</span>(value = <span class="string">"/BServlet"</span>, dispatcherTypes = &#123;DispatcherType.REQUEST,DispatcherType.FORWARD&#125;) <span class="comment">// 外部请求和内部转发时，都会拦截</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModelFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ModelFilter拦截了..."</span>);</span><br><span class="line">        <span class="comment">// 向下转型</span></span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) servletRequest;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) servletResponse;</span><br><span class="line">        <span class="comment">// 放行</span></span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>xml配置演示：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--过滤器的拦截方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>ModelFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.itheima.b_detail.ModelFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>ModelFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/BServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dispatcher</span>&gt;</span>REQUEST<span class="tag">&lt;/<span class="name">dispatcher</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dispatcher</span>&gt;</span>FORWARD<span class="tag">&lt;/<span class="name">dispatcher</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="4-4-过滤器链"><a href="#4-4-过滤器链" class="headerlink" title="4.4 过滤器链"></a>4.4 过滤器链</h3><p>在一次请求中,若我们请求匹配到了多个filter,通过请求就相当于把这些filter串起来了，形成了过滤器链。</p>
<p><img data-src="/img/%E8%BF%87%E6%BB%A4%E5%99%A8%E9%93%BE.png" alt="过滤器链"></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>执行顺序（先进后出）</span><br><span class="line"><span class="code">        1.用户发送请求</span></span><br><span class="line"><span class="code">        2.FilterA拦截请求</span></span><br><span class="line"><span class="code">        3.FilterB拦截请求</span></span><br><span class="line"><span class="code">        4.show.jsp 执行了</span></span><br><span class="line"><span class="code">        5.FilterB响应增强</span></span><br><span class="line"><span class="code">        6.FilterA响应增强</span></span><br><span class="line"><span class="code">        7.服务器响应结果</span></span><br><span class="line"><span class="code">        </span></span><br><span class="line"><span class="bullet">* </span>拦截先后问题</span><br><span class="line"><span class="code">	xml</span></span><br><span class="line"><span class="code">		&lt;filter-mapping&gt; 谁先声明，谁先拦截</span></span><br><span class="line"><span class="code">	注解</span></span><br><span class="line"><span class="code">		根据类名的大小进行先后的排序，值小的先执行...</span></span><br><span class="line"><span class="code">			FilterA和FilterB进行对比，所以A先执行</span></span><br></pre></td></tr></table></figure>



<h2 id="五、Filter案例练习"><a href="#五、Filter案例练习" class="headerlink" title="五、Filter案例练习"></a>五、Filter案例练习</h2><p>需求：用户访问某论坛网站，可以对文章比赛等内容进行留言，在用户点击提交留言，发送请求时，使用过滤器对请求进行拦截，统一编码，防止出现乱码，并且对一些敏感词进行拦截或者过滤。</p>
<p>代码实现：</p>
<p><strong>word.jsp</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;留言板&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;留言板&lt;/h2&gt;</span><br><span class="line">&lt;div style=<span class="string">"border: 1px solid red; width: 200px; height: 200px"</span>&gt;</span><br><span class="line">    $&#123;requestScope.message&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;h2&gt;留言&lt;/h2&gt;</span><br><span class="line">&lt;h3&gt;</span><br><span class="line">    &lt;span style=<span class="string">"color:red "</span>&gt;</span><br><span class="line">        $&#123;requestScope.info&#125;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">&lt;/h3&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/MessageServlet"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &lt;textarea name="message"  cols="30" rows="5"&gt;&lt;/textarea&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"发布"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><strong>MessageServlet</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/MessageServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String message = request.getParameter(<span class="string">"message"</span>);</span><br><span class="line">        request.setAttribute(<span class="string">"message"</span>,message);</span><br><span class="line">        request.getRequestDispatcher(<span class="string">"word.jsp"</span>).forward(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>统一编码过滤器EncodingFilter</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> FilterConfig config;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) req;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) resp;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"post"</span>.equalsIgnoreCase(request.getMethod())) &#123;</span><br><span class="line">            <span class="comment">//System.out.println(config.getInitParameter("encoding"));</span></span><br><span class="line">            request.setCharacterEncoding(config.getInitParameter(<span class="string">"encoding"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//放行</span></span><br><span class="line">        chain.doFilter(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.config = config;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>敏感词拦截KeyWordsFilter</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyWordsFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String[] words;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) req;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) resp;</span><br><span class="line">        String message = request.getParameter(<span class="string">"message"</span>);</span><br><span class="line">        <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">            <span class="keyword">if</span> (message.contains(word))&#123;</span><br><span class="line">                request.setAttribute(<span class="string">"info"</span>,<span class="string">"您的言论涉嫌违规..."</span>);</span><br><span class="line">                request.getRequestDispatcher(<span class="string">"/word.jsp"</span>).forward(request,response);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//放行</span></span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.专门加载src目录下的properties配置文件，sun公司提供了一个工具类（ResourceBundle）</span></span><br><span class="line">        ResourceBundle bundle = ResourceBundle.getBundle(<span class="string">"keywords"</span>);</span><br><span class="line">        <span class="comment">// 2.获取关键字的词库信息</span></span><br><span class="line">        String keywords = bundle.getString(<span class="string">"keyword"</span>);</span><br><span class="line">        <span class="comment">// 3.转为数组</span></span><br><span class="line">        <span class="keyword">this</span>.words = keywords.split(<span class="string">","</span>);;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>xml配置</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>EncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.sun.web.filter.EncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--全局参数配置，统一字符集--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>EncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>KeyWordsFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.sun.web.filter.KeyWordsFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>KeyWordsFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/MessageServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>敏感词库：</p>
<p>keywords.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">keyword</span>=<span class="string">傻子,笨蛋,憨批</span></span><br></pre></td></tr></table></figure>



<h3 id="5-1-敏感词替换"><a href="#5-1-敏感词替换" class="headerlink" title="5.1 敏感词替换"></a>5.1 敏感词替换</h3><p>当用户发出非法言论的时候，在servlet中输出的时候:用”*” 替代</p>
<ul>
<li>你是个笨蛋 –&gt; 你是个**</li>
</ul>
<h4 id="5-1-1-技术分析"><a href="#5-1-1-技术分析" class="headerlink" title="5.1.1 技术分析"></a>5.1.1 技术分析</h4><p>通过对<code>request.getParameter(String name);</code>方法进行增强的方式，在获取参数时就对敏感词进行替换</p>
<blockquote>
<p>对方法增强的方式</p>
<p>1）子类继承：如果被增强的类是一个接口，无法实现</p>
<p>2）代理模式：一般使用动态代理，这是使用最普遍的方案</p>
<p>3）装饰器模式： 一般在io流中大量使用，案例使用这种方案</p>
</blockquote>
<p>使用装饰器模式要求：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>装饰类和被装饰类，需要实现同一个接口（或者继承同一个类）</span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>装饰类需要有被装饰类的，对象引用</span><br><span class="line"></span><br><span class="line"><span class="bullet">3. </span>装饰类需要重写增强的方法，完成具体的功能</span><br><span class="line"></span><br><span class="line"><span class="bullet">4. </span>装饰类对不需要增强的方法，调用原有的功能</span><br></pre></td></tr></table></figure>

<h4 id="5-1-2-需求分析"><a href="#5-1-2-需求分析" class="headerlink" title="5.1.2 需求分析"></a>5.1.2 需求分析</h4><p><img data-src="/img/%E6%A1%88%E4%BE%8B_%E6%95%8F%E6%84%9F%E8%AF%8D%E6%9B%BF%E6%8D%A2_%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F.png" alt="案例_敏感词替换_装饰器模式"></p>
<h4 id="5-1-3-代码实现"><a href="#5-1-3-代码实现" class="headerlink" title="5.1.3 代码实现"></a>5.1.3 代码实现</h4><p><strong>① MyRequest</strong></p>
<blockquote>
<p>装饰类，增强getParameter方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRequest</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String[] words;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyRequest</span><span class="params">(HttpServletRequest request , String[] words)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(request);</span><br><span class="line">        <span class="keyword">this</span>.words = words;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写方法，进行敏感词过滤</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getParameter</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        String parameter = <span class="keyword">super</span>.getParameter(name);</span><br><span class="line">        <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">            parameter = parameter.replaceAll(word, <span class="string">"***"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parameter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>② KeyWordsProFilter</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyWordsProFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String[] words;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) req;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) resp;</span><br><span class="line">        <span class="comment">//对request的getParameter方法进行增强，过滤敏感词</span></span><br><span class="line">        HttpServletRequest myRequest = <span class="keyword">new</span> MyRequest(request, words);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//放行</span></span><br><span class="line">        chain.doFilter(myRequest, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        ResourceBundle bundle = ResourceBundle.getBundle(<span class="string">"keywords"</span>);</span><br><span class="line">        String keywords = bundle.getString(<span class="string">"keyword"</span>);</span><br><span class="line">        <span class="keyword">this</span>.words = keywords.split(<span class="string">","</span>);;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>③ xml配置</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>KeyWordsProFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.sun.web.filter.KeyWordsProFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>KeyWordsProFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/MessageServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="六、Listener"><a href="#六、Listener" class="headerlink" title="六、Listener"></a>六、Listener</h2><h3 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a>6.1 概述</h3><p><strong>生活中的监听器</strong></p>
<p>我们很多商场有摄像头，监视着客户的一举一动。如果客户有违法行为，商场可以采取相应的措施。</p>
<p><strong>javaweb中的监听器</strong></p>
<p>在我们的java程序中，有时也需要监视某些事情，一旦被监视的对象发生相应的变化，我们应该采取相应的操作。</p>
<p>监听web三大域对象：HttpServletRequest、HttpSession、ServletContext  </p>
<p><strong>场景</strong></p>
<p>历史访问次数、统计在线人数、系统启动时初始化配置信息</p>
<h3 id="6-2-快速入门"><a href="#6-2-快速入门" class="headerlink" title="6.2 快速入门"></a>6.2 快速入门</h3><p>监听器在web开发中使用的比较少,见的机会就更少了,今天我们使用<strong>ServletContextListenner</strong>来带领大家学习下监听器,因为这个监听器是监听器中使用率最高的一个,且监听器的使用方式都差不多。</p>
<blockquote>
<p>我们使用这个监听器可以在项目启动和销毁的时候做一些事情,例如,在项目启动的时候加载配置文件。</p>
</blockquote>
<h4 id="①-xml版本-1"><a href="#①-xml版本-1" class="headerlink" title="① xml版本"></a>① xml版本</h4><blockquote>
<p>普通Java类，实现ServletContextListenner接口</p>
<p>重写：监听ServletContext创建、监听ServletContext销毁</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        监听：ServletContext创建</span></span><br><span class="line"><span class="comment">            servletContextEvent：监听器事件对象..可以获取servletContext域对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ServletContext创建啦...."</span>);</span><br><span class="line">        ServletContext servletContext = servletContextEvent.getServletContext();</span><br><span class="line">    &#125;yi</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        监听：ServletContext销毁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ServletContext销毁啦..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置listener监听器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.itheima.a_listener.MyListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h4 id="②-注解版本-1"><a href="#②-注解版本-1" class="headerlink" title="② 注解版本"></a>② 注解版本</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 代码，省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="6-3-案例：统计在线人数"><a href="#6-3-案例：统计在线人数" class="headerlink" title="6.3 案例：统计在线人数"></a>6.3 案例：统计在线人数</h3><p><strong>需求</strong></p>
<ul>
<li>有用户使用网站,在线人数就+1;用户退出网站,在线人数就-1</li>
</ul>
<h4 id="6-3-1需求分析"><a href="#6-3-1需求分析" class="headerlink" title="6.3.1需求分析"></a>6.3.1需求分析</h4><p><img data-src="/img/%E7%BB%9F%E8%AE%A1%E5%9C%A8%E7%BA%BF%E4%BA%BA%E6%95%B0%E6%A1%88%E4%BE%8B.png" alt="统计在线人数案例"></p>
<h4 id="6-3-2-代码实现"><a href="#6-3-2-代码实现" class="headerlink" title="6.3.2 代码实现"></a>6.3.2 代码实现</h4><p><strong>① InintCountPersonListener</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化在线人数</span></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InintCountPersonListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取servletContext对象</span></span><br><span class="line">        ServletContext servletContext = servletContextEvent.getServletContext();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化人数0</span></span><br><span class="line">        servletContext.setAttribute(<span class="string">"countPerson"</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="②-ChangeCountPersonListener"><a href="#②-ChangeCountPersonListener" class="headerlink" title="② ChangeCountPersonListener"></a>② ChangeCountPersonListener</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChangeCountPersonListener</span> <span class="keyword">implements</span> <span class="title">HttpSessionListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 会话建立，人数+1</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取最大的域对象</span></span><br><span class="line">        ServletContext servletContext = httpSessionEvent.getSession().getServletContext();</span><br><span class="line">        <span class="comment">// 取出原来人数</span></span><br><span class="line">        Integer oldCountPerson = (Integer) servletContext.getAttribute(<span class="string">"countPerson"</span>);</span><br><span class="line">        <span class="comment">// 加一并覆盖</span></span><br><span class="line">        servletContext.setAttribute(<span class="string">"countPerson"</span>, oldCountPerson + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 会话关闭，人数-1</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取最大的域对象</span></span><br><span class="line">        ServletContext servletContext = httpSessionEvent.getSession().getServletContext();</span><br><span class="line">        <span class="comment">// 取出原来人数</span></span><br><span class="line">        Integer oldCountPerson = (Integer) servletContext.getAttribute(<span class="string">"countPerson"</span>);</span><br><span class="line">        <span class="comment">// 减一并覆盖</span></span><br><span class="line">        servletContext.setAttribute(<span class="string">"countPerson"</span>, oldCountPerson - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>③ index.jsp</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;$&#123;NAME&#125;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;当前在线人数：$&#123;applicationScope.countPerson&#125;&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/LogoutServlet"&gt;退出&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p> <strong>④ LogoutServlet</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/LogoutServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogoutServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前session，自杀</span></span><br><span class="line">        request.getSession().invalidate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="七、装饰器模式"><a href="#七、装饰器模式" class="headerlink" title="七、装饰器模式"></a>七、装饰器模式</h2><p><strong>使用装饰器模式的要求：</strong></p>
<ol>
<li>装饰类和被装饰类，需要实现同一个接口（或者继承同一个类）</li>
<li>装饰类需要有被装饰类的，对象引用</li>
<li>装饰类需要重写增强的方法，完成具体的功能</li>
<li>装饰类对不需要增强的方法，调用原有的功能</li>
</ol>
<p>装饰器图解：</p>
<p><img data-src="/img/%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F.png" alt="装饰器模式"></p>
<p>代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDecorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 多态（面向接口）</span></span><br><span class="line">        Phone phone = <span class="keyword">new</span> Lvjing(<span class="keyword">new</span> Meiyan(<span class="keyword">new</span> Huawei()));</span><br><span class="line">        phone.take();</span><br><span class="line">        System.out.println(<span class="string">"-------------"</span>);</span><br><span class="line">        phone.call();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Phone接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拍照</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">take</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打电话</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 华为厂商实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Huawei</span> <span class="keyword">implements</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">take</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"3200W高清摄像"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"5G视频通话"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽取PhoneWrapper包装类</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhoneWrapper</span> <span class="keyword">implements</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Phone phone;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PhoneWrapper</span><span class="params">(Phone phone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">take</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.phone.take();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.phone.take();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 美颜增强</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meiyan</span> <span class="keyword">extends</span> <span class="title">PhoneWrapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Meiyan</span><span class="params">(Phone phone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(phone);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对拍照增强</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">take</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.take();</span><br><span class="line">        System.out.println(<span class="string">"磨皮、瘦脸、大眼、美白"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 滤镜增强</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lvjing</span> <span class="keyword">implements</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Phone phone;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Lvjing</span><span class="params">(Phone phone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">take</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.phone.take();</span><br><span class="line">        System.out.println(<span class="string">"对背景虚化..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.phone.call();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>设计模式</tag>
        <tag>Listener</tag>
        <tag>Filter</tag>
        <tag>装饰器模式</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL基础</title>
    <url>/2020/09/01/MySQL%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="一、数据库介绍"><a href="#一、数据库介绍" class="headerlink" title="一、数据库介绍"></a>一、数据库介绍</h2><h3 id="1-1-什么是数据库"><a href="#1-1-什么是数据库" class="headerlink" title="1.1 什么是数据库"></a>1.1 什么是数据库</h3><p><strong>数据库：</strong>存储数据的仓库,本质上就是存储数据的文件系统，方便我们管理数据。</p>
<h3 id="1-2-数据库管理系统层次"><a href="#1-2-数据库管理系统层次" class="headerlink" title="1.2 数据库管理系统层次"></a>1.2 数据库管理系统层次</h3><p>数据库管理系统（Database Management System[DBMS]）：指一种操作和管理数据库的大型软件。</p>
<a id="more"></a>

<blockquote>
<p>MySQL软件–&gt;仓库—&gt;表–&gt;记录（数据）</p>
</blockquote>
<p><img data-src="/img/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%B1%82%E6%AC%A1.png" alt="数据库管理系统层次"></p>
<h3 id="1-3-实体和表的关系"><a href="#1-3-实体和表的关系" class="headerlink" title="1.3 实体和表的关系"></a>1.3 实体和表的关系</h3><p><img data-src="/img/%E5%AE%9E%E4%BD%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%85%B3%E7%B3%BB.png" alt="实体和表的关系"></p>
<h3 id="1-4-常见的关系型数据库"><a href="#1-4-常见的关系型数据库" class="headerlink" title="1.4 常见的关系型数据库"></a>1.4 常见的关系型数据库</h3><ul>
<li><p>MYSQL：开源免费的数据库，小型的数据库.已经被Oracle收购了.MySQL6.x（商业、社区）版本也开始收费。</p>
</li>
<li><p>Oracle：收费的大型数据库，Oracle公司的产品。Oracle收购SUN公司，收购MYSQL。</p>
</li>
<li><p>DB2：IBM公司的数据库产品,收费的。常应用在银行系统中。</p>
</li>
<li><p>SQLServer：MicroSoft 公司收费的中型的数据库。C#、.net等语言常使用。</p>
</li>
<li><p>SyBase：已经淡出历史舞台。提供了一个非常专业数据建模的工具PowerDesigner。</p>
</li>
<li><p>SQLite: 嵌入式的小型数据库，应用在手机端。</p>
</li>
<li><p>OceanBase：阿里巴巴提供的数据库产品，国货之光…</p>
</li>
</ul>
<h2 id="二、MySQL使用"><a href="#二、MySQL使用" class="headerlink" title="二、MySQL使用"></a>二、MySQL使用</h2><h3 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h3><p>略…</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">+ </span>安装成功后，通过DOS命令行验证</span><br><span class="line"><span class="code">		mysql --version</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-使用"><a href="#2-2-使用" class="headerlink" title="2.2 使用"></a>2.2 使用</h3><p><strong>启动和关闭</strong></p>
<blockquote>
<p>MySQL软件默认开启自启动</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>windows服务窗口</span><br><span class="line"><span class="code">	计算机右键管理，选择服务，搜索MySQL</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>DOS命令行（超级管理员）</span><br><span class="line"><span class="code">		net start mysql</span></span><br><span class="line"><span class="code">		net stop  mysql</span></span><br></pre></td></tr></table></figure>

<p><strong>登录</strong></p>
<blockquote>
<p>dos命令行方式</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>本机登录</span><br><span class="line"><span class="code">		mysql -u用户名 -p密码</span></span><br><span class="line"><span class="code">		</span></span><br><span class="line"><span class="bullet">2. </span>远程登录</span><br><span class="line"><span class="code">		mysql -h主机地址 -u用户名 -p密码</span></span><br></pre></td></tr></table></figure>

<p><strong>退出</strong></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">exit</span><br><span class="line">quit</span><br></pre></td></tr></table></figure>



<h2 id="三、SQL"><a href="#三、SQL" class="headerlink" title="三、SQL"></a>三、SQL</h2><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h3><p>SQL：结构化查询语言（Structured Query Language）</p>
<ul>
<li>通过sql语句，可以实现对数据库的增删改查</li>
<li>CRUD：create 创建、 retrieve(read) 检索、update 更新、delete 删除</li>
</ul>
<h3 id="3-2-SQL方言"><a href="#3-2-SQL方言" class="headerlink" title="3.2 SQL方言"></a>3.2 SQL方言</h3><p>SQL是一套标准，所有的数据库厂商都实现了此标准；但是各自厂商在此标准上增加了特有的语句，这部分内容我们称为方言。</p>
<blockquote>
<p>方言举例：</p>
<ul>
<li>MySQL注释 #  </li>
<li>MySQL分页 limit</li>
</ul>
</blockquote>
<h3 id="3-3-SQL书写规范"><a href="#3-3-SQL书写规范" class="headerlink" title="3.3 SQL书写规范"></a>3.3 SQL书写规范</h3><ul>
<li>SQL语句可以单行或多行书写，最后以分号结束</li>
<li>SQL语句在windows平台下不区分大小写，关键字大写</li>
<li>SQL的注释：<ul>
<li>单行注释：<code>-- 注释内容</code></li>
<li>多行注释：<code>/* 注释内容 */</code></li>
</ul>
</li>
</ul>
<h3 id="3-4-SQL分类"><a href="#3-4-SQL分类" class="headerlink" title="3.4 SQL分类"></a>3.4 SQL分类</h3><ul>
<li>DDL：(Data Definition Language)数据定义语言 <ul>
<li>用来定义数据库对象：数据库，表，列等。关键字：create,drop,alter等</li>
</ul>
</li>
<li>DML：(Data Manipulation Language)数据操作语言 <ul>
<li>用来对数据库中表的数据进行增删改。关键字：insert,delete, update等</li>
</ul>
</li>
<li>DQL：(Data Query Language) 数据查询语言<ul>
<li>用来查询数据库中表的记录(数据)。关键字：select, where等</li>
</ul>
</li>
<li>DCL：(Data Control Language)数据控制语言<ul>
<li>用来定义数据库的访问权限和安全级别，及创建用户。关键字：grant,revoke等</li>
</ul>
</li>
<li>TCL：(Transaction Control Language) 事务控制语言<ul>
<li>用于控制数据库的事务操作，关键字; commit,savepoint,rollback等</li>
</ul>
</li>
</ul>
<h2 id="四、SQL的基础操作"><a href="#四、SQL的基础操作" class="headerlink" title="四、SQL的基础操作"></a>四、SQL的基础操作</h2><h3 id="4-1-DDL"><a href="#4-1-DDL" class="headerlink" title="4.1 DDL"></a>4.1 DDL</h3><h4 id="4-1-1-操作数据库"><a href="#4-1-1-操作数据库" class="headerlink" title="4.1.1 操作数据库"></a>4.1.1 操作数据库</h4><h5 id="C：创建"><a href="#C：创建" class="headerlink" title="C：创建"></a>C：创建</h5><ul>
<li><strong>直接创建数据库</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> 数据库名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 示例</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> mydb;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>创建数据库并指定字符集</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> 数据库名 <span class="keyword">charset</span> 字符集;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 示例</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> mydb <span class="keyword">charset</span> utf8;</span><br></pre></td></tr></table></figure>



<h5 id="R：查询"><a href="#R：查询" class="headerlink" title="R：查询"></a>R：查询</h5><ul>
<li><strong>查看所有数据库</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>查看建库语句</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">database</span> 数据库名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 示例</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">database</span> mydb;</span><br></pre></td></tr></table></figure>



<h5 id="U：修改"><a href="#U：修改" class="headerlink" title="U：修改"></a>U：修改</h5><ul>
<li><strong>修改数据库的字符集</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> 数据库名 <span class="keyword">charset</span> 字符集；</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 示例</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> mydb <span class="keyword">charset</span> gbk;</span><br></pre></td></tr></table></figure>



<h5 id="D：删除"><a href="#D：删除" class="headerlink" title="D：删除"></a>D：删除</h5><ul>
<li><strong>删除指定的数据库</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> 数据库名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 示例</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> mydb;</span><br></pre></td></tr></table></figure>



<h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><ul>
<li><strong>查看当前正在使用的数据库</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">database</span>();</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>使用数据库</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法</span></span><br><span class="line"><span class="keyword">use</span> 数据库名；</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 示例</span></span><br><span class="line"><span class="keyword">use</span> mydb;</span><br></pre></td></tr></table></figure>



<h4 id="4-1-2-操作表"><a href="#4-1-2-操作表" class="headerlink" title="4.1.2 操作表"></a>4.1.2 操作表</h4><h5 id="C：创建-1"><a href="#C：创建-1" class="headerlink" title="C：创建"></a>C：创建</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">	字段名 数据类型,</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    ...</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 示例</span></span><br><span class="line"><span class="comment">-- 需求：创建一张student表，表中字段有id、name、birthday</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">32</span>),</span><br><span class="line">    birthday <span class="built_in">date</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>MySQL中常见的数据类型</strong></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>int      整型</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>double   浮点型</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>decimal  高精度浮点型</span><br><span class="line"><span class="code">	decimal(m,n)</span></span><br><span class="line"><span class="code">		m：总长度</span></span><br><span class="line"><span class="code">		n：小数位长度</span></span><br><span class="line"><span class="code">	举例</span></span><br><span class="line"><span class="code">		decimal(5,2)</span></span><br><span class="line"><span class="code">			最大值：999.99</span></span><br><span class="line"><span class="code">			最小值：0.01</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>varchar  可变长度字符串</span><br><span class="line"><span class="code">	varchar(m) </span></span><br><span class="line"><span class="code">		m取值范围：1~21841 字符</span></span><br><span class="line"><span class="code">	举例：</span></span><br><span class="line"><span class="code">		varchar(10)</span></span><br><span class="line"><span class="code">			最大值：10个字符（中英文及标点符号）</span></span><br><span class="line"><span class="code">			最小值：1个字符</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>char     固定长度字符串</span><br><span class="line"><span class="code">	char(m)</span></span><br><span class="line"><span class="code">		m取值范围：1~257</span></span><br><span class="line"><span class="code">	举例：</span></span><br><span class="line"><span class="code">		char(10)</span></span><br><span class="line"><span class="code">			最大值：10个字符</span></span><br><span class="line"><span class="code">			最小值：10个字符</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>text	   文本</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>date     日期，格式：yyyy-MM-dd</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>datetime 日期时间，格式：yyyy-MM-dd HH:mm:ss</span><br></pre></td></tr></table></figure>



<p><strong>克隆表</strong></p>
<blockquote>
<p>为了简化表的创建，在创建的表的时候，可以使用已有表的结构</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 新表 <span class="keyword">like</span> 旧表;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 实例</span></span><br><span class="line"><span class="comment">-- 需求：利用student表的结构快速复制出一张teacher表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> teacher <span class="keyword">like</span> student;</span><br></pre></td></tr></table></figure>



<h5 id="R：查询-1"><a href="#R：查询-1" class="headerlink" title="R：查询"></a>R：查询</h5><ul>
<li><strong>查询当前库中所有的数据表</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>查看建表语句</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法 </span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> 表名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 实例 </span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> teacher;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>查看表结构</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法</span></span><br><span class="line">desc 表名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 实例</span></span><br><span class="line">desc student;</span><br><span class="line">desc teacher;</span><br></pre></td></tr></table></figure>



<h5 id="U：修改-1"><a href="#U：修改-1" class="headerlink" title="U：修改"></a>U：修改</h5><ul>
<li><strong>添加一列</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 列名 数据类型;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 实例</span></span><br><span class="line"><span class="comment">-- 需求：修改teacher表中添加一列jieshao</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> teacher <span class="keyword">add</span> jieshao <span class="built_in">varchar</span>(<span class="number">30</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>修改列类型</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">modify</span> 列名 新数据类型;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 实例</span></span><br><span class="line"><span class="comment">-- 需求：修改teacher表jieshao列的字符长度为99</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> teacher <span class="keyword">modify</span> jieshao <span class="built_in">varchar</span>(<span class="number">99</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>修改列名</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">change</span> 旧列名 新列名 新数据类型;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 实例</span></span><br><span class="line"><span class="comment">-- 需求：修改teacher表jieshao列名为intro</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> teacher <span class="keyword">change</span> jieshao intro <span class="built_in">varchar</span>(<span class="number">256</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>删除指定列</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> 列名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 实例</span></span><br><span class="line"><span class="comment">-- 需求：删除teacher表的intro列</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> teacher <span class="keyword">drop</span> intro;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>修改表名</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法</span></span><br><span class="line"><span class="keyword">rename</span> <span class="keyword">table</span> 旧表名 <span class="keyword">to</span>  新表名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 实例</span></span><br><span class="line"><span class="comment">-- 需求：修改teacher表的名称为tch</span></span><br><span class="line"><span class="keyword">rename</span> <span class="keyword">table</span> teacher <span class="keyword">to</span>  tch;</span><br></pre></td></tr></table></figure>



<h5 id="D：删除-1"><a href="#D：删除-1" class="headerlink" title="D：删除"></a>D：删除</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 实例</span></span><br><span class="line"><span class="comment">-- 需求：删除tch表</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> tch;</span><br></pre></td></tr></table></figure>



<h3 id="4-2-图形化工具"><a href="#4-2-图形化工具" class="headerlink" title="4..2 图形化工具"></a>4..2 图形化工具</h3><blockquote>
<p>这里介绍SQLyog软件</p>
</blockquote>
<p><strong>安装：略…</strong></p>
<blockquote>
<p>登录（远程连接）</p>
</blockquote>
<p><img data-src="/img/sqlyog%E7%99%BB%E5%BD%95.png" alt="sqlyog登录"></p>
<blockquote>
<p>代替DDL操作库</p>
</blockquote>
<p><img data-src="/img/sqlyog%E6%93%8D%E4%BD%9C%E5%BA%93.png" alt="sqlyog操作库"></p>
<blockquote>
<p>代替DDL操作表</p>
</blockquote>
<p><img data-src="/img/sqlyog%E6%93%8D%E4%BD%9C%E8%A1%A8.png" alt="sqlyog操作表"></p>
<h3 id="4-3-DML"><a href="#4-3-DML" class="headerlink" title="4.3 DML"></a>4.3 DML</h3><h4 id="4-3-1-添加记录"><a href="#4-3-1-添加记录" class="headerlink" title="4.3.1 添加记录"></a>4.3.1 添加记录</h4><p>需求：在student表中添加如下数据：</p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>birthday</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>工藤</td>
<td>1990-01-01</td>
</tr>
<tr>
<td>5</td>
<td>小兰</td>
<td>1990-01-01</td>
</tr>
<tr>
<td>6</td>
<td>小五郎</td>
<td></td>
</tr>
</tbody></table>
<p><strong>方式一：完整语法</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名(列名<span class="number">1</span>,列名<span class="number">2.</span>...) <span class="keyword">values</span>(值<span class="number">1</span>,值<span class="number">2.</span>..);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 实例</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(<span class="keyword">id</span>,<span class="keyword">name</span>,birthday)<span class="keyword">values</span>(<span class="string">'1'</span>,<span class="string">'工藤'</span>,<span class="string">'1990-01-01'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(<span class="keyword">id</span>,<span class="string">`name`</span>)<span class="keyword">VALUES</span>(<span class="number">6</span>,<span class="string">'小五郎'</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">注意:</span></span><br><span class="line"><span class="comment">	1.字符串类型可以使用 单引号或者双引号，推荐使用单引号</span></span><br><span class="line"><span class="comment">	2.字符串可以插入一切类型，数据库底层进行了因式转换</span></span><br><span class="line"><span class="comment">	3.类的类型必须跟值类型，还有个数，需要一一对应</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p><strong>方式二：简化语法</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span>(值<span class="number">1</span>,值<span class="number">2.</span>..);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 实例</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">'小兰'</span>,<span class="string">'1993-2-2'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">7</span>,<span class="string">'灰原哀'</span>,<span class="literal">null</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">注意：</span></span><br><span class="line"><span class="comment">	1.插入值的顺序必须跟字段顺一致，补充查看字段顺序：desc 表名</span></span><br><span class="line"><span class="comment">	2.对于不需要插入真实数据的列（字段），使用null填补位置</span></span><br><span class="line"><span class="comment">*/</span>	</span><br><span class="line"><span class="comment">-- 扩展：一条命令插入多条记录</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">8</span>,<span class="string">'阿里博士'</span>,<span class="literal">null</span>),(<span class="number">9</span>,<span class="string">'木木景观'</span>,<span class="literal">null</span>);</span><br></pre></td></tr></table></figure>



<h4 id="4-3-2-修改记录"><a href="#4-3-2-修改记录" class="headerlink" title="4.3.2 修改记录"></a>4.3.2 修改记录</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法</span></span><br><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 列<span class="number">1</span>=新值<span class="number">1</span>,列<span class="number">2</span>=新值<span class="number">2</span> <span class="keyword">where</span> 条件;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 实例</span></span><br><span class="line"><span class="comment">-- 需求：修改工藤的name为柯南,birthday为2000-01-01</span></span><br><span class="line"><span class="keyword">update</span> student <span class="keyword">set</span> <span class="keyword">name</span>=<span class="string">'柯南'</span>,birthday=<span class="string">'2000-01-01'</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>



<h4 id="4-3-3-删除记录"><a href="#4-3-3-删除记录" class="headerlink" title="4.3.3 删除记录"></a>4.3.3 删除记录</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 实例</span></span><br><span class="line"><span class="comment">-- 需求：删除student中name=木木景观的记录</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">9</span>;</span><br></pre></td></tr></table></figure>



<h4 id="4-3-4-蠕虫复制"><a href="#4-3-4-蠕虫复制" class="headerlink" title="4.3.4 蠕虫复制"></a>4.3.4 蠕虫复制</h4><p>作用：将一张表的记录，快速复制到另外一张表</p>
<ul>
<li>前提：二张表结构一致</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 准备条件 克隆学生表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu <span class="keyword">like</span> student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 蠕虫复制</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stu <span class="keyword">select</span> * <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure>



<h3 id="4-4-DQL"><a href="#4-4-DQL" class="headerlink" title="4.4 DQL"></a>4.4 DQL</h3><p><strong>准备数据</strong></p>
<ul>
<li>创建表</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student1(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span>,				<span class="comment">-- 学号</span></span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>),	<span class="comment">-- 姓名</span></span><br><span class="line">    chinese <span class="keyword">double</span>,		<span class="comment">-- 语文成绩</span></span><br><span class="line">    english <span class="keyword">double</span>,		<span class="comment">-- 英语成绩</span></span><br><span class="line">    math <span class="keyword">double</span>			<span class="comment">-- 数学成绩</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li>向表中插入数据</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 插入记录</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student1(<span class="keyword">id</span>,<span class="keyword">name</span>,chinese,english,math) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'tom'</span>,<span class="number">89</span>,<span class="number">78</span>,<span class="number">90</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student1(<span class="keyword">id</span>,<span class="keyword">name</span>,chinese,english,math) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">'jack'</span>,<span class="number">67</span>,<span class="number">98</span>,<span class="number">56</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student1(<span class="keyword">id</span>,<span class="keyword">name</span>,chinese,english,math) <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">'jerry'</span>,<span class="number">87</span>,<span class="number">78</span>,<span class="number">77</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student1(<span class="keyword">id</span>,<span class="keyword">name</span>,chinese,english,math) <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">'lucy'</span>,<span class="number">88</span>,<span class="literal">NULL</span>,<span class="number">90</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student1(<span class="keyword">id</span>,<span class="keyword">name</span>,chinese,english,math) <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">'james'</span>,<span class="number">82</span>,<span class="number">84</span>,<span class="number">77</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student1(<span class="keyword">id</span>,<span class="keyword">name</span>,chinese,english,math) <span class="keyword">values</span>(<span class="number">6</span>,<span class="string">'jack'</span>,<span class="number">55</span>,<span class="number">85</span>,<span class="number">45</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student1(<span class="keyword">id</span>,<span class="keyword">name</span>,chinese,english,math) <span class="keyword">values</span>(<span class="number">7</span>,<span class="string">'tom'</span>,<span class="number">89</span>,<span class="number">65</span>,<span class="number">30</span>);</span><br></pre></td></tr></table></figure>



<p><strong>基本查询语法</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询全部的字段</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询指定的字段</span></span><br><span class="line"><span class="keyword">select</span> 列名<span class="number">1</span>,列名<span class="number">2.</span>.. <span class="keyword">from</span> 表名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 去重</span></span><br><span class="line"><span class="keyword">select</span> distnct 列名 <span class="keyword">from</span> 表名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- null值处理</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">ifnull</span>(列名,默认值) <span class="keyword">from</span> 表名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 别名</span></span><br><span class="line"><span class="keyword">select</span> 列名 [<span class="keyword">as</span>] 列别名,列名 [<span class="keyword">as</span>] 列别名 <span class="keyword">from</span> 表名 [<span class="keyword">as</span>] 表别名;</span><br></pre></td></tr></table></figure>



<p><strong>示例：</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询表中所有学生的信息</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student1;</span><br><span class="line"><span class="comment">-- 查询表中所有学生的姓名和对应的语文成绩</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`name`</span>,chinese <span class="keyword">FROM</span> student1;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询表中学生姓名（去重）</span></span><br><span class="line"><span class="comment">-- distinct 去重关键字，多字段去重，要求内容完全一致</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> <span class="string">`name`</span> <span class="keyword">FROM</span> student1;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> <span class="string">`name`</span>,chinese <span class="keyword">FROM</span> student1;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在查询的所有学生数学分数上加10分特长分</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`name`</span>,math <span class="keyword">FROM</span> student1;</span><br><span class="line"><span class="comment">-- 注意只是查询时，增加了10分，表中原有记录不会受到影响</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`name`</span>,math +<span class="number">10</span> <span class="keyword">FROM</span> student1;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 统计每个学生的总分</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`name`</span>,chinese + english + math <span class="keyword">FROM</span> student1;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> null与其他数据进行数学运算都为null</span></span><br><span class="line"><span class="comment"> 解决：ifnull(列名,默认值)，作用：如果该列的值为null，就使用你指定的默认值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">IFNULL</span>(english,<span class="number">0</span>) <span class="keyword">FROM</span> student1;</span><br><span class="line"><span class="comment">-- 修复</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`name`</span>,chinese + <span class="keyword">IFNULL</span>(english,<span class="number">0</span>) + math <span class="keyword">FROM</span> student1;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用别名表示学生总分</span></span><br><span class="line"><span class="comment">-- 语法：select 列名 [as] 列别名 from 表名 [as] 表别名</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`name`</span> <span class="keyword">AS</span> 姓名,(chinese + <span class="keyword">IFNULL</span>(english,<span class="number">0</span>) + math) <span class="keyword">AS</span> 总分 <span class="keyword">FROM</span> student1;</span><br></pre></td></tr></table></figure>



<h2 id="五、DQL单表高级查询"><a href="#五、DQL单表高级查询" class="headerlink" title="五、DQL单表高级查询"></a>五、DQL单表高级查询</h2><p><strong>准备数据</strong></p>
<ul>
<li>创建表</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student2(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span>,				 <span class="comment">-- 学号</span></span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>),	 <span class="comment">-- 姓名</span></span><br><span class="line">    age <span class="built_in">int</span>,			 <span class="comment">-- 年龄</span></span><br><span class="line">    sex <span class="built_in">varchar</span>(<span class="number">5</span>),		 <span class="comment">-- 性别</span></span><br><span class="line">    address <span class="built_in">varchar</span>(<span class="number">100</span>),<span class="comment">-- 地址</span></span><br><span class="line">    math <span class="built_in">int</span>,			 <span class="comment">-- 数学成绩</span></span><br><span class="line">    english <span class="built_in">int</span>			 <span class="comment">-- 英语成绩</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li>插入记录</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 插入记录</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student2(<span class="keyword">id</span>,<span class="keyword">NAME</span>,age,sex,address,math,english) <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="number">1</span>,<span class="string">'马云'</span>,<span class="number">55</span>,<span class="string">'男'</span>,<span class="string">'杭州'</span>,<span class="number">66</span>,<span class="number">78</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">'马化腾'</span>,<span class="number">45</span>,<span class="string">'女'</span>,<span class="string">'深圳'</span>,<span class="number">98</span>,<span class="number">87</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">'马景涛'</span>,<span class="number">55</span>,<span class="string">'男'</span>,<span class="string">'香港'</span>,<span class="number">56</span>,<span class="number">77</span>),</span><br><span class="line">(<span class="number">4</span>,<span class="string">'柳岩'</span>,<span class="number">20</span>,<span class="string">'女'</span>,<span class="string">'湖南'</span>,<span class="number">76</span>,<span class="number">65</span>),</span><br><span class="line">(<span class="number">5</span>,<span class="string">'柳青'</span>,<span class="number">20</span>,<span class="string">'男'</span>,<span class="string">'湖南'</span>,<span class="number">86</span>,<span class="literal">NULL</span>),</span><br><span class="line">(<span class="number">6</span>,<span class="string">'刘德华'</span>,<span class="number">57</span>,<span class="string">'男'</span>,<span class="string">'香港'</span>,<span class="number">99</span>,<span class="number">99</span>),</span><br><span class="line">(<span class="number">7</span>,<span class="string">'马德'</span>,<span class="number">22</span>,<span class="string">'女'</span>,<span class="string">'香港'</span>,<span class="number">99</span>,<span class="number">99</span>),</span><br><span class="line">(<span class="number">8</span>,<span class="string">'德玛西亚'</span>,<span class="number">18</span>,<span class="string">'男'</span>,<span class="string">'南京'</span>,<span class="number">56</span>,<span class="number">65</span>);</span><br></pre></td></tr></table></figure>



<h3 id="5-1-条件查询"><a href="#5-1-条件查询" class="headerlink" title="5.1 条件查询"></a>5.1 条件查询</h3><p><strong>条件查询语法</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件;</span><br></pre></td></tr></table></figure>



<h4 id="5-1-1-关系运算符"><a href="#5-1-1-关系运算符" class="headerlink" title="5.1.1 关系运算符"></a>5.1.1 关系运算符</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line">	&gt; &lt; &gt;= &lt;= = !=(&lt;&gt;) </span><br><span class="line">实例：</span><br><span class="line"><span class="comment">-- 查询age等于20岁的学生</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student2 <span class="keyword">WHERE</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="comment">-- 查询age不等于20岁的学生</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student2 <span class="keyword">WHERE</span> age != <span class="number">20</span>;</span><br><span class="line"><span class="comment">-- 查询math分数大于80分的学生</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student2 <span class="keyword">WHERE</span> math &gt; <span class="number">80</span>;</span><br><span class="line"><span class="comment">-- 查询english分数小于或等于80分的学生</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student2 <span class="keyword">WHERE</span> english &lt;= <span class="number">80</span>;</span><br></pre></td></tr></table></figure>



<h4 id="5-1-2-逻辑运算符"><a href="#5-1-2-逻辑运算符" class="headerlink" title="5.1.2 逻辑运算符"></a>5.1.2 逻辑运算符</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line">	&amp;&amp;(and) ||(or) !(not)</span><br><span class="line">	in关键字</span><br><span class="line">		指定字段，多个条件查询</span><br><span class="line">	between关键字</span><br><span class="line">		指定字段，范围查询</span><br><span class="line">实例：</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询age大于35且性别为男的学生(两个条件同时满足)</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student2 <span class="keyword">WHERE</span> age &gt;<span class="number">35</span> <span class="keyword">AND</span> sex = <span class="string">'男'</span>;</span><br><span class="line"><span class="comment">-- 查询age大于35或性别为男的学生(两个条件其中一个满足)</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student2 <span class="keyword">WHERE</span> age &gt;<span class="number">35</span> <span class="keyword">OR</span> sex = <span class="string">'男'</span>;</span><br><span class="line"><span class="comment">-- 查询id是1或3或5的学生</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student2 <span class="keyword">WHERE</span> <span class="keyword">id</span> =<span class="number">1</span> <span class="keyword">OR</span> <span class="keyword">id</span> =<span class="number">3</span> <span class="keyword">OR</span> <span class="keyword">id</span> =<span class="number">5</span>;</span><br><span class="line"><span class="comment">-- in关键字</span></span><br><span class="line"><span class="comment">-- 字段 in(条件1，条件2，条件3);</span></span><br><span class="line"><span class="comment">-- 再次查询id是1或3或5的学生</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student2 <span class="keyword">WHERE</span> <span class="keyword">id</span> <span class="keyword">IN</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>);</span><br><span class="line"><span class="comment">-- 查询id不是1或3或5的学生</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student2 <span class="keyword">WHERE</span> <span class="keyword">id</span> <span class="keyword">NOT</span> <span class="keyword">IN</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询english成绩大于等于77，且小于等于87的学生</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student2 <span class="keyword">WHERE</span> english&gt;=<span class="number">77</span> <span class="keyword">AND</span> english&lt;=<span class="number">87</span>;</span><br><span class="line"><span class="comment">-- between关键字</span></span><br><span class="line"><span class="comment">-- 字段 between较小的值 and 较大的值;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 再次查询english成绩大于等于77，且小于等于87的学生</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student2 <span class="keyword">WHERE</span> english <span class="keyword">BETWEEN</span> <span class="number">77</span> <span class="keyword">AND</span> <span class="number">87</span>;</span><br></pre></td></tr></table></figure>



<h4 id="5-1-3-NULL值判断"><a href="#5-1-3-NULL值判断" class="headerlink" title="5.1.3 NULL值判断"></a>5.1.3 NULL值判断</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line">	为空：is null</span><br><span class="line">	非空：is not null</span><br><span class="line">实例：</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询英语成绩为null的学生</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student2 <span class="keyword">WHERE</span> english <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">-- 查询英语成绩不为null的学生</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student2 <span class="keyword">WHERE</span> english <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>



<h4 id="5-1-4-模糊查询"><a href="#5-1-4-模糊查询" class="headerlink" title="5.1.4 模糊查询"></a>5.1.4 模糊查询</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line">	字段 like '字符串通配符'</span><br><span class="line">		_ 表示单个任意字符</span><br><span class="line">		% 表示多个任意字符</span><br><span class="line">实例：</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓马的学生</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student2 <span class="keyword">WHERE</span> <span class="string">`name`</span> <span class="keyword">LIKE</span> <span class="string">'马%'</span>;</span><br><span class="line"><span class="comment">-- 查询姓名中包含'德'字的学生</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student2 <span class="keyword">WHERE</span> <span class="string">`name`</span> <span class="keyword">LIKE</span> <span class="string">'%德%'</span>;</span><br><span class="line"><span class="comment">-- 查询姓马，且姓名有三个字的学生</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student2 <span class="keyword">WHERE</span> <span class="string">`name`</span> <span class="keyword">LIKE</span>  <span class="string">'马__'</span>;</span><br></pre></td></tr></table></figure>



<h3 id="5-2-排序"><a href="#5-2-排序" class="headerlink" title="5.2 排序"></a>5.2 排序</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">语法： </span><br><span class="line">	<span class="keyword">select</span> * <span class="keyword">from</span> 表名 <span class="keyword">order</span> <span class="keyword">by</span> 字段 [<span class="keyword">asc</span> | <span class="keyword">desc</span>] ,字段 [<span class="keyword">asc</span> | <span class="keyword">desc</span>]</span><br><span class="line">		<span class="keyword">asc</span> 升序（默认值）</span><br><span class="line">		<span class="keyword">desc</span> 降序</span><br><span class="line">		注意：多字段排序后的排序结果，是在前面排序基础之上实现</span><br><span class="line"><span class="comment">-- 实例：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询所有数据,使用年龄降序排序</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student2 <span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询所有数据,在年龄降序排序的基础上，如果年龄相同再以数学成绩降序排序</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student2 <span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">DESC</span>,math <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 排序有null值的列</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student2 <span class="keyword">ORDER</span> <span class="keyword">BY</span> english <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>



<h3 id="5-3-聚合-分组-函数"><a href="#5-3-聚合-分组-函数" class="headerlink" title="5.3 聚合(分组)函数"></a>5.3 聚合(分组)函数</h3><p>作用：对一列数据进行计算，返回一个结果，忽略null值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">语法： </span><br><span class="line">	count(列) 	统计，建议使用 count(*)</span><br><span class="line">	sum(列)   	求和</span><br><span class="line">	max(列)   	最大值</span><br><span class="line">	min(列)   	最小值</span><br><span class="line">	avg(列)   	平均值</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 实例：</span></span><br><span class="line"><span class="comment">-- 查询学生总数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> student2;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询数学成绩总分</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUM</span>(math) <span class="keyword">FROM</span> student2;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询数学成绩平均分</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(math) <span class="keyword">FROM</span> student2;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询数学成绩最高分</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(math) <span class="keyword">FROM</span> student2;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询数学成绩最低分</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MIN</span>(math) <span class="keyword">FROM</span> student2;</span><br></pre></td></tr></table></figure>





<h3 id="5-4-分组"><a href="#5-4-分组" class="headerlink" title="5.4 分组"></a>5.4 分组</h3><p>作用：对一列数据进行分组，相同的数据分为一组，通常与聚合函数一起使用，完成统计工作。</p>
<p><img data-src="/img/%E5%8D%95%E8%A1%A8%E9%AB%98%E7%BA%A7%E6%9F%A5%E8%AF%A2%E2%80%94%E2%80%94%E5%88%86%E7%BB%84.png" alt="单表高级查询——分组"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法：</span></span><br><span class="line"><span class="keyword">select</span> 分组字段 <span class="keyword">from</span> 表名 <span class="keyword">group</span> <span class="keyword">by</span> 分组字段 <span class="keyword">having</span> 分组后的条件过滤;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 实例：</span></span><br><span class="line"><span class="comment">-- 查询所有学生, 按性别分组, 统计每组的人数</span></span><br><span class="line"><span class="keyword">SELECT</span> sex,<span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> student2 <span class="keyword">GROUP</span> <span class="keyword">BY</span> sex;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询年龄大于25岁的人,按性别分组,统计每组的人数</span></span><br><span class="line"><span class="comment">-- 1.查询年龄大于25岁的人</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student2 <span class="keyword">WHERE</span> age &gt;<span class="number">25</span>;</span><br><span class="line"><span class="comment">-- 2.按性别分组</span></span><br><span class="line"><span class="keyword">SELECT</span> sex <span class="keyword">FROM</span> student2 <span class="keyword">WHERE</span> age &gt;<span class="number">25</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> sex;</span><br><span class="line"><span class="comment">-- 3.统计每组的人数</span></span><br><span class="line"><span class="keyword">SELECT</span> sex,<span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> student2 <span class="keyword">WHERE</span> age &gt;<span class="number">25</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> sex;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询年龄大于25岁的人,按性别分组,统计每组的人数，显示人数大于2的信息</span></span><br><span class="line"><span class="keyword">SELECT</span> sex,<span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> student2 <span class="keyword">WHERE</span> age &gt;<span class="number">25</span> <span class="keyword">AND</span>  <span class="keyword">COUNT</span>(*) &gt;<span class="number">2</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> sex; <span class="comment">-- Invalid use of group function 错误语法</span></span><br><span class="line"><span class="keyword">SELECT</span> sex,<span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> student2 <span class="keyword">WHERE</span> age &gt;<span class="number">25</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> sex <span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*) &gt;<span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>where 和 having 区别:</p>
<ul>
<li><p>where是分组前进行条件过滤，不支持聚合函数</p>
</li>
<li><p>having是分组后进行条件过滤，支持聚合函数</p>
</li>
</ul>
</blockquote>
<h3 id="5-5-分页-MySQL方言"><a href="#5-5-分页-MySQL方言" class="headerlink" title="5.5 分页(MySQL方言)"></a>5.5 分页(MySQL方言)</h3><p><strong>向表中添加数据，方便展示分页效果</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student2(<span class="keyword">id</span>,<span class="keyword">NAME</span>,age,sex,address,math,english) <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="number">9</span>,<span class="string">'唐僧'</span>,<span class="number">25</span>,<span class="string">'男'</span>,<span class="string">'长安'</span>,<span class="number">87</span>,<span class="number">78</span>),</span><br><span class="line">(<span class="number">10</span>,<span class="string">'孙悟空'</span>,<span class="number">18</span>,<span class="string">'男'</span>,<span class="string">'花果山'</span>,<span class="number">100</span>,<span class="number">66</span>),</span><br><span class="line">(<span class="number">11</span>,<span class="string">'猪八戒'</span>,<span class="number">22</span>,<span class="string">'男'</span>,<span class="string">'高老庄'</span>,<span class="number">58</span>,<span class="number">78</span>),</span><br><span class="line">(<span class="number">12</span>,<span class="string">'沙僧'</span>,<span class="number">50</span>,<span class="string">'男'</span>,<span class="string">'流沙河'</span>,<span class="number">77</span>,<span class="number">88</span>),</span><br><span class="line">(<span class="number">13</span>,<span class="string">'白骨精'</span>,<span class="number">22</span>,<span class="string">'女'</span>,<span class="string">'白虎岭'</span>,<span class="number">66</span>,<span class="number">66</span>),</span><br><span class="line">(<span class="number">14</span>,<span class="string">'蜘蛛精'</span>,<span class="number">23</span>,<span class="string">'女'</span>,<span class="string">'盘丝洞'</span>,<span class="number">88</span>,<span class="number">88</span>);</span><br></pre></td></tr></table></figure>



<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line">	<span class="keyword">select</span> * <span class="keyword">from</span> 表名 <span class="keyword">limit</span> 起始索引,显示个数</span><br><span class="line">		起始索引：从<span class="number">0</span>开始</span><br><span class="line">		显示个数：一页展示多少条</span><br><span class="line">索引公式：</span><br><span class="line">	开始索引=（当前页<span class="number">-1</span>）× 每页个数</span><br><span class="line"></span><br><span class="line">实例：</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询学生表中数据，显示前4条</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student2 <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">4</span>;</span><br><span class="line"><span class="comment">-- 补充：查询前XX条，起始索引可以省略</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student2 <span class="keyword">LIMIT</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询学生表中数据，从第三条开始显示，显示4条</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student2 <span class="keyword">LIMIT</span> <span class="number">2</span>,<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 模拟百度分页，共有14条记录，一页展示5条</span></span><br><span class="line"><span class="comment">-- 第一页</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student2 <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">5</span>;</span><br><span class="line"><span class="comment">-- 第二页</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student2 <span class="keyword">LIMIT</span> <span class="number">5</span>,<span class="number">5</span>;</span><br><span class="line"><span class="comment">-- 第三页</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student2 <span class="keyword">LIMIT</span> <span class="number">10</span>,<span class="number">5</span>;</span><br></pre></td></tr></table></figure>



<h3 id="5-6-高级查询的顺序"><a href="#5-6-高级查询的顺序" class="headerlink" title="5.6 高级查询的顺序"></a>5.6 高级查询的顺序</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件 <span class="keyword">group</span> <span class="keyword">by</span> 分组 <span class="keyword">having</span> 条件 <span class="keyword">order</span> <span class="keyword">by</span> 排序 <span class="keyword">limit</span> 分页;</span><br></pre></td></tr></table></figure>



<h2 id="六、数据库约束"><a href="#六、数据库约束" class="headerlink" title="六、数据库约束"></a>六、数据库约束</h2><h3 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a>6.1 概述</h3><p><strong>作用</strong></p>
<p>对表中的数据进行限定，保证数据的正确性、有效性和完整性。    </p>
<p><strong>分类</strong></p>
<ol>
<li>主键约束：表示当前记录的（唯一+非空）标识。类似于人类的身份证号</li>
<li>唯一约束：表示当前记录的唯一性</li>
<li>非空约束：表示当前记录不能为空</li>
<li>默认值：我们可以为当前字段指定默认值，如果未指定，默认值就为null</li>
<li>外键约束：限定二张表数据的正确性、有效性和完整性</li>
</ol>
<h3 id="6-2-实现"><a href="#6-2-实现" class="headerlink" title="6.2 实现"></a>6.2 实现</h3><h4 id="6-2-1-主键约束"><a href="#6-2-1-主键约束" class="headerlink" title="6.2.1 主键约束"></a>6.2.1 主键约束</h4><p>作用：限定某一列的值非空且唯一， 主键就是表中记录的唯一标识。<span style="color:red">通常使用id作为主键</span></p>
<p><strong>一张表只能有一个主键，但是一个主键可以包含多个字段</strong></p>
<blockquote>
<p>方式一：在建表的时候,在字段名后面通过primary key 声明</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法：</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span>,</span><br><span class="line">    ....</span><br><span class="line">    ....</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 实例：</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> pk1(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">    <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">32</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>方式二：在建表的时候,在约束区域通过primary key 声明</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法：</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span>,</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    primay <span class="keyword">key</span>(<span class="keyword">id</span>)</span><br><span class="line">      </span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 实例：</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> pk2(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span>,</span><br><span class="line">    <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">32</span>),</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span>(<span class="keyword">id</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 联合主键</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> pk3(</span><br><span class="line"> <span class="keyword">id</span> <span class="built_in">INT</span> ,</span><br><span class="line"> <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">32</span>),</span><br><span class="line"> PRIMARY <span class="keyword">KEY</span>(<span class="keyword">id</span>,<span class="string">`name`</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>方式三：通过修改表结构,添加主键约束 </p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法：</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    ....</span><br><span class="line">    ....</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 实例：</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> pk4(</span><br><span class="line"> <span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line"> <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">32</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小贴士：</p>
<ul>
<li>如果要设置主键的字段存在重复数据，将设置失败…</li>
</ul>
</blockquote>
<h5 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h5><blockquote>
<p>主键自增：要求主键类型支持自增，一张表只能指定一个自增器</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法：</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">    ....</span><br><span class="line">    ....</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 实例：</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> pk4(</span><br><span class="line"> <span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line"> <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">32</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>



<blockquote>
<p>truncate：摧毁表，重构表</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法：</span></span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> 表名;</span><br><span class="line"><span class="comment">-- 实例：</span></span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> pk4;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>truncate table 表名</code> 和 <code>delete from 表名</code> 区别是什么?</p>
<ul>
<li><p>DML分类:delete from，相当于橡皮擦，一条条记录抹除，保留痕迹</p>
</li>
<li><p>DDL分类：truncate table，相当于摧毁表，重构表，不保留痕迹，数据量大，性能更好</p>
</li>
</ul>
</blockquote>
<h4 id="6-2-2-唯一约束"><a href="#6-2-2-唯一约束" class="headerlink" title="6.2.2 唯一约束"></a>6.2.2 唯一约束</h4><p>作用：限定某一列的值不能重复</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法：</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">    字段名 数据类型 <span class="keyword">unique</span>		<span class="comment">--unique:限定当前字段不能重复</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 实例：</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> un1(</span><br><span class="line"> <span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line"> <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">UNIQUE</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小贴士</p>
<ul>
<li>唯一约束，可以出现多个null…</li>
</ul>
</blockquote>
<h4 id="6-2-3-非空约束"><a href="#6-2-3-非空约束" class="headerlink" title="6.2.3 非空约束"></a>6.2.3 非空约束</h4><p>作用：限定某一列的值不能为null</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法：</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">	<span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">    字段名 数据类型 <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 实例：</span></span><br><span class="line"><span class="comment">-- 一般情况下 唯一和非空是一起使用...</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> nn1(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">UNIQUE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="comment">-- 唯一 + 非空</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小贴士：</p>
<ul>
<li>虽然给 name字段设置了 二个约束（unique + not null），功能类似，但它并不是主键约束</li>
</ul>
</blockquote>
<h4 id="6-2-4-默认值"><a href="#6-2-4-默认值" class="headerlink" title="6.2.4 默认值"></a>6.2.4 默认值</h4><p>作用：限定某一列的默认值，在没有指定的情况下所有列的默认值为null</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法：</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">  字段名 数据类型 <span class="keyword">default</span> 默认值</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 实例：</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> df1(</span><br><span class="line"> <span class="string">`id`</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line"> <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line"> <span class="string">`sex`</span> <span class="built_in">VARCHAR</span>(<span class="number">5</span>) <span class="keyword">DEFAULT</span> <span class="string">'男'</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>



<h2 id="七、数据库的备份和还原"><a href="#七、数据库的备份和还原" class="headerlink" title="七、数据库的备份和还原"></a>七、数据库的备份和还原</h2><h3 id="7-1-命令行方式"><a href="#7-1-命令行方式" class="headerlink" title="7.1 命令行方式"></a>7.1 命令行方式</h3><ul>
<li>导出(备份)</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line">		mysqldump -u用户名 -p密码 导出的数据库名 &gt; 导出文件路径(*.sql)</span><br><span class="line">实例：</span><br><span class="line">		mysqldump -uroot -proot web12 &gt; d:\bak.sql</span><br><span class="line">		mysqldump -uroot -p web12 &gt; d:\bak.sql</span><br></pre></td></tr></table></figure>



<ul>
<li>导入</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line">		mysql -u用户名 -p密码 &lt; 导入文件路径(*.sql)</span><br><span class="line">实例：</span><br><span class="line">		mysql -uroot -p &lt; d:\bak.sql</span><br></pre></td></tr></table></figure>



<h3 id="7-2-图形化工具"><a href="#7-2-图形化工具" class="headerlink" title="7.2 图形化工具"></a>7.2 图形化工具</h3><ul>
<li>导出</li>
</ul>
<p><img data-src="/img/%E5%9B%BE%E5%BD%A2%E5%8C%96%E5%B7%A5%E5%85%B7%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt="图形化工具备份数据库"></p>
<ul>
<li>导入</li>
</ul>
<p><img data-src="/img/%E5%9B%BE%E5%BD%A2%E5%8C%96%E5%B7%A5%E5%85%B7%E8%BF%98%E5%8E%9F%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt="图形化工具还原数据库"></p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL数据库</tag>
        <tag>SQL语法</tag>
        <tag>MySQL单表查询</tag>
        <tag>数据库约束</tag>
        <tag>数据库备份和还原</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL函数&amp;权限操作&amp;索引&amp;性能</title>
    <url>/2020/09/03/MySQL%E5%87%BD%E6%95%B0-%E6%9D%83%E9%99%90%E6%93%8D%E4%BD%9C-%E7%B4%A2%E5%BC%95-%E6%80%A7%E8%83%BD/</url>
    <content><![CDATA[<h2 id="一、MySQL函数"><a href="#一、MySQL函数" class="headerlink" title="一、MySQL函数"></a>一、MySQL函数</h2><p>为了简化操作，<strong>mysql提供</strong>了大量的函数给程序员使用（比如你想输入当前时间，可以调用now()函数）</p>
<p>函数可以出现的位置：插入语句的values()中，更新语句中，删除语句中，查询语句及其子句中。</p>
<blockquote>
<p>菜鸟教程：<a href="https://www.runoob.com/mysql/mysql-functions.html" target="_blank" rel="noopener">https://www.runoob.com/mysql/mysql-functions.html</a></p>
</blockquote>
<a id="more"></a>

<ul>
<li>准备数据</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE mysql_fun;</span><br><span class="line">USE mysql_fun;</span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;dept&#96; (</span><br><span class="line">    &#96;id&#96; INT(11) NOT NULL,</span><br><span class="line">    &#96;dname&#96; VARCHAR(50) DEFAULT NULL,</span><br><span class="line">    &#96;loc&#96; VARCHAR(50) DEFAULT NULL,</span><br><span class="line">    PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">);</span><br><span class="line">INSERT  INTO &#96;dept&#96;(&#96;id&#96;,&#96;dname&#96;,&#96;loc&#96;) VALUES (10,&#39;教研部&#39;,&#39;北京&#39;),(20,&#39;学工部&#39;,&#39;上海&#39;),(30,&#39;销售部&#39;,&#39;广州&#39;),(40,&#39;财务部&#39;,&#39;深圳&#39;);</span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;emp&#96; (</span><br><span class="line">    &#96;id&#96; INT(11) NOT NULL,</span><br><span class="line">    &#96;ename&#96; VARCHAR(50) DEFAULT NULL,</span><br><span class="line">    &#96;job_id&#96; INT(11) DEFAULT NULL,</span><br><span class="line">    &#96;mgr&#96; INT(11) DEFAULT NULL,</span><br><span class="line">    &#96;joindate&#96; DATE DEFAULT NULL,</span><br><span class="line">    &#96;salary&#96; DECIMAL(7,2) DEFAULT NULL,</span><br><span class="line">    &#96;bonus&#96; DECIMAL(7,2) DEFAULT NULL,</span><br><span class="line">    &#96;dept_id&#96; INT(11) DEFAULT NULL,</span><br><span class="line">    &#96;nickname&#96; VARCHAR(32) DEFAULT NULL,</span><br><span class="line">    PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT  INTO </span><br><span class="line">&#96;emp&#96;(&#96;id&#96;,&#96;ename&#96;,&#96;job_id&#96;,&#96;mgr&#96;,&#96;joindate&#96;,&#96;salary&#96;,&#96;bonus&#96;,&#96;dept_id&#96;,&#96;nickname&#96;)</span><br><span class="line">VALUES </span><br><span class="line">(1001,&#39;孙悟空&#39;,4,1004,&#39;2010-12-17&#39;,&#39;8000.00&#39;,NULL,20,&#39;sunwukong&#39;),</span><br><span class="line">(1002,&#39;卢俊义&#39;,3,1006,&#39;2011-02-20&#39;,&#39;16000.00&#39;,&#39;3000.00&#39;,30,&#39;lujunyi&#39;),</span><br><span class="line">(1003,&#39;林冲&#39;,3,1006,&#39;2011-02-22&#39;,&#39;12500.00&#39;,&#39;5000.00&#39;,30,&#39;linchong&#39;),</span><br><span class="line">(1004,&#39;唐僧&#39;,2,1009,&#39;2011-04-02&#39;,&#39;29750.00&#39;,NULL,20,&#39;tangseng&#39;),</span><br><span class="line">(1005,&#39;李逵&#39;,4,1006,&#39;2011-09-28&#39;,&#39;12500.00&#39;,&#39;14000.00&#39;,30,&#39;likui&#39;),</span><br><span class="line">(1006,&#39;宋江&#39;,2,1009,&#39;2011-05-01&#39;,&#39;28500.00&#39;,NULL,30,&#39;songjiang&#39;),</span><br><span class="line">(1007,&#39;刘备&#39;,2,1009,&#39;2011-09-01&#39;,&#39;24500.00&#39;,NULL,10,&#39;liubei&#39;),</span><br><span class="line">(1008,&#39;猪八戒&#39;,4,1004,&#39;2007-04-19&#39;,&#39;30000.00&#39;,NULL,20,&#39;zhubajie&#39;),</span><br><span class="line">(1009,&#39;罗贯中&#39;,1,NULL,&#39;2001-02-17&#39;,&#39;50000.00&#39;,NULL,10,&#39;luoguanzhong&#39;),</span><br><span class="line">(1010,&#39;吴用&#39;,3,1006,&#39;2008-09-08&#39;,&#39;15000.00&#39;,&#39;5000.00&#39;,30,&#39;wuyong&#39;),</span><br><span class="line">(1011,&#39;沙僧&#39;,4,1004,&#39;2009-05-23&#39;,&#39;11000.00&#39;,&#39;3000.00&#39;,20,&#39;shaseng&#39;),</span><br><span class="line">(1012,&#39;李逵&#39;,4,1006,&#39;2015-12-03&#39;,&#39;9500.00&#39;,&#39;5000.00&#39;,30,&#39;likui&#39;),</span><br><span class="line">(1013,&#39;小白龙&#39;,4,1004,&#39;2013-12-03&#39;,&#39;30000.00&#39;,&#39;3000.00&#39;,20,&#39;xiaobailong&#39;),</span><br><span class="line">(1014,&#39;关羽&#39;,4,1007,&#39;2002-02-23&#39;,&#39;13000.00&#39;,NULL,10,&#39;guanyu&#39;);</span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;job&#96; (</span><br><span class="line">    &#96;id&#96; INT(11) NOT NULL,</span><br><span class="line">    &#96;jname&#96; VARCHAR(20) DEFAULT NULL,</span><br><span class="line">    &#96;description&#96; VARCHAR(50) DEFAULT NULL,</span><br><span class="line">    PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ;</span><br><span class="line">INSERT  INTO &#96;job&#96;(&#96;id&#96;,&#96;jname&#96;,&#96;description&#96;) VALUES (1,&#39;董事长&#39;,&#39;管理整个公司，接单&#39;),(2,&#39;经理&#39;,&#39;管理部门员工&#39;),(3,&#39;销售员&#39;,&#39;向客人推销产品&#39;),(4,&#39;文员&#39;,&#39;使用办公软件&#39;);</span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;salarygrade&#96; (</span><br><span class="line">    &#96;grade&#96; INT(11) NOT NULL,</span><br><span class="line">    &#96;losalary&#96; INT(11) DEFAULT NULL,</span><br><span class="line">    &#96;hisalary&#96; INT(11) DEFAULT NULL,</span><br><span class="line">    PRIMARY KEY (&#96;grade&#96;)</span><br><span class="line">) ;</span><br><span class="line"></span><br><span class="line">INSERT  INTO &#96;salarygrade&#96;(&#96;grade&#96;,&#96;losalary&#96;,&#96;hisalary&#96;) VALUES (1,7000,12000),(2,12010,14000),(3,14010,20000),(4,20010,30000),(5,30010,99990);</span><br></pre></td></tr></table></figure>



<h3 id="1-1-字符串函数"><a href="#1-1-字符串函数" class="headerlink" title="1.1 字符串函数"></a>1.1 字符串函数</h3><ul>
<li>常用</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.  </span>函数：CONCAT(s1,s2...sn)</span><br><span class="line"><span class="code">	描述：字符串 s1,s2 等多个字符串合并为一个字符串</span></span><br><span class="line"><span class="code">	实例：select concat("hello",'world');</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">2.  </span>函数：CHAR_LENGTH(str)</span><br><span class="line"><span class="code">	描述：返回字符串 str 的字符数</span></span><br><span class="line"><span class="code">	实例：select char_length('helloworld');</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="bullet">3.  </span>函数：LENGTH(str)</span><br><span class="line"><span class="code">	描述：返回字符串 s 的字节数</span></span><br><span class="line"><span class="code">	字符集：UTF8（一个中文字符占3个字节）</span></span><br><span class="line"><span class="code">	实例：select length('hello,world');</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="bullet">4.  </span>函数：LCASE(s) | UCASE(s)</span><br><span class="line"><span class="code">	描述：将字符串转换为大小写</span></span><br><span class="line"><span class="code">	实例：select ucase('hello');</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="bullet">5.  </span>函数：LOCATE(s1,str)</span><br><span class="line"><span class="code">	描述：从字符串 str 中获取 s1 的开始位置</span></span><br><span class="line"><span class="code">	注意：从1开始</span></span><br><span class="line"><span class="code">	实例：select locate('e','hello');</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="bullet">6.  </span>函数：TRIM(str) | LTRIM(str) | RTRIM(str)</span><br><span class="line"><span class="code">	描述：字符串去空格</span></span><br><span class="line"><span class="code">	实例：select trim('   java    ');</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="bullet">7.  </span>函数：REPLACE(s,s1,s2)</span><br><span class="line"><span class="code">	描述：将字符串 s2 替代字符串 s 中的字符串 s1</span></span><br><span class="line"><span class="code">	实例：select replace('你大爷的','大爷','**');</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="bullet">8.  </span>函数：SUBSTR(s, start, length)</span><br><span class="line"><span class="code">	描述：从字符串 s 的 start 位置截取长度为 length 的子字符串</span></span><br><span class="line"><span class="code">	注意：从1开始截取</span></span><br><span class="line"><span class="code">	实例：select substr('itheima','3');</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="bullet">9. </span>函数：STRCMP(str1,str2)</span><br><span class="line"><span class="code">	描述：比较字符串大小,左大于右时返回1，左等于右时返回0，，左小于于右时返回-1，</span></span><br><span class="line"><span class="code">	实例：select strcmp('a','b');</span></span><br></pre></td></tr></table></figure>

<ul>
<li>练习</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 1.将所有员工的昵称改为大写</span><br><span class="line">SELECT UCASE(nickname) FROM emp;</span><br><span class="line"></span><br><span class="line">-- 2.显示所有员工的姓氏，截取</span><br><span class="line">SELECT SUBSTR(ename,1,1) FROM emp;</span><br><span class="line"></span><br><span class="line">-- 3.显示所有员工姓名字符长度</span><br><span class="line">SELECT ename,CHAR_LENGTH(ename) FROM emp;</span><br><span class="line"></span><br><span class="line">-- 4.显示所有员工姓名字节长度</span><br><span class="line">SELECT ename,LENGTH(ename) FROM emp;</span><br><span class="line"></span><br><span class="line">-- 5.将所有姓李的员工，姓氏替换为li</span><br><span class="line">SELECT REPLACE(ename,&#39;李&#39;,&#39;li&#39;) FROM emp;</span><br><span class="line"></span><br><span class="line">-- 6.将所有员工的姓名和昵称拼接在一起 注意事项，mysql这个函数是一个可变参数，oracle只能传递二个参数</span><br><span class="line">SELECT CONCAT(CONCAT(ename,nickname),salary) FROM emp;</span><br></pre></td></tr></table></figure>



<h3 id="1-2-日期函数"><a href="#1-2-日期函数" class="headerlink" title="1.2 日期函数"></a>1.2 日期函数</h3><ul>
<li>常用</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.  </span>函数：NOW() | CURDATE() | CURTIME()</span><br><span class="line"><span class="code">	描述：获取系统当前日期时间、日期、时间</span></span><br><span class="line"><span class="code">	实例：select now();</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="bullet">2.  </span>函数：YEAR(DATE) | MONTH(DATE) | DAY(DATE)</span><br><span class="line"><span class="code">	描述：从日期中选择出年、月、日</span></span><br><span class="line"><span class="code">	实例：select MONTH(now());</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="bullet">3.  </span>函数：LAST_DAY(DATE)</span><br><span class="line"><span class="code">	描述：返回月份的最后一天</span></span><br><span class="line"><span class="code">	实例：select last_day(now());</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="bullet">4.  </span>函数：ADDDATE(DATE,n) | SUBDATE(DATE,n)</span><br><span class="line"><span class="code">	描述：计算起始日期 DATE 加（减） n 天的日期</span></span><br><span class="line"><span class="code">	实例：select adddate(now(),10);</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="bullet">5.  </span>函数：QUARTER(DATE)</span><br><span class="line"><span class="code">	描述：返回日期 DATE 是第几季节，返回 1 到 4</span></span><br><span class="line"><span class="code">	实例：select quarter(now());</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="bullet">6.  </span>函数：DATEDIFF(d1,d2)</span><br><span class="line"><span class="code">	描述：计算日期 d1-&gt;d2 之间相隔的天数</span></span><br><span class="line"><span class="code">	实例：select datediff(now(),'2020-08-11');</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="bullet">7.  </span>函数：DATE_FORMAT(d,f)</span><br><span class="line"><span class="code">	描述：按表达式 f的要求显示日期 d</span></span><br><span class="line"><span class="code">	实例：select date_format(now(),'%Y年%m月%d日');</span></span><br></pre></td></tr></table></figure>

<ul>
<li>练习</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 1.统计每个员工入职的天数</span><br><span class="line">SELECT ename,DATEDIFF(NOW(),joindate) FROM emp;</span><br><span class="line"></span><br><span class="line">-- 2.统计每个员工的工龄</span><br><span class="line">SELECT ename,DATEDIFF(NOW(),joindate)&#x2F;365 FROM emp;</span><br><span class="line"></span><br><span class="line">-- 3.查询2011年入职的员工</span><br><span class="line">SELECT * FROM emp WHERE YEAR(joindate) &#x3D; 2011;</span><br><span class="line"></span><br><span class="line">-- 4.统计入职10年以上的员工信息</span><br><span class="line">SELECT * FROM emp WHERE DATEDIFF(NOW(),joindate)&#x2F;365  &gt; 10;</span><br></pre></td></tr></table></figure>



<h3 id="1-3-数字函数"><a href="#1-3-数字函数" class="headerlink" title="1.3 数字函数"></a>1.3 数字函数</h3><ul>
<li>常用</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.  </span>函数：ABS(x)</span><br><span class="line"><span class="code">	描述：返回 x 的绝对值　　</span></span><br><span class="line"><span class="code">	实例：select abs(-5);</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="bullet">2.  </span>函数：CEIL(x) | FLOOR(x)</span><br><span class="line"><span class="code">	描述：向上（下）取整</span></span><br><span class="line"><span class="code">	实例：select ceil(-13.3);</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="bullet">3.  </span>函数：MOD(x,y)</span><br><span class="line"><span class="code">	描述：返回x mod y的结果，取余</span></span><br><span class="line"><span class="code">	实例：select mod (5,4);</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="bullet">4.  </span>函数：RAND()</span><br><span class="line"><span class="code">	描述：返回 0 到 1 的随机数</span></span><br><span class="line"><span class="code">	实例：select rand();</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="bullet">5.  </span>函数：ROUND(x)</span><br><span class="line"><span class="code">	描述：四舍五入</span></span><br><span class="line"><span class="code">	实例：select round(3.14);</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="bullet">6.  </span>函数：TRUNCATE(x,y)</span><br><span class="line"><span class="code">	描述：返回数值 x 保留到小数点后 y 位的值</span></span><br><span class="line"><span class="code">	实例：select truncate(3.1415926,2);</span></span><br></pre></td></tr></table></figure>

<ul>
<li>练习</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 1.统计每个员工的工龄，超过半年的算一年</span><br><span class="line">SELECT ename, ROUND(DATEDIFF(NOW(),joindate)&#x2F;365) FROM emp;</span><br><span class="line"></span><br><span class="line">-- 2.统计每个部门的平均薪资,保留2位小数</span><br><span class="line">SELECT dept_id, TRUNCATE(AVG(salary),2) FROM emp GROUP BY dept_id;</span><br><span class="line"></span><br><span class="line">-- 3.统计每个部门的平均薪资,小数向上取整</span><br><span class="line">SELECT dept_id, CEIL(AVG(salary)) FROM emp GROUP BY dept_id;</span><br><span class="line"></span><br><span class="line">-- 4.统计每个部门的平均薪资,小数向下取整</span><br><span class="line">SELECT dept_id, FLOOR(AVG(salary)) FROM emp GROUP BY dept_id</span><br></pre></td></tr></table></figure>



<h3 id="1-4-高级函数"><a href="#1-4-高级函数" class="headerlink" title="1.4 高级函数"></a>1.4 高级函数</h3><h4 id="1-4-1-CASE表达式"><a href="#1-4-1-CASE表达式" class="headerlink" title="1.4.1 CASE表达式"></a>1.4.1 CASE表达式</h4><blockquote>
<p>相当于Java中的switch语句</p>
</blockquote>
<ul>
<li>语法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT </span><br><span class="line">	CASE [字段,值] </span><br><span class="line">		WHEN 判断条件1 </span><br><span class="line">			THEN 希望的到的值1</span><br><span class="line">		WHEN 判断条件2 </span><br><span class="line">			THEN 希望的到的值2</span><br><span class="line">		ELSE 前面条件都没有满足情况下得到的值 </span><br><span class="line">	END</span><br><span class="line">FROM</span><br><span class="line">	table_name;</span><br></pre></td></tr></table></figure>

<ul>
<li>练习</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 查询每个员工的工资等级并排序</span><br><span class="line">	-- 工资等级在1显示为 &#39;努力赚钱&#39;</span><br><span class="line">	-- 工资等级在2显示为 &#39;小康生活&#39;</span><br><span class="line">	-- 工资等级在3显示为 &#39;可以娶媳妇&#39;</span><br><span class="line">	-- 工资等级在4显示为 &#39;可以买车&#39;</span><br><span class="line">	-- 工资等级在5显示为 &#39;可以买房&#39;</span><br><span class="line">	-- 工资等级不在以上列表中显示为  &#39;土豪&#39;</span><br><span class="line">	</span><br><span class="line">-- 1.确定表连接关系</span><br><span class="line">SELECT * FROM emp e INNER JOIN salarygrade sg ON e.salary BETWEEN sg.losalary AND sg.hisalary;</span><br><span class="line">-- 2.确定显示字段</span><br><span class="line">SELECT e.ename,e.salary,sg.grade FROM emp e INNER JOIN salarygrade sg ON e.salary BETWEEN sg.losalary AND sg.hisalary;</span><br><span class="line">-- 3.确定业务条件</span><br><span class="line">SELECT </span><br><span class="line">  e.ename,</span><br><span class="line">  e.salary,</span><br><span class="line">  CASE sg.grade </span><br><span class="line">	WHEN 1 THEN &#39;努力赚钱&#39;</span><br><span class="line">	WHEN 2 THEN &#39;小康生活&#39;</span><br><span class="line">	WHEN 3 THEN &#39;可以娶媳妇&#39;</span><br><span class="line">	WHEN 4 THEN &#39;可以买车&#39;</span><br><span class="line">	WHEN 5 THEN &#39;可以买房&#39;</span><br><span class="line">	ELSE &#39;土豪&#39;</span><br><span class="line">  END AS &#39;生活状态&#39;</span><br><span class="line">FROM</span><br><span class="line">  emp e </span><br><span class="line">  INNER JOIN salarygrade sg </span><br><span class="line">    ON e.salary BETWEEN sg.losalary </span><br><span class="line">    AND sg.hisalary ;</span><br></pre></td></tr></table></figure>



<h4 id="1-4-2-IF表达式"><a href="#1-4-2-IF表达式" class="headerlink" title="1.4.2 IF表达式"></a>1.4.2 IF表达式</h4><blockquote>
<p>相当于Java中的三元运算符</p>
</blockquote>
<ul>
<li>语法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT IF(1 &gt; 0,&#39;真&#39;,&#39;假&#39;) from 表名;</span><br></pre></td></tr></table></figure>

<ul>
<li>练习</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 工资+奖金大于20000的员工 显示家有娇妻，否则显示单身狗</span><br><span class="line">SELECT ename, IF((salary +IFNULL(bonus,0))&gt;20000,&#39;买车买房&#39;,&#39;吃糠咽菜&#39;) FROM emp;</span><br></pre></td></tr></table></figure>



<h2 id="二、MySQL综合练习"><a href="#二、MySQL综合练习" class="headerlink" title="二、MySQL综合练习"></a>二、MySQL综合练习</h2><p><img data-src="/img/mysql%E5%87%BD%E6%95%B0%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0.png" alt="mysql函数综合练习"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 1.计算员工的日薪(按22天)，保留二位小数</span><br><span class="line">SELECT ename, TRUNCATE((salary + IFNULL(bonus,0))&#x2F;22,2) AS 日薪 FROM emp;</span><br><span class="line"></span><br><span class="line">-- 2.计算出员工的年薪，并且以年薪排序 降序</span><br><span class="line">SELECT ename,((salary + IFNULL(bonus,0) )*12) AS 年薪 FROM emp ORDER BY 年薪 DESC;</span><br><span class="line"></span><br><span class="line">-- 3.找出奖金少于5000或者没有获得奖金的员工的信息</span><br><span class="line">SELECT * FROM emp WHERE IFNULL(bonus,0)&lt; 5000;</span><br><span class="line"></span><br><span class="line">-- 4.返回员工职务名称及其从事此职务的最低工资</span><br><span class="line">-- 4.1 确定表和连接条件</span><br><span class="line">SELECT * FROM emp e INNER JOIN job j ON e.job_id &#x3D; j.id;</span><br><span class="line">-- 4.2 分组</span><br><span class="line">SELECT j.jname,MIN(e.salary) FROM emp e INNER JOIN job j ON e.job_id &#x3D; j.id GROUP BY j.jname;</span><br><span class="line"></span><br><span class="line">-- 5.返回工龄超过10年，且2月份入职的员工信息</span><br><span class="line">SELECT * FROM emp WHERE DATEDIFF(NOW(),joindate)&#x2F;365 &gt; 10 AND MONTH(joindate) &#x3D; 2;</span><br><span class="line"></span><br><span class="line">-- 6.返回与 林冲 同一年入职的员工</span><br><span class="line">-- 6.1 求出林冲入职时间</span><br><span class="line">SELECT YEAR(joindate) FROM emp WHERE ename &#x3D; &#39;林冲&#39;;</span><br><span class="line">-- 6.2 在查询同年入职员工 </span><br><span class="line">SELECT * FROM emp WHERE YEAR(joindate) &#x3D; (SELECT YEAR(joindate) FROM emp WHERE ename &#x3D; &#39;林冲&#39;);</span><br><span class="line"></span><br><span class="line">-- 7.返回每个员工的名称及其上级领导的名称</span><br><span class="line">SELECT e.ename,m.ename FROM emp e LEFT OUTER JOIN emp m ON e.mgr &#x3D; m.id;</span><br><span class="line"></span><br><span class="line">-- 8.返回工资为二等级（工资等级表）的职员名字（员工表）、部门名称（部门表）</span><br><span class="line">-- 8.1 确定表和连接条件</span><br><span class="line">SELECT * FROM emp e </span><br><span class="line">	INNER JOIN salarygrade sg ON e.salary BETWEEN sg.losalary AND sg.hisalary</span><br><span class="line">	INNER JOIN dept d ON e.dept_id &#x3D; d.id;</span><br><span class="line">-- 8.2 确定显示字段</span><br><span class="line">SELECT </span><br><span class="line">	e.ename,</span><br><span class="line">	sg.grade,</span><br><span class="line">	d.dname</span><br><span class="line">FROM emp e </span><br><span class="line">	INNER JOIN salarygrade sg ON e.salary BETWEEN sg.losalary AND sg.hisalary</span><br><span class="line">	INNER JOIN dept d ON e.dept_id &#x3D; d.id;</span><br><span class="line">-- 8.3 确定业务条件</span><br><span class="line">SELECT </span><br><span class="line">	e.ename,</span><br><span class="line">	sg.grade,</span><br><span class="line">	d.dname</span><br><span class="line">FROM emp e </span><br><span class="line">	INNER JOIN salarygrade sg ON e.salary BETWEEN sg.losalary AND sg.hisalary</span><br><span class="line">	INNER JOIN dept d ON e.dept_id &#x3D; d.id</span><br><span class="line">	WHERE sg.grade &#x3D; 2;</span><br><span class="line"></span><br><span class="line">-- 9.涨工资：董事长2000 经理1500 其他800</span><br><span class="line">-- 9.1 确定几张表和连接条件</span><br><span class="line">SELECT * FROM emp e INNER JOIN job j ON e.job_id &#x3D; j.id;</span><br><span class="line">-- 9.2 确定显示字段</span><br><span class="line">SELECT </span><br><span class="line">	e.ename,</span><br><span class="line">	j.jname,</span><br><span class="line">	e.salary AS 涨前,</span><br><span class="line">	CASE j.jname</span><br><span class="line">		WHEN &#39;董事长&#39; THEN e.salary+2000</span><br><span class="line">		WHEN &#39;经理&#39; THEN e.salary+1500</span><br><span class="line">		ELSE e.salary+800</span><br><span class="line">	END AS 涨后</span><br><span class="line"> FROM emp e INNER JOIN job j ON e.job_id &#x3D; j.id;</span><br></pre></td></tr></table></figure>



<h2 id="三、用户权限DCL"><a href="#三、用户权限DCL" class="headerlink" title="三、用户权限DCL"></a>三、用户权限DCL</h2><blockquote>
<p>操作用户权限的职责一般有DBA（DataBase  Adminisitrator）完成</p>
</blockquote>
<ul>
<li>权限操作相关操作</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>创建用户</span><br><span class="line"><span class="code">	语法：</span></span><br><span class="line"><span class="code">		create user '用户名'@'主机名' identified by '密码';</span></span><br><span class="line"><span class="code">	注意：</span></span><br><span class="line"><span class="code">		主机名</span></span><br><span class="line"><span class="code">			指定ip地址</span></span><br><span class="line"><span class="code">			%：任意地址都可以访问</span></span><br><span class="line"><span class="code">		</span></span><br><span class="line"><span class="bullet">2. </span>授权用户</span><br><span class="line"><span class="code">	语法：</span></span><br><span class="line"><span class="code">		grant 权限1,权限2... on 数据库名.表名 to '用户名'@'主机名';</span></span><br><span class="line"><span class="code">	注意：</span></span><br><span class="line"><span class="code">		权限：</span></span><br><span class="line"><span class="code">			select、insert、update、delete、alter、create....</span></span><br><span class="line"><span class="code">			all</span></span><br><span class="line"><span class="code">			数据库名.*</span></span><br><span class="line"><span class="code">		</span></span><br><span class="line"><span class="bullet">3. </span>查看权限</span><br><span class="line"><span class="code">	语法：</span></span><br><span class="line"><span class="code">		show grants for '用户名'@'主机名'; </span></span><br><span class="line"><span class="code">		</span></span><br><span class="line"><span class="bullet">4. </span>撤销授权</span><br><span class="line"><span class="code">	语法：</span></span><br><span class="line"><span class="code">		revoke 权限1,权限2... on 数据库名.表名 from '用户名'@'主机名'; </span></span><br><span class="line"><span class="code">	注意：</span></span><br><span class="line"><span class="code">		权限：</span></span><br><span class="line"><span class="code">			select、insert、update、delete、alter、create....</span></span><br><span class="line"><span class="code">			all</span></span><br><span class="line"><span class="code">			数据库名.*</span></span><br><span class="line"><span class="code">		</span></span><br><span class="line"><span class="bullet">5. </span>删除用户</span><br><span class="line"><span class="code">	语法：</span></span><br><span class="line"><span class="code">		drop user '用户名'@'主机名';</span></span><br><span class="line"><span class="bullet">6. </span>密码管理</span><br><span class="line"><span class="code">	1.超级管理员</span></span><br><span class="line"><span class="code">		set password for '用户名'@'主机名'=password('新密码');</span></span><br><span class="line"><span class="code">	2.普通用户</span></span><br><span class="line"><span class="code">		set password=password('新密码');</span></span><br></pre></td></tr></table></figure>

<ul>
<li>操作演示</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 创建一个用户</span><br><span class="line">CREATE USER &#39;ss&#39;@&#39;%&#39;  IDENTIFIED BY &#39;123&#39;;</span><br><span class="line"></span><br><span class="line">-- 授权</span><br><span class="line">GRANT SELECT ON tcldb.emp TO &#39;ss&#39;@&#39;%&#39;;</span><br><span class="line"></span><br><span class="line">-- 查看权限</span><br><span class="line">SHOW GRANTS FOR &#39;ss&#39;@&#39;%&#39;;</span><br><span class="line"></span><br><span class="line">-- 撤销权限</span><br><span class="line">REVOKE ALL ON tcldb.emp FROM &#39;ss&#39;@&#39;%&#39;;</span><br><span class="line"></span><br><span class="line">-- 帮ss用户修改密码</span><br><span class="line">SET PASSWORD FOR &#39;ss&#39;@&#39;%&#39; &#x3D; PASSWORD(&#39;333&#39;);</span><br><span class="line"></span><br><span class="line">-- 删除用户</span><br><span class="line">DROP USER &#39;ss&#39;@&#39;%&#39;;</span><br></pre></td></tr></table></figure>



<h2 id="四、MySQL性能"><a href="#四、MySQL性能" class="headerlink" title="四、MySQL性能"></a>四、MySQL性能</h2><h3 id="4-1-分析-数据库查询效率低下"><a href="#4-1-分析-数据库查询效率低下" class="headerlink" title="4.1 分析-数据库查询效率低下"></a>4.1 分析-数据库查询效率低下</h3><p>进入企业后通常只关注业务和功能，反而忽略了性能，随着系统运行时间增加，数据库数据也在增长，那么执行数据库查询的时候性能会越来越慢。</p>
<blockquote>
<p>两个方面优化数据库的方式</p>
<ul>
<li>硬件优化</li>
<li>软件优化：单体应用架构（索引）、分库分片、读写分离</li>
</ul>
</blockquote>
<h3 id="4-2-分析-效率低下的sql"><a href="#4-2-分析-效率低下的sql" class="headerlink" title="4.2 分析-效率低下的sql"></a>4.2 分析-效率低下的sql</h3><p>MySQL有记录sql执行时长的能力，我们只需要设置一个阈值，一旦某条SQL执行时间大于了这个阈值，MySQL就会将其记录到日志文件中，称为慢日志。</p>
<blockquote>
<p>企业开发时通常使用第三方技术来监控sql的慢查询日志…</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 1 查看慢查询日志开启情况（mysql默认是关闭）</span><br><span class="line">	show variables like &#39;%slow_query_log%&#39;;</span><br><span class="line"></span><br><span class="line">-- 2 开启慢查询日志</span><br><span class="line">	set global slow_query_log &#x3D; on;</span><br><span class="line"></span><br><span class="line">-- 3 查看慢查询时间配置(MySQL默认慢查询的记录时间为10秒)</span><br><span class="line">	show variables like &#39;%long_query_time%&#39;;</span><br><span class="line"></span><br><span class="line">-- 4 修改慢查询的记录时间【临时修改】</span><br><span class="line">	set long_query_time&#x3D;3;</span><br></pre></td></tr></table></figure>

<p><img data-src="/img/%E5%BC%80%E5%90%AFmysql%E7%9A%84%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97.png" alt="开启mysql的慢查询日志"></p>
<h3 id="4-3-监控-效率低的sql"><a href="#4-3-监控-效率低的sql" class="headerlink" title="4.3 监控-效率低的sql"></a>4.3 监控-效率低的sql</h3><ul>
<li>数据准备：插入千万数据</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database mysql_performance;</span><br><span class="line">use mysql_performance;</span><br><span class="line">-- 1. 准备表</span><br><span class="line">CREATE TABLE &#96;user&#96;(</span><br><span class="line">	id INT,</span><br><span class="line">	username VARCHAR(32),</span><br><span class="line">	&#96;password&#96; VARCHAR(32),</span><br><span class="line">	sex VARCHAR(6),</span><br><span class="line">	email VARCHAR(50)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 2. 创建存储过程，实现批量插入记录</span><br><span class="line">DELIMITER $$ -- 声明存储过程的结束符号为$$</span><br><span class="line">CREATE PROCEDURE auto_insert()</span><br><span class="line">BEGIN</span><br><span class="line">    DECLARE i INT DEFAULT 1;</span><br><span class="line">	START TRANSACTION; -- 开启事务</span><br><span class="line">    WHILE(i&lt;&#x3D;10000000)DO</span><br><span class="line">        INSERT INTO &#96;user&#96; VALUES(i,CONCAT(&#39;jack&#39;,i),MD5(i),&#39;male&#39;,CONCAT(&#39;jack&#39;,i,&#39;@itcast.cn&#39;));</span><br><span class="line">        SET i&#x3D;i+1;</span><br><span class="line">    END WHILE;</span><br><span class="line">	COMMIT; -- 提交</span><br><span class="line">END$$ -- 声明结束</span><br><span class="line">DELIMITER ; -- 重新声明分号为结束符号</span><br><span class="line"></span><br><span class="line">-- 3. 查看存储过程</span><br><span class="line">SHOW CREATE PROCEDURE auto_insert;</span><br><span class="line"></span><br><span class="line">-- 4. 调用存储过程</span><br><span class="line">CALL auto_insert();</span><br></pre></td></tr></table></figure>



<blockquote>
<p>执行sql，耗时</p>
</blockquote>
<p><img data-src="/img/%E6%8F%92%E5%85%A5%E5%8D%83%E4%B8%87%E6%95%B0%E6%8D%AE%E8%80%97%E6%97%B6.png" alt="插入千万数据耗时"></p>
<blockquote>
<p>测试千万记录的查询耗时</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 根据id查询</span><br><span class="line">select * from user where id &#x3D; 9999;</span><br></pre></td></tr></table></figure>

<p><img data-src="/img/%E6%B5%8B%E8%AF%95%E5%8D%83%E4%B8%87%E8%AE%B0%E5%BD%95%E6%9F%A5%E8%AF%A2%E8%80%97%E6%97%B6.png" alt="测试千万记录查询耗时"></p>
<blockquote>
<p>慢查询日志文件分析</p>
</blockquote>
<p><img data-src="/img/%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90.png" alt="慢查询日志分析"></p>
<h2 id="五、MySQL索引"><a href="#五、MySQL索引" class="headerlink" title="五、MySQL索引"></a>五、MySQL索引</h2><h3 id="5-1-什么是索引"><a href="#5-1-什么是索引" class="headerlink" title="5.1 什么是索引"></a>5.1 什么是索引</h3><p>在现实生活中，我们都去过图书馆查阅图书。</p>
<p>现在我们将所有图书杂乱无章的摆放在一起，那么找一本书就像大海捞针一样效率非常低。</p>
<p>如果我们按分类整理排序后，根据类别去找对应的图书那么效率就很高了。其实这个整理排序的过程就是<span style="color:red">索引</span>。</p>
<p><img data-src="/img/mysql%E7%B4%A2%E5%BC%951.png" alt="mysql索引1"></p>
<p>MySQL索引的建立对于MySQL的高效运行是很重要的，索引可以大大提高MySQL的检索速度。</p>
<p>如果合理的设计且使用索引的MySQL是兰博基尼的话，那么没有设计和使用索引的MySQL就是人力三轮车。</p>
<p><img data-src="/img/mysql%E7%B4%A2%E5%BC%952.png" alt="mysql索引2"></p>
<h3 id="5-2-索引分类"><a href="#5-2-索引分类" class="headerlink" title="5.2 索引分类"></a>5.2 索引分类</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>主键（约束）索引</span><br><span class="line"><span class="code">	主键字段 要求：唯一且非空，增加查询速度</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>唯一（约束）索引</span><br><span class="line"><span class="code">	唯一字段 要求：唯一，增加查询速度</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="bullet">* </span>普通索引</span><br><span class="line"><span class="code">	仅提高查询速度</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>组合索引</span><br><span class="line"><span class="code">	相当于联合主键，将多个字段组成一个索引，提高查询速度</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>hash索引（了解）</span><br><span class="line"><span class="code">	提高查询速度</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="bullet">* </span>倒排索引</span><br></pre></td></tr></table></figure>



<h3 id="5-3-MySQL索引语法"><a href="#5-3-MySQL索引语法" class="headerlink" title="5.3 MySQL索引语法"></a>5.3 MySQL索引语法</h3><h4 id="5-3-1-创建索引"><a href="#5-3-1-创建索引" class="headerlink" title="5.3.1 创建索引"></a>5.3.1 创建索引</h4><h5 id="①-直接创建"><a href="#①-直接创建" class="headerlink" title="① 直接创建"></a>① 直接创建</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 创建普通索引</span><br><span class="line">create index 索引名 on 表名(字段);</span><br><span class="line"></span><br><span class="line">-- 创建唯一索引</span><br><span class="line">create unique index 索引名 on 表名(字段);</span><br><span class="line"></span><br><span class="line">-- 创建普通组合索引</span><br><span class="line">create index 索引名 on 表名(字段1,字段2);</span><br><span class="line"></span><br><span class="line">-- 创建唯一组合索引</span><br><span class="line">create unique index 索引名 on 表名(字段1,字段2);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>演示</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE student1(</span><br><span class="line">  id INT,</span><br><span class="line">  username VARCHAR(30),</span><br><span class="line">  telephone VARCHAR(30),</span><br><span class="line">  sex VARCHAR(5)</span><br><span class="line">);</span><br><span class="line">-- 为username创建普通索引</span><br><span class="line">CREATE INDEX username_idx ON student1(username);</span><br><span class="line"></span><br><span class="line">-- 为telephone创建唯一索引</span><br><span class="line">CREATE UNIQUE INDEX tel_un_idx ON student1(telephone);</span><br><span class="line"></span><br><span class="line">-- 为username  telephone  sex 设置唯一联合索引</span><br><span class="line">CREATE UNIQUE INDEX uts_un_idx ON student1(username,telephone,sex);</span><br></pre></td></tr></table></figure>



<h5 id="②-修改表时指定"><a href="#②-修改表时指定" class="headerlink" title="② 修改表时指定"></a>② 修改表时指定</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 添加主键索引</span><br><span class="line">alter table 表名 add primary key(字段);  -- 默认索引名：primary</span><br><span class="line"></span><br><span class="line">-- 添加唯一索引</span><br><span class="line">alter table 表名 add unique(字段);  -- 默认索引名：字段名</span><br><span class="line"></span><br><span class="line">-- 添加普通索引</span><br><span class="line">alter table 表名 add index(字段); -- 默认索引名：字段名</span><br></pre></td></tr></table></figure>

<blockquote>
<p>演示</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE student2(</span><br><span class="line">  id INT,</span><br><span class="line">  username VARCHAR(30),</span><br><span class="line">  telephone VARCHAR(30),</span><br><span class="line">  sex CHAR(2)</span><br><span class="line">);</span><br><span class="line">-- 为id设置主键索引</span><br><span class="line">ALTER TABLE student2 ADD PRIMARY KEY (id);</span><br><span class="line"></span><br><span class="line">-- 为telephone设置唯一索引</span><br><span class="line">ALTER TABLE student2 ADD UNIQUE (telephone);</span><br><span class="line"></span><br><span class="line">-- 为username 设置普通索引</span><br><span class="line">ALTER TABLE student2 ADD INDEX(username);</span><br></pre></td></tr></table></figure>



<h5 id="③-创建表时指定"><a href="#③-创建表时指定" class="headerlink" title="③ 创建表时指定"></a>③ 创建表时指定</h5><blockquote>
<p>演示</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 创建表并指定合理的索引字段</span><br><span class="line">CREATE TABLE teacher(</span><br><span class="line"> id INT PRIMARY KEY AUTO_INCREMENT, -- 主键索引</span><br><span class="line"> username VARCHAR(32), </span><br><span class="line"> telephone VARCHAR(11) UNIQUE, -- 唯一索引</span><br><span class="line"> sex VARCHAR(5),</span><br><span class="line"> INDEX(username) -- 普通索引</span><br><span class="line">);</span><br></pre></td></tr></table></figure>



<h3 id="5-4-索引效果演示"><a href="#5-4-索引效果演示" class="headerlink" title="5.4 索引效果演示"></a>5.4 索引效果演示</h3><p>查询千万记录有无索引对比</p>
<blockquote>
<p>无索引</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 根据id </span><br><span class="line">select * from user where id &#x3D; 1234567;</span><br><span class="line">-- 根据用户名</span><br><span class="line">select * from user where username &#x3D; &#39;jack1234567&#39;;</span><br><span class="line">-- 根据邮箱模糊查询</span><br><span class="line">select * from user where email like &#39;jack123456%&#39;;</span><br></pre></td></tr></table></figure>

<p><img data-src="/img/%E6%97%A0%E7%B4%A2%E5%BC%95%E6%A3%80%E7%B4%A2%E5%8D%83%E4%B8%87%E8%AE%B0%E5%BD%95.png" alt="无索引检索千万记录"></p>
<blockquote>
<p>添加索引，再次测试</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- id 使用主键索引</span><br><span class="line">ALTER TABLE &#96;user&#96; ADD PRIMARY KEY(id);</span><br><span class="line">-- username 普通索引</span><br><span class="line">ALTER TABLE &#96;user&#96; ADD INDEX(username);</span><br><span class="line">-- email 使用唯一索引</span><br><span class="line">ALTER TABLE &#96;user&#96; ADD  UNIQUE(email);</span><br></pre></td></tr></table></figure>

<p><img data-src="/img/%E6%9C%89%E7%B4%A2%E5%BC%95%E6%A3%80%E7%B4%A2%E5%8D%83%E4%B8%87%E8%AE%B0%E5%BD%95.png" alt="有索引检索千万记录"></p>
<h3 id="5-5-索引的优缺点"><a href="#5-5-索引的优缺点" class="headerlink" title="5.5 索引的优缺点"></a>5.5 索引的优缺点</h3><p><strong>优点</strong></p>
<ul>
<li>类似大学图书馆建书目索引，提高数据检索的效率，降低数据库的IO成本。</li>
<li>通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗。</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>实际上索引也是表中的一部分，所以索引列也是要占用空间</li>
<li>虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE时，需要重写对索引进行排序整理</li>
</ul>
<h3 id="5-6-索引创建原则"><a href="#5-6-索引创建原则" class="headerlink" title="5.6 索引创建原则"></a>5.6 索引创建原则</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>经常搜索的字段，where</span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>经常排序的字段，order by</span><br><span class="line"></span><br><span class="line"><span class="bullet">3. </span>经常分组的字段，group by （内容可识别率不能低于70%）</span><br><span class="line"></span><br><span class="line"><span class="bullet">4. </span>多表连接的字段，主键 和 外键</span><br></pre></td></tr></table></figure>



<h3 id="5-7-常见索引失效情况"><a href="#5-7-常见索引失效情况" class="headerlink" title="5.7 常见索引失效情况"></a>5.7 常见索引失效情况</h3><ul>
<li>使用like模糊匹配，%通配符在最左侧使用时</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 1.使用like模糊匹配，%通配符在最左侧使用时</span><br><span class="line">select * from user where username like &#39;jack123456%&#39;;</span><br><span class="line">select * from user where username like &#39;%jack123456&#39;; -- 全表扫描</span><br></pre></td></tr></table></figure>

<ul>
<li>尽量避免使用or，如果条件有一个没有索引，那么会进行全表扫描</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 2.尽量避免使用or，如果条件有一个没有索引，那么会进行全表扫描</span><br><span class="line">select * from user where username &#x3D; &#39;jack123&#39; or password &#x3D; &#39;d8e423a9d5eb97da9e2d58cd57b92808&#39;;</span><br></pre></td></tr></table></figure>

<ul>
<li>在索引列上进行计算</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 3.在索引列上进行计算</span><br><span class="line">select * from user where id + 1 &#x3D; 10;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用 !=、 &lt;&gt;、 not in、is not null时</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 4.使用 !&#x3D;、 &lt;&gt;、 not in、is not null时</span><br><span class="line">select * from user where id is not null;</span><br></pre></td></tr></table></figure>

<ul>
<li>组合索引，最左优先原则</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 5.组合索引，最左优先原则</span><br><span class="line">alter table user add unique(id,password);</span><br><span class="line"></span><br><span class="line">select * from user where id &#x3D; 1 and password &#x3D; &#39;c4ca4238a0b923820dcc509a6f75849b&#39;; -- 有效</span><br><span class="line">select * from user where id &#x3D; 1 ; -- 有效</span><br><span class="line">select * from user where  password &#x3D; &#39;c4ca4238a0b923820dcc509a6f75849b&#39;; -- 失效</span><br></pre></td></tr></table></figure>



<h3 id="5-8-索引的数据结构"><a href="#5-8-索引的数据结构" class="headerlink" title="5.8 索引的数据结构"></a>5.8 索引的数据结构</h3><h4 id="5-8-1-概述"><a href="#5-8-1-概述" class="headerlink" title="5.8.1 概述"></a>5.8.1 概述</h4><p>我们知道<strong>索引</strong>是帮助MySQL高效获取<strong>排好序</strong>的<strong>数据结构</strong>。</p>
<p>为什么使用索引后查询效率提高很多呢？接下来我们来了解下：</p>
<p><img data-src="/img/%E7%B4%A2%E5%BC%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%A6%82%E8%BF%B01.png" alt="索引数据结构概述1"></p>
<p>在没有索引的情况下我们执行一条sql语句，那么是表进行全局遍历，磁盘寻址（注意逻辑上相邻的记录在磁盘上也并不是一定物理相邻的）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select  * from user where col1&#x3D;6;</span><br></pre></td></tr></table></figure>

<p><img data-src="/img/%E7%B4%A2%E5%BC%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%A6%82%E8%BF%B02.png" alt="索引数据结构概述2"></p>
<p>为了加快的查找效率，可以维护一个右边所示的二叉查找树，每个节点分别包含索引键值和一个指向对应数据记录物理地址的指针，这样就可以运用二叉查找快速获取到相应数据。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select  * from user where col2&#x3D;59;</span><br></pre></td></tr></table></figure>



<h4 id="5-8-2-索引的数据结构"><a href="#5-8-2-索引的数据结构" class="headerlink" title="5.8.2 索引的数据结构"></a>5.8.2 索引的数据结构</h4><ul>
<li>二叉树：对于当前父节点，左分支节点元素小，右分支节点元素大</li>
</ul>
<p><img data-src="/img/%E7%B4%A2%E5%BC%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E4%BA%8C%E5%8F%89%E6%A0%91.png" alt="索引数据结构——二叉树"></p>
<ul>
<li>红黑树：红黑树是一种平衡二叉树，目的是寻求左右分支长度的平衡（左旋、右旋）</li>
</ul>
<p><img data-src="/img/%E7%B4%A2%E5%BC%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E7%BA%A2%E9%BB%91%E6%A0%91.png" alt="索引数据结构——红黑树"></p>
<ul>
<li>BTree：多叉平衡查找树，每个节点都可以存放多个数据，可以有效减少层数</li>
</ul>
<p><img data-src="/img/%E7%B4%A2%E5%BC%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94BTree.png" alt="索引数据结构——BTree"></p>
<ul>
<li>B+Tree：针对于BTree的优化，数据只存储在叶子节点上，非叶子节点只存储索引和指针</li>
</ul>
<p><img data-src="/img/%E7%B4%A2%E5%BC%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94B+Tree.png" alt="索引数据结构——B+Tree"></p>
<ul>
<li>Hash（了解）：单值查询速度极快，不能实现排序和范围查找</li>
</ul>
<p><img data-src="/img/%E7%B4%A2%E5%BC%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94hash.png" alt="索引数据结构——hash"></p>
<blockquote>
<p>小贴士：</p>
<ul>
<li>数据结构学习网站：<a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html" target="_blank" rel="noopener">https://www.cs.usfca.edu/~galles/visualization/Algorithms.html</a></li>
</ul>
</blockquote>
<h4 id="5-8-3-MySQL中的B-Tree"><a href="#5-8-3-MySQL中的B-Tree" class="headerlink" title="5.8.3 MySQL中的B+Tree"></a>5.8.3 MySQL中的B+Tree</h4><blockquote>
<p>MySQL数据库默认将所有表的顶级节点加载内存，所以进一步减少了磁盘IO</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看mysql索引节点大小</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'innodb_page_size'</span>;</span><br></pre></td></tr></table></figure>

<p>MySQL中的 B+Tree 索引结构示意图：</p>
<p><img data-src="/img/mysql%E4%B8%AD%E7%9A%84B+Tree.png" alt="mysql中的B+Tree"></p>
<h3 id="5-9-数据库（表）的存储引擎"><a href="#5-9-数据库（表）的存储引擎" class="headerlink" title="5.9 数据库（表）的存储引擎"></a>5.9 数据库（表）的存储引擎</h3><p>MySQL存储引擎的不同，那么索引文件保存的方式也有所不同，常见的有二种存储引擎<strong>MyISAM</strong>和<strong>InnoDB</strong>。</p>
<ul>
<li>可以通过查看mysql的配置文件my.ini，查询默认的存储引擎：</li>
</ul>
<p><img data-src="/img/%E6%9F%A5%E7%9C%8Bmysql%E9%BB%98%E8%AE%A4%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E.png" alt="查看mysql默认存储引擎"></p>
<h4 id="5-9-1-MyISAM"><a href="#5-9-1-MyISAM" class="headerlink" title="5.9.1 MyISAM"></a>5.9.1 MyISAM</h4><p>MySQL5.5之前默认使用的存储引擎，不支持事务和外键约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> haha(</span><br><span class="line"> <span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line"> <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">32</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=MYISAM;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>MyISAM存储引擎表的文件</p>
</blockquote>
<p><img data-src="/img/MyISAM%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E8%A1%A8%E7%9A%84%E6%96%87%E4%BB%B6.png" alt="MyISAM存储引擎表的文件"></p>
<blockquote>
<p>MyISAM存储索引方式</p>
</blockquote>
<p><img data-src="/img/MyISAM%E5%AD%98%E5%82%A8%E7%B4%A2%E5%BC%95%E6%96%B9%E5%BC%8F.png" alt="MyISAM存储索引方式"></p>
<h4 id="5-9-2-InnoDB"><a href="#5-9-2-InnoDB" class="headerlink" title="5.9.2 InnoDB"></a>5.9.2 InnoDB</h4><p>MySQL5.5之后默认使用的存储引擎，支持事务和外键约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> hehe(</span><br><span class="line"> <span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line"> <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">32</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>InnoDB存储引擎表的文件</p>
</blockquote>
<p><img data-src="/img/InnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E8%A1%A8%E7%9A%84%E6%96%87%E4%BB%B6.png" alt="InnoDB存储引擎表的文件"></p>
<blockquote>
<p>InnoFB存储索引方式——主键索引</p>
</blockquote>
<p><img data-src="/img/InnoDB%E5%AD%98%E5%82%A8%E7%B4%A2%E5%BC%95%E6%96%B9%E5%BC%8F%E2%80%94%E2%80%94%E4%B8%BB%E9%94%AE%E7%B4%A2%E5%BC%95.png" alt="InnoDB存储索引方式"></p>
<blockquote>
<p>普通索引依赖于主键索引</p>
</blockquote>
<p><img data-src="/img/InnoDB%E5%AD%98%E5%82%A8%E7%B4%A2%E5%BC%95%E6%96%B9%E5%BC%8F%E2%80%94%E2%80%94%E6%99%AE%E9%80%9A%E7%B4%A2%E5%BC%95.png" alt="InnoDB存储索引方式——普通索引"></p>
<h3 id="5-10-MySQL面试题"><a href="#5-10-MySQL面试题" class="headerlink" title="5.10 MySQL面试题"></a>5.10 MySQL面试题</h3><p><strong>为什么InnoDB表必须有主键，并且推荐使用整型的自增主键？</strong></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>innodb保存数据时必须依赖B+Tree 如果不指定主键索引，自动生成一个，浪费磁盘空间，也没有提高查询效率</span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>主键使用整型且自增，整型比较速度快，插入数据时，减少树的裂变，提高插入效率....</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL函数</tag>
        <tag>用户权限操作</tag>
        <tag>MySQL性能</tag>
        <tag>MySQL索引</tag>
        <tag>MySQL索引的数据结构</tag>
        <tag>MySQL表的存储引擎</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL多表查询&amp;子查询&amp;事务</title>
    <url>/2020/09/02/MySQL%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2-%E5%AD%90%E6%9F%A5%E8%AF%A2-%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<h2 id="一、表关系"><a href="#一、表关系" class="headerlink" title="一、表关系"></a>一、表关系</h2><h3 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h3><p>现实生活中，（班级）实体与（学生）实体之间肯定是有关系的，那么我们在设计表的时候，就应该体现出（班级）表与（学生）表之间的这种关系！</p>
<p>我们把这种数据库称为<span style="color:red">关系型数据库（RDBMS）</span>，在数据库设计上，表关系分为三种：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>一对多（多对一）</span><br><span class="line"><span class="code">	应用场景：</span></span><br><span class="line"><span class="code">		班级和学生、部门和员工</span></span><br><span class="line"><span class="code">	解释：</span></span><br><span class="line"><span class="code">		一个班级内有多名同学，多名同学都属于某一个班级</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>多对多</span><br><span class="line"><span class="code">	应用场景：</span></span><br><span class="line"><span class="code">		学生和课程、学生和老师</span></span><br><span class="line"><span class="code">	解释：</span></span><br><span class="line"><span class="code">		一名同学可以选修多门课程，一门课程可以被多名同学选修</span></span><br><span class="line"><span class="code">		</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">3. </span>一对一（一般情况下可以单表实现，有时候需要进行抽取）</span><br><span class="line"><span class="code">	应用场景：</span></span><br><span class="line"><span class="code">		公民和身份证号、商品和详情</span></span><br><span class="line"><span class="code">	解释：</span></span><br><span class="line"><span class="code">		一个公民只有一个对应的身份证号、一个身份证号只对应一个公民</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="1-2-实现"><a href="#1-2-实现" class="headerlink" title="1.2 实现"></a>1.2 实现</h3><h4 id="1-2-1-一对多"><a href="#1-2-1-一对多" class="headerlink" title="1.2.1 一对多"></a>1.2.1 一对多</h4><blockquote>
<p>班级和学生</p>
</blockquote>
<p><strong>关系图</strong></p>
<p><img data-src="/img/%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%85%B3%E7%B3%BB.png" alt="一对多关系"></p>
<p>表关系描述：</p>
<ul>
<li>通常把一的一方称为：<code>主表</code>或<code>一表</code></li>
<li>通常把多的一方称为：<code>从表</code>或<code>多表</code></li>
</ul>
<p><strong>一对多关系建表原则：</strong></p>
<ul>
<li>在从表中，田间一个字段(主表_id)类型与主表的主键一致，这个字段我们称之为外键，通过主外键关联，建立两张表的<code>一对多关系</code>。</li>
</ul>
<p>sql实现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#-- 一对多 （班级——学生）--#</span><br><span class="line">CREATE DATABASE mysql_1;</span><br><span class="line">USE mysql_1;</span><br><span class="line">-- 班级表：主表(一)</span><br><span class="line">CREATE TABLE class(</span><br><span class="line">  id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">  &#96;name&#96; VARCHAR(32)</span><br><span class="line">);</span><br><span class="line">INSERT INTO class VALUES(1,&#39;一班&#39;);</span><br><span class="line">INSERT INTO class VALUES(2,&#39;二班&#39;);</span><br><span class="line">-- 学生表：从表(多)</span><br><span class="line">CREATE TABLE stu(</span><br><span class="line">  id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">  &#96;name&#96; VARCHAR(32),</span><br><span class="line">  class_id INT -- 外键字段</span><br><span class="line">);</span><br><span class="line">-- 插入数据</span><br><span class="line">INSERT INTO stu VALUES(1,&#39;张三&#39;,1);</span><br><span class="line">INSERT INTO stu VALUES(2,&#39;李四&#39;,1);</span><br><span class="line">INSERT INTO stu VALUES(3,&#39;王五&#39;,2);</span><br><span class="line">INSERT INTO stu VALUES(4,&#39;赵六&#39;,1);</span><br><span class="line"></span><br><span class="line">-- 给学生表，添加外键约束</span><br><span class="line">ALTER TABLE student ADD CONSTRAINT class_id_fk FOREIGN KEY(class_id) REFERENCES class(id);</span><br><span class="line"></span><br><span class="line">-- 删除学生表的外键约束</span><br><span class="line">ALTER TABLE student DROP FOREIGN KEY class_id_fk;</span><br><span class="line"></span><br><span class="line">#-- 一对多 （班级——学生）--#</span><br></pre></td></tr></table></figure>



<h4 id="1-2-2-多对多"><a href="#1-2-2-多对多" class="headerlink" title="1.2.2 多对多"></a>1.2.2 多对多</h4><blockquote>
<p>举例：学生和课程</p>
</blockquote>
<p><strong>关系图</strong></p>
<p><img data-src="/img/%E5%A4%9A%E5%AF%B9%E5%A4%9A%E5%85%B3%E7%B3%BB.png" alt="多对多关系"></p>
<p><strong>多对多关系建表原则：</strong></p>
<ul>
<li>建立多对多的关系时，需要创建第三张表，又称为中间表，至少要有两个外键字段，分别指向各自主表的主键，通常还会把两个字段设置成联合主键，建立两张表的<code>多对多关系</code>。</li>
</ul>
<p>sql实现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#-- 多对多（学生——课程） --#</span><br><span class="line">-- 学生表（主表，已存在）</span><br><span class="line">-- 课程表：主表</span><br><span class="line">CREATE TABLE course(</span><br><span class="line">  id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">  NAME VARCHAR(32)</span><br><span class="line">);</span><br><span class="line">INSERT INTO course VALUES(NULL,&#39;java&#39;);</span><br><span class="line">INSERT INTO course VALUES(NULL,&#39;php&#39;);</span><br><span class="line">INSERT INTO course VALUES(NULL,&#39;python&#39;);</span><br><span class="line">INSERT INTO course VALUES(NULL,&#39;javascript&#39;);</span><br><span class="line"></span><br><span class="line">-- 中间表：从表</span><br><span class="line">CREATE TABLE sc(</span><br><span class="line"> s_id INT,</span><br><span class="line"> c_id INT,</span><br><span class="line"> PRIMARY KEY(s_id,c_id),	-- 联合主键</span><br><span class="line"> CONSTRAINT s_id_fk FOREIGN KEY(s_id) REFERENCES stu(id),	-- 学生表外键约束</span><br><span class="line"> CONSTRAINT c_id_fk FOREIGN KEY(c_id) REFERENCES course(id)	-- 课程表外键约束</span><br><span class="line">);</span><br><span class="line">-- 插入数据</span><br><span class="line">INSERT INTO sc VALUES(1,1);</span><br><span class="line">INSERT INTO sc VALUES(1,3);</span><br><span class="line">INSERT INTO sc VALUES(2,2);</span><br><span class="line">INSERT INTO sc VALUES(2,5);</span><br><span class="line">INSERT INTO sc VALUES(3,4);</span><br><span class="line">INSERT INTO sc VALUES(4,1);</span><br><span class="line">INSERT INTO sc VALUES(4,5);</span><br><span class="line">INSERT INTO sc VALUES(5,2);</span><br><span class="line">#-- 多对多（学生——课程） --#</span><br></pre></td></tr></table></figure>



<h4 id="1-2-3-一对一"><a href="#1-2-3-一对一" class="headerlink" title="1.2.3 一对一"></a>1.2.3 一对一</h4><blockquote>
<p>一般情况下，一对一其实可以设计为一张表来实现，个别字段过大，影响查询性能，我们才会拆分二张表，建立一一对应关系</p>
</blockquote>
<blockquote>
<p>举例：商品和详情</p>
</blockquote>
<p><strong>关系图</strong></p>
<p>两种建立一对一方式：</p>
<p><img data-src="/img/%E4%B8%80%E5%AF%B9%E4%B8%80%E5%85%B3%E7%B3%BB1.png" alt="一对一关系1"></p>
<p><img data-src="/img/%E4%B8%80%E5%AF%B9%E4%B8%80%E5%85%B3%E7%B3%BB2.png" alt="一对一关系2"></p>
<blockquote>
<p>推荐第二种，主键字段当作外键来使用</p>
</blockquote>
<p>sql实现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#-- 一对一（商品——商品描述） --#</span><br><span class="line">-- 商品表（主表）</span><br><span class="line">CREATE TABLE product(</span><br><span class="line">  id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">  NAME VARCHAR(32)</span><br><span class="line">);</span><br><span class="line">INSERT INTO product VALUES(NULL,&#39;MI10&#39;);</span><br><span class="line">INSERT INTO product VALUES(NULL,&#39;MInote3&#39;);</span><br><span class="line">INSERT INTO product VALUES(NULL,&#39;HuaweiP40&#39;);</span><br><span class="line">INSERT INTO product VALUES(NULL,&#39;VivoX20&#39;);</span><br><span class="line">-- 详情表（从表）</span><br><span class="line">CREATE TABLE p_desc(</span><br><span class="line">  id INT PRIMARY KEY AUTO_INCREMENT,	-- 主键作为外键</span><br><span class="line">  description VARCHAR(255),</span><br><span class="line">  CONSTRAINT id_fk FOREIGN KEY(id) REFERENCES product(id)	-- 外键约束</span><br><span class="line">);</span><br><span class="line">INSERT INTO p_desc VALUES(1,&#39;为发烧而生&#39;);</span><br><span class="line">INSERT INTO p_desc VALUES(2,&#39;永远相信美好的事情即将发生&#39;);</span><br><span class="line">INSERT INTO p_desc VALUES(3,&#39;华为...&#39;);</span><br><span class="line">INSERT INTO p_desc VALUES(4,&#39;Vivo...&#39;);</span><br><span class="line">#-- 一对一（商品——商品描述） --#</span><br></pre></td></tr></table></figure>



<h3 id="1-3-外键约束"><a href="#1-3-外键约束" class="headerlink" title="1.3 外键约束"></a>1.3 外键约束</h3><p><strong>功能</strong>：限定二张表有关系的数据，保证数据的正确性、有效性和完整性</p>
<p><strong>外键约束相关语法：</strong>（在从表中设置）</p>
<ul>
<li>创建表指定外键字段</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    ....</span><br><span class="line">    [constraint] [约束名] foreign key(外键字段) references 主表(主键字段)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li>修改表指定外键</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table 表名 add [constraint] [约束名] foreign key(外键) references 主表(主键)</span><br></pre></td></tr></table></figure>

<ul>
<li>删除外键约束</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table 表名 drop foreign key 约束名;</span><br></pre></td></tr></table></figure>



<p><strong>外键约束的特点：</strong></p>
<ul>
<li>主表不能删除从表已引用的数据</li>
<li>从表不能添加主表未拥有的数据</li>
<li>先删除从表数据再删除主表数据</li>
<li>先添加主表数据在添加从表数据</li>
<li>外键字段可以为空但不能非法关联</li>
</ul>
<blockquote>
<p>小贴士：</p>
<ul>
<li>外键约束虽然功能强大，但是在互联网项目中不会使用，我们可以通过后台代码实现数据的校验…</li>
</ul>
</blockquote>
<h2 id="二、多表查询"><a href="#二、多表查询" class="headerlink" title="二、多表查询"></a>二、多表查询</h2><p>在企业开发中, 我们一个业务需要的数据往往是来自多张表的, 所以这时候就需要多表联合查询。</p>
<p>所谓的多表联合查询就是使用一条SQL语句将多张表的数据一起查询展示出来。</p>
<p><strong>准备数据</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#--多表查询--#</span><br><span class="line">-- 准备数据</span><br><span class="line">CREATE DATABASE mysql_2;</span><br><span class="line">USE mysql_2;</span><br><span class="line"></span><br><span class="line">-- 创建部门表(主表)</span><br><span class="line">CREATE TABLE dept(</span><br><span class="line">  id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">  NAME VARCHAR(32)</span><br><span class="line">);</span><br><span class="line">INSERT INTO dept VALUES(NULL,&#39;开发部&#39;);</span><br><span class="line">INSERT INTO dept VALUES(NULL,&#39;市场部&#39;);</span><br><span class="line">INSERT INTO dept VALUES(NULL,&#39;财务部&#39;);</span><br><span class="line">INSERT INTO dept VALUES(NULL,&#39;销售部&#39;);</span><br><span class="line"></span><br><span class="line">-- 创建员工表（从表）</span><br><span class="line">CREATE TABLE emp(</span><br><span class="line">  id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">  NAME VARCHAR(32),</span><br><span class="line">  gender CHAR(1),</span><br><span class="line">  salary DOUBLE,</span><br><span class="line">  join_date DATE,</span><br><span class="line">  dept_id INT,</span><br><span class="line">  CONSTRAINT dept_id_fk FOREIGN KEY(dept_id) REFERENCES dept(id)</span><br><span class="line">);</span><br><span class="line">INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES(&#39;孙悟空&#39;,&#39;男&#39;,7200,&#39;2013-02-24&#39;,1);</span><br><span class="line">INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES(&#39;猪八戒&#39;,&#39;男&#39;,3600,&#39;2010-12-02&#39;,2);</span><br><span class="line">INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES(&#39;唐僧&#39;,&#39;男&#39;,9000,&#39;2008-08-08&#39;,2);</span><br><span class="line">INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES(&#39;白骨精&#39;,&#39;女&#39;,5000,&#39;2015-10-07&#39;,3);</span><br><span class="line">INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES(&#39;蜘蛛精&#39;,&#39;女&#39;,4500,&#39;2011-03-14&#39;,1);</span><br><span class="line">INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES(&#39;沙僧&#39;,&#39;男&#39;,6666,&#39;2017-03-04&#39;,NULL);</span><br></pre></td></tr></table></figure>

<p><img data-src="/img/%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%87%86%E5%A4%87.png" alt="多表查询——数据准备"></p>
<h3 id="2-1-笛卡尔积"><a href="#2-1-笛卡尔积" class="headerlink" title="2.1 笛卡尔积"></a>2.1 笛卡尔积</h3><p>功能：<strong>将二张表的记录进行拼接，产生了笛卡尔积</strong>（又称为：交叉连接）</p>
<p>语法：<code>SELECT * FROM dept , emp;</code></p>
<p><img data-src="/img/%E7%AC%9B%E5%8D%A1%E5%B0%94%E7%A7%AF.png" alt="笛卡尔积"></p>
<h3 id="2-2-内连接"><a href="#2-2-内连接" class="headerlink" title="2.2 内连接"></a>2.2 内连接</h3><p><img data-src="/img/%E5%86%85%E8%BF%9E%E6%8E%A5.png" alt="内连接"></p>
<ul>
<li><p>功能：拿A表的记录去匹配B表的记录，若匹配到就显示（查询二张表的交集）</p>
</li>
<li><p>语法：</p>
<ul>
<li><p>隐式内连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from A表,B表 where 连接条件;</span><br></pre></td></tr></table></figure>
</li>
<li><p>显示内连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from A表 [inner] join B表 on 连接条件;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>练习：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 隐式内连接</span><br><span class="line">SELECT * FROM dept d ,emp e WHERE d.id &#x3D; e.dept_id ;</span><br><span class="line"></span><br><span class="line">-- 显示内连接</span><br><span class="line">SELECT * FROM dept d INNER JOIN emp e ON e.dept_id &#x3D; d.id;</span><br><span class="line"></span><br><span class="line">-- 小练习:  查询猪八戒的性别，工资和所在部门名称</span><br><span class="line">-- 1.确定几张表</span><br><span class="line">SELECT * FROM emp e INNER JOIN dept d;</span><br><span class="line">-- 2.确定连接条件</span><br><span class="line">SELECT * FROM emp e INNER JOIN dept d ON e.dept_id &#x3D; d.id;</span><br><span class="line">-- 3.查询指定字段</span><br><span class="line">SELECT e.gender,e.salary,d.name FROM emp e INNER JOIN dept d ON e.dept_id &#x3D; d.id;</span><br><span class="line">-- 4.确定业务条件</span><br><span class="line">SELECT e.gender,e.salary,d.name FROM emp e INNER JOIN dept d ON e.dept_id &#x3D; d.id WHERE e.name &#x3D; &#39;猪八戒&#39;;</span><br></pre></td></tr></table></figure>



<h3 id="2-3-外连接"><a href="#2-3-外连接" class="headerlink" title="2.3 外连接"></a>2.3 外连接</h3><h4 id="2-3-1-左外连接"><a href="#2-3-1-左外连接" class="headerlink" title="2.3.1 左外连接"></a>2.3.1 左外连接</h4><p><img data-src="/img/%E5%A4%96%E8%BF%9E%E6%8E%A5_%E5%B7%A6%E5%A4%96%E8%BF%9E%E6%8E%A5.png" alt="外连接_左外连接"></p>
<ul>
<li><p>功能：展示A表的全部，再去匹配B表，有就展示，没有就显示NULL</p>
</li>
<li><p>语法：</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from A表 left [outer] join B表 on 连接条件;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>练习：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 左外连接</span><br><span class="line">-- 小练习: 查询所有员工信息及对应的部门名称</span><br><span class="line">SELECT * FROM emp e LEFT OUTER JOIN dept d ON e.dept_id &#x3D; d.id;</span><br><span class="line">-- 小练习: 查询所有部门及对应的员工信息</span><br><span class="line">SELECT * FROM dept d LEFT OUTER JOIN emp e ON e.dept_id &#x3D; d.id;</span><br></pre></td></tr></table></figure>



<h4 id="2-3-2-右外连接"><a href="#2-3-2-右外连接" class="headerlink" title="2.3.2 右外连接"></a>2.3.2 右外连接</h4><p><img data-src="/img/%E5%A4%96%E8%BF%9E%E6%8E%A5_%E5%8F%B3%E5%A4%96%E8%BF%9E%E6%8E%A5.png" alt="外连接_右外连接"></p>
<ul>
<li><p>功能：展示B表的全部，再去匹配A表，有就展示，没有就显示NULL</p>
</li>
<li><p>语法</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from A表 right [outer] join B表 on 连接条件;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>练习：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 右外连接</span><br><span class="line">-- 小练习: 查询所有部门及对应的员工信息</span><br><span class="line">SELECT * FROM emp e RIGHT OUTER JOIN dept d ON e.dept_id &#x3D; d.id;</span><br></pre></td></tr></table></figure>



<h3 id="2-4-子查询"><a href="#2-4-子查询" class="headerlink" title="2.4 子查询"></a>2.4 子查询</h3><ul>
<li>问题引入：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 引入:查询工资最高的员工是谁？</span><br><span class="line">-- 1.先查询最高工资</span><br><span class="line">SELECT MAX(salary) FROM emp;</span><br><span class="line">-- 2.在根据工资作为条件查询员工基本信息</span><br><span class="line">SELECT * FROM emp WHERE salary &#x3D; (SELECT MAX(salary) FROM emp);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>功能：一条sql语句的执行结果，作为另一条sql语法的一部分</p>
</li>
<li><p>语法：</p>
<ul>
<li><p>查询结果为单列单值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT MAX(salary) FROM emp;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询结果为单列多行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT salary FROM emp;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询结果为多列多行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM emp;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>总结：</p>
<ul>
<li><p>子查询结果为单列（单值或多值），通常作为条件，在where后面使用</p>
</li>
<li><p>子查询结果多列多行，通常作为虚拟（临时）表使用</p>
<blockquote>
<p>注意：如果一个需求能通过表连接解决，就尽量不要使用子查询</p>
</blockquote>
</li>
</ul>
</li>
<li><p>练习：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 小练习1: 查询工资小于平均工资的员工有哪些？(子查询结果为单列单值)</span><br><span class="line">-- 1.先查询出平均工资</span><br><span class="line">SELECT AVG(salary) FROM emp;</span><br><span class="line">-- 2.再查询出小于平均工资的员工信息</span><br><span class="line">SELECT * FROM emp WHERE salary &lt; (SELECT AVG(salary) FROM emp);</span><br><span class="line"></span><br><span class="line">-- 小练习2: 查询工资大于5000的员工，来自于哪些部门的名字 (子查询结果为单列多行)</span><br><span class="line">-- 1.查询工资大于5000的员工</span><br><span class="line">SELECT dept_id FROM emp WHERE salary &gt; 5000;</span><br><span class="line">-- 2.再根据员工表部门外键查询对应部门名称</span><br><span class="line">SELECT * FROM dept WHERE id IN(SELECT dept_id FROM emp WHERE salary &gt; 5000);</span><br><span class="line"></span><br><span class="line">-- 补充：查询出：开发部和财务部员工的信息</span><br><span class="line">-- 1. 查询开发部和财务的信息</span><br><span class="line">SELECT id FROM dept WHERE &#96;name&#96; IN(&#39;开发部&#39;,&#39;财务部&#39;);</span><br><span class="line">-- 2.再根据部门的id主键查询对应员工信息</span><br><span class="line">SELECT * FROM emp WHERE dept_id IN (SELECT id FROM dept WHERE &#96;name&#96; IN(&#39;开发部&#39;,&#39;财务部&#39;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 小练习3: 查询出2011年以后入职的员工信息，包括部门信息 (子查询结果为多列多行)</span><br><span class="line">-- 1.查询出2011年以后入职的员工信息</span><br><span class="line">SELECT * FROM emp WHERE join_date &gt;&#x3D; &#39;2011-1-1&#39;;</span><br><span class="line">-- 2.将查询结果作为临时表关联部门表</span><br><span class="line">SELECT e.name,d.name FROM (SELECT * FROM emp WHERE join_date &gt;&#x3D; &#39;2011-1-1&#39;) AS e INNER JOIN dept d ON e.dept_id &#x3D; d.id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 这个需求除了子查询，也可以使用内连接完成（推荐）</span><br><span class="line">-- 1.先关联二张表</span><br><span class="line">SELECT * FROM emp e INNER JOIN dept d ON e.dept_id &#x3D; d.id;</span><br><span class="line">-- 2.再筛选条件</span><br><span class="line">SELECT  e.name,d.name FROM emp e INNER JOIN dept d ON e.dept_id &#x3D; d.id WHERE e.join_date &gt;&#x3D; &#39;2011-1-1&#39;;</span><br></pre></td></tr></table></figure>

<p><img data-src="/img/%E5%AD%90%E6%9F%A5%E8%AF%A2.png" alt="子查询"></p>
<h2 id="三、多表查询案例"><a href="#三、多表查询案例" class="headerlink" title="三、多表查询案例"></a>三、多表查询案例</h2><p>我们在企业开发时，根据不同的业务需求往往需要通过2张及以上的表中去查询需要的数据。其实不管是几张表的查询，都是有规律可循的。 </p>
<p><img data-src="/img/%E5%A4%9A%E8%A1%A8%E6%A1%88%E4%BE%8B.png" alt="多表案例"></p>
<h4 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 多表案例</span><br><span class="line">create database mysql_3;</span><br><span class="line">use mysql_3;</span><br><span class="line"></span><br><span class="line">-- 部门表</span><br><span class="line">CREATE TABLE dept (</span><br><span class="line">  id INT PRIMARY KEY auto_increment, -- 部门id</span><br><span class="line">  dname VARCHAR(50), -- 部门名称</span><br><span class="line">  loc VARCHAR(50) -- 部门位置</span><br><span class="line">);</span><br><span class="line">-- 添加4个部门</span><br><span class="line">INSERT INTO dept(id,dname,loc) VALUES </span><br><span class="line">(10,&#39;教研部&#39;,&#39;北京&#39;),</span><br><span class="line">(20,&#39;学工部&#39;,&#39;上海&#39;),</span><br><span class="line">(30,&#39;销售部&#39;,&#39;广州&#39;),</span><br><span class="line">(40,&#39;财务部&#39;,&#39;深圳&#39;);</span><br><span class="line"></span><br><span class="line">-- 职务表</span><br><span class="line">CREATE TABLE job (</span><br><span class="line">  id INT PRIMARY KEY,</span><br><span class="line">  jname VARCHAR(20), -- 职务名称</span><br><span class="line">  description VARCHAR(50) -- 职务描述</span><br><span class="line">);</span><br><span class="line">-- 添加4个职务</span><br><span class="line">INSERT INTO job (id, jname, description) VALUES</span><br><span class="line">(1, &#39;董事长&#39;, &#39;管理整个公司，接单&#39;),</span><br><span class="line">(2, &#39;经理&#39;, &#39;管理部门员工&#39;),</span><br><span class="line">(3, &#39;销售员&#39;, &#39;向客人推销产品&#39;),</span><br><span class="line">(4, &#39;文员&#39;, &#39;使用办公软件&#39;);</span><br><span class="line"></span><br><span class="line">-- 员工表</span><br><span class="line">CREATE TABLE emp (</span><br><span class="line">  id INT PRIMARY KEY, -- 员工id</span><br><span class="line">  ename VARCHAR(50), -- 员工姓名</span><br><span class="line">  job_id INT, -- 职务id  外键</span><br><span class="line">  mgr INT , -- 上级领导</span><br><span class="line">  joindate DATE, -- 入职日期</span><br><span class="line">  salary DECIMAL(7,2), -- 工资 99999.99</span><br><span class="line">  bonus DECIMAL(7,2), -- 奖金 99999.99</span><br><span class="line">  dept_id INT, -- 所在部门编号  外键</span><br><span class="line">  CONSTRAINT emp_jobid_ref_job_id_fk FOREIGN KEY (job_id) REFERENCES job (id),</span><br><span class="line">  CONSTRAINT emp_deptid_ref_dept_id_fk FOREIGN KEY (dept_id) REFERENCES dept (id)</span><br><span class="line">);</span><br><span class="line">-- 添加员工</span><br><span class="line">INSERT INTO emp(id,ename,job_id,mgr,joindate,salary,bonus,dept_id) VALUES </span><br><span class="line">(1001,&#39;孙悟空&#39;,4,1004,&#39;2000-12-17&#39;,&#39;8000.00&#39;,NULL,20),</span><br><span class="line">(1002,&#39;卢俊义&#39;,3,1006,&#39;2001-02-20&#39;,&#39;16000.00&#39;,&#39;3000.00&#39;,30),</span><br><span class="line">(1003,&#39;林冲&#39;,3,1006,&#39;2001-02-22&#39;,&#39;12500.00&#39;,&#39;5000.00&#39;,30),</span><br><span class="line">(1004,&#39;唐僧&#39;,2,1009,&#39;2001-04-02&#39;,&#39;29750.00&#39;,NULL,20),</span><br><span class="line">(1005,&#39;李逵&#39;,4,1006,&#39;2001-09-28&#39;,&#39;12500.00&#39;,&#39;14000.00&#39;,30),</span><br><span class="line">(1006,&#39;宋江&#39;,2,1009,&#39;2001-05-01&#39;,&#39;28500.00&#39;,NULL,30),</span><br><span class="line">(1007,&#39;刘备&#39;,2,1009,&#39;2001-09-01&#39;,&#39;24500.00&#39;,NULL,10),</span><br><span class="line">(1008,&#39;猪八戒&#39;,4,1004,&#39;2007-04-19&#39;,&#39;30000.00&#39;,NULL,20),</span><br><span class="line">(1009,&#39;罗贯中&#39;,1,NULL,&#39;2001-11-17&#39;,&#39;50000.00&#39;,NULL,10),</span><br><span class="line">(1010,&#39;吴用&#39;,3,1006,&#39;2001-09-08&#39;,&#39;15000.00&#39;,&#39;0.00&#39;,30),</span><br><span class="line">(1011,&#39;沙僧&#39;,4,1004,&#39;2007-05-23&#39;,&#39;11000.00&#39;,NULL,20),</span><br><span class="line">(1012,&#39;李逵&#39;,4,1006,&#39;2001-12-03&#39;,&#39;9500.00&#39;,NULL,30),</span><br><span class="line">(1013,&#39;小白龙&#39;,4,1004,&#39;2001-12-03&#39;,&#39;30000.00&#39;,NULL,20),</span><br><span class="line">(1014,&#39;关羽&#39;,4,1007,&#39;2002-01-23&#39;,&#39;13000.00&#39;,NULL,10);</span><br><span class="line"></span><br><span class="line">-- 工资等级表</span><br><span class="line">CREATE TABLE salarygrade (</span><br><span class="line">  grade INT PRIMARY KEY,  -- 等级</span><br><span class="line">  losalary INT, -- 最低工资</span><br><span class="line">  hisalary INT -- 最高工资</span><br><span class="line">);</span><br><span class="line">-- 添加5个工资等级</span><br><span class="line">INSERT INTO salarygrade(grade,losalary,hisalary) VALUES </span><br><span class="line">(1,7000,12000),</span><br><span class="line">(2,12010,14000),</span><br><span class="line">(3,14010,20000),</span><br><span class="line">(4,20010,30000),</span><br><span class="line">(5,30010,99990);</span><br></pre></td></tr></table></figure>

<h4 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 1 查询所有员工信息。显示员工编号，员工姓名，工资，职务名称，职务描述</span><br><span class="line">-- 1. 确定几张表</span><br><span class="line">SELECT * FROM emp e INNER JOIN job j;</span><br><span class="line">-- 2. 确定连接条件</span><br><span class="line">SELECT * FROM emp e INNER JOIN job j ON e.job_id &#x3D; j.id;</span><br><span class="line">-- 3. 确定显示字段</span><br><span class="line">SELECT e.id,e.ename,e.salary,j.jname,j.description FROM emp e INNER JOIN job j ON e.job_id &#x3D; j.id;</span><br></pre></td></tr></table></figure>

<h4 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 2 查询所有员工信息。显示员工编号，员工姓名，工资，职务名称，职务描述，部门名称，部门位置</span><br><span class="line">-- 1.确定几张表</span><br><span class="line">SELECT * FROM emp e</span><br><span class="line">	INNER JOIN job j</span><br><span class="line">	INNER JOIN dept d;</span><br><span class="line">-- 2.确定连接条件</span><br><span class="line">SELECT * FROM emp e</span><br><span class="line">	INNER JOIN job j ON e.job_id &#x3D; j.id</span><br><span class="line">	INNER JOIN dept d ON e.dept_id &#x3D; d.id;</span><br><span class="line">-- 3.确定显示字段</span><br><span class="line">SELECT </span><br><span class="line">  e.id,</span><br><span class="line">  e.ename,</span><br><span class="line">  e.salary,</span><br><span class="line">  j.jname,</span><br><span class="line">  j.description,</span><br><span class="line">  d.dname,</span><br><span class="line">  d.loc </span><br><span class="line">FROM</span><br><span class="line">  emp e </span><br><span class="line">  INNER JOIN job j </span><br><span class="line">    ON e.job_id &#x3D; j.id </span><br><span class="line">  INNER JOIN dept d </span><br><span class="line">    ON e.dept_id &#x3D; d.id ;</span><br></pre></td></tr></table></figure>

<h4 id="问题三"><a href="#问题三" class="headerlink" title="问题三"></a>问题三</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 3 查询所有员工信息。显示员工姓名，工资，职务名称，职务描述，部门名称，部门位置，工资等级</span><br><span class="line">-- 1.确定几张表</span><br><span class="line">SELECT * FROM emp e</span><br><span class="line">	INNER JOIN job j</span><br><span class="line">	INNER JOIN dept d</span><br><span class="line">	INNER JOIN salarygrade sg;</span><br><span class="line">-- 2.确定连接条件</span><br><span class="line">SELECT * FROM emp e</span><br><span class="line">	INNER JOIN job j ON e.job_id &#x3D; j.id</span><br><span class="line">	INNER JOIN dept d ON e.dept_id &#x3D; d.id</span><br><span class="line">	INNER JOIN salarygrade sg ON e.salary BETWEEN sg.losalary AND sg.hisalary;</span><br><span class="line">-- 3.确定显示字段</span><br><span class="line">SELECT  </span><br><span class="line">  e.id,</span><br><span class="line">  e.ename,</span><br><span class="line">  e.salary,</span><br><span class="line">  j.jname,</span><br><span class="line">  j.description,</span><br><span class="line">  d.dname,</span><br><span class="line">  d.loc,</span><br><span class="line">  sg.grade</span><br><span class="line">FROM emp e</span><br><span class="line">	INNER JOIN job j ON e.job_id &#x3D; j.id</span><br><span class="line">	INNER JOIN dept d ON e.dept_id &#x3D; d.id</span><br><span class="line">	INNER JOIN salarygrade sg ON e.salary BETWEEN sg.losalary AND sg.hisalary;</span><br></pre></td></tr></table></figure>

<h4 id="问题四"><a href="#问题四" class="headerlink" title="问题四"></a>问题四</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 4 查询经理的信息。显示员工姓名，工资，职务名称，职务描述，部门名称，部门位置，工资等级</span><br><span class="line">SELECT  </span><br><span class="line">  e.id,</span><br><span class="line">  e.ename,</span><br><span class="line">  e.salary,</span><br><span class="line">  j.jname,</span><br><span class="line">  j.description,</span><br><span class="line">  d.dname,</span><br><span class="line">  d.loc,</span><br><span class="line">  sg.grade</span><br><span class="line">FROM emp e</span><br><span class="line">	INNER JOIN job j ON e.job_id &#x3D; j.id</span><br><span class="line">	INNER JOIN dept d ON e.dept_id &#x3D; d.id</span><br><span class="line">	INNER JOIN salarygrade sg ON e.salary BETWEEN sg.losalary AND sg.hisalary</span><br><span class="line">	WHERE j.jname &#x3D; &#39;经理&#39;;</span><br></pre></td></tr></table></figure>

<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>多表查询会出现笛卡尔积</span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>消除笛卡尔的规律</span><br><span class="line"><span class="code">	连接（过滤）条件 = 表个数 -1</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="bullet">3. </span>编写sql步骤</span><br><span class="line"><span class="code">	a）确定几张表</span></span><br><span class="line"><span class="code">	b）确定连接条件  on</span></span><br><span class="line"><span class="code">	c）确定显示字段</span></span><br><span class="line"><span class="code">	d）确定业务条件  where</span></span><br></pre></td></tr></table></figure>

<h4 id="问题五"><a href="#问题五" class="headerlink" title="问题五"></a>问题五</h4><p><img data-src="/img/%E5%A4%9A%E8%A1%A8%E6%A1%88%E4%BE%8B%E9%97%AE%E9%A2%98%E4%BA%94.png" alt="多表案例问题五"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 5 查询出部门编号、部门名称、部门位置、部门人数（至少三遍）</span><br><span class="line">-- 1.求出每个部门人数</span><br><span class="line">SELECT dept_id,COUNT(*) AS total FROM emp GROUP BY dept_id;</span><br><span class="line">-- 2.把部门人数作为虚拟表关联部门表</span><br><span class="line">SELECT d.id,d.dname,d.loc,e.total FROM (SELECT dept_id,COUNT(*) AS total FROM emp GROUP BY dept_id) AS e</span><br><span class="line">	INNER JOIN dept d ON e.dept_id &#x3D; d.id;</span><br></pre></td></tr></table></figure>



<h4 id="问题六"><a href="#问题六" class="headerlink" title="问题六"></a>问题六</h4><p>如果一张表的字段存在上下级关系，这张表就可以成为自关联表（一对多的思想）</p>
<p><img data-src="/img/%E5%A4%9A%E8%A1%A8%E6%A1%88%E4%BE%8B%E9%97%AE%E9%A2%98%E5%85%AD.png" alt="多表案例问题六"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 查询所有员工的姓名及上级领导的姓名</span><br><span class="line">SELECT e.id,e.ename,m.id,m.ename FROM emp e LEFT OUTER JOIN emp m ON e.mgr &#x3D; m.id;</span><br></pre></td></tr></table></figure>



<h2 id="四、事务安全"><a href="#四、事务安全" class="headerlink" title="四、事务安全"></a>四、事务安全</h2><h3 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h3><h4 id="4-1-1-转账案例"><a href="#4-1-1-转账案例" class="headerlink" title="4.1.1 转账案例"></a>4.1.1 转账案例</h4><p><strong>准备数据</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database mysql_4;</span><br><span class="line">use mysql_4;</span><br><span class="line">-- 创建账户表</span><br><span class="line">CREATE TABLE account (</span><br><span class="line">	id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">	NAME VARCHAR(32),</span><br><span class="line">	money DOUBLE </span><br><span class="line">);</span><br><span class="line">INSERT INTO account (NAME, money) VALUES (&#39;许幻山&#39;, 1000), (&#39;林有有&#39;, 1000);</span><br></pre></td></tr></table></figure>

<p>模拟转账</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 许幻山扣钱（招商）</span><br><span class="line">UPDATE account SET money &#x3D; money - 100 WHERE id &#x3D; 1;</span><br><span class="line"></span><br><span class="line">-- 网络或机器故障...</span><br><span class="line"></span><br><span class="line">-- 林有有加钱（建设）</span><br><span class="line">UPDATE account SET money &#x3D; money + 100 WHERE id &#x3D; 2;</span><br></pre></td></tr></table></figure>



<h4 id="4-1-2-事务解释"><a href="#4-1-2-事务解释" class="headerlink" title="4.1.2 事务解释"></a>4.1.2 事务解释</h4><p>如果一个包含多个步骤的业务操作，被事务管理，那么这些操作要么同时成功，要么同时失败。</p>
<p><img data-src="/img/%E4%BA%8B%E5%8A%A1%E8%A7%A3%E9%87%8A.png" alt="事务解释"></p>
<h3 id="4-2-事务操作"><a href="#4-2-事务操作" class="headerlink" title="4.2 事务操作"></a>4.2 事务操作</h3><h3 id="4-2-1-手动提交事务【mysql】"><a href="#4-2-1-手动提交事务【mysql】" class="headerlink" title="4.2.1 手动提交事务【mysql】"></a>4.2.1 手动提交事务【mysql】</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>开启事务</span><br><span class="line"><span class="code">	begin | start transaction</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>提交事务</span><br><span class="line"><span class="code">	commit</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">3. </span>回滚事务</span><br><span class="line"><span class="code">	rollback</span></span><br></pre></td></tr></table></figure>



<p><strong>模拟转账</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 1.开启事务</span><br><span class="line">begin;</span><br><span class="line"></span><br><span class="line">-- 2.许幻山扣钱</span><br><span class="line">UPDATE account SET money &#x3D; money - 100 WHERE id &#x3D; 1;</span><br><span class="line"></span><br><span class="line">-- 机器故障</span><br><span class="line"></span><br><span class="line">-- 3.林有有加钱</span><br><span class="line">UPDATE account SET money &#x3D; money + 100 WHERE id &#x3D; 2;</span><br><span class="line"></span><br><span class="line">-- 4.提交事务</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure>





<h3 id="4-2-2-自动提交事务【JDBC】"><a href="#4-2-2-自动提交事务【JDBC】" class="headerlink" title="4.2.2 自动提交事务【JDBC】"></a>4.2.2 自动提交事务【JDBC】</h3><blockquote>
<p>MySQL默认情况下一条DML语句，就是一个独立的事务</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>查看MySQL是否开启自动提交事务</span><br><span class="line"><span class="code">	show variables like 'autocommit';</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="bullet">2. </span>临时关闭自动提交</span><br><span class="line"><span class="code">	set autocommit = off;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/img/mysql%E8%87%AA%E5%8A%A8%E6%8F%90%E4%BA%A4%E4%BA%8B%E5%8A%A1%E4%BF%AE%E6%94%B9.png" alt="mysql自动提交事务修改"></p>
<p>模拟转账</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 1.许幻山扣钱</span><br><span class="line">UPDATE account SET money &#x3D; money - 100 WHERE id &#x3D; 1;</span><br><span class="line"></span><br><span class="line">-- 只有commit时，才会同步到数据库磁盘文件</span><br></pre></td></tr></table></figure>



<h3 id="4-3-事务工作原理"><a href="#4-3-事务工作原理" class="headerlink" title="4.3 事务工作原理"></a>4.3 事务工作原理</h3><p><img data-src="/img/%E4%BA%8B%E5%8A%A1%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" alt="事务工作原理"></p>
<h3 id="4-4-保存-回滚-点"><a href="#4-4-保存-回滚-点" class="headerlink" title="4.4 保存(回滚)点"></a>4.4 保存(回滚)点</h3><p>当事务开启后，一部分sql执行成功，添加一个保存点，后续操作报错了，回滚到保存点，保证之前的操作可以成功提交。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">1. 设置保存点</span><br><span class="line">		<span class="keyword">savepoint</span> 保存点名称;</span><br><span class="line">	</span><br><span class="line">2. 回滚到指定保存点</span><br><span class="line">		<span class="keyword">rollback</span> <span class="keyword">to</span> 保存点名称;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>演示保存点功能</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 1.开启事务</span><br><span class="line">begin;</span><br><span class="line">-- 2.许幻山扣钱 如花</span><br><span class="line">UPDATE account SET money &#x3D; money - 100 WHERE id &#x3D; 1;</span><br><span class="line">-- 3.许幻山扣钱 凤姐</span><br><span class="line">UPDATE account SET money &#x3D; money - 100 WHERE id &#x3D; 1;</span><br><span class="line"></span><br><span class="line">-- 保存点</span><br><span class="line">savepoint ol;</span><br><span class="line"></span><br><span class="line">-- 4.许幻山扣钱 芙蓉姐姐</span><br><span class="line">UPDATE account SET money &#x3D; money - 100 WHERE id &#x3D; 1;</span><br><span class="line"></span><br><span class="line">-- 机器故障..</span><br><span class="line"></span><br><span class="line">-- 回滚到保存点</span><br><span class="line">rollback to ol;</span><br><span class="line"></span><br><span class="line">-- 提交事务</span><br><span class="line">commit;</span><br><span class="line"></span><br><span class="line">-- 5. 许幻山扣钱 乔碧萝</span><br><span class="line"></span><br><span class="line">-- 6. 许幻山扣钱 石榴姐</span><br></pre></td></tr></table></figure>



<h3 id="4-5-事务特性-ACID"><a href="#4-5-事务特性-ACID" class="headerlink" title="4.5 事务特性[ACID]"></a>4.5 事务特性[ACID]</h3><p>原子性：atomicity</p>
<ul>
<li>如果一个包含多个步骤的业务操作，被事务管理，那么这些操作要么同时成功，要么同时失败。</li>
</ul>
<p>一致性：consistency</p>
<ul>
<li>事务执行前后，保证数据完整性(数据总量)一致</li>
</ul>
<p>隔离性：isolation【并发】</p>
<ul>
<li>多个事务之间要求隔离，互不干扰</li>
</ul>
<p>持久性：durability</p>
<ul>
<li>事务一旦成功提交，持久化到磁盘，即使数据库出现问题也不会对数据不会产生影响</li>
</ul>
<h3 id="4-6-事务隔离性-并发"><a href="#4-6-事务隔离性-并发" class="headerlink" title="4.6 事务隔离性[并发]"></a>4.6 事务隔离性[并发]</h3><p>多个事务之间隔离的，相互独立的。但是如果多个事务操作同一批数据，则会引发一些问题，设置不同的隔离级别就可以解决这些问题。</p>
<blockquote>
<p>事务A、事务B  同时操作（并发）</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>脏读</span><br><span class="line"><span class="code">	事务A读取到事务B中操作的数据了，如果事务B进行了回滚，这部分内容就称为脏读</span></span><br><span class="line"><span class="code">	一个事务读取到另一个事务，未提交的数据就称为脏读...</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="bullet">2. </span>不可重复读</span><br><span class="line"><span class="code">	事务A读取了部分数据，此时事务B也操作了这部分数据进行了修改，然后事务A再次查询这部分数据，发生不一致，这就称为不可重复读</span></span><br><span class="line"><span class="code">	一个事务二次读取的内容不一致，被事务B的update影响，就称为不可重复读</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">3. </span>幻读（虚读）</span><br><span class="line"><span class="code">	事务A和事务B同时查询数据（id：10）不存在，此时事务A添加使用id10，事务B添加使用id10，事务A成功了，事务B失败了，这种现象就称为幻读</span></span><br></pre></td></tr></table></figure>



<h4 id="4-6-1-MySQL数据库隔离级别"><a href="#4-6-1-MySQL数据库隔离级别" class="headerlink" title="4.6.1 MySQL数据库隔离级别"></a>4.6.1 MySQL数据库隔离级别</h4><table>
<thead>
<tr>
<th>级别</th>
<th>名字</th>
<th>隔离级别</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
<th>数据库默认隔离级别</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>读未提交</td>
<td>read uncommitted</td>
<td>是</td>
<td>是</td>
<td>是</td>
<td></td>
</tr>
<tr>
<td>2</td>
<td>读已提交</td>
<td>read committed</td>
<td>否</td>
<td>是</td>
<td>是</td>
<td>Oracle和SQL Server</td>
</tr>
<tr>
<td>3</td>
<td>可重复读</td>
<td>repeatable read</td>
<td>否</td>
<td>否</td>
<td>是</td>
<td>MySQL</td>
</tr>
<tr>
<td>4</td>
<td>串行化</td>
<td>serializable</td>
<td>否</td>
<td>否</td>
<td>否</td>
<td></td>
</tr>
</tbody></table>
<blockquote>
<p>设置数据库的隔离级别的不同考虑，选择不同的隔离级别：</p>
<ul>
<li><p>考虑性能： 1 &gt; 2 &gt; 3 &gt; 4</p>
</li>
<li><p>考虑安全：4 &gt; 3 &gt; 2 &gt; 1</p>
</li>
<li><p>综合考虑：2 、3</p>
</li>
</ul>
</blockquote>
<h4 id="4-6-2-演示隔离级别产生的问题"><a href="#4-6-2-演示隔离级别产生的问题" class="headerlink" title="4.6.2 演示隔离级别产生的问题"></a>4.6.2 演示隔离级别产生的问题</h4><p>相关语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 查看当前数据库隔离级别</span><br><span class="line">		show variables like &#39;%isolation%&#39;;</span><br><span class="line">2. 临时修改隔离级别</span><br><span class="line">		set session transaction isolation level 级别字符串;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>模拟创建两个事务：事务A、事务B</p>
</blockquote>
<h5 id="演示脏读"><a href="#演示脏读" class="headerlink" title="演示脏读"></a>演示脏读</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 设置事务的隔离级别为 read uncommitted</span><br><span class="line">		set session transaction isolation level read uncommitted;</span><br></pre></td></tr></table></figure>

<p><img data-src="/img/%E6%BC%94%E7%A4%BA%E8%84%8F%E8%AF%BB.png" alt="演示脏读"></p>
<h5 id="解决脏读（产生了不可重复读的问题）"><a href="#解决脏读（产生了不可重复读的问题）" class="headerlink" title="解决脏读（产生了不可重复读的问题）"></a>解决脏读（产生了不可重复读的问题）</h5><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>设置事务的隔离级别为 read committed</span><br><span class="line"><span class="code">		set session transaction isolation level read committed;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/img/%E8%A7%A3%E5%86%B3%E8%84%8F%E8%AF%BB.png" alt="解决脏读"></p>
<h5 id="解决不可重复读"><a href="#解决不可重复读" class="headerlink" title="解决不可重复读"></a>解决不可重复读</h5><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>设置事务的隔离级别为 repeatable read</span><br><span class="line"><span class="code">		set session transaction isolation level repeatable read;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/img/%E8%A7%A3%E5%86%B3%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB.png" alt="解决不可重复读"></p>
<h5 id="演示幻读"><a href="#演示幻读" class="headerlink" title="演示幻读"></a>演示幻读</h5><p><img data-src="/img/%E6%BC%94%E7%A4%BA%E5%B9%BB%E8%AF%BB.png" alt="演示幻读"></p>
<h5 id="解决幻读"><a href="#解决幻读" class="headerlink" title="解决幻读"></a>解决幻读</h5><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>设置事务的隔离级别为 serializable</span><br><span class="line"><span class="code">		set session transaction isolation level serializable;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/img/%E8%A7%A3%E5%86%B3%E5%B9%BB%E8%AF%BB.png" alt="解决幻读"></p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>表关系</tag>
        <tag>外键约束</tag>
        <tag>多表查询</tag>
        <tag>表连接</tag>
        <tag>子查询</tag>
        <tag>事务安全</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC&amp;Druid连接池</title>
    <url>/2020/09/05/JDBC-Druid%E8%BF%9E%E6%8E%A5%E6%B1%A0/</url>
    <content><![CDATA[<h2 id="一、JDBC基础"><a href="#一、JDBC基础" class="headerlink" title="一、JDBC基础"></a>一、JDBC基础</h2><h3 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h3><p>Java 数据库连接（Java DataBase Connectivity）</p>
<ul>
<li>作用：通过Java语言操作数据库</li>
<li>本质：是官方（sun公司）定义的一套操作所有关系型数据库的规则&amp;，即接口。各个数据库厂商去实现这套接口，提供数据库驱动jar包。我们可以使用这套接口（JDBC）编程，真正执行的代码是驱动jar包中的实现类。</li>
</ul>
<a id="more"></a>

<p><img data-src="/img/JDBC%E6%A6%82%E8%BF%B0.png" alt="JDBC概述"></p>
<blockquote>
<p>面向接口编程</p>
</blockquote>
<p><img data-src="/img/%E9%9D%A2%E5%90%91%E6%8E%A5%E5%8F%A3%E7%BC%96%E7%A8%8B.png" alt="面向接口编程"></p>
<h3 id="1-2-快速入门"><a href="#1-2-快速入门" class="headerlink" title="1.2 快速入门"></a>1.2 快速入门</h3><ul>
<li>需求：通过java代码向数据库插入一条记录</li>
</ul>
<h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><h5 id="Ⅰ-准备数据库和表"><a href="#Ⅰ-准备数据库和表" class="headerlink" title="Ⅰ 准备数据库和表"></a>Ⅰ 准备数据库和表</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> jdbc;</span><br><span class="line"><span class="keyword">USE</span> jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">USER</span>(</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`uaername`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h5 id="Ⅱ-创建Java模块，导入mysql驱动jar包"><a href="#Ⅱ-创建Java模块，导入mysql驱动jar包" class="headerlink" title="Ⅱ 创建Java模块，导入mysql驱动jar包"></a>Ⅱ 创建Java模块，导入mysql驱动jar包</h5><p><img data-src="/img/jdbc%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E5%88%9B%E5%BB%BA%E6%A8%A1%E5%9D%97%E5%AF%BC%E5%85%A5jar%E5%8C%85.png" alt="jdbc快速入门——创建模块导入jar包"></p>
<h5 id="Ⅲ-步骤分析"><a href="#Ⅲ-步骤分析" class="headerlink" title="Ⅲ 步骤分析"></a>Ⅲ 步骤分析</h5><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>注册驱动</span><br><span class="line"><span class="bullet">2. </span>建立连接</span><br><span class="line"><span class="bullet">3. </span>编写sql</span><br><span class="line"><span class="bullet">4. </span>获取sql执行对象</span><br><span class="line"><span class="bullet">5. </span>发送sql并返回结果</span><br><span class="line"><span class="bullet">6. </span>处理结果</span><br><span class="line"><span class="bullet">7. </span>释放资源</span><br></pre></td></tr></table></figure>

<p><img data-src="/img/jdbc%E6%AD%A5%E9%AA%A4%E5%88%86%E6%9E%90.png" alt="jdbc步骤分析"></p>
<h5 id="Ⅳ-代码实现"><a href="#Ⅳ-代码实现" class="headerlink" title="Ⅳ 代码实现"></a>Ⅳ 代码实现</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcQuick</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 注册驱动</span></span><br><span class="line">        DriverManager.registerDriver(<span class="keyword">new</span> Driver());</span><br><span class="line">        <span class="comment">// 2. 建立连接</span></span><br><span class="line">        Connection connection = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/jdbc"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line">        <span class="comment">// 3. 编写sql（分号可以省略）</span></span><br><span class="line">        String sql = <span class="string">"insert into user values(null,'哈哈','999');"</span>;</span><br><span class="line">        <span class="comment">// 4. 获取sql执行对象</span></span><br><span class="line">        Statement statement = connection.createStatement();</span><br><span class="line">        <span class="comment">// 5. 发送sql并返回结果</span></span><br><span class="line">        <span class="keyword">int</span> i = statement.executeUpdate(sql);</span><br><span class="line">        <span class="comment">// 6. 处理结果</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"添加成功"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"添加失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7. 释放资源</span></span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1-3-相关API介绍"><a href="#1-3-相关API介绍" class="headerlink" title="1.3 相关API介绍"></a>1.3 相关API介绍</h3><blockquote>
<p>在java.sql 包下</p>
</blockquote>
<ul>
<li><strong>DriverManager：驱动管理对象【工具类】</strong></li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>注册驱动</span><br><span class="line"><span class="code">	静态方法：static void registerDriver(Driver driver) 【了解】</span></span><br><span class="line"><span class="code">		我们观察mysql实现类内部代码，发现了静态代码也注册了一次驱动</span></span><br><span class="line"><span class="code">		    static &#123;</span></span><br><span class="line"><span class="code">                try &#123;</span></span><br><span class="line"><span class="code">                    DriverManager.registerDriver(new Driver());</span></span><br><span class="line"><span class="code">                &#125; catch (SQLException var1) &#123;</span></span><br><span class="line"><span class="code">                    throw new RuntimeException("Can't register driver!");</span></span><br><span class="line"><span class="code">                &#125;</span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code">            </span></span><br><span class="line">   反射：Class.forName("com.mysql.jdbc.Driver"); </span><br><span class="line">   		加载mysql的驱动类到jvm虚拟机，触发初始化方法</span><br><span class="line">   SPI:服务注册机制【了解】</span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>建立连接</span><br><span class="line"><span class="code">	static Connection getConnection(String url, String user, String password);</span></span><br><span class="line"><span class="code">		参数</span></span><br><span class="line"><span class="code">			url：固定格式</span></span><br><span class="line"><span class="code">				语法：jdbc:mysql://主机地址:端口/数据库名</span></span><br><span class="line"><span class="code">				实例：</span></span><br><span class="line"><span class="code">					jdbc:mysql://localhost:3306/web15</span></span><br><span class="line"><span class="code">					jdbc:mysql:///web15  【连接本机】</span></span><br><span class="line"><span class="code">					</span></span><br><span class="line"><span class="code">			user：用户名</span></span><br><span class="line"><span class="code">			password：密码</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>Connection：数据库连接对象</strong></li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>获取sql执行对象</span><br><span class="line"><span class="code">	Statement createStatement() 【了解】</span></span><br><span class="line"><span class="code">	PreparedStatement prepareStatement(String sql)  【掌握】</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>事务管理</span><br><span class="line"><span class="code">	1）开启事务（关闭自动提交）</span></span><br><span class="line"><span class="code">		void setAutoCommit(boolean autoCommit)  </span></span><br><span class="line"><span class="code">			参数：</span></span><br><span class="line"><span class="code">				true：开启自动提交</span></span><br><span class="line"><span class="code">				flase：关闭自动提交</span></span><br><span class="line"><span class="code">	2）提交事务</span></span><br><span class="line"><span class="code">		void commit()  </span></span><br><span class="line"><span class="code">	3）回滚事务</span></span><br><span class="line"><span class="code">		void rollback()</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>Statement：执行sql的对象</strong></li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>执行所有类型的sql语句 </span><br><span class="line"><span class="code">		boolean execute(String sql)  </span></span><br><span class="line">-----------------------------------</span><br><span class="line"><span class="bullet">2. </span>执行DML类型的sql语句[常用]</span><br><span class="line"><span class="code">		int executeUpdate(String sql)  </span></span><br><span class="line"><span class="code">			参数：insert、delete、update</span></span><br><span class="line"><span class="code">			返回值：影响行数</span></span><br><span class="line"><span class="code">			</span></span><br><span class="line"><span class="bullet">3. </span>执行DQL类型的sql语句[常用]</span><br><span class="line"><span class="code">		ResultSet executeQuery(String sql)  </span></span><br><span class="line"><span class="code">			参数：select</span></span><br><span class="line"><span class="code">			返回值：查询后的结果集（单条、多条）</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>ResultSet：结果集对象,封装查询结果</strong></li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>指针下移（通常与while、if结合使用）</span><br><span class="line"><span class="code">		boolean next()</span></span><br><span class="line"><span class="code">			返回值：</span></span><br><span class="line"><span class="code">				true 有数据</span></span><br><span class="line"><span class="code">				false 没数据</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>获取数据</span><br><span class="line"><span class="code">		T getXxx(int 列编号)</span></span><br><span class="line"><span class="code">		T getXxx(String 列名)</span></span><br><span class="line"></span><br><span class="line"><span class="code">		Object getObject(String 列名)</span></span><br><span class="line"><span class="code">		String getString(String 列名)</span></span><br><span class="line"><span class="code">		</span></span><br><span class="line"><span class="code">		注意：每一行数据对应java中的一个对象</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/img/resultSet.png" alt="resultSet"></p>
<h3 id="1-4-使用JDBC实现CRUD操作"><a href="#1-4-使用JDBC实现CRUD操作" class="headerlink" title="1.4 使用JDBC实现CRUD操作"></a>1.4 使用JDBC实现CRUD操作</h3><h5 id="Ⅰ-C：添加一条记录到"><a href="#Ⅰ-C：添加一条记录到" class="headerlink" title="Ⅰ C：添加一条记录到"></a>Ⅰ C：添加一条记录到</h5><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cTest</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">    <span class="comment">//注册驱动</span></span><br><span class="line">    Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/jdbc"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line">    <span class="comment">//定义sql</span></span><br><span class="line">    String sql = <span class="string">"insert into user values(null,'清风','123')"</span>;</span><br><span class="line">    <span class="comment">//获取执行sql对象</span></span><br><span class="line">    Statement stat = conn.createStatement();</span><br><span class="line">    <span class="comment">//执行sql</span></span><br><span class="line">    <span class="keyword">int</span> i = stat.executeUpdate(sql);</span><br><span class="line">    <span class="comment">//结果处理</span></span><br><span class="line">    <span class="keyword">if</span> (i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">"添加成功！"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"添加失败！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    stat.close();</span><br><span class="line">    conn.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="Ⅱ-R：查询所有记录"><a href="#Ⅱ-R：查询所有记录" class="headerlink" title="Ⅱ R：查询所有记录"></a>Ⅱ R：查询所有记录</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rTest</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">    <span class="comment">//注册驱动</span></span><br><span class="line">    Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/jdbc"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line">    <span class="comment">//定义sql</span></span><br><span class="line">    String sql = <span class="string">"select * from user"</span>;</span><br><span class="line">    <span class="comment">//获取执行sql对象</span></span><br><span class="line">    Statement stat = conn.createStatement();</span><br><span class="line">    <span class="comment">//执行sql</span></span><br><span class="line">    ResultSet resultSet = stat.executeQuery(sql);</span><br><span class="line">    <span class="comment">//结果处理,遍历数据</span></span><br><span class="line">    <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">        System.out.println(resultSet.getInt(<span class="string">"id"</span>) + resultSet.getString(<span class="string">"username"</span>) + resultSet.getString(<span class="string">"password"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    resultSet.close();</span><br><span class="line">    stat.close();</span><br><span class="line">    conn.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="Ⅲ-U：修改记录"><a href="#Ⅲ-U：修改记录" class="headerlink" title="Ⅲ U：修改记录"></a>Ⅲ U：修改记录</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uTest</span><span class="params">()</span> <span class="keyword">throws</span> SQLException, ClassNotFoundException </span>&#123;</span><br><span class="line">    <span class="comment">//注册驱动</span></span><br><span class="line">    Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/jdbc"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line">    <span class="comment">//定义sql</span></span><br><span class="line">    String sql = <span class="string">"update user set username = 'hello' where id = 4"</span>;</span><br><span class="line">    <span class="comment">//获取执行sql对象</span></span><br><span class="line">    Statement stat = conn.createStatement();</span><br><span class="line">    <span class="comment">//执行sql</span></span><br><span class="line">    <span class="keyword">int</span> i = stat.executeUpdate(sql);</span><br><span class="line">    <span class="comment">//结果处理</span></span><br><span class="line">    <span class="keyword">if</span> (i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">"修改成功"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"修改失败"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    stat.close();</span><br><span class="line">    conn.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="Ⅳ-D：删除记录"><a href="#Ⅳ-D：删除记录" class="headerlink" title="Ⅳ D：删除记录"></a>Ⅳ D：删除记录</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dTest</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">    <span class="comment">//注册驱动</span></span><br><span class="line">    Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/jdbc"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line">    <span class="comment">//定义sql</span></span><br><span class="line">    String sql = <span class="string">"delete from user where id = 4"</span>;</span><br><span class="line">    <span class="comment">//获取执行sql对象</span></span><br><span class="line">    Statement stat = conn.createStatement();</span><br><span class="line">    <span class="comment">//执行sql</span></span><br><span class="line">    <span class="keyword">int</span> i = stat.executeUpdate(sql);</span><br><span class="line">    <span class="comment">//结果处理</span></span><br><span class="line">    <span class="keyword">if</span> (i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">"删除成功"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"删除失败"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    stat.close();</span><br><span class="line">    conn.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1-5-工具类"><a href="#1-5-工具类" class="headerlink" title="1.5 工具类"></a>1.5 工具类</h3><p>通过上面案例需求我们会发现每次去执行SQL语句都需要注册驱动，获取连接，得到Statement，以及释放资源。发现很多重复的劳动，我们可以将重复的代码定义到一个工具类中。 </p>
<blockquote>
<p><strong>目的</strong>：简化书写，一劳永逸</p>
</blockquote>
<p>步骤分析：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcUtils</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">   <span class="comment">// 1.注册驱动 </span></span><br><span class="line">   <span class="keyword">static</span>&#123;</span><br><span class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 2.建立连接</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span>  DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/jdbc"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="comment">// 3.释放资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(......)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//注册驱动</span></span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对外提供获取连接方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 连接对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/jdbc"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resultSet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> statement</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(ResultSet resultSet, Statement statement,Connection connection)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (resultSet != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (statement != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(Statement statement,Connection connection)</span></span>&#123;</span><br><span class="line">        release(<span class="keyword">null</span>,statement,connection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1-6-JDBC的事务操作"><a href="#1-6-JDBC的事务操作" class="headerlink" title="1.6 JDBC的事务操作"></a>1.6 JDBC的事务操作</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>事务</span><br><span class="line"><span class="code">	如果一个包含多个步骤的业务操作，被事务管理，那么这些操作要么同时成功，要么同时失败。</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="bullet">* </span>MySQL操作</span><br><span class="line"><span class="code">	1.开启事务</span></span><br><span class="line"><span class="code">		begin</span></span><br><span class="line"><span class="code">	2.提交事务</span></span><br><span class="line"><span class="code">		commit</span></span><br><span class="line"><span class="code">	3.回滚事务</span></span><br><span class="line"><span class="code">		rollback</span></span><br><span class="line"><span class="code">		</span></span><br><span class="line"><span class="bullet">* </span>java操作（使用Connection对象）</span><br><span class="line"><span class="code">	1.开启事务（关闭自动提交）</span></span><br><span class="line"><span class="code">		void setAutoCommit(false);</span></span><br><span class="line"><span class="code">	2.提交事务</span></span><br><span class="line"><span class="code">		void commit();</span></span><br><span class="line"><span class="code">	3.回滚事务</span></span><br><span class="line"><span class="code">		void rollback();</span></span><br></pre></td></tr></table></figure>



<h4 id="转账案例"><a href="#转账案例" class="headerlink" title="转账案例"></a>转账案例</h4><h5 id="Ⅰ-准备表和数据"><a href="#Ⅰ-准备表和数据" class="headerlink" title="Ⅰ 准备表和数据"></a>Ⅰ 准备表和数据</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">account</span>(</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`user`</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">  <span class="string">`balance`</span> <span class="keyword">DOUBLE</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">account</span> <span class="keyword">VALUES</span>(<span class="literal">NULL</span>,<span class="string">'张三'</span>,<span class="number">1000</span>),(<span class="literal">NULL</span>,<span class="string">'李四'</span>,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<h5 id="Ⅱ-异常捕获架构"><a href="#Ⅱ-异常捕获架构" class="headerlink" title="Ⅱ 异常捕获架构"></a>Ⅱ 异常捕获架构</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TXDemo</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTx</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Ⅲ-嵌入事务代码"><a href="#Ⅲ-嵌入事务代码" class="headerlink" title="Ⅲ 嵌入事务代码"></a>Ⅲ 嵌入事务代码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TXDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTx</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        Statement statement = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.获取连接</span></span><br><span class="line">            connection = JdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">// 2.开启事务</span></span><br><span class="line">            connection.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3.处理业务逻辑（包含多条sql语句）</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4.提交事务</span></span><br><span class="line">            connection.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 5.回滚事务</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.rollback();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 6.释放资源</span></span><br><span class="line">            JdbcUtils.release(statement, connection);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Ⅳ-代码实现-1"><a href="#Ⅳ-代码实现-1" class="headerlink" title="Ⅳ 代码实现"></a>Ⅳ 代码实现</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC的事务操作</span></span><br><span class="line"><span class="comment"> *      转账</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTransaction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement stat = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取连接</span></span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">// 关闭自动提交</span></span><br><span class="line">            conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">// 定义张三转出sql语句</span></span><br><span class="line">            String sql1 = <span class="string">"update account set balance = balance - 100 where id = 1"</span>;</span><br><span class="line">            <span class="comment">// 获取执行sql的statement对象</span></span><br><span class="line">            stat = conn.createStatement();</span><br><span class="line">            <span class="comment">// 开始转账</span></span><br><span class="line">            <span class="keyword">int</span> i = stat.executeUpdate(sql1);</span><br><span class="line">            <span class="keyword">if</span> (i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"张三转出..."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//模拟系统故障</span></span><br><span class="line">            <span class="keyword">int</span> h = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 定义李四转入sql</span></span><br><span class="line">            String sql2 = <span class="string">"update account set balance = balance + 100 where id = 2"</span>;</span><br><span class="line">            <span class="comment">// 开始执行</span></span><br><span class="line">            <span class="keyword">int</span> j = stat.executeUpdate(sql2);</span><br><span class="line">            <span class="keyword">if</span> (j&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"李四转入...."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 全部执行完，提交事务</span></span><br><span class="line">            conn.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="comment">// 出异常时，回滚</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.rollback();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 释放资源</span></span><br><span class="line">            JdbcUtils.release(stat,conn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="二、案例：用户登录"><a href="#二、案例：用户登录" class="headerlink" title="二、案例：用户登录"></a>二、案例：用户登录</h2><p><strong>需求：</strong>登录页面，用户输入账号和密码，实现登录网站功能</p>
<h3 id="2-1-需求分析"><a href="#2-1-需求分析" class="headerlink" title="2.1 需求分析"></a>2.1 需求分析</h3><p><img data-src="/img/%E7%99%BB%E5%BD%95%E6%A1%88%E4%BE%8B%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90.png" alt="登录案例需求分析"></p>
<h3 id="2-2-代码实现"><a href="#2-2-代码实现" class="headerlink" title="2.2 代码实现"></a>2.2 代码实现</h3><h5 id="Ⅰ-创建web模块，导入jar包"><a href="#Ⅰ-创建web模块，导入jar包" class="headerlink" title="Ⅰ 创建web模块，导入jar包"></a>Ⅰ 创建web模块，导入jar包</h5><p><img data-src="/img/%E7%99%BB%E9%99%86%E6%A1%88%E4%BE%8B%E5%AF%BC%E5%85%A5jar%E5%8C%85.png" alt="登陆案例导入jar包"></p>
<h5 id="Ⅱ-导入资源"><a href="#Ⅱ-导入资源" class="headerlink" title="Ⅱ 导入资源"></a>Ⅱ 导入资源</h5><p><img data-src="/img/%E7%99%BB%E5%BD%95%E6%A1%88%E4%BE%8B%E5%AF%BC%E5%85%A5%E9%A1%B5%E9%9D%A2%E8%B5%84%E6%BA%90.png" alt="登录案例导入页面资源"></p>
<h5 id="Ⅲ-login-jsp"><a href="#Ⅲ-login-jsp" class="headerlink" title="Ⅲ login.jsp"></a>Ⅲ login.jsp</h5><p><img data-src="/img/%E7%99%BB%E5%BD%95%E6%A1%88%E4%BE%8Blogin.jsp(1).png" alt="login.jsp"></p>
<p><img data-src="/img/%E7%99%BB%E5%BD%95%E6%A1%88%E4%BE%8Blogin.jsp(2).png" alt="login.jsp"></p>
<h5 id="Ⅳ-导入JdbcUtils"><a href="#Ⅳ-导入JdbcUtils" class="headerlink" title="Ⅳ 导入JdbcUtils"></a>Ⅳ 导入JdbcUtils</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sun.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Sunmoon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Connection conn;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//注册驱动</span></span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/jdbc"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(ResultSet resultSet, Statement statement,Connection connection)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (resultSet != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (statement != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(Statement statement,Connection connection)</span></span>&#123;</span><br><span class="line">        release(<span class="keyword">null</span>,statement,connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="Ⅴ-LoginServlet"><a href="#Ⅴ-LoginServlet" class="headerlink" title="Ⅴ LoginServlet"></a>Ⅴ LoginServlet</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/LoginServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.接收请求参数</span></span><br><span class="line">        String username = request.getParameter(<span class="string">"username"</span>);</span><br><span class="line">        String password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 2.jdbc查询数据库</span></span><br><span class="line">            <span class="comment">// 2.1 建立连接</span></span><br><span class="line">            Connection connection = JdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">// 2.2 编写sql</span></span><br><span class="line">            <span class="comment">// String sql = "select * from user where username = 'admin' and password = '123'";</span></span><br><span class="line">            String sql = <span class="string">"select * from user where username = '"</span> + username + <span class="string">"' and password = '"</span> + password + <span class="string">"'"</span>;</span><br><span class="line">            System.out.println(sql);</span><br><span class="line">            <span class="comment">// 2.3 获取sql执行对象</span></span><br><span class="line">            Statement statement = connection.createStatement();</span><br><span class="line">            <span class="comment">// 2.4 发送sql并返回结果</span></span><br><span class="line">            ResultSet resultSet = statement.executeQuery(sql);</span><br><span class="line">            <span class="comment">// 3. 判断</span></span><br><span class="line">            <span class="keyword">if</span> (resultSet.next()) &#123; <span class="comment">// 登录成功</span></span><br><span class="line">                <span class="comment">// 从数据库中获取</span></span><br><span class="line">                String loginUsername = resultSet.getString(<span class="string">"username"</span>);</span><br><span class="line">                <span class="comment">// 登录人存入session</span></span><br><span class="line">                request.getSession().setAttribute(<span class="string">"loginUsername"</span>, loginUsername);</span><br><span class="line">                <span class="comment">// 重定向list.jsp</span></span><br><span class="line">                response.sendRedirect(request.getContextPath() + <span class="string">"/list.jsp"</span>);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 登录失败</span></span><br><span class="line">                request.setAttribute(<span class="string">"error"</span>, <span class="string">"用户名或密码错误"</span>);</span><br><span class="line">                request.getRequestDispatcher(<span class="string">"/login.jsp"</span>).forward(request, response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"数据库建立连接失败..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="Ⅵ-list-jsp"><a href="#Ⅵ-list-jsp" class="headerlink" title="Ⅵ list.jsp"></a>Ⅵ list.jsp</h5><p><img data-src="/img/%E7%99%BB%E5%BD%95%E6%A1%88%E4%BE%8Blist.jsp.png" alt="登录案例list.jsp"></p>
<h2 id="三、PreparedStatement"><a href="#三、PreparedStatement" class="headerlink" title="三、PreparedStatement"></a>三、PreparedStatement</h2><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h3><p>我们让用户输入的信息和SQL语句进行字符串拼接。用户输入的内容作为了SQL语句语法的一部分，改变了原有SQL真正的意义，以上问题称为SQL注入。 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 此sql原有的含义，是根据用户名和密码 查询</span><br><span class="line">SELECT * FROM USER WHERE username &#x3D; &#39;jack&#39; AND PASSWORD &#x3D; &#39;123&#39;；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 现在我们将用户输入的参数和sql字符语句进行拼接，改了sql原有的含义，只是根据用户名去查询（sql注入）</span><br><span class="line">SELECT * FROM USER WHERE username &#x3D; &#39;jack&#39;# &#39; and password &#x3D; &#39;&#39;；</span><br></pre></td></tr></table></figure>



<p><strong>解决sql注入问题</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 将实际参数采用？占位符代替</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">USER</span> <span class="keyword">WHERE</span> username = ? <span class="keyword">AND</span> <span class="keyword">PASSWORD</span> = ?</span><br></pre></td></tr></table></figure>



<p><strong>PreparedSatement使用步骤</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.sql语句使用？占位符代替</span></span><br><span class="line">String sql = <span class="string">"SELECT * FROM USER WHERE username = ? AND PASSWORD = ?"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.conn获取sql预编译执行对象,先把java中sql字符串发送给数据库进行预编译</span></span><br><span class="line">PreparedSatement pstmt = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.给?赋予实际参数</span></span><br><span class="line">pstmt.setString(<span class="number">1</span>,<span class="string">"admin"</span>);</span><br><span class="line">pstmt.setObject(<span class="number">2</span>,<span class="string">"123"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.执行sql并返回结果，不需要再传递sql语句了</span></span><br><span class="line">ResultSet rs = pstmt.executeQuery();</span><br></pre></td></tr></table></figure>



<h3 id="3-2-改进登录案例"><a href="#3-2-改进登录案例" class="headerlink" title="3.2 改进登录案例"></a>3.2 改进登录案例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/LoginServletPro"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServletPro</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.接收请求参数</span></span><br><span class="line">        String username = request.getParameter(<span class="string">"username"</span>);</span><br><span class="line">        String password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line">        <span class="comment">// 声明对象</span></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 2.jdbc查询数据库</span></span><br><span class="line">            <span class="comment">// 2.1 建立连接</span></span><br><span class="line">            connection = JdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">// 2.2 编写sql语句</span></span><br><span class="line">            String sql = <span class="string">"select * from user where username = ? and password = ?"</span>;</span><br><span class="line">            <span class="comment">// 2.3 获取sql预编译执行对象</span></span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            <span class="comment">// 2.4 设置实际参数</span></span><br><span class="line">            preparedStatement.setString(<span class="number">1</span>, username);</span><br><span class="line">            preparedStatement.setString(<span class="number">2</span>, password);</span><br><span class="line">            <span class="comment">// 2.5 执行sql并返回结果</span></span><br><span class="line">            resultSet = preparedStatement.executeQuery();</span><br><span class="line">            <span class="comment">// 3. 判断</span></span><br><span class="line">            <span class="keyword">if</span> (resultSet.next()) &#123; <span class="comment">// 登录成功</span></span><br><span class="line">                <span class="comment">// 从数据库中获取</span></span><br><span class="line">                String loginUsername = resultSet.getString(<span class="string">"username"</span>);</span><br><span class="line">                <span class="comment">// 登录人存入session</span></span><br><span class="line">                request.getSession().setAttribute(<span class="string">"loginUsername"</span>, loginUsername);</span><br><span class="line">                <span class="comment">// 重定向list.jsp</span></span><br><span class="line">                response.sendRedirect(request.getContextPath() + <span class="string">"/list.jsp"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 登录失败</span></span><br><span class="line">                request.setAttribute(<span class="string">"error"</span>, <span class="string">"用户名或密码错误"</span>);</span><br><span class="line">                request.getRequestDispatcher(<span class="string">"/login.jsp"</span>).forward(request, response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"数据库建立连接失败..."</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(resultSet, preparedStatement, connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>PreparedStatement使用步骤小结：</p>
<ol>
<li>建立连接</li>
<li>编写sql，?占位符代替实际参数</li>
<li>获取sql预编译执行对象</li>
<li>给?设置实际参数</li>
<li>执行sql并返回结果</li>
<li>处理结果</li>
<li>释放资源</li>
</ol>
</blockquote>
<h3 id="3-3-PreparedStatement优点"><a href="#3-3-PreparedStatement优点" class="headerlink" title="3.3 PreparedStatement优点"></a>3.3 PreparedStatement优点</h3><ul>
<li>防止sql注入，提高程序的安全性</li>
<li>减少编译次数，提高程序的效率</li>
</ul>
<h2 id="四、连接池"><a href="#四、连接池" class="headerlink" title="四、连接池"></a>四、连接池</h2><h3 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h3><p><img data-src="/img/%E8%BF%9E%E6%8E%A5%E6%B1%A0%E6%A6%82%E8%BF%B01.png" alt="连接池概述"></p>
<p>连接池其实就是一个容器(集合)，存放数据库连接的容器。</p>
<p>当系统初始化好后，容器被创建，容器中会申请一些连接对象，当用户来访问数据库时，从容器中获取连接对象，用户访问完之后，会将连接对象归还给容器。</p>
<p><strong>优点</strong></p>
<ul>
<li>节约资源，减轻服务器压力</li>
<li>提高连接复用性，用户访问高效</li>
</ul>
<p><strong>实现</strong></p>
<p>Java为数据库连接池提供了公共的接口: DataSource ，各个连接池厂商去实现这套接口，提供jar包。</p>
<p><img data-src="/img/%E8%BF%9E%E6%8E%A5%E6%B1%A0%E6%A6%82%E8%BF%B02.png" alt="连接池概述2"></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>DataSource （javax.sql）</span><br><span class="line"><span class="code">	功能</span></span><br><span class="line"><span class="bullet">		* </span>获取连接：Connection getConnection()</span><br><span class="line"><span class="bullet">		* </span>归还连接：connection.close()</span><br><span class="line"><span class="code">			连接池底层对connection.close()进行了增强，使用动态代理，不再是释放资源而是归还连接..</span></span><br></pre></td></tr></table></figure>

<p><strong>常用的连接池技术</strong></p>
<ul>
<li>C3P0：数据库连接池技术，使用它的开源项目有Hibernate、Spring等。</li>
<li><span style="color:red">Druid</span>：(德鲁伊)阿里巴巴提供的数据库连接池技术，是目前最好的数据库连接池。</li>
<li>HikariCP：日本开发的连接池技术,称之为效率最高的一款连接池,springboot默认的连接池</li>
</ul>
<p><strong>其他的连接池</strong>(了解)</p>
<ul>
<li>boneCP：数据库连接池技术，体积小速度快。</li>
<li>DBCP：Apache提供的数据库连接池技术。</li>
</ul>
<h3 id="4-2-Druid连接池的使用"><a href="#4-2-Druid连接池的使用" class="headerlink" title="4.2 Druid连接池的使用"></a>4.2 Druid连接池的使用</h3><p> <strong>导入环境(相关jar包)</strong></p>
<p><img data-src="/img/%E5%AF%BC%E5%85%A5Druid%E8%BF%9E%E6%8E%A5%E6%B1%A0jar%E5%8C%85.png" alt="导入Druid连接池jar包"></p>
<h4 id="4-2-1-硬编码"><a href="#4-2-1-硬编码" class="headerlink" title="4.2.1 硬编码"></a>4.2.1 硬编码</h4><p>相关参数配置</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>jdbcUrl</td>
<td>连接数据库的url：mysql : jdbc:mysql://localhost:3306/数据库名</td>
</tr>
<tr>
<td>username</td>
<td>数据库的用户名</td>
</tr>
<tr>
<td>password</td>
<td>数据库密码</td>
</tr>
<tr>
<td>driverClassName</td>
<td>驱动类名。根据url自动识别，这一项可配可不配，如果不配置druid会根据 url自动识别dbType，然后选择相应的driverClassName(建议配置下)</td>
</tr>
<tr>
<td>initialSize</td>
<td>初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次 getConnection时。(不配置默认为0)</td>
</tr>
<tr>
<td>maxActive</td>
<td>最大连接池数量(不配置默认为8)</td>
</tr>
<tr>
<td>minIdle</td>
<td>最小连接池数量</td>
</tr>
<tr>
<td>maxWait</td>
<td>获取连接时最大等待时间，单位毫秒。</td>
</tr>
</tbody></table>
<p>代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 硬编码方式编写 druid连接池</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建druid连接池对象</span></span><br><span class="line">        DruidDataSource druidDataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.设置数据库基本四项（驱动、url、username、password）</span></span><br><span class="line">        druidDataSource.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        druidDataSource.setUrl(<span class="string">"jdbc:mysql://localhost:3306/jdbc"</span>);</span><br><span class="line">        druidDataSource.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        druidDataSource.setPassword(<span class="string">"root"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置容器参数</span></span><br><span class="line">        druidDataSource.setInitialSize(<span class="number">5</span>); <span class="comment">// 初始化5个连接对象</span></span><br><span class="line">        druidDataSource.setMaxActive(<span class="number">10</span>); <span class="comment">// 最大连接数10个</span></span><br><span class="line">        druidDataSource.setMinIdle(<span class="number">6</span>); <span class="comment">// 空闲期保留6个连接对象、</span></span><br><span class="line">        druidDataSource.setMaxWait(<span class="number">3000</span>); <span class="comment">// 第11个人访问时，等待3秒</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.获取连接对象</span></span><br><span class="line">        DruidPooledConnection connection = druidDataSource.getConnection();</span><br><span class="line">        System.out.println(<span class="string">"使用连接操作数据库："</span>+connection);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.归还到连接池</span></span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>上面的代码将可能会修改的参数，写死在java代码中，不方便后期项目的迭代和维护…</p>
</blockquote>
<h4 id="4-2-2-配置文件"><a href="#4-2-2-配置文件" class="headerlink" title="4.2.2 配置文件"></a>4.2.2 配置文件</h4><blockquote>
<p>配置文件要求在src根目录下</p>
</blockquote>
<blockquote>
<p><code>druid.properties</code> 配置文件内容</p>
</blockquote>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据库基本四项</span></span><br><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/jdbc</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化个数</span></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">5</span></span><br><span class="line"><span class="comment"># 最大连接个数</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 等待时间，毫秒</span></span><br><span class="line"><span class="attr">maxWait</span>=<span class="string">3000</span></span><br></pre></td></tr></table></figure>



<p><strong>代码引入配置文件</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置文件方式 创建druid连接池对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 通过ClassLoader 加载src目录下的 druid.properties  （固定语法）</span></span><br><span class="line">        InputStream in = Demo2.class.getClassLoader().getResourceAsStream("druid.properties");</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.load(in);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取druid连接对象</span></span><br><span class="line">        DataSource dataSource = DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">11</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 获取连接</span></span><br><span class="line">            Connection connection = dataSource.getConnection();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"第"</span> + i + <span class="string">"次获取连接："</span> + connection);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">10</span>)&#123; <span class="comment">// 归还</span></span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-3-编写Druid连接池工具类"><a href="#4-3-编写Druid连接池工具类" class="headerlink" title="4.3 编写Druid连接池工具类"></a>4.3 编写Druid连接池工具类</h3><p>我们现在发现每一个执行conn之前，都需要实现创建dataSource对象，这个对象是非常笨重的，一个项目只需要配置一次连接池即可。</p>
<ul>
<li><strong>技术分析</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcUtils</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1.初始化连接池对象</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2.提供获取连接池的静态方法</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3.提供获取连接对象的静态方法</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 4.提供释放资源的方法（close方法是归还数据库连接到连接池）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li><strong>代码实现</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  连接池工具类，保证一个项目中的连接池对象只创建一次....</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource dataSource;</span><br><span class="line">    <span class="comment">// 1.初始化连接池对象</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 通过ClassLoader 加载src目录下的 druid.properties  （固定语法）</span></span><br><span class="line">            InputStream in = Demo2.class.getClassLoader().getResourceAsStream("druid.properties");</span><br><span class="line">            Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            properties.load(in);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取druid连接对象</span></span><br><span class="line">            dataSource = DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2.提供获取连接池的静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.提供获取连接对象的静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.提供释放资源的方法（conn是归还）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(ResultSet resultSet, Statement statement, Connection connection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (resultSet != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (statement != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(Statement statement, Connection connection)</span> </span>&#123;</span><br><span class="line">        release(<span class="keyword">null</span>, statement, connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>JDBC</tag>
        <tag>PreparedStatement</tag>
        <tag>Druid连接池</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis基础</title>
    <url>/2020/09/06/Mybatis%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="一、框架简介"><a href="#一、框架简介" class="headerlink" title="一、框架简介"></a>一、框架简介</h2><p><img data-src="/img/%E6%A1%86%E6%9E%B6%E7%AE%80%E4%BB%8B.png" alt="框架简介"></p>
<a id="more"></a>

<h3 id="1-1-回顾三层架构"><a href="#1-1-回顾三层架构" class="headerlink" title="1.1 回顾三层架构"></a>1.1 回顾三层架构</h3><p>在java语言中开发软件的架构是三层架构，之所以流行是因为有着清晰的任务划分。一般包括以下三层：  </p>
<ul>
<li>持久层：主要完成与数据库相关的操作，即对数据库的增删改查。  </li>
<li>业务层：主要根据功能需求完成业务逻辑的定义和实现。  </li>
<li>表现层：主要完成与软件用户的交互，需要有交互界面（UI）。  </li>
</ul>
<h3 id="1-2-框架"><a href="#1-2-框架" class="headerlink" title="1.2 框架"></a>1.2 框架</h3><p><strong>什么是框架？</strong></p>
<ul>
<li>把重复的代码工作抽取出来，让程序员把精力专注在核心的业务代码实现上。</li>
<li>框架可以理解为半成品软件，框架做好以后，接下来在它基础上进行开发  </li>
</ul>
<p><strong>为什么学习框架？</strong></p>
<ul>
<li>因为学了它之后，我们的开发确实变得简单。</li>
<li>企业开发中都在用，不会它，你就无法正常进入企业进行开发工作。</li>
</ul>
<p><strong>java中常见的框架？</strong></p>
<p>Java世界中的框架非常的多，每一个框架都是为了解决某一部分或某些问题而存在的。</p>
<ul>
<li><p>持久层框架：专注于解决数据持久化的框架。常用的有mybatis、hibernate、spring jdbc等等。</p>
</li>
<li><p>表现层框架：专注于解决与用户交互的框架。常见的有struts2、spring mvc等等。</p>
</li>
<li><p>全栈框架: 能在各层都给出解决方案的框架。比较著名的就是spring。</p>
</li>
</ul>
<p><strong>这么多框架，我们怎么选择呢?</strong></p>
<p>我们以企业中最常用的组合为准来学习Spring + Spring MVC + mybatis（SSM）</p>
<h2 id="二、Mybatis简介"><a href="#二、Mybatis简介" class="headerlink" title="二、Mybatis简介"></a>二、Mybatis简介</h2><h3 id="2-1-ORM概述"><a href="#2-1-ORM概述" class="headerlink" title="2.1 ORM概述"></a>2.1 ORM概述</h3><p><img data-src="/img/ORM%E6%A6%82%E8%BF%B0.png" alt="ORM概述"></p>
<p>ORM（Object Relational Mapping）对象关系映射，是一个针对持久层的理论思想。</p>
<ul>
<li>Object：对象，这里指的是java类</li>
<li>Relational：关系，这里指的是数据表</li>
<li>Mapping：映射，这里指的是java类和数据表之间建立的对应关系</li>
</ul>
<p><strong>ORM用来解决什么问题呢?</strong></p>
<p>一句话说，就是ORM思想可以让我们以面向对象的形式操作数据库</p>
<p> <strong>常见的ORM框架有哪些？</strong></p>
<ul>
<li>Hibernate（全自动ORM，是JPA实现的框架）</li>
<li>Mybatis（半自动ORM，实现自动封装实体、但是需要开发人员编写sql）</li>
</ul>
<h3 id="2-2-Mybatis介绍"><a href="#2-2-Mybatis介绍" class="headerlink" title="2.2 Mybatis介绍"></a>2.2 Mybatis介绍</h3><p><strong>历史</strong></p>
<ul>
<li>Mybatis本是apache的一个开源项目，名为iBatis。</li>
<li>2010年这个项目由apache迁移到了google，并且改名为Mybatis。</li>
<li>2013年迁移到Github。</li>
</ul>
<p><strong>简介</strong></p>
<p>Mybatis官网地址：<a href="http://www.mybatis.org/mybatis-3/" target="_blank" rel="noopener">http://www.mybatis.org/mybatis-3/</a> </p>
<ul>
<li><p>Mybatis是一款优秀的持久层框架，它不需要像JDBC那样去写复杂代码、手动设置参数、繁琐的处理结果集</p>
</li>
<li><p>它采用简单的XML配置 + 接口方法的形式实现对数据库的增删改查，使得让程序员只关注sql本身</p>
</li>
</ul>
<blockquote>
<p>小结：</p>
<ul>
<li>Mybatis可以是我们不需要再去编写JDBC繁琐的步骤了，通过<strong>配置文件+接口</strong>方式就可以实现CRUD，我们开发只需要关注sql</li>
</ul>
</blockquote>
<h2 id="三、Mybatis快速入门"><a href="#三、Mybatis快速入门" class="headerlink" title="三、Mybatis快速入门"></a>三、Mybatis快速入门</h2><p><strong>需求</strong></p>
<blockquote>
<p>查询数据库user表的所有记录，封装到User对象中。</p>
</blockquote>
<h3 id="3-1-开发步骤"><a href="#3-1-开发步骤" class="headerlink" title="3.1 开发步骤"></a>3.1 开发步骤</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>准备mybatis_db和user表</span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>创建java模块，并导入相关jar包</span><br><span class="line"></span><br><span class="line"><span class="bullet">3. </span>创建User实体</span><br><span class="line"></span><br><span class="line"><span class="bullet">4. </span>编写映射文件 UserMapper.xml</span><br><span class="line"></span><br><span class="line"><span class="bullet">5. </span>编写核心文件 SqlMapConfig.xml （mybatis-config.xml）</span><br><span class="line"></span><br><span class="line"><span class="bullet">6. </span>编写测试</span><br></pre></td></tr></table></figure>



<h3 id="3-2-代码实现"><a href="#3-2-代码实现" class="headerlink" title="3.2 代码实现"></a>3.2 代码实现</h3><h4 id="Ⅰ-准备数据库和user表"><a href="#Ⅰ-准备数据库和user表" class="headerlink" title="Ⅰ 准备数据库和user表"></a>Ⅰ 准备数据库和user表</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database if not exists &#96;mybatis_db&#96;;</span><br><span class="line">USE &#96;mybatis_db&#96;;</span><br><span class="line">CREATE TABLE &#96;user&#96; (</span><br><span class="line">  &#96;id&#96; int(11) NOT NULL auto_increment,</span><br><span class="line">  &#96;username&#96; varchar(32) NOT NULL COMMENT &#39;用户名称&#39;,</span><br><span class="line">  &#96;birthday&#96; datetime default NULL COMMENT &#39;生日&#39;,</span><br><span class="line">  &#96;sex&#96; varchar(10) default NULL COMMENT &#39;性别&#39;,</span><br><span class="line">  &#96;address&#96; varchar(256) default NULL COMMENT &#39;地址&#39;,</span><br><span class="line">  PRIMARY KEY  (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">insert into &#96;user&#96;(&#96;id&#96;,&#96;username&#96;,&#96;birthday&#96;,&#96;sex&#96;,&#96;address&#96;) </span><br><span class="line">values (41,&#39;老王&#39;,&#39;2019-05-27 17:47:08&#39;,&#39;男&#39;,&#39;北京&#39;),</span><br><span class="line">(42,&#39;王小二&#39;,&#39;2019-03-02 15:09:37&#39;,&#39;女&#39;,&#39;北京金燕龙&#39;),</span><br><span class="line">(43,&#39;老李&#39;,&#39;2019-03-04 11:34:34&#39;,&#39;女&#39;,&#39;北京修正&#39;),</span><br><span class="line">(45,&#39;张三&#39;,&#39;2019-03-04 12:04:06&#39;,&#39;男&#39;,&#39;北京金燕龙&#39;),</span><br><span class="line">(46,&#39;王小二&#39;,&#39;2018-09-07 17:37:26&#39;,&#39;男&#39;,&#39;北京TBD&#39;),</span><br><span class="line">(48,&#39;小马宝莉&#39;,&#39;2019-03-08 11:44:00&#39;,&#39;女&#39;,&#39;北京修正&#39;);</span><br></pre></td></tr></table></figure>



<h4 id="Ⅱ-创建java模块，并导入相关jar包"><a href="#Ⅱ-创建java模块，并导入相关jar包" class="headerlink" title="Ⅱ 创建java模块，并导入相关jar包"></a>Ⅱ 创建java模块，并导入相关jar包</h4><p><img data-src="/img/mybatis%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E5%88%9B%E5%BB%BAjava%E6%A8%A1%E5%9D%97.png" alt="mybatis快速入门——创建java模块"></p>
<h4 id="Ⅲ-创建User实体"><a href="#Ⅲ-创建User实体" class="headerlink" title="Ⅲ 创建User实体"></a>Ⅲ 创建User实体</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="comment">// setter、getter 略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Ⅳ-编写映射文件-UserMapper-xml"><a href="#Ⅳ-编写映射文件-UserMapper-xml" class="headerlink" title="Ⅳ 编写映射文件 UserMapper.xml"></a>Ⅳ 编写映射文件 UserMapper.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--查询所有--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="Ⅴ-编写核心文件-SqlMapConfig-xml-（mybatis-config-xml）"><a href="#Ⅴ-编写核心文件-SqlMapConfig-xml-（mybatis-config-xml）" class="headerlink" title="Ⅴ 编写核心文件 SqlMapConfig.xml （mybatis-config.xml）"></a>Ⅴ 编写核心文件 SqlMapConfig.xml （mybatis-config.xml）</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置数据库环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql环境--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--事务管理器--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--数据源：使用内置连接池--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis_db"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加载映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/sun/mapper/UserMapper.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="Ⅵ-测试"><a href="#Ⅵ-测试" class="headerlink" title="Ⅵ 测试"></a>Ⅵ 测试</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询所有</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1.加载核心文件</span></span><br><span class="line">        InputStream in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">// 2.构建工厂对象</span></span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        <span class="comment">// 3.创建会话对象（简单理解为：connection）</span></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        <span class="comment">// 4.调用API执行sql语句</span></span><br><span class="line">        <span class="comment">// 参数：命名空间.id</span></span><br><span class="line">        List&lt;User&gt; list = sqlSession.selectList(<span class="string">"UserMapper.findAll"</span>);</span><br><span class="line">        <span class="keyword">for</span> (User user : list) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 5.释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="四、Mybatis映射文件概述"><a href="#四、Mybatis映射文件概述" class="headerlink" title="四、Mybatis映射文件概述"></a>四、Mybatis映射文件概述</h2><p><img data-src="/img/mybatis%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6%E6%A6%82%E8%BF%B0.png" alt="mybatis映射文件概述"></p>
<h2 id="五、Mybatis完成增删改查"><a href="#五、Mybatis完成增删改查" class="headerlink" title="五、Mybatis完成增删改查"></a>五、Mybatis完成增删改查</h2><h3 id="5-1-新增"><a href="#5-1-新增" class="headerlink" title="5.1 新增"></a>5.1 新增</h3><blockquote>
<p>需求: 向数据库user表新增一条记录</p>
</blockquote>
<h4 id="①-编写UserMapper-xml"><a href="#①-编写UserMapper-xml" class="headerlink" title="① 编写UserMapper.xml"></a>① 编写UserMapper.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加记录--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"save"</span> <span class="attr">parameterType</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">    insert into user values(null,#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="②-编写测试类"><a href="#②-编写测试类" class="headerlink" title="② 编写测试类"></a>② 编写测试类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加记录</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 1.加载核心文件</span></span><br><span class="line">    InputStream in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">    <span class="comment">// 2.构建工厂对象</span></span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">    <span class="comment">// 3.创建会话对象（简单理解为：connection）</span></span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">// 4.调用api添加记录</span></span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(<span class="string">"jack"</span>);</span><br><span class="line">    user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">    user.setSex(<span class="string">"男"</span>);</span><br><span class="line">    user.setAddress(<span class="string">"上海"</span>);</span><br><span class="line">    <span class="keyword">int</span> i = sqlSession.insert(<span class="string">"UserMapper.save"</span>, user);</span><br><span class="line">    System.out.println(i);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.提交事务并释放资源</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="③-新增注意事项"><a href="#③-新增注意事项" class="headerlink" title="③ 新增注意事项"></a>③ 新增注意事项</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>新增操作使用 <span class="xml"><span class="tag">&lt;<span class="name">insert</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span> 标签</span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>parameterType属性为传递参数的java类型</span><br><span class="line"></span><br><span class="line"><span class="bullet">3. </span>#&#123;&#125; 相当于?占位符，花括号内写实体的属性名</span><br><span class="line"></span><br><span class="line"><span class="bullet">4. </span>新增操作的API使用 sqlSession.insert(“命名空间.id”,实体对象);</span><br><span class="line"></span><br><span class="line"><span class="bullet">5. </span>DML操作需要手动提交事务 sqlSession.commit()</span><br></pre></td></tr></table></figure>



<h3 id="5-2-修改"><a href="#5-2-修改" class="headerlink" title="5.2 修改"></a>5.2 修改</h3><blockquote>
<p>需求: 根据user的主键修改其他属性  </p>
</blockquote>
<h4 id="①-编写UserMapper-xml-1"><a href="#①-编写UserMapper-xml-1" class="headerlink" title="① 编写UserMapper.xml"></a>① 编写UserMapper.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--修改记录--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">    update user set username = #&#123;username&#125; , birthday = #&#123;birthday&#125; , sex = #&#123;sex&#125; ,address = #&#123;address&#125; where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="②-编写测试类-1"><a href="#②-编写测试类-1" class="headerlink" title="② 编写测试类"></a>② 编写测试类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改记录</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 1.加载核心文件</span></span><br><span class="line">    InputStream in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">    <span class="comment">// 2.构建工厂对象</span></span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">    <span class="comment">// 3.创建会话对象（简单理解为：connection）</span></span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">// 4.调用API实现修改操作</span></span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">50</span>);</span><br><span class="line">    user.setUsername(<span class="string">"呵呵"</span>);</span><br><span class="line">    user.setSex(<span class="string">"女"</span>);</span><br><span class="line">    user.setAddress(<span class="string">"葫芦岛"</span>);</span><br><span class="line">    user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i = sqlSession.update(<span class="string">"UserMapper.update"</span>, user);</span><br><span class="line">    System.out.println(i);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.提交事务并释放资源</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="③-修改注意事项"><a href="#③-修改注意事项" class="headerlink" title="③ 修改注意事项"></a>③ 修改注意事项</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>修改操作使用 <span class="xml"><span class="tag">&lt;<span class="name">update</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span> 标签</span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>parameterType属性为传递参数的java类型</span><br><span class="line"></span><br><span class="line"><span class="bullet">3. </span>#&#123;&#125; 相当于?占位符，花括号内写实体的属性名</span><br><span class="line"></span><br><span class="line"><span class="bullet">4. </span>修改操作的API使用 sqlSession.update(“命名空间.id”,实体对象);</span><br><span class="line"></span><br><span class="line"><span class="bullet">5. </span>DML操作需要手动提交事务 sqlSession.commit()</span><br></pre></td></tr></table></figure>



<h3 id="5-3-删除"><a href="#5-3-删除" class="headerlink" title="5.3 删除"></a>5.3 删除</h3><blockquote>
<p>需求:根据主键删除一个用户  </p>
</blockquote>
<h4 id="①-编写UserMapper-xml-2"><a href="#①-编写UserMapper-xml-2" class="headerlink" title="① 编写UserMapper.xml"></a>① 编写UserMapper.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--删除记录--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"delete"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">    delete from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="②-编写测试类-2"><a href="#②-编写测试类-2" class="headerlink" title="② 编写测试类"></a>② 编写测试类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除记录</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">// 1.加载核心文件</span></span><br><span class="line">    InputStream in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">    <span class="comment">// 2.构建工厂对象</span></span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">    <span class="comment">// 3.创建会话对象（简单理解为：connection）</span></span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">// 4.调用api实现删除操作</span></span><br><span class="line">    Integer id = <span class="number">50</span>;</span><br><span class="line">    sqlSession.delete(<span class="string">"UserMapper.delete"</span>, id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.提交事务并释放资源</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="③-删除注意事项"><a href="#③-删除注意事项" class="headerlink" title="③ 删除注意事项"></a>③ 删除注意事项</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>删除操作使用 <span class="xml"><span class="tag">&lt;<span class="name">delete</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span> 标签</span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>parameterType属性为传递参数的java类型</span><br><span class="line"></span><br><span class="line"><span class="bullet">3. </span>#&#123;&#125; 相当于?占位符，如果传递是简单类型，花括号内随便写，通常做到见名之意即可</span><br><span class="line"></span><br><span class="line"><span class="bullet">4. </span>删除操作的API使用 sqlSession.delete(“命名空间.id”,主键);</span><br><span class="line"></span><br><span class="line"><span class="bullet">5. </span>DML操作需要手动提交事务 sqlSession.commit()</span><br></pre></td></tr></table></figure>



<h3 id="5-4-工具类"><a href="#5-4-工具类" class="headerlink" title="5.4 工具类"></a>5.4 工具类</h3><blockquote>
<p>编写了CRUD案例后，发现了测试代码加载文件、创建会话对象，都属于公共部分，可以抽取到工具类中，简化代码，提高效率</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化mybatis环境</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.加载核心文件</span></span><br><span class="line">            InputStream in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">            <span class="comment">// 2.构建工厂对象</span></span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"mybatis框架初始化失败..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取sqlSession方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">openSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提交事务并释放资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(SqlSession sqlSession)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sqlSession != <span class="keyword">null</span>) &#123;</span><br><span class="line">            sqlSession.commit();</span><br><span class="line">            sqlSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><blockquote>
<p>需求，查询id为 41这条记录</p>
</blockquote>
<h4 id="①-UserMapper-xml"><a href="#①-UserMapper-xml" class="headerlink" title="① UserMapper.xml"></a>① UserMapper.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--查询一个--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">    select * from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="②-测试代码"><a href="#②-测试代码" class="headerlink" title="② 测试代码"></a>② 测试代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询一个</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">// 1.获取sqlSession会话</span></span><br><span class="line">    SqlSession sqlSession = MyBatisUtils.openSession();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.调用api查询</span></span><br><span class="line">    User user = sqlSession.selectOne(<span class="string">"UserMapper.findById"</span>, <span class="number">41</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(user);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.提交并释放资源</span></span><br><span class="line">    MyBatisUtils.release(sqlSession);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="六、Mybatis核心文件概述"><a href="#六、Mybatis核心文件概述" class="headerlink" title="六、Mybatis核心文件概述"></a>六、Mybatis核心文件概述</h2><h3 id="6-1-标签层级关系"><a href="#6-1-标签层级关系" class="headerlink" title="6.1 标签层级关系"></a>6.1 标签层级关系</h3><blockquote>
<p>MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。 配置文档的顶层结构如下：</p>
</blockquote>
<p><img data-src="/img/mybatis%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%A0%87%E7%AD%BE%E5%B1%82%E7%BA%A7%E5%85%B3%E7%B3%BB.png" alt="mybatis核心配置文件标签层级关系"></p>
<h3 id="6-2-常用配置标签"><a href="#6-2-常用配置标签" class="headerlink" title="6.2 常用配置标签"></a>6.2 常用配置标签</h3><h4 id="environments标签"><a href="#environments标签" class="headerlink" title="environments标签"></a>environments标签</h4><blockquote>
<p>数据库环境的配置，支持多环境配置</p>
</blockquote>
<p><img data-src="/img/environments%E6%A0%87%E7%AD%BE.png" alt="environments标签"></p>
<h4 id="properties标签"><a href="#properties标签" class="headerlink" title="properties标签"></a>properties标签</h4><p><img data-src="/img/properties%E6%A0%87%E7%AD%BE.png" alt="properties标签"></p>
<h4 id="typeAliases标签"><a href="#typeAliases标签" class="headerlink" title="typeAliases标签"></a>typeAliases标签</h4><p><img data-src="/img/typeAliases%E6%A0%87%E7%AD%BE1.png" alt="typeAliases标签1"></p>
<p><img data-src="/img/typeAliases%E6%A0%87%E7%AD%BE2.png" alt="typeAliases标签2"></p>
<h4 id="mappers标签"><a href="#mappers标签" class="headerlink" title="mappers标签"></a>mappers标签</h4><blockquote>
<p>该标签的作用是加载映射文件的，加载方式有如下几种：</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>加载指定的src目录下的映射文件，例如：</span><br><span class="line"><span class="code">	&lt;mapper resource="com/sun/mapper/UserMapper.xml"/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>加载指定接口的全限定名，例如：【注解开发】</span><br><span class="line"><span class="code">	&lt;mapper class="com.sun.mapper.UserMapper"/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">3. </span>加载并扫描指定包下所有的接口，例如：【注解开发】</span><br><span class="line"><span class="code">	&lt;package name="com.sun.mapper"/&gt;</span></span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/sun/mapper/UserMapper.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="6-3-标签书写顺序"><a href="#6-3-标签书写顺序" class="headerlink" title="6.3 标签书写顺序"></a>6.3 标签书写顺序</h3><p><img data-src="/img/%E6%A0%87%E7%AD%BE%E4%B9%A6%E5%86%99%E9%A1%BA%E5%BA%8F.png" alt="标签书写顺序"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--引入外置properties文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbc.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--java类型别名配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--单个类型别名定义--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;typeAlias type="com.itheima.domain.User" alias="User"&gt;&lt;/typeAlias&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--把当前包内的所有java类型定义了别名，别名就是类名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.sun.domain"</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置数据库环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql环境--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--事务管理器--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--数据源：使用内置连接池--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加载映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/sun/mapper/UserMapper.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="七、Mybatis的API概述"><a href="#七、Mybatis的API概述" class="headerlink" title="七、Mybatis的API概述"></a>七、Mybatis的API概述</h2><h3 id="7-1-API介绍"><a href="#7-1-API介绍" class="headerlink" title="7.1 API介绍"></a>7.1 API介绍</h3><h4 id="7-1-1-Resources"><a href="#7-1-1-Resources" class="headerlink" title="7.1.1 Resources"></a>7.1.1 Resources</h4><ul>
<li>加载mybatis的核心配置文件，获取io流</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">InputStream inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br></pre></td></tr></table></figure>



<h4 id="7-1-2-SqlSessionFactoryBuilder"><a href="#7-1-2-SqlSessionFactoryBuilder" class="headerlink" title="7.1.2 SqlSessionFactoryBuilder"></a>7.1.2 SqlSessionFactoryBuilder</h4><ul>
<li>将mybatis配置文件加载到内存，构建出SqlSessionFactory工厂对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder(); </span><br><span class="line">SqlSessionFactory factory = builder.build(inputStream);</span><br></pre></td></tr></table></figure>



<h4 id="7-1-3-SqlSessionFactory"><a href="#7-1-3-SqlSessionFactory" class="headerlink" title="7.1.3 SqlSessionFactory"></a>7.1.3 SqlSessionFactory</h4><ul>
<li>这是一个工厂对象，对于这种创建和销毁都非常耗费资源的重量级对象，一个项目中只需要存在一个即可。<br>  也就是说，它的生命周期跟项目的生命周期是一致的(项目不亡，我不销毁)</li>
</ul>
<blockquote>
<p>它的任务是创建SqlSession会话底层</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需要手动提交事务，DML语句才会持久化到数据库中</span></span><br><span class="line"><span class="function">SqlSession <span class="title">openSession</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置是否开启自动提交，如果设置为true，开启自动提交事务【了解】</span></span><br><span class="line"><span class="function">SqlSession <span class="title">openSession</span><span class="params">(<span class="keyword">boolean</span> autoCommit)</span></span>;</span><br></pre></td></tr></table></figure>



<h4 id="7-1-4-SqlSession【核心】"><a href="#7-1-4-SqlSession【核心】" class="headerlink" title="7.1.4 SqlSession【核心】"></a>7.1.4 SqlSession【核心】</h4><ul>
<li>这是Mybatis的一个核心对象。我们基于这个对象可以实现对数据的CRUD操作。</li>
</ul>
<blockquote>
<p>注意：对于这个对象应做到每个线程独有，每次用时打开，用完关闭。</p>
</blockquote>
<p><strong>执行语句的方法主要有：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;T&gt; <span class="function">T <span class="title">selectOne</span><span class="params">(String statement, Object parameter)</span></span>;</span><br><span class="line"></span><br><span class="line">&lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">selectList</span><span class="params">(String statement, Object parameter)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(String statement, Object parameter)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(String statement, Object parameter)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(String statement, Object parameter)</span></span>;</span><br></pre></td></tr></table></figure>



<p><strong>操作事务的方法主要有：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>



<h3 id="7-2-配置关系"><a href="#7-2-配置关系" class="headerlink" title="7.2 配置关系"></a>7.2 配置关系</h3><p><img data-src="/img/%E9%85%8D%E7%BD%AE%E5%85%B3%E7%B3%BB.png" alt="配置关系"></p>
<h3 id="7-3-框架工作原理"><a href="#7-3-框架工作原理" class="headerlink" title="7.3 框架工作原理"></a>7.3 框架工作原理</h3><p><img data-src="/img/%E6%A1%86%E6%9E%B6%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" alt="框架工作原理"></p>
<h2 id="八、Mybatis实现Dao层"><a href="#八、Mybatis实现Dao层" class="headerlink" title="八、Mybatis实现Dao层"></a>八、Mybatis实现Dao层</h2><h3 id="8-1-传统开发方式【了解】"><a href="#8-1-传统开发方式【了解】" class="headerlink" title="8.1 传统开发方式【了解】"></a>8.1 传统开发方式【了解】</h3><h4 id="①-创建新模块导入相关资源"><a href="#①-创建新模块导入相关资源" class="headerlink" title="① 创建新模块导入相关资源"></a>① 创建新模块导入相关资源</h4><p>略…</p>
<h4 id="②-创建UserMapper（UserDao）"><a href="#②-创建UserMapper（UserDao）" class="headerlink" title="② 创建UserMapper（UserDao）"></a>② 创建UserMapper（UserDao）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供根据id查询的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(Integer id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1.加载核心文件</span></span><br><span class="line">        InputStream in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">// 2.构建工厂</span></span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        <span class="comment">// 3.创建会话</span></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        <span class="comment">// 4.执行sql</span></span><br><span class="line">        User user = sqlSession.selectOne(<span class="string">"UserMapper.findById"</span>, id);</span><br><span class="line">        <span class="comment">// 5.释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="③-映射文件UserMapper-xml"><a href="#③-映射文件UserMapper-xml" class="headerlink" title="③ 映射文件UserMapper.xml"></a>③ 映射文件UserMapper.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--查询一个--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">        select * from user where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="④-模拟service进行测试"><a href="#④-模拟service进行测试" class="headerlink" title="④ 模拟service进行测试"></a>④ 模拟service进行测试</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 调用dao【mapper】</span></span><br><span class="line">        UserMapper userMapper = <span class="keyword">new</span> UserMapper();</span><br><span class="line">        User user = userMapper.findById(<span class="number">41</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="⑤-通过观察UserMapper代码"><a href="#⑤-通过观察UserMapper代码" class="headerlink" title="⑤ 通过观察UserMapper代码"></a>⑤ 通过观察UserMapper代码</h4><blockquote>
<p>我们类+方法+参数+返回结果的命名规范，与sqlSession执行底层代码一致，这部分可以交给mybatis通过动态代理，自动生成…</p>
</blockquote>
<p><img data-src="/img/%E4%BC%A0%E7%BB%9F%E5%BC%80%E5%8F%91%E6%96%B9%E5%BC%8F%E2%91%A4.png" alt="传统开发方式⑤"></p>
<h3 id="8-2-接口代理开发方式【掌握】"><a href="#8-2-接口代理开发方式【掌握】" class="headerlink" title="8.2 接口代理开发方式【掌握】"></a>8.2 接口代理开发方式【掌握】</h3><p>采用 Mybatis 的基于接口代理方式实现 持久层 的开发，这种方式是我们后面进入企业的主流。</p>
<p>基于接口代理方式的开发只需要程序员编写 Mapper 接口，Mybatis 框架会为我们动态生成实现类的对象。</p>
<p><strong>需要遵循以下命名规范</strong></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>Mapper映射文件的namespace属性是接口的权限定名</span><br><span class="line"><span class="code">		namespace="com.sun.mapper.UserMapper"</span></span><br><span class="line"><span class="code">		</span></span><br><span class="line"><span class="bullet">2. </span>select等标签的id属性名与接口的方法名一致</span><br><span class="line"><span class="code">		  id="findById"</span></span><br><span class="line"><span class="code">		 </span></span><br><span class="line"><span class="bullet">3. </span>select等标签的parameterType的类型与方法的参数类型一致</span><br><span class="line"><span class="code">		parameterType="int"</span></span><br><span class="line"><span class="code">		</span></span><br><span class="line"><span class="bullet">4. </span>select等标签的resultType的类型与方法的返回值类型一致</span><br><span class="line"><span class="code">		resultType="com.sun.domain.User"</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/img/%E6%8E%A5%E5%8F%A3%E4%BB%A3%E7%90%86%E5%BC%80%E5%8F%91%E6%96%B9%E5%BC%8F.png" alt="接口代理开发方式"></p>
<h4 id="①-新建模块创建、导入相关资源文件"><a href="#①-新建模块创建、导入相关资源文件" class="headerlink" title="① 新建模块创建、导入相关资源文件"></a>① 新建模块创建、导入相关资源文件</h4><p>略…</p>
<h4 id="②-编写UserMapper接口"><a href="#②-编写UserMapper接口" class="headerlink" title="② 编写UserMapper接口"></a>② 编写UserMapper接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据id查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="③-编写映射UserMapper-xml"><a href="#③-编写映射UserMapper-xml" class="headerlink" title="③ 编写映射UserMapper.xml"></a>③ 编写映射UserMapper.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.sun.mapper.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--查询一个--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">        select * from user where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="④-模拟service进行测试-1"><a href="#④-模拟service进行测试-1" class="headerlink" title="④ 模拟service进行测试"></a>④ 模拟service进行测试</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取sqlSession</span></span><br><span class="line">        SqlSession sqlSession = MyBatisUtils.openSession();</span><br><span class="line">        <span class="comment">// 2.创建UserMapper代理对象</span></span><br><span class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 3.执行sql</span></span><br><span class="line">        User user = userMapper.findById(<span class="number">41</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="comment">// 4.释放资源</span></span><br><span class="line">        MyBatisUtils.release(sqlSession);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="8-3-了解Mybatis底层动态代理生成"><a href="#8-3-了解Mybatis底层动态代理生成" class="headerlink" title="8.3 了解Mybatis底层动态代理生成"></a>8.3 了解Mybatis底层动态代理生成</h3><p><img data-src="/img/mybatis%E5%BA%95%E5%B1%82%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E7%9A%84%E7%94%9F%E6%88%90.png" alt="mybatis底层动态代理的生成"></p>
<h2 id="九、Mybatis高级查询"><a href="#九、Mybatis高级查询" class="headerlink" title="九、Mybatis高级查询"></a>九、Mybatis高级查询</h2><h3 id="9-1-ResutlMap标签"><a href="#9-1-ResutlMap标签" class="headerlink" title="9.1 ResutlMap标签"></a>9.1 ResutlMap标签</h3><p>如果数据库结果集中的列名和要封装实体的属性名完全一致的话用 resultType 属性</p>
<p>如果数据库结果集中的列名和要封装实体的属性名有不一致的情况用 resultMap 属性，通过resultMap手动建立对象关系映射。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.sun.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        手动映射封装</span></span><br><span class="line"><span class="comment">            id="BaseMap" 该标签的唯一标识</span></span><br><span class="line"><span class="comment">            type="com.itheima.domain.User" 封装后的java类型</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseMap"</span> <span class="attr">type</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            column="uid" 数据库查询的字段名</span></span><br><span class="line"><span class="comment">            property="id" 需要封装到实体属性名</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"bir"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"gender"</span> <span class="attr">property</span>=<span class="string">"sex"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"addr"</span> <span class="attr">property</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--查询一个--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultMap</span>=<span class="string">"BaseMap"</span>&gt;</span></span><br><span class="line">        SELECT id AS uid,username AS `name`, birthday AS bir,sex AS gender, address AS addr FROM USER WHERE id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="9-2-多条件查询"><a href="#9-2-多条件查询" class="headerlink" title="9.2 多条件查询"></a>9.2 多条件查询</h3><ul>
<li>需求：根据id和username查询user表</li>
</ul>
<h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><ul>
<li>使用 <code>#{arg0}-#{arg1}</code> 或者 <code>#{param1}-#{param2}</code> 获取参数</li>
</ul>
<p>代码实现</p>
<ul>
<li>接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 多条件查询方式一</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByIdAndUsername1</span><span class="params">(Integer id,String username)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>映射</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    多条件查询方式一</span></span><br><span class="line"><span class="comment">        注意：此parameterType属性只能出现一次，如果传递多个值，可以省略</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByIdAndUsername1"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- select * from user where id = #&#123;arg0&#125; and username = #&#123;arg1&#125; --&gt;</span></span><br><span class="line">    select * from user where id = #&#123;param1&#125; and username = #&#123;param2&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 多条件查询测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    List&lt;User&gt; list = userMapper.findByIdAndUsername1(<span class="number">41</span>, <span class="string">"老王"</span>);</span><br><span class="line">    System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><ul>
<li>使用注解<code>@Param()</code>注解获取参数</li>
</ul>
<p>代码实现</p>
<ul>
<li>接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 多条件查询方式二</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByIdAndUsername2</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Integer id,@<span class="title">Param</span><span class="params">(<span class="string">"username"</span>)</span> String username)</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>映射</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">多条件查询方式二</span></span><br><span class="line"><span class="comment">    注意：此parameterType属性只能出现一次，如果传递多个值，可以省略</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByIdAndUsername2"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">    select * from user where id = #&#123;id&#125; and username = #&#123;username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 多条件查询测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    List&lt;User&gt; list = userMapper.findByIdAndUsername2(<span class="number">41</span>, <span class="string">"老王"</span>);</span><br><span class="line">    System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h4><ul>
<li>使用实体对象传递参数</li>
</ul>
<p>代码实现</p>
<ul>
<li>接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 多条件查询方式三</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByIdAndUsername3</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>映射</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">多条件查询方式三</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByIdAndUsername3"</span> <span class="attr">parameterType</span>=<span class="string">"com.sun.domain.User"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">    select * from user where id = #&#123;id&#125; and username = #&#123;username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 多条件查询测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实体封装条件</span></span><br><span class="line">    User param = <span class="keyword">new</span> User();</span><br><span class="line">    param.setId(<span class="number">41</span>);</span><br><span class="line">    param.setUsername(<span class="string">"老王"</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; list = userMapper.findByIdAndUsername3(param);</span><br><span class="line">    System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="9-3-模糊查询"><a href="#9-3-模糊查询" class="headerlink" title="9.3 模糊查询"></a>9.3 模糊查询</h3><ul>
<li><strong>需求</strong>：根据username模糊查询user表</li>
</ul>
<h4 id="方式一-1"><a href="#方式一-1" class="headerlink" title="方式一"></a>方式一</h4><p>代码实现</p>
<ul>
<li>接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模糊查询方式一</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findLikeUsername1</span><span class="params">(String username)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>映射</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">           模糊查询方式一</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findLikeUsername1"</span> <span class="attr">parameterType</span>=<span class="string">"string"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">    select * from user where username like #&#123;username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试模糊查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    List&lt;User&gt; list = userMapper.findLikeUsername1(<span class="string">"%王%"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (User user : list) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>%%是sql的语法，卸载Java中不太合适</p>
</blockquote>
<h4 id="方式二-1"><a href="#方式二-1" class="headerlink" title="方式二"></a>方式二</h4><p>代码实现</p>
<ul>
<li>接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模糊查询方式二</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findLikeUsername2</span><span class="params">(String username)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>映射</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   模糊查询方式二</span></span><br><span class="line"><span class="comment">    oracle数据库 双引号除了别名的位置上，其他地方使用报错...</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findLikeUsername2"</span> <span class="attr">parameterType</span>=<span class="string">"string"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">      select * from user where username like "%" #&#123;username&#125; "%"</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试模糊查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    List&lt;User&gt; list = userMapper.findLikeUsername2(<span class="string">"王"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (User user : list) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="方式三-1"><a href="#方式三-1" class="headerlink" title="方式三"></a>方式三</h4><p>代码实现</p>
<ul>
<li>接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模糊查询方式三</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findLikeUsername3</span><span class="params">(String username)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>映射</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   模糊查询方式三</span></span><br><span class="line"><span class="comment">    $&#123;&#125; 底层使用字符串拼接，可能会出现sql注入问题，开发绝对不用</span></span><br><span class="line"><span class="comment">    如果你传递的是简单数据类型 $&#123;value&#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findLikeUsername3"</span> <span class="attr">parameterType</span>=<span class="string">"string"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">      select * from user where username like '%$&#123;value&#125;%'</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试模糊查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    List&lt;User&gt; list = userMapper.findLikeUsername3(<span class="string">"王"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (User user : list) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="方式四"><a href="#方式四" class="headerlink" title="方式四"></a>方式四</h4><blockquote>
<p>使用这种方式最合适</p>
</blockquote>
<p>代码实现</p>
<ul>
<li>接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模糊查询方式四</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findLikeUsername4</span><span class="params">(String username)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>映射</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     模糊查询方式四</span></span><br><span class="line"><span class="comment">      使用concat()函数帮我们进行拼接，注意oracle数据库中此函数只能传递二个参数，需要进行嵌套</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findLikeUsername4"</span> <span class="attr">parameterType</span>=<span class="string">"string"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">        select * from user where username like  concat(concat('%',#&#123;username&#125;),'%')</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试模糊查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    List&lt;User&gt; list = userMapper.findLikeUsername4(<span class="string">"王"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (User user : list) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="9-4-面试题"><a href="#9-4-面试题" class="headerlink" title="9.4 面试题"></a>9.4 面试题</h3><p><code>${}</code> 与 <code>#{}</code> 区别</p>
<p><strong><code>#{}</code>:表示一个占位符号</strong> </p>
<ul>
<li>通过<code>#{}</code>可以实现preparedStatement向占位符中设置值，自动进行java类型和jdbc类型转换，#{}可以有效防止sql注入。</li>
<li><code>#{}</code>可以接收简单类型值或实体属性值。 </li>
<li>如果parameterType传输单个简单类型值，<code>#{}</code>括号中名称任意。 </li>
</ul>
<p>*<em><code>${}</code>:表示拼接sql串 *</em></p>
<ul>
<li><p>通过<code>${}</code>底层使用statement对象内容拼接在sql中且不进行jdbc类型转换，会出现sql注入问题。</p>
</li>
<li><p><code>${}</code>可以接收简单类型值或实体属性值。</p>
</li>
<li><p>如果parameterType传输单个简单类型值，<code>${}</code>括号中只能是value。</p>
<ul>
<li><blockquote>
<p>补充：TextSqlNode.java 源码可以证明</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>简单类型</span><br><span class="line"><span class="code">	string、int（Integer）、long、double</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>实体（复杂）类型</span><br><span class="line"><span class="code">	new User()</span></span><br></pre></td></tr></table></figure>



<h2 id="十、返回主键"><a href="#十、返回主键" class="headerlink" title="十、返回主键"></a>十、返回主键</h2><ul>
<li><strong>需求</strong>：向数据库保存一个用户后, 然后在控制台记录下此用户的主键值(id)</li>
</ul>
<p>代码实现：</p>
<ul>
<li>接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回主键</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>映射</li>
<li>方式一</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        返回主键 方式一</span></span><br><span class="line"><span class="comment">            useGeneratedKeys="true" 开启返回主键功能</span></span><br><span class="line"><span class="comment">            keyColumn="id" 数据库主键列</span></span><br><span class="line"><span class="comment">            keyProperty="id" 实体主键属性</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            这种方式操作虽然简单，但仅支持主键自增类型的数据库：mysql、sqlServer</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"save"</span> <span class="attr">parameterType</span>=<span class="string">"com.sun.domain.User"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyColumn</span>=<span class="string">"id"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">    insert into user values(null,#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>方式二</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        返回主键方式二</span></span><br><span class="line"><span class="comment">            keyColumn="id" 表的主键列</span></span><br><span class="line"><span class="comment">            keyProperty="id" 实体的主键属性</span></span><br><span class="line"><span class="comment">            resultType="int" 实体主键的java类型</span></span><br><span class="line"><span class="comment">            order="AFTER"  selectKey标签sql语句的执行时机</span></span><br><span class="line"><span class="comment">                before：在insert语句执行之前，执行</span></span><br><span class="line"><span class="comment">                after：在insert语句执行之后，执行</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            这种方式虽然繁琐，但是通用...</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"save"</span> <span class="attr">parameterType</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyColumn</span>=<span class="string">"id"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">resultType</span>=<span class="string">"int"</span> <span class="attr">order</span>=<span class="string">"AFTER"</span>&gt;</span></span><br><span class="line">        SELECT LAST_INSERT_ID()</span><br><span class="line">    <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">    insert into user values(#&#123;id&#125;,#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回主键测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(<span class="string">"lala"</span>);</span><br><span class="line">    user.setSex(<span class="string">"女"</span>);</span><br><span class="line">    user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">    user.setAddress(<span class="string">"衡水"</span>);</span><br><span class="line">    userMapper.save(user);</span><br><span class="line"></span><br><span class="line">    System.out.println(user.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>框架</category>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>持久层框架</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis高级</title>
    <url>/2020/09/07/Mybatis%E9%AB%98%E7%BA%A7/</url>
    <content><![CDATA[<h2 id="一、Mybatis动态SQL"><a href="#一、Mybatis动态SQL" class="headerlink" title="一、Mybatis动态SQL"></a>一、Mybatis动态SQL</h2><h3 id="1-1-什么是动态SQL"><a href="#1-1-什么是动态SQL" class="headerlink" title="1.1 什么是动态SQL"></a>1.1 什么是动态SQL</h3><p><strong>先来看一个需求</strong></p>
<p>把页面输入的id和username封装到User实体中，并作为条件查询数据库</p>
<p><img data-src="/img/%E5%8A%A8%E6%80%81sql_%E9%9C%80%E6%B1%82.png" alt="动态sql_需求"></p>
<p><strong>这个时候我们执行的sql就有多种可能</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 如果id和用户名不为空</span><br><span class="line">select * from user where id&#x3D; #&#123;id&#125; and username &#x3D; #&#123;username&#125;</span><br><span class="line"></span><br><span class="line">-- 如果只有id</span><br><span class="line">select * from user where id&#x3D; #&#123;id&#125; </span><br><span class="line"></span><br><span class="line">-- 如果只有用户名</span><br><span class="line">select * from user where username &#x3D; #&#123;username&#125;</span><br><span class="line"></span><br><span class="line">-- 如果id和用户名都为空</span><br><span class="line">select * from user</span><br></pre></td></tr></table></figure>

<blockquote>
<p>像上面这样, 根据传入的参数不同, 需要执行的SQL的结构就会不同，这就是动态SQL。</p>
</blockquote>
<a id="more"></a>

<h3 id="1-2-环境搭建"><a href="#1-2-环境搭建" class="headerlink" title="1.2 环境搭建"></a>1.2 环境搭建</h3><p><img data-src="/img/%E5%8A%A8%E6%80%81sql_%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.png" alt="动态sql_环境搭建"></p>
<h3 id="1-3-if-和-where-标签"><a href="#1-3-if-和-where-标签" class="headerlink" title="1.3 if 和 where 标签"></a>1.3 if 和 where 标签</h3><p>需求：页面输入的id和username封装到User实体中，并作为条件查询数据库</p>
<h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// if 和 where 标签</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByIf</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure>

<h4 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    if和where标签</span></span><br><span class="line"><span class="comment">    if：条件判断</span></span><br><span class="line"><span class="comment">    where：动态where,如果没有条件where关键字不在拼接，如果有条件去掉第一个 and | or</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByIf"</span> <span class="attr">parameterType</span>=<span class="string">"com.sun.domain.User"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">   <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id != null"</span>&gt;</span></span><br><span class="line">           and id = #&#123;id&#125;</span><br><span class="line">       <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username != null"</span>&gt;</span></span><br><span class="line">           and username = #&#123;username&#125;</span><br><span class="line">       <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SqlSession sqlSession;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取sqlSession</span></span><br><span class="line">        sqlSession = MyBatisUtils.openSession();</span><br><span class="line">        <span class="comment">// 2.创建UserMapper代理对象</span></span><br><span class="line">        userMapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 4.释放资源</span></span><br><span class="line">        MyBatisUtils.release(sqlSession);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// if和where标签测试</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 封装条件</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">         user.setId(<span class="number">41</span>);</span><br><span class="line">         user.setUsername(<span class="string">"老王"</span>);</span><br><span class="line">        <span class="comment">// 执行查询</span></span><br><span class="line">        List&lt;User&gt; list = userMapper.findByIf(user);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>if标签用于单分支条件判断, 相当于java中的if关键字</span><br><span class="line"><span class="bullet">* </span>where标签作用</span><br><span class="line"><span class="code">		当where代码块中的条件都不成立的时候, where不在拼接</span></span><br><span class="line"><span class="code">		当where代码块中的条件至少有一个成立的时候，它会帮你去掉第一个and|or</span></span><br></pre></td></tr></table></figure>



<h3 id="1-4-if-和-set-标签"><a href="#1-4-if-和-set-标签" class="headerlink" title="1.4 if 和 set 标签"></a>1.4 if 和 set 标签</h3><blockquote>
<p>需求：动态更新user表数据，如果该属性有值就更新，没有值不做处理</p>
</blockquote>
<h4 id="接口-1"><a href="#接口-1" class="headerlink" title="接口"></a>接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// set标签</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateIf</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure>

<h4 id="映射-1"><a href="#映射-1" class="headerlink" title="映射"></a>映射</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--set标签：帮你去掉最后一个逗号 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateIf"</span> <span class="attr">parameterType</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">    update user</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username != null"</span>&gt;</span></span><br><span class="line">            username = #&#123;username&#125; ,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"birthday != null"</span>&gt;</span></span><br><span class="line">            birthday = #&#123;birthday&#125; ,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"sex != null"</span>&gt;</span></span><br><span class="line">            sex = #&#123;sex&#125; ,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"address != null"</span>&gt;</span></span><br><span class="line">            address = #&#123;address&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// set标签</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">// 封装修改的内容</span></span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">54</span>);</span><br><span class="line">    user.setUsername(<span class="string">"西西"</span>);</span><br><span class="line">    <span class="comment">// 执行更新</span></span><br><span class="line">    userMapper.updateIf(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>set标签作用</span><br><span class="line"><span class="code">		在代码块之前加入一个set关键字  </span></span><br><span class="line"><span class="code">		删除掉代码块中的最后一个逗号（,）</span></span><br></pre></td></tr></table></figure>



<h3 id="1-5-foreach标签"><a href="#1-5-foreach标签" class="headerlink" title="1.5 foreach标签"></a>1.5 foreach标签</h3><blockquote>
<p>需求：根据多个id查询，user对象的集合</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">in</span> (<span class="number">41</span>,<span class="number">43</span>,<span class="number">46</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span><span class="xml"><span class="tag">&lt;<span class="name">foreach</span>&gt;</span></span>标签用于遍历集合，它的属性：</span><br><span class="line"></span><br><span class="line"><span class="code">    • collection：代表要遍历的集合元素</span></span><br><span class="line"></span><br><span class="line"><span class="code">    • open：代表语句的开始部分</span></span><br><span class="line"></span><br><span class="line"><span class="code">    • close：代表结束部分</span></span><br><span class="line"></span><br><span class="line"><span class="code">    • item：代表遍历集合的每个元素，生成的变量名</span></span><br><span class="line"></span><br><span class="line"><span class="code">    • sperator：代表分隔符</span></span><br></pre></td></tr></table></figure>



<p><strong>传递参数三种场景</strong></p>
<ul>
<li>普通list集合</li>
<li>普通array数组</li>
<li>实体中list | array</li>
</ul>
<h4 id="接口-2"><a href="#接口-2" class="headerlink" title="接口"></a>接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通list集合</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findList</span><span class="params">(List&lt;Integer&gt; ids)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通array数组</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findArray</span><span class="params">(Integer[] ids)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实体中的list属性</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findQueryVo</span><span class="params">(QueryVo queryVo)</span></span>;</span><br></pre></td></tr></table></figure>

<h4 id="映射-2"><a href="#映射-2" class="headerlink" title="映射"></a>映射</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    foreach之普通list</span></span><br><span class="line"><span class="comment">        collection属性值只能为：list | collection</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findList"</span> <span class="attr">parameterType</span>=<span class="string">"list"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">    select * from user where id in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    foreach之普通array</span></span><br><span class="line"><span class="comment">        collection属性值只能为：array</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findArray"</span> <span class="attr">parameterType</span>=<span class="string">"integer"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">    select * from user where id in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"array"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    foreach之实体中的list属性</span></span><br><span class="line"><span class="comment">          collection属性值只能为：list属性的名称</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findQueryVo"</span> <span class="attr">parameterType</span>=<span class="string">"com.sun.domain.QueryVo"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">     select * from user where id in</span><br><span class="line">     <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"ids"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">         #&#123;id&#125;</span><br><span class="line">     <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// foreach标签</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 普通list</span></span><br><span class="line">  <span class="comment">/*  List&lt;Integer&gt; ids = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">    ids.add(41);</span></span><br><span class="line"><span class="comment">    ids.add(43);</span></span><br><span class="line"><span class="comment">    ids.add(46);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    List&lt;User&gt; resultList1 = userMapper.findList(ids);</span></span><br><span class="line"><span class="comment">    System.out.println(resultList1);*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 普通array</span></span><br><span class="line">  <span class="comment">/*  Integer[] ids = &#123;41, 43, 46&#125;;</span></span><br><span class="line"><span class="comment">    List&lt;User&gt; userList = userMapper.findArray(ids);</span></span><br><span class="line"><span class="comment">    System.out.println(userList);*/</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实体list属性</span></span><br><span class="line">    QueryVo queryVo = <span class="keyword">new</span> QueryVo();</span><br><span class="line">    List&lt;Integer&gt; ids = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    ids.add(<span class="number">41</span>);</span><br><span class="line">    ids.add(<span class="number">43</span>);</span><br><span class="line">    ids.add(<span class="number">46</span>);</span><br><span class="line">    queryVo.setIds(ids);</span><br><span class="line">    List&lt;User&gt; userList = userMapper.findQueryVo(queryVo);</span><br><span class="line">    System.out.println(userList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* foreach标签的collection属性根据传输的java类型不同而采用不同的值</span><br><span class="line">		集合：list   </span><br><span class="line">		数组：array   </span><br><span class="line">		实体：实体的属性名</span><br></pre></td></tr></table></figure>



<h3 id="1-6-SQL片段"><a href="#1-6-SQL片段" class="headerlink" title="1.6 SQL片段"></a>1.6 SQL片段</h3><p><strong>应用场景</strong></p>
<p>映射文件中可将重复的 sql 提取出来，使用时用 include 引用即可，最终达到 sql 复用的目的</p>
<p><img data-src="/img/sql%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5.png" alt="sql代码片段"></p>
<h2 id="二、Mybatis多表查询"><a href="#二、Mybatis多表查询" class="headerlink" title="二、Mybatis多表查询"></a>二、Mybatis多表查询</h2><h3 id="2-1-表关系回顾"><a href="#2-1-表关系回顾" class="headerlink" title="2.1 表关系回顾"></a>2.1 表关系回顾</h3><blockquote>
<p>在关系型数据库中，表关系分为以下三种：</p>
</blockquote>
<p><img data-src="/img/%E8%A1%A8%E5%85%B3%E7%B3%BB%E5%9B%9E%E9%A1%BE.png" alt="表关系回顾"></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>在数据库中表建立关系：通过主外键关联</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>在java中实体建立关系：通过属性关联</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>在mybatis框架中把（多对一）也可以理解（一对一）</span><br><span class="line"><span class="code">	在订单的角度去看，一个订单只从属于一个用户</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>本次讲解多表查询</p>
</blockquote>
<p><img data-src="/img/mybatis%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2.png" alt="mybatis多表查询"></p>
<h3 id="2-2-环境搭建"><a href="#2-2-环境搭建" class="headerlink" title="2.2 环境搭建"></a>2.2 环境搭建</h3><h4 id="①-创建java模块，导入jar包"><a href="#①-创建java模块，导入jar包" class="headerlink" title="① 创建java模块，导入jar包"></a>① 创建java模块，导入jar包</h4><p><img data-src="/img/%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.png" alt="多表查询环境搭建"></p>
<h4 id="②-准备三个实体类"><a href="#②-准备三个实体类" class="headerlink" title="② 准备三个实体类"></a>② 准备三个实体类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用户</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 订单实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date ordertime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 角色</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String role_name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String role_desc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="③-创建三个接口和三个映射文件"><a href="#③-创建三个接口和三个映射文件" class="headerlink" title="③ 创建三个接口和三个映射文件"></a>③ 创建三个接口和三个映射文件</h4><p><img data-src="/img/%E4%B8%89%E4%B8%AA%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6.png" alt="三个接口和映射文件"></p>
<h4 id="④-创建mybatis核心文件"><a href="#④-创建mybatis核心文件" class="headerlink" title="④ 创建mybatis核心文件"></a>④ 创建mybatis核心文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置存储数据库信息的配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbc.properties"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置连接池--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--配置数据库基本四项--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis_db"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置映射--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/sun/mapper/UserMapper.xml"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/sun/mapper/OrderMapper.xml"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/sun/mapper/RoleMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="⑤-导入MybatisUtils工具类"><a href="#⑤-导入MybatisUtils工具类" class="headerlink" title="⑤ 导入MybatisUtils工具类"></a>⑤ 导入MybatisUtils工具类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Mybatis工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Sunmoon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory factory;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> InputStream in;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//加载mybatis核心配置文件</span></span><br><span class="line">            in = Resources.getResourceAsStream(<span class="string">"mybatis-config.xml"</span>);</span><br><span class="line">            <span class="comment">// 构建者创建工厂</span></span><br><span class="line">            factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"mybatis初始化异常"</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 释放资源</span></span><br><span class="line">            <span class="keyword">if</span> (in!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    in.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供获取连接会话的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 会话对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">openSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> factory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提交事务归还连接的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session 会话对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">releases</span><span class="params">(SqlSession session)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (session!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            session.commit();</span><br><span class="line">            session.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="⑥-抽取测试基类"><a href="#⑥-抽取测试基类" class="headerlink" title="⑥ 抽取测试基类"></a>⑥ 抽取测试基类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Mapper单元测试基类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> SqlSession sqlSession;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        sqlSession = MybatisUtils.openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MybatisUtils.releases(sqlSession);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-3-一对一"><a href="#2-3-一对一" class="headerlink" title="2.3 一对一"></a>2.3 一对一</h3><p>一对一查询模型**</p>
<p>用户表和订单表的关系为，一个用户有多个订单，一个订单只从属于一个用户</p>
<blockquote>
<p>需求：查询一个订单，与此同时查询出该订单所属的用户</p>
</blockquote>
<p><img data-src="/img/%E4%B8%80%E5%AF%B9%E4%B8%80%E6%9F%A5%E8%AF%A2%E6%A8%A1%E5%9E%8B.png" alt="一对一查询模型"></p>
<p><strong>sql语句</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> orders o <span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`user`</span> u <span class="keyword">ON</span> o.<span class="string">`uid`</span> = u.<span class="string">`id`</span> <span class="keyword">WHERE</span> o.id = <span class="number">1</span></span><br></pre></td></tr></table></figure>



<h4 id="①-实体和表映射关系"><a href="#①-实体和表映射关系" class="headerlink" title="① 实体和表映射关系"></a>① 实体和表映射关系</h4><p><img data-src="/img/%E4%B8%80%E5%AF%B9%E4%B8%80_%E5%AE%9E%E4%BD%93%E5%92%8C%E8%A1%A8%E6%98%A0%E5%B0%84%E5%85%B3%E7%B3%BB.png" alt="一对一_实体和表映射关系"></p>
<h4 id="②-创建Order实体"><a href="#②-创建Order实体" class="headerlink" title="② 创建Order实体"></a>② 创建Order实体</h4><p><img data-src="/img/order%E5%AE%9E%E4%BD%93.png" alt="order实体"></p>
<h4 id="③-编写OrderMapper接口"><a href="#③-编写OrderMapper接口" class="headerlink" title="③ 编写OrderMapper接口"></a>③ 编写OrderMapper接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据订单id查询，返回订单信息和用户信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Order <span class="title">findByIdWithUser</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="④-编写OrderMapper-xml"><a href="#④-编写OrderMapper-xml" class="headerlink" title="④ 编写OrderMapper.xml"></a>④ 编写OrderMapper.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.sun.mapper.OrderMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--一对一手动映射封装--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"orderBaseMap"</span> <span class="attr">type</span>=<span class="string">"com.sun.domain.Order"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"ordertime"</span> <span class="attr">property</span>=<span class="string">"ordertime"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"money"</span> <span class="attr">property</span>=<span class="string">"money"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            association 一对一关联封装</span></span><br><span class="line"><span class="comment">                property="user" 订单中的实体属性名</span></span><br><span class="line"><span class="comment">                javaType="com.itheima.domain.User" 该属性对应的java类型</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span> <span class="attr">javaType</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     一对一查询</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByIdWithUser"</span> <span class="attr">parameterType</span>=<span class="string">"integer"</span> <span class="attr">resultMap</span>=<span class="string">"orderBaseMap"</span>&gt;</span></span><br><span class="line">        SELECT * FROM orders o INNER JOIN `user` u ON o.`uid` = u.`id` WHERE o.id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="⑤-测试"><a href="#⑤-测试" class="headerlink" title="⑤ 测试"></a>⑤ 测试</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderMapperTest</span> <span class="keyword">extends</span> <span class="title">BaseMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一对一测试</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 获取代理对象</span></span><br><span class="line">        OrderMapper orderMapper = sqlSession.getMapper(OrderMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询</span></span><br><span class="line">        Order order = orderMapper.findByIdWithUser(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(order);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="⑥-一对一代码关系图"><a href="#⑥-一对一代码关系图" class="headerlink" title="⑥ 一对一代码关系图"></a>⑥ 一对一代码关系图</h4><p><img data-src="/img/%E4%B8%80%E5%AF%B9%E4%B8%80%E4%BB%A3%E7%A0%81%E5%85%B3%E7%B3%BB%E5%9B%BE.png" alt="一对一代码关系图"></p>
<h3 id="2-4-一对多"><a href="#2-4-一对多" class="headerlink" title="2.4 一对多"></a>2.4 一对多</h3><p><strong>一对多查询模型</strong></p>
<p>用户表和订单表的关系为，一个用户有多个订单，一个订单只从属于一个用户</p>
<blockquote>
<p>需求：查询一个用户，与此同时查询出该用户具有的订单</p>
</blockquote>
<p><img data-src="/img/%E4%B8%80%E5%AF%B9%E5%A4%9A%E6%9F%A5%E8%AF%A2%E6%A8%A1%E5%9E%8B.png" alt="一对多查询模型"></p>
<p><strong>sql语句</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *,o.id <span class="keyword">AS</span> <span class="keyword">oid</span> <span class="keyword">FROM</span> <span class="string">`user`</span> u <span class="keyword">INNER</span> <span class="keyword">JOIN</span> orders o <span class="keyword">ON</span> u.<span class="string">`id`</span> = o.<span class="string">`uid`</span> <span class="keyword">WHERE</span> u.id = <span class="number">41</span></span><br></pre></td></tr></table></figure>

<h4 id="①-实体和表映射关系-1"><a href="#①-实体和表映射关系-1" class="headerlink" title="① 实体和表映射关系"></a>① 实体和表映射关系</h4><p> <img data-src="/img/%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%AE%9E%E4%BD%93%E5%92%8C%E8%A1%A8%E7%9A%84%E6%98%A0%E5%B0%84%E6%83%AF%E6%80%A7%E7%B3%BB.png" alt="一对多实体和表的映射惯性系"></p>
<h4 id="②-编写User实体"><a href="#②-编写User实体" class="headerlink" title="② 编写User实体"></a>② 编写User实体</h4><p><img data-src="/img/User%E5%AE%9E%E4%BD%93.png" alt="User实体"></p>
<h4 id="③-编写UserMapper接口"><a href="#③-编写UserMapper接口" class="headerlink" title="③ 编写UserMapper接口"></a>③ 编写UserMapper接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一对多根据用户id，查询用户和订单信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findByIdWithOrderList</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="④-编写UserMapper-xml"><a href="#④-编写UserMapper-xml" class="headerlink" title="④ 编写UserMapper.xml"></a>④ 编写UserMapper.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.sun.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--一对多手动映射--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userWithOrderMap"</span> <span class="attr">type</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            一对多封装使用collection标签</span></span><br><span class="line"><span class="comment">                property="orderList" 是user实体的订单属集合名称</span></span><br><span class="line"><span class="comment">                ofType="com.itheima.domain.Order" 封装数据的java类型，可以简单理解为list的泛型</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"orderList"</span> <span class="attr">ofType</span>=<span class="string">"com.sun.domain.Order"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"oid"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"ordertime"</span> <span class="attr">property</span>=<span class="string">"ordertime"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"money"</span> <span class="attr">property</span>=<span class="string">"money"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        一对多根据用户id，查询用户和订单信息</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByIdWithOrderList"</span> <span class="attr">parameterType</span>=<span class="string">"integer"</span> <span class="attr">resultMap</span>=<span class="string">"userWithOrderMap"</span>&gt;</span></span><br><span class="line">        SELECT *,o.id AS oid FROM `user` u INNER JOIN orders o ON u.`id` = o.`uid` WHERE u.id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="⑤-测试-1"><a href="#⑤-测试-1" class="headerlink" title="⑤ 测试"></a>⑤ 测试</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> <span class="keyword">extends</span> <span class="title">BaseMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一对多测试</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 创建代理对象</span></span><br><span class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 根据用户id查询</span></span><br><span class="line">        User user = userMapper.findByIdWithOrderList(<span class="number">41</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="⑥-一对多代码关系图"><a href="#⑥-一对多代码关系图" class="headerlink" title="⑥ 一对多代码关系图"></a>⑥ 一对多代码关系图</h4><p><img data-src="/img/%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%85%B3%E7%B3%BB%E4%BB%A3%E7%A0%81%E5%9B%BE.png" alt="一对多关系代码图"></p>
<h3 id="2-5-多对多"><a href="#2-5-多对多" class="headerlink" title="2.5 多对多"></a>2.5 多对多</h3><p><strong>多对多查询的模型</strong></p>
<p>用户表和角色表的关系为，一个用户有多个角色，一个角色被多个用户使用</p>
<blockquote>
<p>需求：查询用户同时查询出该用户的所有角色</p>
</blockquote>
<p><img data-src="/img/%E5%A4%9A%E5%AF%B9%E5%A4%9A%E6%9F%A5%E8%AF%A2%E6%A8%A1%E5%9E%8B.png" alt="多对多查询模型"></p>
<p><strong>注意：多对多实现代码流程跟一对多是一样的，只是sql语句稍有不同</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`user`</span> u</span><br><span class="line">	<span class="keyword">INNER</span> <span class="keyword">JOIN</span> user_role ur <span class="keyword">ON</span> u.id = ur.<span class="string">`uid`</span> <span class="comment">-- 用户关联中间表</span></span><br><span class="line">	<span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">role</span> r <span class="keyword">ON</span> ur.<span class="string">`rid`</span> = r.<span class="string">`id`</span> <span class="comment">-- 中间表关联用户</span></span><br><span class="line">	<span class="keyword">WHERE</span> u.id = <span class="number">41</span></span><br></pre></td></tr></table></figure>



<h4 id="①-实体和表映射关系-2"><a href="#①-实体和表映射关系-2" class="headerlink" title="① 实体和表映射关系"></a>① 实体和表映射关系</h4><p>  <img data-src="/img/%E5%A4%9A%E5%AF%B9%E5%A4%9A%E5%AE%9E%E4%BD%93%E5%92%8C%E8%A1%A8%E7%9A%84%E6%98%A0%E5%B0%84%E5%85%B3%E7%B3%BB.png" alt="多对多实体和表的映射关系"></p>
<h4 id="②-编写User和Role实体"><a href="#②-编写User和Role实体" class="headerlink" title="② 编写User和Role实体"></a>② 编写User和Role实体</h4><p> <img data-src="/img/User%E5%AE%9E%E4%BD%932.png" alt="User实体2"></p>
<h4 id="③-编写UserMapper接口-1"><a href="#③-编写UserMapper接口-1" class="headerlink" title="③ 编写UserMapper接口"></a>③ 编写UserMapper接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 多对多根据用户id，查询用户和角色信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findByIdWithRoleList</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="④-编写UserMapper-xml-1"><a href="#④-编写UserMapper-xml-1" class="headerlink" title="④ 编写UserMapper.xml"></a>④ 编写UserMapper.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    多对多手动映射封装</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userWithRoleMap"</span> <span class="attr">type</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        多对多手动映射使用collection标签</span></span><br><span class="line"><span class="comment">            property="roleList" 需要封装实体list集合的属性名</span></span><br><span class="line"><span class="comment">            ofType="com.itheima.domain.Role" 该集合泛型的java类型</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"roleList"</span> <span class="attr">ofType</span>=<span class="string">"com.sun.domain.Role"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"rid"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"role_name"</span> <span class="attr">property</span>=<span class="string">"role_name"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"role_desc"</span> <span class="attr">property</span>=<span class="string">"role_desc"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    多对多根据用户id，查询用户和角色信息</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByIdWithRoleList"</span> <span class="attr">parameterType</span>=<span class="string">"integer"</span> <span class="attr">resultMap</span>=<span class="string">"userWithRoleMap"</span>&gt;</span></span><br><span class="line">    SELECT * FROM `user` u</span><br><span class="line">        INNER JOIN user_role ur ON u.id = ur.`uid`</span><br><span class="line">        INNER JOIN role r ON ur.`rid` = r.`id`</span><br><span class="line">        WHERE u.id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="⑤-测试-2"><a href="#⑤-测试-2" class="headerlink" title="⑤ 测试"></a>⑤ 测试</h4><p> <img data-src="/img/%E5%A4%9A%E5%AF%B9%E5%A4%9A%E6%B5%8B%E8%AF%95.png" alt="多对多测试"></p>
<h3 id="2-6-知识小结"><a href="#2-6-知识小结" class="headerlink" title="2.6 知识小结"></a>2.6 知识小结</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">一对一配置：使用<span class="xml"><span class="tag">&lt;<span class="name">resultMap</span>&gt;</span></span>+<span class="xml"><span class="tag">&lt;<span class="name">association</span>&gt;</span></span>做配置</span><br><span class="line"><span class="code">	association:</span></span><br><span class="line"><span class="code">    	property：关联的实体属性名</span></span><br><span class="line"><span class="code">    	javaType：关联的实体类型</span></span><br><span class="line"></span><br><span class="line">一对多配置：使用<span class="xml"><span class="tag">&lt;<span class="name">resultMap</span>&gt;</span></span>+<span class="xml"><span class="tag">&lt;<span class="name">collection</span>&gt;</span></span>做配置</span><br><span class="line"><span class="code">	collection：</span></span><br><span class="line"><span class="code">		property：关联的集合属性名</span></span><br><span class="line"><span class="code">		ofType：关联的集合泛型类型</span></span><br><span class="line"></span><br><span class="line">多对多配置：使用<span class="xml"><span class="tag">&lt;<span class="name">resultMap</span>&gt;</span></span>+<span class="xml"><span class="tag">&lt;<span class="name">collection</span>&gt;</span></span>做配置</span><br><span class="line"><span class="code">	collection：</span></span><br><span class="line"><span class="code">		property：关联的集合属性名</span></span><br><span class="line"><span class="code">		ofType：关联的集合泛型类型</span></span><br><span class="line"><span class="code">		</span></span><br><span class="line">多对多的配置跟一对多很相似，难度在于SQL语句的编写。</span><br></pre></td></tr></table></figure>



<h2 id="三、Mybatis嵌套查询"><a href="#三、Mybatis嵌套查询" class="headerlink" title="三、Mybatis嵌套查询"></a>三、Mybatis嵌套查询</h2><h3 id="3-1-什么是嵌套查询"><a href="#3-1-什么是嵌套查询" class="headerlink" title="3.1 什么是嵌套查询"></a>3.1 什么是嵌套查询</h3><p>嵌套查询就是将原来多表查询中的联合查询语句拆成单个表的查询，再使用mybatis的语法嵌套在一起。</p>
<blockquote>
<p><strong>需求</strong>：查询一个订单，与此同时查询出该订单所属的用户</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>关联查询：</span><br><span class="line"><span class="code">		</span></span><br><span class="line"><span class="code">		SELECT * FROM orders o INNER JOIN `user` u ON o.`uid` = u.`id` WHERE o.id = 1 </span></span><br><span class="line"><span class="bullet">* </span>缺点</span><br><span class="line"><span class="code">		sql语句比较复杂</span></span><br><span class="line"><span class="code">		多表查询会产生笛卡尔积</span></span><br><span class="line"><span class="code">			</span></span><br><span class="line"><span class="bullet">* </span>嵌套查询：</span><br><span class="line"><span class="code">	1.先根据订单id查询订单信息</span></span><br><span class="line"><span class="code">		select * from orders where id = 1;</span></span><br><span class="line"><span class="code">	2.根据订单信息中的uid再去查询用户信息</span></span><br><span class="line"><span class="code">		select * from user where id = 41;</span></span><br><span class="line"><span class="code">	3.再由mybatis进行组合嵌套</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="bullet">* </span>优点</span><br><span class="line"><span class="code">		sql写起来简单</span></span><br><span class="line"><span class="code">		嵌套查询不会出现笛卡尔积</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>缺点</span><br><span class="line"><span class="code">		需要编写二个单体映射封装，在进行嵌套组合，步骤较为繁琐</span></span><br></pre></td></tr></table></figure>



<h3 id="3-2-环境搭建"><a href="#3-2-环境搭建" class="headerlink" title="3.2 环境搭建"></a>3.2 环境搭建</h3><p>复制多表查询的模块，清除测试和mapper.xml文件中的代码即可…</p>
<h3 id="3-3-一对一"><a href="#3-3-一对一" class="headerlink" title="3.3 一对一"></a>3.3 一对一</h3><blockquote>
<p>需求：查询一个订单，与此同时查询出该订单所属的用户</p>
</blockquote>
<p><strong>sql语句</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1.先根据订单id查询订单信息</span></span><br><span class="line">		<span class="keyword">select</span> * <span class="keyword">from</span> orders <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 2.根据订单信息中的uid再去查询用户信息</span></span><br><span class="line">		<span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">41</span>;</span><br><span class="line"><span class="comment">-- 3.再由mybatis进行组合嵌套</span></span><br></pre></td></tr></table></figure>



<h4 id="①-OrderMapper接口"><a href="#①-OrderMapper接口" class="headerlink" title="① OrderMapper接口"></a>① OrderMapper接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一对一嵌套查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Order <span class="title">findByIdWithUser</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="②-OrderMapper映射"><a href="#②-OrderMapper映射" class="headerlink" title="② OrderMapper映射"></a>② OrderMapper映射</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.sun.mapper.OrderMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--一对一嵌套查询--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByIdWithUser"</span> <span class="attr">parameterType</span>=<span class="string">"integer"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.Order"</span>&gt;</span></span><br><span class="line">        select * from orders where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="③-UserMapper接口"><a href="#③-UserMapper接口" class="headerlink" title="③ UserMapper接口"></a>③ UserMapper接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据用户id查询用户信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="④-UserMapper映射"><a href="#④-UserMapper映射" class="headerlink" title="④ UserMapper映射"></a>④ UserMapper映射</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.sun.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"integer"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">        select * from user where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="⑤-mybatis嵌套组合"><a href="#⑤-mybatis嵌套组合" class="headerlink" title="⑤ mybatis嵌套组合"></a>⑤ mybatis嵌套组合</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.sun.mapper.OrderMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--一对一嵌套查询手动封装--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"orderWithUserMap"</span> <span class="attr">type</span>=<span class="string">"com.sun.domain.Order"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"ordertime"</span> <span class="attr">property</span>=<span class="string">"ordertime"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"money"</span> <span class="attr">property</span>=<span class="string">"money"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            一对一嵌套</span></span><br><span class="line"><span class="comment">                 column="uid" 就是订单表的查询结果 uid作为条件</span></span><br><span class="line"><span class="comment">                 select="com.sun.mapper.UserMapper.findById" 去调用（UserMapper中findById方法）实现单表查询</span></span><br><span class="line"><span class="comment">                 最后通过association组合嵌套，封装到 Order实体中user属性汇总</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">select</span>=<span class="string">"com.sun.mapper.UserMapper.findById"</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--一对一嵌套查询--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByIdWithUser"</span> <span class="attr">parameterType</span>=<span class="string">"integer"</span> <span class="attr">resultMap</span>=<span class="string">"orderWithUserMap"</span>&gt;</span></span><br><span class="line">        select * from orders where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="⑥-测试"><a href="#⑥-测试" class="headerlink" title="⑥ 测试"></a>⑥ 测试</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderMapperTest</span> <span class="keyword">extends</span> <span class="title">BaseMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一对一测试</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 获取代理对象</span></span><br><span class="line">        OrderMapper orderMapper = sqlSession.getMapper(OrderMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询</span></span><br><span class="line">        Order order = orderMapper.findByIdWithUser(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(order);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="⑦-嵌套关系"><a href="#⑦-嵌套关系" class="headerlink" title="⑦ 嵌套关系"></a>⑦ 嵌套关系</h4><p><img data-src="/img/%E5%B5%8C%E5%A5%97%E5%85%B3%E7%B3%BB_%E4%B8%80%E5%AF%B9%E4%B8%80.png" alt="嵌套关系_一对一"></p>
<h3 id="3-4-一对多"><a href="#3-4-一对多" class="headerlink" title="3.4 一对多"></a>3.4 一对多</h3><blockquote>
<p>需求：查询一个用户，与此同时查询出该用户具有的订单</p>
</blockquote>
<p><strong>sql语句</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1.先根据用户id查询用户信息</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">41</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2.再根据用户id查询订单列表</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> orders <span class="keyword">where</span> uid = <span class="number">41</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3.最后由mybatis进行组合嵌套</span></span><br></pre></td></tr></table></figure>



<h4 id="①-UserMapper接口"><a href="#①-UserMapper接口" class="headerlink" title="① UserMapper接口"></a>① UserMapper接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一对多嵌套查询</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findByIdWithOrderList</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure>



<h4 id="②-UserMapper映射"><a href="#②-UserMapper映射" class="headerlink" title="② UserMapper映射"></a>② UserMapper映射</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByIdWithOrderList"</span> <span class="attr">parameterType</span>=<span class="string">"integer"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">    select * from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="③-OrderMapper接口"><a href="#③-OrderMapper接口" class="headerlink" title="③ OrderMapper接口"></a>③ OrderMapper接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据uid查询订单列表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Order&gt; <span class="title">findByUid</span><span class="params">(Integer uid)</span></span>;</span><br></pre></td></tr></table></figure>

<h4 id="④-OrderMapper映射"><a href="#④-OrderMapper映射" class="headerlink" title="④ OrderMapper映射"></a>④ OrderMapper映射</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByUid"</span> <span class="attr">parameterType</span>=<span class="string">"integer"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.Order"</span>&gt;</span></span><br><span class="line">    select * from orders where uid = #&#123;uid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="⑤-mybatis嵌套组合-1"><a href="#⑤-mybatis嵌套组合-1" class="headerlink" title="⑤ mybatis嵌套组合"></a>⑤ mybatis嵌套组合</h4><blockquote>
<p>用户嵌套订单，UserMapper.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--一对多手动映射封装--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userWithOrderMap"</span> <span class="attr">type</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        一对多嵌套</span></span><br><span class="line"><span class="comment">             column="id" 用户表查询结果作为条件</span></span><br><span class="line"><span class="comment">             select="com.sun.mapper.OrderMapper.findByUid"  调用（OerderMapper中findByUid方法）查询 订单列表</span></span><br><span class="line"><span class="comment">             最后由mybatis组合嵌套封装到 user实体的orderList属性中</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"orderList"</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">select</span>=<span class="string">"com.sun.mapper.OrderMapper.findByUid"</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByIdWithOrderList"</span> <span class="attr">parameterType</span>=<span class="string">"integer"</span> <span class="attr">resultMap</span>=<span class="string">"userWithOrderMap"</span>&gt;</span></span><br><span class="line">    select * from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="⑥-测试-1"><a href="#⑥-测试-1" class="headerlink" title="⑥ 测试"></a>⑥ 测试</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> <span class="keyword">extends</span> <span class="title">BaseMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一对多测试</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 创建代理对象</span></span><br><span class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 根据用户id查询</span></span><br><span class="line">        User user = userMapper.findByIdWithOrderList(<span class="number">41</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="⑦-嵌套关系-1"><a href="#⑦-嵌套关系-1" class="headerlink" title="⑦ 嵌套关系"></a>⑦ 嵌套关系</h4><p> <img data-src="/img/%E5%B5%8C%E5%A5%97%E5%85%B3%E7%B3%BB_%E4%B8%80%E5%AF%B9%E5%A4%9A.png" alt="嵌套关系_一对多"></p>
<h3 id="3-5-多对多"><a href="#3-5-多对多" class="headerlink" title="3.5 多对多"></a>3.5 多对多</h3><blockquote>
<p>需求：查询用户同时查询出该用户的所有角色</p>
</blockquote>
<blockquote>
<p>站在用户一方，此用户具有多个角色，实现步骤和一对多一样</p>
</blockquote>
<p><strong>sql语句</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1.先根据用户id查询用户信息</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">41</span>;</span><br><span class="line"><span class="comment">-- 2.再根据用户id查询角色列表</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">role</span> r <span class="keyword">inner</span> <span class="keyword">join</span> user_role ur <span class="keyword">on</span> ur.rid = r.id <span class="keyword">where</span> ur.uid= <span class="number">41</span>;</span><br><span class="line"><span class="comment">-- 3.最后由mybatis进行组合嵌套</span></span><br></pre></td></tr></table></figure>



<h4 id="①-UserMapper接口-1"><a href="#①-UserMapper接口-1" class="headerlink" title="① UserMapper接口"></a>① UserMapper接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 多对多嵌套查询</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findByIdWithRoleList</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure>

<h4 id="②-UserMapper映射-1"><a href="#②-UserMapper映射-1" class="headerlink" title="② UserMapper映射"></a>② UserMapper映射</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByIdWithRoleList"</span> <span class="attr">parameterType</span>=<span class="string">"integer"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">    select * from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="③-RoleMapper接口"><a href="#③-RoleMapper接口" class="headerlink" title="③ RoleMapper接口"></a>③ RoleMapper接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RoleMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据用户id查询角色列表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">findByUid</span><span class="params">(Integer uid)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="④-RoleMapper映射"><a href="#④-RoleMapper映射" class="headerlink" title="④ RoleMapper映射"></a>④ RoleMapper映射</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.sun.mapper.RoleMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByUid"</span> <span class="attr">parameterType</span>=<span class="string">"integer"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.Role"</span>&gt;</span></span><br><span class="line">        select * from role r inner join user_role ur on ur.rid = r.id where ur.uid= #&#123;uid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="⑤-mybatis嵌套组合-2"><a href="#⑤-mybatis嵌套组合-2" class="headerlink" title="⑤ mybatis嵌套组合"></a>⑤ mybatis嵌套组合</h4><blockquote>
<p>用户嵌套角色，定位UserMapper.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--多对多嵌套手动封装--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userWithRoleMap"</span> <span class="attr">type</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--多对多嵌套</span></span><br><span class="line"><span class="comment">        column="id" 用户表查询结果作为条件</span></span><br><span class="line"><span class="comment">        select="com.sun.mapper.RoleMapper.findByUid" 去调用（RoleMapper中findByUid方法） 查询角色列表</span></span><br><span class="line"><span class="comment">        最后由mybatis组合嵌套，封装到User实体的roleList属性中</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"roleList"</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">select</span>=<span class="string">"com.sun.mapper.RoleMapper.findByUid"</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByIdWithRoleList"</span> <span class="attr">parameterType</span>=<span class="string">"integer"</span> <span class="attr">resultMap</span>=<span class="string">"userWithRoleMap"</span>&gt;</span></span><br><span class="line">    select * from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="⑥-测试-2"><a href="#⑥-测试-2" class="headerlink" title="⑥ 测试"></a>⑥ 测试</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 多对多测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 创建代理对象</span></span><br><span class="line">    UserMapper userMapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">// 根据用户id查询</span></span><br><span class="line">    User user = userMapper.findByIdWithRoleList(<span class="number">41</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="⑦-嵌套关系-2"><a href="#⑦-嵌套关系-2" class="headerlink" title="⑦ 嵌套关系"></a>⑦ 嵌套关系</h4><p> <img data-src="/img/%E5%B5%8C%E5%A5%97%E5%85%B3%E7%B3%BB_%E5%A4%9A%E5%AF%B9%E5%A4%9A.png" alt="嵌套关系_多对多"></p>
<h2 id="3-6-知识小结"><a href="#3-6-知识小结" class="headerlink" title="3.6 知识小结"></a>3.6 知识小结</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">一对一配置：使用<span class="xml"><span class="tag">&lt;<span class="name">resultMap</span>&gt;</span></span>+<span class="xml"><span class="tag">&lt;<span class="name">association</span>&gt;</span></span>做配置，通过column条件，执行select查询</span><br><span class="line"></span><br><span class="line">一对多配置：使用<span class="xml"><span class="tag">&lt;<span class="name">resultMap</span>&gt;</span></span>+<span class="xml"><span class="tag">&lt;<span class="name">collection</span>&gt;</span></span>做配置，通过column条件，执行select查询</span><br><span class="line"></span><br><span class="line">多对多配置：使用<span class="xml"><span class="tag">&lt;<span class="name">resultMap</span>&gt;</span></span>+<span class="xml"><span class="tag">&lt;<span class="name">collection</span>&gt;</span></span>做配置，通过column条件，执行select查询</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">总结一句话：二张表数据过大就使用嵌套查询，否则还是关联查询足以....</span><br></pre></td></tr></table></figure>



<h2 id="四-MyBatis加载策略"><a href="#四-MyBatis加载策略" class="headerlink" title="四 MyBatis加载策略"></a>四 MyBatis加载策略</h2><h3 id="4-1-什么是延迟加载？"><a href="#4-1-什么是延迟加载？" class="headerlink" title="4.1 什么是延迟加载？"></a>4.1 什么是延迟加载？</h3><p><strong>问题</strong></p>
<p>​    通过前面的学习，我们已经掌握了Mybatis中一对一，一对多，多对多关系的配置及实现，可以实现对象的关联查询。实际开发过程中很多时候我们并不需要总是在加载用户信息时就一定要加载他的订单信息。此时就是我们所说的延迟加载。</p>
<p><strong>举个栗子</strong></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>在一对多中，当我们有一个用户，它有个100个订单</span><br><span class="line"><span class="code">	在查询用户的时候，要不要把关联的订单查出来？</span></span><br><span class="line"><span class="code">	在查询订单的时候，要不要把关联的用户查出来？</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="bullet">* </span>回答</span><br><span class="line"><span class="code">	在查询用户时，用户下的订单应该是，什么时候用，什么时候查询。【延迟（懒）加载】</span></span><br><span class="line"><span class="code">	在查询订单时，订单所属的用户信息应该是随着订单一起查询出来。</span></span><br></pre></td></tr></table></figure>

<p><strong>延迟加载</strong></p>
<p>​    就是在需要用到数据时才进行加载，不需要用到数据时就不加载数据。延迟加载也称懒加载。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>在多表中：</span><br><span class="line"><span class="code">	一对多，多对多：通常情况下采用延迟加载</span></span><br><span class="line"><span class="code">	一对一：通常情况下采用立即加载</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="bullet">* </span>注意：</span><br><span class="line"><span class="code">	延迟加载是基于嵌套查询来实现的</span></span><br></pre></td></tr></table></figure>





<h3 id="4-2-配置延迟加载"><a href="#4-2-配置延迟加载" class="headerlink" title="4.2 配置延迟加载"></a>4.2 配置延迟加载</h3><h4 id="4-2-1-全局延迟加载"><a href="#4-2-1-全局延迟加载" class="headerlink" title="4.2.1 全局延迟加载"></a>4.2.1 全局延迟加载</h4><p> <img data-src="/img/%E5%85%A8%E5%B1%80%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE.png" alt="全局延迟加载配置"></p>
<blockquote>
<p>在Mybatis的核心配置文件中可以使用setting标签开启全局的加载策略</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--settings设置--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--开启全局延迟加载功能了--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="4-2-2-局部延迟加载"><a href="#4-2-2-局部延迟加载" class="headerlink" title="4.2.2 局部延迟加载"></a>4.2.2 局部延迟加载</h4><blockquote>
<p>​    在Mapper映射文件中在association和collection标签中都有一个fetchType属性，通过修改它的值，可以修改局部的加载策略</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">fetchType 属性</span><br><span class="line">	eager 立即加载</span><br><span class="line">	lazy  延迟加载</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">fetchType</span>=<span class="string">"eager"</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">collection</span> <span class="attr">fetchType</span>=<span class="string">"eager"</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：局部延迟加载优先级高于全局延迟加载，通常是为了覆盖全局延迟来设置的方式</p>
</blockquote>
<h3 id="4-3-触发加载"><a href="#4-3-触发加载" class="headerlink" title="4.3  触发加载"></a>4.3  触发加载</h3><p> <img data-src="/img/%E8%A7%A6%E5%8F%91%E5%8A%A0%E8%BD%BD.png" alt="触发加载"></p>
<blockquote>
<p>​    大家在配置了延迟加载策略后，发现即使没有调用关联对象的任何方法，但是在你调用当前对象的equals、clone、hashCode、toString方法时也会触发关联对象的查询。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--settings设置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启全局延迟加载功能了--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--关闭四个默认触发关联查询的功能，只有调用getOrderList()时才会触发关联查询--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadTriggerMethods"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">setting</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="五-MyBatis缓存"><a href="#五-MyBatis缓存" class="headerlink" title="五 MyBatis缓存"></a>五 MyBatis缓存</h2><h3 id="5-1-什么是缓存"><a href="#5-1-什么是缓存" class="headerlink" title="5.1 什么是缓存"></a>5.1 什么是缓存</h3><p> <img data-src="/img/%E7%BC%93%E5%AD%98.png" alt="mybatis一级缓存"></p>
<blockquote>
<p>缓存就是计算机内存中的一块区域</p>
</blockquote>
<p><strong>为什么要使用缓存吗？</strong></p>
<blockquote>
<p>为了提高查询效率，减少磁盘IO，降低数据库访问压力</p>
</blockquote>
<p><strong>什么样的数据适合做缓存？</strong></p>
<blockquote>
<p>经常访问但又不经常修改的数据</p>
</blockquote>
<p>缓存是用来提高查询效率的，所有的持久层框架基本上都有缓存机制<br>Mybatis也提供了缓存策略，分为一级缓存，二级缓存</p>
<h3 id="5-2-一级缓存"><a href="#5-2-一级缓存" class="headerlink" title="5.2 一级缓存"></a>5.2 一级缓存</h3><h4 id="5-1-1-介绍"><a href="#5-1-1-介绍" class="headerlink" title="5.1.1 介绍"></a>5.1.1 介绍</h4><p>MyBatis一级缓存是：SqlSession级别的缓存，默认开启</p>
<p><img data-src="/img/mybatis%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98%E4%BB%8B%E7%BB%8D.png" alt="mybatis一级缓存介绍"></p>
<h4 id="5-1-2-验证"><a href="#5-1-2-验证" class="headerlink" title="5.1.2 验证"></a>5.1.2 验证</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试一级缓存</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtils.openSession();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第一次查询</span></span><br><span class="line">    UserMapper userMapper1 = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    User user1 = userMapper1.findById(<span class="number">41</span>);</span><br><span class="line">    System.out.println(user1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 手动清除缓存</span></span><br><span class="line">    sqlSession.clearCache();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二次查询</span></span><br><span class="line">    UserMapper userMapper2 = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    User user2 = userMapper2.findById(<span class="number">41</span>);</span><br><span class="line">    System.out.println(user2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭sqlSession</span></span><br><span class="line">    MyBatisUtils.release(sqlSession);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="5-1-3-分析"><a href="#5-1-3-分析" class="headerlink" title="5.1.3 分析"></a>5.1.3 分析</h4><p>一级缓存是SqlSession范围的缓存，不同的sqlsession之间的缓存区域是互相不影响的，执行SqlSession的C（增加）U（更新）D（删除）操作，或者调用clearCache()、commit()、close()方法，都会清空缓存</p>
<p> <img data-src="/img/mybatis%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98.png" alt="mybatis一级缓存"></p>
<h3 id="5-3-二级缓存"><a href="#5-3-二级缓存" class="headerlink" title="5.3 二级缓存"></a>5.3 二级缓存</h3><h4 id="5-2-1-介绍"><a href="#5-2-1-介绍" class="headerlink" title="5.2.1 介绍"></a>5.2.1 介绍</h4><p>​    MyBatis的二级缓存虽然是默认开启的，但需要在映射文件中配置<code>&lt;cache/&gt;</code>标签才能使用，而且要求实体类的必须实现序列化接口</p>
<p>  <img data-src="/img/mybatis%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98%E4%BB%8B%E7%BB%8D.png" alt="mybatis二级缓存介绍"></p>
<h4 id="5-2-2-验证"><a href="#5-2-2-验证" class="headerlink" title="5.2.2 验证"></a>5.2.2 验证</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试二级缓存</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟第一个用户</span></span><br><span class="line">    SqlSession sqlSession1 = MyBatisUtils.openSession();</span><br><span class="line">    UserMapper userMapper1 = sqlSession1.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    User user1 = userMapper1.findById(<span class="number">41</span>);</span><br><span class="line">    System.out.println(user1);</span><br><span class="line">    MyBatisUtils.release(sqlSession1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟第二个用户</span></span><br><span class="line">    SqlSession sqlSession2 = MyBatisUtils.openSession();</span><br><span class="line">    UserMapper userMapper2 = sqlSession2.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    User user2 = userMapper2.findById(<span class="number">41</span>);</span><br><span class="line">    System.out.println(user2);</span><br><span class="line">    MyBatisUtils.release(sqlSession2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="5-1-3-分析-1"><a href="#5-1-3-分析-1" class="headerlink" title="5.1.3 分析"></a>5.1.3 分析</h4><p>​    二级缓存是mapper映射级别的缓存，多个SqlSession去操作同一个Mapper映射的sql语句，多个SqlSession可以共用二级缓存，二级缓存是跨SqlSession的。</p>
<p>二级缓存相比一级缓存的范围更大（按namespace来划分）</p>
<p> <img data-src="/img/mybatis%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98.png" alt="mybatis二级缓存"></p>
<h3 id="5-4-知识小结"><a href="#5-4-知识小结" class="headerlink" title="5.4 知识小结"></a>5.4 知识小结</h3><p><img data-src="/img/Mybatis%E7%BC%93%E5%AD%98%E7%9F%A5%E8%AF%86%E5%B0%8F%E7%BB%93.png" alt="Mybatis缓存知识小结"></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>mybatis的缓存，都不需要我们手动存储和获取数据。mybatis自动维护的。</span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>使用mybatis，如果是中小型项目，使用自带缓存的机制是可以满足需求的。如果是大型（分布式）项目，mybatis的缓存灵活性不足，需要使用第三方的缓存技术（redis）解决问题。</span><br></pre></td></tr></table></figure>

<p> <img data-src="/img/Mybatis%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98.png" alt="Mybatis二级缓存存在的问题"></p>
]]></content>
      <categories>
        <category>框架</category>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>多表查询</tag>
        <tag>持久层框架</tag>
        <tag>mybatis</tag>
        <tag>嵌套查询</tag>
        <tag>缓存</tag>
        <tag>动态sql</tag>
        <tag>加载策略</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis注解开发&amp;分页查询</title>
    <url>/2020/09/09/Mybatis%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91-%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h2 id="一-核心配置文件总结"><a href="#一-核心配置文件总结" class="headerlink" title="一  核心配置文件总结"></a>一  核心配置文件总结</h2><p><strong>SqlMapConfig.xml 中配置的内容和顺序如下：</strong>  </p>
<ul>
<li>properties（属性）</li>
<li>settings（全局配置参数）</li>
<li>typeAliases（类型别名）</li>
<li>typeHandlers（类型处理器）</li>
<li>objectFactory（对象工厂）</li>
<li>plugins（插件）</li>
<li>environments（数据库环境配置）<ul>
<li>environment（数据库环境子属性对象）<ul>
<li>transactionManager（事务管理）</li>
<li>dataSource（数据源）</li>
</ul>
</li>
</ul>
</li>
<li>mappers（映射器）</li>
</ul>
<a id="more"></a>

<h3 id="1-1-properties标签"><a href="#1-1-properties标签" class="headerlink" title="1.1 properties标签"></a>1.1 properties标签</h3><blockquote>
<p>加载外部的properties文件</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbc.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="1-2-settings标签"><a href="#1-2-settings标签" class="headerlink" title="1.2 settings标签"></a>1.2 settings标签</h3><blockquote>
<p>全局参数配置</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启懒加载--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定触发延迟加载的方法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadTriggerMethods"</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="1-3-typeAliases标签"><a href="#1-3-typeAliases标签" class="headerlink" title="1.3 typeAliases标签"></a>1.3 typeAliases标签</h3><blockquote>
<p>为 Java 类型设置一个别名</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>单个定义别名（了解）</span><br><span class="line"></span><br><span class="line"><span class="code">    &lt;typeAliases&gt;</span></span><br><span class="line"><span class="code">        &lt;typeAlias type="com.xxx.domain.User" alias="user"&gt;&lt;/typeAlias&gt;</span></span><br><span class="line"><span class="code">    &lt;/typeAliases&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">1. </span>使用包的形式批量定义别名</span><br><span class="line"></span><br><span class="line"><span class="code">    &lt;typeAliases&gt;</span></span><br><span class="line"><span class="code">        &lt;package name="com.xxx.domain"&gt;&lt;/package&gt;</span></span><br><span class="line"><span class="code">    &lt;/typeAliases&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="1-4-mappers标签"><a href="#1-4-mappers标签" class="headerlink" title="1.4 mappers标签"></a>1.4 mappers标签</h3><blockquote>
<p>加载映射配置</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>加载指定的src目录下的映射文件，例如：</span><br><span class="line"></span><br><span class="line"><span class="code">	&lt;mapper resource="com/xxx/mapper/UserMapper.xml"/&gt;</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="bullet">2. </span>加载指定包目录下的映射接口，例如：</span><br><span class="line"></span><br><span class="line"><span class="code">	&lt;mapper class="com.xxx.mapper.UserMapper"/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">3. </span>加载并扫描指定包下所有的映射文件（接口），例如：</span><br><span class="line"></span><br><span class="line"><span class="code">    &lt;!--配置映射文件--&gt;</span></span><br><span class="line"><span class="code">    &lt;mappers&gt;</span></span><br><span class="line"><span class="code">       &lt;!-- &lt;mapper resource="com/itheima/mapper/UserMapper.xml"&gt;&lt;/mapper&gt;--&gt;</span></span><br><span class="line"><span class="code">        &lt;!--使用扫描包的方式有一个前置条件，映射文件命名必须跟映射接口一致，且在同一包下--&gt;</span></span><br><span class="line"><span class="code">        &lt;package name="com.xxx.mapper"&gt;&lt;/package&gt;</span></span><br><span class="line"><span class="code">    &lt;/mappers&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="1-5-environments标签"><a href="#1-5-environments标签" class="headerlink" title="1.5 environments标签"></a>1.5 environments标签</h3><blockquote>
<p>数据源环境配置</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;environment id="mysql"&gt;</span></span><br><span class="line"><span class="code">    	&lt;!--事务管理器：使用JDBC--&gt;</span></span><br><span class="line"><span class="code">        &lt;transactionManager type="JDBC"/&gt;</span></span><br><span class="line"><span class="code">        &lt;!--数据源：使用内置连接池--&gt;</span></span><br><span class="line"><span class="code">        &lt;dataSource type="POOLED"&gt;</span></span><br><span class="line"><span class="code">            &lt;property name="driver" value="$&#123;jdbc.driver&#125;"/&gt;</span></span><br><span class="line"><span class="code">            &lt;property name="url" value="$&#123;jdbc.url&#125;"/&gt;</span></span><br><span class="line"><span class="code">            &lt;property name="username" value="$&#123;jdbc.username&#125;"/&gt;</span></span><br><span class="line"><span class="code">            &lt;property name="password" value="$&#123;jdbc.password&#125;"/&gt;</span></span><br><span class="line"><span class="code">        &lt;/dataSource&gt;</span></span><br><span class="line"><span class="code">    &lt;/environment&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1. </span>其中，事务管理器（transactionManager）类型有两种：</span><br><span class="line"><span class="bullet">	* </span>JDBC：</span><br><span class="line"><span class="code">		这个配置就是直接使用了JDBC 的提交和回滚设置，它依赖于从数据源得到的连接来管理事务作用域。</span></span><br><span class="line"><span class="code">		</span></span><br><span class="line"><span class="bullet">	* </span>MANAGED：</span><br><span class="line"><span class="code">		这个配置几乎没做什么。它从来不提交或回滚一个连接，而是让容器来管理事务的整个生命周期。</span></span><br><span class="line"><span class="code">		例如：mybatis与spring整合后，事务交给spring容器管理。</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="bullet">2. </span>其中，数据源（dataSource）常用类型有二种：</span><br><span class="line"><span class="bullet">	* </span>UNPOOLED：</span><br><span class="line"><span class="code">		这个数据源的实现只是每次被请求时打开和关闭连接。</span></span><br><span class="line"><span class="code">		</span></span><br><span class="line"><span class="bullet">	* </span>POOLED：</span><br><span class="line"><span class="code">		这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来。</span></span><br></pre></td></tr></table></figure>



<h2 id="二、Mybatis注解"><a href="#二、Mybatis注解" class="headerlink" title="二、Mybatis注解"></a>二、Mybatis注解</h2><p>近年来注解开发越来越流行，Mybatis也可以使用注解开发方式，这样我们就可以减少编写Mapper映射文件了。我们先围绕一些基本的CRUD来学习，再学习复杂映射多表操作。</p>
<h3 id="2-1-Mybatis常用注解"><a href="#2-1-Mybatis常用注解" class="headerlink" title="2.1 Mybatis常用注解"></a>2.1 Mybatis常用注解</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>@Insert：实现新增，代替了<span class="xml"><span class="tag">&lt;<span class="name">insert</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="bullet">* </span>@Update：实现更新，代替了<span class="xml"><span class="tag">&lt;<span class="name">update</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>@Delete：实现删除，代替了<span class="xml"><span class="tag">&lt;<span class="name">delete</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>@Select：实现查询，代替了<span class="xml"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>@Result：实现结果集封装，代替了<span class="xml"><span class="tag">&lt;<span class="name">result</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>@Results：可以与@Result 一起使用，封装多个结果集，代替了<span class="xml"><span class="tag">&lt;<span class="name">resultMap</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>@One：实现一对一结果集封装，代替了<span class="xml"><span class="tag">&lt;<span class="name">association</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="bullet">* </span>@Many：实现一对多结果集封装，代替了<span class="xml"><span class="tag">&lt;<span class="name">collection</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<h3 id="2-2-Mybatis注解单表操作"><a href="#2-2-Mybatis注解单表操作" class="headerlink" title="2.2 Mybatis注解单表操作"></a>2.2 Mybatis注解单表操作</h3><p><strong>代码示例：</strong></p>
<ul>
<li>UserMapper接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user where id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select id as uid ,username as uname,birthday as bir , sex as gender ,address as addr from user"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(&#123;</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"uid"</span>, property = <span class="string">"id"</span>, id = <span class="keyword">true</span>),  <span class="comment">// 相当于&lt;id&gt;&lt;/id&gt;</span></span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"uname"</span>, property = <span class="string">"username"</span>), <span class="comment">// 相当于&lt;result&gt;&lt;/result&gt;</span></span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"bir"</span>, property = <span class="string">"birthday"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"gender"</span>, property = <span class="string">"sex"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"addr"</span>, property = <span class="string">"address"</span>)</span><br><span class="line">    &#125;) <span class="comment">// 相当于&lt;resultMap&gt;&lt;/resultMap&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into user values(null,#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"update user set username = #&#123;username&#125;,sex = #&#123;sex&#125;,address = #&#123;address&#125;,birthday= #&#123;birthday&#125; where id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from user where id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> <span class="keyword">extends</span> <span class="title">BaseMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取代理对象</span></span><br><span class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 查询单个</span></span><br><span class="line">       <span class="comment">/* User user = userMapper.findById(41);</span></span><br><span class="line"><span class="comment">        System.out.println(user);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询所有</span></span><br><span class="line">       <span class="comment">/* List&lt;User&gt; list = userMapper.findAll();</span></span><br><span class="line"><span class="comment">        for (User user : list) &#123;</span></span><br><span class="line"><span class="comment">            System.out.println(user);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加</span></span><br><span class="line">       <span class="comment">/* User user = new User();</span></span><br><span class="line"><span class="comment">        user.setUsername("印度小啊三");</span></span><br><span class="line"><span class="comment">        user.setAddress("恒河");</span></span><br><span class="line"><span class="comment">        user.setBirthday(new Date());</span></span><br><span class="line"><span class="comment">        user.setSex("不详");</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        userMapper.save(user);*/</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// 修改</span></span><br><span class="line">        <span class="comment">/*User user = new User();</span></span><br><span class="line"><span class="comment">        user.setId(58);</span></span><br><span class="line"><span class="comment">        user.setUsername("印度啊三");</span></span><br><span class="line"><span class="comment">        user.setAddress("恒河");</span></span><br><span class="line"><span class="comment">        user.setBirthday(new Date());</span></span><br><span class="line"><span class="comment">        user.setSex("男");</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        userMapper.update(user);*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除</span></span><br><span class="line">        userMapper.delete(<span class="number">58</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-3-Mybatis注解多表操作"><a href="#2-3-Mybatis注解多表操作" class="headerlink" title="2.3 Mybatis注解多表操作"></a>2.3 Mybatis注解多表操作</h3><p>之前我们在映射文件中通过配置<code>&lt;resultMap&gt;、&lt;association&gt;、&lt;collection&gt;</code>来实现复杂关系映射。</p>
<p>使用注解开发后，我们可以使用<code>@Results、@Result，@One、@Many</code>注解组合完成复杂关系的配置。</p>
<p><img data-src="/img/%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E7%9B%B8%E5%85%B3%E6%B3%A8%E8%A7%A31.png" alt="多表查询相关注解1"></p>
<p><img data-src="/img/%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E7%9B%B8%E5%85%B3%E6%B3%A8%E8%A7%A32.png" alt="多表查询相关注解2"></p>
<h4 id="2-3-1-一对一查询基于注解开发"><a href="#2-3-1-一对一查询基于注解开发" class="headerlink" title="2.3.1 一对一查询基于注解开发"></a>2.3.1 一对一查询基于注解开发</h4><blockquote>
<p>需求：查询一个订单，与此同时查询出该订单所属的用户</p>
</blockquote>
<p><strong>一对一查询语句</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> orders <span class="keyword">where</span> <span class="keyword">id</span> = <span class="comment">#&#123;id&#125;;</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`user`</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="comment">#&#123;订单的uid&#125;;</span></span><br></pre></td></tr></table></figure>



<ul>
<li>OrderMapper接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一对一关系查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from orders where id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">Order <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>UserMapper接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询用户信息及其下属的订单信息角色信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from user where id = #&#123;id&#125;"</span>)</span><br><span class="line"><span class="function">User <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>注解嵌套</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一对一关系查询</span></span><br><span class="line"><span class="comment">     * 查询订单id及所属用户</span></span><br><span class="line"><span class="comment">     * 根据订单id查询订单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from orders where id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(&#123;</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"id"</span>,property = <span class="string">"id"</span>,id = <span class="keyword">true</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"ordertime"</span>,property = <span class="string">"ordertime"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"money"</span>,property = <span class="string">"money"</span>),</span><br><span class="line">        <span class="comment">// 一对一关系</span></span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"user"</span>,column = <span class="string">"uid"</span>,one = <span class="meta">@One</span>(select = <span class="string">"com.xxx.mapper.UserMapper.findById"</span>))</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function">Order <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">//工具类获取sqlSession对象</span></span><br><span class="line">    SqlSession sqlSession = MybatisUtils.openSession();</span><br><span class="line">    </span><br><span class="line">    OrderMapper mapper = sqlSession.getMapper(OrderMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    Order order = mapper.findById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(order);</span><br><span class="line">    <span class="comment">//工具类释放资源</span></span><br><span class="line">    MybatisUtils.releases(sqlSession);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2-3-2-一对多基于注解开发"><a href="#2-3-2-一对多基于注解开发" class="headerlink" title="2.3.2 一对多基于注解开发"></a>2.3.2 一对多基于注解开发</h4><blockquote>
<p>需求：查询一个用户，与此同时查询出该用户具有的订单</p>
</blockquote>
<p><strong>一对多查询语句</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`user`</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="comment">#&#123;id&#125;;</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> orders <span class="keyword">where</span> uid = <span class="comment">#&#123;用户id&#125;;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>UserMapper接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一对多嵌套查询</span></span><br><span class="line"><span class="meta">@Select</span>(<span class="string">"SELECT * FROM `user` WHERE id = #&#123;id&#125;"</span>)</span><br><span class="line"><span class="meta">@Results</span>(&#123;</span><br><span class="line">    <span class="meta">@Result</span>(column = <span class="string">"id"</span>,property = <span class="string">"id"</span>,id=<span class="keyword">true</span>),</span><br><span class="line">    <span class="meta">@Result</span>(column = <span class="string">"birthday"</span>,property =<span class="string">"birthday"</span> ),</span><br><span class="line">    <span class="meta">@Result</span>(column = <span class="string">"sex"</span>,property =<span class="string">"sex"</span> ),</span><br><span class="line">    <span class="meta">@Result</span>(column = <span class="string">"username"</span>,property =<span class="string">"username"</span> ),</span><br><span class="line">    <span class="meta">@Result</span>(column = <span class="string">"address"</span>,property =<span class="string">"address"</span> ),</span><br><span class="line">    <span class="comment">// &lt;collection property="orderList" column="id" select="com.xxx.mapper.OrderMapper.findByUid"&gt;&lt;/collection&gt;</span></span><br><span class="line">    <span class="meta">@Result</span>(property = <span class="string">"orderList"</span>,column = <span class="string">"id"</span>,many = <span class="meta">@Many</span>(select = <span class="string">"com.xxx.mapper.OrderMapper.findByUid"</span>))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findByIdWithOrderList</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一对多测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//工具类获取sqlSession对象</span></span><br><span class="line">    SqlSession sqlSession = MybatisUtils.openSession();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建代理对象</span></span><br><span class="line">    UserMapper userMapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">// 根据用户id查询</span></span><br><span class="line">    User user = userMapper.findByIdWithOrderList(<span class="number">41</span>);</span><br><span class="line">    System.out.println(user.getOrderList());</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//工具类释放资源</span></span><br><span class="line">    MybatisUtils.releases(sqlSession);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2-3-3-多对多基于注解开发"><a href="#2-3-3-多对多基于注解开发" class="headerlink" title="2.3.3 多对多基于注解开发"></a>2.3.3 多对多基于注解开发</h4><blockquote>
<p>需求：查询一个用户，与此同时查询该用户所具有的角色列表</p>
</blockquote>
<p><strong>sql语句</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="comment">#&#123;id&#125;</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">role</span> r <span class="keyword">INNER</span> <span class="keyword">JOIN</span> user_role ur <span class="keyword">ON</span> r.id = ur.rid <span class="keyword">WHERE</span> uid = <span class="comment">#&#123;用户id&#125;</span></span><br></pre></td></tr></table></figure>

<p>代码示例</p>
<ul>
<li>UserMapper接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from user where id = #&#123;id&#125;"</span>)</span><br><span class="line"><span class="meta">@Results</span>(&#123;</span><br><span class="line">    <span class="meta">@Result</span>(column = <span class="string">"id"</span>,property = <span class="string">"id"</span>,id = <span class="keyword">true</span>),</span><br><span class="line">    <span class="meta">@Result</span>(column = <span class="string">"username"</span>, property = <span class="string">"username"</span>),</span><br><span class="line">    <span class="meta">@Result</span>(column = <span class="string">"birthday"</span>, property = <span class="string">"birthday"</span>),</span><br><span class="line">    <span class="meta">@Result</span>(column = <span class="string">"sex"</span>, property = <span class="string">"sex"</span>),</span><br><span class="line">    <span class="meta">@Result</span>(column = <span class="string">"address"</span>, property = <span class="string">"address"</span>),</span><br><span class="line">    <span class="meta">@Result</span>(property = <span class="string">"orderList"</span>, column = <span class="string">"id"</span>, many = <span class="meta">@Many</span>(select = <span class="string">"com.xxx.mapper.OrderMapper.findByUid"</span>)),</span><br><span class="line">    <span class="meta">@Result</span>(property = <span class="string">"roleList"</span>, column = <span class="string">"id"</span>, many = <span class="meta">@Many</span>(select = <span class="string">"com.xxx.mapper.RoleMapper.findByUid"</span>))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="function">User <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>RoleMapper接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据用户id查询角色信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> 角色列表</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Select</span>(<span class="string">"SELECT * FROM role r INNER JOIN user_role ur ON r.id = ur.rid WHERE uid = #&#123;uid&#125;"</span>)</span><br><span class="line"><span class="function">List&lt;Role&gt; <span class="title">findByUid</span><span class="params">(Integer uid)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 多对多(一对多)关系查询</span></span><br><span class="line"><span class="comment">     * 查询用户及其角色信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">//工具类获取sqlSession对象</span></span><br><span class="line">    SqlSession sqlSession = MybatisUtils.openSession();</span><br><span class="line">   </span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    User user = mapper.findById(<span class="number">41</span>);</span><br><span class="line">    System.out.println(user.getRoleList());</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//工具类释放资源</span></span><br><span class="line">    MybatisUtils.releases(sqlSession);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-4-注解配置延迟加载"><a href="#2-4-注解配置延迟加载" class="headerlink" title="2.4 注解配置延迟加载"></a>2.4 注解配置延迟加载</h3><blockquote>
<p>不管是一对一、一对多还是多对多 ，在注解配置中都有fetchType的属性</p>
</blockquote>
<p>在<code>@One</code>和<code>@Many</code>注解中都提供了一个属性，<code>fetchType</code>，是一个枚举类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> FetchType &#123;</span><br><span class="line">    LAZY,</span><br><span class="line">    EAGER,</span><br><span class="line">    DEFAULT;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">FetchType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>三种取值分别的含义是：</p>
<ul>
<li><code>fetchType = FetchType.LAZY</code>：表示懒加载</li>
<li><code>fetchType = FetchType.EAGER</code>：表示立即加载</li>
<li><code>fetchType = FetchType.DEFAULT</code>：表示使用全局配置</li>
</ul>
<p>代码示例：</p>
<h3 id="2-5-二级缓存"><a href="#2-5-二级缓存" class="headerlink" title="2.5 二级缓存"></a>2.5 二级缓存</h3><blockquote>
<p>在Mapper接口中使用注解配置二级缓存即可</p>
<ul>
<li>在接口上加上注解<code>@CacheNamespace</code>即可，表示使用了二级缓存<ul>
<li><strong>注意：要在对应的实体上实现序列化接口</strong></li>
</ul>
</li>
</ul>
</blockquote>
<p><strong>代码示例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CacheNamespace</span>	<span class="comment">//使用二级缓存</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure>



<h2 id="三、Mybatis实现分页查询"><a href="#三、Mybatis实现分页查询" class="headerlink" title="三、Mybatis实现分页查询"></a>三、Mybatis实现分页查询</h2><blockquote>
<p>实现B/S架构的分页查询</p>
</blockquote>
<p>如何实现分页查询</p>
<ul>
<li><p>物理分页：可以操作数据库实现（MySQL的limit关键字）</p>
</li>
<li><p>逻辑分页：查询所有，通过java代码进行逻辑分页【已经淘汰】</p>
</li>
</ul>
<p>MySQL分页回顾：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- sql语法</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表名 <span class="keyword">limit</span> 开始索引,每页显示个数;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 模拟百度分页，共19条记录，一页展示5条</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 第一页</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表名 <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">5</span>;</span><br><span class="line"><span class="comment">-- 第二页</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表名 <span class="keyword">limit</span> <span class="number">5</span>,<span class="number">5</span>;</span><br><span class="line"><span class="comment">-- 第三页</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表名 <span class="keyword">limit</span> <span class="number">10</span>,<span class="number">5</span>;</span><br><span class="line"><span class="comment">-- 第四页</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表名 <span class="keyword">limit</span> <span class="number">15</span>,<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 索引公式</span></span><br><span class="line">index  = (当前页-1) × 每页显示个数;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 明确一个事项：当前页和每页显示的个数都是由用户(前端)提供的</span></span><br></pre></td></tr></table></figure>



<p>分页查询流程分析：</p>
<p><img data-src="/img/%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2%E5%88%86%E6%9E%90.png" alt="分页查询分析"></p>
<ul>
<li>创建分页对象PageBean</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageBean</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer totalCount;<span class="comment">// 总记录数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer totalPage;<span class="comment">// 总页数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;E&gt; list;<span class="comment">// 结果集</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer pageNum;<span class="comment">// 当前页</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer pageSize;<span class="comment">// 每页个数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>代码执行流程分析</li>
</ul>
<p><img data-src="/img/BS%E7%BB%93%E6%9E%84%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90.png" alt="BS结构分页查询流程分析"></p>
<ul>
<li>service层核心代码：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 分页查询</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PageBean&lt;Route&gt; <span class="title">findByPage</span><span class="params">(Integer pageNum, Integer pageSize)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取RouteDao代理对象</span></span><br><span class="line">    SqlSession sqlSession = MyBatisUtils.openSession();</span><br><span class="line">    RouteMapper routeMapper = sqlSession.getMapper(RouteMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">// 1.创建PageBean对象</span></span><br><span class="line">    PageBean&lt;Route&gt; pb = <span class="keyword">new</span> PageBean&lt;&gt;();</span><br><span class="line">    <span class="comment">// 2.封装当前页和每页个数</span></span><br><span class="line">    pb.setPageNum(pageNum);</span><br><span class="line">    pb.setPageSize(pageSize);</span><br><span class="line">    <span class="comment">// 3.调用dao查询总记录数并封装</span></span><br><span class="line">    Integer totalCount = routeMapper.findCount();</span><br><span class="line">    pb.setTotalCount(totalCount);</span><br><span class="line">    <span class="comment">// 4.计算总页数并封装</span></span><br><span class="line">    Integer totalPage = (<span class="keyword">int</span>) Math.ceil(totalCount * <span class="number">1.0</span> / pageSize);</span><br><span class="line">    pb.setTotalPage(totalPage);</span><br><span class="line">    <span class="comment">// 5.计算开始索引</span></span><br><span class="line">    Integer index = (pageNum - <span class="number">1</span>) * pageSize;</span><br><span class="line">    <span class="comment">// 6.调用dao查询结果集并封装</span></span><br><span class="line">    List&lt;Route&gt; list = routeMapper.findList(index,pageSize);</span><br><span class="line">    pb.setList(list);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放资源</span></span><br><span class="line">    MyBatisUtils.release(sqlSession);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7.返回PageBean对象</span></span><br><span class="line">    <span class="keyword">return</span> pb;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>dao层核心(接口+映射文件)<ul>
<li>接口</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询总记录数</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> 总记录数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">Integer <span class="title">findTotalCount</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 分页查询</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> start    起始索引</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> pageSize 每页显示条数</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> 查询到的线路信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">List&lt;Route&gt; <span class="title">findByPage</span><span class="params">(@Param(<span class="string">"start"</span>)</span> Integer start, @<span class="title">Param</span><span class="params">(<span class="string">"pageSize"</span>)</span> Integer pageSize)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.xxx.dao.RouteDao"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findTotalCount"</span> <span class="attr">resultType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">        select count(*) from tab_route</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByPage"</span> <span class="attr">resultType</span>=<span class="string">"com.xxx.domain.Route"</span>&gt;</span></span><br><span class="line">        select * from tab_route limit #&#123;start&#125;,#&#123;pageSize&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="四、Lombok和MybatisX插件"><a href="#四、Lombok和MybatisX插件" class="headerlink" title="四、Lombok和MybatisX插件"></a>四、Lombok和MybatisX插件</h2><p>Lombok提供了简单的注解的形式来帮助我们简化消除一些必须有但显得很臃肿的 java 代码。通过使用对应的注解，可以在编译源码的时候生成对应的方法，所以不会影响任何运行效率。</p>
<h3 id="4-1-Lombok"><a href="#4-1-Lombok" class="headerlink" title="4.1 Lombok"></a>4.1 Lombok</h3><h4 id="4-1-1-常用的-Lombok注解"><a href="#4-1-1-常用的-Lombok注解" class="headerlink" title="4.1.1 常用的 Lombok注解"></a>4.1.1 常用的 Lombok注解</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>@Data：注解在类上；生成toString，getter/setter</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>@NoArgsConstructor：注解在类上；为类提供一个无参的构造方法</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>@AllArgsConstructor：注解在类上；为类提供一个全参的构造方法</span><br></pre></td></tr></table></figure>



<h4 id="4-1-2-IDEA配置Lombok插件支持"><a href="#4-1-2-IDEA配置Lombok插件支持" class="headerlink" title="4.1.2 IDEA配置Lombok插件支持"></a>4.1.2 IDEA配置Lombok插件支持</h4><ul>
<li>在设置setting 中找到plugins。在检索框中检索lombok：</li>
</ul>
<p><img data-src="/img/Lombok%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%851.png" alt="Lombok插件安装1"></p>
<ul>
<li>在setting中找到下图界面，在右侧红框出打钩：</li>
</ul>
<p><img data-src="/img/Lombok%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%852.png" alt="Lombok插件安装2"></p>
<ul>
<li>重启idea，大功告成</li>
</ul>
<blockquote>
<p>注意：使用Lombok注解生成get/set等方法也需要导入Lombok的jar包才可以使用</p>
</blockquote>
<p><strong>Lombok注解使用演示：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Route</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rid;<span class="comment">//线路id</span></span><br><span class="line">    <span class="keyword">private</span> String rname;<span class="comment">//线路名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;<span class="comment">//线路价格</span></span><br><span class="line">    <span class="keyword">private</span> String rimage;<span class="comment">//线路图</span></span><br><span class="line">    <span class="keyword">private</span> String routeIntroduce;<span class="comment">// 线路描述</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-2-MybatisX"><a href="#4-2-MybatisX" class="headerlink" title="4.2 MybatisX"></a>4.2 MybatisX</h3><p>MybatisX 是一款基于 IDEA 的快速开发插件，为效率而生，主要功能有：</p>
<ul>
<li>Java 与 XML 调回跳转</li>
<li>Mapper 方法自动生成 XML</li>
</ul>
<h4 id="4-2-1-IDEA配置MybatisX插件支持"><a href="#4-2-1-IDEA配置MybatisX插件支持" class="headerlink" title="4.2.1 IDEA配置MybatisX插件支持"></a>4.2.1 IDEA配置MybatisX插件支持</h4><p>打开 IDEA，进入 File -&gt; Settings -&gt; Plugins，搜索 <code>mybatisx</code> 并安装</p>
<blockquote>
<p>IDEA2018操作</p>
</blockquote>
<p><img data-src="/img/MybatisX%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85.png" alt="MybatisX插件安装"></p>
<blockquote>
<p>安装完后重启IDEA</p>
</blockquote>
<h4 id="4-2-2-项目中使用"><a href="#4-2-2-项目中使用" class="headerlink" title="4.2.2 项目中使用"></a>4.2.2 项目中使用</h4><p><img data-src="/img/%E4%BD%BF%E7%94%A8MybatisX.gif" alt="使用MybatisX"></p>
]]></content>
      <categories>
        <category>框架</category>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis注解</tag>
        <tag>分页查询</tag>
        <tag>Lombok插件</tag>
        <tag>MybatisX插件</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven基础</title>
    <url>/2020/09/10/Maven%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="一、Maven简介"><a href="#一、Maven简介" class="headerlink" title="一、Maven简介"></a>一、Maven简介</h2><h3 id="1-1-Maven是什么"><a href="#1-1-Maven是什么" class="headerlink" title="1.1. Maven是什么?"></a>1.1. Maven是什么?</h3><p>Maven 翻译为”专家”、”内行”，是 Apache 下的一个纯 Java 开发的开源项目。</p>
<p><strong>一个对 Maven 比较正式的定义是这么说的：</strong></p>
<p>Maven 是一个项目管理工具，它包含了一个项目对象模型，一组标准集合，一个项目生命周期，一个依赖管理系统，和用来运行定义在生命周期阶段中插件目标的工具。</p>
<a id="more"></a>

<h3 id="1-2-Maven能解决什么问题"><a href="#1-2-Maven能解决什么问题" class="headerlink" title="1.2 Maven能解决什么问题"></a>1.2 Maven能解决什么问题</h3><p>可以用更通俗的方式来说明。我们知道，项目开发不仅仅是写写代码而已，期间会伴随着各种必不可少的事情要做，下面列举几个感受一下： </p>
<ol>
<li>我们需要引用各种jar包，尤其是比较大的工程，引用的jar包往往有几十个乃至上百个，每用到一种jar包，都需要手动引入工程目录，而且经常遇到各种让人抓狂的jar包冲突，版本冲突。</li>
<li>我们写好的java文件，需要通过javac编译成class文件才能交给JVM运行。这项工作可以由各种集成开发工具帮我们完成 Eclipse、IDEA 等都可以将代码即时编译。 </li>
<li>世界上没有不存在 bug 的代码，因此写完了代码，我们还要写一些单元测试，然后一个个的运行来检验代码质量。 </li>
<li>再优雅的代码也是要出来卖的。我们后面还需要把代码与各种配置文件、资源整合到一起，进行打包。如果是 web 项目，还需要将之发布到服务器 。</li>
</ol>
<p>试想，如果现在有一种工具，可以把你从上面的繁琐工作中解放出来，能帮你构建工程，管理 jar包，编译代码，还能帮你自动运行单元测试，打包，生成报表，甚至能帮你部署项目，生成 Web 站点，你会心动吗？ Maven 就可以解决上面所提到的这些问题。 </p>
<h3 id="1-3-Maven的两个核心功能"><a href="#1-3-Maven的两个核心功能" class="headerlink" title="1.3 Maven的两个核心功能"></a>1.3 Maven的两个核心功能</h3><h4 id="1-3-1-依赖管理"><a href="#1-3-1-依赖管理" class="headerlink" title="1.3.1 依赖管理"></a>1.3.1 依赖管理</h4><p>传统的 WEB 工程中，我们必须将工程所依赖的 jar 包复制到工程中，导致了工程的变得很大。 </p>
<p>maven的 WEB 工程中不直接将jar包导入到工程中，而是通过在 pom.xml 文件中添加所需jar包的坐标。项目运行时，通过读取坐标到一个专门用于“存放jar包仓库”（Maven仓库）找到相应的jar包。</p>
<p><img data-src="/img/maven%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%861.png" alt="maven依赖管理1"></p>
<p><img data-src="/img/maven%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%862.png" alt="maven依赖管理2"></p>
<h4 id="1-3-2-项目构建"><a href="#1-3-2-项目构建" class="headerlink" title="1.3.2 项目构建"></a>1.3.2 项目构建</h4><p>我们开发的项目，往往都要经历编译、测试、打包、安装，部署等一系列过程。</p>
<ul>
<li><p>什么是构建项目</p>
<ul>
<li>指的是项目从编译、测试、打包、安装，部署整个过程都交给maven进行管理，这个过程称为构建。     </li>
</ul>
</li>
<li><p>一键构建</p>
<ul>
<li>指的是整个构建过程，使用 maven 一个命令可以轻松完成整个工作。 </li>
</ul>
</li>
</ul>
<p><img data-src="/img/maven%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA.png" alt="maven项目构建"></p>
<h2 id="二、Maven安装和使用"><a href="#二、Maven安装和使用" class="headerlink" title="二、Maven安装和使用"></a>二、Maven安装和使用</h2><h3 id="2-1-Maven下载和安装"><a href="#2-1-Maven下载和安装" class="headerlink" title="2.1 Maven下载和安装"></a>2.1 Maven下载和安装</h3><p><strong>下载</strong></p>
<ul>
<li>Maven官网下载地址 ：<a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">http://maven.apache.org/download.cgi</a></li>
</ul>
<p><strong>安装</strong></p>
<ul>
<li>Maven使用java语言开发的，解压即可运行</li>
<li>注意：Maven依赖 JAVA_HOME</li>
</ul>
<p><img data-src="/img/maven%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt="maven目录结构"></p>
<p><strong>目录</strong></p>
<ul>
<li>bin：存放了 maven 的命令，比如我们前面用到的 mvn tomcat7:run</li>
<li>boot：存放了一些 maven 本身的引导程序，如类加载器等</li>
<li>conf：存放了 maven 的一些配置文件，如 setting.xml 文件</li>
<li>lib：存放了 maven 本身运行所需的一些 jar 包</li>
</ul>
<p><strong>环境变量</strong></p>
<ul>
<li>MAVEN_HOME: maven安装目录</li>
</ul>
<p><img data-src="/img/%E9%85%8D%E7%BD%AEmaven%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F1.png" alt="配置maven环境变量1"></p>
<p><img data-src="/img/%E9%85%8D%E7%BD%AEmaven%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F2.png" alt="配置maven环境变量2"></p>
<p><strong>打开cmd窗口测试</strong></p>
<ul>
<li>输入：<code>mvn -v</code>回车即可，显示maven的版本信息表示成功。</li>
</ul>
<h3 id="2-2-Maven仓库"><a href="#2-2-Maven仓库" class="headerlink" title="2.2 Maven仓库"></a>2.2 Maven仓库</h3><h4 id="2-2-1-Maven仓库的分类"><a href="#2-2-1-Maven仓库的分类" class="headerlink" title="2.2.1 Maven仓库的分类"></a>2.2.1 Maven仓库的分类</h4><p>本地仓库：</p>
<ul>
<li>项目通过jar坐标，先从本地仓库找对应jar包，如果找不到会从远程仓库（互联网）去下载 jar 包，保存在本地仓库（在程序员的电脑上），第二次就不需要从远程仓库去下载了。</li>
</ul>
<p>远程仓库：</p>
<ul>
<li>中央仓库：<ul>
<li>由专业团队（maven团队）统一维护。中央仓库的地址：<a href="https://repo1.maven.org/maven2/" target="_blank" rel="noopener">https://repo1.maven.org/maven2/</a></li>
</ul>
</li>
<li>私服：<ul>
<li>架设在公司局域网内，提供给内部的人员使用。</li>
</ul>
</li>
<li>第三方仓库：<ul>
<li>中央仓库只有一个国内使用非常慢，我们可以更换为：阿里云镜像</li>
</ul>
</li>
</ul>
<p><img data-src="/img/maven%E4%BB%93%E5%BA%93.png" alt="maven仓库"></p>
<h4 id="2-2-2-Maven本地仓库配置"><a href="#2-2-2-Maven本地仓库配置" class="headerlink" title="2.2.2 Maven本地仓库配置"></a>2.2.2 Maven本地仓库配置</h4><p>修改 maven的安装目录/conf/settings.xml 文件的标签</p>
<ul>
<li><code>&lt;localRepository&gt;本地仓库地址&lt;/localRepository&gt;</code></li>
</ul>
<p><img data-src="/img/maven%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E9%85%8D%E7%BD%AE.png" alt="maven本地仓库配置"></p>
<h4 id="2-2-3-Maven仓库国内镜像配置"><a href="#2-2-3-Maven仓库国内镜像配置" class="headerlink" title="2.2.3 Maven仓库国内镜像配置"></a>2.2.3 Maven仓库国内镜像配置</h4><p>修改 maven 根目录下的 conf 文件夹中的 setting.xml 文件，在 mirrors 节点上，添加内容如下：</p>
<blockquote>
<p>maven仓库阿里镜像</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>        </span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/img/maven%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E9%85%8D%E7%BD%AE.png" alt="maven国内镜像配置"></p>
<h3 id="2-3-Maven坐标和依赖"><a href="#2-3-Maven坐标和依赖" class="headerlink" title="2.3 Maven坐标和依赖"></a>2.3 Maven坐标和依赖</h3><p>创建Maven工程，会有一个<code>pom.xml</code>，是Maven工成的核心配置文件，可以进行依赖管理：</p>
<p><img data-src="/img/maven%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86.png" alt="maven依赖管理"></p>
<h3 id="2-4-Maven工程结构"><a href="#2-4-Maven工程结构" class="headerlink" title="2.4 Maven工程结构"></a>2.4 Maven工程结构</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>java项目</span><br><span class="line"><span class="code">	java工程（项目名）</span></span><br><span class="line"><span class="code">		--| src目录（存放项目的源代码和配置文件）</span></span><br><span class="line"><span class="code">			--| main目录（存放运行环境代码）</span></span><br><span class="line"><span class="code">				--| java目录（存放java源代码）</span></span><br><span class="line"><span class="code">				--| resources目录（存放配置文件）</span></span><br><span class="line"><span class="code">			--| test目录（存放测试环境代码）</span></span><br><span class="line"><span class="code">				--| java目录（存放java源代码）</span></span><br><span class="line"><span class="code">				--| resources目录（存放配置文件）</span></span><br><span class="line"><span class="code">		--| target目录（存放编译后的代码）</span></span><br><span class="line"><span class="code">		--| pom.xml（maven的核心配置文件，实现依赖管理）</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>web项目</span><br><span class="line"><span class="code">	web工程（项目名）</span></span><br><span class="line"><span class="code">		--| src目录（存放项目的源代码和配置文件）</span></span><br><span class="line"><span class="code">			--| main目录（存放运行环境代码）</span></span><br><span class="line"><span class="code">				--| java目录（存放java源代码）</span></span><br><span class="line"><span class="code">				--| resources目录（存放配置文件）</span></span><br><span class="line"><span class="code">				--| webapp目录（存放页面资源）</span></span><br><span class="line"><span class="code">					--| WEB-INF目录</span></span><br><span class="line"><span class="code">					--| index.jsp</span></span><br><span class="line"><span class="code">			--| test目录（存放测试环境代码）</span></span><br><span class="line"><span class="code">				--| java目录（存放java源代码）</span></span><br><span class="line"><span class="code">				--| resources目录（存放配置文件）</span></span><br><span class="line"><span class="code">		--| target目录（存放编译后的代码）</span></span><br><span class="line"><span class="code">		--| pom.xml（maven的核心配置文件，实现依赖管理）</span></span><br></pre></td></tr></table></figure>



<h2 id="三、Maven的生命周期和插件"><a href="#三、Maven的生命周期和插件" class="headerlink" title="三、Maven的生命周期和插件"></a>三、Maven的生命周期和插件</h2><h3 id="3-1-Maven常用命令和插件"><a href="#3-1-Maven常用命令和插件" class="headerlink" title="3.1 Maven常用命令和插件"></a>3.1 Maven常用命令和插件</h3><p>我们可以在 cmd 中通过一系列的 maven 命令，来对我们的工程进行编译、测试、打包、安装、部署。 </p>
<ul>
<li><code>clean</code>：<strong>maven工程的清理命令，执行clean会删除target目录及内容。</strong></li>
<li><code>compile</code>：<strong>maven工程的编译命令，作用是将 src/main/java 下的文件编译为class文件输出到target目录下。</strong></li>
<li><code>test</code>：<strong>maven工程的测试命令，作用是执行 src/test/java 下单元测试类，并编译为class文件。</strong></li>
<li><code>package</code>：<strong>maven工程的打包命令，对于java工程执行package打成jar包，对于web工程打成war包。</strong> </li>
<li><code>install</code>：<strong>maven工程的安装命令，执行install将mave工程打成jar包或war包，并发布到本地仓库。</strong> </li>
<li><code>deploy</code>：<strong>maven工程部署命令，将jar或war包部署到私服中。</strong></li>
</ul>
<h3 id="3-2-生命周期"><a href="#3-2-生命周期" class="headerlink" title="3.2 生命周期"></a>3.2 生命周期</h3><p>maven 对项目构建过程分为<strong>“三套相互独立的”</strong>生命周期，这三套生命周期分别是：</p>
<ul>
<li>Clean Lifecycle(清理生命周期)<ul>
<li>在进行真正的构建之前进行一些清理工作。</li>
<li>命令:clean</li>
</ul>
</li>
<li>Default Lifecycle(默认生命周期)<ul>
<li>构建的核心部分，编译，测试，打包，部署等等。</li>
<li>命令: compile  test  package  install  deploy</li>
</ul>
</li>
<li>Site Lifecycle(站点生命周期)<ul>
<li>生成项目报告，站点，发布站点。 </li>
<li>命令: site</li>
</ul>
</li>
</ul>
<blockquote>
<p>小贴士：</p>
<ul>
<li>在同一个生命周期中的命令,执行后面的命令,前面的命令自动执行</li>
</ul>
</blockquote>
<h3 id="3-3-Maven概念模型"><a href="#3-3-Maven概念模型" class="headerlink" title="3.3 Maven概念模型"></a>3.3 Maven概念模型</h3><p><img data-src="/img/maven%E6%A6%82%E5%BF%B5%E6%A8%A1%E5%9E%8B.png" alt="maven概念模型"></p>
<h3 id="3-4-扩展：依赖管理"><a href="#3-4-扩展：依赖管理" class="headerlink" title="3.4 扩展：依赖管理"></a>3.4 扩展：依赖管理</h3><p>在导入依赖的时候，我们也可以指定依赖的作用范围：</p>
<table>
<thead>
<tr>
<th>依赖范围</th>
<th>编译期有效</th>
<th>测试期有效</th>
<th>运行期有效</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>compile（默认）</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>mybatis</td>
</tr>
<tr>
<td>test</td>
<td>-</td>
<td>Y</td>
<td>-</td>
<td>junit</td>
</tr>
<tr>
<td>provided</td>
<td>Y</td>
<td>Y</td>
<td>-</td>
<td>servlet-api</td>
</tr>
<tr>
<td>runtime</td>
<td>-</td>
<td>Y</td>
<td>Y</td>
<td>JDBC驱动</td>
</tr>
<tr>
<td>system</td>
<td>Y</td>
<td>Y</td>
<td>-</td>
<td>本地，maven仓库之外的库</td>
</tr>
</tbody></table>
<p>解释：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>compile</span><br><span class="line"><span class="code">		默认依赖范围，作用域在编译、测试、运行时都有效。</span></span><br><span class="line"><span class="code">		</span></span><br><span class="line"><span class="bullet">* </span>test</span><br><span class="line"><span class="code">		作用域在测试时有效。编译和运行时不需要，比如：Junit。</span></span><br><span class="line"><span class="code">		</span></span><br><span class="line"><span class="bullet">* </span>provided</span><br><span class="line"><span class="code">		作用域在编译、测试时有效。运行时不需要，比如： servlet api 被 tomcat 容器提供。 </span></span><br><span class="line"><span class="code">		</span></span><br><span class="line"><span class="bullet">* </span>runtime</span><br><span class="line"><span class="code">		作用域在测试、运行时有效。编译时不需要，比如：jdbc的驱动包。 </span></span><br><span class="line"><span class="code">		</span></span><br><span class="line"><span class="bullet">* </span>system</span><br><span class="line"><span class="code">		system范围依赖与provided类似，jar包在本地磁盘而不是maven仓库</span></span><br></pre></td></tr></table></figure>



<p>示例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--依赖管理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--作用范围--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--作用范围--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--作用范围--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>maven介绍</tag>
        <tag>依赖管理</tag>
        <tag>相关配置</tag>
        <tag>maven仓库</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis入门</title>
    <url>/2020/09/15/Redis%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="一、NoSQL"><a href="#一、NoSQL" class="headerlink" title="一、NoSQL"></a>一、NoSQL</h2><h3 id="1-1-NoSQL介绍"><a href="#1-1-NoSQL介绍" class="headerlink" title="1.1 NoSQL介绍"></a>1.1 NoSQL介绍</h3><p>NoSQL，泛指非关系型的数据库，NoSQL即Not-Only SQL，它可以作为关系型数据库的良好补充。</p>
<p><img data-src="/img/NoSQL%E4%BB%8B%E7%BB%8D.png" alt="NoSQL介绍"></p>
<a id="more"></a>

<p><strong>为什么学习NoSQL？</strong></p>
<blockquote>
<p>互联网产品的特点：高并发、高可用、高性能、海量数据</p>
</blockquote>
<p><img data-src="/img/NoSQL%E7%9A%84%E5%BA%94%E7%94%A8.png" alt="NoSQL的应用"></p>
<blockquote>
<p>关系型数据库与NoSQL数据库并非对立而是互补的关系，即通常情况下使用关系型数据库，在适合<br>使用NoSQL的时候使用NoSQL数据库，NoSQL数据库对关系型数据库的不足进行弥补。  </p>
</blockquote>
<h3 id="2-2-NoSQL的主流产品"><a href="#2-2-NoSQL的主流产品" class="headerlink" title="2.2 NoSQL的主流产品"></a>2.2 NoSQL的主流产品</h3><table>
<thead>
<tr>
<th>分类</th>
<th>特点</th>
<th>代表产品</th>
</tr>
</thead>
<tbody><tr>
<td>键值存储</td>
<td>数据一般存在内存中，读写速度快(10w/s)，适合作为缓存服务</td>
<td>redis</td>
</tr>
<tr>
<td>文档型数据库</td>
<td>数据结构要求不严格，适合存储结构不确定或者价值较低的数据</td>
<td>mongdb</td>
</tr>
<tr>
<td>列存储数据库</td>
<td>查找速度快，更容易进行分布式扩展，适合作为文件存储服务</td>
<td>Hbase</td>
</tr>
<tr>
<td>图形数据库</td>
<td>使用“图结构”进行存储，适合做社交网络计算等等</td>
<td>Neo4j</td>
</tr>
</tbody></table>
<p><strong>图形数据库介绍</strong></p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">https://blog.csdn.net/xlgen157387/article/details/79085901</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>关系数据库，只需要学习一套SQL规范，就可以操作几乎所有关系数据库</p>
<p>非关系型数据库，每一种产品都是独立的，比如进行学会了redis、mongodb</p>
</blockquote>
<h2 id="二、Redis"><a href="#二、Redis" class="headerlink" title="二、Redis"></a>二、Redis</h2><h3 id="2-1-Redis介绍"><a href="#2-1-Redis介绍" class="headerlink" title="2.1 Redis介绍"></a>2.1 Redis介绍</h3><p>Redis（Remote Dictionary Server）是用C语言开发的一个开源的高性能键值对数据库。它的所有数据都是保存在<span style="color:red">内存中</span>的,这也就决定了其读写速度之快,是其它硬盘保存数据的系统所无法匹敌的。</p>
<p>官方曾经给出过一组测试数据，50个并发执行100000个请求: 读的速度是110000次/s,写的速度是81000次/s。</p>
<h3 id="2-2-Redis服务器安装和使用"><a href="#2-2-Redis服务器安装和使用" class="headerlink" title="2.2 Redis服务器安装和使用"></a>2.2 Redis服务器安装和使用</h3><p><strong>下载</strong></p>
<ul>
<li>Reids官网地址：<a href="http://redis.io" target="_blank" rel="noopener">http://redis.io</a></li>
<li>中文网地址：<a href="https://www.redis.net.cn/" target="_blank" rel="noopener">https://www.redis.net.cn/</a></li>
<li>GitHub地址：<a href="https://github.com/MSOpenTech/redis/tags" target="_blank" rel="noopener">https://github.com/MSOpenTech/redis/tags</a></li>
</ul>
<p><strong>安装</strong></p>
<ul>
<li>windows绿色版，解压即用</li>
</ul>
<p><strong>目录</strong></p>
<p><img data-src="/img/redis%E7%9B%AE%E5%BD%95.png" alt="redis目录"></p>
<table>
<thead>
<tr>
<th>目录或文件</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>redis-benchmark</td>
<td>性能测试工具</td>
</tr>
<tr>
<td>redis-check-aof</td>
<td>AOF文件修复工具</td>
</tr>
<tr>
<td>redis-check-dump</td>
<td>RDB文件检查工具（快照持久化文件）</td>
</tr>
<tr>
<td>redis-cli</td>
<td>命令行客户端</td>
</tr>
<tr>
<td>redis-server</td>
<td>启动redis服务器</td>
</tr>
<tr>
<td>redis.windows.conf</td>
<td>redis核心配置文件</td>
</tr>
</tbody></table>
<p> <strong>启动</strong></p>
<blockquote>
<p>windows平台使用</p>
</blockquote>
<p><img data-src="/img/redis%E5%90%AF%E5%8A%A8.png" alt="redis启动"></p>
<blockquote>
<p>linux平台使用</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>在当前解压后的目录下  cmd进入dos窗口</span><br><span class="line"><span class="code">		先启动 redis-server.exe redis.windows.conf</span></span><br><span class="line"><span class="code">		再启动 redis-cli.exe</span></span><br></pre></td></tr></table></figure>



<h3 id="2-3-Redis数据结构"><a href="#2-3-Redis数据结构" class="headerlink" title="2.3 Redis数据结构"></a>2.3 Redis数据结构</h3><p>Redis采用的是键值对存储，键的类型只能为字符串，值支持五种数据类型：</p>
<blockquote>
<ul>
<li>字符串：String</li>
<li>哈希：HashMap</li>
<li>双向链表：LinkedList</li>
<li>无序集合：HashSet</li>
<li>有序集合：LinkedHashSet</li>
</ul>
</blockquote>
<p><img data-src="/img/redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png" alt="redis数据结构"></p>
<h3 id="2-4-Redis命令操作"><a href="#2-4-Redis命令操作" class="headerlink" title="2.4 Redis命令操作"></a>2.4 Redis命令操作</h3><p>Redis命令是用来操作Redis数据库的, 就相当于操作MySql数据库时的SQL语句。</p>
<p>Redis的命令根据要操作的值的数据结构的不同而不同, 每种数据类型都有自己的操作命令</p>
<h4 id="2-4-1-String字符串"><a href="#2-4-1-String字符串" class="headerlink" title="2.4.1 String字符串"></a>2.4.1 String字符串</h4><p>字符串类型是Redis中最为基础的数据存储类型。</p>
<p>在Redis中字符串类型的Value最多可以容纳的数据长度是512m。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>新增（更新）</span><br><span class="line"><span class="code">		set key "value" </span></span><br><span class="line"><span class="code">		注意：value值内容有空格，外面需要加引号</span></span><br><span class="line"><span class="bullet">* </span>查询</span><br><span class="line"><span class="code">		get key</span></span><br><span class="line"><span class="bullet">* </span>删除</span><br><span class="line"><span class="code">		del key</span></span><br><span class="line"><span class="bullet">* </span>新增并指定存活时间</span><br><span class="line"><span class="code">		setex key seconds value</span></span><br><span class="line"><span class="code">		ttl key  查看存活时间</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>根据键判断记录是否存在</span><br><span class="line"><span class="code">		exists key</span></span><br><span class="line"><span class="code">		</span></span><br><span class="line"><span class="bullet">* </span>主键自增（类似于MySQL中的，auto_increment）</span><br><span class="line"><span class="code">		set id 1</span></span><br><span class="line"><span class="code">		incr id</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/img/redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8Bstring1.png" alt="redis数据结构之string1"></p>
<p><img data-src="/img/redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8Bstring2.png" alt="redis数据结构之string2"></p>
<p><img data-src="/img/redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8Bstring3.png" alt="redis数据结构之string3"></p>
<h4 id="2-4-2-Hash哈希"><a href="#2-4-2-Hash哈希" class="headerlink" title="2.4.2 Hash哈希"></a>2.4.2 Hash哈希</h4><p>Hash类型极其类似于java中的Map,值里面可以存放一组组的键值对</p>
<p>该类型非常适合于存储java中对象的信息</p>
<p><img data-src="/img/redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8Bhash1.png" alt="redis数据结构之hash1"></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>新增（更新）</span><br><span class="line"><span class="code">		hset key hkey hvalue</span></span><br><span class="line"><span class="bullet">* </span>查询</span><br><span class="line"><span class="code">		hget key hkey 查询具体元素</span></span><br><span class="line"><span class="code">		hgetall key   查询所有元素</span></span><br><span class="line"><span class="bullet">* </span>删除</span><br><span class="line"><span class="code">		hdel key hkey 删除指定元素</span></span><br><span class="line"><span class="code">		del  key      删除整个hash</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/img/redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8Bhash2.png" alt="redis数据结构之hash2"></p>
<h4 id="2-4-3-List列表"><a href="#2-4-3-List列表" class="headerlink" title="2.4.3 List列表"></a>2.4.3 List列表</h4><p>List类型底层是一个双向字符串链表。里面的元素是有序的，可重复的</p>
<p>我们可以从链表的任何一端进行元素的增删</p>
<p><img data-src="/img/redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8Blist1.png" alt="redis数据结构之list1"></p>
<p><img data-src="/img/redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8Blist2.png" alt="redis数据结构之list2"></p>
<h4 id="2-4-4-Set集合-无序"><a href="#2-4-4-Set集合-无序" class="headerlink" title="2.4.4 Set集合(无序)"></a>2.4.4 Set集合(无序)</h4><p>Set类型底层是一张hash表。里面的元素是无序的，不可重复的</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>新增</span><br><span class="line"><span class="code">		sadd key value</span></span><br><span class="line"><span class="bullet">* </span>查询</span><br><span class="line"><span class="code">		smembers key</span></span><br><span class="line"><span class="bullet">* </span>删除</span><br><span class="line"><span class="code">		srem key value</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/img/redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8Bset1.png" alt="redis数据结构之set1"></p>
<h4 id="2-4-5-ZSet集合-有序"><a href="#2-4-5-ZSet集合-有序" class="headerlink" title="2.4.5 ZSet集合(有序)"></a>2.4.5 ZSet集合(有序)</h4><p>Zset,也称sortedSet, 在Set的基础上，加入了有序功能，在添加元素的时候，允许指定一个分数，它会按照这个分数排序</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>新增</span><br><span class="line"><span class="code">		zadd key 分值 value</span></span><br><span class="line"><span class="bullet">* </span>查询</span><br><span class="line"><span class="code">		zrange key start end [withscores] 升序</span></span><br><span class="line"><span class="code">		zrevrange key start end [withscores] 降序</span></span><br><span class="line"><span class="bullet">* </span>删除</span><br><span class="line"><span class="code">		zrem key value</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/img/redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8Bzset1.png" alt="redis数据结构之zset1"></p>
<h4 id="2-4-6-通用命令"><a href="#2-4-6-通用命令" class="headerlink" title="2.4.6 通用命令"></a>2.4.6 通用命令</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>模糊查询键</span><br><span class="line"><span class="code">		keys *</span></span><br><span class="line"><span class="code">		</span></span><br><span class="line"><span class="bullet">* </span>删除多个键</span><br><span class="line"><span class="code">		del key [key] [key]</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>根据键判断值类型 </span><br><span class="line"><span class="code">		type key</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>选择数据库</span><br><span class="line"><span class="code">		select 库名[0~15]</span></span><br><span class="line"><span class="code">		</span></span><br><span class="line"><span class="bullet">* </span>清空当前数据库</span><br><span class="line"><span class="code">		flushdb</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>清空所有数据库</span><br><span class="line"><span class="code">		flushall</span></span><br></pre></td></tr></table></figure>



<h3 id="2-5-Redis持久化"><a href="#2-5-Redis持久化" class="headerlink" title="2.5 Redis持久化"></a>2.5 Redis持久化</h3><p>Redis的数据都是存在在内存之中的，那么这样一旦出现宕机，势必会导致数据的丢失，这就需要持久化操作，也就是要将redis在内存中的数据写到硬盘上保存。</p>
<p>注意：redis虽然有持久化操作，但是其全部数据依旧都在内存中存在,也就是说硬盘上的只是为了安全和<span style="color:red">备份</span>。</p>
<blockquote>
<p>Redis提供了两种数据持久化的方式，分别是RDB和AOF。</p>
</blockquote>
<p><strong>RDB：默认开启，不需要配置</strong></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>手动持久化【了解】</span><br><span class="line"><span class="code">		bgsave</span></span><br><span class="line"><span class="code">		</span></span><br><span class="line"><span class="bullet">* </span>自动持久化</span><br><span class="line"><span class="code">	在redis运行期间，根据指定时间规则，将内存的数据集进行快照拍摄，持久化到硬盘 【dump.rdb】</span></span><br><span class="line"><span class="code">	在redis.windows.conf配置文件中，可以查看（修改）时间规则</span></span><br><span class="line"><span class="code">        save 900 1</span></span><br><span class="line"><span class="code">        save 300 10</span></span><br><span class="line"><span class="code">        save 60 10000</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/img/redisRDB%E9%85%8D%E7%BD%AE.png" alt="redisRDB配置"></p>
<p><strong>AOF：默认关闭，需手动开启</strong></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>在redis运行期间，以日志记录方式监控写操作，持久化到硬盘【appendonly.aof】</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>在redis.windows.conf配置文件中开启</span><br><span class="line"><span class="code">		appendonly no --&gt; appendonly yes</span></span><br><span class="line"><span class="code">		</span></span><br><span class="line"><span class="bullet">* </span>三种日志监控规则</span><br><span class="line"><span class="code">	# appendfsync always 每次（写操作）修改时，进行持久化</span></span><br><span class="line"><span class="code">    appendfsync everysec 每秒，持久化一次</span></span><br><span class="line"><span class="code">    # appendfsync no     在CPU空闲期，进行持久化</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>RDB和AOF二种持久化机制可以同时存在</p>
</blockquote>
<p><strong>在开发中使用哪种机制进行持久化？</strong></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>RDB：应用在缓存服务器场景</span><br><span class="line"><span class="code">	优点：性能高，降低磁盘IO</span></span><br><span class="line"><span class="code">	缺点：redis容灾后，容易丢失数据</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="bullet">* </span>AOF：应用在数据库服务器场景</span><br><span class="line"><span class="code">	优点：不容易丢失数据（日志）</span></span><br><span class="line"><span class="code">	缺点：速度稍慢（能够秒杀mysql等产品的...）</span></span><br></pre></td></tr></table></figure>



<h2 id="三、Jedis"><a href="#三、Jedis" class="headerlink" title="三、Jedis"></a>三、Jedis</h2><p>Redis作为一款优秀的缓存服务器存在，大多数语言都提供了连接Redis的驱动包，在java中，比较出名的是Jedis和Redisson，我们今天以Jedis为例学习，看看如何是用程序操作redis。</p>
<h3 id="3-1-Jedis使用"><a href="#3-1-Jedis使用" class="headerlink" title="3.1 Jedis使用"></a>3.1 Jedis使用</h3><p><strong>常用API</strong></p>
<table>
<thead>
<tr>
<th>方法</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>new Jedis(host, port)</td>
<td>创建jedis对象，参数host是redis服务器地址，参数port是redis服务端口</td>
</tr>
<tr>
<td>set(key,value)</td>
<td>设置字符串类型的数据</td>
</tr>
<tr>
<td>get(key)</td>
<td>获得字符串类型的数据</td>
</tr>
<tr>
<td>hset(key,field,value)</td>
<td>设置哈希类型的数据</td>
</tr>
<tr>
<td>hget(key,field)</td>
<td>获得哈希类型的数据</td>
</tr>
<tr>
<td>lpush(key,values)</td>
<td>设置列表类型的数据</td>
</tr>
<tr>
<td>lpop(key)</td>
<td>列表左面弹栈</td>
</tr>
<tr>
<td>rpop(key)</td>
<td>列表右面弹栈</td>
</tr>
<tr>
<td>del(key)</td>
<td>删除指定的key</td>
</tr>
</tbody></table>
<h4 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h4><h5 id="Ⅰ-导入坐标"><a href="#Ⅰ-导入坐标" class="headerlink" title="Ⅰ 导入坐标"></a>Ⅰ 导入坐标</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>maven官方提供坐标搜索仓库：<a href="https://mvnrepository.com/" target="_blank" rel="noopener">https://mvnrepository.com/</a></p>
</blockquote>
<h5 id="Ⅱ-编写代码"><a href="#Ⅱ-编写代码" class="headerlink" title="Ⅱ 编写代码"></a>Ⅱ 编写代码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建jedis连接对象</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"127.0.0.1"</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="comment">// 2.调用set方法</span></span><br><span class="line">        jedis.set(<span class="string">"mystr"</span>, <span class="string">"传智播客"</span>);</span><br><span class="line">        <span class="comment">// 3.释放资源</span></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建jedis连接对象</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis();</span><br><span class="line">        <span class="comment">// 2.调用get方法</span></span><br><span class="line">        System.out.println(jedis.get(<span class="string">"mystr"</span>));</span><br><span class="line">        <span class="comment">// 3.释放资源</span></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-2-Jedis连接池"><a href="#4-2-Jedis连接池" class="headerlink" title="4.2 Jedis连接池"></a>4.2 Jedis连接池</h3><p>jedis连接资源的创建与销毁是非常消耗性能的，所以我们不希望频繁的创建和销毁它.基于这样的需求,就有了jedisPool技术。</p>
<h4 id="快速入门-1"><a href="#快速入门-1" class="headerlink" title="快速入门"></a>快速入门</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisPoolTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建连接池对象</span></span><br><span class="line">        JedisPool jedisPool = <span class="keyword">new</span> JedisPool(<span class="string">"127.0.0.1"</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="comment">// 2.从池中获取连接</span></span><br><span class="line">        Jedis jedis = jedisPool.getResource();</span><br><span class="line">        <span class="comment">// 3.操作api实现CRUD</span></span><br><span class="line">        jedis.setex(<span class="string">"sms_code"</span>, <span class="number">300</span>, <span class="string">"996571"</span>);</span><br><span class="line">        <span class="comment">// 4.归还到连接池</span></span><br><span class="line">        jedis.close(); <span class="comment">// 底层使用了动态代理，进行增强</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 指定连接池配置参数</span></span><br><span class="line">        JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">        config.setMaxTotal(<span class="number">50</span>); <span class="comment">// 最大连接数</span></span><br><span class="line">        config.setMinIdle(<span class="number">10</span>); <span class="comment">// 空闲期，保留连接数</span></span><br><span class="line">        config.setMaxWaitMillis(<span class="number">3000</span>);<span class="comment">// 等待时间</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.创建连接池对象</span></span><br><span class="line">        JedisPool jedisPool = <span class="keyword">new</span> JedisPool(config, <span class="string">"127.0.0.1"</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="comment">// 2.从池中获取连接</span></span><br><span class="line">        Jedis jedis = jedisPool.getResource();</span><br><span class="line">        <span class="comment">// 3.操作api实现CRUD</span></span><br><span class="line">        System.out.println(jedis.get(<span class="string">"sms_code"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.归还到连接池</span></span><br><span class="line">        jedis.close(); <span class="comment">// 底层使用了动态代理，进行增强</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="连接池工具类"><a href="#连接池工具类" class="headerlink" title="连接池工具类"></a>连接池工具类</h4><blockquote>
<p>JedisUtils</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JedisPool jedisPool;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String host;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Integer port;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Integer maxTotal;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Integer maxIdle;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化连接池</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ResourceBundle jedis = ResourceBundle.getBundle(<span class="string">"jedis"</span>);</span><br><span class="line">            <span class="comment">// 读取配置文件给变量赋值</span></span><br><span class="line">            <span class="comment">// 获取类加载读取 jedis.properties 获取io流</span></span><br><span class="line">            InputStream is = JedisUtils.class.getClassLoader().getResourceAsStream("jedis.properties");</span><br><span class="line">            <span class="comment">// 创建properties对象 加载io流</span></span><br><span class="line">            Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            properties.load(is);</span><br><span class="line">            <span class="comment">// 给变量赋值</span></span><br><span class="line">            host = properties.getProperty(<span class="string">"jedis.host"</span>);</span><br><span class="line">            port = Integer.parseInt(properties.getProperty(<span class="string">"jedis.port"</span>));</span><br><span class="line">            maxTotal = Integer.parseInt(properties.getProperty(<span class="string">"jedis.maxTotal"</span>));</span><br><span class="line">            maxIdle = Integer.parseInt(properties.getProperty(<span class="string">"jedis.maxIdle"</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建连接池配置对象</span></span><br><span class="line">            JedisPoolConfig jedisPoolConfig = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">            jedisPoolConfig.setMaxTotal(maxTotal);</span><br><span class="line">            jedisPoolConfig.setMaxIdle(maxIdle);</span><br><span class="line">            <span class="comment">// 创建连接池对象</span></span><br><span class="line">            jedisPool = <span class="keyword">new</span> JedisPool(jedisPoolConfig, host, port);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供获取jedis连接的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title">getJedis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jedisPool.getResource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>jedis.properties</p>
</blockquote>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jedis.host</span>=<span class="string">localhost</span></span><br><span class="line"><span class="meta">jedis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="meta">jedis.maxTotal</span>=<span class="string">50</span></span><br><span class="line"><span class="meta">jedis.maxIdle</span>=<span class="string">10</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>非关系型数据库</category>
        <category>NoSQL</category>
      </categories>
      <tags>
        <tag>redis</tag>
        <tag>jedis</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux&amp;Nginx</title>
    <url>/2020/09/19/Linux-Nginx/</url>
    <content><![CDATA[<h1 id="Linux简介"><a href="#Linux简介" class="headerlink" title="Linux简介"></a>Linux简介</h1><h2 id="学习目的"><a href="#学习目的" class="headerlink" title="学习目的"></a>学习目的</h2><blockquote>
<p>window的问题</p>
</blockquote>
<ol>
<li>个人用户正版windows需要收费</li>
<li>系统长时间运行不稳定，变慢，容易死机</li>
<li>windows常招到病毒攻击</li>
</ol>
<blockquote>
<p>Linux的优点</p>
</blockquote>
<ol>
<li>个人用户正版Linux不需要收费</li>
<li>系统长时间运行稳定，不会变慢，不容易死机</li>
<li>Linux不常招到病毒攻击，也很难攻击</li>
</ol>
<blockquote>
<p>总之，做为一个后端JavaEE程序员，在windows中开发完程序后，得部署到一个相对比较安全稳定的服务器中运行，Linux就是最佳的选择。</p>
<p>学习Linux, 我们得学会：安装Linux操作系统，对目录，文件，权限等基本操作命令。</p>
</blockquote>
<a id="more"></a>

<h2 id="unix简介"><a href="#unix简介" class="headerlink" title="unix简介"></a>unix简介</h2><p>Unix是一个强大的多用户、多任务操作系统。于1969年在AT&amp;T的贝尔实验室开发（肯.汤普森）。B </p>
<p>UNIX的商标权由国际开放标准组织（TheOpen Group）所拥有。C</p>
<p>UNIX操作系统是商业版，需要收费，价格比Microsoft Windows正版要贵一些。</p>
<h2 id="linux简介"><a href="#linux简介" class="headerlink" title="linux简介"></a>linux简介</h2><p>Linux是一款开源免费的多用户操作系统，相对于windows而言，其运行的稳定性和安全性都有着绝对的优势，因此它几乎成为程序代码运行的最佳系统环境。</p>
<p>Linux的核心代码一直由Linus Torvalds（林纳斯· 托瓦兹）开发维护，作者将源代码开源之后放到了社区，众多的linux爱好者加入了开发队伍，因为也就衍生了众多的linux版本。</p>
<p><img data-src="/assets/image-20200816115846200.png" alt="image-20200816115846200">  </p>
<h2 id="linux的版本"><a href="#linux的版本" class="headerlink" title="linux的版本"></a>linux的版本</h2><p>由于linux的开源精神，使得其版本众多，发展到今天，主要有三大分支：</p>
<ul>
<li>Redhat : 应用最为广泛的服务器版本，包含：==redhat(商业)、centos(开源)==、Fedora</li>
<li>debian: 有着媲美windows的桌面环境(个人机)，包含：==Ubuntu==、Linux Mint</li>
<li>suse: 主要用于商业桌面、服务器，包含：SLES、OpenSUSE</li>
</ul>
<p><img data-src="/assets/image-20200816115901933.png" alt="image-20200816115901933">  </p>
<h1 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h1><h2 id="Vmware软件安装"><a href="#Vmware软件安装" class="headerlink" title="Vmware软件安装"></a>Vmware软件安装</h2><p>虚拟机是一个软件，它可以使你在一台真实PC机器上同时运行多个操作系统。</p>
<p>每个模拟出来的操作系统都是一个和真实操作系统一样的环境。</p>
<h3 id="双击软件-开启安装向导"><a href="#双击软件-开启安装向导" class="headerlink" title="双击软件,开启安装向导"></a>双击软件,开启安装向导</h3><p><img data-src="/assets/wps9.jpg" alt="img-wps9">     </p>
<h3 id="同意许可协议"><a href="#同意许可协议" class="headerlink" title="同意许可协议"></a>同意许可协议</h3><p><img data-src="/assets/wps10.jpg" alt="img-wps10"> </p>
<h3 id="选择安装位置"><a href="#选择安装位置" class="headerlink" title="选择安装位置"></a>选择安装位置</h3><p><img data-src="/assets/wps11.jpg" alt="img-wps11"> </p>
<h3 id="修改用户体验"><a href="#修改用户体验" class="headerlink" title="修改用户体验"></a>修改用户体验</h3><p><img data-src="/assets/wps12.jpg" alt="img-wps12"> </p>
<h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><p><img data-src="/assets/wps13.jpg" alt="img-wps13"> </p>
<h3 id="输入许可证"><a href="#输入许可证" class="headerlink" title="输入许可证"></a>输入许可证</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">FC7D0-D1YDL-M8DXZ-CYPZE-P2AY6</span><br></pre></td></tr></table></figure>

<h3 id="大坑"><a href="#大坑" class="headerlink" title="大坑"></a>大坑</h3><p>安装完毕之后, 一定检查下 是否存在下面两块网卡,  如果没有  暂停</p>
<p><img data-src="/assets/image-20200919090447112.png" alt="image-20200919090447112"></p>
<h2 id="Linux操作系统安装"><a href="#Linux操作系统安装" class="headerlink" title="Linux操作系统安装"></a>Linux操作系统安装</h2><p>我们今天要安装的是linux的centos 7版本，这也是目前应用最广的服务器版本</p>
<h3 id="虚拟机新建"><a href="#虚拟机新建" class="headerlink" title="虚拟机新建"></a>虚拟机新建</h3><p><img data-src="/assets/wps14.jpg" alt="img-wps14"> </p>
<h3 id="选择安装方式"><a href="#选择安装方式" class="headerlink" title="选择安装方式"></a>选择安装方式</h3><p><img data-src="/assets/wps15.jpg" alt="img-wps15"> </p>
<h3 id="选择虚拟机类型和版本"><a href="#选择虚拟机类型和版本" class="headerlink" title="选择虚拟机类型和版本"></a>选择虚拟机类型和版本</h3><p><img data-src="/assets/wps16.jpg" alt="img-wps16"> </p>
<h3 id="选择虚拟机名称和位置"><a href="#选择虚拟机名称和位置" class="headerlink" title="选择虚拟机名称和位置"></a>选择虚拟机名称和位置</h3><p><img data-src="/assets/wps17.jpg" alt="img-wps17"> </p>
<h3 id="选择镜像"><a href="#选择镜像" class="headerlink" title="选择镜像"></a>选择镜像</h3><p><img data-src="/assets/wps18.jpg" alt="img-wps18"> </p>
<h3 id="开启虚拟机"><a href="#开启虚拟机" class="headerlink" title="开启虚拟机"></a>开启虚拟机</h3><p><img data-src="/assets/wps19.jpg" alt="img-wps19"> </p>
<h3 id="选择语言"><a href="#选择语言" class="headerlink" title="选择语言"></a>选择语言</h3><p><img data-src="/assets/wps20.jpg" alt="img-wps20"> </p>
<h3 id="软件选择"><a href="#软件选择" class="headerlink" title="软件选择"></a>软件选择</h3><p>点击软件-&gt;软件选择-&gt;基础设施服务器</p>
<p><img data-src="/assets/wps21.jpg" alt="img-wps21"> </p>
<h3 id="安装位置"><a href="#安装位置" class="headerlink" title="安装位置"></a>安装位置</h3><p><img data-src="/assets/wps22.jpg" alt="img-wps22"> </p>
<h3 id="网络连接"><a href="#网络连接" class="headerlink" title="网络连接"></a>网络连接</h3><p><img data-src="/assets/wps23.jpg" alt="img-wps23"> </p>
<p><img data-src="/assets/wps24.jpg" alt="img-wps24"> </p>
<h3 id="开始安装-1"><a href="#开始安装-1" class="headerlink" title="开始安装"></a>开始安装</h3><p><img data-src="/assets/wps25.jpg" alt="img-wps25"> </p>
<h3 id="设置root密码"><a href="#设置root密码" class="headerlink" title="设置root密码"></a>设置root密码</h3><p><img data-src="/assets/wps26.jpg" alt="img-wps26"> </p>
<p><img data-src="/assets/wps27.jpg" alt="img-wps27"> </p>
<h3 id="安装中……-此处省去10分钟"><a href="#安装中……-此处省去10分钟" class="headerlink" title="安装中…….此处省去10分钟"></a>安装中…….此处省去10分钟</h3><h3 id="安装完毕-重启系统"><a href="#安装完毕-重启系统" class="headerlink" title="安装完毕,重启系统"></a>安装完毕,重启系统</h3><p><img data-src="/assets/wps28.jpg" alt="img-wps28"> </p>
<h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p><img data-src="/assets/wps29.jpg" alt="img-wps29"> </p>
<h2 id="Vmware神操作"><a href="#Vmware神操作" class="headerlink" title="Vmware神操作"></a>Vmware神操作</h2><h3 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h3><h4 id="选择克隆"><a href="#选择克隆" class="headerlink" title="选择克隆"></a>选择克隆</h4><p><img data-src="/assets/wps30.jpg" alt="img-wps30"> </p>
<h4 id="完整克隆"><a href="#完整克隆" class="headerlink" title="完整克隆"></a>完整克隆</h4><p><img data-src="/assets/wps31.jpg" alt="img-wps31"> </p>
<h4 id="修改克隆的名称"><a href="#修改克隆的名称" class="headerlink" title="修改克隆的名称"></a>修改克隆的名称</h4><p><img data-src="/assets/wps32.jpg" alt="img-wps32"> </p>
<h3 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h3><h4 id="拍摄快照"><a href="#拍摄快照" class="headerlink" title="拍摄快照"></a>拍摄快照</h4><p><img data-src="/assets/wps33.jpg" alt="img-wps33"> </p>
<h4 id="恢复快照"><a href="#恢复快照" class="headerlink" title="恢复快照"></a>恢复快照</h4><p><img data-src="/assets/wps34.jpg" alt="img-wps34"> </p>
<h2 id="远程连接工具安装"><a href="#远程连接工具安装" class="headerlink" title="远程连接工具安装"></a>远程连接工具安装</h2><p>用于连接linux的工具有很多，比较有名的有xshell、putty、SecureCRSecureFXPortable、MobaXterm</p>
<h3 id="解压软件"><a href="#解压软件" class="headerlink" title="解压软件"></a>解压软件</h3><p><img data-src="/assets/image-20200916150616297.png" alt="image-20200916150616297"> </p>
<h3 id="启动软件"><a href="#启动软件" class="headerlink" title="启动软件"></a>启动软件</h3><p><img data-src="/assets/image-20200916150649483.png" alt="image-20200916150649483"> </p>
<h3 id="查看服务器IP地址"><a href="#查看服务器IP地址" class="headerlink" title="查看服务器IP地址"></a>查看服务器IP地址</h3><p>在虚拟机的操作系统上打开终端，使用<code>ifconfig</code>查看ip地址</p>
<p><img data-src="/assets/image-20200916151127486.png" alt="image-20200916151127486">  </p>
<h3 id="新建连接"><a href="#新建连接" class="headerlink" title="新建连接"></a>新建连接</h3><p><img data-src="/assets/image-20200916152042625.png" alt="image-20200916152042625">   </p>
<h1 id="linux的目录结构"><a href="#linux的目录结构" class="headerlink" title="linux的目录结构"></a>linux的目录结构</h1><p>linux的文件系统采用的是树状目录结构，在此结构中的最上层是根目录“/”，然后在根目录下再创建其他的目录。下面来看下几个主要的目录。</p>
<p><img data-src="/assets/image-20200816121306020.png" alt="image-20200816121306020"> </p>
<h1 id="目录处理命令"><a href="#目录处理命令" class="headerlink" title="目录处理命令"></a>目录处理命令</h1><h2 id="ls-查看目录"><a href="#ls-查看目录" class="headerlink" title="ls 查看目录"></a>ls 查看目录</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">语法:  ls  [参数]  目录</span><br><span class="line">参数:</span><br><span class="line"><span class="code">	-l   以详细形式查询当前目录下的文件(不包含隐藏文件) </span></span><br><span class="line"><span class="code">	-a   查看目录下的所有文件,包含隐藏文件(不是详细展示)</span></span><br><span class="line"><span class="code">	-la  上面两个功能的组合(详细查看所有文件)</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/assets/ls%E5%91%BD%E4%BB%A4.png" alt="ls命令">    </p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">练习:</span><br><span class="line"><span class="bullet">	1. </span>查看 /etc/的文件</span><br><span class="line"><span class="code">		ls /etc/</span></span><br><span class="line"><span class="bullet">	2. </span>查看 /etc/的所有文件</span><br><span class="line"><span class="code">		ls -a /etc/</span></span><br><span class="line"><span class="bullet">	3. </span>查看 /etc/的所有文件的详细信息</span><br><span class="line"><span class="code">		ls -la /etc/</span></span><br></pre></td></tr></table></figure>

<h2 id="pwd-查看当前所在的目录"><a href="#pwd-查看当前所在的目录" class="headerlink" title="pwd 查看当前所在的目录"></a>pwd 查看当前所在的目录</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">语法:  pwd</span><br></pre></td></tr></table></figure>

<p><img data-src="/assets/pwd%E5%91%BD%E4%BB%A4.png" alt="pwd命令">    </p>
<h2 id="who-an-i-查看当前用户"><a href="#who-an-i-查看当前用户" class="headerlink" title="who an i 查看当前用户"></a>who an i 查看当前用户</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">语法：who am i</span><br></pre></td></tr></table></figure>

<p><img data-src="/assets/whoami%E5%91%BD%E4%BB%A4.png" alt="whoami命令">    </p>
<h2 id="cd-切换目录"><a href="#cd-切换目录" class="headerlink" title="cd 切换目录"></a>cd 切换目录</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">语法: cd 目录</span><br><span class="line">目录表达形式:</span><br><span class="line"><span class="code">	/    从根目录开始写的绝对路径目录 </span></span><br><span class="line"><span class="code">	..   上层目录</span></span><br><span class="line"><span class="code">	.    当前目录</span></span><br><span class="line"><span class="code">	~    宿主目录(家目录)</span></span><br><span class="line"><span class="bullet">    -    </span>上次的目录</span><br></pre></td></tr></table></figure>

<p><img data-src="/assets/cd%E5%91%BD%E4%BB%A4.png" alt="cd命令"></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">练习:</span><br><span class="line"><span class="bullet">	1. </span>切换到 /usr/local目录下</span><br><span class="line"><span class="code">		cd /user/local</span></span><br><span class="line"><span class="bullet">	2. </span>切换到当前目录下的src目录下</span><br><span class="line"><span class="code">		cd ./src</span></span><br><span class="line"><span class="bullet">	3. </span>切换到上层目录</span><br><span class="line"><span class="code">		cd ../</span></span><br><span class="line"><span class="bullet">	4. </span>切换到宿主目录下</span><br><span class="line"><span class="code">		cd ~</span></span><br><span class="line"><span class="bullet">	5. </span>切换回上次操作的目录</span><br><span class="line"><span class="code">		cd -</span></span><br></pre></td></tr></table></figure>

<h2 id="mkdir-创建目录"><a href="#mkdir-创建目录" class="headerlink" title="mkdir 创建目录"></a>mkdir 创建目录</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">语法: mkdir  目录  [参数] </span><br><span class="line">参数:</span><br><span class="line"><span class="code">	-p  一次性创建多级目录</span></span><br><span class="line"><span class="code">	-v  显示创建过程</span></span><br><span class="line">总结:</span><br><span class="line"><span class="code">	mkdir  创建目录  -pv</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/assets/mkdir%E5%91%BD%E4%BB%A4.png" alt="mkdir命令">    </p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">练习:</span><br><span class="line"><span class="bullet">	1. </span>在 /opt目录下创建 test1目录</span><br><span class="line"><span class="code">		mkdir /opt/test1 -pv</span></span><br><span class="line"><span class="bullet">	2. </span>在 /opt 目录下创建 test2/test3目录</span><br><span class="line"><span class="code">		mkdir /opt/test2/test3 -pv</span></span><br></pre></td></tr></table></figure>



<h2 id="rm-删除"><a href="#rm-删除" class="headerlink" title="rm 删除"></a>rm 删除</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">语法: rm [参数] 目录或文件</span><br><span class="line">参数:</span><br><span class="line"><span class="code">    -r 递归处理，将指定目录下的所有文件及子目录一并删除，它需要你二次确认是否删除</span></span><br><span class="line"><span class="code">    -f 强制删除目录，它不会询问你 </span></span><br><span class="line">总结:</span><br><span class="line"><span class="code">     rm  -rf  文件(目录)名</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/assets/rm%E5%91%BD%E4%BB%A4.png" alt="rm命令">    </p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">练习:</span><br><span class="line"><span class="bullet">	1. </span>删除/opt目录下创建test1目录</span><br><span class="line"><span class="code">		rm -rf /opt/test1</span></span><br></pre></td></tr></table></figure>

<h2 id="cp-复制"><a href="#cp-复制" class="headerlink" title="cp 复制"></a>cp 复制</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">语法: cp [-r] 源目录 目标目录</span><br><span class="line">参数:</span><br><span class="line"><span class="code">    -r 递归处理，将指定目录下的文件与子目录一并处理</span></span><br><span class="line">总结:</span><br><span class="line"><span class="code">    cp  -r    源目录(文件)    /          复制一个目录或文件到指定目录下</span></span><br><span class="line"><span class="code">    cp  -r    源目录(文件)    目标目录(文件)     复制并改名一个目录或文件</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/assets/cp%E5%91%BD%E4%BB%A4.png" alt="cp命令">    </p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">练习</span><br><span class="line"><span class="bullet">	1. </span>在/opt下创建test1目录, 在test1目录下创建test1.txt文件</span><br><span class="line"><span class="code">		mkdir /opt/test1</span></span><br><span class="line"><span class="code">		touch /opt/test1/test1.txt</span></span><br><span class="line"><span class="bullet">	2. </span>在/opt/test1目录下复制test1.txt 为 test11.txt</span><br><span class="line"><span class="code">		cp /opt/test1/test1.txt /opt/test1/test11.txt</span></span><br><span class="line"><span class="bullet">	3. </span>在/opt 目录下复制test1目录为test2目录</span><br><span class="line"><span class="code">		cp -r /opt/test1 /opt/test2</span></span><br><span class="line"><span class="bullet">	4. </span>复制/opt/test1/test1.txt 到 /opt/test1/下, 并重命名为test3.txt</span><br><span class="line"><span class="code">		cp /opt/test1/test1.txt /opt/test1/test3.txt</span></span><br></pre></td></tr></table></figure>

<h2 id="mv-移动"><a href="#mv-移动" class="headerlink" title="mv 移动"></a>mv 移动</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">语法: mv 原目录位置 新目录的位置</span><br><span class="line">总结:</span><br><span class="line"><span class="code">    mv   源目录(文件)    目标目录/           剪切一个目录或文件到指定目录下</span></span><br><span class="line"><span class="code">    mv   源目录(文件)    目标目录(文件)       剪切并改名一个目录或文件</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/assets/mv%E5%91%BD%E4%BB%A4.png" alt="mv命令">    </p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">练习:</span><br><span class="line"><span class="bullet">	1. </span>在/opt 下创建test1目录, 在test1目录下创建test1.txt文件</span><br><span class="line"><span class="code">		mkdir /opt/test1</span></span><br><span class="line"><span class="code">		touch /opt/test1/test1.txt</span></span><br><span class="line"><span class="code">		</span></span><br><span class="line"><span class="bullet">	2. </span>在/opt 在创建test2目录</span><br><span class="line"><span class="code">		mkdir /opt/test2 -pv</span></span><br><span class="line"><span class="code">		</span></span><br><span class="line"><span class="bullet">	3. </span>将test1目录下的test1.txt文件剪切到test2目录下</span><br><span class="line"><span class="code">		mv /opt/test1/test1.txt /opt/test2</span></span><br><span class="line"><span class="code">		</span></span><br><span class="line"><span class="bullet">	4. </span>将test2 目录下的test1.txt文件剪切到test1目录下,并重命名为test11.txt</span><br><span class="line"><span class="code">		mv /opt/test2/test1 /opt/test1/test11.txt</span></span><br></pre></td></tr></table></figure>

<h2 id="find-查找"><a href="#find-查找" class="headerlink" title="find 查找"></a>find 查找</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">语法: find  路径  -name  文件名【允许模糊匹配】</span><br></pre></td></tr></table></figure>

<p><img data-src="/assets/find%E5%91%BD%E4%BB%A4.png" alt="find命令">    </p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">练习:</span><br><span class="line"><span class="bullet">	1. </span>查询根目录下（包括子目录），名为b的目录和文件</span><br><span class="line"><span class="code">		find / -name 'b'</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">	2. </span>查询根目录下（包括子目录），名以b开头的目录和文件</span><br><span class="line"><span class="code">		find / -name 'b*'</span></span><br></pre></td></tr></table></figure>



<h1 id="文件处理命令"><a href="#文件处理命令" class="headerlink" title="文件处理命令"></a>文件处理命令</h1><h2 id="more-查看文件"><a href="#more-查看文件" class="headerlink" title="more 查看文件"></a>more 查看文件</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">语法: more 文件名 </span><br><span class="line">扩展:</span><br><span class="line"><span class="code">	cat a.java           查看a.java文件的最后一页内容</span></span><br><span class="line"><span class="code">	more a.java          从第一页开始，按回车键换行，按空格健翻页，q退出</span></span><br><span class="line"><span class="code">	head a.java 	     查看a.java文件的前10行内容</span></span><br><span class="line"><span class="code">	tail a.java		     查看a.java文件的后10行内容</span></span><br><span class="line"><span class="code">	head  -n 7 a.java     查看a.java文件的前7行内容</span></span><br><span class="line"><span class="code">	tail  -n 7 a.java     查看a.java文件的后7行内容</span></span><br><span class="line"><span class="code">	tail  -f  文件名       动态查看文件信息</span></span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">more a.java           从第一页开始，按回车键换行，按空格健翻页，q退出</span><br><span class="line">tail  -f  文件名       动态查看文件信息</span><br></pre></td></tr></table></figure>



<h2 id="touch-创建文件"><a href="#touch-创建文件" class="headerlink" title="touch 创建文件"></a>touch 创建文件</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">语法: touch 文件名</span><br></pre></td></tr></table></figure>



<h2 id="vi-编辑文件"><a href="#vi-编辑文件" class="headerlink" title="vi 编辑文件"></a>vi 编辑文件</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">linux 下的vi 是一种文字编辑器，后来的升级版本是vim。</span><br><span class="line">1.打开文件</span><br><span class="line"><span class="code">	vim 文件名 ( 如果文件存在，就是打开文件; 如果文件不存在，就是新建打开 )	</span></span><br><span class="line">2.编辑文件</span><br><span class="line"><span class="code">	使用vim刚刚进入文件，我们处于命令行模式，此时不能进行文件的编辑，</span></span><br><span class="line"><span class="code">	此时按下键盘上的i键就能进入编辑模式，然后就能修改文件内容了。</span></span><br><span class="line">3.保存文件</span><br><span class="line"><span class="code">	当编辑工作完成后，我们需要对编辑好的文件进行保存，此时需要先退出编辑模式，按一下ESC键，就可以退出到命令行模式。</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="code">	此时如果想保存并退出文件，需要在此模式下输入 :wq然后回车 </span></span><br><span class="line"><span class="code">	如果想不保存直接退出文件，需要在此模式下输入 :q! 然后回车</span></span><br></pre></td></tr></table></figure>



<h1 id="压缩、解压命令"><a href="#压缩、解压命令" class="headerlink" title="压缩、解压命令"></a>压缩、解压命令</h1><h2 id="压缩格式"><a href="#压缩格式" class="headerlink" title="压缩格式"></a>压缩格式</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">压缩格式		</span><br><span class="line"><span class="code">	windows中常见的压缩格式:  zip  rar  7z</span></span><br><span class="line"><span class="code">	linux中常见的压缩格式:    zip  gz</span></span><br><span class="line">总结</span><br><span class="line"><span class="code">	tar  -zcvf  压缩包名称  要压缩的文件</span></span><br><span class="line"><span class="code">	tar  -zxvf  压缩文件 -C 要解压的目录</span></span><br></pre></td></tr></table></figure>

<h2 id="文件压缩命令"><a href="#文件压缩命令" class="headerlink" title="文件压缩命令"></a>文件压缩命令</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">语法: tar  [参数]  打包压缩后的文件名  要打包压缩的文件，支持通配符 * 号</span><br><span class="line">参数:</span><br><span class="line"><span class="code">	-c 创建新的文件（必选项）</span></span><br><span class="line"><span class="code">	-f 文件名由命令台设置（必选项）</span></span><br><span class="line"><span class="code">	-v 输出文件清单（可选项）</span></span><br><span class="line"><span class="code">	-z 自动识别压缩或解压（可选项）</span></span><br><span class="line">总结:</span><br><span class="line"><span class="code">	tar  -zcvf  压缩包名称  要压缩的文件</span></span><br></pre></td></tr></table></figure>

<h2 id="文件解压命令"><a href="#文件解压命令" class="headerlink" title="文件解压命令"></a>文件解压命令</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">语法: tar  [参数]  压缩文件  [-C 要解压到的目录]</span><br><span class="line">参数:</span><br><span class="line"><span class="code">	-x 取出文件中的内容（必选项）</span></span><br><span class="line"><span class="code">	-f 文件名由命令台设置（必选项）</span></span><br><span class="line"><span class="code">	-v 输出文件清单（可选项）</span></span><br><span class="line"><span class="code">	-z 自动识别压缩或解压（可选项）</span></span><br><span class="line">总结:</span><br><span class="line"><span class="code">	tar  -zxvf  压缩文件 -C 要解压的目录</span></span><br></pre></td></tr></table></figure>



<h1 id="权限管理命令"><a href="#权限管理命令" class="headerlink" title="权限管理命令"></a>权限管理命令</h1><h2 id="权限常识"><a href="#权限常识" class="headerlink" title="权限常识"></a>权限常识</h2><p>因为linux是以其稳定和安全著称的，所以的它的权限系统是非常完善的。首先来了解几个概念：</p>
<ul>
<li>文件类型</li>
<li>文件的属主和属组</li>
<li>文件的权限标识方法</li>
</ul>
<h3 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">在Linux中有一句话，叫一切皆文件。就是说linux下的所有东西都是文件。但是文件有不同的类型，linux规定了三种类型，分别是：</span><br><span class="line"><span class="code">	d 目录文件    </span></span><br><span class="line"><span class="bullet">	- </span>普通文件    </span><br><span class="line"><span class="code">	l 链接文件</span></span><br></pre></td></tr></table></figure>

<h3 id="文件属主（组）"><a href="#文件属主（组）" class="headerlink" title="文件属主（组）"></a>文件属主（组）</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">在linux下，创建出来的文件都会默认有一个默认属主和默认属组。就像是一个文件一出生就被标记了它的管理者和管理组一样。</span><br></pre></td></tr></table></figure>

<h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">在linux中，有三种权限分别是读权限、写权限和执行权限。他们分别有对应的英文表示和数字表示: </span><br><span class="line"><span class="code">	读     r     4</span></span><br><span class="line"><span class="code">	写     w     2</span></span><br><span class="line"><span class="code">	执行   x     1</span></span><br><span class="line">他们的组合就可以代表某类用户对一个文件的权限</span><br><span class="line"><span class="code">	英文比如  rw(可读可写)  wx(可写可执行)  wrx(可读可写可执行)  </span></span><br><span class="line"><span class="code">	数字比如  6(可读可写)   3(可写可执行)   7(可读可写可执行)</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/assets/%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90.png" alt="文件权限"></p>
<h2 id="文件的具体权限控制"><a href="#文件的具体权限控制" class="headerlink" title="文件的具体权限控制"></a>文件的具体权限控制</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">文件的具体权限控制就是明确定义了：什么身份有什么权限</span><br></pre></td></tr></table></figure>

<p> <img data-src="/assets/%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E5%85%B7%E4%BD%93%E6%8E%A7%E5%88%B6.png" alt="文件权限具体控制"></p>
<h2 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h2><h3 id="形式一"><a href="#形式一" class="headerlink" title="形式一"></a>形式一</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">chmod 用户类型+(-)  权限的英文表示  -R  文件</span><br><span class="line">例子：chmod  o+w  -R  文件</span><br></pre></td></tr></table></figure>

<h3 id="形式二"><a href="#形式二" class="headerlink" title="形式二"></a>形式二</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">chmod  英文权限标识  -R  文件</span><br><span class="line">例子：chmod  u=wrx,g=wr,o=wr  -R 文件</span><br></pre></td></tr></table></figure>

<h3 id="形式三"><a href="#形式三" class="headerlink" title="形式三"></a>形式三</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">chmod  数字权限标识  -R  文件</span><br><span class="line">例子：chmod  755  -R  test</span><br></pre></td></tr></table></figure>

<h1 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h1><p>防火墙，工作在主机或者网络边缘，对出入网络的IP、端口进行访问控制的软件，我们的任务是定义防火墙如何工作，也就是防火墙策略。</p>
<p>在Centos 7中，防火墙已经被做成了一个服务，默认使用的是firewall。 </p>
<p><img data-src="/assets/%E9%98%B2%E7%81%AB%E5%A2%99.png" alt="防火墙"></p>
<h2 id="防火墙服务的相关操作"><a href="#防火墙服务的相关操作" class="headerlink" title="防火墙服务的相关操作"></a>防火墙服务的相关操作</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">systemctl start firewalld     开启防火墙      </span><br><span class="line">systemctl stop  firewalld     关闭防火墙      </span><br><span class="line">systemctl restart firewalld   重启防火墙      </span><br><span class="line">systemctl status  firewalld   查看防火墙状态</span><br><span class="line">systemctl enable firewalld    打开防火墙开机自启  </span><br><span class="line">systemctl disable firewalld   关闭防火墙开机自启</span><br></pre></td></tr></table></figure>

<h2 id="设定防火墙规则"><a href="#设定防火墙规则" class="headerlink" title="设定防火墙规则"></a>设定防火墙规则</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">防火墙默认是禁止所有端口访问的</span><br><span class="line"><span class="code">	允许某端口      firewall-cmd  --zone=public  --add-port=80/tcp    --permanent</span></span><br><span class="line"><span class="code">	禁止某端口      firewall-cmd  --zone=public  --remove-port=80/tcp  --permanent</span></span><br><span class="line"><span class="code">	查看允许的端口   firewall-cmd  --zone=public  --list-ports</span></span><br><span class="line"><span class="code">	注意：使用--permanent代表永久生效，这种情况下，需要重新加载服务  firewall-cmd --reload</span></span><br><span class="line"></span><br><span class="line">常用端口说明:</span><br><span class="line"><span class="code">	3306  mysql</span></span><br><span class="line"><span class="code">	1521  oracle</span></span><br><span class="line"><span class="code">	8080  tomcat</span></span><br><span class="line"><span class="code">	80   nginx</span></span><br><span class="line"><span class="code">	6379  redis</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/assets/%E8%AE%BE%E7%BD%AE%E9%98%B2%E7%81%AB%E5%A2%99%E8%A7%84%E5%88%99.png" alt="设置防火墙规则">    </p>
<h1 id="其它常见命令"><a href="#其它常见命令" class="headerlink" title="其它常见命令"></a>其它常见命令</h1><h2 id="查看指定进程信息"><a href="#查看指定进程信息" class="headerlink" title="查看指定进程信息"></a>查看指定进程信息</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">语法:  ps -ef  |  grep redis</span><br><span class="line">解释:</span><br><span class="line"><span class="code">	ps -ef   查看所有的正在运行的进程</span></span><br><span class="line"><span class="code">	|     管道命令，它会将管道前面的命令输出作为管道后面的命令输入</span></span><br><span class="line"><span class="code">	grep   文本搜索命令</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/assets/%E6%9F%A5%E7%9C%8B%E6%8C%87%E5%AE%9A%E8%BF%9B%E7%A8%8B%E4%BF%A1%E6%81%AF.png" alt="查看指定进程信息">    </p>
<h2 id="查看指定端口信息"><a href="#查看指定端口信息" class="headerlink" title="查看指定端口信息"></a>查看指定端口信息</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">语法:  netstat  -an |  grep 端口号</span><br><span class="line">解释:</span><br><span class="line"><span class="code">	netstat  -an   查看所有的正在占用的端口号</span></span><br><span class="line"><span class="code">	|       管道命令，它会将管道前面的命令输出作为管道后面的命令输入</span></span><br><span class="line"><span class="code">	grep      文本搜索命令</span></span><br></pre></td></tr></table></figure>

<p> <img data-src="/assets/%E6%9F%A5%E7%9C%8B%E6%8C%87%E5%AE%9A%E7%AB%AF%E5%8F%A3%E4%BF%A1%E6%81%AF.png" alt="查看指定端口信息"></p>
<h2 id="强制杀死进程"><a href="#强制杀死进程" class="headerlink" title="强制杀死进程"></a>强制杀死进程</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">语法: kill  [-9]  进程号</span><br></pre></td></tr></table></figure>

<p><img data-src="/assets/%E5%BC%BA%E5%88%B6%E6%9D%80%E6%AD%BB%E8%BF%9B%E7%A8%8B.png" alt="强制杀死进程">    </p>
<h2 id="关机和重启"><a href="#关机和重启" class="headerlink" title="关机和重启"></a>关机和重启</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">halt   关机</span><br><span class="line">reboot  重启</span><br></pre></td></tr></table></figure>



<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a><strong>简介</strong></h2><p>Nginx是一款轻量级的Web服务器，由俄罗斯的程序设计师伊戈尔·西索夫所开发。</p>
<p>Nginx性能非常优秀，官方测试 nginx 能够支撑5万并发链接，并且cpu、内存等资源消耗却非常低，运行非常稳定。</p>
<p>Nginx的作用有很多，我们经常使用的是用它来做<code>静态资源服务器、负载均衡服务器和反向代理服务器</code>。</p>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h3 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h3><p>可以部署静态资源，html js css image</p>
<h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p><strong>代理</strong>:  给某个对象提供一个代理对象，并由代理对象控制原对象的引用</p>
<p><strong>正向代理</strong>: 对客户端进行代理(例如VPN)</p>
<p><img data-src="/assets/%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86.png" alt="正向代理"></p>
<p><strong>反向代理</strong>: 对服务端进行代理</p>
<p>反向代理，就是对服务端进行代理，作为客户端,只需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，再响应给客户端，此时反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器地址，隐藏了真实服务器IP地址。</p>
<p><img data-src="/assets/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86.png" alt="反向代理"></p>
<h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>负载均衡（Load Balance,  LB）意思就是将一份负载分摊到多个操作单元上进行执行</p>
<p><img data-src="/assets/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.png" alt="负载均衡"></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>略…</p>
<h2 id="配置文件介绍"><a href="#配置文件介绍" class="headerlink" title="配置文件介绍"></a>配置文件介绍</h2><p>主配置文件位置:conf/nginx.conf</p>
<p><img data-src="/assets/nginx%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BB%8B%E7%BB%8D.png" alt="nginx配置文件介绍"></p>
<h2 id="nginx和tomcat的区别"><a href="#nginx和tomcat的区别" class="headerlink" title="nginx和tomcat的区别"></a>nginx和tomcat的区别</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">1 存放的文件形式</span><br><span class="line"><span class="code">	Nginx是http服务器,只能解析静态文件</span></span><br><span class="line"><span class="code">	Tomcat是web中间件(本质上是一个servlet),能解析jsp和静态文件</span></span><br><span class="line">2 用途</span><br><span class="line"><span class="code">	nginx可以作为反向代理服务器,负责均衡服务器,静态资源存放服务器</span></span><br><span class="line"><span class="code">	tomcat能作为jsp容器使用,静态资源存放服务器</span></span><br><span class="line">3 性能</span><br><span class="line"><span class="code">	nginx支持5W+并发,tomcat的并发只能在200-400之间</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux的安装和使用</tag>
        <tag>linux常用命令</tag>
        <tag>CentOS_7</tag>
        <tag>nginx简介</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-1</title>
    <url>/2020/09/22/Spring-1/</url>
    <content><![CDATA[<h1 id="Spring概述"><a href="#Spring概述" class="headerlink" title="Spring概述"></a>Spring概述</h1><p>Spring是<code>分层(三层)</code>的Java应用<code>轻量级</code>开源框架</p>
<p>Spring的核心是 <code>IOC（Inverse Of Control：反转控制）</code>和 <code>AOP（Aspect Oriented Programming：面向切面编程）</code></p>
<p>Spring一个全栈应用框架, 提供了表现层 Spring MVC 和持久层 Spring JDBC 以及业务层事务管理等众多应用技术</p>
<p>Spring还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的 Java EE 企业应用开源框架 </p>
<a id="more"></a>

<p>三层：</p>
<ul>
<li>web(跟用户交互) —— SpringMVC</li>
<li>service(处理业务)—— 事务—–声明式事务</li>
<li>dao(跟数据交互) —— SpringJDBC</li>
</ul>
<p>轻量级：</p>
<ul>
<li>用起来简单—api比较少</li>
<li>运行时占用资源少</li>
</ul>
<p>核心：</p>
<ul>
<li>IOC   反转控制</li>
<li>AOP  面向切面编程</li>
</ul>
<p>体系结构：</p>
<p><img data-src="/assets/spring%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.png" alt="spring体系结构"></p>
<h1 id="认识IOC"><a href="#认识IOC" class="headerlink" title="认识IOC"></a>认识IOC</h1><p>在我们进行传统的web项目开发时：</p>
<ul>
<li>实体类：<code>class User{...}</code></li>
<li>dao层：<code>UserDao{访问DB进行数据库的操作}</code></li>
<li>service层：<code>UserServicee{UserDao dao = new UserDao}</code></li>
<li>web层：<code>UserServlet{UserService service = new UserService}</code></li>
</ul>
<p>用户访问时：<code>tomcat-&gt;servlet-&gt;service-&gt;dao</code></p>
<p>在web层和service层都存在耦合：</p>
<ul>
<li>web 依赖 service</li>
<li>service 依赖 dao</li>
</ul>
<p>虽然我们可以通过工厂模式对上述结构进行解耦，但是在工厂获取对象的时候，每次获取都是都是不同的对象，是多例的，浪费了资源；而且每次使用的时候才创建，浪费了时间。</p>
<p>在此基础上我们可以在工厂中添加静态代码块，类加载时就使用工厂生产对象，存入到一个容器中，每次需要时，直接在集合中获取返回集合。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>在这个过程中，对象的创建由原来的使用new关键字在类中主动创建变成了从工厂中获取，而对象的创建过程由工厂内部来实现，然后进一步对工厂进行优化，提前准备好对象存储到容器中，需要时直接返回。</p>
<p>这个优化后的工厂就类似Spring的IOC容器，也就是学习Spring之后，对象不在由自己创建，而时直接向Spring要，这种思想就是IOC。</p>
<h1 id="IOC思想介绍"><a href="#IOC思想介绍" class="headerlink" title="IOC思想介绍"></a>IOC思想介绍</h1><p>IOC( 控制 反转 )是一种设计思想,  它的目的是指导我们设计出更加松耦合的程序。(解耦)</p>
<ul>
<li>控制：指的是控制权，现在可以简单理解为对象的创建权限</li>
<li>反转：指的对象的控制权由程序员在类中主动控制(new)反转到由Spring容器来控制。</li>
</ul>
<p>举个例子：找对象</p>
<ul>
<li>传统方式 : 自己找</li>
<li>婚介所: 先将自己的信息注册到婚介所, 然后到你需要对象的时候, 直接问婚介所要一个对象, 婚介所会给你想办法创建一个对象出来,送过来</li>
</ul>
<blockquote>
<p>小结：</p>
<ul>
<li>IOC通俗的说就是，之前由我们<strong>new对象</strong>变成了<strong>向Spring的IOC容器要对象</strong></li>
</ul>
</blockquote>
<h1 id="Spring入门"><a href="#Spring入门" class="headerlink" title="Spring入门"></a>Spring入门</h1><h2 id="导入Spring依赖"><a href="#导入Spring依赖" class="headerlink" title="导入Spring依赖"></a>导入Spring依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="创建dao接口和实现类"><a href="#创建dao接口和实现类" class="headerlink" title="创建dao接口和实现类"></a>创建dao接口和实现类</h2><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//模拟向数据库保存信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"保存了用户信息..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="加入Spring的配置文件"><a href="#加入Spring的配置文件" class="headerlink" title="加入Spring的配置文件"></a>加入Spring的配置文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"com.sun.dao.impl.UserDaoImpl"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="编写测试类：模拟service层调用进行测试"><a href="#编写测试类：模拟service层调用进行测试" class="headerlink" title="编写测试类：模拟service层调用进行测试"></a>编写测试类：模拟service层调用进行测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//模拟Service调用dao进行测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//读取配置文件，初始化IOC容器</span></span><br><span class="line">        <span class="comment">//方式一:读取类路径下的配置文件：推荐</span></span><br><span class="line">        ApplicationContext apt = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">//方式二：读取磁盘文件中的配置文件</span></span><br><span class="line">        <span class="comment">//ApplicationContext apt = new FileSystemXmlApplicationContext("E:\\IDEA_Workspace\\spring\\day01_01spring_ioc\\src\\main\\resources\\applicationContext.xml");</span></span><br><span class="line">        <span class="comment">//IOC容器中获取UserDao对象</span></span><br><span class="line">        <span class="comment">//方式一：根据配置文件中bean的id获取</span></span><br><span class="line">        <span class="comment">//UserDao userDao = (UserDao) apt.getBean("userDao");</span></span><br><span class="line">        <span class="comment">//方式二：使用bean的class类型从容器中查找对象</span></span><br><span class="line">        <span class="comment">//UserDao userDao = apt.getBean(UserDaoImpl.class);</span></span><br><span class="line">        <span class="comment">//方式三：根据id和class类型获取对象</span></span><br><span class="line">        UserDao userDao = apt.getBean(<span class="string">"userDao"</span>, UserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//执行方法</span></span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="要点分析"><a href="#要点分析" class="headerlink" title="要点分析"></a>要点分析</h2><h3 id="SpringIOC容器启动过程中要做哪些操作"><a href="#SpringIOC容器启动过程中要做哪些操作" class="headerlink" title="SpringIOC容器启动过程中要做哪些操作"></a>SpringIOC容器启动过程中要做哪些操作</h3><p><img data-src="/assets/SpringIOC%E5%AE%B9%E6%98%93%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%81%9A%E7%9A%84%E4%BA%8B%E6%83%85.png" alt="SpringIOC容易启动过程中做的事情"></p>
<h3 id="SpringIOC存储对象的Map到底在哪里"><a href="#SpringIOC存储对象的Map到底在哪里" class="headerlink" title="SpringIOC存储对象的Map到底在哪里"></a>SpringIOC存储对象的Map到底在哪里</h3><p><img data-src="/assets/springIOC%E5%AD%98%E5%82%A8%E5%AF%B9%E8%B1%A1%E7%9A%84Map%E5%9C%A8%E5%93%AA%E9%87%8C.png" alt="springIOC存储对象的Map在哪里"></p>
<h1 id="API介绍"><a href="#API介绍" class="headerlink" title="API介绍"></a>API介绍</h1><p><img data-src="/assets/SpringAPI%E4%BB%8B%E7%BB%8D.png" alt="SpringAPI介绍"></p>
<h2 id="两个接口"><a href="#两个接口" class="headerlink" title="两个接口"></a>两个接口</h2><h3 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h3><p>这是SpringIOC容器的顶级接口，它定义了SpringIOC的最基础的功能，但是其功能比较简单,  一般面向Spring自身使用</p>
<p>BeanFactroy在第一次使用到某个Bean时(调用getBean())，才对该Bean进行加载实例化</p>
<h3 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h3><p>这是在BeanFactory基础上衍生出的接口，它扩展了BeanFactory的功能，一般面向程序员使用 </p>
<p>ApplicationContext是在容器启动时，一次性创建并加载了所有的Bean</p>
<p><strong>上面两种方式创建的对象都是单例，只是创建对象的时机不同</strong></p>
<h2 id="三个实现类"><a href="#三个实现类" class="headerlink" title="三个实现类"></a>三个实现类</h2><p>这三个类的作用都是：读取配置文件, 初始化Spring的IOC容器,  不一样的是加载配置文件的位置</p>
<ul>
<li>ClassPathXmlApplicationContext         读取类路径下的xml作为配置文件</li>
<li>FileSystemXmlApplicationContext       读取本地目录下的xml作为配置文件</li>
<li>AnnotationConfigApplicationContext  读取一个Java类作为配置文件</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//读取配置文件，初始化IOC容器</span></span><br><span class="line">        <span class="comment">//方式一:读取类路径下的配置文件：推荐</span></span><br><span class="line">        ApplicationContext apt1 = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">//方式二：读取磁盘文件中的配置文件</span></span><br><span class="line">        ApplicationContext apt2 = <span class="keyword">new</span> FileSystemXmlApplicationContext(<span class="string">"E:\\IDEA_Workspace\\spring\\spring_ioc\\src\\main\\resources\\applicationContext.xml"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="一个方法"><a href="#一个方法" class="headerlink" title="一个方法"></a>一个方法</h2><p>getBean() 用于从Spring容器中获取Bean对象，参数可以使用三种情况：</p>
<ul>
<li><code>getBean(&quot;id&quot;)</code>：使用bean的id从容器中查找对象</li>
<li><code>getBean(Bean.class)</code>：使用bean的class类型从容器中查找对象</li>
<li><code>getBean(&quot;id&quot;, Bean.class)</code>：使用bean的id 和 class类型从容器中查找对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//读取配置文件，初始化IOC容器</span></span><br><span class="line">        ApplicationContext apt = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">//IOC容器中获取UserDao对象</span></span><br><span class="line">        <span class="comment">//方式一：根据配置文件中bean的id获取</span></span><br><span class="line">        UserDao userDao1 = (UserDao) apt.getBean(<span class="string">"userDao"</span>);</span><br><span class="line">        <span class="comment">//方式二：使用bean的class类型从容器中查找对象</span></span><br><span class="line">        UserDao userDao2 = apt.getBean(UserDaoImpl<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//方式三：根据id和class类型获取对象</span></span><br><span class="line">        UserDao userDao3 = apt.getBean(<span class="string">"userDao"</span>, UserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//执行方法</span></span><br><span class="line">		</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="Bean的配置"><a href="#Bean的配置" class="headerlink" title="Bean的配置"></a>Bean的配置</h1><h2 id="bean的创建方式"><a href="#bean的创建方式" class="headerlink" title="bean的创建方式"></a>bean的创建方式</h2><h3 id="传统方式创建对象的三种方式"><a href="#传统方式创建对象的三种方式" class="headerlink" title="传统方式创建对象的三种方式"></a>传统方式创建对象的三种方式</h3><p><strong>book类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line">    <span class="keyword">private</span> Date publish;</span><br><span class="line">    get/set构造方法略...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>工厂类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Book <span class="title">getBook1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Book();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Book <span class="title">getBook2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Book();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>①直接使用new关键字创建</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Book book = <span class="keyword">new</span> Book();</span><br></pre></td></tr></table></figure>

<p><strong>②使用静态工厂创建</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Book book1 = BeanFactory.getBook1();</span><br></pre></td></tr></table></figure>

<p><strong>③使用实例化工厂创建</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BeanFactory beanFactory = <span class="keyword">new</span> BeanFactory();</span><br><span class="line">Book book2 = beanFactory.getBook2();</span><br></pre></td></tr></table></figure>



<h3 id="Spring创建对象的三种方式"><a href="#Spring创建对象的三种方式" class="headerlink" title="Spring创建对象的三种方式"></a>Spring创建对象的三种方式</h3><p><strong>bean配置</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring创建对象的三种方式--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1 调用构造函数创建对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book"</span> <span class="attr">class</span>=<span class="string">"com.sun.createbeans.Book"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2 使用静态工厂创建对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book1"</span> <span class="attr">class</span>=<span class="string">"com.sun.createbeans.BeanFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getBook1"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3 使用实例化工厂创建对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"beanFactory"</span> <span class="attr">class</span>=<span class="string">"com.sun.createbeans.BeanFactory"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book2"</span> <span class="attr">factory-bean</span>=<span class="string">"beanFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getBook2"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCreateBook</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * Spring创建对象的三种方式</span></span><br><span class="line"><span class="comment">    *   调用构造函数创建</span></span><br><span class="line"><span class="comment">    *   使用静态工厂创建</span></span><br><span class="line"><span class="comment">    *   使用实例化工厂创建</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//读取配置文件，初始化IOC容器</span></span><br><span class="line">        ApplicationContext apt = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">//第一种,调用构造方法创建</span></span><br><span class="line">        Book book = (Book) apt.getBean(<span class="string">"book"</span>);</span><br><span class="line">        System.out.println(book);</span><br><span class="line">        <span class="comment">//第二种，使用静态工厂创建</span></span><br><span class="line">        Book book1 = (Book) apt.getBean(<span class="string">"book1"</span>);</span><br><span class="line">        System.out.println(book1);</span><br><span class="line">        <span class="comment">//第三种，使用实例化工厂创建</span></span><br><span class="line">        Book book2 = (Book) apt.getBean(<span class="string">"book2"</span>);</span><br><span class="line">        System.out.println(book2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Bean的作用范围"><a href="#Bean的作用范围" class="headerlink" title="Bean的作用范围"></a>Bean的作用范围</h2><p>在Spring中，对于bean支持五种作用范围：</p>
<ul>
<li><strong>singleton</strong>(默认) 单例模式，即对象只创建一次, 然后一直存在, 知道Spring容器关闭</li>
<li><strong>prototype</strong>         多例模式，即每次获取bean的时候，IOC都给我们创建一个新对象</li>
<li><strong>request</strong>             web项目中，Spring创建一个Bean的对象，将对象存入到request域中</li>
<li><strong>session</strong>              web 项目中，Spring 创建一个Bean 的对象，将对象存入到session域中</li>
<li><strong>globalSession</strong>   用于分布式web开发中，创建的实例绑定全局session对象</li>
</ul>
<blockquote>
<p>可以在bean配置中进行配置：</p>
<ul>
<li>例如：<code>&lt;bean id=&quot;book&quot; class=&quot;com.sun.createbeans.Book&quot; scope=&quot;singleton&quot;/&gt;</code></li>
</ul>
</blockquote>
<h2 id="Bean的生命周期"><a href="#Bean的生命周期" class="headerlink" title="Bean的生命周期"></a>Bean的生命周期</h2><p>研究bean的生命周期，无非就是弄明白bean是什么时候创建的，什么时候销毁的</p>
<p>在Spring中，bean的作用范围会影响到其生命周期，所以我们要分单例和多例对象来研究bean的生命周期</p>
<h3 id="单例对象"><a href="#单例对象" class="headerlink" title="单例对象"></a>单例对象</h3><p>生: 容器初始化</p>
<p>死: 容器销毁</p>
<p><img data-src="/assets/bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F-%E5%8D%95%E4%BE%8B%E5%AF%B9%E8%B1%A1.png" alt="bean生命周期-单例对象"></p>
<h3 id="多例对象"><a href="#多例对象" class="headerlink" title="多例对象"></a>多例对象</h3><p>生: 每一次getBean()调用的时候出生</p>
<p>死: 不会受到Spring的控制, 由垃圾回收期负责回收</p>
<p><img data-src="/assets/bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F-%E5%A4%9A%E4%BE%8B%E5%AF%B9%E8%B1%A1.png" alt="bean生命周期-多例对象"></p>
<h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><p>依赖注入(Dependency Injection，DI) 其实就是给对象中的属性赋值的过程</p>
<p>依赖注入有两种方式，分别是使用构造函数和set方法</p>
<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>在book类中提供一个全参构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line">    <span class="keyword">private</span> Date publish;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//全参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String bookName, <span class="keyword">double</span> price, Date publish)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bookName = bookName;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">        <span class="keyword">this</span>.publish = publish;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在配置文件中赋值</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring依赖注入 简单类型：基本类型，基本类型的包装类，String--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--构造函数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"date"</span> <span class="attr">class</span>=<span class="string">"java.util.Date"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book1"</span> <span class="attr">class</span>=<span class="string">"com.sun.createbeans.Book"</span>&gt;</span></span><br><span class="line">    	<span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            name:构造方法中形参名称</span></span><br><span class="line"><span class="comment">            index：构造方法中形参的索引，一般省略不写</span></span><br><span class="line"><span class="comment">            type:构造函数中形参的类型，一般可以省略，底层可以通过反射技术自己获取</span></span><br><span class="line"><span class="comment">            value:构造函数中参数用改赋的值(简单类型：基本类型，基本类型的包装类，String)</span></span><br><span class="line"><span class="comment">            ref:构造函数中的参数应该赋的值(引用类型)，用于指定当前容器中一个存在的bean对象的id</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"bookName"</span> <span class="attr">value</span>=<span class="string">"西游记"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"price"</span> <span class="attr">value</span>=<span class="string">"30"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"publish"</span> <span class="attr">ref</span>=<span class="string">"date"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="set方法"><a href="#set方法" class="headerlink" title="set方法"></a>set方法</h3><p>提供book的set方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line">    <span class="keyword">private</span> Date publish;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//全参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String bookName, <span class="keyword">double</span> price, Date publish)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bookName = bookName;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">        <span class="keyword">this</span>.publish = publish;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBookName</span><span class="params">(String bookName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bookName = bookName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPublish</span><span class="params">(Date publish)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.publish = publish;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在配置文件中进行赋值</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--set方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book2"</span> <span class="attr">class</span>=<span class="string">"com.sun.createbeans.Book"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"bookName"</span> <span class="attr">value</span>=<span class="string">"红楼梦"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"price"</span> <span class="attr">value</span>=<span class="string">"50"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"publish"</span> <span class="attr">ref</span>=<span class="string">"date"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="p名称空间用法"><a href="#p名称空间用法" class="headerlink" title="p名称空间用法"></a>p名称空间用法</h3><blockquote>
<p>注意: 使用这个必须导入p的约束</p>
</blockquote>
<p>bean配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--p名称空间（注意，使用p名称空间需要导入约束）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book3"</span> <span class="attr">class</span>=<span class="string">"com.sun.createbeans.Book"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">p:bookName</span>=<span class="string">"水浒传"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">p:price</span>=<span class="string">"80"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">p:publish-ref</span>=<span class="string">"date"</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="注入集合属性"><a href="#注入集合属性" class="headerlink" title="注入集合属性"></a>注入集合属性</h2><h3 id="在book中准备集合属性"><a href="#在book中准备集合属性" class="headerlink" title="在book中准备集合属性"></a>在book中准备集合属性</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line">    <span class="keyword">private</span> Date publish;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String[] array;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; set;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; map;</span><br><span class="line">    <span class="keyword">private</span> Properties props;</span><br><span class="line">    <span class="comment">//提供相应的set方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setArray</span><span class="params">(String[] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.array = array;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSet</span><span class="params">(Set&lt;String&gt; set)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.set = set;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMap</span><span class="params">(Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.map = map;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProps</span><span class="params">(Properties props)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.props = props;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="单列集合的注入"><a href="#单列集合的注入" class="headerlink" title="单列集合的注入"></a>单列集合的注入</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring依赖注入 集合：数组 list map set properties--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--数组--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book4"</span> <span class="attr">class</span>=<span class="string">"com.sun.createbeans.Book"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"array"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>AA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>BB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--list集合--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book5"</span> <span class="attr">class</span>=<span class="string">"com.sun.createbeans.Book"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>CC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>DD<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--set集合--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book6"</span> <span class="attr">class</span>=<span class="string">"com.sun.createbeans.Book"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"set"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>EE<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>FF<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="双列集合依赖注入"><a href="#双列集合依赖注入" class="headerlink" title="双列集合依赖注入"></a>双列集合依赖注入</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--map集合--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book7"</span> <span class="attr">class</span>=<span class="string">"com.sun.createbeans.Book"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"GG"</span> <span class="attr">value</span>=<span class="string">"gg"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"HH"</span> <span class="attr">value</span>=<span class="string">"hh"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--properties集合--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book8"</span> <span class="attr">class</span>=<span class="string">"com.sun.createbeans.Book"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"II"</span>&gt;</span>ii<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"JJ"</span>&gt;</span>jj<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="配置文件模块化"><a href="#配置文件模块化" class="headerlink" title="配置文件模块化"></a>配置文件模块化</h1><p>我们现在的配置都集中配在了一个applicationContext.xml文件中，当开发人员过多时， 如果所有bean都配置到同一个配置文件中，会使这个文件巨大。</p>
<p>针对这个问题, Spring给我们提供了两种解决方案:</p>
<ul>
<li><strong>同时引入多个配置文件</strong></li>
</ul>
<p><img data-src="/assets/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%A8%A1%E5%9D%97%E5%8C%961.png" alt="配置文件模块化1"></p>
<ul>
<li><strong>主从配置</strong></li>
</ul>
<p><img data-src="/assets/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%A8%A1%E5%9D%97%E5%8C%962.png" alt="配置文件模块化2"></p>
<blockquote>
<p>注意:</p>
<ol>
<li>同一个xml文件中不允许出现相同名称的bean，如果出现会报错</li>
<li>多个xml文件如果出现相同名称的bean，不会报错，但是后加载的会覆盖前加载，所以尽量保证bean的名称是唯一的。</li>
</ol>
</blockquote>
<h1 id="DBUtils"><a href="#DBUtils" class="headerlink" title="DBUtils"></a>DBUtils</h1><h2 id="DbUtils介绍"><a href="#DbUtils介绍" class="headerlink" title="DbUtils介绍"></a>DbUtils介绍</h2><blockquote>
<p>java中操作数据库的框架，一定会有的方法：</p>
<ol>
<li>发送SQL语句</li>
<li>接收返回的数据结果，并且封装为对象或集合</li>
</ol>
</blockquote>
<p>DbUtils是Apache的一款用于简化Dao代码的工具类，它底层封装了JDBC技术。</p>
<p>核心类：</p>
<ul>
<li>QueryRunner          用于执行增删改查的SQL语句</li>
<li>ResultSetHandler    这是一个接口，主要作用是将数据库返回的记录封装进实体对象或集合</li>
</ul>
<p>核心方法：</p>
<ul>
<li>update()    用来执行增、删、改语句  </li>
<li>query()      用来执行查询语句</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个QueryRunner对象，用来执行增删改查</span></span><br><span class="line"><span class="comment">//这里需要给一个数据源，如果此处不给，那么使用它调用具体API的时候必须要给</span></span><br><span class="line">QueryRunner queryRunner = <span class="keyword">new</span> QueryRunner(dataSource);</span><br><span class="line"></span><br><span class="line"><span class="comment">//update方法，用于执行增删改语句</span></span><br><span class="line"><span class="comment">//第一个参数:sql语句   后面的参数:sql语句中的所需要的的值</span></span><br><span class="line">queryRunner.update(<span class="string">"insert into account value(null,?,?)"</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//query方法，用于执行查询语句</span></span><br><span class="line"><span class="comment">//第一个参数:sql语句   第一个参数:封装返回值   后面的参数:sql语句中的所需要的的值</span></span><br><span class="line"><span class="comment">//BeanHandler用于将一条返回数据封装成一个JavaBean,  类似的子类还有BeanListHandler等</span></span><br><span class="line">queryRunner.query(<span class="string">"select * from account where aid = ?"</span>,  <span class="keyword">new</span> BeanHandler&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>),  1)</span>;</span><br></pre></td></tr></table></figure>



<h2 id="DBUtils简单使用案例"><a href="#DBUtils简单使用案例" class="headerlink" title="DBUtils简单使用案例"></a>DBUtils简单使用案例</h2><h3 id="准备数据表"><a href="#准备数据表" class="headerlink" title="准备数据表"></a>准备数据表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">account</span>(</span><br><span class="line">	aid <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">	<span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">unique</span>,</span><br><span class="line">	balance <span class="built_in">float</span>(<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="新建模块导入依赖"><a href="#新建模块导入依赖" class="headerlink" title="新建模块导入依赖"></a>新建模块导入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--dbutils--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--druid--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer aid;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Float balance;</span><br><span class="line">    <span class="comment">//get/set方法构造方法略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试使用DBUtils</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        DruidDataSource druidDataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        druidDataSource.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        druidDataSource.setUrl(<span class="string">"jdbc:mysql:///spring?characterEncoding=utf8"</span>);</span><br><span class="line">        druidDataSource.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        druidDataSource.setPassword(<span class="string">"root"</span>);</span><br><span class="line">        QueryRunner queryRunner = <span class="keyword">new</span> QueryRunner(druidDataSource);</span><br><span class="line">        queryRunner.update(<span class="string">"insert into account values(null,?,?)"</span>,<span class="string">"张三"</span>,<span class="number">100f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="使用Spring-DBUtils完成CRUD操作"><a href="#使用Spring-DBUtils完成CRUD操作" class="headerlink" title="使用Spring+DBUtils完成CRUD操作"></a>使用Spring+DBUtils完成CRUD操作</h1><h2 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h2><p>复用之前的account表…</p>
<h2 id="创建模块导入依赖"><a href="#创建模块导入依赖" class="headerlink" title="创建模块导入依赖"></a>创建模块导入依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring_crud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="创建实体类-1"><a href="#创建实体类-1" class="headerlink" title="创建实体类"></a>创建实体类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer aid;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Float balance;</span><br><span class="line">    <span class="comment">//get/set方法构造方法略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="创建dao接口及实现类"><a href="#创建dao接口及实现类" class="headerlink" title="创建dao接口及实现类"></a>创建dao接口及实现类</h2><h3 id="接口-1"><a href="#接口-1" class="headerlink" title="接口"></a>接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Account <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateByName</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="实现类-1"><a href="#实现类-1" class="headerlink" title="实现类"></a>实现类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需要提供QueryRunner对象，操作数据库，在spring进行依赖注入</span></span><br><span class="line">    <span class="keyword">private</span> QueryRunner queryRunner;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setQueryRunner</span><span class="params">(QueryRunner queryRunner)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.queryRunner = queryRunner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            queryRunner.update(<span class="string">"insert into account values(null,?,?)"</span>,account.getName(),account.getBalance());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> queryRunner.query(<span class="string">"select * from account where name = ?"</span>,<span class="keyword">new</span> BeanHandler&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>),<span class="title">name</span>)</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> queryRunner.query(<span class="string">"select * from account"</span>,<span class="keyword">new</span> BeanListHandler&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            queryRunner.update(<span class="string">"delete from account where name = ?"</span>,name);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateByName</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            queryRunner.update(<span class="string">"update account set balance = ? where name = ?"</span>,account.getBalance(),account.getName());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="创建service接口及实现类"><a href="#创建service接口及实现类" class="headerlink" title="创建service接口及实现类"></a>创建service接口及实现类</h2><h3 id="接口-2"><a href="#接口-2" class="headerlink" title="接口"></a>接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Account <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateByName</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="实现类-2"><a href="#实现类-2" class="headerlink" title="实现类"></a>实现类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需要调用dao进行保存,在spring中进行依赖注入</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(AccountDao accountDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        accountDao.save(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findByName(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        accountDao.deleteByName(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateByName</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        accountDao.updateByName(account);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="加入Spring配置文件"><a href="#加入Spring配置文件" class="headerlink" title="加入Spring配置文件"></a>加入Spring配置文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///spring?characterEncoding=utf8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"queryRunner"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbutils.QueryRunner"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"ds"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"com.sun.dao.impl.AccountDaoImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"queryRunner"</span> <span class="attr">ref</span>=<span class="string">"queryRunner"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.sun.service.impl.AccountServiceImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"accountDao"</span> <span class="attr">ref</span>=<span class="string">"accountDao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="模拟测试"><a href="#模拟测试" class="headerlink" title="模拟测试"></a>模拟测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取配置文件，初始化IOC容器</span></span><br><span class="line">    ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">    <span class="comment">//获取service对象</span></span><br><span class="line">    AccountService accountService = applicationContext.getBean(AccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//测试查找所有</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        List&lt;Account&gt; all = accountService.findAll();</span><br><span class="line">        <span class="keyword">for</span> (Account account : all) &#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//测试查找一个</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Account account = accountService.findByName(<span class="string">"张三"</span>);</span><br><span class="line">        System.out.println(account);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//测试保存</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setName(<span class="string">"李四"</span>);</span><br><span class="line">        account.setBalance(<span class="number">120f</span>);</span><br><span class="line">        accountService.save(account);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//测试修改</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setName(<span class="string">"张三"</span>);</span><br><span class="line">        account.setBalance(<span class="number">50f</span>);</span><br><span class="line">        accountService.updateByName(account);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//测试根据名称删除</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        accountService.deleteByName(<span class="string">"李四"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>框架</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>IOC介绍</tag>
        <tag>入门案例</tag>
        <tag>API简介</tag>
        <tag>bean配置</tag>
        <tag>依赖注入</tag>
        <tag>DBUtils</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-2</title>
    <url>/2020/09/23/Spring-2/</url>
    <content><![CDATA[<h1 id="Spring注解开发"><a href="#Spring注解开发" class="headerlink" title="Spring注解开发"></a>Spring注解开发</h1><h2 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h2><blockquote>
<p>对比使用xml配置来学习注解开发</p>
</blockquote>
<p>对象实例化使用的注解：</p>
<ul>
<li><code>@Component</code>：用于实例化对象，相当于配置文件中的<code>&lt;bean id=&quot;&quot; class=&quot;&quot;/&gt;</code></li>
</ul>
<p>还有三个实例化对象的注解和@Component功能类似，但是分别标注在不同的层上：</p>
<ul>
<li><code>@Controller</code>：标注在表现层的类上</li>
<li><code>@Service</code>：标注在业务层的类上</li>
<li><code>@Repository</code>：标注在持久层的类上</li>
</ul>
<blockquote>
<p><strong>推荐使用这三个</strong>，当一个类实在不好归属在这三个层上时，再使用@Component</p>
<ul>
<li>例如注入工具类时，不属于任何一层，可以使用@Component</li>
</ul>
</blockquote>
<a id="more"></a>

<p><strong>注意：</strong></p>
<ul>
<li>使用注解开发时，要在xml配置文件中添加一条组件扫描的配置，否则Spring找不到注解配置。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">组件扫描。他需要我们给出一个包名</span></span><br><span class="line"><span class="comment">然后Spring会扫描这个包及其子包下的所有类中的Spring注解只有被扫描到的注解才能发挥作用</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.xxx"</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="对象的生存范围"><a href="#对象的生存范围" class="headerlink" title="对象的生存范围"></a>对象的生存范围</h2><p>涉及一个注解：</p>
<ul>
<li><code>@Scope</code>:指定对象的生存范围(单例和多例)</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Spring中对象的生存范围: </span><br><span class="line"><span class="code">	singleton</span></span><br><span class="line"><span class="code">	prototype</span></span><br><span class="line"><span class="code">	request</span></span><br><span class="line"><span class="code">	session</span></span><br><span class="line"><span class="code">	globalsession</span></span><br></pre></td></tr></table></figure>

<p><strong>小结</strong></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">@Scope用于指定bean的作用范围(单例和多例)</span><br><span class="line">相当于配置文件中的<span class="xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">scope</span>=<span class="string">""</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<h2 id="对象的生命周期"><a href="#对象的生命周期" class="headerlink" title="对象的生命周期"></a>对象的生命周期</h2><p>涉及两个注解：</p>
<ul>
<li><code>@PostConstruct</code>：标注在方法上，指定对象创建之后执行。</li>
<li><code>@PreDestroy</code>：标注在方法上，指定对象销毁之前执行。</li>
</ul>
<p>小结：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">@PostConstruct @PreDestroy 这两个注解标注方法分别在对象的创建之后和销毁之前执行。</span><br><span class="line">相当于<span class="xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"destory"</span> /&gt;</span></span></span><br></pre></td></tr></table></figure>



<h2 id="对象的依赖注入"><a href="#对象的依赖注入" class="headerlink" title="对象的依赖注入"></a>对象的依赖注入</h2><p>涉及四个注解：</p>
<ul>
<li><p><code>@Autowired</code>：这个注解表示依赖注入，他可以标注在属性上，也可以标注在方法上，当@Autowired标注在属性上的时候，属性对应的set方法可以省略不写</p>
<blockquote>
<p>使用这个注解时，Spring会在他的IOC容器中按照被标注属性的类型进行寻找</p>
<ul>
<li>如果找不到，就会报错</li>
<li>如果找到了，而且正好找到了一个，那么就进行依赖注入</li>
<li>如果找到了，但是找到了多个，它会再按照属性名称进行匹配<ul>
<li>如果匹配上了就注入</li>
<li>如果匹配不上就报错</li>
</ul>
</li>
</ul>
</blockquote>
</li>
<li><p><code>@Value</code>：这个注解表示给简单类型(基本类型+基本类型包装类+String)进行依赖注入</p>
</li>
<li><p><code>@Qualifier</code>：要跟@Autowired联合使用，代表在按照类型匹配的基础上，再按照名称匹配。</p>
<blockquote>
<p>例如：此时IOC有两个UserDao类型的实例，名称分别为userDao1和userDao2,此时只使用@AutoWired注解进行匹配，就会匹配两个，并且此时属性名称为userDao，那么就一个都不会匹配到，我们就可以在属性上在加一个注解@Qualifier(“userDao1”),此时就可以匹配到名称为userDao1的实例。</p>
</blockquote>
<ul>
<li><p>使用实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span>(<span class="string">"accountDao1"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl1</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;...&#125;</span><br><span class="line"><span class="meta">@Repository</span>(<span class="string">"accountDao2"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl2</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"accountDao1"</span>) <span class="comment">//要跟@Autowired联合使用，代表在按照类型匹配的基础上，再按照名称匹配</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<ul>
<li><p><code>@Resource</code>：此注解由java提供，而且JDK9版本以后废弃了</p>
<blockquote>
<p>Spring会在他的IOC容器中先按照属性名称进行寻找</p>
<ul>
<li>如果找到了，就进行依赖注入</li>
<li>如果找不到，再按照类型进行匹配<ul>
<li>如果正好匹配到一个，就注入</li>
<li>如果匹配到多个，就报错</li>
</ul>
</li>
</ul>
<p>注意: @Resource(name = “userDaoImpl1”) 如果直接使用name指定名称，他就只会按照名称匹配</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>小贴士：</p>
<ul>
<li><code>@Autowired</code>和<code>@Resource</code>区别?<ul>
<li><code>@Autowired</code>:先进行类型的匹配，匹配到多个的时候再进行name的匹配</li>
<li><code>Resource</code>：先进行name的匹配，匹配到多个的时候再进行类型的匹配</li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="相关注解使用演示"><a href="#相关注解使用演示" class="headerlink" title="相关注解使用演示"></a>相关注解使用演示</h2><h3 id="dao接口和实现类"><a href="#dao接口和实现类" class="headerlink" title="dao接口和实现类"></a>dao接口和实现类</h3><ul>
<li>UserDao</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>UserDaoImpl</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 实例化对象的四个注解：</span></span><br><span class="line"><span class="comment">* @Component</span></span><br><span class="line"><span class="comment">*   用于实例化对象，相当于配置文件中的&lt;bean id="" class=""/&gt;</span></span><br><span class="line"><span class="comment">*   它支持一个属性value,相当于xml中bean的id。如果不写，默认值为类名的首字母小写</span></span><br><span class="line"><span class="comment">* @Controller  @Service  @Repository</span></span><br><span class="line"><span class="comment">*   这三个注解的功能跟@Component类似，他们分别标注在不同的层上。</span></span><br><span class="line"><span class="comment">*       @Controller  标注在表现层的类上</span></span><br><span class="line"><span class="comment">*       @Service     标注在业务层的类上</span></span><br><span class="line"><span class="comment">*       @Repository  标注在持久层的类上</span></span><br><span class="line"><span class="comment">*   推荐使用这三个，当一个类实在不好归属在这三个层上时，再使用@Component</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="comment">//@Scope用于指定bean的作用范围(单例和多例)，相当于配置文件中的&lt;bean scope=""&gt;</span></span><br><span class="line"><span class="meta">@Scope</span>(<span class="string">"singleton"</span>) <span class="comment">//该注解指定当前对象为单例(默认值)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"保存成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>UserDaoImpl1</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span>(<span class="string">"accountDao1"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl1</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"保存成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>UserDaoImpl2</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span>(<span class="string">"accountDao2"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl2</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"保存成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="service接口和实现类"><a href="#service接口和实现类" class="headerlink" title="service接口和实现类"></a>service接口和实现类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="comment">//@Scope("prototype")//该注解指定当前对象为多例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * @Autowired这个注解表示依赖注入，他可以标注在属性上，也可以标注在方法上，</span></span><br><span class="line"><span class="comment">    * 当@Autowired标注在属性上的时候，属性对应的set方法可以省略不写</span></span><br><span class="line"><span class="comment">    *   Spring会在他的IOC容器中按照被标注属性的类型进行寻找</span></span><br><span class="line"><span class="comment">    *        如果找不到，就会报错</span></span><br><span class="line"><span class="comment">    *        如果找到了，而且正好找到了一个，那么就进行依赖注入</span></span><br><span class="line"><span class="comment">    *        如果找到了，但是找到了多个，它会再按照属性名称进行匹配</span></span><br><span class="line"><span class="comment">    *            如果匹配上了就注入</span></span><br><span class="line"><span class="comment">    *            如果匹配不上就报错</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"accountDao1"</span>) <span class="comment">//要跟@Autowired联合使用，代表在按照类型匹配的基础上，再按照名称匹配</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Autowired</span></span><br><span class="line">    <span class="comment">//public void setUserDao(UserDao userDao) &#123;</span></span><br><span class="line">    <span class="comment">//    this.userDao = userDao;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * @PostConstruct @PreDestroy 这两个注解标注方法分别在对象的创建之后和销毁之前执行。</span></span><br><span class="line"><span class="comment">    * 相当于&lt;bean init-method="init" destroy-method="destroy" /&gt;</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"对象创建之后..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"对象销毁之前..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Spring的xml配置"><a href="#Spring的xml配置" class="headerlink" title="Spring的xml配置"></a>Spring的xml配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">			    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">			    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">			    http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        组件扫描。他需要我们给出一个包名</span></span><br><span class="line"><span class="comment">        然后Spring会扫描这个包及其子包下的所有类中的Spring注解只有被扫描到的注解才能发挥作用</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.sun"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注解开发测试</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//读取配置文件</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        UserService userService = ac.getBean(UserService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        userService.save();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试单例多例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        UserService userService1 = ac.getBean(UserService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        UserService userService2 = ac.getBean(UserService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(userService1);</span><br><span class="line">        System.out.println(userService2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试生命周期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        UserService userService1 = ac.getBean(UserService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(userService1);</span><br><span class="line">        ac.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="注解总结"><a href="#注解总结" class="headerlink" title="注解总结"></a>注解总结</h2><table>
<thead>
<tr>
<th>xml配置</th>
<th>注解配置</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>&lt; bean id=”” class=”” &gt;</td>
<td>@Component @Controller @Service    @Repository</td>
<td>bean的实例化</td>
</tr>
<tr>
<td>&lt; property name=”” ref=””&gt;</td>
<td>@Autowired  @Qualifier  @Resource</td>
<td>bean的对象属性注入</td>
</tr>
<tr>
<td>&lt; property name=”” value=””&gt;</td>
<td>@Value</td>
<td>bean的简单属性注入</td>
</tr>
<tr>
<td>&lt; bean scope=””&gt;</td>
<td>@Scope</td>
<td>控制bean的作用范围</td>
</tr>
<tr>
<td>&lt; bean init-method=”init” destroy method=”destory” /&gt;</td>
<td>@PostConstruct @PreDestroy</td>
<td>bean创建之后和销毁之前分别调用的方法</td>
</tr>
</tbody></table>
<blockquote>
<p>常用注解</p>
<ul>
<li><p>向Spring容器中放入对象 <code>@Component</code>、<code>@Controller</code>、<code>@Service</code>、<code>@Repository</code></p>
</li>
<li><p>从Spring容器中获取对象 <code>@Autowired</code></p>
</li>
</ul>
</blockquote>
<h1 id="使用Spring常用注解版操作数据库"><a href="#使用Spring常用注解版操作数据库" class="headerlink" title="使用Spring常用注解版操作数据库"></a>使用Spring常用注解版操作数据库</h1><p>常用注解版：指的是自己写的类使用注解配置,  第三方的类使用xml配置</p>
<h2 id="准备实体类及数据库的表"><a href="#准备实体类及数据库的表" class="headerlink" title="准备实体类及数据库的表"></a>准备实体类及数据库的表</h2><ul>
<li>数据库表</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table account(</span><br><span class="line">	aid int primary key auto_increment,</span><br><span class="line">	name varchar(100) not null unique,</span><br><span class="line">	balance float(10,2)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>



<ul>
<li>实体类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer aid;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Float balance;</span><br><span class="line">    <span class="comment">//get、set、全参/无参方法略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Dao接口及实现类"><a href="#Dao接口及实现类" class="headerlink" title="Dao接口及实现类"></a>Dao接口及实现类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Account <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateByName</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">//进行依赖注入</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> QueryRunner queryRunner;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            queryRunner.update(<span class="string">"insert into account values(null,?,?)"</span>,account.getName(),account.getBalance());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> queryRunner.query(<span class="string">"select * from account where name = ?"</span>,<span class="keyword">new</span> BeanHandler&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>),<span class="title">name</span>)</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> queryRunner.query(<span class="string">"select * from account"</span>,<span class="keyword">new</span> BeanListHandler&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            queryRunner.update(<span class="string">"delete from account where name = ?"</span>,name);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateByName</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            queryRunner.update(<span class="string">"update account set balance = ? where name = ?"</span>,account.getBalance(),account.getName());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Service接口及实现类"><a href="#Service接口及实现类" class="headerlink" title="Service接口及实现类"></a>Service接口及实现类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Account <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateByName</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//进行依赖注入</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        accountDao.save(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findByName(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        accountDao.deleteByName(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateByName</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        accountDao.updateByName(account);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="SpringXML配置"><a href="#SpringXML配置" class="headerlink" title="SpringXML配置"></a>SpringXML配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">			    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">			    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">			    http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--添加组件扫描，扫描注解--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.sun"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///spring?characterEncoding=utf8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"queryRunner"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbutils.QueryRunner"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"ds"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//读取配置文件，初始化IOC容器</span></span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">    AccountService accountService = ac.getBean(AccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//测试查找所有</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        List&lt;Account&gt; all = accountService.findAll();</span><br><span class="line">        <span class="keyword">for</span> (Account account : all) &#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//测试查找一个,略...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试保存,略...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试修改,略...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试根据名称删除,略...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="Spring纯注解开发"><a href="#Spring纯注解开发" class="headerlink" title="Spring纯注解开发"></a>Spring纯注解开发</h1><p>改造上面案例，使用纯注解开发的方式，即无XML配置方式开发</p>
<p>涉及新注解：</p>
<ul>
<li><code>@ComponentScan</code>：组件扫描注解。 相当于xml配置文件中的&lt;context:component-scan base-package=””/&gt; </li>
<li><code>@Bean</code>(重点)：该注解只能写在方法上，表明使用此方法创建一个对象，并且放入spring容器。它支持一个name属性，用于给生成的bean取一个id。 </li>
</ul>
<h2 id="删除XML配置文件中所有内容"><a href="#删除XML配置文件中所有内容" class="headerlink" title="删除XML配置文件中所有内容"></a>删除XML配置文件中所有内容</h2><p>略…</p>
<h2 id="创建一个Java类作为配置类"><a href="#创建一个Java类作为配置类" class="headerlink" title="创建一个Java类作为配置类"></a>创建一个Java类作为配置类</h2><ul>
<li>SpringConfig.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.sun"</span>)  <span class="comment">// 组件扫描注解。相当于xml配置文件中的&lt;context:component-scan base-package=""/&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * @Bean 注解的使用：</span></span><br><span class="line"><span class="comment">     *      1.只能标注在方法上，作用时获得当前方法的返回值对象，放入SpringIOC容器中</span></span><br><span class="line"><span class="comment">     *      2.放入到容器中的对象默认Id为当前方法的名字，也可以通过@Bean(name/value="")指定id名称</span></span><br><span class="line"><span class="comment">     *      3.@Bean还具有@Autowired标注在方法上的所有功能</span></span><br><span class="line"><span class="comment">     *      4.如果当前方法需要参数，那么会自动从Spring容器中查找，查找顺序和@Autowired一致</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"datasource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">getDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DruidDataSource dataSource =  <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">"jdbc:mysql:///spring"</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">"root"</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> QueryRunner <span class="title">queryRunner</span><span class="params">(DataSource dataSource)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> QueryRunner(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//读取配置文件，初始化IOC容器</span></span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfig<span class="class">.<span class="keyword">class</span>)</span>;<span class="comment">//读取配置类</span></span><br><span class="line">    AccountService accountService = ac.getBean(AccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//测试查找所有</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        List&lt;Account&gt; all = accountService.findAll();</span><br><span class="line">        <span class="keyword">for</span> (Account account : all) &#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//测试查找一个,略...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试保存,略...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试修改,略...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试根据名称删除,略...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="优化一：提取数据库配置信息"><a href="#优化一：提取数据库配置信息" class="headerlink" title="优化一：提取数据库配置信息"></a>优化一：提取数据库配置信息</h2><p>因为后期可能对数据库的配置信息进行修改，所以我们不能使用硬编码的方式再程序中写死，可以提取到配置文件中进行引入。</p>
<ul>
<li>涉及注解：<ul>
<li><code>@PropertySource(&quot;jdbc.properties&quot;)</code>引入一个外部的数据库配置文件</li>
<li><code>@Value</code>：给简单类型注入值</li>
</ul>
</li>
</ul>
<p>jdbc.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span> = <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span> = <span class="string">jdbc:mysql:///spring</span></span><br><span class="line"><span class="meta">jdbc.username</span> = <span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span> = <span class="string">root</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.sun"</span>)  <span class="comment">// 组件扫描注解。相当于xml配置文件中的&lt;context:component-scan base-package=""/&gt;</span></span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"jdbc.properties"</span>) <span class="comment">// 引入一个外部的数据库配置文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//注入值</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.driver&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.url&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.username&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.password&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"datasource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">getDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DruidDataSource dataSource =  <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        <span class="comment">//下列数据库信息应当提取到配置文件中，方便后期更改</span></span><br><span class="line">        dataSource.setDriverClassName(driver);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> QueryRunner <span class="title">queryRunner</span><span class="params">(DataSource dataSource)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> QueryRunner(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小贴士：</p>
<ul>
<li>可以使用注解<code>@PropertySource(&quot;jdbc.properties&quot;)</code>引入一个外部的数据库配置文件</li>
</ul>
</blockquote>
<h2 id="优化二-配置类分模块"><a href="#优化二-配置类分模块" class="headerlink" title="优化二: 配置类分模块"></a>优化二: 配置类分模块</h2><p>后期配置项可以过多，xml文件可以进行模块化，Java配置类同样可以</p>
<p>涉及注解：</p>
<ul>
<li><code>@Import</code>：在一个配置类中导入其它配置类的内容</li>
<li><code>@Configuration</code>：被此注解标注的类,会被Spring认为是配置类。Spring在启动的时候会自动扫描并加载所有配置类，然后将配置类中bean放入容器</li>
</ul>
<p>注意：这两个注解的作用相同，都是进行配置类的加载，但是如果配置类过多的话，会导致@Import注解写太多次</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@Import(DruidConfig.class)  //在一个配置类中导入其它配置类的内容</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.sun"</span>)  <span class="comment">// 组件扫描注解。相当于xml配置文件中的&lt;context:component-scan base-package=""/&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> QueryRunner <span class="title">queryRunner</span><span class="params">(DataSource dataSource)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> QueryRunner(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  <span class="comment">//被此注解标注的类,会被Spring认为是配置类。Spring在启动的时候会自动扫描并加载所有配置类，然后将配置类中bean放入容器,代替@import注解</span></span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"jdbc.properties"</span>) <span class="comment">// 引入一个外部的数据库配置文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//注入值</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.driver&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.url&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.username&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.password&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"datasource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">getDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DruidDataSource dataSource =  <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        <span class="comment">//下列数据库信息应当提取到配置文件中，方便后期更改</span></span><br><span class="line">        dataSource.setDriverClassName(driver);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小贴士：</p>
<ul>
<li>推荐使用<code>@Configuration</code>加载多个配置类</li>
</ul>
</blockquote>
<h2 id="注解总结-1"><a href="#注解总结-1" class="headerlink" title="注解总结"></a>注解总结</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">@ComponentScan</span><br><span class="line"><span class="code">	组件扫描注解。 相当于xml配置文件中的&lt;context:component-scan base-package=""/&gt; </span></span><br><span class="line"></span><br><span class="line">@Bean(重点)</span><br><span class="line"><span class="code">	该注解只能写在方法上，表明使用此方法创建一个对象，并且放入spring容器。它支持一个name属性，用于给生成的bean取一个id。 </span></span><br><span class="line"></span><br><span class="line">@PropertySource</span><br><span class="line"><span class="code">	用于引入其它的properties配置文件</span></span><br><span class="line"></span><br><span class="line">@Import</span><br><span class="line"><span class="code">	在一个配置类中导入其它配置类的内容</span></span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line"><span class="code">	被此注解标注的类,会被Spring认为是配置类。Spring在启动的时候会自动扫描并加载所有配置类，然后将配置类中bean放入容器</span></span><br></pre></td></tr></table></figure>



<h1 id="Spring整合单元测试"><a href="#Spring整合单元测试" class="headerlink" title="Spring整合单元测试"></a>Spring整合单元测试</h1><p>在单元测试中，当点击run的时候，底层工作的其实是一个运行器，这个运行器是Junit提供的，它不认识Spring的环境，这也就意味着它无法从spring的容器中获取bean，如果想要从Spring的容器中获取对象，那就必须先认识Spring环境，Spring提供了一个运行器,这个运行器就认识Spring环境, 也就可以获取对象了。</p>
<p>涉及注解：</p>
<ul>
<li><code>@ContextConfiguration</code>：向运行器传递配置文件的位置</li>
<li><code>@RunWith</code>：切换单元测试运行器</li>
</ul>
<p><strong>使用实例：</strong></p>
<ul>
<li>前提：导入依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring单元测试--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>修改测试类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Spring整合单元测试  涉及注解：@ContextConfiguration   @RunWith</span></span><br><span class="line"><span class="comment">//@ContextConfiguration("classpath:applicationContext.xml")   //向运行器传递配置文件的位置</span></span><br><span class="line"><span class="meta">@ContextConfiguration</span>(classes = SpringConfig<span class="class">.<span class="keyword">class</span>)   //向运行器传递配置文件的位置</span></span><br><span class="line"><span class="class">@<span class="title">RunWith</span>(<span class="title">SpringJUnit4ClassRunner</span>.<span class="title">class</span>)      //切换单元测试运行器</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">AccountTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//注入service对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AccountService accountService;</span><br><span class="line">    <span class="comment">//测试查找所有</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        List&lt;Account&gt; all = accountService.findAll();</span><br><span class="line">        <span class="keyword">for</span> (Account account : all) &#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="转账案例之事务问题"><a href="#转账案例之事务问题" class="headerlink" title="转账案例之事务问题"></a>转账案例之事务问题</h1><h2 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h2><h3 id="实体和表"><a href="#实体和表" class="headerlink" title="实体和表"></a>实体和表</h3><p>数据库复用之前的account表</p>
<p>实体:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Account实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer aid;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Float balance;</span><br><span class="line">    <span class="comment">//get、set构造方法略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="dao接口及实现"><a href="#dao接口及实现" class="headerlink" title="dao接口及实现"></a>dao接口及实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据名称查找一个账号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Account <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据名称修改账户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateByName</span><span class="params">(Account account)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> QueryRunner queryRunner;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> queryRunner.query(<span class="string">"select * from account where name = ?"</span>,<span class="keyword">new</span> BeanHandler&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>),<span class="title">name</span>)</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateByName</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            queryRunner.update(<span class="string">"update account set balance = ? where name = ?"</span>,account.getBalance(),account.getName());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="service接口及实现"><a href="#service接口及实现" class="headerlink" title="service接口及实现"></a>service接口及实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转账方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceAccount 转出用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetAccount 转入用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money 转账金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceAccount, String targetAccount, Float money)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceAccount, String targetAccount, Float money)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.查询数据库获取两个用户</span></span><br><span class="line">        Account source = accountDao.findByName(sourceAccount);</span><br><span class="line">        Account target = accountDao.findByName(targetAccount);</span><br><span class="line">        <span class="comment">//2.在内存中做出转账操作</span></span><br><span class="line">        <span class="comment">//2.1 源账户-money</span></span><br><span class="line">        source.setBalance(source.getBalance() - money);</span><br><span class="line">        <span class="comment">//2.2 目标账户+money</span></span><br><span class="line">        target.setBalance(target.getBalance() + money);</span><br><span class="line">        <span class="comment">//3.设置回数据库</span></span><br><span class="line">        accountDao.updateByName(source);</span><br><span class="line">        accountDao.updateByName(target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="xml配置"><a href="#xml配置" class="headerlink" title="xml配置"></a>xml配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">			    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">			    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">			    http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--组件扫描——注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.sun"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"datasource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///spring"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"queryRunner"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbutils.QueryRunner"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"ds"</span> <span class="attr">ref</span>=<span class="string">"datasource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="测试-3"><a href="#测试-3" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        accountService.transfer(<span class="string">"A01"</span>,<span class="string">"A02"</span>,<span class="number">10f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="存在的事务问题"><a href="#存在的事务问题" class="headerlink" title="存在的事务问题"></a>存在的事务问题</h2><p>代码存在事务问题，事务问题原因是:  每执行完一条sql语句后， jdbc会自动提交事务</p>
<p>如果想要控制事务就要关闭事务的自动提交，而选择手动提交事务</p>
<p>要手动提交事务，就要保证执行多条sql语句的是同一个connection</p>
<h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><p>想办法让同一个业务中的所有sql使用同一个connection</p>
<blockquote>
<p>让同一个业务中的所有SQL语句使用同一个连接，也就是说：当一个业务中有多条SQL的时候<br>不是每执行一条SQL就去连接池获取一个连接，用完了就归还<br>而是在第一条SQL执行之前获取到连接，用完了暂不归还，而是等到所有的SQL都执行完毕再归还</p>
</blockquote>
<p>想办法禁止自动提交，然后手动控制事务的提交和回滚</p>
<blockquote>
<p>开发一个事务管理器的类，在里面手动控制事务的开启和关闭</p>
</blockquote>
<p><img data-src="/assets/%E8%BD%AC%E8%B4%A6%E6%A1%88%E4%BE%8B%E4%BA%8B%E5%8A%A1%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%80%9D%E8%B7%AF.png" alt="转账案例事务问题解决思路"></p>
<h2 id="ThreadLocal介绍"><a href="#ThreadLocal介绍" class="headerlink" title="ThreadLocal介绍"></a>ThreadLocal介绍</h2><p>本地局部变量，它的底层就是一个特殊的map结构，此map的键是固定的，是当前线程对象</p>
<p>常见方法:</p>
<ul>
<li>set(value) ：向ThreadLocal中存入值</li>
<li>get()：从ThreadLocal取出值</li>
<li>remove() ：移除ThreadLocal中跟当前线程相关的数据</li>
</ul>
<blockquote>
<p>JDK中给我们提供了这样一个类，我们可以直接使用</p>
</blockquote>
<h1 id="解决事务问题"><a href="#解决事务问题" class="headerlink" title="解决事务问题"></a>解决事务问题</h1><p>再上一个案例的基础上，我们进行改造</p>
<h2 id="开发事务管理器"><a href="#开发事务管理器" class="headerlink" title="开发事务管理器"></a>开发事务管理器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 事务管理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line">    <span class="comment">//本地集合</span></span><br><span class="line">    <span class="keyword">private</span> ThreadLocal&lt;Connection&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;Connection&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取到Connection对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Connection connection = threadLocal.get();</span><br><span class="line">        <span class="keyword">if</span> (connection == <span class="keyword">null</span>)&#123; <span class="comment">//链接不存在</span></span><br><span class="line">            <span class="comment">//获取链接</span></span><br><span class="line">            connection = dataSource.getConnection();</span><br><span class="line">            <span class="comment">//存入本地集合</span></span><br><span class="line">            threadLocal.set(connection);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开启事务方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">begin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//开启事务</span></span><br><span class="line">            getConnection().setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提交事务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            getConnection().commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//回滚事务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            getConnection().rollback();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭事务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            getConnection().close();</span><br><span class="line">            <span class="comment">//释放集合中的存储的链接</span></span><br><span class="line">            threadLocal.remove();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="修改dao层代码"><a href="#修改dao层代码" class="headerlink" title="修改dao层代码"></a>修改dao层代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> QueryRunner queryRunner;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TxManager txManager;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> queryRunner.query(txManager.getConnection(),<span class="string">"select * from account where name = ?"</span>,<span class="keyword">new</span> BeanHandler&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>),<span class="title">name</span>)</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateByName</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            queryRunner.update(txManager.getConnection(),<span class="string">"update account set balance = ? where name = ?"</span>,account.getBalance(),account.getName());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：改造后我们再执行sql时传递一个链接对象，指定连接对象去执行sql，该对象就是再ThreadLocal中获取的，由此便保证再执行一个事务的时候，我们获取到的连接对象是一致的。</p>
</blockquote>
<h2 id="修改Service层代码"><a href="#修改Service层代码" class="headerlink" title="修改Service层代码"></a>修改Service层代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TxManager txManager;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceAccount, String targetAccount, Float money)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            存在的问题：</span></span><br><span class="line"><span class="comment">                代码存在事务问题，事务问题原因是:  每执行完一条sql语句后， jdbc会自动提交事务</span></span><br><span class="line"><span class="comment">                如果想要控制事务就要关闭事务的自动提交，而选择手动提交事务</span></span><br><span class="line"><span class="comment">                要手动提交事务，就要保证执行多条sql语句的是同一个connection</span></span><br><span class="line"><span class="comment">            解决思路：</span></span><br><span class="line"><span class="comment">                想办法让同一个业务中的所有sql使用同一个connection</span></span><br><span class="line"><span class="comment">                让同一个业务中的所有SQL语句使用同一个连接，也就是说：当一个业务中有多条SQL的时候</span></span><br><span class="line"><span class="comment">                不是每执行一条SQL就去连接池获取一个连接，用完了就归还</span></span><br><span class="line"><span class="comment">                而是在第一条SQL执行之前获取到连接，用完了暂不归还，而是等到所有的SQL都执行完毕再归还</span></span><br><span class="line"><span class="comment">                想办法禁止自动提交，然后手动控制事务的提交和回滚</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//开启事务</span></span><br><span class="line">            txManager.begin();</span><br><span class="line">            <span class="comment">// 执行sql</span></span><br><span class="line">            <span class="comment">//1.查询数据库获取两个用户</span></span><br><span class="line">            Account source = accountDao.findByName(sourceAccount);</span><br><span class="line">            Account target = accountDao.findByName(targetAccount);</span><br><span class="line">            <span class="comment">//2.在内存中做出转账操作</span></span><br><span class="line">            <span class="comment">//2.1 源账户-money</span></span><br><span class="line">            source.setBalance(source.getBalance() - money);</span><br><span class="line">            <span class="comment">//2.2 目标账户+money</span></span><br><span class="line">            target.setBalance(target.getBalance() + money);</span><br><span class="line">            <span class="comment">//3.设置回数据库</span></span><br><span class="line">            accountDao.updateByName(source);</span><br><span class="line">            <span class="comment">//模拟程序出现异常</span></span><br><span class="line">            <span class="comment">//int i = 1 / 0;</span></span><br><span class="line">            accountDao.updateByName(target);</span><br><span class="line">            <span class="comment">//提交事务</span></span><br><span class="line">            txManager.commit();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">//事务回滚</span></span><br><span class="line">            txManager.rollback();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//事务关闭</span></span><br><span class="line">            txManager.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="改造后存在的问题"><a href="#改造后存在的问题" class="headerlink" title="改造后存在的问题"></a>改造后存在的问题</h2><p>现在的事务代码和业务代码严重耦合在一起了，我们希望的是这样：在不改动原来业务代码的前提下，给代码添加事务管理功能</p>
<p>即：在不修改源代码的情况下，给代码增强功能</p>
<h2 id="解决思路-1"><a href="#解决思路-1" class="headerlink" title="解决思路"></a>解决思路</h2><p>使用动态代理进行功能的增强</p>
]]></content>
      <categories>
        <category>框架</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>spring注解</tag>
        <tag>常用注解版开发</tag>
        <tag>纯注解开发</tag>
        <tag>转账之事务</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-3</title>
    <url>/2020/09/25/Spring-3/</url>
    <content><![CDATA[<h1 id="使用动态代理优化转账代码"><a href="#使用动态代理优化转账代码" class="headerlink" title="使用动态代理优化转账代码"></a>使用动态代理优化转账代码</h1><h2 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h2><blockquote>
<p>目标对象   + 代理逻辑  = 代理对象</p>
<p>目标对象:    被代理的对象–AccountServiceImpl</p>
<p>代理逻辑:    要增强的功能–事务管理</p>
<p>代理对象:     一个具有事务管理功能的Service </p>
</blockquote>
<a id="more"></a>

<h3 id="目标对象"><a href="#目标对象" class="headerlink" title="目标对象"></a>目标对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceAccount, String targetAccount, Float money)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//1.查询数据库获取两个用户</span></span><br><span class="line">            Account source = accountDao.findByName(sourceAccount);</span><br><span class="line">            Account target = accountDao.findByName(targetAccount);</span><br><span class="line">            <span class="comment">//2.在内存中做出转账操作</span></span><br><span class="line">            <span class="comment">//2.1 源账户-money</span></span><br><span class="line">            source.setBalance(source.getBalance() - money);</span><br><span class="line">            <span class="comment">//2.2 目标账户+money</span></span><br><span class="line">            target.setBalance(target.getBalance() + money);</span><br><span class="line">            <span class="comment">//3.设置回数据库</span></span><br><span class="line">            accountDao.updateByName(source);</span><br><span class="line">            <span class="comment">//模拟程序出现异常</span></span><br><span class="line">            <span class="comment">//int i = 1 / 0;</span></span><br><span class="line">            accountDao.updateByName(target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="代理逻辑"><a href="#代理逻辑" class="headerlink" title="代理逻辑"></a>代理逻辑</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 事务管理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line">    <span class="comment">//本地集合</span></span><br><span class="line">    <span class="keyword">private</span> ThreadLocal&lt;Connection&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;Connection&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取到Connection对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Connection connection = threadLocal.get();</span><br><span class="line">        <span class="keyword">if</span> (connection == <span class="keyword">null</span>)&#123; <span class="comment">//链接不存在</span></span><br><span class="line">            <span class="comment">//获取链接</span></span><br><span class="line">            connection = dataSource.getConnection();</span><br><span class="line">            <span class="comment">//存入本地集合</span></span><br><span class="line">            threadLocal.set(connection);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开启事务方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">begin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//开启事务</span></span><br><span class="line">            getConnection().setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提交事务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            getConnection().commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//回滚事务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            getConnection().rollback();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭事务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            getConnection().close();</span><br><span class="line">            <span class="comment">//释放集合中的存储的链接</span></span><br><span class="line">            threadLocal.remove();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="生存代理对象"><a href="#生存代理对象" class="headerlink" title="生存代理对象"></a>生存代理对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TxManager txManager;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//jdk动态代理进行事务的控制</span></span><br><span class="line">        AccountService instance = (AccountService) Proxy.newProxyInstance(</span><br><span class="line">                accountService.getClass().getClassLoader(),</span><br><span class="line">                accountService.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                        Object obj = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="keyword">try</span>&#123;</span><br><span class="line">                            <span class="comment">//事务开启</span></span><br><span class="line">                            txManager.begin();</span><br><span class="line">                            <span class="comment">//执行业务代码</span></span><br><span class="line">                            obj = method.invoke(accountService, args);</span><br><span class="line">                            <span class="comment">//事务提交</span></span><br><span class="line">                            txManager.commit();</span><br><span class="line">                        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                            <span class="comment">//回滚</span></span><br><span class="line">                            txManager.rollback();</span><br><span class="line">                        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                            <span class="comment">//关闭</span></span><br><span class="line">                            txManager.close();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> obj;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">        <span class="comment">//代理对象调用方法</span></span><br><span class="line">        instance.transfer(<span class="string">"A01"</span>,<span class="string">"A02"</span>,<span class="number">10f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="cglib动态代理"><a href="#cglib动态代理" class="headerlink" title="cglib动态代理"></a>cglib动态代理</h2><blockquote>
<p>复制上一个工程</p>
</blockquote>
<blockquote>
<p>删除AccountService接口及相关内容</p>
</blockquote>
<h3 id="使用cglib创建代理对象"><a href="#使用cglib创建代理对象" class="headerlink" title="使用cglib创建代理对象"></a>使用cglib创建代理对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountServiceImpl accountService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TxManager txManager;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//cglib完成动态代理</span></span><br><span class="line">        <span class="comment">//1.获取增强器</span></span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        <span class="comment">//2.设置父类</span></span><br><span class="line">        enhancer.setSuperclass(AccountServiceImpl<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//代理逻辑</span></span><br><span class="line">        InvocationHandler invocationHandler = <span class="keyword">new</span> InvocationHandler()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object o, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                Object obj = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    txManager.begin();</span><br><span class="line">                    method.invoke(accountService,args);</span><br><span class="line">                    txManager.commit();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    txManager.rollback();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    txManager.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> obj;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//3.设置代理逻辑</span></span><br><span class="line">        enhancer.setCallback(invocationHandler);</span><br><span class="line">        <span class="comment">//4.创建代理对象</span></span><br><span class="line">        AccountServiceImpl service = (AccountServiceImpl) enhancer.create();</span><br><span class="line">        <span class="comment">//执行方法</span></span><br><span class="line">        service.transfer(<span class="string">"A01"</span>,<span class="string">"A02"</span>,<span class="number">1f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="jdk和cglib两种代理方式的选择"><a href="#jdk和cglib两种代理方式的选择" class="headerlink" title="jdk和cglib两种代理方式的选择"></a>jdk和cglib两种代理方式的选择</h2><p>首先明确在创建代理实现类时，jdk的速度要高于cglib，所以选择的时候:</p>
<ul>
<li><p>当被代理类有接口的时候，使用jdk动态代理，因为它的效率高</p>
</li>
<li><p>当被代理类没有接口的时候，使用cglib动态代理，因为没办法</p>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img data-src="/assets/aop%E6%8E%A8%E5%AF%BC.png" alt="aop推导"></p>
<p>当核心业务（转账）和增强业务（事务）同时出现时，我们可以在开发时对他们分别开发，运行时再组装在一起（使用动态代理的方式）。</p>
<p>这样做的好处是：</p>
<ol>
<li>逻辑清晰，开发核心业务的时候，不必关注增强业务的代码</li>
<li>代码复用性高：增强代码不用重复书写</li>
</ol>
<p>这就是一种 AOP 的思想。 </p>
<p>总结:  <code>开发阶段分别开发  运行阶段组装运行</code></p>
<h1 id="AOP介绍"><a href="#AOP介绍" class="headerlink" title="AOP介绍"></a>AOP介绍</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>AOP( 面向切面编程 )是一种思想，它的目的就是在不修改源代码的基础上，对原有功能进行增强。</p>
<p>SpringAOP是对AOP思想的一种实现，Spring底层同时支持jdk和cglib动态代理。</p>
<p>Spring会根据被代理的类是否有接口自动选择代理方式：</p>
<ul>
<li>如果有接口，就采用jdk动态代理(当然，也可以强制使用cglib)</li>
<li>没有接口就采用cglib的方式</li>
</ul>
<p><img data-src="/assets/aop%E6%A6%82%E5%BF%B5.png" alt="aop概念"></p>
<h2 id="AOP中的术语"><a href="#AOP中的术语" class="headerlink" title="AOP中的术语"></a>AOP中的术语</h2><p><code>目标对象</code></p>
<ul>
<li>被代理的对象</li>
</ul>
<p><code>连接点</code></p>
<ul>
<li>被代理的对象中的所有方法</li>
</ul>
<p><code>切入点</code></p>
<ul>
<li>被代理的对象中的一部分方法(要进行功能增强的部分)</li>
</ul>
<p><code>增强(通知)</code></p>
<ul>
<li>一个具体的功能(打日志 开启事务  提交事务    增强类  增强方法)</li>
</ul>
<p><code>织入</code></p>
<ul>
<li>将切入点代码和增强方法合在一起的动作</li>
</ul>
<p><code>代理对象</code></p>
<ul>
<li>经过织入之后产生对象</li>
</ul>
<p><code>切面</code></p>
<ul>
<li>切点 +  增强</li>
<li>切面是一种描述, 描述了这样一件事: 一个<strong>什么样的增强功能</strong>添加在了<strong>哪些切点的</strong> <strong>什么位置</strong>上</li>
<li>切面就是描述的切点方法和增强方法的执行顺序</li>
</ul>
<p><img data-src="/assets/aop%E6%9C%AF%E8%AF%AD%E8%AE%B2%E8%A7%A3.png" alt="aop术语讲解"></p>
<h1 id="SpringAOP的入门案例"><a href="#SpringAOP的入门案例" class="headerlink" title="SpringAOP的入门案例"></a>SpringAOP的入门案例</h1><p>需求：模拟打印日志功能——在AccountServiceImpl类中的方法上打印日志</p>
<h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p><code>找二配一</code>：</p>
<ul>
<li><strong>找目标对象、增强对象</strong></li>
<li><strong>配置切面——生成代理对象</strong></li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="新建工程导入相关坐标"><a href="#新建工程导入相关坐标" class="headerlink" title="新建工程导入相关坐标"></a>新建工程导入相关坐标</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>day03_03_spring_aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切点表达式解析坐标--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="创建service接口及实现类-目标对象"><a href="#创建service接口及实现类-目标对象" class="headerlink" title="创建service接口及实现类(目标对象)"></a>创建service接口及实现类(目标对象)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(Object o)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Object&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Object <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"save"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"findAll"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">findByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"findByName"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="创建增强类-Logger"><a href="#创建增强类-Logger" class="headerlink" title="创建增强类(Logger)"></a>创建增强类(Logger)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"即将执行方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="配置切面"><a href="#配置切面" class="headerlink" title="配置切面"></a>配置切面</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--目标对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.sun.service.impl.AccountServiceImpl"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--增强对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"logger"</span> <span class="attr">class</span>=<span class="string">"com.sun.log.Logger"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--aop配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置切点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pt"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.sun.service.impl.AccountServiceImpl.findAll())"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            配置切面</span></span><br><span class="line"><span class="comment">            切面：切点(目标对象) + 增强(增强对象)</span></span><br><span class="line"><span class="comment">            切面是一种描述，描述了这样一件事：</span></span><br><span class="line"><span class="comment">                一个【什么样的增强功能】 添加在了【哪些切点的】【什么位置】上</span></span><br><span class="line"><span class="comment">            ref="logger"    用于指定增强类</span></span><br><span class="line"><span class="comment">            method="beforeMethod" 用于指定增强类中的一个具体的增强的方法</span></span><br><span class="line"><span class="comment">            pointcut-ref    指定切点</span></span><br><span class="line"><span class="comment">            aop:before  增强方法再切点方法中的之前执行</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"logger"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"beforeMethod"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        accountService.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="/assets/aop%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C.png" alt="aop快速入门执行结果">    </p>
<h1 id="SpringAOP配置详解"><a href="#SpringAOP配置详解" class="headerlink" title="SpringAOP配置详解"></a>SpringAOP配置详解</h1><h2 id="切点表达式"><a href="#切点表达式" class="headerlink" title="切点表达式"></a>切点表达式</h2><p>切点表达式的作用:  定义一组规则, 用于在连接点中挑选切点</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">配置切点</span></span><br><span class="line"><span class="comment">    切点表达式：通过一组表达式规则，在众多连接点中去挑选切点</span></span><br><span class="line"><span class="comment">    *   占位符，一个或者多个位置</span></span><br><span class="line"><span class="comment">    ..  占位符，零个或者多个位置</span></span><br><span class="line"><span class="comment">    当前配置表示匹配impl包下所有类中的所有方法，并且方法的参数可以是任意个</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pt"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.sun.service.impl.*.*(..))"</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="四大通知"><a href="#四大通知" class="headerlink" title="四大通知"></a>四大通知</h2><p>四大通知描述的就是增强方法在切点方法的什么位置上执行</p>
<ul>
<li>前置通知(before) ：在切点运行之前执行</li>
<li>后置通知(after-returning)：在切点正常运行结束之后执行</li>
<li>异常通知(after-throwing)：在切点发生异常的时候执行</li>
<li>最终通知(after)：在切点的最终执行</li>
</ul>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//前置通知(before) ：在切点运行之前执行</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//切点执行</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//后置通知(after-returning)：在切点正常运行结束之后执行</span></span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">    <span class="comment">//异常通知(after-throwing)：在切点发生异常的时候执行</span></span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//最终通知(after)：在切点的最终执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="给Logger类添加方法"><a href="#给Logger类添加方法" class="headerlink" title="给Logger类添加方法"></a>给Logger类添加方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"即将执行方法..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterRetureMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"方法正常结束..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"方法出现异常..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"方法运行到最后..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="添加aop配置"><a href="#添加aop配置" class="headerlink" title="添加aop配置"></a>添加aop配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"logger"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"beforeMethod"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"afterReturnMethod"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"afterThrowMethod"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"afterMethod"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：当四大通知同时出现的时候, 它的执行顺序会受到配置顺序的影响</strong></p>
<h2 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h2><p>它是一种特殊的通知，他允许你以编码的形式实现四大通知</p>
<h3 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aroundMethod</span><span class="params">(ProceedingJoinPoint point)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"即将执行方法..."</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//切点执行</span></span><br><span class="line">            point.proceed();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"方法正常结束..."</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"方法出现异常..."</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"方法运行到最后..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"logger"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"aroundMethod"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="AOP工作原理"><a href="#AOP工作原理" class="headerlink" title="AOP工作原理"></a>AOP工作原理</h1><h2 id="开发阶段-开发者完成"><a href="#开发阶段-开发者完成" class="headerlink" title="开发阶段(开发者完成)"></a>开发阶段(开发者完成)</h2><p>开发共性功能，制作成增强</p>
<p>开发非共性功能，制作成切点</p>
<p>在配置文件中，声明切点与增强间的关系，即切面</p>
<h2 id="容器启动阶段-AOP完成"><a href="#容器启动阶段-AOP完成" class="headerlink" title="容器启动阶段(AOP完成)"></a>容器启动阶段(AOP完成)</h2><p>Spring读取配置文件中的切面信息，根据切面中的描述, 将<code>增强功能</code>增加在<code>目标对象的切点方法</code>上，动态创建代理对象, 最后将代理对象放入容器中 </p>
<blockquote>
<p>AOP应用：日志处理、事务、性能统计</p>
</blockquote>
<h1 id="SpringAOP注解版"><a href="#SpringAOP注解版" class="headerlink" title="SpringAOP注解版"></a>SpringAOP注解版</h1><h2 id="复制入门案例"><a href="#复制入门案例" class="headerlink" title="复制入门案例"></a>复制入门案例</h2><p>略…</p>
<h2 id="添加组件扫描"><a href="#添加组件扫描" class="headerlink" title="添加组件扫描"></a>添加组件扫描</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.sun"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="使用注解实例化对象-Logger和AccountServiceImpl"><a href="#使用注解实例化对象-Logger和AccountServiceImpl" class="headerlink" title="使用注解实例化对象(Logger和AccountServiceImpl)"></a>使用注解实例化对象(Logger和AccountServiceImpl)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure>



<h2 id="四大通知-1"><a href="#四大通知-1" class="headerlink" title="四大通知"></a>四大通知</h2><blockquote>
<p>将切面配置转移到增强类上</p>
</blockquote>
<h3 id="激活切面自动代理"><a href="#激活切面自动代理" class="headerlink" title="激活切面自动代理"></a>激活切面自动代理</h3><blockquote>
<p>spring配置</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--激活切面自动代理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="修改增强类"><a href="#修改增强类" class="headerlink" title="修改增强类"></a>修改增强类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span><span class="comment">//表明当前这是一个切面(切点 + 增强)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义切点表达式</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.sun.service.impl.*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pt</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//代表的是当前增强方法再pt()挑选出来的切点前面执行</span></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"pt()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"即将执行方法..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AfterReturning</span>(<span class="string">"pt()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturnMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"方法正常结束..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AfterThrowing</span>(<span class="string">"pt()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"方法出现异常..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"pt()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"方法运行到最后..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>略….</p>
<blockquote>
<p><strong>注意：四大通知同时出现的时候,注解版会有顺序问题, 不能用</strong></p>
</blockquote>
<h2 id="环绕通知-1"><a href="#环绕通知-1" class="headerlink" title="环绕通知"></a>环绕通知</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span><span class="comment">//表明当前这是一个切面(切点 + 增强)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义切点表达式</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.sun.service.impl.*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pt</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//环绕通知,两种写法</span></span><br><span class="line">    <span class="comment">//@Around("pt()")</span></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"execution(* com.sun.service.impl.*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aroundMethod</span><span class="params">(ProceedingJoinPoint point)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"即将执行方法..."</span>);</span><br><span class="line">            <span class="comment">//切点执行</span></span><br><span class="line">            point.proceed();</span><br><span class="line">            System.out.println(<span class="string">"方法正常结束..."</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"方法出现异常..."</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"方法运行到最后..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="纯注解版"><a href="#纯注解版" class="headerlink" title="纯注解版"></a>纯注解版</h2><p>现在xml配置中只剩两条配置，配置<strong>组件扫描</strong>和<strong>激活切面自动代理</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.sun"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--激活切面自动代理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="提取配置"><a href="#提取配置" class="headerlink" title="提取配置"></a>提取配置</h3><p>定义配置Java类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.sun"</span>)<span class="comment">//组件扫描</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span> <span class="comment">//激活切面自动代理，相当于xml中的&lt;aop:aspectj-autoproxy/&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">classes</span> </span>= SpringConfig<span class="class">.<span class="keyword">class</span>) //读取<span class="title">Java</span>配置类</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        accountService.findAll();</span><br><span class="line">        System.out.println(<span class="string">"===================="</span>);</span><br><span class="line">        accountService.save(<span class="string">"1"</span>);</span><br><span class="line">        System.out.println(<span class="string">"===================="</span>);</span><br><span class="line">        accountService.findByName(<span class="string">"1"</span>);</span><br><span class="line">        System.out.println(<span class="string">"===================="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="SpringAOP实现事务管理"><a href="#SpringAOP实现事务管理" class="headerlink" title="SpringAOP实现事务管理"></a>SpringAOP实现事务管理</h1><blockquote>
<p>使用AOP实现转账事务的管理</p>
</blockquote>
<h2 id="dao接口及实现类"><a href="#dao接口及实现类" class="headerlink" title="dao接口及实现类"></a>dao接口及实现类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据名称查找一个账号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Account <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据名称修改账户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateByName</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> QueryRunner queryRunner;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TxManager txManager;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> queryRunner.query(txManager.getConnection(),<span class="string">"select * from account where name = ?"</span>,<span class="keyword">new</span> BeanHandler&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>),<span class="title">name</span>)</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateByName</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            queryRunner.update(txManager.getConnection(),<span class="string">"update account set balance = ? where name = ?"</span>,account.getBalance(),account.getName());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="service接口及实现类"><a href="#service接口及实现类" class="headerlink" title="service接口及实现类"></a>service接口及实现类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转账方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceAccount 转出用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetAccount 转入用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money 转账金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceAccount, String targetAccount, Float money)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceAccount, String targetAccount, Float money)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 执行sql</span></span><br><span class="line">            <span class="comment">//1.查询数据库获取两个用户</span></span><br><span class="line">            Account source = accountDao.findByName(sourceAccount);</span><br><span class="line">            Account target = accountDao.findByName(targetAccount);</span><br><span class="line">            <span class="comment">//2.在内存中做出转账操作</span></span><br><span class="line">            <span class="comment">//2.1 源账户-money</span></span><br><span class="line">            source.setBalance(source.getBalance() - money);</span><br><span class="line">            <span class="comment">//2.2 目标账户+money</span></span><br><span class="line">            target.setBalance(target.getBalance() + money);</span><br><span class="line">            <span class="comment">//3.设置回数据库</span></span><br><span class="line">            accountDao.updateByName(source);</span><br><span class="line">            <span class="comment">//模拟程序出现异常</span></span><br><span class="line">            <span class="comment">//int i = 1 / 0;</span></span><br><span class="line">            accountDao.updateByName(target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="事务管理器"><a href="#事务管理器" class="headerlink" title="事务管理器"></a>事务管理器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 事务管理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxManager</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line">    <span class="comment">//本地集合</span></span><br><span class="line">    <span class="keyword">private</span> ThreadLocal&lt;Connection&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;Connection&gt;();</span><br><span class="line">	<span class="comment">//环绕通知方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aroundMethod</span><span class="params">(ProceedingJoinPoint point)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            begin();</span><br><span class="line">            point.proceed();</span><br><span class="line">            commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            rollback();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取到Connection对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;...&#125;</span><br><span class="line">    <span class="comment">//开启事务方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">begin</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line">    <span class="comment">//提交事务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line">    <span class="comment">//回滚事务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line">    <span class="comment">//关闭事务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="XML配置版本"><a href="#XML配置版本" class="headerlink" title="XML配置版本"></a>XML配置版本</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--组件扫描——注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.sun"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"datasource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///spring"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"queryRunner"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbutils.QueryRunner"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"ds"</span> <span class="attr">ref</span>=<span class="string">"datasource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置aop--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pt"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.sun.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"txManager"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--四大通知版--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;aop:before method="begin" pointcut-ref="pt"/&gt;</span></span><br><span class="line"><span class="comment">            &lt;aop:after-returning method="commit" pointcut-ref="pt"/&gt;</span></span><br><span class="line"><span class="comment">            &lt;aop:after-throwing method="rollback" pointcut-ref="pt"/&gt;</span></span><br><span class="line"><span class="comment">            &lt;aop:after method="close" pointcut-ref="pt"/&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--环绕通知版--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"aroundMethod"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="注解配置版本"><a href="#注解配置版本" class="headerlink" title="注解配置版本"></a>注解配置版本</h2><blockquote>
<p>删除xml配置中的aop配置</p>
<p>激活切面自动代理</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--组件扫描——注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.sun"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--激活切面自动代理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"datasource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///spring"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"queryRunner"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbutils.QueryRunner"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"ds"</span> <span class="attr">ref</span>=<span class="string">"datasource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="在增强类中进行注解配置"><a href="#在增强类中进行注解配置" class="headerlink" title="在增强类中进行注解配置"></a>在增强类中进行注解配置</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">//声明为切面类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//切点配置</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.sun.service.impl.*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pt</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//环绕通知配置</span></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"pt()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aroundMethod</span><span class="params">(ProceedingJoinPoint point)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            begin();</span><br><span class="line">            point.proceed();</span><br><span class="line">            commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            rollback();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line">    <span class="comment">//本地集合</span></span><br><span class="line">    <span class="keyword">private</span> ThreadLocal&lt;Connection&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;Connection&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取到Connection对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开启事务方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">begin</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提交事务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//回滚事务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭事务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="JdbcTemplate介绍"><a href="#JdbcTemplate介绍" class="headerlink" title="JdbcTemplate介绍"></a>JdbcTemplate介绍</h1><p>JdbcTemplate是Spring提供的持久层技术，用于操作数据库，它底层封装了JDBC技术。</p>
<p>核心类：</p>
<ul>
<li>JdbcTemplate  用于执行增删改查的SQL语句 (QueryRunner)</li>
<li>RowMapper  这是一个接口，主要作用是将数据库返回的记录封装进实体对象(ResultHandler)</li>
</ul>
<p>核心方法：</p>
<ul>
<li>update()  用来执行增、删、改语句</li>
<li>query()    用来执行查询语句</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个JdbcTemplate对象，用来执行增删改查, 需要给一个数据源</span></span><br><span class="line">JdbcTemplate  jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line"></span><br><span class="line"><span class="comment">//update方法，用于执行增删改语句</span></span><br><span class="line"><span class="comment">//第一个参数:sql语句   后面的参数:sql语句中的所需要的的值</span></span><br><span class="line">jdbcTemplate.update(<span class="string">"insert into account value(null,?,?)"</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//query或者queryForObject方法，用于执行查询语句</span></span><br><span class="line"><span class="comment">//第一个参数:sql语句   第二个参数:封装返回值   后面的参数:sql语句中的所需要的的值</span></span><br><span class="line"><span class="comment">//query 用于查询多条记录,返回一个集合   </span></span><br><span class="line">jdbcTemplate.query(<span class="string">"select * from account"</span>, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>))</span>; </span><br><span class="line"><span class="comment">//queryForObject用于查询一条记录,返回一个实体</span></span><br><span class="line">jdbcTemplate.queryForObject(<span class="string">"select * from account where aid = ?"</span>,  <span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>),  1)</span>;</span><br></pre></td></tr></table></figure>



<h2 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h2><blockquote>
<p>使用JdbcTemplate完成一个crud+转账的案例(常用注解版)</p>
</blockquote>
<h3 id="准备account表和实体"><a href="#准备account表和实体" class="headerlink" title="准备account表和实体"></a>准备account表和实体</h3><p>略。。。</p>
<h3 id="新建工程导入相关依赖"><a href="#新建工程导入相关依赖" class="headerlink" title="新建工程导入相关依赖"></a>新建工程导入相关依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>day03_06_jdbc_template<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring-context--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring-test--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring-jdbc--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--druid--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--aspectjweaver--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">projec</span></span></span><br></pre></td></tr></table></figure>



<h3 id="Dao接口及实现"><a href="#Dao接口及实现" class="headerlink" title="Dao接口及实现"></a>Dao接口及实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Account <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.queryForObject(<span class="string">"select * from account where name = ?"</span> ,<span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>),<span class="title">name</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">"update account set balance = ? where name = ?"</span>,account.getBalance(),account.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Service接口及实现"><a href="#Service接口及实现" class="headerlink" title="Service接口及实现"></a>Service接口及实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转账方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceAccountName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetAccountName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceAccountName, String targetAccountName, Float money)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceAccountName, String targetAccountName, Float money)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//查询两个账户信息</span></span><br><span class="line">        Account sourceAccount = accountDao.findByName(sourceAccountName);</span><br><span class="line">        Account targetAccount = accountDao.findByName(targetAccountName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//进行修改</span></span><br><span class="line">        sourceAccount.setBalance(sourceAccount.getBalance() - money);</span><br><span class="line">        targetAccount.setBalance(targetAccount.getBalance() + money);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置回数据库</span></span><br><span class="line">        accountDao.update(sourceAccount);</span><br><span class="line">        accountDao.update(targetAccount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="XML配置"><a href="#XML配置" class="headerlink" title="XML配置"></a>XML配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.sun"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///spring"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--jdbcTemplate对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="测试-3"><a href="#测试-3" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        accountService.transfer(<span class="string">"A01"</span>,<span class="string">"A02"</span>,<span class="number">10f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="Spring中的事务管理"><a href="#Spring中的事务管理" class="headerlink" title="Spring中的事务管理"></a>Spring中的事务管理</h1><h2 id="事务管理方式"><a href="#事务管理方式" class="headerlink" title="事务管理方式"></a>事务管理方式</h2><p>Spring支持两种事务管理方式：编程式事务和声明式事务</p>
<ul>
<li><p>编程式事务就是将业务代码和事务代码放在一起书写，它的耦合性太高，开发中不使用</p>
</li>
<li><p>声明式事务其实就是将事务代码和业务代码隔离开发，然后通过一段配置让他们组装运行，最后达到事务控制的目的</p>
</li>
</ul>
<p>声明式事务就是通过AOP原理实现的</p>
<h2 id="Spring事务管理相关的API"><a href="#Spring事务管理相关的API" class="headerlink" title="Spring事务管理相关的API"></a>Spring事务管理相关的API</h2><h3 id="PlatformTransactionManager"><a href="#PlatformTransactionManager" class="headerlink" title="PlatformTransactionManager"></a>PlatformTransactionManager</h3><p><img data-src="/assets/PlatformTransactionManager.png" alt="PlatformTransactionManager"></p>
<p>PlatformTransactionManager这是Spring进行事务管理的一个根接口，我们要使用它的实现类做事务管理</p>
<p><code>我们需要知道的是:mybatis和jdbcTemplate都可以使用它的一个子类(DataSourceTransactionManager)做事务管理</code></p>
<h3 id="TransactionDefinition"><a href="#TransactionDefinition" class="headerlink" title="TransactionDefinition"></a>TransactionDefinition</h3><p>TransactionDefinition这个API是用来做事务定义的</p>
<p><img data-src="/assets/TransactionDefinition.png" alt="TransactionDefinition"></p>
<h4 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h4><p><img data-src="/assets/%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB.png" alt="隔离级别"></p>
<h4 id="传播行为"><a href="#传播行为" class="headerlink" title="传播行为"></a>传播行为</h4><p>事务传播行为指的就是当一个业务方法【被】另一个业务方法调用时，应该如何进行事务控制</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a()&#123;</span><br><span class="line">    b();<span class="comment">// b必须有事务才可以运行</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b()&#123;&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="/assets/%E4%BC%A0%E6%92%AD%E8%A1%8C%E4%B8%BA.png" alt="传播行为"></p>
<h4 id="只读性"><a href="#只读性" class="headerlink" title="只读性"></a>只读性</h4><p>只读事务(增 删  改不能使用,只能查询使用)</p>
<p>换句话说,只读事务只能用于查询方法</p>
<h4 id="超时时长"><a href="#超时时长" class="headerlink" title="超时时长"></a>超时时长</h4><p>事务超时时间, 此属性需要底层数据库的支持</p>
<p>它的默认值是-1, 代表不限制</p>
<h3 id="TransactionStatus"><a href="#TransactionStatus" class="headerlink" title="TransactionStatus"></a>TransactionStatus</h3><p>TransactionStatus代表的是事务的当前状态</p>
<h3 id="三个API之间的关系"><a href="#三个API之间的关系" class="headerlink" title="三个API之间的关系"></a>三个API之间的关系</h3><p>PlatformTransactionManager通过读取TransactionDefinition中定义事务信息参数,来管理事务,</p>
<p>管理之后会产生一些列的TransactionStatus</p>
<h1 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><strong>目标对象</strong>:  业务层的所有对象<code>自己开发</code></p>
<p><strong>增强对象</strong>:  事务管理器 (DataSourceTransactionManager) </p>
<ul>
<li><code>需要我们给它传递一批参数(事务隔离级别  传播行为  超时时长  只读)</code></li>
</ul>
<p><strong>配置切面</strong>:  配置的是切点和增强的关系   ==自己配置==</p>
<h2 id="xml版本"><a href="#xml版本" class="headerlink" title="xml版本"></a>xml版本</h2><h3 id="复制JdbcTemplate工程"><a href="#复制JdbcTemplate工程" class="headerlink" title="复制JdbcTemplate工程"></a>复制JdbcTemplate工程</h3><p>略…</p>
<h3 id="目标对象-1"><a href="#目标对象-1" class="headerlink" title="目标对象"></a>目标对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure>



<h3 id="配置事务管理器的参数和切面"><a href="#配置事务管理器的参数和切面" class="headerlink" title="配置事务管理器的参数和切面"></a>配置事务管理器的参数和切面</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.sun"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///spring"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--jdbcTemplate对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置事务管理器(增强)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--事务管理器需要的参数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pt"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.sun.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切面--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            aop:advisor  这是一个特殊的配置，只能用在Spring声明式事务配置上</span></span><br><span class="line"><span class="comment">            advice-ref="txAdvice"   用于指定增强-带有参数的事务管理器</span></span><br><span class="line"><span class="comment">            pointcut-ref = "pt" 用于指定切点</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="事务管理器参数的配置"><a href="#事务管理器参数的配置" class="headerlink" title="事务管理器参数的配置"></a>事务管理器参数的配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--事务管理器需要的参数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            name作用是在所有的切点中进行二次匹配，通过规则挑选一部分，这个匹配从上往下执行，一旦匹配到一个，就不再匹配下面的了</span></span><br><span class="line"><span class="comment">            isolation="DEFAULT" 设置隔离级别</span></span><br><span class="line"><span class="comment">            timeout="-1"    设置超时时间</span></span><br><span class="line"><span class="comment">            read-only="false"   设置超时时间</span></span><br><span class="line"><span class="comment">            propagation="REQUIRED" 这是传播行为</span></span><br><span class="line"><span class="comment">            no-rollback-for=""  对于哪个异常不会滚</span></span><br><span class="line"><span class="comment">            rollback-for=""     只针对什么异常回滚</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span>    /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="注解版"><a href="#注解版" class="headerlink" title="注解版"></a>注解版</h2><h3 id="复制xml版本工程"><a href="#复制xml版本工程" class="headerlink" title="复制xml版本工程"></a>复制xml版本工程</h3><p>略…</p>
<h3 id="删除aop-config和tx-advice配置"><a href="#删除aop-config和tx-advice配置" class="headerlink" title="删除aop:config和tx:advice配置"></a>删除aop:config和tx:advice配置</h3><p>略…</p>
<h3 id="在xml配置中开启事务注解驱动"><a href="#在xml配置中开启事务注解驱动" class="headerlink" title="在xml配置中开启事务注解驱动"></a>在xml配置中开启事务注解驱动</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启注解驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="在目标对象中添加事务管理注解"><a href="#在目标对象中添加事务管理注解" class="headerlink" title="在目标对象中添加事务管理注解"></a>在目标对象中添加事务管理注解</h3><p>涉及注解：</p>
<ul>
<li><code>@Transactional</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span> <span class="comment">//该注解可以标在类上，也可以标在方法上，当前表示类中的方法具有事务管理的功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line">    <span class="comment">//该注解标在方法上的优先级会高于标在类上</span></span><br><span class="line">    <span class="meta">@Transactional</span>(</span><br><span class="line">            readOnly = <span class="keyword">false</span>,</span><br><span class="line">            isolation = Isolation.DEFAULT,</span><br><span class="line">            propagation = Propagation.REQUIRED,</span><br><span class="line">            timeout = -<span class="number">1</span></span><br><span class="line">    )</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceAccountName, String targetAccountName, Float money)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//查询两个账户信息</span></span><br><span class="line">        Account sourceAccount = accountDao.findByName(sourceAccountName);</span><br><span class="line">        Account targetAccount = accountDao.findByName(targetAccountName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//进行修改</span></span><br><span class="line">        sourceAccount.setBalance(sourceAccount.getBalance() - money);</span><br><span class="line">        targetAccount.setBalance(targetAccount.getBalance() + money);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置回数据库</span></span><br><span class="line">        accountDao.update(sourceAccount);</span><br><span class="line">        <span class="comment">//int i = 1 / 0;</span></span><br><span class="line">        accountDao.update(targetAccount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="纯注解版-1"><a href="#纯注解版-1" class="headerlink" title="纯注解版"></a>纯注解版</h2><p>转移xml配置到配置类，删除xml所有内容</p>
<p>注解：<code>@EnableTransactionManagement</code>   相当于<code>&lt;tx:annotation-driven/&gt;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.sun"</span>)   <span class="comment">//&lt;context:component-scan base-package="com.sun"/&gt;</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span>    <span class="comment">//相当于&lt;tx:annotation-driven/&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">"jdbc:mysql:///spring"</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">"root"</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">jdbcTemplate</span> <span class="params">(DataSource dataSource)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">transactionManager</span><span class="params">(DataSource dataSource)</span></span>&#123;</span><br><span class="line">        DataSourceTransactionManager transactionManager = <span class="keyword">new</span> DataSourceTransactionManager();</span><br><span class="line">        transactionManager.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> transactionManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>框架</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>动态代理</tag>
        <tag>AOP介绍</tag>
        <tag>AOP注解和XML开发</tag>
        <tag>JdbcTemplate</tag>
        <tag>Spring中的事务管理</tag>
        <tag>声明式事务</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC-1</title>
    <url>/2020/09/26/SpringMVC-1/</url>
    <content><![CDATA[<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><h2 id="MVC模式"><a href="#MVC模式" class="headerlink" title="MVC模式"></a>MVC模式</h2><p>MVC是一种用于设计创建 Web 应用程序表现层的模式,使用它可以将业务逻辑、数据、界面显示代码分离开来.</p>
<ul>
<li>Model（模型）: 指的就是数据模型,用于封装数据</li>
<li>View（视图）:    用于数据展示</li>
<li>Controller（控制器）: 用于程序处理逻辑</li>
</ul>
<p><img data-src="/assets/MVC%E6%A8%A1%E5%BC%8F.png" alt="MVC模式"></p>
<a id="more"></a>

<h2 id="SpringMVC介绍"><a href="#SpringMVC介绍" class="headerlink" title="SpringMVC介绍"></a>SpringMVC介绍</h2><p>SpringMVC是Spring产品对MVC模式的一种具体实现，<strong>它可以通过一套注解，让一个简单Java类成为控制器</strong>。</p>
<p><img data-src="/assets/SpringMVC%E4%BB%8B%E7%BB%8D.png" alt="SpringMVC介绍"></p>
<h1 id="SpringMVC快速入门"><a href="#SpringMVC快速入门" class="headerlink" title="SpringMVC快速入门"></a>SpringMVC快速入门</h1><blockquote>
<p>需求：开发一个请求页面, 向后台发送一个请求, 后台需要在控制台打印一句话,  然后跳转到一个新的返回页面</p>
</blockquote>
<h2 id="创建web空工程，导入相关坐标"><a href="#创建web空工程，导入相关坐标" class="headerlink" title="创建web空工程，导入相关坐标"></a>创建web空工程，导入相关坐标</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SpringMVC--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Servlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--JSP--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="提供SpringMVC配置文件"><a href="#提供SpringMVC配置文件" class="headerlink" title="提供SpringMVC配置文件"></a>提供SpringMVC配置文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.sun.controller"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置三大组件--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注解驱动:相当于配置了处理器映射器、处理器适配器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Spring允许我们以配置的形式传入前后缀，他会在跳转视图的时候自动拼接--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以在配置视图解析器时传递设置两个属性<code>prefix</code>和<code>suffix</code>表示前缀和后缀，在跳转视图时会自拼接</p>
</blockquote>
<h2 id="在web-xml中配置前端控制器"><a href="#在web-xml中配置前端控制器" class="headerlink" title="在web.xml中配置前端控制器"></a>在web.xml中配置前端控制器</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--前端控制器--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- / 表示默认匹配拦截除了 .jsp 之外的所有--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="请求页面"><a href="#请求页面" class="headerlink" title="请求页面"></a>请求页面</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;index&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo1"&gt;SpringMVC快速入门&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<h2 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// @RequestMapping  用于为当前方法绑定一个URL地址，作用就是为了前端请求的匹配</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"进入后台了..."</span>);</span><br><span class="line">        <span class="comment">//此处的返回值就用于说明下一个要跳转的页面的地址</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/WEB-INF/success.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="响应页面"><a href="#响应页面" class="headerlink" title="响应页面"></a>响应页面</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;success&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Success!!!&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>





<h1 id="SpringMVC原理"><a href="#SpringMVC原理" class="headerlink" title="SpringMVC原理"></a>SpringMVC原理</h1><h2 id="SpringMVC的工作流程"><a href="#SpringMVC的工作流程" class="headerlink" title="SpringMVC的工作流程"></a>SpringMVC的工作流程</h2><p>解释：</p>
<ul>
<li><code>DispatcherServlet</code>：前端控制器</li>
<li><code>HandlerMapping</code>：处理器映射器</li>
<li><code>HandlerAdapter</code>：处理器适配器</li>
<li><code>Handler</code>：控制器</li>
<li><code>ViewResolver</code>：视图解析器</li>
</ul>
<p><img data-src="/assets/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png" alt="SpringMVC原理"></p>
<ol>
<li>用户通过浏览器发送请求至<code>DispatcherServlet</code></li>
<li>DispatcherServlet收到请求调用<code>HandlerMapping</code></li>
<li>HandlerMapping找到具体的处理器链返回给DispatcherServlet</li>
<li>DispatcherServlet会根据返回的处理器链调用<code>HandlerAdapter</code></li>
<li>HandlerAdapter经过适配调用具体的<code>Handler</code>（controller）</li>
<li>Controller执行完成返回一个执行结果</li>
<li>HandlerAdapter将Handler的结果ModelAndView对象返回给DispatcherServlet</li>
<li>DispatcherServlet将ModelAndView对象传给<code>ViewResolver</code></li>
<li>ViewReslover解析后得到具体View，并返回给DispatcherServlet</li>
<li>DispatcherServlet根据View进行视图渲染（即将模型数据填充至视图中）</li>
<li>DispatcherServlet会将渲染后的视图响应给浏览器</li>
</ol>
<h2 id="SpringMVC的三大组件"><a href="#SpringMVC的三大组件" class="headerlink" title="SpringMVC的三大组件"></a>SpringMVC的三大组件</h2><p>处理器映射器：负责根据URL寻找对应的处理器方法</p>
<p>处理器适配器：负责真正的去调用某个处理器方法</p>
<p>视图解析器：负责将逻辑视图转换成物理视图</p>
<blockquote>
<p>小贴士：</p>
<ul>
<li>当我们不进行三大组件配置时，SpringMVC会使用自己配置文件中的配置，但是我们配置的是经过功能增强的，所以不使用默认的。</li>
</ul>
</blockquote>
<p><img data-src="/assets/%E5%89%8D%E7%AB%AF%E6%8E%A7%E5%88%B6%E5%99%A8%E9%BB%98%E8%AE%A4%E7%9A%84%E9%85%8D%E7%BD%AE%E4%B8%89%E5%A4%A7%E7%BB%84%E4%BB%B6.png" alt="前端控制器默认的配置三大组件"></p>
<p>三大组件配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置三大组件--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注解驱动:相当于配置了处理器映射器、处理器适配器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置视图解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Spring允许我们以配置的形式传入前后缀，他会在跳转视图的时候自动拼接--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="RequestMapping"></a>RequestMapping</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequestMapping &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(<span class="string">"path"</span>)</span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;			<span class="comment">//指定访问路径，支持多个</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(<span class="string">"value"</span>)</span><br><span class="line">    String[] path() <span class="keyword">default</span> &#123;&#125;;				<span class="comment">//与value互为别名，作用相同</span></span><br><span class="line"></span><br><span class="line">    RequestMethod[] method() <span class="keyword">default</span> &#123;&#125;;	<span class="comment">//用于指定请求方法，如POST、GET，支持配置多个</span></span><br><span class="line"></span><br><span class="line">    String[] params() <span class="keyword">default</span> &#123;&#125;;			<span class="comment">//指定请求携带的参数，配置后前台必须传递，否则报错</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>RequestMapping用于建立请求URL和处理方法之间的对应关系，也可以通过它的属性对请求做出各种限制</p>
<ul>
<li><p>value：用于限制请求URL(和path作用一样)</p>
</li>
<li><p>method：用于限制请求类型</p>
</li>
<li><p>params：用于限制请求参数的条件</p>
</li>
</ul>
<p><strong>此注解可以标注在方法上，也可以标注在类上，标注在类上代表类中的所有方法都可以共用一段URL。</strong></p>
<p><img data-src="/assets/RequestMapping%E6%B3%A8%E8%A7%A3%E6%A0%87%E5%9C%A8%E7%B1%BB%E4%B8%8A%E5%92%8C%E6%96%B9%E6%B3%95%E4%B8%8A.png" alt="RequestMapping注解标在类上和方法上">    </p>
<h2 id="限制请求路径"><a href="#限制请求路径" class="headerlink" title="限制请求路径"></a>限制请求路径</h2><p><code>@RequestMapping</code>注解中有两个属性，<code>value</code>和<code>path</code>，两个互为别名，表示的是当前方法绑定的URL，支持一个方法绑定多个URL。</p>
<h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><h4 id="前台"><a href="#前台" class="headerlink" title="前台"></a>前台</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--演示RequestMapping的value和path属性--%&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo2"&gt;RequestMapping-value&lt;/a&gt;&lt;br/&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo3"&gt;RequestMapping-value&lt;/a&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure>

<h4 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@RequestMapping(value = &#123;"/demoController/demo2","/demoController/demo3"&#125;)</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(path = &#123;<span class="string">"/demoController/demo2"</span>,<span class="string">"/demoController/demo3"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//此处的返回值就用于说明下一个要跳转的页面的地址</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>value和path作用相同，都是用来绑定路径，支持配置多个</p>
</blockquote>
<h2 id="限制请求类型"><a href="#限制请求类型" class="headerlink" title="限制请求类型"></a>限制请求类型</h2><p><code>@RequestMapping</code>注解中有一个<code>method</code>属性，可以限定请求方式，例如GET或POST提交，支持指定多个。</p>
<h3 id="代码演示-1"><a href="#代码演示-1" class="headerlink" title="代码演示"></a>代码演示</h3><h4 id="前台-1"><a href="#前台-1" class="headerlink" title="前台"></a>前台</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--演示RequestMapping的method属性--%&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo4"&gt;RequestMapping-method&lt;/a&gt;&lt;br/&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/demoController/demo5"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"RequestMapping-method"</span>/&gt;</span><br><span class="line">&lt;/form&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure>

<h4 id="后台-1"><a href="#后台-1" class="headerlink" title="后台"></a>后台</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/demoController/demo4"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//此处的返回值就用于说明下一个要跳转的页面的地址</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(path=<span class="string">"/demoController/demo5"</span>, method = &#123;RequestMethod.GET,RequestMethod.POST&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo5</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//此处的返回值就用于说明下一个要跳转的页面的地址</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：当method指定仅仅为POST方式时，前台必须以POST方式提交，否则会报错(405)</p>
</blockquote>
<h2 id="限制请求参数"><a href="#限制请求参数" class="headerlink" title="限制请求参数"></a>限制请求参数</h2><p><code>RequestMapping</code>注解中有一个<code>params</code>属性，用于指定请求参数的必传，不写代表不做限制。</p>
<h3 id="代码演示-2"><a href="#代码演示-2" class="headerlink" title="代码演示"></a>代码演示</h3><h4 id="前台-2"><a href="#前台-2" class="headerlink" title="前台"></a>前台</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--演示RequestMapping的params属性--%&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo6?username=jj"&gt;RequestMapping-method&lt;/a&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure>

<h4 id="后台-2"><a href="#后台-2" class="headerlink" title="后台"></a>后台</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//params用于指定请求参数的必传，不写代表不做限制</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/demoController/demo6"</span>,params = <span class="string">"username"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo6</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//此处的返回值就用于说明下一个要跳转的页面的地址</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：当指定params属性时，前台请求必须携带该参数，否则就会报错(404)。</p>
</blockquote>
<h1 id="接收请求参数"><a href="#接收请求参数" class="headerlink" title="接收请求参数"></a>接收请求参数</h1><p>在SpringMVC中可以使用多种类型来接收前端传入的参数(字符串)</p>
<h2 id="简单类型"><a href="#简单类型" class="headerlink" title="简单类型"></a>简单类型</h2><p>简单类型参数接收，<strong>保证前端传递的参数名称和方法形参的名称一致</strong>即可</p>
<blockquote>
<p>对于一些简单类型的数据，SpringMVC底层内置了转换器</p>
</blockquote>
<h3 id="代码演示-3"><a href="#代码演示-3" class="headerlink" title="代码演示"></a>代码演示</h3><h4 id="前台-3"><a href="#前台-3" class="headerlink" title="前台"></a>前台</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"> &lt;%--接收请求参数——简单类型(<span class="number">8</span>+<span class="number">8</span>+<span class="number">1</span>)--%&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo7?username=张三&amp;age=18"&gt;接收参数——简单类型&lt;/a&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure>

<h4 id="后台-3"><a href="#后台-3" class="headerlink" title="后台"></a>后台</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//简单类型参数接收，保证前端传递的参数名称和方法形参的名称一致即可</span></span><br><span class="line"><span class="comment">//对于一些简单类型的数据，SpringMVC底层内置了转换器</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/demoController/demo7"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo7</span><span class="params">(String username,Integer age)</span></span>&#123;</span><br><span class="line">    System.out.println(username +<span class="string">"-"</span>+ age);</span><br><span class="line">    <span class="comment">//此处的返回值就用于说明下一个要跳转的页面的地址</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h2><p>对象类型参数接收，只需要<strong>保证前端传递的参数名称和pojo的属性名称(set方法)一致</strong>即可</p>
<h3 id="代码演示-4"><a href="#代码演示-4" class="headerlink" title="代码演示"></a>代码演示</h3><h4 id="前台-4"><a href="#前台-4" class="headerlink" title="前台"></a>前台</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--接收请求参数——对象--%&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo8?username=李四&amp;age=20"&gt;接收参数——对象类型&lt;/a&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure>

<h4 id="后台-4"><a href="#后台-4" class="headerlink" title="后台"></a>后台</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对象类型：只需要保证前端传递的参数名称和pojo的属性名称(set方法)一致即可</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/demoController/demo8"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo8</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="comment">//此处的返回值就用于说明下一个要跳转的页面的地址</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h2><p>数组类型：只需要<strong>保证前端传递的参数名称和方法形参名称一致</strong>即可</p>
<h3 id="代码演示-5"><a href="#代码演示-5" class="headerlink" title="代码演示"></a>代码演示</h3><h4 id="前台-5"><a href="#前台-5" class="headerlink" title="前台"></a>前台</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--接收请求参数——数组--%&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo9?students=张三&amp;students=李四"&gt;接收参数——数组类型&lt;/a&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure>

<h4 id="后台-5"><a href="#后台-5" class="headerlink" title="后台"></a>后台</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组类型：只需要保证前端传递的参数名称和方法形参名称一致即可</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/demoController/demo9"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo9</span><span class="params">(String[] students)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (String student : students) &#123;</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//此处的返回值就用于说明下一个要跳转的页面的地址</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h2><p>集合类型：<strong>获取集合参数时，要将集合参数包装到一个pojo中</strong>才可以</p>
<h3 id="代码演示-6"><a href="#代码演示-6" class="headerlink" title="代码演示"></a>代码演示</h3><h4 id="封装对象"><a href="#封装对象" class="headerlink" title="封装对象"></a>封装对象</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Vo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">//get、set方法略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="前台-6"><a href="#前台-6" class="headerlink" title="前台"></a>前台</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--接收请求参数——集合--%&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/demoController/demo10?students=张三&amp;students=李四"</span>&gt;</span><br><span class="line">    list第一个元素： &lt;input type=<span class="string">"text"</span> name=<span class="string">"users[0].username"</span> value=<span class="string">"张三"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> name=<span class="string">"users[0].age"</span> value=<span class="string">"18"</span>&gt;&lt;br/&gt;</span><br><span class="line">    list第二个元素： &lt;input type=<span class="string">"text"</span> name=<span class="string">"users[1].username"</span> value=<span class="string">"李四"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> name=<span class="string">"users[1].age"</span> value=<span class="string">"20"</span>&gt;&lt;br/&gt;</span><br><span class="line">    map第一个元素：&lt;input type=<span class="string">"text"</span> name=<span class="string">"map[1001]"</span> value=<span class="string">"jj"</span>&gt;&lt;br/&gt;</span><br><span class="line">    map第二个元素：&lt;input type=<span class="string">"text"</span> name=<span class="string">"map[1002]"</span> value=<span class="string">"mm"</span>&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"接收参数——集合类型"</span>&gt;&lt;br/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<h4 id="后台-6"><a href="#后台-6" class="headerlink" title="后台"></a>后台</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//集合类型：获取集合参数时，要将集合参数包装到一个pojo中才可以</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/demoController/demo10"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo10</span><span class="params">(Vo vo)</span></span>&#123;</span><br><span class="line">    System.out.println(vo);</span><br><span class="line">    <span class="comment">//此处的返回值就用于说明下一个要跳转的页面的地址</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h2><p>对于一些常见的类型,  SpringMVC是内置了类型转换器的,  但是对于一些格式比较灵活的参数(日期  时间), SpringMVC无法完成类型转换。</p>
<p>这时候就必须<strong>自定义类型转换器</strong></p>
<blockquote>
<p>小贴士：</p>
<ul>
<li>其实SpringMVC也内置日期类型的转换器,  格式为: yyyy/MM/dd</li>
</ul>
</blockquote>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="自定义时间类型转换器"><a href="#自定义时间类型转换器" class="headerlink" title="自定义时间类型转换器"></a>自定义时间类型转换器</h4><ul>
<li>自定义一个类型转换器类,实现类型转换的方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 日期转换类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String strDate)</span> </span>&#123;</span><br><span class="line">        Date date = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            date = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>).parse(strDate);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>实现<code>Converter&lt;S,T&gt;</code>接口，重写<code>convert()</code>转换方法</p>
<ul>
<li>泛型S代表源数据类型，就是什么数据需要转换，当前是将一个字符串转为日期类型</li>
<li>泛型T代表目标数据类型，现在是Date日期类型</li>
</ul>
</blockquote>
<ul>
<li>将转换器的类注册到转换服务,并且将转换服务注册到SpringMVC的注册驱动中</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注解驱动:相当于配置了处理器映射器、处理器适配器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">"conversionService2"</span>/&gt;</span><span class="comment">&lt;!--将转换服务注册到SpringMVC容器中--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--声明转换服务，并且自定义转换器对象注册到服务--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conversionService2"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.sun.converters.DateConverter"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="前台-7"><a href="#前台-7" class="headerlink" title="前台"></a>前台</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--接收请求参数——日期类型--%&gt;</span><br><span class="line">&lt;a href=<span class="string">"$&#123;pageContext.request.contextPath&#125;/demoController/demo11?date=2020-9-9"</span>&gt;</span><br><span class="line">    接收参数——日期类型</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<h4 id="后台-7"><a href="#后台-7" class="headerlink" title="后台"></a>后台</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//日期类型</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo11"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo11</span><span class="params">(Date date)</span></span>&#123;</span><br><span class="line">    System.out.println(date);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="文件类型-文件上传"><a href="#文件类型-文件上传" class="headerlink" title="文件类型(文件上传)"></a>文件类型(文件上传)</h2><p>文件上传三要素：</p>
<ul>
<li><code>POST</code>方式提交</li>
<li>表单类型为<code>enctype=&quot;multipart/form-data&quot;</code></li>
<li>提供文件上传的input域<code>&lt;input type=&quot;file&quot; name=&quot;&quot;/&gt;</code></li>
</ul>
<h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="导入文件上传pom依赖"><a href="#导入文件上传pom依赖" class="headerlink" title="导入文件上传pom依赖"></a>导入文件上传pom依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件上传--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="配置文件上传解析器"><a href="#配置文件上传解析器" class="headerlink" title="配置文件上传解析器"></a>配置文件上传解析器</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    配置文件解析器</span></span><br><span class="line"><span class="comment">    注意：这个id不能随便写，必须叫multipartResolver</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--限制每次上传文件的大小，单位是B 5M = 1024 * 1024 * 5 = 5242880--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"5242880"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="单文件上传"><a href="#单文件上传" class="headerlink" title="单文件上传"></a>单文件上传</h4><h5 id="前台-8"><a href="#前台-8" class="headerlink" title="前台"></a>前台</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/demoController/demo12"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"file"</span> name=<span class="string">"uploadFile"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"单文件上传"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<h5 id="后台-8"><a href="#后台-8" class="headerlink" title="后台"></a>后台</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo12"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo12</span><span class="params">(MultipartFile uploadFile)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//获取前台input标签name属性名</span></span><br><span class="line">    String name = uploadFile.getName();</span><br><span class="line">    <span class="comment">//获取文件名</span></span><br><span class="line">    String filename = uploadFile.getOriginalFilename();</span><br><span class="line">    <span class="comment">// 使用UUID+文件名生成新文件名</span></span><br><span class="line">    String newFilename = UUID.randomUUID().toString() + filename;</span><br><span class="line">    <span class="comment">//定义一个本地目录(上传路径)</span></span><br><span class="line">    File file = <span class="keyword">new</span> File(<span class="keyword">new</span> File(<span class="string">"E:\\IDEA_Workspace"</span>), newFilename);</span><br><span class="line">    <span class="comment">//文件传输</span></span><br><span class="line">    uploadFile.transferTo(file);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意：后台参数类型必须为MultipartFile，参数名称和前台的name属性名称一致</strong></p>
</blockquote>
<h4 id="多文件上传"><a href="#多文件上传" class="headerlink" title="多文件上传"></a>多文件上传</h4><blockquote>
<p>前台文件上传input标签中添加<code>multiple</code>属性</p>
<p>后台使用<code>MultipartFile[]</code><strong>数组</strong>接收</p>
</blockquote>
<h5 id="前台-9"><a href="#前台-9" class="headerlink" title="前台"></a>前台</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/demoController/demo13"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"file"</span> name=<span class="string">"uploadFile"</span> multiple&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"多文件上传"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<h5 id="后台-9"><a href="#后台-9" class="headerlink" title="后台"></a>后台</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo13"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo13</span><span class="params">(MultipartFile[] uploadFile)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (MultipartFile multipartFile : uploadFile) &#123;</span><br><span class="line">        <span class="comment">//获取文件名</span></span><br><span class="line">        String filename = multipartFile.getOriginalFilename();</span><br><span class="line">        <span class="comment">// 使用UUID+文件名生成新文件名</span></span><br><span class="line">        String newFilename = UUID.randomUUID().toString() + filename;</span><br><span class="line">        <span class="comment">//定义一个本地目录(上传路径)</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="keyword">new</span> File(<span class="string">"E:\\IDEA_Workspace"</span>), newFilename);</span><br><span class="line">        <span class="comment">//文件传输</span></span><br><span class="line">        multipartFile.transferTo(file);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>多文件上传</p>
<ul>
<li>在<code>&lt;input type=&quot;file&quot;/&gt;</code>域中添加<code>multiple</code>属性</li>
<li>后台接收使用<code>MultipartFile[]</code>数组接收，遍历上传即可</li>
</ul>
</blockquote>
<h1 id="接收参数的处理"><a href="#接收参数的处理" class="headerlink" title="接收参数的处理"></a>接收参数的处理</h1><h2 id="中文乱码"><a href="#中文乱码" class="headerlink" title="中文乱码"></a>中文乱码</h2><p>SpringMVC在使用post提交请求时,  对于中文参数是有乱码问题的, 针对这种情况它提供了一个中文乱码过滤器,  我们只需要进行配置一下就可以了。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置中文过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h2><p>@RequestParam标注在<code>方法参数</code>之前，用于对传入的参数做一些限制，支持三个属性:</p>
<ul>
<li>value：默认属性，用于指定前端传入的参数名称</li>
<li>required：用于指定此参数是否必传，默认为true</li>
<li>defaultValue：当参数为非必传参数且前端没有传入参数时，指定一个默认值</li>
</ul>
<h2 id="代码演示-7"><a href="#代码演示-7" class="headerlink" title="代码演示"></a>代码演示</h2><h3 id="前台-10"><a href="#前台-10" class="headerlink" title="前台"></a>前台</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--演示RequestParam--%&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo14?students=jj&amp;students=mm"&gt;RequestParam&lt;/a&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure>

<h3 id="后台-10"><a href="#后台-10" class="headerlink" title="后台"></a>后台</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@RequestParam标注在方法参数之前。用于表示当前参数是获取的前端传递或来的哪个参数值</span></span><br><span class="line"><span class="comment">//@RequestParam 标注方法之前，此参数为必传选项，不传就会报错，但是可以使用required = false取消这个限制</span></span><br><span class="line"><span class="comment">//defaultValue可以为当前参数设置一个默认值，当前端不传递此参数时候，就是用默认值</span></span><br><span class="line"><span class="comment">//@RequestParam(value = "studnets") 可以接收一个集合参数，可以直接封装到一个集中对象中</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo14"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo14</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @RequestParam(value = <span class="string">"username"</span>,required = <span class="keyword">false</span>,defaultValue = <span class="string">"jj"</span>)</span> String name,</span></span><br><span class="line"><span class="function">    @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"students"</span>)</span> List&lt;String&gt; students</span></span><br><span class="line"><span class="function">)</span>&#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    System.out.println(students);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="接收请求头信息"><a href="#接收请求头信息" class="headerlink" title="接收请求头信息"></a>接收请求头信息</h1><p>@RequestHeader注解，用于接收请求头信息</p>
<ul>
<li><code>@RequestHeader</code>用于接收请求头所有信息，封装到一个Map中</li>
<li><code>@RequestHeader(&quot;key&quot;)</code>用于接收指定的请求头信息，key为某一个请求头名称</li>
<li><code>@CookieValue(&quot;key&quot;)</code>用于接收cookie中的某一项信息</li>
</ul>
<h2 id="代码演示-8"><a href="#代码演示-8" class="headerlink" title="代码演示"></a>代码演示</h2><h3 id="前台-11"><a href="#前台-11" class="headerlink" title="前台"></a>前台</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--接收请求头信息--%&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo15"&gt;接收请求头信息&lt;/a&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure>

<h3 id="后台-11"><a href="#后台-11" class="headerlink" title="后台"></a>后台</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    @RequestHeader用于接收请求头所有信息，封装到一个Map中</span></span><br><span class="line"><span class="comment">    @RequestHeader("key")用于接收指定的请求头信息，key为某一个请求头名称</span></span><br><span class="line"><span class="comment">    @CookieValue("key")用于接收cookie中的某一项信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo15"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo15</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        @RequestHeader Map map,</span></span></span><br><span class="line"><span class="function"><span class="params">        @RequestHeader(<span class="string">"cookie"</span>)</span> String cookie,</span></span><br><span class="line"><span class="function">        @<span class="title">CookieValue</span><span class="params">(<span class="string">"JSESSIONID"</span>)</span> String jsessionid</span></span><br><span class="line"><span class="function">        )</span>&#123;</span><br><span class="line">    System.out.println(map);</span><br><span class="line">    System.out.println(cookie);</span><br><span class="line">    System.out.println(jsessionid);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>框架</category>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>SpringMVC介绍</tag>
        <tag>SpringMVC原理</tag>
        <tag>RequestMapping</tag>
        <tag>SpringMVC接收请求参数</tag>
        <tag>SpringMVC接收参数的处理</tag>
        <tag>SpringMVC接收请求头信息</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC-2</title>
    <url>/2020/09/27/SpringMVC-2/</url>
    <content><![CDATA[<h1 id="工程准备"><a href="#工程准备" class="headerlink" title="工程准备"></a>工程准备</h1><blockquote>
<p>新建工程，进行配置</p>
</blockquote>
<ul>
<li>pom.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--springmvc--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--servlet--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--jsp--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<ul>
<li>spring-mvc.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注解扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.sun.controller"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--三大组件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--前后缀   他们会在页面跳转的时候,拼接在方法的返回值上--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>web.xml配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--前端控制器  @WebServlet( name="dispatcherServlet",urlPatterns="/" )--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--除了.jsp文件不拦截,其他文件全部拦截--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--中文乱码过滤器  @WebFilter( name="characterEncodingFilter",urlPatterns="/*" )--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>success.jsp</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;SUCCESS!!!!&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<h1 id="页面跳转之转发"><a href="#页面跳转之转发" class="headerlink" title="页面跳转之转发"></a>页面跳转之转发</h1><h2 id="方式一：简单方式"><a href="#方式一：简单方式" class="headerlink" title="方式一：简单方式"></a>方式一：简单方式</h2><blockquote>
<p>设置前后缀后则会拼接前后缀</p>
</blockquote>
<h3 id="前台"><a href="#前台" class="headerlink" title="前台"></a>前台</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo1"&gt;转发——简单方式&lt;/a&gt;&lt;br&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//转发方式一：简单方式，会拼接前后缀</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo1"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"到达了后台demo1"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="方式二：使用forward"><a href="#方式二：使用forward" class="headerlink" title="方式二：使用forward"></a>方式二：使用forward</h2><blockquote>
<p>不会拼接前后缀</p>
</blockquote>
<h3 id="前台-1"><a href="#前台-1" class="headerlink" title="前台"></a>前台</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo2"&gt;转发——forward方式&lt;/a&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure>

<h3 id="后台-1"><a href="#后台-1" class="headerlink" title="后台"></a>后台</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//转发方式二：forward方式,不会拼接前后缀</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"forward:/WEB-INF/success.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="方式三：使用Servlet原生API"><a href="#方式三：使用Servlet原生API" class="headerlink" title="方式三：使用Servlet原生API"></a>方式三：使用Servlet原生API</h2><blockquote>
<p>不会拼接前后缀</p>
</blockquote>
<h3 id="前台-2"><a href="#前台-2" class="headerlink" title="前台"></a>前台</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo3"&gt;转发——原生Servlet方式&lt;/a&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure>

<h3 id="后台-2"><a href="#后台-2" class="headerlink" title="后台"></a>后台</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//转发方式三：servlet原生实现，不会拼接前后缀</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo3"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo3</span><span class="params">(HttpServletRequest request , HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    request.getRequestDispatcher(<span class="string">"/WEB-INF/success.jsp"</span>).forward(request,response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="转发过程中的数据传递"><a href="#转发过程中的数据传递" class="headerlink" title="转发过程中的数据传递"></a>转发过程中的数据传递</h2><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><blockquote>
<p>直接使用request域进行数据传递</p>
</blockquote>
<h4 id="前台-3"><a href="#前台-3" class="headerlink" title="前台"></a>前台</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo4"&gt;转发——携带数据方式一&lt;/a&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure>

<h4 id="后台-3"><a href="#后台-3" class="headerlink" title="后台"></a>后台</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//转发携带数据方式一</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo4"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo4</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    <span class="comment">//直接使用request域进行数据传递</span></span><br><span class="line">    request.setAttribute(<span class="string">"name"</span>,<span class="string">"jj"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><blockquote>
<p>使用Model(ModelMap)进行传递，底层会将数据放入request域中进行数据传递</p>
</blockquote>
<h4 id="前台-4"><a href="#前台-4" class="headerlink" title="前台"></a>前台</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo5"&gt;转发——携带数据方式二&lt;/a&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure>

<h4 id="后台-4"><a href="#后台-4" class="headerlink" title="后台"></a>后台</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//转发携带数据方式二</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo5"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo5</span><span class="params">(Model model, ModelMap map)</span></span>&#123;</span><br><span class="line">    <span class="comment">//使用model进行传递，底层会将数据放入request域中进行数据传递</span></span><br><span class="line">    model.addAttribute(<span class="string">"name"</span>,<span class="string">"mm"</span>);</span><br><span class="line">    <span class="comment">//和ModelMap和Model作用相同</span></span><br><span class="line">    map.put(<span class="string">"age"</span>,<span class="string">"18"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h3><blockquote>
<p>使用ModelAndView进行数据传递，设置响应的视图和数据。</p>
</blockquote>
<h4 id="前台-5"><a href="#前台-5" class="headerlink" title="前台"></a>前台</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo6"&gt;转发——携带数据方式三&lt;/a&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure>

<h4 id="后台-5"><a href="#后台-5" class="headerlink" title="后台"></a>后台</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//转发携带数据方式三</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo6"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">demo6</span><span class="params">(ModelAndView modelAndView)</span></span>&#123;</span><br><span class="line">    <span class="comment">//设置数据</span></span><br><span class="line">    modelAndView.addObject(<span class="string">"name"</span>,<span class="string">"jjmm"</span>);</span><br><span class="line">    <span class="comment">//设置视图(页面)</span></span><br><span class="line">    <span class="comment">//注意：这里会拼接前后缀</span></span><br><span class="line">    modelAndView.setViewName(<span class="string">"success"</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意：ModelAndView设置视图时，会拼接前后缀</strong></p>
</blockquote>
<h1 id="页面跳转之重定向"><a href="#页面跳转之重定向" class="headerlink" title="页面跳转之重定向"></a>页面跳转之重定向</h1><h2 id="方式一：使用redirect重定向"><a href="#方式一：使用redirect重定向" class="headerlink" title="方式一：使用redirect重定向"></a>方式一：使用redirect重定向</h2><h3 id="前台-6"><a href="#前台-6" class="headerlink" title="前台"></a>前台</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo7"&gt;重定向跳转方式一&lt;/a&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure>

<h3 id="后台-6"><a href="#后台-6" class="headerlink" title="后台"></a>后台</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//重定向跳转方式一</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo7"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo7</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/fail.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="方式二：使用Servlet原生API"><a href="#方式二：使用Servlet原生API" class="headerlink" title="方式二：使用Servlet原生API"></a>方式二：使用Servlet原生API</h2><h3 id="前台-7"><a href="#前台-7" class="headerlink" title="前台"></a>前台</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo8"&gt;重定向跳转方式二&lt;/a&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure>

<h3 id="后台-7"><a href="#后台-7" class="headerlink" title="后台"></a>后台</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//重定向跳转方式二</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo8"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo8</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    response.sendRedirect(request.getContextPath() + <span class="string">"/fail.jsp"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="补充：通过重定向访问WEB-INF下资源"><a href="#补充：通过重定向访问WEB-INF下资源" class="headerlink" title="补充：通过重定向访问WEB-INF下资源"></a>补充：通过重定向访问WEB-INF下资源</h2><blockquote>
<p>直接重定向访问WEB-INF下资源是访问不到的，可以<strong>重定向到一个可以转发到WEB-INF目录下的URL路径</strong></p>
</blockquote>
<h3 id="前台-8"><a href="#前台-8" class="headerlink" title="前台"></a>前台</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo9"&gt;重定向访问WEB-INF下资源&lt;/a&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure>

<h3 id="后台-8"><a href="#后台-8" class="headerlink" title="后台"></a>后台</h3><blockquote>
<p>重定向到前面写的转发方式一，访问WEN-INF下的success.jsp页面</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过重定向访问WEB-INF下资源</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo9"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo9</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/demoController/demo1"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="释放静态资源"><a href="#释放静态资源" class="headerlink" title="释放静态资源"></a>释放静态资源</h1><p>当有静态资源需要加载时，比如jquery.js，会出现404现象。[noHandlerFound No mapping for GET /js/jquery-3.3.1.js]</p>
<p>之所以发生这种情况是因为：现在SpringMVC的前端控制器DispatcherServlet的url-pattern配置的是 /，代表除了jsp请求不拦截，</p>
<p>其他的所有请求都会拦截，包括一些静态文件(js  html  css  jpg等等)，而拦截住之后，它又找不到对应的处理器方法来处理，因此报错。</p>
<p>下面有三种方式解决该问题</p>
<h2 id="方式一-1"><a href="#方式一-1" class="headerlink" title="方式一"></a>方式一</h2><p>在SpingMVC的配置文件中加入一段配置：<code>&lt;mvc:resources mapping=&quot;&quot; location=&quot;&quot;/&gt;</code></p>
<ul>
<li>mapping:用来指定一个映射地址，匹配访问地址</li>
<li>location:如果一个访问的地址可以被mapping指定的规则匹配上，就不再去调用处理器映射器查找相应的方法了，而是直接去location指定路径下获取资源。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    静态资源释放方式一</span></span><br><span class="line"><span class="comment">    mapping:用来指定一个映射地址，匹配访问地址</span></span><br><span class="line"><span class="comment">    location:如果一个访问的地址可以被mapping指定的规则匹配上，就不再去调用处理器映射器查找相应的方法了，而是直接去location指定路径下获取资源</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/js/*"</span> <span class="attr">location</span>=<span class="string">"/js/"</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="方式二-1"><a href="#方式二-1" class="headerlink" title="方式二"></a>方式二</h2><p>在SpingMVC的配置文件中加入一段配置：<code>&lt;mvc:default-servlet-handler/&gt;</code></p>
<ul>
<li>配置下面的标签之前，请求是这样访问的：前端控制器将请求传给处理器映射器去寻找对应的处理方法，如果找不到，就会报404</li>
<li>配置之后，请求时这样访问的：前端控制器将请求传给处理器映射器去寻找对应的处理方法，如果找不到，暂时不报错，而是将这个请求转交给外部容器(Tomcat)的默认处理器(default-servlet)去处理。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    静态资源释放方式二</span></span><br><span class="line"><span class="comment">       配置下面的标签之前，请求是这样访问的：前端控制器将请求传给处理器映射器去寻找对应的处理方法，如果找不到，就会报404</span></span><br><span class="line"><span class="comment">       配置之后，请求时这样访问的：前端控制器将请求传给处理器映射器去寻找对应的处理方法，如果找不到，暂时不报错，而是将这个请求转交给外部容器(Tomcat)的默认处理器(default-servlet)去处理</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="方式三-1"><a href="#方式三-1" class="headerlink" title="方式三"></a>方式三</h2><p>在web.xml中修改前端控制器的拦截路径将<code>/</code>改为<code>*.do</code>，这种写法代表的是<code>拦截所有以.do结尾的访问地址，这就要求所有的请求路径上都加上.do</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--除了.jsp文件不拦截,其他文件全部拦截--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;url-pattern&gt;/&lt;/url-pattern&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        静态资源释放方式三</span></span><br><span class="line"><span class="comment">        这种写法代表拦截的是所有以.do结尾的访问地址，这就要求所有的请求路径上都加上.do</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在配置上面的前端控制器拦截以<code>.do</code>结尾的请求路径时，SpringMVC查找的时候是这样查找的：<strong>先按照最标准的路径去查找(即带着<code>.do</code>去查找)，如果找不到就去掉后缀(.do)再找一次</strong></p>
<ul>
<li><strong>意思就是即使我们在具体的控制器的方法上配置@RequestMapping()时，不指定后缀也能访问到…</strong></li>
<li><strong>但是前台请求地址时必须带着.do后缀</strong></li>
</ul>
<h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo1.do"&gt;请求1&lt;/a&gt;&lt;br&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo2.do"&gt;请求2&lt;/a&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指定后缀</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo1.do"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不指定后缀</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="AJAX-JSON实现异步交互"><a href="#AJAX-JSON实现异步交互" class="headerlink" title="AJAX+JSON实现异步交互"></a>AJAX+JSON实现异步交互</h1><h2 id="回顾AJAX"><a href="#回顾AJAX" class="headerlink" title="回顾AJAX"></a>回顾AJAX</h2><ul>
<li>前台写法</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.post(url,params,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;&#125;,<span class="string">"json"</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>后台写法</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">List ----&gt; new objectMapper().writeValueAsString(List)----&gt;json-----&gt;response.write(json)</span><br></pre></td></tr></table></figure>

<h2 id="SpringMVC实现AJAX-JSON异步交互"><a href="#SpringMVC实现AJAX-JSON异步交互" class="headerlink" title="SpringMVC实现AJAX+JSON异步交互"></a>SpringMVC实现AJAX+JSON异步交互</h2><p>接下来我们研究ajax异步发送请求数据，后端返回json响应</p>
<p>在SpringMVC中,  这个功能主要是通过两个注解<code>@RequestBody</code>和@R<code>esponseBody</code>实现的。</p>
<ul>
<li><code>@RequestBody</code>：用于接收前端传递的请求体中的json数据，并可以自动转换封装进指定的对象中。</li>
<li><code>@ResponseBody</code>：用于将controller方法返回的对象通过转换器转换为指定的格式( 通常为json )之后，再写回响应。</li>
</ul>
<p><strong>注意:  Springmvc默认用MappingJackson2HttpMessageConverter对json数据进行转换，需要加入jackson的包</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>这个jackson的包,SpringMVC底层没有引入,需要我们单独导入</p>
</blockquote>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><h3 id="前台代码"><a href="#前台代码" class="headerlink" title="前台代码"></a>前台代码</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;script src="$&#123;pageContext.request.contextPath&#125;/js/jquery-3.3.1.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;button id="ajax-json"&gt;AJAX+JSON实现异步交互&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">"#ajax-json"</span>).click(function () &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type:<span class="string">"POST"</span>,</span><br><span class="line">            url:<span class="string">"$&#123;pageContext.request.contextPath&#125;/demoController/demo10"</span>,</span><br><span class="line">            contentType:<span class="string">"application/json"</span>,<span class="comment">/*代表的是前台向后台发送的数据类型为json*/</span></span><br><span class="line">            dataType:<span class="string">"json"</span>,<span class="comment">/*代表后台向前台返回的数据类型为json*/</span></span><br><span class="line">            data:<span class="string">'[&#123;"name":"张三","age":"18"&#125;,&#123;"name":"李四","age":"20"&#125;]'</span>,</span><br><span class="line">            success:function (data) &#123;</span><br><span class="line">                <span class="comment">//获取响应会的json信息</span></span><br><span class="line">                <span class="keyword">for</span>(let user of data)&#123;</span><br><span class="line">                    alert(user.name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="后台代码"><a href="#后台代码" class="headerlink" title="后台代码"></a>后台代码</h3><ul>
<li>User类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//set、get略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>处理器</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//AJAX+JSON实现异步交互</span></span><br><span class="line"><span class="meta">@ResponseBody</span><span class="comment">//作用是将controller方法的返回值对象通过转换器转换为指的的格式(默认为json)之后，再写回相应</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo10"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">demo10</span><span class="params">(@RequestBody List&lt;User&gt; users)</span></span>&#123;<span class="comment">//@RequestBody作用是在请求体中获取json类型的数据，然后封装到指定集合或对象中</span></span><br><span class="line">    System.out.println(users);</span><br><span class="line">    <span class="keyword">return</span> users;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="restful风格"><a href="#restful风格" class="headerlink" title="restful风格"></a>restful风格</h1><h2 id="什么是restful风格"><a href="#什么是restful风格" class="headerlink" title="什么是restful风格"></a>什么是restful风格</h2><p>REST是一种软件架构风格，其强调HTTP应当以资源为中心[在请求地址中尽量的不要出现动词]。</p>
<p>REST规范了HTTP请求动作，使用四个词语分别表示对资源的CRUD操作: </p>
<ul>
<li><code>GET(获取)</code></li>
<li><code>POST(新建)</code></li>
<li><code>PUT(更新)</code></li>
<li><code>DELETE(删除)</code> </li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>原来</th>
<th>Restful</th>
</tr>
</thead>
<tbody><tr>
<td>保存</td>
<td>/saveUser</td>
<td>POST     /user</td>
</tr>
<tr>
<td>修改</td>
<td>/updateUser</td>
<td>PUT       /user</td>
</tr>
<tr>
<td>删除</td>
<td>/deleteUser?id=1</td>
<td>DELETE  /user/1</td>
</tr>
<tr>
<td>查询所有</td>
<td>/findAllUsers</td>
<td>GET        /user</td>
</tr>
<tr>
<td>查询一个</td>
<td>/findById?id=1</td>
<td>GET        /user/1</td>
</tr>
</tbody></table>
<h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><h3 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h3><h4 id="前台-9"><a href="#前台-9" class="headerlink" title="前台"></a>前台</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;button id="restful1"&gt;演示restful风格_save&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">"#restful"</span>).click(function () &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type:<span class="string">"POST"</span>,</span><br><span class="line">            url:<span class="string">"$&#123;pageContext.request.contextPath&#125;/user"</span>,</span><br><span class="line">            contentType:<span class="string">"application/json"</span>,<span class="comment">/*代表的是前台向后台发送的数据类型为json*/</span></span><br><span class="line">            dataType:<span class="string">"json"</span>,<span class="comment">/*代表后台向前台返回的数据类型为json*/</span></span><br><span class="line">            data:<span class="string">'&#123;"name":"张三","age":"18"&#125;'</span>,</span><br><span class="line">            success:function (data) &#123;</span><br><span class="line">                alert(<span class="string">"提交成功"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="后台-9"><a href="#后台-9" class="headerlink" title="后台"></a>后台</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//演示restful风格</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/user"</span>,method = RequestMethod.POST)</span><br><span class="line"><span class="comment">//@PostMapping("/user") 作用和上面注解相同，是一种简写</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">saveUser</span><span class="params">(@RequestBody User user)</span></span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"1"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><h4 id="前台-10"><a href="#前台-10" class="headerlink" title="前台"></a>前台</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;button id="restful2"&gt;演示restful风格_find&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">"#restful2"</span>).click(function () &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type:<span class="string">"GET"</span>,</span><br><span class="line">            url:<span class="string">"$&#123;pageContext.request.contextPath&#125;/user"</span>,</span><br><span class="line">            contentType:<span class="string">"application/json"</span>,</span><br><span class="line">            dataType:<span class="string">"json"</span>,</span><br><span class="line">            data:<span class="string">''</span>,</span><br><span class="line">            success:function (data) &#123;</span><br><span class="line">                alert(<span class="string">"提交成功"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="后台-10"><a href="#后台-10" class="headerlink" title="后台"></a>后台</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//演示restful风格</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/user"</span>,method = RequestMethod.GET)</span><br><span class="line"><span class="comment">//@GetMapping("/user")  作用和上面注解相同，是一种简写</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">findUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"findUSer"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"findUser"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="异常处理机制"><a href="#异常处理机制" class="headerlink" title="异常处理机制"></a>异常处理机制</h1><p>对于异常的处理一般有两种方式:</p>
<ul>
<li><p>当前方法处理(try-catch)，这种处理方式会造成业务代码和异常处理代码的耦合</p>
</li>
<li><p>当前方法不处理, 出现异常后直接抛给调用者处理</p>
</li>
</ul>
<p>使用Spring框架后，我们的代码最终是由框架来调用的。也就是说，异常最终会抛到框架中，然后由框架指定异常处理器来统一处理异常。</p>
<p><img data-src="/assets/SpringMVC%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6.png" alt="SpringMVC异常处理机制"></p>
<h2 id="方式一：自定义异常处理器"><a href="#方式一：自定义异常处理器" class="headerlink" title="方式一：自定义异常处理器"></a>方式一：自定义异常处理器</h2><p><strong>重点:  自定义一个类实现HandlerExceptionResolver接口</strong></p>
<h3 id="自定义异常处理器类"><a href="#自定义异常处理器类" class="headerlink" title="自定义异常处理器类"></a>自定义异常处理器类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerException</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//记录日志</span></span><br><span class="line">        System.out.println(e.getMessage());</span><br><span class="line">        <span class="comment">// 返回页面</span></span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mv.setViewName(<span class="string">"error"</span>);<span class="comment">//会拼接前后缀</span></span><br><span class="line">        mv.addObject(<span class="string">"message"</span>,e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="在配置文件中注入对象"><a href="#在配置文件中注入对象" class="headerlink" title="在配置文件中注入对象"></a>在配置文件中注入对象</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"handlerException"</span> <span class="attr">class</span>=<span class="string">"com.sun.handlers.HandlerException"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>前台</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo11"&gt;测试自定义异常处理器&lt;/a&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure>

<p>后台</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试自定义异常处理器</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo11"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo11</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>error界面</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;error&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;错误！！！&lt;/h1&gt;</span><br><span class="line">    $&#123;requestScope.message&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<h2 id="方式二：-ControllerAdvice注解"><a href="#方式二：-ControllerAdvice注解" class="headerlink" title="方式二：@ControllerAdvice注解"></a>方式二：@ControllerAdvice注解</h2><p><code>@ControllerAdvice</code> ：此注解标注在一个类上，代表这是一个全局异常处理器的类</p>
<p><code>@ExceptionHandler(Exception.class)</code> ：此注解标在方法上，它支持一个value属性，用于定义当前方法可以处理的异常类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span> <span class="comment">//此注解标注在一个类上，代表这是一个全局异常处理器的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerException2</span></span>&#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(Exception<span class="class">.<span class="keyword">class</span>) //此注解标在方法上，它支持一个<span class="title">value</span>属性，用于定义当前方法可以处理的异常类型</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">resolveException</span>(<span class="title">HttpServletRequest</span> <span class="title">request</span>,<span class="title">Exception</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//记录日志</span></span><br><span class="line">        System.out.println(e.getMessage());</span><br><span class="line">        <span class="comment">//返回页面</span></span><br><span class="line">        request.setAttribute(<span class="string">"message"</span>,e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意在配置文件中添加注解扫描：<code>&lt;context:component-scan base-package=&quot;com.sun.handlers&quot;/&gt;</code></p>
</blockquote>
<h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>略…</p>
<h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h1><h2 id="什么是拦截器"><a href="#什么是拦截器" class="headerlink" title="什么是拦截器"></a>什么是拦截器</h2><p>拦截器是Spring提供的一种技术，它的功能似于过滤器Filter，它会在<strong>进入controller之前，离开controller之后以及页面渲染完毕之后</strong>进行拦截。</p>
<p><img data-src="/assets/SpringMVC%E6%8B%A6%E6%88%AA%E5%99%A8.png" alt="SpringMVC拦截器"></p>
<h2 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h2><p>重点：自定义一个类实现<code>HandlerInterceptor</code>接口</p>
<h3 id="开发拦截器"><a href="#开发拦截器" class="headerlink" title="开发拦截器"></a>开发拦截器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandlerInterceptor1</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"在进入controller之前1..."</span>);</span><br><span class="line">        <span class="comment">//此返回值代表是否放行当前请求，true为放行，false禁止放心</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"在离开controller之后1..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"在页面渲染完毕后1..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置拦截器链--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置拦截器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用于配置拦截规则--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用于配置不拦截的规则--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/demoController/demo1"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--将上面规则匹配到的拦截请求，交给拦截器处理--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myHandlerInterceptor1"</span> <span class="attr">class</span>=<span class="string">"com.sun.handlers.MyHandlerInterceptor1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo12"&gt;测试拦截器&lt;/a&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试拦截器</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo12"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo12</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"进入controller"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="自定义拦截器链"><a href="#自定义拦截器链" class="headerlink" title="自定义拦截器链"></a>自定义拦截器链</h2><p>开发中拦截器可以单独使用，也可以同时使用多个拦截器形成一条拦截器链。</p>
<p>开发步骤和单个拦截器是一样的，只不过注册的时候注册多个，<code>注意这里注册的顺序就代表拦截器执行的顺序</code>。</p>
<h3 id="再开发拦截器"><a href="#再开发拦截器" class="headerlink" title="再开发拦截器"></a>再开发拦截器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandlerInterceptor2</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"在进入controller2之前..."</span>);</span><br><span class="line">        <span class="comment">//此返回值代表是否放行当前请求，true为放行，false禁止放心</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"在离开controller2之后..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"在页面渲染完毕后2..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置拦截器链--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置拦截器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用于配置拦截规则--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用于配置不拦截的规则--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/demoController/demo1"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--将上米娜规则匹配到的拦截请求，交给拦截器处理--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myHandlerInterceptor1"</span> <span class="attr">class</span>=<span class="string">"com.sun.handlers.MyHandlerInterceptor1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/demoController/demo1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myHandlerInterceptor2"</span> <span class="attr">class</span>=<span class="string">"com.sun.handlers.MyHandlerInterceptor2"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="补充：拦截器释放静态资源"><a href="#补充：拦截器释放静态资源" class="headerlink" title="补充：拦截器释放静态资源"></a>补充：拦截器释放静态资源</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/**/*.css"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/**/*.js"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/**/*.png"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/**/*.gif"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/**/*.jpg"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/**/*.jpeg"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="案例：使用拦截器完成用户的访问拦截"><a href="#案例：使用拦截器完成用户的访问拦截" class="headerlink" title="案例：使用拦截器完成用户的访问拦截"></a>案例：使用拦截器完成用户的访问拦截</h2><p>需求：</p>
<ul>
<li>用户访问一个主页面index.jsp(首页, 权限控制)</li>
<li>如果用户已经登录，即可成功访问</li>
<li>如果用户没有登录，不允许访问，返回登录页面login.jsp</li>
</ul>
<h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p><img data-src="/assets/%E6%8B%A6%E6%88%AA%E5%99%A8%E6%A1%88%E4%BE%8B%EF%BC%9A%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95.png" alt="拦截器案例：用户登录"></p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="login-jsp"><a href="#login-jsp" class="headerlink" title="login.jsp"></a>login.jsp</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;login.jsp&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/login"</span>&gt;</span><br><span class="line">    &lt;label for="username"&gt;用户名：&lt;/label&gt;&lt;input type="text" id="username" name="username"/&gt;</span><br><span class="line">    &lt;label for="password"&gt;密码：&lt;/label&gt;&lt;input type="text" id="password" name="password"/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"登录"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<h4 id="配置欢迎页"><a href="#配置欢迎页" class="headerlink" title="配置欢迎页"></a>配置欢迎页</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置欢迎页--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>login.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="UserController"><a href="#UserController" class="headerlink" title="UserController"></a>UserController</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(User user, HttpSession session)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"user"</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"admin"</span>.equals(user.getUsername()) &amp;&amp; <span class="string">"123"</span>.equals(user.getPassword()))&#123;</span><br><span class="line">            <span class="comment">//登录成功</span></span><br><span class="line">            session.setAttribute(<span class="string">"currentUser"</span>,user.getUsername());</span><br><span class="line">            <span class="comment">//重定向到转发到首页的方法</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"redirect:toIndex"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//登录失败,重定向到登录页</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"redirect:/login.jsp"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/toIndex"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toIndex</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="User实体"><a href="#User实体" class="headerlink" title="User实体"></a>User实体</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">//get、set略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="index-jsp"><a href="#index-jsp" class="headerlink" title="index.jsp"></a>index.jsp</h4><blockquote>
<p>注意:index.jsp 要放置到WEB-INF下，不然不经过前端控制器就可以直接访问到</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;登录成功,欢迎您:$&#123;sessionScope.currentUser&#125;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<h4 id="开发拦截器-1"><a href="#开发拦截器-1" class="headerlink" title="开发拦截器"></a>开发拦截器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String username = (String) request.getSession().getAttribute(<span class="string">"currentUser"</span>);</span><br><span class="line">        <span class="keyword">if</span> (username == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//用户未登录，拦截</span></span><br><span class="line">            <span class="comment">//重定向到登录页</span></span><br><span class="line">            response.sendRedirect(request.getContextPath() + <span class="string">"/login.jsp"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//用户登录，放行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="配置拦截器-1"><a href="#配置拦截器-1" class="headerlink" title="配置拦截器"></a>配置拦截器</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置拦截器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--拦截所有--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--放行登录请求--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/login"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.sun.interceptor.LoginInterceptor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>框架</category>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>页面跳转方式</tag>
        <tag>释放静态资源</tag>
        <tag>SpringMVC实现AJAX</tag>
        <tag>restful风格</tag>
        <tag>异常处理机制</tag>
        <tag>拦截器</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM的整合</title>
    <url>/2020/09/29/SSM%E7%9A%84%E6%95%B4%E5%90%88/</url>
    <content><![CDATA[<h1 id="SSM整合"><a href="#SSM整合" class="headerlink" title="SSM整合"></a>SSM整合</h1><h2 id="回顾SSM"><a href="#回顾SSM" class="headerlink" title="回顾SSM"></a>回顾SSM</h2><p>S : Spring——全栈</p>
<p>S : SpringMVC——表现层</p>
<p>M : Mybaits——持久层</p>
<a id="more"></a>

<h2 id="整合思路"><a href="#整合思路" class="headerlink" title="整合思路"></a>整合思路</h2><p>SSM整合基本思路：使用Spring( 容器 )来整合Mybatis和SpringMVC</p>
<p>整合步骤是这样：</p>
<ol>
<li>先各自搭建SSM的环境</li>
<li>使用Spring整合Mybatis</li>
<li>使用Spring整合SpringMVC</li>
</ol>
<p><img data-src="/assets/SSM%E6%95%B4%E5%90%88%E6%80%9D%E8%B7%AF.png" alt="SSM整合思路"></p>
<h2 id="准备数据环境"><a href="#准备数据环境" class="headerlink" title="准备数据环境"></a>准备数据环境</h2><blockquote>
<p>spring库</p>
<p>account表</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">account</span>(</span><br><span class="line">	aid <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">	<span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">unique</span>,</span><br><span class="line">	balance <span class="built_in">float</span>(<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>



<h2 id="搭建Mybatis环境"><a href="#搭建Mybatis环境" class="headerlink" title="搭建Mybatis环境"></a>搭建Mybatis环境</h2><h3 id="创建工程，导入相依赖"><a href="#创建工程，导入相依赖" class="headerlink" title="创建工程，导入相依赖"></a>创建工程，导入相依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--MySQL--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--log4j--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer aid;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Float balance;</span><br><span class="line">    <span class="comment">//get、set略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="创建Dao接口"><a href="#创建Dao接口" class="headerlink" title="创建Dao接口"></a>创建Dao接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 账户列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="创建Dao的映射文件"><a href="#创建Dao的映射文件" class="headerlink" title="创建Dao的映射文件"></a>创建Dao的映射文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> </span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.sun.dao.AccountDao"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.Account"</span>&gt;</span></span><br><span class="line">        select * from account</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="加入Mybatis配置文件"><a href="#加入Mybatis配置文件" class="headerlink" title="加入Mybatis配置文件"></a>加入Mybatis配置文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbc.properties"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--全局设置：可以设置缓存、懒加载等--&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--设置别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.sun.domain"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.sun.dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>jdbc.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span> = <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span> = <span class="string">jdbc:mysql:///spring</span></span><br><span class="line"><span class="meta">jdbc.username</span> =  <span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span> = <span class="string">root</span></span><br></pre></td></tr></table></figure>



<h3 id="加入log4j日志配置文件"><a href="#加入log4j日志配置文件" class="headerlink" title="加入log4j日志配置文件"></a>加入log4j日志配置文件</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span> = <span class="string">debug,stdout</span></span><br><span class="line"><span class="meta">log4j.appender.stdout</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout.ConversionPattern</span> = <span class="string">[%-5p] %d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; method:%l%n%m%n</span></span><br></pre></td></tr></table></figure>



<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">//读取配置文件</span></span><br><span class="line">    InputStream in = Resources.getResourceAsStream(<span class="string">"mybatis-config.xml"</span>);</span><br><span class="line">    <span class="comment">//获取SqlSessionFactory</span></span><br><span class="line">    SqlSessionFactory sessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">    <span class="comment">//获取SqlSession</span></span><br><span class="line">    SqlSession sqlSession = sessionFactory.openSession();</span><br><span class="line">    <span class="comment">//获取dao对象</span></span><br><span class="line">    AccountDao mapper = sqlSession.getMapper(AccountDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    List&lt;Account&gt; accountList = mapper.findAll();</span><br><span class="line">    <span class="keyword">for</span> (Account account : accountList) &#123;</span><br><span class="line">        System.out.println(account);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="搭建Spring环境"><a href="#搭建Spring环境" class="headerlink" title="搭建Spring环境"></a>搭建Spring环境</h2><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="创建Service接口"><a href="#创建Service接口" class="headerlink" title="创建Service接口"></a>创建Service接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 账户列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="创建Service实现类"><a href="#创建Service实现类" class="headerlink" title="创建Service实现类"></a>创建Service实现类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Todo 等待dao整合结束</span></span><br><span class="line">    <span class="comment">//@Autowired</span></span><br><span class="line">    <span class="comment">//private AccountDao accountDao;</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查询成功"</span>);</span><br><span class="line">        <span class="comment">//Todo 等待dao整合结束</span></span><br><span class="line">        <span class="comment">//return accountDao.findAll();</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="加入Spring配置文件"><a href="#加入Spring配置文件" class="headerlink" title="加入Spring配置文件"></a>加入Spring配置文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">			    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">			    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">			    http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">			    http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">			    http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">			    http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">			    http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.sun.service"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//创建Spring的容器</span></span><br><span class="line">        ApplicationContext act = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">//获取对象，调用方法</span></span><br><span class="line">        AccountService accountService = act.getBean(AccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        List&lt;Account&gt; accounts = accountService.findAll();</span><br><span class="line">        <span class="keyword">if</span> (accounts != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (Account account : accounts) &#123;</span><br><span class="line">                System.out.println(account);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="搭建SpringMVC环境"><a href="#搭建SpringMVC环境" class="headerlink" title="搭建SpringMVC环境"></a>搭建SpringMVC环境</h2><h3 id="导入依赖-1"><a href="#导入依赖-1" class="headerlink" title="导入依赖"></a>导入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpringMVC相关--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="加入SpringMVC配置文件"><a href="#加入SpringMVC配置文件" class="headerlink" title="加入SpringMVC配置文件"></a>加入SpringMVC配置文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.sun.controller"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--三大组件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span></span></span><br></pre></td></tr></table></figure>



<h3 id="配置web-xml"><a href="#配置web-xml" class="headerlink" title="配置web.xml"></a>配置web.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!--前端控制器--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--编码过滤器--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="开发请求页面"><a href="#开发请求页面" class="headerlink" title="开发请求页面"></a>开发请求页面</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;index&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;</span><br><span class="line">        &lt;a href="$&#123;pageContext.request.contextPath&#125;/accountController/list"&gt;查询列表&lt;/a&gt;</span><br><span class="line">    &lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<h3 id="开发Controller"><a href="#开发Controller" class="headerlink" title="开发Controller"></a>开发Controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Todo 等待整合结束</span></span><br><span class="line">    <span class="comment">//@Autowired</span></span><br><span class="line">    <span class="comment">//private AccountService accountService;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/accountController/list"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        <span class="comment">//Todo 等待整合结束</span></span><br><span class="line">        <span class="comment">//List&lt;Account&gt; accounts = accountService.findAll();</span></span><br><span class="line">        request.setAttribute(<span class="string">"accounts"</span>,<span class="string">"xxxxx"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="开发响应页面"><a href="#开发响应页面" class="headerlink" title="开发响应页面"></a>开发响应页面</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;list&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    $&#123;requestScope.accounts&#125;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<h3 id="测试-略"><a href="#测试-略" class="headerlink" title="测试(略)"></a>测试(略)</h3><h2 id="Spring整合Mybatis"><a href="#Spring整合Mybatis" class="headerlink" title="Spring整合Mybatis"></a>Spring整合Mybatis</h2><h3 id="整合思路-1"><a href="#整合思路-1" class="headerlink" title="整合思路"></a>整合思路</h3><p>将mybatis的所有配置信息转移到Spring的配置文件中</p>
<p>将Mybatis的SqlSessionFactory托管到Spring的容器中</p>
<h3 id="添加整合包"><a href="#添加整合包" class="headerlink" title="添加整合包"></a>添加整合包</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Spring整合Mybatis的包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="将mybatis的所有配置信息转移到Spring的配置文件中"><a href="#将mybatis的所有配置信息转移到Spring的配置文件中" class="headerlink" title="将mybatis的所有配置信息转移到Spring的配置文件中"></a>将mybatis的所有配置信息转移到Spring的配置文件中</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置数据源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入映射文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mapperScannerConfigurer"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.sun.dao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--SqlSessionFactor托管--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"com.sun.domain"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="在Service中注入Dao"><a href="#在Service中注入Dao" class="headerlink" title="在Service中注入Dao"></a>在Service中注入Dao</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> accountDao.findAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">//创建Spring的容器</span></span><br><span class="line">    ApplicationContext act = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">    <span class="comment">//获取对象，调用方法</span></span><br><span class="line">    AccountService accountService = act.getBean(AccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    List&lt;Account&gt; accounts = accountService.findAll();</span><br><span class="line">    <span class="keyword">if</span> (accounts != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span> (Account account : accounts) &#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Spring整合SpringMVC"><a href="#Spring整合SpringMVC" class="headerlink" title="Spring整合SpringMVC"></a>Spring整合SpringMVC</h2><h3 id="整合思路-2"><a href="#整合思路-2" class="headerlink" title="整合思路"></a>整合思路</h3><p>Spring和SpringMVC本身就是一家产品，是不用整合的，</p>
<p>但是现在的Spring容器自己无法启动，我们需要在web容器启动的时候，加载Spring的配置文件，启动Spring容器</p>
<p>那么这个工作是在spring-web包中的一个监听器来做的，这个包不用单独导入，他已经在 spring-webmvc 包中了</p>
<p><strong>它会监听WEB容器的启动和停止，然后就可以控制Spring容器的启动和停止了</strong></p>
<h3 id="web-xml配置监听器"><a href="#web-xml配置监听器" class="headerlink" title="web.xml配置监听器"></a>web.xml配置监听器</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Spring监听器--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--传递Spring配置文件给监听器，一共监听器读取进而启动Spring容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="在Controller注入Service对象"><a href="#在Controller注入Service对象" class="headerlink" title="在Controller注入Service对象"></a>在Controller注入Service对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/accountController/list"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    List&lt;Account&gt; accounts = accountService.findAll();</span><br><span class="line">    request.setAttribute(<span class="string">"accounts"</span>,accounts);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"list"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="部署测试-略…"><a href="#部署测试-略…" class="headerlink" title="部署测试(略…)"></a>部署测试(略…)</h3><h3 id="列表查询"><a href="#列表查询" class="headerlink" title="列表查询"></a>列表查询</h3><ul>
<li>list.jsp</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;list&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;table border=<span class="string">"1px"</span> cellpadding=<span class="string">"0"</span> cellspacing=<span class="string">"0"</span> width=<span class="string">"500px"</span> align=<span class="string">"center"</span>&gt;</span><br><span class="line">    &lt;thead&gt;</span><br><span class="line">        &lt;th&gt;id&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;名称&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;余额&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">    &lt;/thead&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">"$&#123;requestScope.accounts&#125;"</span> <span class="keyword">var</span>=<span class="string">"account"</span>&gt;</span><br><span class="line">        &lt;tr align=<span class="string">"center"</span>&gt;</span><br><span class="line">            &lt;td&gt;$&#123;account.aid&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;account.name&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;account.balance&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;修改|删除&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<h1 id="增删改查案例"><a href="#增删改查案例" class="headerlink" title="增删改查案例"></a>增删改查案例</h1><h2 id="思路图"><a href="#思路图" class="headerlink" title="思路图"></a>思路图</h2><p><img data-src="/assets/%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E6%A1%88%E4%BE%8B%E6%80%9D%E8%B7%AF%E5%9B%BE.png" alt="增删改查案例思路图"></p>
<h2 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h2><h3 id="在list页面添加跳转到新增页面的按钮"><a href="#在list页面添加跳转到新增页面的按钮" class="headerlink" title="在list页面添加跳转到新增页面的按钮"></a>在list页面添加跳转到新增页面的按钮</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;h1 align="center"&gt;&lt;a href="$&#123;pageContext.request.contextPath&#125;/accountController/toAdd"&gt;新增账户&lt;/a&gt;&lt;/h1&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Controller添加跳转到增加页面的方法"><a href="#Controller添加跳转到增加页面的方法" class="headerlink" title="Controller添加跳转到增加页面的方法"></a>Controller添加跳转到增加页面的方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/accountController/toAdd"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"add"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="WEB-INF下创建新增页面"><a href="#WEB-INF下创建新增页面" class="headerlink" title="WEB-INF下创建新增页面"></a>WEB-INF下创建新增页面</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;add.jsp&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div style=<span class="string">"width: 500px;margin: 100px auto;border: 1px solid gray;padding: 20px"</span> &gt;</span><br><span class="line">    &lt;h1&gt;新增&lt;/h1&gt;</span><br><span class="line">    &lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/accountController/add"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">        &lt;label for="name"&gt;名称：&lt;/label&gt;&lt;input id="name" type="text" name="name"&gt;&lt;br/&gt;&lt;br/&gt;</span><br><span class="line">        &lt;label for="balance"&gt;余额：&lt;/label&gt;&lt;input id="balance" type="text" name="balance"&gt;&lt;br/&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> value=<span class="string">"保存"</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<h3 id="Controller编写添加的方法"><a href="#Controller编写添加的方法" class="headerlink" title="Controller编写添加的方法"></a>Controller编写添加的方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/accountController/add"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">(Account account)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    accountService.save(account);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/accountController/list"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Service是接口-实现类"><a href="#Service是接口-实现类" class="headerlink" title="Service是接口+实现类"></a>Service是接口+实现类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">    accountDao.save(account);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Dao接口-映射"><a href="#Dao接口-映射" class="headerlink" title="Dao接口+映射"></a>Dao接口+映射</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"save"</span>&gt;</span></span><br><span class="line">    insert into account values(null,#&#123;name&#125;,#&#123;balance&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><h3 id="数据回显"><a href="#数据回显" class="headerlink" title="数据回显"></a>数据回显</h3><h4 id="在list页面上添加修改按钮"><a href="#在list页面上添加修改按钮" class="headerlink" title="在list页面上添加修改按钮"></a>在list页面上添加修改按钮</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;a href="/accountController/toUpdate?aid=$&#123;account.aid&#125;"&gt;修改&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<h4 id="Controller添加跳转到增加页面的方法-1"><a href="#Controller添加跳转到增加页面的方法-1" class="headerlink" title="Controller添加跳转到增加页面的方法"></a>Controller添加跳转到增加页面的方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/accountController/toUpdate"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toUpdate</span><span class="params">(Integer aid,HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    Account account = accountService.findByAid(aid);</span><br><span class="line">    request.setAttribute(<span class="string">"account"</span>,account);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"update"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="在service添加查询方法接口-实现类"><a href="#在service添加查询方法接口-实现类" class="headerlink" title="在service添加查询方法接口+实现类"></a>在service添加查询方法接口+实现类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Account <span class="title">findByAid</span><span class="params">(Integer aid)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">findByAid</span><span class="params">(Integer aid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> accountDao.findByAid(aid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="在dao中添加查询方法接口-映射"><a href="#在dao中添加查询方法接口-映射" class="headerlink" title="在dao中添加查询方法接口+映射"></a>在dao中添加查询方法接口+映射</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Account <span class="title">findByAid</span><span class="params">(Integer aid)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByAid"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.Account"</span>&gt;</span></span><br><span class="line">    select * from account where aid = #&#123;aid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="添加修改账户页面"><a href="#添加修改账户页面" class="headerlink" title="添加修改账户页面"></a>添加修改账户页面</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;update&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div style=<span class="string">"width: 500px;margin: 100px auto;border: 1px solid gray;padding: 20px"</span> &gt;</span><br><span class="line">    &lt;h1&gt;修改&lt;/h1&gt;</span><br><span class="line">    &lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/accountController/update"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"aid"</span> value=<span class="string">"$&#123;requestScope.account.aid&#125;"</span>&gt;</span><br><span class="line">        &lt;label for="name"&gt;名称：&lt;/label&gt;&lt;input id="name" type="text" name="name" value="$&#123;requestScope.account.name&#125;"&gt;&lt;br/&gt;&lt;br/&gt;</span><br><span class="line">        &lt;label for="balance"&gt;余额：&lt;/label&gt;&lt;input id="balance" type="text" name="balance" value="$&#123;requestScope.account.balance&#125;"&gt;&lt;br/&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> value=<span class="string">"修改"</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<h3 id="修改提交"><a href="#修改提交" class="headerlink" title="修改提交"></a>修改提交</h3><h4 id="在controller中添加修改方法"><a href="#在controller中添加修改方法" class="headerlink" title="在controller中添加修改方法"></a>在controller中添加修改方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/accountController/update"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(Account account)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    accountService.update(account);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/accountController/list"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="在service中添加修改方法接口-实现类"><a href="#在service中添加修改方法接口-实现类" class="headerlink" title="在service中添加修改方法接口+实现类"></a>在service中添加修改方法接口+实现类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Account account)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">    accountDao.update(account);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="在dao添加修改方法接口-映射"><a href="#在dao添加修改方法接口-映射" class="headerlink" title="在dao添加修改方法接口+映射"></a>在dao添加修改方法接口+映射</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Account account)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span>&gt;</span></span><br><span class="line">    update account set name = #&#123;name&#125;, balance = #&#123;balance&#125; where aid = #&#123;aid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><h3 id="修改list页面，添加删除"><a href="#修改list页面，添加删除" class="headerlink" title="修改list页面，添加删除"></a>修改list页面，添加删除</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;a href="javascript:void(0)" onclick="deleteByAid('$&#123;account.aid&#125;')"&gt;删除&lt;/a&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function">function <span class="title">deleteByAid</span><span class="params">(aid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> flag = confirm(<span class="string">"您确定要删除吗?"</span>);</span><br><span class="line">        <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">            window.location = <span class="string">"/accountController/delete?aid="</span>+aid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h3 id="在controller中添加删除方法"><a href="#在controller中添加删除方法" class="headerlink" title="在controller中添加删除方法"></a>在controller中添加删除方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/accountController/delete"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(Integer aid)</span></span>&#123;</span><br><span class="line">    accountService.delete(aid);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/accountController/list"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="在service中添加删除方法接口-实现类"><a href="#在service中添加删除方法接口-实现类" class="headerlink" title="在service中添加删除方法接口+实现类"></a>在service中添加删除方法接口+实现类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer aid)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer aid)</span> </span>&#123;</span><br><span class="line">    accountDao.delete(aid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="在dao添加删除方法接口-映射"><a href="#在dao添加删除方法接口-映射" class="headerlink" title="在dao添加删除方法接口+映射"></a>在dao添加删除方法接口+映射</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer aid)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"delete"</span>&gt;</span></span><br><span class="line">    delete from account where aid = #&#123;aid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="添加事务控制"><a href="#添加事务控制" class="headerlink" title="添加事务控制"></a>添加事务控制</h2><h3 id="xml版本"><a href="#xml版本" class="headerlink" title="xml版本"></a>xml版本</h3><p>在Spring中配置事务控制</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--切点--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pt"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.sun.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--切面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="注解版本"><a href="#注解版本" class="headerlink" title="注解版本"></a>注解版本</h3><ul>
<li><p>删除xml版本的配置保留事务管理器</p>
</li>
<li><p>添加事务注解驱动</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在方法或者类上添加事务控制注解<code>@Transactional</code></li>
</ul>
<blockquote>
<p>例如：为保存方法添加事务控制</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">    accountDao.save(account);</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="Spring的父子容器"><a href="#Spring的父子容器" class="headerlink" title="Spring的父子容器"></a>Spring的父子容器</h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>Spring和SpringMVC的容器具有父子关系，Spring容器为父容器，SpringMVC为子容器</p>
<p>子容器可以引用父容器中的Bean，而父容器不可以引用子容器中的Bean</p>
<p><img data-src="/assets/Spring%E7%88%B6%E5%AD%90%E5%AE%B9%E5%99%A8%E8%AF%B4%E6%98%8E.png" alt="Spring父子容器说明"></p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><img data-src="/assets/Spring%E7%88%B6%E5%AD%90%E5%AE%B9%E5%99%A8%E9%85%8D%E7%BD%AE.png" alt="Spring父子容器配置"></p>
]]></content>
      <categories>
        <category>框架</category>
      </categories>
      <tags>
        <tag>SSM的整合</tag>
        <tag>增删改查案例</tag>
        <tag>Spring的父子容器</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven高级&amp;分模块开发</title>
    <url>/2020/09/30/Maven%E9%AB%98%E7%BA%A7-%E5%88%86%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="分模块开发"><a href="#分模块开发" class="headerlink" title="分模块开发"></a>分模块开发</h1><h2 id="拆分与聚合的思想"><a href="#拆分与聚合的思想" class="headerlink" title="拆分与聚合的思想"></a>拆分与聚合的思想</h2><p><strong>拆分</strong> 将原来的一个项目拆分成一个个小的模块, 每个模块都有自己的坐标,  当其它项目需要本模块的功能时, 只需要按照坐标引入本模块就可以了</p>
<p><strong>聚合</strong> 通过坐标的形式，将各个模块组装在一起,完成一个项目的功能</p>
<p><img data-src="/assets/%E6%8B%86%E5%88%86%E4%B8%8E%E8%81%9A%E5%90%88%E6%80%9D%E6%83%B3.png" alt="拆分与聚合思想"></p>
<a id="more"></a>

<h2 id="父子工程搭建"><a href="#父子工程搭建" class="headerlink" title="父子工程搭建"></a>父子工程搭建</h2><p>首先创建父工程，在父工程下创建dao、service、web模块，在sevice中添加一个依赖，导入dao模块，web模块中添加service模块。</p>
<p>略…</p>
<blockquote>
<p>在进行依赖的时候, maven规定:</p>
<ul>
<li>编译阶段, 可以使用源代码进行依赖</li>
<li>运行阶段,必须使用jar包进行依赖</li>
</ul>
</blockquote>
<h2 id="两套关系梳理"><a href="#两套关系梳理" class="headerlink" title="两套关系梳理"></a>两套关系梳理</h2><p>在上面的工程中, 存在两套关系</p>
<ul>
<li>父子工程之间: 继承关系, 子工程可以使用父工程中的jar包</li>
<li>模块工程之间:  默认是没有任何关系的，但是可以通过依赖建立两者之间的关系，而且这个依赖关系是可以传递的</li>
</ul>
<blockquote>
<p>A–&gt;B   B–&gt;C         A–&gt;C<br>我们把A和B之间  或者  B和C 之间称为  直接依赖<br>我们把    A和C   之间称为   间接依赖</p>
</blockquote>
<h1 id="依赖冲突"><a href="#依赖冲突" class="headerlink" title="依赖冲突"></a>依赖冲突</h1><h2 id="什么是依赖冲突"><a href="#什么是依赖冲突" class="headerlink" title="什么是依赖冲突"></a>什么是依赖冲突</h2><p>在依赖的传递过程中，很容易出现同一jar包的版本冲突问题，这个就称为依赖冲突 </p>
<p><img data-src="/assets/%E4%BB%80%E4%B9%88%E6%98%AF%E4%BE%9D%E8%B5%96%E5%86%B2%E7%AA%81.png" alt="什么是依赖冲突"></p>
<h2 id="依赖冲突解决"><a href="#依赖冲突解决" class="headerlink" title="依赖冲突解决"></a>依赖冲突解决</h2><h3 id="第一声明有限原则"><a href="#第一声明有限原则" class="headerlink" title="第一声明有限原则"></a>第一声明有限原则</h3><p>在pom文件定义依赖，先声明的依赖为准。</p>
<p><img data-src="/assets/%E7%AC%AC%E4%B8%80%E5%A3%B0%E6%98%8E%E4%BC%98%E5%85%88%E5%8E%9F%E5%88%99.png" alt="第一声明优先原则"></p>
<h3 id="路径近者优先原则"><a href="#路径近者优先原则" class="headerlink" title="路径近者优先原则"></a>路径近者优先原则</h3><p>从依赖程序开始算起，到被依赖的程序，以路径短的为准。</p>
<p><img data-src="/assets/%E8%B7%AF%E5%BE%84%E8%BF%91%E8%80%85%E4%BC%98%E5%85%88%E5%8E%9F%E5%88%99.png" alt="路径近者优先原则"></p>
<h3 id="依赖排除"><a href="#依赖排除" class="headerlink" title="依赖排除"></a>依赖排除</h3><p>依赖排除就是在依赖引入的过程中，通过<code>exclusions</code>标签排掉指定的跟随依赖</p>
<p><img data-src="/assets/%E4%BE%9D%E8%B5%96%E6%8E%92%E9%99%A4.png" alt="依赖排除"></p>
<h3 id="版本锁定"><a href="#版本锁定" class="headerlink" title="版本锁定"></a>版本锁定</h3><p>面对众多的依赖，有一种方法不用考虑依赖路径、声明优先等因素，可以采用直接锁定版本的方法确定依赖构件的版本</p>
<p>版本锁定后，系统会以锁定的版本的为准添加到工程中，此方法在企业开发中常用。</p>
<p><img data-src="/assets/%E7%89%88%E6%9C%AC%E9%94%81%E5%AE%9A.png" alt="版本锁定"></p>
<p><strong>优化: 提取版本信息</strong> </p>
<p><img data-src="/assets/%E4%BC%98%E5%8C%96%E7%89%88%E6%9C%AC%E9%94%81%E5%AE%9A-%E6%8F%90%E5%8F%96%E7%89%88%E6%9C%AC%E4%BF%A1%E6%81%AF.png" alt="优化版本锁定-提取版本信息"></p>
<h1 id="私服"><a href="#私服" class="headerlink" title="私服"></a>私服</h1><h2 id="私服简介"><a href="#私服简介" class="headerlink" title="私服简介"></a>私服简介</h2><p>公司在自己的局域网内搭建自己的远程仓库服务器，称为私服，私服服务器即是公司内部的maven远程仓库，每个员工的电脑上安装maven软件并且连接私服服务器，员工将自己开发的项目打成jar并发布到私服服务器，其它项目组从私服服务器下载所依赖的构件（jar）。</p>
<p><img data-src="/assets/%E7%A7%81%E6%9C%8D.jpg" alt="私服"></p>
<h2 id="搭建私服环境"><a href="#搭建私服环境" class="headerlink" title="搭建私服环境"></a>搭建私服环境</h2><h3 id="下载nexus"><a href="#下载nexus" class="headerlink" title="下载nexus"></a>下载nexus</h3><p>Nexus是Maven仓库管理器，通过nexus可以搭建maven仓库, 软件已经提供在资料中<code>nexus-2.12.0-01-bundle.zip</code></p>
<p><img data-src="/assets/image-20200628144428365.png" alt="image-20200628144428365"></p>
<h3 id="安装nexus"><a href="#安装nexus" class="headerlink" title="安装nexus"></a>安装nexus</h3><p>第1步:  解压nexus-2.12.0-01-bundle.zip到一个没有中文没有空格的目录  </p>
<p> <img data-src="/assets/image-20200628145356064.png" alt="image-20200628145356064"></p>
<p>第2步: 以<code>管理员身份</code>运行cmd命令, 然后进入软件的bin目录，通过命令安装并启动nexus软件</p>
<p> <img data-src="/assets/image-20200628145948727.png" alt="image-20200628145948727"></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">补充下停止和下载的命令</span><br><span class="line">  停止 nexus.bat  stop</span><br><span class="line">  卸载 nexus.bat  uninstall</span><br></pre></td></tr></table></figure>

<p>第3步: 访问nexus</p>
<p>nexus默认监听端口为8081, 通过 <code>http://localhost:8081/nexus</code> 即可访问</p>
<p><img data-src="/assets/image-20200628150353480.png" alt="image-20200628150353480"></p>
<p>第4步: 登录nexus</p>
<p>nexus默认的用户名是==admin==, 默认的密码是==admin123==</p>
<p> <img data-src="/assets/image-20200628151112905.png" alt="image-20200628151112905"></p>
<p>登录成功后,会看到下面的内容:</p>
<p> <img data-src="/assets/image-20200628151303488.png" alt="image-20200628151303488"></p>
<h2 id="仓库类型"><a href="#仓库类型" class="headerlink" title="仓库类型"></a>仓库类型</h2><p>仓库有下面四类:</p>
<ul>
<li>proxy  代理仓库, 用于代理远程仓库(中央)</li>
<li>virtual  废弃的代理仓库</li>
<li>hosted  用于本地jar包上传的仓库</li>
<li>group  就是上面仓库的综合, 用于jar包的下载</li>
</ul>
<p><img data-src="/assets/image-20200628151528804.png" alt="image-20200628151528804"></p>
<h2 id="将项目发布到私服"><a href="#将项目发布到私服" class="headerlink" title="将项目发布到私服"></a>将项目发布到私服</h2><p>企业中多个团队协作开发通常会将一些公用的组件、开发模块等发布到私服供其它团队或模块开发人员使用。</p>
<p>第1步：在maven的settings.xml文件中,  添加下面配置</p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    此用户名和密码用于私服校验，因为私服需要知道上传的账号和密码是否和私服中的账号和密码一致。</span></span><br><span class="line"><span class="comment">    添加到servers节点下</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第2步： 在需要操作的模块(比如ssm_dao)的pom.xml文件中, 添加下面配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	配置私服仓库的地址，如果版本为release则上传到私服的release仓库，如果版本为snapshot则上传到私服的snapshot仓库</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/repositories/releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/repositories/snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>第3步： 选择需要操作的模块(比如ssm_dao), 执行deploy命令</p>
<p> <img data-src="/assets/image-20200628154108687.png" alt="image-20200628154108687"></p>
<p>第4步: 执行完毕后, 可以在私服的对应目录下观察到上传的文件</p>
<p> <img data-src="/assets/image-20200628154910224.png" alt="image-20200628154910224"></p>
<h2 id="从私服下载jar包"><a href="#从私服下载jar包" class="headerlink" title="从私服下载jar包"></a>从私服下载jar包</h2><p>配置nexus之后，本地仓库没有jar包，就去私服下载，私服如果没有, 再由私服去中央下载。</p>
<p>第1步:  在maven的settings.xml文件中, 添加下面配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置下载仓库--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">repository</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">releases</span>&gt;</span>  </span><br><span class="line">       <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>Public Repositories<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--使用profile定义仓库需要激活才可生效--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第2步: 测试</p>
<p>1)  首先在ssm_parent工程上执行install, 这样就可以将所有模块打包到本地仓库</p>
<p>2)  然后删除本地仓库中的ssm_dao的文件</p>
<p>3)  在ssm_service模块上执行compile命令</p>
<p>​     注意: service 要编译成功必须依赖仓库中的ssm_dao,而现在本地仓库中没有, 他就会从私服下载</p>
<p>4)  通过控制台观察效果</p>
<p><img data-src="/assets/image-20200628162939278.png" alt="image-20200628162939278"></p>
<h1 id="软件的服务模式"><a href="#软件的服务模式" class="headerlink" title="软件的服务模式"></a>软件的服务模式</h1><p>目前, 软件服务主要有三种模式:</p>
<ul>
<li><strong>IaaS（基础设施即服务）</strong> 提供给客户最基础的东西, 然后客户自己完成所有工作</li>
<li><strong>PaaS（平台即服务）</strong>提供给客户半成品的东西, 然后客户自己完成剩下的工作</li>
<li><strong>SaaS（软件即服务）</strong>提供给客户成品,  客户只需要使用</li>
</ul>
<p><img data-src="/assets/%E8%BD%AF%E4%BB%B6%E6%9C%8D%E5%8A%A1%E6%A8%A1%E5%BC%8F.png" alt="软件服务模式"></p>
<p>SaaS（Software-as-a-service）的意思是软件即服务。简单说就是在线系统模式，即软件服务商提供的软件在线服务。</p>
<p>SaaS软件就适用对象而言，可以划分为针对个人的与针对企业的</p>
<ul>
<li>面向个人的SaaS产品：在线文档，账务管理，文件管理，日程计划、照片管理、联系人管理，等等云类型的服务</li>
<li>面向企业的SaaS产品：CRM（客户关系管理）、线上视频或者与群组通话会议、OA(办公系统)、外勤管理、财务管理、审批管理等</li>
</ul>
<h2 id="软件开发流程"><a href="#软件开发流程" class="headerlink" title="软件开发流程"></a>软件开发流程</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">- </span>货代平台开发周期6个月左右，团队需要10人左右...</span><br><span class="line"><span class="code">	技术总监或架构师	产品经理或项目经理	java开发	前端和美工	测试    运维</span></span><br><span class="line"><span class="code">		   1				1			  4         2		  1       1</span></span><br><span class="line"><span class="code">		</span></span><br><span class="line"><span class="bullet">1. </span>立项</span><br><span class="line"><span class="code">	项目可实施性分析：（招商银行）100W项目，开发周期预计6个月，需要10人，运营（人力）成本2W/人</span></span><br><span class="line"><span class="code">	产品经理入住银行，进行需求调研《需求设计说明书》</span></span><br><span class="line"><span class="code">	需求研讨会：团队所有成员参加</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>设计</span><br><span class="line"><span class="code">	UI/UE工程师：《页面原型》</span></span><br><span class="line"><span class="code">	架构师：统一开发环境，项目技术选项，项目架构设计，数据库设计等等《概要设计说明书》</span></span><br><span class="line"><span class="code">	产品经理：接口规范、方法规范、参数规范、步骤要求等等《详细设计说明书》</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">3. </span>开发</span><br><span class="line"><span class="code">	coding（编码），码农</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">4. </span>测试</span><br><span class="line"><span class="code">	白盒测试：代码逻辑和性能</span></span><br><span class="line"><span class="code">	黑盒测试：用户体验</span></span><br><span class="line"><span class="code">	灰盒测试：黑+白</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">5. </span>部署</span><br><span class="line"><span class="code">	运维人员产品部署上传维护....</span></span><br></pre></td></tr></table></figure>



<h1 id="UML建模"><a href="#UML建模" class="headerlink" title="UML建模"></a>UML建模</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>UML</code>：统一建模语言（UML，UnifiedModelingLanguage）是面向对象软件的标准化建模语言。UML因其简单、统一的特点，而且能表达软件设计中的动态和静态信息，目前已成为可视化建模语言的工业标准。</p>
<p><code>PowerDesigner</code>：一款绘制各种UML图形的工具    </p>
<h2 id="用例图"><a href="#用例图" class="headerlink" title="用例图"></a>用例图</h2><p>在整个项目中会有不同的角色在使用，但是不同的角色在项目中做的事儿或者说看到的菜单是不一样的，为了让程序员更直观的获取到需求信息，项目经理或产品经理会使用用例图直观的表示出来。</p>
<p><img data-src="/assets/%E7%94%A8%E4%BE%8B%E5%9B%BE-1.png" alt="用例图-1"></p>
<p><img data-src="/assets/%E7%94%A8%E4%BE%8B%E5%9B%BE-2.png" alt="用例图-2"></p>
<p><img data-src="/assets/%E7%94%A8%E4%BE%8B%E5%9B%BE-3.png" alt="用例图-3"></p>
]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Mavne高级</tag>
        <tag>分模块开发</tag>
        <tag>UML建模</tag>
        <tag>Saas</tag>
      </tags>
  </entry>
</search>
