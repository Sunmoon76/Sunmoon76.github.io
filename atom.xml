<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>清风的博客</title>
  
  <subtitle>山水有相逢，山不动，水不停</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://sunmoon.com/"/>
  <updated>2020-10-18T12:16:51.723Z</updated>
  <id>http://sunmoon.com/</id>
  
  <author>
    <name>Sunmoon</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>百万数据报表技术&amp;EasyPOI&amp;定时任务</title>
    <link href="http://sunmoon.com/2020/10/18/%E7%99%BE%E4%B8%87%E6%95%B0%E6%8D%AE%E6%8A%A5%E8%A1%A8%E6%8A%80%E6%9C%AF-EasyPOI-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <id>http://sunmoon.com/2020/10/18/%E7%99%BE%E4%B8%87%E6%95%B0%E6%8D%AE%E6%8A%A5%E8%A1%A8%E6%8A%80%E6%9C%AF-EasyPOI-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</id>
    <published>2020-10-18T12:14:19.000Z</published>
    <updated>2020-10-18T12:16:51.723Z</updated>
    
    <content type="html"><![CDATA[<h1 id="出货表导出"><a href="#出货表导出" class="headerlink" title="出货表导出"></a>出货表导出</h1><h2 id="跳转出货表页面"><a href="#跳转出货表页面" class="headerlink" title="跳转出货表页面"></a>跳转出货表页面</h2><p>在<code>ContractController</code>中添加下面方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/print"</span>, name = <span class="string">"跳转出货表页面"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"/cargo/print/contract-print"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><h3 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h3><p>要求可以按照按照条件导出指定月份的出货表</p><p><img data-src="/assets/image-20200710004038151.png" alt="image-20200710004038151"></p><p><img data-src="/assets/image-20200710004138812.png" alt="image-20200710004138812"> </p><p><img data-src="/assets/image-20201018085318567.png" alt="image-20201018085318567"> </p><h3 id="sql语句分析"><a href="#sql语句分析" class="headerlink" title="sql语句分析"></a>sql语句分析</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  c.<span class="string">`custom_name`</span> <span class="keyword">AS</span> customName,</span><br><span class="line">c.<span class="string">`contract_no`</span> <span class="keyword">AS</span> contractNo,</span><br><span class="line">cp.<span class="string">`product_no`</span> <span class="keyword">AS</span> productNo,</span><br><span class="line">cp.<span class="string">`cnumber`</span> <span class="keyword">AS</span> cnumber,</span><br><span class="line">cp.<span class="string">`factory_name`</span> <span class="keyword">AS</span> factoryName,</span><br><span class="line">c.<span class="string">`delivery_period`</span> <span class="keyword">AS</span> deliveryPeriod,</span><br><span class="line">c.<span class="string">`ship_time`</span> <span class="keyword">AS</span> shipTime,</span><br><span class="line">c.<span class="string">`trade_terms`</span> <span class="keyword">AS</span> tradeTerms </span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`co_contract`</span> c </span><br><span class="line"><span class="keyword">JOIN</span> <span class="string">`co_contract_product`</span> cp <span class="keyword">ON</span> c.id = cp.<span class="string">`contract_id`</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">DATE_FORMAT</span>(c.<span class="string">`ship_time`</span>,<span class="string">"%Y-%m"</span>) = <span class="string">'2015-01'</span> </span><br><span class="line"><span class="keyword">AND</span> c.<span class="string">`company_id`</span> = <span class="string">'1'</span></span><br></pre></td></tr></table></figure><h2 id="基础代码复制"><a href="#基础代码复制" class="headerlink" title="基础代码复制"></a>基础代码复制</h2><h3 id="ContractProductVo"><a href="#ContractProductVo" class="headerlink" title="ContractProductVo"></a>ContractProductVo</h3><p><img data-src="/assets/image-20201018090602092.png" alt="image-20201018090602092"> </p><h3 id="DownloadUtil"><a href="#DownloadUtil" class="headerlink" title="DownloadUtil"></a>DownloadUtil</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath   要下载的文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> returnName 返回的文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response   HttpServletResponse</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delFlag    是否删除文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">(String filePath, String returnName, HttpServletResponse response, <span class="keyword">boolean</span> delFlag)</span> </span>&#123;</span><br><span class="line">        prototypeDownload(<span class="keyword">new</span> File(filePath), returnName, response, delFlag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file       要下载的文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> returnName 返回的文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response   HttpServletResponse</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delFlag    是否删除文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">(File file, String returnName, HttpServletResponse response, <span class="keyword">boolean</span> delFlag)</span> </span>&#123;</span><br><span class="line">        prototypeDownload(file, returnName, response, delFlag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file       要下载的文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> returnName 返回的文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response   HttpServletResponse</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delFlag    是否删除文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prototypeDownload</span><span class="params">(File file, String returnName, HttpServletResponse response, <span class="keyword">boolean</span> delFlag)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 下载文件</span></span><br><span class="line">        FileInputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">        ServletOutputStream outputStream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!file.exists()) <span class="keyword">return</span>;</span><br><span class="line">            response.reset();</span><br><span class="line">            <span class="comment">//设置响应类型PDF文件为"application/pdf"，WORD文件为："application/msword"， EXCEL文件为："application/vnd.ms-excel"。</span></span><br><span class="line">            response.setContentType(<span class="string">"application/octet-stream;charset=utf-8"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//设置响应的文件名称,并转换成中文编码</span></span><br><span class="line">            <span class="comment">//returnName = URLEncoder.encode(returnName,"UTF-8");</span></span><br><span class="line">            returnName = response.encodeURL(<span class="keyword">new</span> String(returnName.getBytes(), <span class="string">"iso8859-1"</span>));    <span class="comment">//保存的文件名,必须和页面编码一致,否则乱码</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//attachment作为附件下载；inline客户端机器有安装匹配程序，则直接打开；注意改变配置，清除缓存，否则可能不能看到效果</span></span><br><span class="line">            response.addHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment;filename="</span> + returnName);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将文件读入响应流</span></span><br><span class="line">            inputStream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">            outputStream = response.getOutputStream();</span><br><span class="line">            <span class="keyword">int</span> length = <span class="number">1024</span>;</span><br><span class="line">            <span class="keyword">int</span> readLength = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">byte</span> buf[] = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            readLength = inputStream.read(buf, <span class="number">0</span>, length);</span><br><span class="line">            <span class="keyword">while</span> (readLength != -<span class="number">1</span>) &#123;</span><br><span class="line">                outputStream.write(buf, <span class="number">0</span>, readLength);</span><br><span class="line">                readLength = inputStream.read(buf, <span class="number">0</span>, length);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                outputStream.flush();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                outputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                inputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//删除原文件</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (delFlag) &#123;</span><br><span class="line">                file.delete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">(ByteArrayOutputStream byteArrayOutputStream, HttpServletResponse response, String returnName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">"application/octet-stream;charset=utf-8"</span>);</span><br><span class="line">        returnName = response.encodeURL(<span class="keyword">new</span> String(returnName.getBytes(), <span class="string">"iso8859-1"</span>));<span class="comment">//保存的文件名,必须和页面编码一致,否则乱码</span></span><br><span class="line">        response.addHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment;filename="</span> + returnName);</span><br><span class="line">        response.setContentLength(byteArrayOutputStream.size());</span><br><span class="line"></span><br><span class="line">        ServletOutputStream outputstream = response.getOutputStream();    <span class="comment">//取得输出流</span></span><br><span class="line">        byteArrayOutputStream.writeTo(outputstream);                    <span class="comment">//写到输出流</span></span><br><span class="line">        byteArrayOutputStream.close();                                    <span class="comment">//关闭</span></span><br><span class="line">        outputstream.flush();                                            <span class="comment">//刷数据</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h2><h3 id="ContractController"><a href="#ContractController" class="headerlink" title="ContractController"></a>ContractController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/cargo/contract"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContractPrintController</span> <span class="keyword">extends</span> <span class="title">BaseController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span></span><br><span class="line">    <span class="keyword">private</span> ContractService contractService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(path = <span class="string">"/print"</span>, name = <span class="string">"跳转出货表页面"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/cargo/print/contract-print"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(path = <span class="string">"/printExcel"</span>, name = <span class="string">"打印出货表"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printExcel</span><span class="params">(String inputDate)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//查询数据</span></span><br><span class="line">        List&lt;ContractProductVo&gt; list = contractService.findContractProductVo(inputDate, getCompanyId());</span><br><span class="line">        <span class="comment">//封装到Excel</span></span><br><span class="line">        Workbook workbook = <span class="keyword">new</span> XSSFWorkbook();</span><br><span class="line">        <span class="comment">//创建工作表</span></span><br><span class="line">        Sheet sheet = workbook.createSheet();</span><br><span class="line">        <span class="comment">//合并单元格</span></span><br><span class="line">        sheet.addMergedRegion(<span class="keyword">new</span> CellRangeAddress(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">8</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            sheet.setColumnWidth(i, <span class="number">15</span> * <span class="number">256</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建第0行</span></span><br><span class="line">        Row row0 = sheet.createRow(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            Cell cell = row0.createCell(i);</span><br><span class="line">            cell.setCellStyle(bigTitleStyle(workbook));</span><br><span class="line">        &#125;</span><br><span class="line">        String title = inputDate.replaceAll(<span class="string">"-0"</span>, <span class="string">"年"</span>).replaceAll(<span class="string">"-"</span>, <span class="string">"年"</span>);</span><br><span class="line">        row0.getCell(<span class="number">1</span>).setCellValue(title + <span class="string">"月份出货表"</span>);</span><br><span class="line">        <span class="comment">//创建第一行</span></span><br><span class="line">        String[] littleTitle = &#123;<span class="string">"客户"</span>, <span class="string">"合同号"</span>, <span class="string">"货号"</span>, <span class="string">"数量"</span>, <span class="string">"工厂"</span>, <span class="string">"工厂交期"</span>, <span class="string">"船期"</span>, <span class="string">"贸易条款"</span>&#125;;</span><br><span class="line">        Row row1 = sheet.createRow(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            Cell cell = row1.createCell(i);</span><br><span class="line">            cell.setCellStyle(littleTitleStyle(workbook));</span><br><span class="line">            cell.setCellValue(littleTitle[i - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建第n行</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">2</span>;</span><br><span class="line">        SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">        <span class="keyword">for</span> (ContractProductVo contractProductVo : list) &#123;</span><br><span class="line">            <span class="comment">//创建单元格</span></span><br><span class="line">            Row rowN = sheet.createRow(index++);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">                Cell cell = rowN.createCell(i);</span><br><span class="line">                cell.setCellStyle(textStyle(workbook));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//向表格添加数据</span></span><br><span class="line">            rowN.getCell(<span class="number">1</span>).setCellValue(contractProductVo.getCustomName());</span><br><span class="line">            rowN.getCell(<span class="number">2</span>).setCellValue(contractProductVo.getContractNo());</span><br><span class="line">            rowN.getCell(<span class="number">3</span>).setCellValue(contractProductVo.getProductNo());</span><br><span class="line">            rowN.getCell(<span class="number">4</span>).setCellValue(contractProductVo.getCnumber());</span><br><span class="line">            rowN.getCell(<span class="number">5</span>).setCellValue(contractProductVo.getFactoryName());</span><br><span class="line">            rowN.getCell(<span class="number">6</span>).setCellValue(dateFormat.format(contractProductVo.getDeliveryPeriod()));</span><br><span class="line">            rowN.getCell(<span class="number">7</span>).setCellValue(dateFormat.format(contractProductVo.getShipTime()));</span><br><span class="line">            rowN.getCell(<span class="number">8</span>).setCellValue(contractProductVo.getTradeTerms());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//下载方法</span></span><br><span class="line">        ByteArrayOutputStream out = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        workbook.write(out);</span><br><span class="line">        DownloadUtils.download(out, response, <span class="string">"出货表.xlsx"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//大标题的样式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CellStyle <span class="title">bigTitleStyle</span><span class="params">(Workbook wb)</span> </span>&#123;</span><br><span class="line">        CellStyle style = wb.createCellStyle();</span><br><span class="line">        Font font = wb.createFont();</span><br><span class="line">        font.setFontName(<span class="string">"宋体"</span>);</span><br><span class="line">        font.setFontHeightInPoints((<span class="keyword">short</span>) <span class="number">16</span>);</span><br><span class="line">        font.setBold(<span class="keyword">true</span>);<span class="comment">//字体加粗</span></span><br><span class="line">        style.setFont(font);</span><br><span class="line">        style.setAlignment(HorizontalAlignment.CENTER);                <span class="comment">//横向居中</span></span><br><span class="line">        style.setVerticalAlignment(VerticalAlignment.CENTER);        <span class="comment">//纵向居中</span></span><br><span class="line">        <span class="keyword">return</span> style;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//小标题的样式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CellStyle <span class="title">littleTitleStyle</span><span class="params">(Workbook wb)</span> </span>&#123;</span><br><span class="line">        CellStyle style = wb.createCellStyle();</span><br><span class="line">        Font font = wb.createFont();</span><br><span class="line">        font.setFontName(<span class="string">"黑体"</span>);</span><br><span class="line">        font.setFontHeightInPoints((<span class="keyword">short</span>) <span class="number">12</span>);</span><br><span class="line">        style.setFont(font);</span><br><span class="line">        style.setAlignment(HorizontalAlignment.CENTER);                <span class="comment">//横向居中</span></span><br><span class="line">        style.setVerticalAlignment(VerticalAlignment.CENTER);        <span class="comment">//纵向居中</span></span><br><span class="line">        style.setBorderTop(BorderStyle.THIN);                        <span class="comment">//上细线</span></span><br><span class="line">        style.setBorderBottom(BorderStyle.THIN);                    <span class="comment">//下细线</span></span><br><span class="line">        style.setBorderLeft(BorderStyle.THIN);                        <span class="comment">//左细线</span></span><br><span class="line">        style.setBorderRight(BorderStyle.THIN);                        <span class="comment">//右细线</span></span><br><span class="line">        <span class="keyword">return</span> style;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//文字样式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CellStyle <span class="title">textStyle</span><span class="params">(Workbook wb)</span> </span>&#123;</span><br><span class="line">        CellStyle style = wb.createCellStyle();</span><br><span class="line">        Font font = wb.createFont();</span><br><span class="line">        font.setFontName(<span class="string">"Times New Roman"</span>);</span><br><span class="line">        font.setFontHeightInPoints((<span class="keyword">short</span>) <span class="number">10</span>);</span><br><span class="line">        style.setFont(font);</span><br><span class="line">        style.setAlignment(HorizontalAlignment.LEFT);                <span class="comment">//横向居左</span></span><br><span class="line">        style.setVerticalAlignment(VerticalAlignment.CENTER);        <span class="comment">//纵向居中</span></span><br><span class="line">        style.setBorderTop(BorderStyle.THIN);                        <span class="comment">//上细线</span></span><br><span class="line">        style.setBorderBottom(BorderStyle.THIN);                    <span class="comment">//下细线</span></span><br><span class="line">        style.setBorderLeft(BorderStyle.THIN);                        <span class="comment">//左细线</span></span><br><span class="line">        style.setBorderRight(BorderStyle.THIN);                        <span class="comment">//右细线</span></span><br><span class="line">        <span class="keyword">return</span> style;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ContractService"><a href="#ContractService" class="headerlink" title="ContractService"></a>ContractService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;ContractProductVo&gt; <span class="title">findContractProductVo</span><span class="params">(String inputDate, String companyId)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;ContractProductVo&gt; <span class="title">findContractProductVo</span><span class="params">(String inputDate, String companyId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> contractDao.findContractProductVo(inputDate, companyId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ContractDao"><a href="#ContractDao" class="headerlink" title="ContractDao"></a>ContractDao</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;ContractProductVo&gt; <span class="title">findContractProductVo</span><span class="params">(@Param(<span class="string">"inputDate"</span>)</span> String inputDate, @<span class="title">Param</span><span class="params">(<span class="string">"companyId"</span>)</span> String companyId)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findContractProductVo"</span> <span class="attr">resultType</span>=<span class="string">"com.itheima.vo.ContractProductVo"</span>&gt;</span></span><br><span class="line">    SELECT  c.`custom_name` AS customName,</span><br><span class="line">    c.`contract_no` AS contractNo,</span><br><span class="line">    cp.`product_no` AS productNo,</span><br><span class="line">    cp.`cnumber` AS cnumber,</span><br><span class="line">    cp.`factory_name` AS factoryName,</span><br><span class="line">    c.`delivery_period` AS deliveryPeriod,</span><br><span class="line">    c.`ship_time` AS shipTime,</span><br><span class="line">    c.`trade_terms` AS tradeTerms</span><br><span class="line"></span><br><span class="line">    FROM `co_contract` c</span><br><span class="line">    JOIN `co_contract_product` cp ON c.id = cp.`contract_id`</span><br><span class="line">    WHERE DATE_FORMAT(c.`ship_time`,"%Y-%m") = #&#123;inputDate&#125;</span><br><span class="line">    AND c.`company_id` = #&#123;companyId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="使用模板导出出货表"><a href="#使用模板导出出货表" class="headerlink" title="使用模板导出出货表"></a>使用模板导出出货表</h1><h2 id="需求说明-1"><a href="#需求说明-1" class="headerlink" title="需求说明"></a>需求说明</h2><p>自定义生成Excel报表文件是非常复杂的，特别是针对复杂报表头，单元格样式，字体等操作。</p><p>为了简便，我们可以使用已经准备好的Excel模板，将模板读到程序中， 然后设置上数据即可。</p><h2 id="步骤分析"><a href="#步骤分析" class="headerlink" title="步骤分析"></a>步骤分析</h2><p> <img data-src="/assets/image-20200706110708113.png" alt="image-20200706110708113"></p><p>操作步骤：</p><ol><li><p>制作模版文件（一般是由设计人员或者项目经理完成）</p></li><li><p>加载模版文件，从而得到一个工作簿</p></li><li><p>读取工作表</p></li><li><p>读取行，此时发现其实表中的前两行是固定内容， 所以不用处理</p></li><li><p>直接读取第三行中的每个单元格的样式信息,存储在一个数组中,备用</p></li><li><p>接下来开始遍历创建行，设置每行中单元格的文字和样式（使用上步读到的样式）</p></li></ol><h2 id="代码编写-1"><a href="#代码编写-1" class="headerlink" title="代码编写"></a>代码编写</h2><h3 id="jsp页面调整"><a href="#jsp页面调整" class="headerlink" title="jsp页面调整"></a>jsp页面调整</h3><p>修改<code>\webapp\WEB-INF\pages\cargo\print\contract-print.jsp</code>中的内容</p><p><strong>第一步：复制一个form表单</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;form role=<span class="string">"form"</span> action=<span class="string">"/cargo/contract/printExcelWithTemplate.do"</span>&gt;</span><br><span class="line">         &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"input-group input-group-sm"</span> &gt;</span><br><span class="line">             &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"input-group-addon"</span>&gt;</span><br><span class="line">                 &lt;i class="fa fa-calendar"&gt;&lt;/i&gt;</span><br><span class="line">             &lt;/div&gt;</span><br><span class="line">             &lt;input type=<span class="string">"text"</span> name=<span class="string">"inputDate"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control pull-right"</span> id=<span class="string">"datepicker1"</span>&gt;</span><br><span class="line">             &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"input-group-btn"</span>&gt;</span><br><span class="line">                 &lt;button type="submit"   class="btn btn-info btn-flat"&gt;模板导出&lt;/button&gt;</span><br><span class="line">             &lt;/span&gt;</span><br><span class="line">         &lt;/div&gt;</span><br><span class="line">     &lt;/form&gt;</span><br></pre></td></tr></table></figure><p><strong>第二步：在js中添加</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#datepicker1'</span>).datepicker(&#123;</span><br><span class="line">    language: <span class="string">"zh-CN"</span>,</span><br><span class="line">    autoclose: <span class="literal">true</span>,</span><br><span class="line">    format: <span class="string">'yyyy-mm'</span>,</span><br><span class="line">    startView: <span class="string">'months'</span>, <span class="comment">//开始视图层，为月视图层</span></span><br><span class="line">    maxViewMode:<span class="string">'years'</span>, <span class="comment">//最大视图层，为年视图层</span></span><br><span class="line">    minViewMode:<span class="string">'months'</span>, <span class="comment">//最小视图层，为月视图层</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>页面效果如下：</strong></p><p><img data-src="/assets/1574904807326.png" alt="1574904807326"> </p><h3 id="ContractController-1"><a href="#ContractController-1" class="headerlink" title="ContractController"></a>ContractController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/printTemplateExcel"</span>, name = <span class="string">"模板打印出货表"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printTemplateExcel</span><span class="params">(String inputDate)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//查询数据</span></span><br><span class="line">    List&lt;ContractProductVo&gt; list = contractService.findContractProductVo(inputDate, getCompanyId());</span><br><span class="line">    <span class="comment">//读取模板获取工作簿</span></span><br><span class="line">    String path = session.getServletContext().getRealPath(<span class="string">"/make/xlsprint/tOUTPRODUCT.xlsx"</span>);</span><br><span class="line">    Workbook workbook = <span class="keyword">new</span> XSSFWorkbook(<span class="keyword">new</span> FileInputStream(path));</span><br><span class="line">    Sheet sheet = workbook.getSheetAt(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//获取第0行</span></span><br><span class="line">    Row row0 = sheet.getRow(<span class="number">0</span>);</span><br><span class="line">    String title = inputDate.replaceAll(<span class="string">"-0"</span>,<span class="string">"年"</span>).replaceAll(<span class="string">"-"</span>,<span class="string">"年"</span>);</span><br><span class="line">    <span class="comment">//替换标题</span></span><br><span class="line">    row0.getCell(<span class="number">1</span>).setCellValue(title + <span class="string">"月份出货表"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取第2行的每一个单元格的样式,存储到一个数组中,备用</span></span><br><span class="line">    Row row2 = sheet.getRow(<span class="number">2</span>);</span><br><span class="line">    CellStyle[] cellStyles = <span class="keyword">new</span> CellStyle[<span class="number">8</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">        cellStyles[i-<span class="number">1</span>] = row2.getCell(i).getCellStyle();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加数据</span></span><br><span class="line">    SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (ContractProductVo contractProductVo : list) &#123;</span><br><span class="line">        Row rowN = sheet.createRow(index++);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            Cell cell = rowN.createCell(i);</span><br><span class="line">            cell.setCellStyle(cellStyles[i-<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//向表格添加数据</span></span><br><span class="line">        rowN.getCell(<span class="number">1</span>).setCellValue(contractProductVo.getCustomName());</span><br><span class="line">        rowN.getCell(<span class="number">2</span>).setCellValue(contractProductVo.getContractNo());</span><br><span class="line">        rowN.getCell(<span class="number">3</span>).setCellValue(contractProductVo.getProductNo());</span><br><span class="line">        rowN.getCell(<span class="number">4</span>).setCellValue(contractProductVo.getCnumber());</span><br><span class="line">        rowN.getCell(<span class="number">5</span>).setCellValue(contractProductVo.getFactoryName());</span><br><span class="line">        rowN.getCell(<span class="number">6</span>).setCellValue(dateFormat.format(contractProductVo.getDeliveryPeriod()));</span><br><span class="line">        rowN.getCell(<span class="number">7</span>).setCellValue(dateFormat.format(contractProductVo.getShipTime()));</span><br><span class="line">        rowN.getCell(<span class="number">8</span>).setCellValue(contractProductVo.getTradeTerms());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下载方法</span></span><br><span class="line">    ByteArrayOutputStream out = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">    workbook.write(out);</span><br><span class="line">    DownloadUtils.download(out, response, <span class="string">"出货表.xlsx"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="百万级别数据报表技术"><a href="#百万级别数据报表技术" class="headerlink" title="百万级别数据报表技术"></a>百万级别数据报表技术</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>对于百万数据量的Excel导入导出，只讨论基于Excel2007的解决方法。Excel2007的数据结构是XML，操作XML有两种模式：</p><ul><li><strong>用户模式：</strong>基于dom4j的解析,  一次性加载xml文件再解析（XSSF对象底层用的就是dom4j，它的缺点是当数据量过大时，会导致内存溢出）</li></ul><ul><li><strong>事件模式：</strong>基于SAX方式解析XML，逐行加载，逐行解析（SXSSF对象底层用的是SAX，它的缺点是不能使用模板，并且不支持过多的CellStyle[62000]）</li></ul><h2 id="Jvisualvm"><a href="#Jvisualvm" class="headerlink" title="Jvisualvm"></a>Jvisualvm</h2><p>Jvisualvm是JDK自带的一个Java程序性能检测工具。基于它可以监视程序的运行情况，包括CUP，垃圾回收，内存的分配和使用情况。</p><p>此软件放在jdk的安装目录下的bin目录下，名字叫jvisualvm.exe。</p><p><img data-src="/assets/image-20200706124626268.png" alt="image-20200706124626268"> </p><p>双击即可启动图形化检测界面，找到我们的tomcat，点击就可以看到其运行详情。</p><p><img data-src="/assets/image-20200706124948524.png" alt="image-20200706124948524"></p><p>概述：可以看到进程的启动参数。</p><p>监视：左上：cpu利用率，gc状态的监控，右上：堆利用率，永久内存区的利用率，左下：类的监控，右下：线程的监控</p><p>线程：能够显示线程的名称和运行的状态，在调试多线程时必不可少，而且可以点进一个线程查看这个线程的详细运行情况</p><h2 id="百万级别数据导出"><a href="#百万级别数据导出" class="headerlink" title="百万级别数据导出"></a>百万级别数据导出</h2><h3 id="jsp页面调整-1"><a href="#jsp页面调整-1" class="headerlink" title="jsp页面调整"></a>jsp页面调整</h3><p><strong>第一步：复制一个form表单</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;form role=<span class="string">"form"</span> action=<span class="string">"/cargo/contract/printExcelMillion.do"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"input-group input-group-sm"</span> &gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"input-group-addon"</span>&gt;</span><br><span class="line">            &lt;i class="fa fa-calendar"&gt;&lt;/i&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;input type=<span class="string">"text"</span> name=<span class="string">"inputDate"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control pull-right"</span> id=<span class="string">"datepicker2"</span>&gt;</span><br><span class="line">        &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"input-group-btn"</span>&gt;</span><br><span class="line">            &lt;button type="submit" class="btn btn-info btn-flat"&gt;百万级别数据导出&lt;/button&gt;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><strong>第二步：在js中添加</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#datepicker2'</span>).datepicker(&#123;</span><br><span class="line">    language: <span class="string">"zh-CN"</span>,</span><br><span class="line">    autoclose: <span class="literal">true</span>,</span><br><span class="line">    format: <span class="string">'yyyy-mm'</span>,</span><br><span class="line">    startView: <span class="string">'months'</span>, <span class="comment">//开始视图层，为月视图层</span></span><br><span class="line">    maxViewMode:<span class="string">'years'</span>, <span class="comment">//最大视图层，为年视图层</span></span><br><span class="line">    minViewMode:<span class="string">'months'</span>, <span class="comment">//最小视图层，为月视图层</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>页面效果如下：</strong></p><p><img data-src="/assets/1574904899006.png" alt="1574904899006"> </p><h3 id="ContractController代码调整"><a href="#ContractController代码调整" class="headerlink" title="ContractController代码调整"></a>ContractController代码调整</h3><p>修改内容：</p><ul><li><p>new XSSFWorkbook(); —&gt;改为 new SXSSFWorkbook();</p></li><li><p>导出数据那里模拟一个8000次的循环</p></li><li><p>去掉所有样式设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/printExcelMillion"</span>, name = <span class="string">"百万数据导出"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printExcelMillion</span><span class="params">(String inputDate)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//查询数据</span></span><br><span class="line">    List&lt;ContractProductVo&gt; list = contractService.findContractProductVo(inputDate, getCompanyId());</span><br><span class="line">    <span class="comment">//封装到Excel</span></span><br><span class="line">    Workbook workbook = <span class="keyword">new</span> XSSFWorkbook();</span><br><span class="line">    <span class="comment">//创建工作表</span></span><br><span class="line">    Sheet sheet = workbook.createSheet();</span><br><span class="line">    <span class="comment">//合并单元格</span></span><br><span class="line">    sheet.addMergedRegion(<span class="keyword">new</span> CellRangeAddress(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">8</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">        sheet.setColumnWidth(i, <span class="number">15</span> * <span class="number">256</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建第0行</span></span><br><span class="line">    Row row0 = sheet.createRow(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">        Cell cell = row0.createCell(i);</span><br><span class="line">        cell.setCellStyle(bigTitleStyle(workbook));</span><br><span class="line">    &#125;</span><br><span class="line">    String title = inputDate.replaceAll(<span class="string">"-0"</span>, <span class="string">"年"</span>).replaceAll(<span class="string">"-"</span>, <span class="string">"年"</span>);</span><br><span class="line">    row0.getCell(<span class="number">1</span>).setCellValue(title + <span class="string">"月份出货表"</span>);</span><br><span class="line">    <span class="comment">//创建第一行</span></span><br><span class="line">    String[] littleTitle = &#123;<span class="string">"客户"</span>, <span class="string">"合同号"</span>, <span class="string">"货号"</span>, <span class="string">"数量"</span>, <span class="string">"工厂"</span>, <span class="string">"工厂交期"</span>, <span class="string">"船期"</span>, <span class="string">"贸易条款"</span>&#125;;</span><br><span class="line">    Row row1 = sheet.createRow(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">        Cell cell = row1.createCell(i);</span><br><span class="line">        cell.setCellStyle(littleTitleStyle(workbook));</span><br><span class="line">        cell.setCellValue(littleTitle[i - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建第n行</span></span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">2</span>;</span><br><span class="line">    SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">    <span class="keyword">for</span> (ContractProductVo contractProductVo : list) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8000</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//创建单元格</span></span><br><span class="line">            Row rowN = sheet.createRow(index++);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">9</span>; j++) &#123;</span><br><span class="line">                Cell cell = rowN.createCell(j);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//向表格添加数据</span></span><br><span class="line">            rowN.getCell(<span class="number">1</span>).setCellValue(contractProductVo.getCustomName());</span><br><span class="line">            rowN.getCell(<span class="number">2</span>).setCellValue(contractProductVo.getContractNo());</span><br><span class="line">            rowN.getCell(<span class="number">3</span>).setCellValue(contractProductVo.getProductNo());</span><br><span class="line">            rowN.getCell(<span class="number">4</span>).setCellValue(contractProductVo.getCnumber());</span><br><span class="line">            rowN.getCell(<span class="number">5</span>).setCellValue(contractProductVo.getFactoryName());</span><br><span class="line">            rowN.getCell(<span class="number">6</span>).setCellValue(dateFormat.format(contractProductVo.getDeliveryPeriod()));</span><br><span class="line">            rowN.getCell(<span class="number">7</span>).setCellValue(dateFormat.format(contractProductVo.getShipTime()));</span><br><span class="line">            rowN.getCell(<span class="number">8</span>).setCellValue(contractProductVo.getTradeTerms());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下载方法</span></span><br><span class="line">    ByteArrayOutputStream out = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">    workbook.write(out);</span><br><span class="line">    DownloadUtils.download(out, response, <span class="string">"出货表.xlsx"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="百万级别数据导入"><a href="#百万级别数据导入" class="headerlink" title="百万级别数据导入"></a>百万级别数据导入</h2><h3 id="自定义处理器-直接复制"><a href="#自定义处理器-直接复制" class="headerlink" title="自定义处理器(直接复制)"></a>自定义处理器(直接复制)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.poi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.poi.openxml4j.exceptions.InvalidFormatException;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.openxml4j.opc.OPCPackage;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.openxml4j.opc.PackageAccess;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.eventusermodel.XSSFReader;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.eventusermodel.XSSFSheetXMLHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.model.SharedStringsTable;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.model.StylesTable;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.InputSource;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.XMLReader;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.helpers.XMLReaderFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用于处理百万级别数据</span></span><br><span class="line"><span class="comment">//需要我们做的是在SheetHandler中自定义处理逻辑</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelParse</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">(String path)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//解析器</span></span><br><span class="line">        SheetHandler hl = <span class="keyword">new</span> SheetHandler();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.根据 Excel 获取 OPCPackage 对象</span></span><br><span class="line">        OPCPackage pkg = OPCPackage.open(path, PackageAccess.READ);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//2.创建 XSSFReader 对象</span></span><br><span class="line">            XSSFReader reader = <span class="keyword">new</span> XSSFReader(pkg);</span><br><span class="line">            <span class="comment">//3.获取 SharedStringsTable 对象</span></span><br><span class="line">            SharedStringsTable sst = reader.getSharedStringsTable();</span><br><span class="line">            <span class="comment">//4.获取 StylesTable 对象</span></span><br><span class="line">            StylesTable styles = reader.getStylesTable();</span><br><span class="line">            XMLReader parser = XMLReaderFactory.createXMLReader();</span><br><span class="line">            <span class="comment">// 处理公共属性</span></span><br><span class="line">            parser.setContentHandler(<span class="keyword">new</span> XSSFSheetXMLHandler(styles, sst, hl, <span class="keyword">false</span>));</span><br><span class="line">            XSSFReader.SheetIterator sheets = (XSSFReader.SheetIterator) reader.getSheetsData();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//逐行读取逐行解析</span></span><br><span class="line">            <span class="keyword">while</span> (sheets.hasNext()) &#123;</span><br><span class="line">                InputStream sheetstream = sheets.next();</span><br><span class="line">                InputSource sheetSource = <span class="keyword">new</span> InputSource(sheetstream);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    parser.parse(sheetSource);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    sheetstream.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            pkg.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        parse(<span class="string">"c:/upload/data.xlsx"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义解析器"><a href="#自定义解析器" class="headerlink" title="自定义解析器"></a>自定义解析器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.poi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.eventusermodel.XSSFSheetXMLHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFComment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义解析器,负责每行代码的处理</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SheetHandler</span> <span class="keyword">implements</span> <span class="title">XSSFSheetXMLHandler</span>.<span class="title">SheetContentsHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ContractProductVo contractProductVo = <span class="keyword">null</span>;</span><br><span class="line">    List&lt;ContractProductVo&gt; list = <span class="keyword">new</span> ArrayList&lt;ContractProductVo&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//rowIndex 行索引</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startRow</span><span class="params">(<span class="keyword">int</span> rowIndex)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"进入了第"</span> + rowIndex + <span class="string">"行"</span>);</span><br><span class="line">        contractProductVo =  <span class="keyword">new</span> ContractProductVo();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//每个单元格中要做的操作</span></span><br><span class="line">    <span class="comment">//cellName  单元格名称   C2</span></span><br><span class="line">    <span class="comment">//cellValue 单元格中的值</span></span><br><span class="line">    <span class="comment">//xssfComment  单元格批注</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cell</span><span class="params">(String cellName, String cellValue, XSSFComment xssfComment)</span> </span>&#123;</span><br><span class="line">        System.out.print(cellName + <span class="string">":"</span> + cellValue+<span class="string">"   "</span>);</span><br><span class="line">        <span class="keyword">if</span> (cellName.startsWith(<span class="string">"B"</span>))&#123;</span><br><span class="line">            contractProductVo.setCustomName(cellValue);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (cellName.startsWith(<span class="string">"C"</span>))&#123;</span><br><span class="line">            contractProductVo.setContractNo(cellValue);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endRow</span><span class="params">(<span class="keyword">int</span> rowIndex)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"离开了第"</span> + rowIndex + <span class="string">"行"</span>);</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        </span><br><span class="line">        list.add(contractProductVo);</span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="EasyPOI"><a href="#EasyPOI" class="headerlink" title="EasyPOI"></a>EasyPOI</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>​    easypoi主打的功能就是容易，让一个没见接触过poi的人员，就可以方便的写出Excel导出和导入功能，它通过简单的注解和模板语言(熟悉的表达式语法)，完成以前复杂的写法。</p><p>官方文档：<a href="http://easypoi.mydoc.io/" target="_blank" rel="noopener">http://easypoi.mydoc.io/</a></p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.afterturn<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easypoi-base<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.afterturn<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easypoi-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.afterturn<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easypoi-annotation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="定义实体"><a href="#定义实体" class="headerlink" title="定义实体"></a>定义实体</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContractProductVo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"客户"</span>)</span><br><span class="line">    <span class="keyword">private</span> String customName;        <span class="comment">//客户名称</span></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"合同号"</span>)</span><br><span class="line">    <span class="keyword">private</span> String contractNo;        <span class="comment">//合同号，订单号</span></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"货号"</span>)</span><br><span class="line">    <span class="keyword">private</span> String productNo;        <span class="comment">//货号</span></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"数量"</span>,type = <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer cnumber;        <span class="comment">//数量</span></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"工厂"</span>)</span><br><span class="line">    <span class="keyword">private</span> String factoryName;        <span class="comment">//厂家名称</span></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"工厂交期"</span>, format = <span class="string">"yyyy-MM-dd"</span>,width = <span class="number">15</span>)</span><br><span class="line">    <span class="keyword">private</span> Date deliveryPeriod;    <span class="comment">//交货期限</span></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"船期"</span>, format = <span class="string">"yyyy-MM-dd"</span>,width = <span class="number">15</span>)</span><br><span class="line">    <span class="keyword">private</span> Date shipTime;            <span class="comment">//船期</span></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"贸易条款"</span>)</span><br><span class="line">    <span class="keyword">private</span> String tradeTerms;        <span class="comment">//贸易条款</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCustomName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> customName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomName</span><span class="params">(String customName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.customName = customName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContractNo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> contractNo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContractNo</span><span class="params">(String contractNo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.contractNo = contractNo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProductNo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> productNo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProductNo</span><span class="params">(String productNo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.productNo = productNo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getCnumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cnumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCnumber</span><span class="params">(Integer cnumber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cnumber = cnumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFactoryName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> factoryName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFactoryName</span><span class="params">(String factoryName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.factoryName = factoryName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getDeliveryPeriod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deliveryPeriod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDeliveryPeriod</span><span class="params">(Date deliveryPeriod)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.deliveryPeriod = deliveryPeriod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getShipTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> shipTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setShipTime</span><span class="params">(Date shipTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.shipTime = shipTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTradeTerms</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tradeTerms;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTradeTerms</span><span class="params">(String tradeTerms)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tradeTerms = tradeTerms;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ContractProductVo&#123;"</span> +</span><br><span class="line">                <span class="string">"customName='"</span> + customName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", contractNo='"</span> + contractNo + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", productNo='"</span> + productNo + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", cnumber="</span> + cnumber +</span><br><span class="line">                <span class="string">", factoryName='"</span> + factoryName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", deliveryPeriod="</span> + deliveryPeriod +</span><br><span class="line">                <span class="string">", shipTime="</span> + shipTime +</span><br><span class="line">                <span class="string">", tradeTerms='"</span> + tradeTerms + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建excel"><a href="#创建excel" class="headerlink" title="创建excel"></a>创建excel</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateExcel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1.定义excel配置</span></span><br><span class="line">        ExportParams exportParams = <span class="keyword">new</span> ExportParams();</span><br><span class="line">        exportParams.setSheetName(<span class="string">"Sheet1"</span>);<span class="comment">// 页名称</span></span><br><span class="line">        exportParams.setTitle(<span class="string">"2015年01月份出货表"</span>);<span class="comment">// 大标题</span></span><br><span class="line">        exportParams.setType(ExcelType.XSSF);<span class="comment">// 07及以上版本</span></span><br><span class="line">        <span class="comment">// 2.创建workbook对象</span></span><br><span class="line">        Workbook wb = ExcelExportUtil.exportExcel(exportParams, ContractProductVo<span class="class">.<span class="keyword">class</span>, <span class="title">getData</span>())</span>;</span><br><span class="line">        <span class="comment">// 3.导出到文件</span></span><br><span class="line">        FileOutputStream out = <span class="keyword">new</span> FileOutputStream(<span class="string">"d:/demo.xlsx"</span>);</span><br><span class="line">        wb.write(out);</span><br><span class="line">        wb.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从数据库中查找了数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;ContractProductVo&gt; <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;ContractProductVo&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            ContractProductVo vo = <span class="keyword">new</span> ContractProductVo();</span><br><span class="line">            vo.setCustomName(<span class="string">"客户"</span>+i);</span><br><span class="line">            vo.setContractNo(<span class="string">"合同号"</span>+i);</span><br><span class="line">            vo.setProductNo(<span class="string">"货号"</span>+i);</span><br><span class="line">            vo.setCnumber(i);</span><br><span class="line">            vo.setFactoryName(<span class="string">"工厂"</span>+i);</span><br><span class="line">            vo.setDeliveryPeriod(<span class="keyword">new</span> Date());</span><br><span class="line">            vo.setShipTime(<span class="keyword">new</span> Date());</span><br><span class="line">            vo.setTradeTerms(<span class="string">"条款"</span>+i);</span><br><span class="line">            list.add(vo);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解析excel"><a href="#解析excel" class="headerlink" title="解析excel"></a>解析excel</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParseExcel</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.解析excel的配置参数</span></span><br><span class="line">        ImportParams params = <span class="keyword">new</span> ImportParams();</span><br><span class="line">        params.setTitleRows(<span class="number">1</span>); <span class="comment">// 大标题行数</span></span><br><span class="line">        params.setHeadRows(<span class="number">1</span>); <span class="comment">//  列标题行数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.实现解析</span></span><br><span class="line">        List&lt;ContractProductVo&gt; list = ExcelImportUtil.importExcel(<span class="keyword">new</span> File(<span class="string">"D:/demo.xlsx"</span>), ContractProductVo<span class="class">.<span class="keyword">class</span>, <span class="title">params</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.遍历输出</span></span><br><span class="line">        <span class="keyword">for</span> (ContractProductVo contractProductVo : list) &#123;</span><br><span class="line">            System.out.println(contractProductVo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p><strong>定时任务</strong>：按照配置的时间规则，自动执行java类中的方法</p><p><strong>实现框架</strong>：Quartz、Spring Task</p><p><strong>应用场景</strong>：</p><ul><li>某些网站会定时发送优惠邮件</li><li>银行系统还款日信用卡催收款短信</li><li>某些应用的生日祝福短信等</li></ul><p><strong>Quartz</strong> 是一个完全由 Java 编写的开源任务调度框架，为在 Java 应用程序中进行任务调度提供了简单却强大的机制。</p><p>官网地址：<a href="http://www.quartz-scheduler.org/" target="_blank" rel="noopener">http://www.quartz-scheduler.org/</a></p><h2 id="核心组件"><a href="#核心组件" class="headerlink" title="核心组件"></a>核心组件</h2><p>Quartz 定时任务调度框架（按照配置的时间规则，自动执行java<strong>类</strong>中的<strong>方法</strong>）</p><ul><li><p><strong>Job</strong>：需要执行的java类</p></li><li><p><strong>JobDetail</strong>：任务细节，用来指定java类和具体执行的方法</p></li><li><p><strong>Trigger</strong>：触发器，配置时间规则和JobDetail</p></li><li><p><strong>Scheduler</strong>：调度器，统一调度并管理所有的Trigger</p><p><img data-src="/assets/image-20201018143928031.png" alt="image-20201018143928031"> </p></li></ul><h2 id="快速入门-1"><a href="#快速入门-1" class="headerlink" title="快速入门"></a>快速入门</h2><blockquote><p>需求：每间隔五秒，向控制台输出当前时间</p></blockquote><h3 id="创建一个新工程-导入依赖"><a href="#创建一个新工程-导入依赖" class="headerlink" title="创建一个新工程,导入依赖"></a>创建一个新工程,导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.quartz-scheduler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建Job类-创建JobDetail方法"><a href="#创建Job类-创建JobDetail方法" class="headerlink" title="创建Job类,创建JobDetail方法"></a>创建Job类,创建JobDetail方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyJob</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"发送邮件"</span> + <span class="keyword">new</span> Date().toLocaleString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSms</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加一个配置文件"><a href="#添加一个配置文件" class="headerlink" title="添加一个配置文件"></a>添加一个配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--1.配置Job：自定义java类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myJob"</span> <span class="attr">class</span>=<span class="string">"com.sun.job.MyJob"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--2.配置JobDetail：执行任务来的方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jobDetail"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--1.确定任务类--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetObject"</span> <span class="attr">ref</span>=<span class="string">"myJob"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--2.确认任务的方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetMethod"</span> <span class="attr">value</span>=<span class="string">"sendEmail"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--3.配置Trigger：根据时间规则，触发方法执行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"trigger"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.CronTriggerFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--1.指定时间规则--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cronExpression"</span> <span class="attr">value</span>=<span class="string">"*/5 * * * * ? *"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--2.指定JobDetail--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jobDetail"</span> <span class="attr">ref</span>=<span class="string">"jobDetail"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--4.配置Scheduler：统一管理配置trigger--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"调度器id"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.SchedulerFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"triggers"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"trigger"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzStart</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        ClassPathXmlApplicationContext act</span><br><span class="line">                = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext-quartz.xml"</span>);</span><br><span class="line">        act.start();</span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Cron表达式【重点】-7子"><a href="#Cron表达式【重点】-7子" class="headerlink" title="Cron表达式【重点】(7子)"></a>Cron表达式【重点】(7子)</h2><p>Cron表达式简单来说就是一个字符串，有如下两种语法格式：</p><ul><li>Seconds Minutes Hours DayofMonth Month DayofWeek Year(七个域)</li><li>Seconds Minutes Hours DayofMonth Month DayofWeek(六个域)</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">cron  时间表达式（配置时间规则）</span><br><span class="line"><span class="code">秒           分           时         日          月              周             年</span></span><br><span class="line"><span class="code">0-59      0-59         0-23       1-31        1-12            1-7           1970-2099</span></span><br><span class="line"><span class="code">*/5          *            *          5W           *               3L              *</span></span><br><span class="line"><span class="code">                                      </span></span><br><span class="line">常用的符号</span><br><span class="line"><span class="code">*：表示任意，例如在Minutes域使用，即表示每分钟都会触发</span></span><br><span class="line"><span class="code">?：表示忽略，只能用在DayofMonth和DayofWeek两个域</span></span><br><span class="line"><span class="code">-：表示范围，例如在Minutes域使用5-20，表示从5分到20分钟每分钟触发一次 </span></span><br><span class="line"><span class="code">/：表示起始时间开始触发，然后每隔固定时间触发一次，例如在Minutes域使用5/20,则意味着在5分钟触发一次，而25，45等分别触发一次. </span></span><br><span class="line"><span class="code">,：表示列出枚举值。例如：在Minutes域使用5,20，则意味着在5和20分每分钟触发一次。 </span></span><br><span class="line"><span class="code">L：表示最后，只能出现在DayofWeek和DayofMonth域。如果在DayofWeek域使用5L,意味着在最后的一个星期四触发。 </span></span><br><span class="line"><span class="code">W: 表示有效工作日(周一到周五)，只能出现在DayofMonth域，系统将在离指定日期的最近的有效工作日触发事件。</span></span><br><span class="line"><span class="code">例如：在DayofMonth使用5W，如果5日是星期六，则将在最近的工作日：星期五，即4日触发。</span></span><br><span class="line"><span class="code"> 如果5日是星期天，则在6日(周一)触发；如果5日在星期一到星期五中的一天，则就在5日触发。 另外一点，W的最近寻找不会跨过月份。</span></span><br><span class="line"><span class="code">LW:这两个字符可以连用，表示在某个月最后一个工作日，即最后一个星期五。 </span></span><br><span class="line"><span class="code">#:用于确定第几个星期几，只能出现在DayofMonth域。例如在4#2，表示某月的第二个星期三。</span></span><br><span class="line"></span><br><span class="line">常用表达式例子</span><br><span class="line"><span class="code">0 0 2 1 * ? *   表示在每月的1日的凌晨2点调整任务</span></span><br><span class="line"><span class="code">0 15 10 ? * MON-FRI   表示周一到周五每天上午10:15执行作业</span></span><br><span class="line"><span class="code">0 15 10 ? * 6L 2002-2006   表示2002-2006年的每个月的最后一个星期五上午10:15执行作</span></span><br><span class="line"><span class="code">0 0 10,14,16 * * ?   每天上午10点，下午2点，4点 </span></span><br><span class="line"><span class="code">0 0/30 9-17 * * ?   朝九晚五工作时间内每半小时 </span></span><br><span class="line"><span class="code">0 0 12 ? * WED    表示每个星期三中午12点 </span></span><br><span class="line"><span class="code">0 0 12 * * ?   每天中午12点触发 </span></span><br><span class="line"><span class="code">0 15 10 ? * *    每天上午10:15触发 </span></span><br><span class="line"><span class="code">0 15 10 * * ?     每天上午10:15触发 </span></span><br><span class="line"><span class="code">0 15 10 * * ? *    每天上午10:15触发 </span></span><br><span class="line"><span class="code">0 15 10 * * ? 2005    2005年的每天上午10:15触发 </span></span><br><span class="line"><span class="code">0 * 14 * * ?     在每天下午2点到下午2:59期间的每1分钟触发 </span></span><br><span class="line"><span class="code">0 0/5 14 * * ?    在每天下午2点到下午2:55期间的每5分钟触发 </span></span><br><span class="line"><span class="code">0 0/5 14,18 * * ?     在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发 </span></span><br><span class="line"><span class="code">0 0-5 14 * * ?    在每天下午2点到下午2:05期间的每1分钟触发 </span></span><br><span class="line"><span class="code">0 10,44 14 ? 3 WED    每年三月的星期三的下午2:10和2:44触发 </span></span><br><span class="line"><span class="code">0 15 10 ? * MON-FRI    周一至周五的上午10:15触发 </span></span><br><span class="line"><span class="code">0 15 10 15 * ?    每月15日上午10:15触发 </span></span><br><span class="line"><span class="code">0 15 10 L * ?    每月最后一日的上午10:15触发 </span></span><br><span class="line"><span class="code">0 15 10 ? * 6L    每月的最后一个星期五上午10:15触发 </span></span><br><span class="line"><span class="code">0 15 10 ? * 6L 2002-2005   2002年至2005年的每月的最后一个星期五上午10:15触发 </span></span><br><span class="line"><span class="code">0 15 10 ? * 6#3   每月的第三个星期五上午10:15触发</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;出货表导出&quot;&gt;&lt;a href=&quot;#出货表导出&quot; class=&quot;headerlink&quot; title=&quot;出货表导出&quot;&gt;&lt;/a&gt;出货表导出&lt;/h1&gt;&lt;h2 id=&quot;跳转出货表页面&quot;&gt;&lt;a href=&quot;#跳转出货表页面&quot; class=&quot;headerlink&quot; title=&quot;跳转出货表页面&quot;&gt;&lt;/a&gt;跳转出货表页面&lt;/h2&gt;&lt;p&gt;在&lt;code&gt;ContractController&lt;/code&gt;中添加下面方法&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@RequestMapping&lt;/span&gt;(path = &lt;span class=&quot;string&quot;&gt;&quot;/print&quot;&lt;/span&gt;, name = &lt;span class=&quot;string&quot;&gt;&quot;跳转出货表页面&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;/cargo/print/contract-print&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="其他" scheme="http://sunmoon.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="poi报表技术" scheme="http://sunmoon.com/tags/poi%E6%8A%A5%E8%A1%A8%E6%8A%80%E6%9C%AF/"/>
    
      <category term="百万数据报表技术" scheme="http://sunmoon.com/tags/%E7%99%BE%E4%B8%87%E6%95%B0%E6%8D%AE%E6%8A%A5%E8%A1%A8%E6%8A%80%E6%9C%AF/"/>
    
      <category term="EasyPOI" scheme="http://sunmoon.com/tags/EasyPOI/"/>
    
      <category term="定时任务" scheme="http://sunmoon.com/tags/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    
      <category term="Quartz" scheme="http://sunmoon.com/tags/Quartz/"/>
    
  </entry>
  
  <entry>
    <title>POI报表技术&amp;细粒度权限控制</title>
    <link href="http://sunmoon.com/2020/10/17/POI%E6%8A%A5%E8%A1%A8%E6%8A%80%E6%9C%AF-%E7%BB%86%E7%B2%92%E5%BA%A6%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/"/>
    <id>http://sunmoon.com/2020/10/17/POI%E6%8A%A5%E8%A1%A8%E6%8A%80%E6%9C%AF-%E7%BB%86%E7%B2%92%E5%BA%A6%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/</id>
    <published>2020-10-17T12:25:54.000Z</published>
    <updated>2020-10-17T12:29:05.921Z</updated>
    
    <content type="html"><![CDATA[<h1 id="附件管理"><a href="#附件管理" class="headerlink" title="附件管理"></a>附件管理</h1><h2 id="附件列表"><a href="#附件列表" class="headerlink" title="附件列表"></a>附件列表</h2><p><img data-src="/assets/image-20200710001758870.png" alt="image-20200710001758870"></p><p>在<code>export_manager_web</code>模块的<code>com.itheima.web.controller.cargo</code>下创建<code>ExtCproductController</code></p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web.controller.cargo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageInfo;</span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.cargo.ExtCproductExample;</span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.cargo.Factory;</span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.cargo.FactoryExample;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.cargo.ExtCproductService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.cargo.FactoryService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.web.controller.BaseController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/cargo/extCproduct"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtCproductController</span> <span class="keyword">extends</span> <span class="title">BaseController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span></span><br><span class="line">    <span class="keyword">private</span> ExtCproductService extCproductService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span></span><br><span class="line">    <span class="keyword">private</span> FactoryService factoryService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/list"</span>, name = <span class="string">"附件列表查询"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @RequestParam(defaultValue = <span class="string">"1"</span>, name = <span class="string">"page"</span>)</span> Integer pageNum,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(defaultValue = <span class="string">"10"</span>)</span> Integer pageSize,</span></span><br><span class="line"><span class="function">            String contractId, String contractProductId) </span>&#123;</span><br><span class="line"></span><br><span class="line">        ExtCproductExample extCproductExample = <span class="keyword">new</span> ExtCproductExample();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1 查询当前货物下的所有附件</span></span><br><span class="line">        extCproductExample.createCriteria().andContractProductIdEqualTo(contractProductId);</span><br><span class="line">        PageInfo pageInfo = extCproductService.findByPage(pageNum, pageSize, extCproductExample);</span><br><span class="line">        request.setAttribute(<span class="string">"page"</span>, pageInfo);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2 查询所有生产附件的厂家列表</span></span><br><span class="line">        FactoryExample factoryExample = <span class="keyword">new</span> FactoryExample();</span><br><span class="line">        factoryExample.createCriteria().andCtypeEqualTo(<span class="string">"附件"</span>);</span><br><span class="line">        List&lt;Factory&gt; factoryList = factoryService.findAll(factoryExample);</span><br><span class="line">        request.setAttribute(<span class="string">"factoryList"</span>, factoryList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 回传合同id 和  货物id</span></span><br><span class="line">        request.setAttribute(<span class="string">"contractId"</span>, contractId);</span><br><span class="line">        request.setAttribute(<span class="string">"contractProductId"</span>, contractProductId);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/cargo/extc/extc-list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @RequestMapping(value = "/toUpdate", name = "跳转附件编辑页面")</span></span><br><span class="line"><span class="comment">//    public String toUpdate(String id) &#123;</span></span><br><span class="line"><span class="comment">//        //1. 根据id查询当前附件信息</span></span><br><span class="line"><span class="comment">//        ExtCproduct extCproduct = extCproductService.findById(id);</span></span><br><span class="line"><span class="comment">//        request.setAttribute("extCproduct", extCproduct);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //2. 查询所有生产附件的厂家列表</span></span><br><span class="line"><span class="comment">//        FactoryExample factoryExample = new FactoryExample();</span></span><br><span class="line"><span class="comment">//        factoryExample.createCriteria().andCtypeEqualTo("附件");</span></span><br><span class="line"><span class="comment">//        List&lt;Factory&gt; factoryList = factoryService.findAll(factoryExample);</span></span><br><span class="line"><span class="comment">//        request.setAttribute("factoryList", factoryList);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //3. 转发到修改页面</span></span><br><span class="line"><span class="comment">//        return "/cargo/extc/extc-update";</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    @RequestMapping(value = "/edit", name = "附件新增或编辑")</span></span><br><span class="line"><span class="comment">//    public String edit(ExtCproduct extCproduct) &#123;</span></span><br><span class="line"><span class="comment">//        if (StringUtils.isEmpty(extCproduct.getId())) &#123;</span></span><br><span class="line"><span class="comment">//            //1. 设置主键</span></span><br><span class="line"><span class="comment">//            extCproduct.setId(UUID.randomUUID().toString());</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            //2. 设置企业信息</span></span><br><span class="line"><span class="comment">//            extCproduct.setCompanyId(getCompanyId());</span></span><br><span class="line"><span class="comment">//            extCproduct.setCompanyName(getCompanyName());</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            extCproductService.save(extCproduct);</span></span><br><span class="line"><span class="comment">//        &#125; else &#123;</span></span><br><span class="line"><span class="comment">//            extCproductService.update(extCproduct);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //重定向到list方法</span></span><br><span class="line"><span class="comment">//        return "redirect:/cargo/extCproduct/list.do?contractId=" + extCproduct.getContractId();</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    @RequestMapping(value = "/delete", name = "附件删除")</span></span><br><span class="line"><span class="comment">//    public String delete(String id, String contractId) &#123;</span></span><br><span class="line"><span class="comment">//        //调用service删除</span></span><br><span class="line"><span class="comment">//        extCproductService.delete(id);//附件id</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //重定向到list方法</span></span><br><span class="line"><span class="comment">//        return "redirect:/cargo/extCproduct/list.do?contractId=" + contractId;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="新增附件"><a href="#新增附件" class="headerlink" title="新增附件"></a>新增附件</h2><h3 id="ExtCproductController"><a href="#ExtCproductController" class="headerlink" title="ExtCproductController"></a>ExtCproductController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/edit"</span>, name = <span class="string">"附件新增或编辑"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">edit</span><span class="params">(ExtCproduct extCproduct)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(extCproduct.getId())) &#123;</span><br><span class="line">        <span class="comment">//1. 设置主键</span></span><br><span class="line">        extCproduct.setId(UUID.randomUUID().toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 设置企业信息</span></span><br><span class="line">        extCproduct.setCompanyId(getCompanyId());</span><br><span class="line">        extCproduct.setCompanyName(getCompanyName());</span><br><span class="line"></span><br><span class="line">        extCproductService.save(extCproduct);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        extCproductService.update(extCproduct);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重定向到list方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/cargo/extCproduct/list.do?contractId="</span> + extCproduct.getContractId() + <span class="string">"&amp;contractProductId="</span> + extCproduct.getContractProductId();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ExtCproductServiceImpl"><a href="#ExtCproductServiceImpl" class="headerlink" title="ExtCproductServiceImpl"></a>ExtCproductServiceImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(ExtCproduct extCproduct)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//======================================查询===================================//</span></span><br><span class="line">    <span class="comment">//1. 根据合同id,得到合同对象</span></span><br><span class="line">    Contract contract = contractDao.selectByPrimaryKey(extCproduct.getContractId());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//======================================附件新增===================================//</span></span><br><span class="line">    <span class="comment">//1. 计算小计金额</span></span><br><span class="line">    Double amount = extCproduct.getPrice() * extCproduct.getCnumber();</span><br><span class="line">    extCproduct.setAmount(amount);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 执行保存</span></span><br><span class="line">    extCproductDao.insertSelective(extCproduct);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//======================================货物无影响===================================//</span></span><br><span class="line">    <span class="comment">//======================================合同修改===================================//</span></span><br><span class="line">    <span class="comment">//1. 修改合同中的附件种数 + 1</span></span><br><span class="line">    contract.setExtNum(contract.getExtNum() + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 修改合同总金额 + 小计</span></span><br><span class="line">    contract.setTotalAmount(contract.getTotalAmount() + amount);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 执行修改</span></span><br><span class="line">    contractDao.updateByPrimaryKeySelective(contract);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改附件"><a href="#修改附件" class="headerlink" title="修改附件"></a>修改附件</h2><p><img data-src="/assets/image-20200710002137559.png" alt="image-20200710002137559"></p><h3 id="跳转修改页面"><a href="#跳转修改页面" class="headerlink" title="跳转修改页面"></a>跳转修改页面</h3><p>修改ExtCproductController添加代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@RequestMapping</span>(value = <span class="string">"/toUpdate"</span>, name = <span class="string">"跳转附件编辑页面"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toUpdate</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1. 根据id查询当前附件信息</span></span><br><span class="line">    ExtCproduct extCproduct = extCproductService.findById(id);</span><br><span class="line">    request.setAttribute(<span class="string">"extCproduct"</span>, extCproduct);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 查询所有生产附件的厂家列表</span></span><br><span class="line">    FactoryExample factoryExample = <span class="keyword">new</span> FactoryExample();</span><br><span class="line">    factoryExample.createCriteria().andCtypeEqualTo(<span class="string">"附件"</span>);</span><br><span class="line">    List&lt;Factory&gt; factoryList = factoryService.findAll(factoryExample);</span><br><span class="line">    request.setAttribute(<span class="string">"factoryList"</span>, factoryList);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 转发到修改页面</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"/cargo/extc/extc-update"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改附件-1"><a href="#修改附件-1" class="headerlink" title="修改附件"></a>修改附件</h3><p>修改ExtCproductServiceImpl添加代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(ExtCproduct extCproduct)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//======================================查询===================================//</span></span><br><span class="line">    <span class="comment">//1. 根据合同id,得到合同对象</span></span><br><span class="line">    Contract contract = contractDao.selectByPrimaryKey(extCproduct.getContractId());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 根据附件id查询附件的信息</span></span><br><span class="line">    ExtCproduct extCproductOld = extCproductDao.selectByPrimaryKey(extCproduct.getId());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//======================================附件修改===================================//</span></span><br><span class="line">    <span class="comment">//1. 计算小计金额</span></span><br><span class="line">    Double amount = extCproduct.getPrice() * extCproduct.getCnumber();</span><br><span class="line">    extCproduct.setAmount(amount);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 执行修改</span></span><br><span class="line">    extCproductDao.updateByPrimaryKeySelective(extCproduct);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//======================================货物无影响===================================//</span></span><br><span class="line">    <span class="comment">//======================================合同修改===================================//</span></span><br><span class="line">    <span class="comment">//1. 修改总金额 - 源小计  + 新小计</span></span><br><span class="line">    contract.setTotalAmount(contract.getTotalAmount() - extCproductOld.getAmount() + amount);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 执行合同修改</span></span><br><span class="line">    contractDao.updateByPrimaryKeySelective(contract);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除附件"><a href="#删除附件" class="headerlink" title="删除附件"></a>删除附件</h2><p><img data-src="/assets/image-20200710002223820.png" alt="image-20200710002223820"></p><h3 id="ExtCproductController-1"><a href="#ExtCproductController-1" class="headerlink" title="ExtCproductController"></a>ExtCproductController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/delete"</span>, name = <span class="string">"附件删除"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(String id, String contractId, String contractProductId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//调用service删除</span></span><br><span class="line">    extCproductService.delete(id);<span class="comment">//附件id</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//重定向到list方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/cargo/extCproduct/list.do?contractId="</span> + contractId + <span class="string">"&amp;contractProductId="</span> + contractProductId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ExtCproductServiceImpl-1"><a href="#ExtCproductServiceImpl-1" class="headerlink" title="ExtCproductServiceImpl"></a>ExtCproductServiceImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//======================================查询===================================//</span></span><br><span class="line">    <span class="comment">//1. 根据附件id查询附件信息</span></span><br><span class="line">    ExtCproduct extCproduct = extCproductDao.selectByPrimaryKey(id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 根据合同id查询合同信息</span></span><br><span class="line">    Contract contract = contractDao.selectByPrimaryKey(extCproduct.getContractId());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//======================================附件删除===================================//</span></span><br><span class="line">    extCproductDao.deleteByPrimaryKey(id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//======================================货物无影响===================================//</span></span><br><span class="line">    <span class="comment">//======================================合同修改===================================//</span></span><br><span class="line">    <span class="comment">//1. 修改合同中的附件数量 - 1</span></span><br><span class="line">    contract.setExtNum(contract.getExtNum() - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 修改合同中的总金额 - 要删除的附件的小计</span></span><br><span class="line">    contract.setTotalAmount(contract.getTotalAmount() - extCproduct.getAmount());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 执行修改</span></span><br><span class="line">    contractDao.updateByPrimaryKeySelective(contract);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="项目中的图片上传"><a href="#项目中的图片上传" class="headerlink" title="项目中的图片上传"></a>项目中的图片上传</h1><blockquote><p>前端上传到后台: SpringMVC 文件上传解析器( 前端三要素 )</p><p>后台上传到七牛云: 工具类</p></blockquote><p>在当前项目中的==货物和附件的添加和修改==页面,  都是需要做文件上传功能的,  下面就来实现以下</p><h2 id="工具类准备"><a href="#工具类准备" class="headerlink" title="工具类准备"></a>工具类准备</h2><p><img data-src="/assets/image-20201017092039067.png" alt="image-20201017092039067"> </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">qiniu.accessKey=xxxx</span><br><span class="line">qiniu.secretKey=xxxx</span><br><span class="line">qiniu.bucket=xxxx</span><br><span class="line">qiniu.rtValue=xxxx</span><br></pre></td></tr></table></figure><p>注意: 一定要删除dao模块中Spring配置文件中的引入外部配置的部分</p><p><img data-src="/assets/image-20201017092300933.png" alt="image-20201017092300933"></p><h2 id="配置文件上传解析器"><a href="#配置文件上传解析器" class="headerlink" title="配置文件上传解析器"></a>配置文件上传解析器</h2><p>在<code>export_manager_web</code>模块下的resources下的<code>spring/spring-mvc.xml</code>文件中添加文件上传解析器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件上传解析器, 这个id不能随便改--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置上传文件的最大尺寸为 5MB --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"5242880"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h2><h3 id="页面代码调整"><a href="#页面代码调整" class="headerlink" title="页面代码调整"></a>页面代码调整</h3><p>修改页面中文件上传表单的enctype=”multipart/form-data”属性</p><p><img data-src="/assets/image-20200705103400317.png" alt="image-20200705103400317"> </p><h3 id="后台代码编写"><a href="#后台代码编写" class="headerlink" title="后台代码编写"></a>后台代码编写</h3><p><img data-src="/assets/image-20200705103940014.png" alt=""></p><h1 id="细粒度权限控制"><a href="#细粒度权限控制" class="headerlink" title="细粒度权限控制"></a>细粒度权限控制</h1><blockquote><p>粗粒度权限：将权限控制到类型级别 （张三可以访问部门信息 ， 但是不能访问用户信息）   shiro</p><p>细粒度权限：将权限控制到数据级别 （张三可以访问1号用户信息， 但是不能访问2号用户信息） 自己写SQL</p></blockquote><p>一个优秀的后台程序应当做到对权限的细粒度控制, 即数据级别的权限控制</p><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>在我们的系统中，除了两类管理员之外，员工也分为三类:</p><ul><li>普通员工：只能看自己的合同数据</li><li>部门经理：可以看到本部分所有员工的合同数据</li><li>总经理：可以看到本部门及所有子部门的合同数据</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>4  普通员工：只能看自己的合同数据                    select * from co<span class="emphasis">_contract where  create_</span>by = 'session获取登录人的id'</span><br><span class="line"><span class="bullet">- </span>3  部门经理：可以看到本部分所有员工的合同数据         select * from co<span class="emphasis">_contract where  create_</span>dept =  'session获取登录人的所在部门的id'</span><br><span class="line"><span class="bullet">- </span>2  总经理：可以看到本部门及所有子部门的合同数据       select * from co<span class="emphasis">_contract where  create_</span>dept like 'session获取登录人的所在部门的id%'</span><br><span class="line"></span><br><span class="line">if(degree == 4)&#123;</span><br><span class="line"><span class="code">select * from co_contract where  create_by = 'session获取登录人的id'</span></span><br><span class="line">&#125;else if(degree == 3)&#123;</span><br><span class="line"> select * from co<span class="emphasis">_contract where  create_</span>dept =  'session获取登录人的所在部门的id'</span><br><span class="line">&#125;else if(degree  == 2)&#123;</span><br><span class="line"><span class="code">select * from co_contract where  create_dept like 'session获取登录人的所在部门的id%'</span></span><br><span class="line">&#125;else&#123;</span><br><span class="line"><span class="code">不受细粒度权限控制</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>修改<code>ContractController</code>中查询合同列表的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/list"</span>, name = <span class="string">"合同列表查询"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @RequestParam(defaultValue = <span class="string">"1"</span>, name = <span class="string">"page"</span>)</span> Integer pageNum,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(defaultValue = <span class="string">"10"</span>)</span> Integer pageSize) </span>&#123;</span><br><span class="line"></span><br><span class="line">        ContractExample contractExample = <span class="keyword">new</span> ContractExample();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1 封装条件</span></span><br><span class="line">        ContractExample.Criteria criteria = contractExample.createCriteria();</span><br><span class="line">        criteria.andCompanyIdEqualTo(getCompanyId());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断用户等级,根据等级不同去拼接不同条件</span></span><br><span class="line">        Integer degree = getUser().getDegree();</span><br><span class="line">        <span class="keyword">if</span> (degree == <span class="number">4</span>) &#123;<span class="comment">//普通员工</span></span><br><span class="line">            criteria.andCreateByEqualTo(getUser().getId());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (degree == <span class="number">3</span>) &#123;<span class="comment">//部门经理</span></span><br><span class="line">            criteria.andCreateDeptEqualTo(getUser().getDeptId());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (degree == <span class="number">2</span>) &#123;<span class="comment">//总经理</span></span><br><span class="line">            criteria.andCreateDeptLike(getUser().getDeptId() + <span class="string">"%"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2 排序</span></span><br><span class="line">        contractExample.setOrderByClause(<span class="string">"create_time desc"</span>);</span><br><span class="line"></span><br><span class="line">        PageInfo pageInfo = contractService.findByPage(pageNum, pageSize, contractExample);</span><br><span class="line">        request.setAttribute(<span class="string">"page"</span>, pageInfo);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/cargo/contract/contract-list"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><blockquote><p>系统中已经内置好了几个账户用于测试，结构如下，密码都是123 ，分配的角色都是销售专责，权限是只能管理购销合同</p></blockquote><p><img data-src="/assets/image-20200715102348775.png" alt="image-20200715102348775"> </p><h1 id="POI报表技术"><a href="#POI报表技术" class="headerlink" title="POI报表技术"></a>POI报表技术</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>在企业内部系统中，有很多地方会用到Excel表格，目前的Excel分为两个大的版本：Excel2003和Excel2007及以上。两者之间的区别如下：</p><table><thead><tr><th>区别</th><th>Excel 2003</th><th>Excel 2007及以上</th></tr></thead><tbody><tr><td>扩展名</td><td>xls</td><td>xlsx</td></tr><tr><td>数据结构</td><td>二进制格式</td><td>xml格式</td></tr><tr><td>单sheet数据量</td><td>行：65535、列：256</td><td>行：1048576、列：16384</td></tr><tr><td>特点</td><td>存储容量有限</td><td>基于xml压缩，占用空间小，操作效率高</td></tr></tbody></table><p>Java中常见的用来操作Excl的方式一般有2种：JXL和POI。</p><ul><li><p>JXL只能对Excel进行操作，属于比较老的框架，它只支持到Excel 95-2000的版本，现在已经停止更新和维护。</p></li><li><p>POI是apache的项目，可对微软的Word、Excel、PPT进行操作，包括office2003和2007两个大版本，是目前主流的操作execl的技术。</p></li></ul><h3 id="Execl基础概念"><a href="#Execl基础概念" class="headerlink" title="Execl基础概念"></a>Execl基础概念</h3><p>Execl基础概念在POI中的API描述如下:</p><table><thead><tr><th>Execl中的概念</th><th>2003版本对象</th><th>2007版本对象</th></tr></thead><tbody><tr><td>工作簿(WorkBook)</td><td>HssfWordBook</td><td>XssfWorkBook</td></tr><tr><td>工作表(Sheet)</td><td>HssfSheet</td><td>XssfSheet</td></tr><tr><td>行(Row)</td><td>HssfRow</td><td>XssfRow</td></tr><tr><td>单元格(Cell)</td><td>HssfCell</td><td>XssfCell</td></tr></tbody></table><h2 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h2><h3 id="创建工程-引入依赖"><a href="#创建工程-引入依赖" class="headerlink" title="创建工程,引入依赖"></a>创建工程,引入依赖</h3><p><img data-src="/assets/image-20201017104331665.png" alt="image-20201017104331665"> </p><h3 id="创建Execl"><a href="#创建Execl" class="headerlink" title="创建Execl"></a>创建Execl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.poi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Cell;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Row;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Sheet;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Workbook;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向本地的一个Execl中输入一句话</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreatePoiDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 创建一个Execl工作簿</span></span><br><span class="line">        Workbook workbook = <span class="keyword">new</span> XSSFWorkbook();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 使用工作簿创建工作表</span></span><br><span class="line">        Sheet sheet = workbook.createSheet();</span><br><span class="line">        sheet.setColumnWidth(<span class="number">0</span>, <span class="number">20</span> * <span class="number">256</span>); <span class="comment">//设置列宽,注意底层会自动除以256</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 使用工作表创建行</span></span><br><span class="line">        Row row = sheet.createRow(<span class="number">0</span>);<span class="comment">//创建第几行,使用索引计数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 使用行创建单元格</span></span><br><span class="line">        Cell cell = row.createCell(<span class="number">0</span>);<span class="comment">//创建第几个单元格, 使用索引计数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 向单元格中输入一句话</span></span><br><span class="line">        cell.setCellValue(<span class="string">"键盘敲烂,月薪过万"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6. 写出一个工作簿到磁盘</span></span><br><span class="line">        workbook.write(<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"C:\\upload\\test.xlsx"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="读取Execl"><a href="#读取Execl" class="headerlink" title="读取Execl"></a>读取Execl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.poi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从本地的execl中读取内容</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadPoiDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 读取本地文件--流--工作簿</span></span><br><span class="line">        Workbook workbook = <span class="keyword">new</span> XSSFWorkbook(<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"C:\\upload\\data.xlsx"</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 通过工作簿获取工作表</span></span><br><span class="line">        Sheet sheet = workbook.getSheetAt(<span class="number">0</span>);<span class="comment">//getSheetAt(i) 根据索引获取    getSheet(s) 根据名字获取</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 通过工作表获取行[ 遍历  开始0  结尾 位置]</span></span><br><span class="line">        <span class="comment">//注意: 获取行的时候,得到的是最后一行的索引,要想遍历,必须做+1操作</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sheet.getLastRowNum() + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            Row row = sheet.getRow(i);</span><br><span class="line">            <span class="comment">//4. 通过行获取单元格[遍历 开始0  结尾 位置 ]</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt; row.getLastCellNum(); j++) &#123;</span><br><span class="line">                Cell cell = row.getCell(j);</span><br><span class="line">                <span class="comment">//5. 获取单元格中的内容</span></span><br><span class="line">                System.out.print(getCellValue(cell) + <span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();<span class="comment">//换行</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析每个单元格的数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getCellValue</span><span class="params">(Cell cell)</span> </span>&#123;</span><br><span class="line">        Object obj = <span class="keyword">null</span>;</span><br><span class="line">        CellType cellType = cell.getCellType(); <span class="comment">//获取单元格数据类型</span></span><br><span class="line">        <span class="keyword">switch</span> (cellType) &#123;</span><br><span class="line">            <span class="keyword">case</span> STRING: &#123;</span><br><span class="line">                obj = cell.getStringCellValue();<span class="comment">//字符串</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//excel默认将日期也理解为数字</span></span><br><span class="line">            <span class="keyword">case</span> NUMERIC: &#123;</span><br><span class="line">                <span class="keyword">if</span> (DateUtil.isCellDateFormatted(cell)) &#123;</span><br><span class="line">                    obj = cell.getDateCellValue();<span class="comment">//日期</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    obj = cell.getNumericCellValue(); <span class="comment">// 数字</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> BOOLEAN: &#123;</span><br><span class="line">                obj = cell.getBooleanCellValue(); <span class="comment">// 布尔</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span>: &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="货物导入"><a href="#货物导入" class="headerlink" title="货物导入"></a>货物导入</h1><h2 id="需求分析-1"><a href="#需求分析-1" class="headerlink" title="需求分析"></a>需求分析</h2><p><img data-src="/assets/image-20200705160727179.png" alt="image-20200705160727179"> </p><h2 id="进入货物导入页面"><a href="#进入货物导入页面" class="headerlink" title="进入货物导入页面"></a>进入货物导入页面</h2><p><img data-src="/assets/image-20200710003418881.png" alt="image-20200710003418881"></p><p>修改ContractProductController, 添加方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/toImport"</span>, name = <span class="string">"跳转货物批量上传的页面"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toImport</span><span class="params">(String contractId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//回显合同id</span></span><br><span class="line">    request.setAttribute(<span class="string">"contractId"</span>, contractId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//转发到上传页面</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"/cargo/product/product-import"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现导入功能"><a href="#实现导入功能" class="headerlink" title="实现导入功能"></a>实现导入功能</h2><h3 id="ContractProductController"><a href="#ContractProductController" class="headerlink" title="ContractProductController"></a>ContractProductController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/import"</span>, name = <span class="string">"货物批量上传"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">imports</span><span class="params">(String contractId, MultipartFile file)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1. 接收传递过来的参数 合同id   货物的文件</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 读取一个File--流--工作簿</span></span><br><span class="line">    Workbook workbook = <span class="keyword">new</span> XSSFWorkbook(file.getInputStream());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 使用工作簿获取工作表</span></span><br><span class="line">    Sheet sheet = workbook.getSheetAt(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 从工作表获取行</span></span><br><span class="line">    List&lt;ContractProduct&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; sheet.getLastRowNum() + <span class="number">1</span>; i++) &#123;</span><br><span class="line">        Row row = sheet.getRow(i);</span><br><span class="line">        <span class="comment">//5 从行中获取单元格</span></span><br><span class="line">        Object[] objs = <span class="keyword">new</span> Object[<span class="number">9</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; row.getLastCellNum(); j++) &#123;</span><br><span class="line">            <span class="comment">//6. 从单元格中获取数据</span></span><br><span class="line">            Cell cell = row.getCell(j);</span><br><span class="line">            Object cellValue = getCellValue(cell);</span><br><span class="line">            objs[j - <span class="number">1</span>] = cellValue;</span><br><span class="line">        &#125;</span><br><span class="line">        ContractProduct contractProduct = <span class="keyword">new</span> ContractProduct(objs);</span><br><span class="line">        <span class="comment">//7 补全信息</span></span><br><span class="line">        contractProduct.setId(UUID.randomUUID().toString());</span><br><span class="line">        contractProduct.setContractId(contractId);</span><br><span class="line">        contractProduct.setCompanyId(getCompanyId());</span><br><span class="line">        contractProduct.setCompanyName(getCompanyName());</span><br><span class="line"></span><br><span class="line">        FactoryExample factoryExample = <span class="keyword">new</span> FactoryExample();</span><br><span class="line">        factoryExample.createCriteria().andFactoryNameEqualTo(contractProduct.getFactoryName());</span><br><span class="line">        List&lt;Factory&gt; factories = factoryService.findAll(factoryExample);</span><br><span class="line">        contractProduct.setFactoryId(factories.get(<span class="number">0</span>).getId());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//8. 封装一个List集合对象</span></span><br><span class="line">        list.add(contractProduct);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//9 调用service保存</span></span><br><span class="line">    contractProductService.patchSave(list);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//10 跳转页面</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/cargo/contractProduct/list.do?contractId="</span> + contractId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//解析每个单元格的数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getCellValue</span><span class="params">(Cell cell)</span> </span>&#123;</span><br><span class="line">    Object obj = <span class="keyword">null</span>;</span><br><span class="line">    CellType cellType = cell.getCellType(); <span class="comment">//获取单元格数据类型</span></span><br><span class="line">    <span class="keyword">switch</span> (cellType) &#123;</span><br><span class="line">        <span class="keyword">case</span> STRING: &#123;</span><br><span class="line">            obj = cell.getStringCellValue();<span class="comment">//字符串</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="comment">//excel默认将日期也理解为数字</span></span><br><span class="line">        <span class="keyword">case</span> NUMERIC: &#123;</span><br><span class="line">            <span class="keyword">if</span> (DateUtil.isCellDateFormatted(cell)) &#123;</span><br><span class="line">                obj = cell.getDateCellValue();<span class="comment">//日期</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                obj = cell.getNumericCellValue(); <span class="comment">// 数字</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> BOOLEAN: &#123;</span><br><span class="line">            obj = cell.getBooleanCellValue(); <span class="comment">// 布尔</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">default</span>: &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ContractProductService"><a href="#ContractProductService" class="headerlink" title="ContractProductService"></a>ContractProductService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">patchSave</span><span class="params">(List&lt;ContractProduct&gt; list)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="ContractProductServiceImpl"><a href="#ContractProductServiceImpl" class="headerlink" title="ContractProductServiceImpl"></a>ContractProductServiceImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">patchSave</span><span class="params">(List&lt;ContractProduct&gt; list)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (ContractProduct contractProduct : list) &#123;</span><br><span class="line">        <span class="keyword">this</span>.save(contractProduct);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;附件管理&quot;&gt;&lt;a href=&quot;#附件管理&quot; class=&quot;headerlink&quot; title=&quot;附件管理&quot;&gt;&lt;/a&gt;附件管理&lt;/h1&gt;&lt;h2 id=&quot;附件列表&quot;&gt;&lt;a href=&quot;#附件列表&quot; class=&quot;headerlink&quot; title=&quot;附件列表&quot;&gt;&lt;/a&gt;附件列表&lt;/h2&gt;&lt;p&gt;&lt;img data-src=&quot;/assets/image-20200710001758870.png&quot; alt=&quot;image-20200710001758870&quot;&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;export_manager_web&lt;/code&gt;模块的&lt;code&gt;com.itheima.web.controller.cargo&lt;/code&gt;下创建&lt;code&gt;ExtCproductController&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="其他" scheme="http://sunmoon.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="poi报表技术" scheme="http://sunmoon.com/tags/poi%E6%8A%A5%E8%A1%A8%E6%8A%80%E6%9C%AF/"/>
    
      <category term="细粒度权限控制" scheme="http://sunmoon.com/tags/%E7%BB%86%E7%B2%92%E5%BA%A6%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis逆向工程&amp;七牛云存储</title>
    <link href="http://sunmoon.com/2020/10/16/Mybatis%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-%E4%B8%83%E7%89%9B%E4%BA%91%E5%AD%98%E5%82%A8/"/>
    <id>http://sunmoon.com/2020/10/16/Mybatis%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-%E4%B8%83%E7%89%9B%E4%BA%91%E5%AD%98%E5%82%A8/</id>
    <published>2020-10-16T10:46:35.000Z</published>
    <updated>2020-10-16T10:50:28.083Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mybatis逆向工程"><a href="#Mybatis逆向工程" class="headerlink" title="Mybatis逆向工程"></a>Mybatis逆向工程</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Mybatis是目前非常流行的持久层框架，其逆向工程更是大大缩减了我们的开发时间。</p><p>所谓mybatis逆向工程，就是Mybatis会根据我们设计好的数据表，自动生成<strong>domain（实体）</strong>、<strong>mapper（接口）</strong>以及<strong>mapper.xml（映射）</strong></p><p>而且会在文件中给我们生成单表增删改查的方法和sql</p><p>官网地址：<a href="https://mybatis.org/generator/" target="_blank" rel="noopener">https://mybatis.org/generator/</a></p><p><img data-src="/assets/image-20200704085155163.png" alt="image-20200704085155163"> </p><a id="more"></a><h2 id="插件使用"><a href="#插件使用" class="headerlink" title="插件使用"></a>插件使用</h2><h3 id="创建一个maven工程-引入依赖"><a href="#创建一个maven工程-引入依赖" class="headerlink" title="创建一个maven工程,引入依赖"></a>创建一个maven工程,引入依赖</h3><p><img data-src="/assets/image-20201015085021777.png" alt="image-20201015085021777"> </p><h3 id="加入配置文件"><a href="#加入配置文件" class="headerlink" title="加入配置文件"></a>加入配置文件</h3><p><img data-src="/assets/image-20201015085845085.png" alt="image-20201015085845085"> </p><h3 id="运行插件-生成文件"><a href="#运行插件-生成文件" class="headerlink" title="运行插件,生成文件"></a>运行插件,生成文件</h3><p><img data-src="/assets/image-20201015090331887.png" alt="image-20201015090331887"> </p><h2 id="生成的文件的使用"><a href="#生成的文件的使用" class="headerlink" title="生成的文件的使用"></a>生成的文件的使用</h2><h3 id="单表crud"><a href="#单表crud" class="headerlink" title="单表crud"></a>单表crud</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.dao.cargo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.cargo.Factory;</span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.cargo.FactoryExample;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FactoryDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(Factory record)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存(动态SQL)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertSelective</span><span class="params">(Factory record)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateByPrimaryKey</span><span class="params">(Factory record)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改(动态SQL)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateByPrimaryKeySelective</span><span class="params">(Factory record)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据主键删除</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteByPrimaryKey</span><span class="params">(String id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据主键查询</span></span><br><span class="line">    <span class="function">Factory <span class="title">selectByPrimaryKey</span><span class="params">(String id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//条件查询</span></span><br><span class="line">    <span class="function">List&lt;Factory&gt; <span class="title">selectByExample</span><span class="params">(FactoryExample example)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><p><strong>factory表数据</strong></p><p><img data-src="/assets/image-20200704092836919.png" alt="image-20200704094912780"> </p><p><strong>加入mybatis的环境</strong></p><p><img data-src="/assets/image-20200704094912780.png" alt="image-20200704094912780"> </p><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.dao.cargo.FactoryDao;</span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.cargo.Factory;</span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.cargo.FactoryExample;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//FactoryExample有三个作用:</span></span><br><span class="line"><span class="comment">//  1)  FactoryExample.Criteria criteria = factoryExample.createCriteria();  拼接查询条件</span></span><br><span class="line"><span class="comment">//  2)  factoryExample.setOrderByClause("id desc")                添加排序条件</span></span><br><span class="line"><span class="comment">//  3)  factoryExample.setDistinct(true)                          添加去重条件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询所有</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(<span class="string">"mybatis-config.xml"</span>);</span><br><span class="line">        SqlSessionFactory sessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        SqlSession sqlSession = sessionFactory.openSession();</span><br><span class="line">        FactoryDao mapper = sqlSession.getMapper(FactoryDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//=================================关注点在下面===========================================</span></span><br><span class="line">        FactoryExample factoryExample = <span class="keyword">new</span> FactoryExample();</span><br><span class="line"></span><br><span class="line">        List&lt;Factory&gt; factories = mapper.selectByExample(factoryExample);<span class="comment">//select * from co_factory</span></span><br><span class="line">        System.out.println(factories.size());</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//条件所有 Criteria</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByExample</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(<span class="string">"mybatis-config.xml"</span>);</span><br><span class="line">        SqlSessionFactory sessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        SqlSession sqlSession = sessionFactory.openSession();</span><br><span class="line">        FactoryDao mapper = sqlSession.getMapper(FactoryDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//=================================关注点在下面===========================================</span></span><br><span class="line">        FactoryExample factoryExample = <span class="keyword">new</span> FactoryExample();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Criteria 这是FactoryExample的一个小弟, 这个小弟的作用是用于封装查询条件</span></span><br><span class="line">        FactoryExample.Criteria criteria = factoryExample.createCriteria();</span><br><span class="line"><span class="comment">//        criteria.andCtypeEqualTo("货物");//WHERE ( ctype = ? )</span></span><br><span class="line"><span class="comment">//        criteria.andAddressEqualTo("长沙");//( ctype = ? and address = ? )</span></span><br><span class="line"><span class="comment">//        criteria.andFullNameLike("祁%");//( ctype = ? and address = ? and full_name like ? )</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//链式编程: 当一个对象方法返回值是本对象的时候</span></span><br><span class="line">        criteria.andCtypeEqualTo(<span class="string">"货物"</span>).andAddressEqualTo(<span class="string">"长沙"</span>).andFullNameLike(<span class="string">"祁%"</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Factory&gt; factories = mapper.selectByExample(factoryExample);</span><br><span class="line">        System.out.println(factories.size());</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//排序</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSort</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(<span class="string">"mybatis-config.xml"</span>);</span><br><span class="line">        SqlSessionFactory sessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        SqlSession sqlSession = sessionFactory.openSession();</span><br><span class="line">        FactoryDao mapper = sqlSession.getMapper(FactoryDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//=================================关注点在下面===========================================</span></span><br><span class="line">        FactoryExample factoryExample = <span class="keyword">new</span> FactoryExample();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Criteria 这是FactoryExample的一个小弟, 这个小弟的作用是用于封装查询条件</span></span><br><span class="line">        FactoryExample.Criteria criteria = factoryExample.createCriteria();</span><br><span class="line">        criteria.andCtypeEqualTo(<span class="string">"货物"</span>).andAddressEqualTo(<span class="string">"长沙"</span>).andFullNameLike(<span class="string">"祁%"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//OrderByClause  这是FactoryExample的一个小弟, 这个小弟的作用是用于添加排序条件</span></span><br><span class="line">        factoryExample.setOrderByClause(<span class="string">"id desc"</span>);<span class="comment">// order by id desc</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Distinct 这是FactoryExample的一个小弟, 这个小弟的作用是用于添加去重条件</span></span><br><span class="line">        factoryExample.setDistinct(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Factory&gt; factories = mapper.selectByExample(factoryExample);</span><br><span class="line">        System.out.println(factories.size());</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>支持的条件操作:</p><p><img data-src="/assets/image-20200802173227378.png" alt="20200802173227378"></p><h1 id="购销合同功能"><a href="#购销合同功能" class="headerlink" title="购销合同功能"></a>购销合同功能</h1><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><h3 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h3><p>购销合同：买卖双方签订的合同，维系国内的出口公司和海外客户之间联系</p><p>购销合同由三部分组成：合同主体信息、合同中所有货物信息、合同中所有附件信息</p><p><img data-src="/assets/image-20200714215904632.png" alt="image-20200714215904632"> </p><h3 id="数据模型分析"><a href="#数据模型分析" class="headerlink" title="数据模型分析"></a>数据模型分析</h3><p><strong>实体关系</strong></p><p>数据库表：</p><ul><li>购销合同表 ： <strong>co_contract</strong></li><li>购销合同货物表： <strong>co_contract_product</strong></li><li>购销合同附件表：<strong>co_ext_cproduct</strong></li></ul><p><img data-src="/assets/image-20200704104631425.png" alt="image-20200704104631425"></p><p><strong>实体关系影响</strong></p><p>合同、货物、附件三个实体之间是有关系的， 当前中一个变动会影响到其它两个， 主要影响到的属性为数量和金额</p><table><thead><tr><th>合同变化</th><th>新增</th><th>删除</th><th>修改</th></tr></thead><tbody><tr><td><strong>货物</strong></td><td>无</td><td>删除合同下所有货物</td><td>无</td></tr><tr><td><strong>附件</strong></td><td>无</td><td>删除合同下所有附件</td><td>无</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td><strong>货物变化</strong></td><td><strong>新增</strong></td><td><strong>删除</strong></td><td><strong>修改</strong></td></tr><tr><td><strong>合同</strong></td><td>变更总金额和货物的数量</td><td>变更总金额和货物的数量和附件的数量</td><td>变更总金额</td></tr><tr><td><strong>附件</strong></td><td>无</td><td>删除货物下的所有附件</td><td>无</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td><strong>附件变化</strong></td><td><strong>新增</strong></td><td><strong>删除</strong></td><td><strong>修改</strong></td></tr><tr><td><strong>合同</strong></td><td>变更总金额和附件的数量</td><td>变更总金额和附件的数量</td><td>变更总金额</td></tr><tr><td><strong>货物</strong></td><td>无</td><td>无</td><td>无</td></tr></tbody></table><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="添加模块-配置依赖"><a href="#添加模块-配置依赖" class="headerlink" title="添加模块, 配置依赖"></a>添加模块, 配置依赖</h3><p><img data-src="/assets/image-20200704111323727.png" alt="image-20200704111323727"> </p><h3 id="复制配置文件"><a href="#复制配置文件" class="headerlink" title="复制配置文件"></a>复制配置文件</h3><p><img data-src="/assets/image-20200704111924053.png" alt="image-20200704111924053"> </p><h3 id="复制启动类"><a href="#复制启动类" class="headerlink" title="复制启动类"></a>复制启动类</h3><p><img data-src="/assets/image-20200704112100935.png" alt="image-20200704112100935"> </p><h3 id="添加准备好的类和文件"><a href="#添加准备好的类和文件" class="headerlink" title="添加准备好的类和文件"></a>添加准备好的类和文件</h3><p><img data-src="/assets/image-20200704114317993.png" alt="image-20200704114317993"> </p><h3 id="Service实现类代码的补全"><a href="#Service实现类代码的补全" class="headerlink" title="Service实现类代码的补全"></a>Service实现类代码的补全</h3><p>以FactoryServiceImpl实现类演示其使用方式, 其它的实现类中均以写好对应的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.service.cargo.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Service;</span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageHelper;</span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageInfo;</span><br><span class="line"><span class="keyword">import</span> com.itheima.dao.cargo.FactoryDao;</span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.cargo.Factory;</span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.cargo.FactoryExample;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.cargo.FactoryService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryServiceImpl</span> <span class="keyword">implements</span> <span class="title">FactoryService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一定注意Dao的所有引入都是用@Autowired</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FactoryDao factoryDao;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Factory factory)</span> </span>&#123;</span><br><span class="line">        factoryDao.insertSelective(factory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Factory factory)</span> </span>&#123;</span><br><span class="line">        factoryDao.updateByPrimaryKeySelective(factory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        factoryDao.deleteByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Factory <span class="title">findById</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> factoryDao.selectByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Factory&gt; <span class="title">findAll</span><span class="params">(FactoryExample example)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> factoryDao.selectByExample(example);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PageInfo <span class="title">findByPage</span><span class="params">(<span class="keyword">int</span> pageNum, <span class="keyword">int</span> pageSize, FactoryExample example)</span> </span>&#123;</span><br><span class="line">        PageHelper.startPage(pageNum, pageSize);</span><br><span class="line">        List&lt;Factory&gt; factories = factoryDao.selectByExample(example);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PageInfo(factories, <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="合同管理"><a href="#合同管理" class="headerlink" title="合同管理"></a>合同管理</h1><h2 id="需求说明-1"><a href="#需求说明-1" class="headerlink" title="需求说明"></a>需求说明</h2><p>完成对合同的增删改查操作。注意, 在创建合同的时候添加==创建人id\创建部门id\创建时间==, 后面会用到。</p><p><img data-src="/assets/image-20200714225832526.png" alt="image-20200714225832526"></p><h2 id="合同基本功能实现"><a href="#合同基本功能实现" class="headerlink" title="合同基本功能实现"></a>合同基本功能实现</h2><p>在<code>export_manager_web</code>模块的<code>com.itheima.web.controller.cargo</code>下创建<code>ContractController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web.controller.cargo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageInfo;</span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.cargo.Contract;</span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.cargo.ContractExample;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.cargo.ContractService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.web.controller.BaseController;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/cargo/contract"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContractController</span> <span class="keyword">extends</span> <span class="title">BaseController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span></span><br><span class="line">    <span class="keyword">private</span> ContractService contractService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/list"</span>, name = <span class="string">"合同列表查询"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @RequestParam(defaultValue = <span class="string">"1"</span>, name = <span class="string">"page"</span>)</span> Integer pageNum,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(defaultValue = <span class="string">"10"</span>)</span> Integer pageSize) </span>&#123;</span><br><span class="line"></span><br><span class="line">        ContractExample contractExample = <span class="keyword">new</span> ContractExample();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1 封装条件</span></span><br><span class="line">        ContractExample.Criteria criteria = contractExample.createCriteria();</span><br><span class="line">        criteria.andCompanyIdEqualTo(getCompanyId());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2 排序</span></span><br><span class="line">        contractExample.setOrderByClause(<span class="string">"create_time desc"</span>);</span><br><span class="line"></span><br><span class="line">        PageInfo pageInfo = contractService.findByPage(pageNum, pageSize, contractExample);</span><br><span class="line">        request.setAttribute(<span class="string">"page"</span>, pageInfo);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/cargo/contract/contract-list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/toAdd"</span>, name = <span class="string">"跳转合同新增页面"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toAdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/cargo/contract/contract-add"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/toUpdate"</span>, name = <span class="string">"跳转合同编辑页面"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toUpdate</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1. 根据id查询当前合同信息</span></span><br><span class="line">        Contract contract = contractService.findById(id);</span><br><span class="line">        request.setAttribute(<span class="string">"contract"</span>, contract);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 转发到修改页面</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/cargo/contract/contract-update"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/edit"</span>, name = <span class="string">"合同新增"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">edit</span><span class="params">(Contract contract)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(contract.getId())) &#123;</span><br><span class="line">            <span class="comment">//1. 设置主键</span></span><br><span class="line">            contract.setId(UUID.randomUUID().toString());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2. 设置企业信息</span></span><br><span class="line">            contract.setCompanyId(getCompanyId());</span><br><span class="line">            contract.setCompanyName(getCompanyName());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.创建人id\创建部门id\创建时间</span></span><br><span class="line">            contract.setCreateBy(getUser().getId());</span><br><span class="line">            contract.setCreateDept(getUser().getDeptId());</span><br><span class="line">            contract.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4. 设置当前合同的状态</span></span><br><span class="line">            contract.setState(<span class="number">0</span>);<span class="comment">//草稿</span></span><br><span class="line"></span><br><span class="line">            contractService.save(contract);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            contractService.update(contract);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//重定向到list方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/cargo/contract/list.do"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/delete"</span>, name = <span class="string">"合同删除"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用service删除</span></span><br><span class="line">        contractService.delete(id);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//重定向到list方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/cargo/contract/list.do"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除合同的调整"><a href="#删除合同的调整" class="headerlink" title="删除合同的调整"></a>删除合同的调整</h2><blockquote><p>因为合同  货物  附件之间是有关系的, 所以在删除合同的时候,还要删除合同下面的货物和附件信息 </p></blockquote><p>修改ContractServiceImpl代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//=========================================查询===========================================//</span></span><br><span class="line">    <span class="comment">//1. 查询当前合同下的所有附件</span></span><br><span class="line">    ExtCproductExample extCproductExample = <span class="keyword">new</span> ExtCproductExample();</span><br><span class="line">    extCproductExample.createCriteria().andContractIdEqualTo(id);</span><br><span class="line">    List&lt;ExtCproduct&gt; extCproductList = extCproductDao.selectByExample(extCproductExample);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 查询当前合同下的所有货物</span></span><br><span class="line">    ContractProductExample contractProductExample = <span class="keyword">new</span> ContractProductExample();</span><br><span class="line">    contractProductExample.createCriteria().andContractIdEqualTo(id);</span><br><span class="line">    List&lt;ContractProduct&gt; contractProductList = contractProductDao.selectByExample(contractProductExample);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//========================================附件删除========================================//</span></span><br><span class="line">    <span class="keyword">for</span> (ExtCproduct extCproduct : extCproductList) &#123;</span><br><span class="line">        extCproductDao.deleteByPrimaryKey(extCproduct.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//========================================货物删除========================================//</span></span><br><span class="line">    <span class="keyword">for</span> (ContractProduct contractProduct : contractProductList) &#123;</span><br><span class="line">        contractProductDao.deleteByPrimaryKey(contractProduct.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//========================================合同删除========================================//</span></span><br><span class="line">    contractDao.deleteByPrimaryKey(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="提交-取消合同"><a href="#提交-取消合同" class="headerlink" title="提交/取消合同"></a>提交/取消合同</h2><p>提交和撤销合同的本质是改变合同的状态：</p><ul><li>提交： 0—&gt; 1   草稿—&gt;已上报</li><li>撤销： 1–&gt;0     已上报—&gt;草稿</li></ul><h3 id="ContractController"><a href="#ContractController" class="headerlink" title="ContractController"></a>ContractController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//提交</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/submit"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">submit</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line"><span class="comment">//将合同状态改为1</span></span><br><span class="line">Contract contract = <span class="keyword">new</span> Contract();</span><br><span class="line">contract.setId(id);</span><br><span class="line">contract.setState(<span class="number">1</span>);</span><br><span class="line">contractService.update(contract);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/cargo/contract/list.do"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取消</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/cancel"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">cancel</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line"><span class="comment">//将合同状态改为0</span></span><br><span class="line">Contract contract = <span class="keyword">new</span> Contract();</span><br><span class="line">contract.setId(id);</span><br><span class="line">contract.setState(<span class="number">0</span>);</span><br><span class="line">contractService.update(contract);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/cargo/contract/list.do"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="货物管理"><a href="#货物管理" class="headerlink" title="货物管理"></a>货物管理</h1><h2 id="货物列表"><a href="#货物列表" class="headerlink" title="货物列表"></a>货物列表</h2><p><img data-src="/assets/image-20200710000739332.png" alt="image-20200710000739332"></p><p>在<code>export_manager_web</code>模块的<code>com.itheima.web.controller.cargo</code>下创建<code>ContractProductController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web.controller.cargo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageInfo;</span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.cargo.ContractProductExample;</span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.cargo.Factory;</span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.cargo.FactoryExample;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.cargo.ContractProductService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.cargo.FactoryService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.web.controller.BaseController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/cargo/contractProduct"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContractProductController</span> <span class="keyword">extends</span> <span class="title">BaseController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span></span><br><span class="line">    <span class="keyword">private</span> ContractProductService contractProductService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span></span><br><span class="line">    <span class="keyword">private</span> FactoryService factoryService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/list"</span>, name = <span class="string">"货物列表查询"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @RequestParam(defaultValue = <span class="string">"1"</span>, name = <span class="string">"page"</span>)</span> Integer pageNum,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(defaultValue = <span class="string">"10"</span>)</span> Integer pageSize,</span></span><br><span class="line"><span class="function">            String contractId) </span>&#123;</span><br><span class="line"></span><br><span class="line">        ContractProductExample contractProductExample = <span class="keyword">new</span> ContractProductExample();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1 查询当前合同下的所有货物</span></span><br><span class="line">        ContractProductExample.Criteria criteria = contractProductExample.createCriteria();</span><br><span class="line">        criteria.andCompanyIdEqualTo(getCompanyId());<span class="comment">//企业id</span></span><br><span class="line">        criteria.andContractIdEqualTo(contractId);<span class="comment">//合同id</span></span><br><span class="line"></span><br><span class="line">        PageInfo pageInfo = contractProductService.findByPage(pageNum, pageSize, contractProductExample);</span><br><span class="line">        request.setAttribute(<span class="string">"page"</span>, pageInfo);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2 查询所有生产货物的厂家列表</span></span><br><span class="line">        FactoryExample factoryExample = <span class="keyword">new</span> FactoryExample();</span><br><span class="line">        factoryExample.createCriteria().andCtypeEqualTo(<span class="string">"货物"</span>);</span><br><span class="line">        List&lt;Factory&gt; factoryList = factoryService.findAll(factoryExample);</span><br><span class="line">        request.setAttribute(<span class="string">"factoryList"</span>, factoryList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 回传合同id</span></span><br><span class="line">        request.setAttribute(<span class="string">"contractId"</span>, contractId);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/cargo/product/product-list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//    @RequestMapping(value = "/toAdd", name = "跳转货物新增页面")</span></span><br><span class="line"><span class="comment">//    public String toAdd() &#123;</span></span><br><span class="line"><span class="comment">//        return "/cargo/product/product-add";</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    @RequestMapping(value = "/toUpdate", name = "跳转货物编辑页面")</span></span><br><span class="line"><span class="comment">//    public String toUpdate(String id) &#123;</span></span><br><span class="line"><span class="comment">//        //1. 根据id查询当前货物信息</span></span><br><span class="line"><span class="comment">//        ContractProduct contractProduct = contractProductService.findById(id);</span></span><br><span class="line"><span class="comment">//        request.setAttribute("contractProduct", contractProduct);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //2. 转发到修改页面</span></span><br><span class="line"><span class="comment">//        return "/cargo/product/product-update";</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    @RequestMapping(value = "/edit", name = "货物新增")</span></span><br><span class="line"><span class="comment">//    public String edit(ContractProduct contractProduct) &#123;</span></span><br><span class="line"><span class="comment">//        if (StringUtils.isEmpty(contractProduct.getId())) &#123;</span></span><br><span class="line"><span class="comment">//            //1. 设置主键</span></span><br><span class="line"><span class="comment">//            contractProduct.setId(UUID.randomUUID().toString());</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            //2. 设置企业信息</span></span><br><span class="line"><span class="comment">//            contractProduct.setCompanyId(getCompanyId());</span></span><br><span class="line"><span class="comment">//            contractProduct.setCompanyName(getCompanyName());</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            contractProductService.save(contractProduct);</span></span><br><span class="line"><span class="comment">//        &#125; else &#123;</span></span><br><span class="line"><span class="comment">//            contractProductService.update(contractProduct);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //重定向到list方法</span></span><br><span class="line"><span class="comment">//        return "redirect:/cargo/contractProduct/list.do";</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    @RequestMapping(value = "/delete", name = "货物删除")</span></span><br><span class="line"><span class="comment">//    public String delete(String id) &#123;</span></span><br><span class="line"><span class="comment">//        //调用service删除</span></span><br><span class="line"><span class="comment">//        contractProductService.delete(id);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //重定向到list方法</span></span><br><span class="line"><span class="comment">//        return "redirect:/cargo/contractProduct/list.do";</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="新增货物"><a href="#新增货物" class="headerlink" title="新增货物"></a>新增货物</h2><h3 id="ContractProductController"><a href="#ContractProductController" class="headerlink" title="ContractProductController"></a>ContractProductController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/edit"</span>, name = <span class="string">"货物新增"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">edit</span><span class="params">(ContractProduct contractProduct)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(contractProduct.getId())) &#123;</span><br><span class="line">        <span class="comment">//1. 设置主键</span></span><br><span class="line">        contractProduct.setId(UUID.randomUUID().toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 设置企业信息</span></span><br><span class="line">        contractProduct.setCompanyId(getCompanyId());</span><br><span class="line">        contractProduct.setCompanyName(getCompanyName());</span><br><span class="line"></span><br><span class="line">        contractProductService.save(contractProduct);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        contractProductService.update(contractProduct);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重定向到list方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/cargo/contractProduct/list.do?contractId="</span> + contractProduct.getContractId();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ContractProductServiceImpl"><a href="#ContractProductServiceImpl" class="headerlink" title="ContractProductServiceImpl"></a>ContractProductServiceImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(ContractProduct contractProduct)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//==========================================查询=======================================//</span></span><br><span class="line">    <span class="comment">//查询合同信息(条件是合同id)</span></span><br><span class="line">    Contract contract = contractDao.selectByPrimaryKey(contractProduct.getContractId());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//==========================================附件无影响=======================================//</span></span><br><span class="line">    <span class="comment">//==========================================货物新增=======================================//</span></span><br><span class="line">    <span class="comment">//1. 计算出小计金额  单价  *  数量</span></span><br><span class="line">    Double amount = contractProduct.getPrice() * contractProduct.getCnumber();</span><br><span class="line">    contractProduct.setAmount(amount);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 执行保存</span></span><br><span class="line">    contractProductDao.insertSelective(contractProduct);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//==========================================合同修改=======================================//</span></span><br><span class="line">    <span class="comment">//1. 合同中的货物种数+1</span></span><br><span class="line">    contract.setProNum(contract.getProNum() + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 合同中的总金额 + 货物小计金额</span></span><br><span class="line">    contract.setTotalAmount(contract.getTotalAmount() + amount);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 合同修改</span></span><br><span class="line">    contractDao.updateByPrimaryKeySelective(contract);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改货物"><a href="#修改货物" class="headerlink" title="修改货物"></a>修改货物</h2><p><img data-src="/assets/image-20200710001224863.png" alt="image-20200710001224863"></p><h3 id="跳转修改页面"><a href="#跳转修改页面" class="headerlink" title="跳转修改页面"></a>跳转修改页面</h3><p>修改ContractProductController添加代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/toUpdate"</span>, name = <span class="string">"跳转货物编辑页面"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toUpdate</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1. 根据id查询当前货物信息</span></span><br><span class="line">    ContractProduct contractProduct = contractProductService.findById(id);</span><br><span class="line">    request.setAttribute(<span class="string">"contractProduct"</span>, contractProduct);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 查询所有生产货物的厂家列表</span></span><br><span class="line">    FactoryExample factoryExample = <span class="keyword">new</span> FactoryExample();</span><br><span class="line">    factoryExample.createCriteria().andCtypeEqualTo(<span class="string">"货物"</span>);</span><br><span class="line">    List&lt;Factory&gt; factoryList = factoryService.findAll(factoryExample);</span><br><span class="line">    request.setAttribute(<span class="string">"factoryList"</span>, factoryList);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 转发到修改页面</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"/cargo/product/product-update"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改货物-1"><a href="#修改货物-1" class="headerlink" title="修改货物"></a>修改货物</h3><p>修改ContractProductServiceImpl添加代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(ContractProduct contractProduct)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//==========================================查询=======================================//</span></span><br><span class="line">    <span class="comment">//1. 查询当前货物对应的合同信息</span></span><br><span class="line">    Contract contract = contractDao.selectByPrimaryKey(contractProduct.getContractId());</span><br><span class="line">    <span class="comment">//2. 根据货物id查询原有货物信息</span></span><br><span class="line">    ContractProduct contractProductOld = contractProductDao.selectByPrimaryKey(contractProduct.getId());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//==========================================附件无影响=======================================//</span></span><br><span class="line">    <span class="comment">//==========================================货物修改=======================================//</span></span><br><span class="line">    <span class="comment">//1. 重新计算小计金额  单价 * 数量</span></span><br><span class="line">    Double amount = contractProduct.getPrice() * contractProduct.getCnumber();</span><br><span class="line">    contractProduct.setAmount(amount);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 执行修改</span></span><br><span class="line">    contractProductDao.updateByPrimaryKeySelective(contractProduct);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//==========================================合同修改=======================================//</span></span><br><span class="line">    <span class="comment">//1. 修改总金额  =  原总金额  - 货物原有小计 + 现有小计</span></span><br><span class="line">    contract.setTotalAmount(contract.getTotalAmount() - contractProductOld.getAmount() + amount);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 执行修改</span></span><br><span class="line">    contractDao.updateByPrimaryKeySelective(contract);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除货物"><a href="#删除货物" class="headerlink" title="删除货物"></a>删除货物</h2><p><img data-src="/assets/image-20200710001434201.png" alt="image-20200710001434201"> </p><h3 id="ContractProductController-1"><a href="#ContractProductController-1" class="headerlink" title="ContractProductController"></a>ContractProductController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/delete"</span>, name = <span class="string">"货物删除"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(String id, String contractId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//调用service删除</span></span><br><span class="line">    contractProductService.delete(id);<span class="comment">//货物id</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//重定向到list方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/cargo/contractProduct/list.do?contractId="</span> + contractId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ContractProductServiceImpl-1"><a href="#ContractProductServiceImpl-1" class="headerlink" title="ContractProductServiceImpl"></a>ContractProductServiceImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//条件是货物id</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//==========================================查询=======================================//</span></span><br><span class="line">    <span class="comment">//1. 获取当前货物下所有的附件信息(条件是货物id)</span></span><br><span class="line">    ExtCproductExample extCproductExample = <span class="keyword">new</span> ExtCproductExample();</span><br><span class="line">    extCproductExample.createCriteria().andContractProductIdEqualTo(id);</span><br><span class="line">    List&lt;ExtCproduct&gt; extCproductList = extCproductDao.selectByExample(extCproductExample);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 根据id查询货物的信息</span></span><br><span class="line">    ContractProduct contractProduct = contractProductDao.selectByPrimaryKey(id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 根据货物种的合同id查询合同信息</span></span><br><span class="line">    Contract contract = contractDao.selectByPrimaryKey(contractProduct.getContractId());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//==========================================附件删除=======================================//</span></span><br><span class="line">    <span class="comment">//遍历删除</span></span><br><span class="line">    <span class="keyword">for</span> (ExtCproduct extCproduct : extCproductList) &#123;</span><br><span class="line">        extCproductDao.deleteByPrimaryKey(extCproduct.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//==========================================货物删除=======================================//</span></span><br><span class="line">    <span class="comment">//主键删除</span></span><br><span class="line">    contractProductDao.deleteByPrimaryKey(id);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//==========================================合同修改=======================================//</span></span><br><span class="line">    <span class="comment">//1. 调整合同中的货物种数 - 1</span></span><br><span class="line">    contract.setProNum(contract.getProNum() - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 调整合同中的附件种数 -extCproductList.size()</span></span><br><span class="line">    contract.setExtNum(contract.getExtNum() - extCproductList.size());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3 .调整合同总金额 - (货物金额 + 所有附件金额)</span></span><br><span class="line">    <span class="keyword">double</span> amount = <span class="number">0</span>d;</span><br><span class="line"></span><br><span class="line">    amount += contractProduct.getAmount();<span class="comment">//货物金额</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (ExtCproduct extCproduct : extCproductList) &#123;</span><br><span class="line">        amount += extCproduct.getAmount();</span><br><span class="line">    &#125;</span><br><span class="line">    contract.setTotalAmount(contract.getTotalAmount() - amount);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4 执行修改</span></span><br><span class="line">    contractDao.updateByPrimaryKeySelective(contract);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="七牛云存储"><a href="#七牛云存储" class="headerlink" title="七牛云存储"></a>七牛云存储</h1><p>添加货物和附件时需要上传图片，图片我们上传到一个第三方的托管服务器，本项目我们使用七牛云存储</p><h2 id="账户申请"><a href="#账户申请" class="headerlink" title="账户申请"></a>账户申请</h2><h3 id="注册账户"><a href="#注册账户" class="headerlink" title="注册账户"></a>注册账户</h3><p> <img data-src="/assets/clip_image010.jpg" alt=""></p><h3 id="激活账号"><a href="#激活账号" class="headerlink" title="激活账号"></a>激活账号</h3><p><img data-src="/assets/clip_image012.jpg" alt=""> </p><h3 id="实名认证"><a href="#实名认证" class="headerlink" title="实名认证"></a>实名认证</h3><p>实名认证需要准备好身份证正反面照片和支付宝账号</p><p><img data-src="/assets/image-20200705083657277.png" alt="a"></p><p><img data-src="/assets/image-20200705083731580.png" alt="a"> </p><p> <img data-src="/assets/image-20200705083813313.png" alt="image-20200705083813313"></p><h2 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h2><h3 id="创建空间"><a href="#创建空间" class="headerlink" title="创建空间"></a>创建空间</h3><p>操作步骤:</p><ol><li>点击云产品的对象存储, 进入新建空间的页面</li><li>创建一个空间, 名字自定义 ,其它按照图上来</li><li>域名暂时不用绑定, 七牛云会默认分派一个(有效期30天)</li></ol><p><img data-src="/assets/image-20200705085409851.png" alt="image-20200705085409851"></p><h3 id="查找秘钥"><a href="#查找秘钥" class="headerlink" title="查找秘钥"></a>查找秘钥</h3><p>操作步骤:</p><ol><li>点击小头像, 选择秘钥管理, 进入秘钥管理页面</li><li>点击显示, 就可以查看到秘钥, 然后将其记录下来, 备用</li></ol><p><img data-src="/assets/image-20200705090217462.png" alt="image-20200705090217462"></p><h3 id="开发文档"><a href="#开发文档" class="headerlink" title="开发文档"></a>开发文档</h3><p><a href="https://developer.qiniu.com/kodo/sdk/1239/java" target="_blank" rel="noopener">https://developer.qiniu.com/kodo/sdk/1239/java</a></p><h2 id="文件上传案例"><a href="#文件上传案例" class="headerlink" title="文件上传案例"></a>文件上传案例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.common.QiniuException;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.http.Response;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.storage.Configuration;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.storage.Region;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.storage.UploadManager;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.storage.model.DefaultPutRet;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.util.Auth;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QiniuDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//指定region2  华南地区</span></span><br><span class="line">        Configuration cfg = <span class="keyword">new</span> Configuration(Region.region2());</span><br><span class="line">        UploadManager uploadManager = <span class="keyword">new</span> UploadManager(cfg);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//填写自己的信息</span></span><br><span class="line">        String accessKey = <span class="string">"xxx"</span>;</span><br><span class="line">        String secretKey = <span class="string">"xxx"</span>;</span><br><span class="line">        String bucket = <span class="string">"xxx"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//准备一张图片</span></span><br><span class="line">        String localFilePath = <span class="string">"c:/upload/kn.jpg"</span>;</span><br><span class="line"></span><br><span class="line">        String key = <span class="keyword">null</span>;</span><br><span class="line">        Auth auth = Auth.create(accessKey, secretKey);</span><br><span class="line">        String upToken = auth.uploadToken(bucket);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Response response = uploadManager.put(localFilePath, key, upToken);</span><br><span class="line">            <span class="comment">//解析上传成功的结果</span></span><br><span class="line">            DefaultPutRet putRet = <span class="keyword">new</span> Gson().fromJson(response.bodyString(), DefaultPutRet<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            System.out.println(putRet.key);</span><br><span class="line">            System.out.println(putRet.hash);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (QiniuException ex) &#123;</span><br><span class="line">            Response r = ex.response;</span><br><span class="line">            System.err.println(r.toString());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.err.println(r.bodyString());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (QiniuException ex2) &#123;</span><br><span class="line">                ex2.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Mybatis逆向工程&quot;&gt;&lt;a href=&quot;#Mybatis逆向工程&quot; class=&quot;headerlink&quot; title=&quot;Mybatis逆向工程&quot;&gt;&lt;/a&gt;Mybatis逆向工程&lt;/h1&gt;&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;Mybatis是目前非常流行的持久层框架，其逆向工程更是大大缩减了我们的开发时间。&lt;/p&gt;
&lt;p&gt;所谓mybatis逆向工程，就是Mybatis会根据我们设计好的数据表，自动生成&lt;strong&gt;domain（实体）&lt;/strong&gt;、&lt;strong&gt;mapper（接口）&lt;/strong&gt;以及&lt;strong&gt;mapper.xml（映射）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;而且会在文件中给我们生成单表增删改查的方法和sql&lt;/p&gt;
&lt;p&gt;官网地址：&lt;a href=&quot;https://mybatis.org/generator/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mybatis.org/generator/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&quot;/assets/image-20200704085155163.png&quot; alt=&quot;image-20200704085155163&quot;&gt; &lt;/p&gt;
    
    </summary>
    
    
      <category term="Mybatis" scheme="http://sunmoon.com/categories/Mybatis/"/>
    
    
      <category term="逆向工程" scheme="http://sunmoon.com/tags/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="七牛云存储" scheme="http://sunmoon.com/tags/%E4%B8%83%E7%89%9B%E4%BA%91%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper</title>
    <link href="http://sunmoon.com/2020/10/14/Zookeeper/"/>
    <id>http://sunmoon.com/2020/10/14/Zookeeper/</id>
    <published>2020-10-14T08:41:33.000Z</published>
    <updated>2020-10-14T08:46:37.540Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Zookeeper介绍"><a href="#Zookeeper介绍" class="headerlink" title="Zookeeper介绍"></a>Zookeeper介绍</h1><p>ZooKeeper是一个分布式服务<strong>协调</strong>框架，主要用来解决分布式应用中的一些数据管理问题，如：统一命名服务、状态同步服务、应用配置项的管理等等。</p><p>ZooKeeper由雅虎研究院开发，是Google Chubby的开源实现，后来托管到Apache，于2010年11月正式成为Apache的顶级项目。</p><p>在大数据生态系统里，很多组件的命名都是某种动物，比如hadoop就是🐘，hive就是🐝。Zookeeper的作用是用来对这些组件进行管理，即动物园管理者。</p><p>官方网址：<a href="https://zookeeper.apache.org/" target="_blank" rel="noopener">https://zookeeper.apache.org/</a></p><a id="more"></a><h1 id="Zookeeper安装"><a href="#Zookeeper安装" class="headerlink" title="Zookeeper安装"></a>Zookeeper安装</h1><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>将资料中的zookeeper-3.4.6.zip复制到一个没有中文，没有空格的目录，然后解压，即可得到zookeeper的软件</p><p><img data-src="/assets/image-20201011162905155.png" alt="image-20201011162905155"> </p><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><ol><li>进入到zookeeper的配置目录，复制<code>zoo_sample.cfg</code>为<code>zoo.cfg</code></li><li>编辑<code>zoo.cfg</code>文件，修改<code>dataDir</code>的值为<code>安装目录\\data</code>这是zookeeper存储数据的位置</li></ol><p><img data-src="/assets/image-20201011165117802.png" alt="image-20201011165117802"></p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>进入安装路径的bin目录，双击zkServer.cmd即可启动zookeeper服务</p><p><img data-src="/assets/image-20201011165353665.png" alt="image-20201011165353665"> </p><h2 id="命令行客户端"><a href="#命令行客户端" class="headerlink" title="命令行客户端"></a>命令行客户端</h2><ol><li>进入安装路径的bin目录，双击zkCli.cmd即可启动zookeeper命令行客户端</li><li>在客户端中输入<code>create /data &quot;ceshi&quot;</code>，没有报错，代表客户端可以成功操作服务器 </li></ol><p><img data-src="/assets/image-20201011165933305.png" alt="image-20201011165933305"> </p><h2 id="UI界面客户端"><a href="#UI界面客户端" class="headerlink" title="UI界面客户端"></a>UI界面客户端</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>将资料中的ZooInspector.zip复制到一个没有中文，没有空格的目录，然后解压，即可得到ZooInspector的软件</p><p><img data-src="/assets/image-20201011170501940.png" alt="image-20201011170501940"> </p><h3 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h3><p>在安装软件的build目录下，执行<code>java -jar zookeeper-dev-ZooInspector.jar</code>命令，即可启动软件的界面</p><p><img data-src="/assets/image-20201011170920874.png" alt="image-20201011170920874"> </p><h3 id="连接服务"><a href="#连接服务" class="headerlink" title="连接服务"></a>连接服务</h3><ol><li>点击连接按钮，输入zk的服务地址，点击OK连接</li><li>连接成功之后可以点击data查看节点存储的信息</li></ol><p><img data-src="/assets/image-20201011171243332.png" alt="image-20201011171243332"> </p><h1 id="Zookeeper数据结构"><a href="#Zookeeper数据结构" class="headerlink" title="Zookeeper数据结构"></a>Zookeeper数据结构</h1><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>Zookeeper的数据节点可以视为树状（或者目录）结构，树中的各节点被称为znode（即zookeeper node），一个znode可以有多个子节点。</p><p>Zookeeper节点在结构上表现为树状，使用路径path来定位某个znode，比如<code>/itcast/bj/java</code>，此处itcast、bj、java分别是根节点、2级节点、3级节点</p><p>znode兼具文件和目录两种特点。既像文件一样维护着数据、元信息、ACL、时间戳等数据结构，又可以像目录一样挂载子目录。</p><p>==znode特点: 像目录一样可以存储子节点,想文件一样可以存储数据信息==</p><p><img data-src="/assets/image-20201011172541673.png" alt="image-20201011172541673"> </p><p>一个znode大体上分为3各部分：</p><ol><li><p>data：节点的数据</p></li><li><p>children：节点的子节点</p></li><li><p>stat：节点的状态，用来描述当前节点的创建、修改记录等</p></li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在zookeeper shell中使用get命令查看指定路径节点的data、stat信息：</span></span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">5</span>] get  /itcast/bj</span><br><span class="line">bjdata</span><br><span class="line">cZxid = <span class="number">0</span>x17</span><br><span class="line">ctime = Sun Oct <span class="number">11</span> <span class="number">17</span>:<span class="number">24</span>:<span class="number">37</span> CST <span class="number">2020</span></span><br><span class="line">mZxid = <span class="number">0</span>x17</span><br><span class="line">mtime = Sun Oct <span class="number">11</span> <span class="number">17</span>:<span class="number">24</span>:<span class="number">37</span> CST <span class="number">2020</span></span><br><span class="line">pZxid = <span class="number">0</span>x1b </span><br><span class="line">cversion = <span class="number">1</span></span><br><span class="line">dataVersion = <span class="number">0</span></span><br><span class="line">aclVersion = <span class="number">0</span></span><br><span class="line">ephemeralOwner = <span class="number">0</span>x0</span><br><span class="line">dataLength = <span class="number">6</span></span><br><span class="line">numChildren = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cZxid：数据节点创建时的事务 ID</span></span><br><span class="line"><span class="comment"># ctime：数据节点创建时的时间</span></span><br><span class="line"><span class="comment"># mZxid：数据节点最后一次更新时的事务 ID</span></span><br><span class="line"><span class="comment"># mtime：数据节点最后一次更新时的时间</span></span><br><span class="line"><span class="comment"># pZxid：数据节点的子节点最后一次被修改时的事务 ID</span></span><br><span class="line"><span class="comment"># cversion：子节点的更改次数</span></span><br><span class="line"><span class="comment"># dataVersion：节点数据的更改次数</span></span><br><span class="line"><span class="comment"># aclVersion: 权限的更改次数</span></span><br><span class="line"><span class="comment"># ephemeralOwner: 持久节点还是临时节点</span></span><br><span class="line"><span class="comment"># dataLength：数据内容的长度</span></span><br><span class="line"><span class="comment"># numChildren：数据节点当前的子节点个数</span></span><br><span class="line"></span><br><span class="line">最多</span><br><span class="line"><span class="comment"># cZxid：数据节点创建时的事务ID</span></span><br><span class="line"><span class="comment"># dataVersion：节点数据的更改次数</span></span><br></pre></td></tr></table></figure><h2 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h2><p>对于Zookeeper中的节点，有两种分类方式，一种是按照节点是否持久化，一种是按照节点是否有顺序进行分类。</p><blockquote><p>按照节点是否持久化分类，可以分别为临时节点和永久节点</p></blockquote><ul><li><p><strong>临时节点</strong>：该节点的生命周期依赖于创建它们的会话。一旦会话(Session)结束，临时节点将被自动删除，当然可以也可以手动删除</p><p>  虽然每个临时的Znode都会绑定到一个客户端会话，但他们对所有的客户端还是可见的。另外，ZooKeeper的临时节点不允许拥有子节点</p></li><li><p><strong>持久化节点</strong>(默认)：该节点的生命周期不依赖于会话，并且只有在客户端显示执行删除操作的时候，他们才能被删除</p></li></ul><blockquote><p>按照节点是否有顺序进行分类，可以分别为有序节点和无序节点</p></blockquote><ul><li><strong>有序节点</strong>：每个节点都会为它的一级子节点维护一个顺序</li><li><strong>无序节点</strong>(默认)：节点不会为子节点维护顺序</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>节点类型</span><br><span class="line"><span class="code">持久化无序节点 ：节点创建后会一直存在zookeeper服务器上，直到主动删除</span></span><br><span class="line"><span class="code">持久化有序节点 ：在持久化无序节点的基础上,为每个节点都会为它的一级子节点维护一个顺序</span></span><br><span class="line"><span class="code">临时无序节点 ： 临时节点的生命周期和客户端的会话保持一致，当客户端会话失效，该节点自动清理</span></span><br><span class="line"><span class="code">临时有序节点 ： 在临时节点上多了一个顺序性特性</span></span><br></pre></td></tr></table></figure><h1 id="Zookeeper常见命令"><a href="#Zookeeper常见命令" class="headerlink" title="Zookeeper常见命令"></a>Zookeeper常见命令</h1><h2 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h2><blockquote><p> create [-s] [-e] path data  [默认情况下持久化无序节点]</p> <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">path：节点名称 (完整绝对路径, 不能缺少层数)</span><br><span class="line">data：节点数据</span><br><span class="line">-s：有序节点</span><br><span class="line">-e：临时节点</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1）创建 /node节点</span></span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">14</span>] create /node node</span><br><span class="line">Created /node</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2）创建 /node/data1节点(无序持久节点)</span></span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">15</span>] create /node/<span class="keyword">data</span>1 <span class="keyword">data</span></span><br><span class="line">Created /node/<span class="keyword">data</span>1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3）创建 /node/data2节点(无序临时节点)</span></span><br><span class="line"><span class="comment"># 注意: 一旦创建此节点的连接断开(命令行退出)，节点会自动删除</span></span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">16</span>] create <span class="literal">-e</span> /node/<span class="keyword">data</span>2 <span class="keyword">data</span></span><br><span class="line">Created /node/<span class="keyword">data</span>2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4) 创建 /node/data3节点(有序持久节点)</span></span><br><span class="line"><span class="comment"># 注意: 此类节点创建出来后会在节点名称后面自动跟随一串递增的数字</span></span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">0</span>] create <span class="literal">-s</span> /node/<span class="keyword">data</span>3 <span class="keyword">data</span></span><br><span class="line">Created /node/<span class="keyword">data</span>30000000002</span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">1</span>] create <span class="literal">-s</span> /node/<span class="keyword">data</span>3 <span class="keyword">data</span></span><br><span class="line">Created /node/<span class="keyword">data</span>30000000003</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4) 创建 /node/data4节点(有序临时节点)</span></span><br><span class="line"><span class="comment"># 注意: 此类节点创建出来后会在节点名称后面自动跟随一串递增的数字</span></span><br><span class="line"><span class="comment">#      一旦创建此节点的连接断开(命令行退出)，节点会自动删除</span></span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">10</span>] create <span class="literal">-s</span> <span class="literal">-e</span> /node/<span class="keyword">data</span>4 <span class="keyword">data</span></span><br><span class="line">Created /node/<span class="keyword">data</span>40000000006</span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">11</span>] create <span class="literal">-s</span> <span class="literal">-e</span> /node/<span class="keyword">data</span>4 <span class="keyword">data</span></span><br><span class="line">Created /node/<span class="keyword">data</span>40000000007</span><br></pre></td></tr></table></figure><h2 id="查看节点"><a href="#查看节点" class="headerlink" title="查看节点"></a>查看节点</h2><h3 id="查看节点信息"><a href="#查看节点信息" class="headerlink" title="查看节点信息"></a>查看节点信息</h3><blockquote><p>get path : 获取节点的状态信息和数据信息</p><p>stat  path : 获取节点的状态信息</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">3</span>] get /node/<span class="keyword">data</span>1</span><br><span class="line"><span class="keyword">data</span> <span class="comment"># 节点数据</span></span><br><span class="line">cZxid = <span class="number">0</span>x21   <span class="comment"># 数据节点创建时的事务ID</span></span><br><span class="line">ctime = Sun Oct <span class="number">11</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">27</span> CST <span class="number">2020</span>  <span class="comment"># 数据节点创建时的时间</span></span><br><span class="line">mZxid = <span class="number">0</span>x21   <span class="comment"># 数据节点最后一次更新时的事务ID</span></span><br><span class="line">mtime = Sun Oct <span class="number">11</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">27</span> CST <span class="number">2020</span>  <span class="comment"># 数据节点最后一次更新时的时间</span></span><br><span class="line">pZxid = <span class="number">0</span>x21 <span class="comment"># 数据节点的子节点最后一次被修改时的事务ID</span></span><br><span class="line">cversion = <span class="number">0</span> <span class="comment"># 子节点的更改次数</span></span><br><span class="line">dataVersion = <span class="number">0</span> <span class="comment"># 节点数据的更改次数</span></span><br><span class="line">aclVersion = <span class="number">0</span>  <span class="comment"># 权限的更改次数</span></span><br><span class="line">ephemeralOwner = <span class="number">0</span>x0 <span class="comment"># 如果节点为临时节点，那么它的值为这个节点拥有者的sessionID；如果该节点不是临时节点， 值为0</span></span><br><span class="line">dataLength = <span class="number">4</span> <span class="comment"># 数据内容的长度</span></span><br><span class="line">numChildren = <span class="number">0</span> <span class="comment"># 数据节点当前的子节点个数</span></span><br></pre></td></tr></table></figure><h3 id="查看节点列表"><a href="#查看节点列表" class="headerlink" title="查看节点列表"></a>查看节点列表</h3><blockquote><p>ls   path:  查看指定节点的子节点列表</p><p>ls2 path:  查看指定节点的信息以及子节点列表</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1) ls</span></span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">17</span>] ls /</span><br><span class="line">[<span class="type">node</span>， <span class="type">zookeeper</span>， <span class="type">data</span>， <span class="type">itcast</span>]</span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">18</span>] ls /node</span><br><span class="line">[<span class="type">data30000000003</span>， <span class="type">data30000000004</span>， <span class="type">data30000000002</span>， <span class="type">data2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#２）ls2</span></span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">19</span>] ls2 /</span><br><span class="line">[<span class="type">node</span>， <span class="type">zookeeper</span>， <span class="type">data</span>， <span class="type">itcast</span>]</span><br><span class="line">cZxid = <span class="number">0</span>x0</span><br><span class="line">ctime = Thu Jan <span class="number">01</span> <span class="number">08</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1970</span></span><br><span class="line">mZxid = <span class="number">0</span>x0</span><br><span class="line">mtime = Thu Jan <span class="number">01</span> <span class="number">08</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1970</span></span><br><span class="line">pZxid = <span class="number">0</span>x3c</span><br><span class="line">cversion = <span class="number">14</span></span><br><span class="line">dataVersion = <span class="number">0</span></span><br><span class="line">aclVersion = <span class="number">0</span></span><br><span class="line">ephemeralOwner = <span class="number">0</span>x0</span><br><span class="line">dataLength = <span class="number">0</span></span><br><span class="line">numChildren = <span class="number">4</span></span><br></pre></td></tr></table></figure><h2 id="修改节点"><a href="#修改节点" class="headerlink" title="修改节点"></a>修改节点</h2><blockquote><p>set path data [version]</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1) set path data 直接使用set命令对指定节点内容进行修改</span></span><br><span class="line"><span class="comment"># 注意: 在修改的时候，除了数据内容变化之外，还有一个关键属性变化了  </span></span><br><span class="line"><span class="comment"># dataVersion = 1 指的是数据版本，每次数据被修改，版本自动加1</span></span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">9</span>] set /node/<span class="keyword">data</span>1 mydata</span><br><span class="line">cZxid = <span class="number">0</span>x21</span><br><span class="line">ctime = Sun Oct <span class="number">11</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">27</span> CST <span class="number">2020</span></span><br><span class="line">mZxid = <span class="number">0</span>x40</span><br><span class="line">mtime = Sun Oct <span class="number">11</span> <span class="number">23</span>:<span class="number">26</span>:<span class="number">43</span> CST <span class="number">2020</span></span><br><span class="line">pZxid = <span class="number">0</span>x21</span><br><span class="line">cversion = <span class="number">0</span></span><br><span class="line">dataVersion = <span class="number">1</span></span><br><span class="line">aclVersion = <span class="number">0</span></span><br><span class="line">ephemeralOwner = <span class="number">0</span>x0</span><br><span class="line">dataLength = <span class="number">6</span></span><br><span class="line">numChildren = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2) set path data version 基于版本号对指定节点内容进行修改</span></span><br><span class="line"><span class="comment"># 即修改数据的时候，要传入要修改数据的版本号， 如果传入的版本号和当前的版本号不符合时，zookeeper会拒绝本次修改</span></span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">10</span>] set /node/<span class="keyword">data</span>1 mydatadata <span class="number">0</span></span><br><span class="line">version No is not valid : /node/<span class="keyword">data</span>1</span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">11</span>] set /node/<span class="keyword">data</span>1 mydatadata <span class="number">1</span></span><br><span class="line">cZxid = <span class="number">0</span>x21</span><br><span class="line">ctime = Sun Oct <span class="number">11</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">27</span> CST <span class="number">2020</span></span><br><span class="line">mZxid = <span class="number">0</span>x42</span><br><span class="line">mtime = Sun Oct <span class="number">11</span> <span class="number">23</span>:<span class="number">32</span>:<span class="number">17</span> CST <span class="number">2020</span></span><br><span class="line">pZxid = <span class="number">0</span>x21</span><br><span class="line">cversion = <span class="number">0</span></span><br><span class="line">dataVersion = <span class="number">2</span></span><br><span class="line">aclVersion = <span class="number">0</span></span><br><span class="line">ephemeralOwner = <span class="number">0</span>x0</span><br><span class="line">dataLength = <span class="number">10</span></span><br><span class="line">numChildren = <span class="number">0</span></span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">12</span>]</span><br></pre></td></tr></table></figure><h2 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h2><blockquote><p>delete path [version]    删除没有子节点的node</p><p>rmr path  遍历删除</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1) delete path 使用delete命令删除指定节点</span></span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">13</span>] delete /node/<span class="keyword">data</span>30000000003</span><br><span class="line"></span><br><span class="line"><span class="comment">#2) delete path version 基于版本号删除指定节点</span></span><br><span class="line"><span class="comment">#   即删除节点的时候，要传入要删除节点的版本号， 如果传入的版本号和当前的版本号不符合时，zookeeper会拒绝本次删除</span></span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">14</span>] delete /node/<span class="keyword">data</span>1 <span class="number">1</span></span><br><span class="line">version No is not valid : /node/<span class="keyword">data</span>1</span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">14</span>] delete /node/<span class="keyword">data</span>1 <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3) rmr path 遍历删除</span></span><br><span class="line"><span class="comment"># 删除非空节点(含有子节点)失败</span></span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">5</span>] delete /a</span><br><span class="line">Node not empty: /a</span><br><span class="line"><span class="comment"># 遍历删除</span></span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">6</span>] rmr /a</span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">7</span>]</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">创建节点</span><br><span class="line">   create  path   data</span><br><span class="line">   -s   顺序节点    </span><br><span class="line">   -e   临时节点</span><br><span class="line">   get   path     节点信息和状态</span><br><span class="line">   stat  path     状态</span><br><span class="line">   </span><br><span class="line">   ls   ls2       查看子节点</span><br><span class="line">   </span><br><span class="line">   set  path  data  [version]</span><br><span class="line">   delete  path [version]</span><br><span class="line">   rmr  遍历删除</span><br><span class="line">   </span><br><span class="line">监听:   </span><br><span class="line">  ls ls2  path  watch</span><br><span class="line">  get stat   path  watch</span><br></pre></td></tr></table></figure><h2 id="监听节点"><a href="#监听节点" class="headerlink" title="监听节点"></a>监听节点</h2><blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&gt;* 在zookeeper中还支持一种watch（监听）机制，它允许对zookeeper注册监听，当监听的对象发生指定的事件的时候，zookeeper就会返回一个通知。</span><br><span class="line">&gt;* 它可以监听事件类型包含下面这些:</span><br><span class="line">  None(-1):客户端和服务端连接状态发生变化</span><br><span class="line">  </span><br><span class="line">  NodeCreated(1):创建节点</span><br><span class="line">  NodeDeleted(2):删除节点</span><br><span class="line">  NodeDataChanged(3):节点数据发生变化,注意即使变更前后的数据内容完全一样也会触发该事件,或者理解成该事件的触发条件是Znode的版本号变更</span><br><span class="line">  NodeChildrenChanged(4):子节点发生变化(创建\删除\数据变更)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&gt;* 其中连接状态分为下面这些</span><br><span class="line">  Disconnected(0):断开</span><br><span class="line">  SyncConnected(3):建立连接,并且完成一次version、zxid同步</span><br><span class="line">  AuthFailed(4):授权失败</span><br><span class="line">  ConnectedReadOnly(5):只读连接</span><br><span class="line">  Expired(-112):会话超时</span><br><span class="line"></span><br><span class="line">&gt;* Zookeeper的事件监听机制有以下特性：</span><br><span class="line">1.当监听器监听的事件被触发,服务端会发送通知给客户端,但通知信息中不包括事件的具体内容。</span><br><span class="line">  以监听ZNode结点数据变化为例,当Znode的数据被改变,客户端会收到事件类型为NodeDataChanged的通知,</span><br><span class="line">  但该Znode的数据改变成了什么客户端无法从通知中获取,需要客户端在收到通知后手动去获取。</span><br><span class="line">2.Watcher是一次性的。一旦被触发将会失效。如果需要反复进行监听就需要反复进行注册。</span><br><span class="line"></span><br><span class="line">这么设计是为了减轻服务端的压力,但是对开发者而言却是相当不友好,不过不用着急,可以通过一些Zookeeper的开源客户端轻松实现对某一事件的永久监听。</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;get path watch：    注册的监听器能够在监听节点的<span class="code">`内容发生改变`</span>的时候，向客户端发出通知</span><br><span class="line">&gt;stat path watch：   注册的监听器能够在监听节点的<span class="code">`状态发生改变`</span>的时候，向客户端发出通知</span><br><span class="line">&gt;ls/ls2 path watch： 注册的监听器能够在监听节点的<span class="code">`子节点新增和删除`</span>的时候，向客户端发出通知</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意: 下面的操作，需要使用两个客户端来完成，一个负责注册监听，令一个负责修改</span></span><br><span class="line"><span class="comment"># 1) 创建/node/data5</span></span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">23</span>] create /node/<span class="keyword">data</span>5 <span class="keyword">data</span></span><br><span class="line">Created /node/<span class="keyword">data</span>5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2) 对/node/data5注册get(内容)监听</span></span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">24</span>] get /node/<span class="keyword">data</span>5 watch</span><br><span class="line"><span class="keyword">data</span></span><br><span class="line">cZxid = <span class="number">0</span>x46</span><br><span class="line">ctime = Mon Oct <span class="number">12</span> <span class="number">00</span>:<span class="number">20</span>:<span class="number">37</span> CST <span class="number">2020</span></span><br><span class="line">mZxid = <span class="number">0</span>x46</span><br><span class="line">mtime = Mon Oct <span class="number">12</span> <span class="number">00</span>:<span class="number">20</span>:<span class="number">37</span> CST <span class="number">2020</span></span><br><span class="line">pZxid = <span class="number">0</span>x46</span><br><span class="line">cversion = <span class="number">0</span></span><br><span class="line">dataVersion = <span class="number">0</span></span><br><span class="line">aclVersion = <span class="number">0</span></span><br><span class="line">ephemeralOwner = <span class="number">0</span>x0</span><br><span class="line">dataLength = <span class="number">4</span></span><br><span class="line">numChildren = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3) 此处，新开一个客户端，去修改掉/node/data5的内容: set /node/data5 mydata</span></span><br><span class="line"><span class="comment"># 4) 然后就会发现控制台返回了一个NodeDataChanged(节点数据变化)的通知</span></span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">25</span>]</span><br><span class="line">WATCHER::</span><br><span class="line"></span><br><span class="line">WatchedEvent state:SyncConnected type:NodeDataChanged path:/node/<span class="keyword">data</span>5</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1) 对/node/data5注册stat(状态)监听</span></span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">25</span>] stat /node/<span class="keyword">data</span>5 watch</span><br><span class="line">cZxid = <span class="number">0</span>x46</span><br><span class="line">ctime = Mon Oct <span class="number">12</span> <span class="number">00</span>:<span class="number">20</span>:<span class="number">37</span> CST <span class="number">2020</span></span><br><span class="line">mZxid = <span class="number">0</span>x49</span><br><span class="line">mtime = Mon Oct <span class="number">12</span> <span class="number">00</span>:<span class="number">21</span>:<span class="number">57</span> CST <span class="number">2020</span></span><br><span class="line">pZxid = <span class="number">0</span>x46</span><br><span class="line">cversion = <span class="number">0</span></span><br><span class="line">dataVersion = <span class="number">2</span></span><br><span class="line">aclVersion = <span class="number">0</span></span><br><span class="line">ephemeralOwner = <span class="number">0</span>x0</span><br><span class="line">dataLength = <span class="number">7</span></span><br><span class="line">numChildren = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2) 此处，新开一个客户端，去修改掉/node/data5的内容: set /node/data5 mydata2</span></span><br><span class="line"><span class="comment"># 3) 然后就会发现控制台返回了一个NodeDataChanged(节点数据变化)的通知</span></span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">26</span>]</span><br><span class="line">WATCHER::</span><br><span class="line"></span><br><span class="line">WatchedEvent state:SyncConnected type:NodeDataChanged path:/node/<span class="keyword">data</span>5</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1) 对/node/data5注册ls(子节点新增或者删除)监听</span></span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">26</span>] ls /node/<span class="keyword">data</span>5 watch</span><br><span class="line">[]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2) 此处，新开一个客户端，去添加掉/node/data5的子节点: set /node/data5/test test</span></span><br><span class="line"><span class="comment"># 3) 然后就会发现控制台返回了一个NodeChildrenChanged(子节点变化)的通知</span></span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">27</span>]</span><br><span class="line">WATCHER::</span><br><span class="line"></span><br><span class="line">WatchedEvent state:SyncConnected type:NodeChildrenChanged path:/node/<span class="keyword">data</span>5</span><br></pre></td></tr></table></figure><h1 id="Java操作Zookeeper"><a href="#Java操作Zookeeper" class="headerlink" title="Java操作Zookeeper"></a>Java操作Zookeeper</h1><blockquote><p>原生API：Java API位于org.apache.ZooKeeper包中。</p><p>ZkClient（不推荐）：Github上一个开源的ZooKeeper客户端，在源生 api 基础之上进行扩展的开源 JAVA 客户端。</p><p>Apache Curator（推荐使用）：最初是Netfix研发的，后来捐献了Apache基金会，目前是Apache的顶级项目。</p></blockquote><h2 id="环境导入"><a href="#环境导入" class="headerlink" title="环境导入"></a>环境导入</h2><p><img data-src="/assets/image-20201014104442293.png" alt="image-20201014104442293"> </p><h2 id="连接ZK"><a href="#连接ZK" class="headerlink" title="连接ZK"></a>连接ZK</h2><blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;ZK重试策略：</span><br><span class="line">RetryUntilElapsed: 一直重试直到规定的时间，以指定时长的间隔重连,直到超过最大连接时长的时间设置</span><br><span class="line">RetryOneTime:  重连一次</span><br><span class="line">RetryNTimes:  以指定时长的间隔重连，重试重连次数</span><br><span class="line">ExponentialBackoffRetry：衰减重试，随着重试次数的增加，间隔时间也会越来越大。</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//连接ZK</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CuratorFramework <span class="title">getClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.设置重试策略</span></span><br><span class="line">    RetryPolicy retryPolicy = <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">1000</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="comment">//2.创建客户端</span></span><br><span class="line">    CuratorFramework client = CuratorFrameworkFactory.newClient(<span class="string">"127.0.0.1:2181"</span>, <span class="number">3000</span>, <span class="number">1000</span>, retryPolicy);</span><br><span class="line">    <span class="comment">//3.启动客户端</span></span><br><span class="line">    client.start();</span><br><span class="line">    <span class="comment">//4.返回客户端连接</span></span><br><span class="line">    <span class="keyword">return</span> client;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建节点</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreateNodes</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       String path = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//1. 创建一个空节点a, 值默认为请求端ip</span></span><br><span class="line">       <span class="comment">//path = getClient().create().forPath("/a");</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//2. 创建一个有内容的b节点</span></span><br><span class="line">       <span class="comment">//path = getClient().create().forPath("/b", "data".getBytes());</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//3. 创建多层节点</span></span><br><span class="line">       <span class="comment">//creatingParentsIfNeeded() 递归创建父目录</span></span><br><span class="line">       <span class="comment">//withMode() 创建模式</span></span><br><span class="line">       <span class="comment">//path = getClient().create().creatingParentsIfNeeded().withMode(CreateMode.PERSISTENT).forPath("/c/c1/c2", "data".getBytes());</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//4. 创建带有的序号的节点</span></span><br><span class="line">       <span class="comment">//path = getClient().create().creatingParentsIfNeeded().withMode(CreateMode.PERSISTENT_SEQUENTIAL).forPath("/d");</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//5. 创建临时节点（客户端关闭，节点消失），设置延时5秒关闭</span></span><br><span class="line">       <span class="comment">//path = getClient().create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).forPath("/e");</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//6. 创建临时带序号节点（客户端关闭，节点消失），设置延时5秒关闭</span></span><br><span class="line">       <span class="comment">//path = getClient().create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL_SEQUENTIAL).forPath("/f");</span></span><br><span class="line"></span><br><span class="line">       System.out.println(path);</span><br><span class="line">       <span class="comment">//关闭客户端</span></span><br><span class="line">       getClient().close();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//更新节点</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateNodes</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="comment">//更新节点数据</span></span><br><span class="line">       <span class="comment">//getClient().setData().forPath("/a", "itheima".getBytes());</span></span><br><span class="line">       <span class="comment">//根据版本号更新节点数据</span></span><br><span class="line">       <span class="comment">//getClient().setData().withVersion(2).forPath("/a", "itheima".getBytes());</span></span><br><span class="line"></span><br><span class="line">       getClient().close();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//获取节点</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetNodes</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="comment">//查询节点数据</span></span><br><span class="line">       <span class="keyword">byte</span>[] bytes = getClient().getData().forPath(<span class="string">"/a"</span>);</span><br><span class="line">       System.out.println(<span class="keyword">new</span> String(bytes));</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 包含状态查询</span></span><br><span class="line">       Stat stat = <span class="keyword">new</span> Stat();</span><br><span class="line">       getClient().getData().storingStatIn(stat).forPath(<span class="string">"/a"</span>);</span><br><span class="line">       System.out.println(stat.getVersion());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//删除数据</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteNodes</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="comment">//删除节点</span></span><br><span class="line">       <span class="comment">//getClient().delete().forPath("/c");</span></span><br><span class="line">       <span class="comment">//删除节点并递归删除其子节点</span></span><br><span class="line">       <span class="comment">//getClient().delete().deletingChildrenIfNeeded().forPath("/c");</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="节点监听"><a href="#节点监听" class="headerlink" title="节点监听"></a>节点监听</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>watch机制</span><br><span class="line"><span class="code">zookeeperwatch机制，一个轻量级的设计。因为它采用了一种推拉结合的模式。</span></span><br><span class="line">  一旦服务端感知主题变了，那么只会发送一个事件类型和节点信息给关注的客户端，而不会包括具体的变更内容，所以事件本身是轻量级的，这就是所谓的"推"部分。</span><br><span class="line"><span class="code">然后，收到变更通知的客户端需要自己去拉变更的数据，这就是"拉"部分。</span></span><br><span class="line"><span class="bullet">* </span>Curator</span><br><span class="line"><span class="code">watche机制分为添加数据和监听节点。Curator在这方面做了优化，Curator引入了Cache的概念用来实现对ZooKeeper服务器端进行事件监听。</span></span><br><span class="line"><span class="code">Cache是Curator对事件监听的包装，其对事件的监听可以近似看做是一个本地缓存视图和远程ZooKeeper视图的对比过程。</span></span><br><span class="line"><span class="code">而且Curator会自动的再次监听，我们就不需要自己手动的重复监听了。</span></span><br><span class="line"><span class="code">Curator中的cache共有三种:</span></span><br><span class="line"><span class="code">NodeCache:  用来监听节点的创建和数据变化</span></span><br><span class="line"><span class="code">PathChildrenCache: 用来监听指定节点的子节点增删和数据变化</span></span><br><span class="line"><span class="code">TreeCache: 像上面两种Cache的结合体，能够监听自身节点的变化、也能够监听子节点的变化</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.curator.RetryPolicy;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.framework.CuratorFramework;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.framework.CuratorFrameworkFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.framework.recipes.cache.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.retry.ExponentialBackoffRetry;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Watch机制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WatchDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//连接ZK</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CuratorFramework <span class="title">getClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.设置重试策略</span></span><br><span class="line">        RetryPolicy retryPolicy = <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">1000</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="comment">//2.创建客户端</span></span><br><span class="line">        CuratorFramework client = CuratorFrameworkFactory.newClient(<span class="string">"127.0.0.1:2181"</span>, <span class="number">3000</span>, <span class="number">1000</span>, retryPolicy);</span><br><span class="line">        <span class="comment">//3.启动客户端</span></span><br><span class="line">        client.start();</span><br><span class="line">        <span class="comment">//4.返回客户端连接</span></span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//只监测当前节点数据</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNodeCache</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建节点数据监听对象</span></span><br><span class="line">        <span class="keyword">final</span> NodeCache nodeCache = <span class="keyword">new</span> NodeCache(getClient(), <span class="string">"/a"</span>);</span><br><span class="line">        nodeCache.start(<span class="keyword">true</span>); <span class="comment">//开始缓存</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(nodeCache.getCurrentData().getData()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加监听对象</span></span><br><span class="line">        nodeCache.getListenable().addListener(<span class="keyword">new</span> NodeCacheListener() &#123;</span><br><span class="line">            <span class="comment">//如果节点数据有变化，会回调该方法</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nodeChanged</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"数据Watcher：路径="</span> + nodeCache.getCurrentData().getPath() + <span class="string">",data="</span> + <span class="keyword">new</span> String(nodeCache.getCurrentData().getData()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//监测所有子节点数据</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPathChildrenCache</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//监听指定节点的子节点变化情况包括: 新增子节点 子节点数据变更 和子节点删除</span></span><br><span class="line">        PathChildrenCache childrenCache = <span class="keyword">new</span> PathChildrenCache(getClient(), <span class="string">"/a"</span>, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//在启动时缓存子节点数据，提示初始化</span></span><br><span class="line">        childrenCache.start(PathChildrenCache.StartMode.POST_INITIALIZED_EVENT);</span><br><span class="line">        <span class="comment">//添加监听</span></span><br><span class="line">        childrenCache.getListenable().addListener(<span class="keyword">new</span> PathChildrenCacheListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">childEvent</span><span class="params">(CuratorFramework client, PathChildrenCacheEvent event)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (event.getType() == PathChildrenCacheEvent.Type.CHILD_ADDED) &#123;</span><br><span class="line">                    System.out.println(event.getData().getPath() + <span class="string">"子节点添加："</span> + <span class="keyword">new</span> String(event.getData().getData()));</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType() == PathChildrenCacheEvent.Type.CHILD_REMOVED) &#123;</span><br><span class="line">                    System.out.println(event.getData().getPath() + <span class="string">"子节点移除："</span> + <span class="keyword">new</span> String(event.getData().getData()));</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType() == PathChildrenCacheEvent.Type.CHILD_UPDATED) &#123;</span><br><span class="line">                    System.out.println(event.getData().getPath() + <span class="string">"子节点修改："</span> + <span class="keyword">new</span> String(event.getData().getData()));</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType() == PathChildrenCacheEvent.Type.INITIALIZED) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"初始化完成"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType() == PathChildrenCacheEvent.Type.CONNECTION_SUSPENDED) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"连接过时"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType() == PathChildrenCacheEvent.Type.CONNECTION_RECONNECTED) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"重新连接"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType() == PathChildrenCacheEvent.Type.CONNECTION_LOST) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"连接过时一段时间"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//监测当前节点和所有的子节点</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTreeCache</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        TreeCache treeCache = <span class="keyword">new</span> TreeCache(getClient(), <span class="string">"/a"</span>);</span><br><span class="line">        treeCache.start();</span><br><span class="line"></span><br><span class="line">        System.out.println(treeCache.getCurrentData(<span class="string">"/a"</span>));</span><br><span class="line"></span><br><span class="line">        treeCache.getListenable().addListener(<span class="keyword">new</span> TreeCacheListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">childEvent</span><span class="params">(CuratorFramework client, TreeCacheEvent event)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (event.getType() == TreeCacheEvent.Type.NODE_ADDED) &#123;</span><br><span class="line">                    System.out.println(event.getData().getPath() + <span class="string">"节点添加"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType() == TreeCacheEvent.Type.NODE_REMOVED) &#123;</span><br><span class="line">                    System.out.println(event.getData().getPath() + <span class="string">"节点移除"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType() == TreeCacheEvent.Type.NODE_UPDATED) &#123;</span><br><span class="line">                    System.out.println(event.getData().getPath() + <span class="string">"节点修改"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType() == TreeCacheEvent.Type.INITIALIZED) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"初始化完成"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType() == TreeCacheEvent.Type.CONNECTION_SUSPENDED) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"连接过时"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType() == TreeCacheEvent.Type.CONNECTION_RECONNECTED) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"重新连接"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType() == TreeCacheEvent.Type.CONNECTION_LOST) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"连接过时一段时间"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Zookeeper使用场景"><a href="#Zookeeper使用场景" class="headerlink" title="Zookeeper使用场景"></a>Zookeeper使用场景</h1><h2 id="ID生成器"><a href="#ID生成器" class="headerlink" title="ID生成器"></a>ID生成器</h2><blockquote><p>通过在ZooKeepr里创建顺序节点，很容易创建一个全局唯一的名字，即生成全局唯一的ID。</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>在每一台机子上需要id的时候执行一个创建顺序节点的操作,一定可以获取到一个唯一的id</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>redis  自增长+1</span><br></pre></td></tr></table></figure><p><img data-src="/assets/image-20201014113353020.png" alt="image-20201014113353020"> </p><h2 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h2><blockquote><p>配置中心使用的是Zookeeper的watch机制</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>需求： </span><br><span class="line"><span class="code">在分布式应用系统中，会有很多的类似的配置文件，他们会散落在各个服务中，比如数据库的用户名和密码</span></span><br><span class="line"><span class="code">如果后期要修改的话，就需要修改非常多的配置文件，这显然不是好的做法，基于这种现状，就有了配置中心的概念</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>方案：</span><br><span class="line"><span class="code">可以把所有的配置都放在一个配置中心，然后各个服务分别去监听配置中心，一旦发现里面的内容发生变化，立即获取变化的内容，然后更新本地配置即可</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>实现：</span><br><span class="line"><span class="code">通过Zookeeper的watch机制，我们可以轻松的实现这一需求，</span></span><br><span class="line"><span class="code">所有的服务需要监听Zookeeper的配置节点，当配置信息发生变化之后，Zookeeper会将变化信息推送给服务，当然服务也可以主动去拉取节点数据</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>说明:</span><br><span class="line"><span class="code">    在这里Zookeeper采用了推拉模式相结合的做法：</span></span><br><span class="line"><span class="code">    push可以保证能够第一时间拿到更新配置，基本可以做到准实时的更新，但push存在问题，即如果有网络抖动，某一次push没有推送成功，将丢失这次配置的更新</span></span><br><span class="line"><span class="code">    pull可以保证一定可以拉取得到数据，pull一般采用定时拉取的方式，即使某一次出现网络问题，没有拉取得到数据，那在下一次定时器也将可以拉取得到数据</span></span><br></pre></td></tr></table></figure><p> <img data-src="/assets/image-20201014113209852.png" alt="image-20201014113209852"> </p><h2 id="分布式协调"><a href="#分布式协调" class="headerlink" title="分布式协调"></a>分布式协调</h2><blockquote><p>分布式协调服务使用的是Zookeeper的watch机制</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>不同的客户端如机器节点，发生了变化，那么所有订阅的客户端都能够接收到相应的Watcher通知，并做出相应的处理。</span><br></pre></td></tr></table></figure><p><img data-src="/assets/image-20201014144022534.png" alt="image-20201014144022534"> </p><h2 id="集群选主"><a href="#集群选主" class="headerlink" title="集群选主"></a>集群选主</h2><blockquote><p>集群选主使用的是zookeeper的临时节点</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>需求:</span><br><span class="line"><span class="code">在集群中，很多情况下是要区分主从节点的，一般情况下主节点负责数据写入，从节点负责数据读取，那么问题来了，怎么确定哪一个节点是主节点的</span></span><br><span class="line"><span class="code">    </span></span><br><span class="line"><span class="bullet">* </span>实现：</span><br><span class="line"><span class="code">使用Zookeeper的临时节点可以轻松实现这一需求</span></span><br><span class="line"><span class="code">我们把上面描述的这个过程称为集群选主的过程，首先所有的节点都认为是从节点，都有机会称为主节点，然后开始选主，步骤比较简单:</span></span><br><span class="line"><span class="bullet">1. </span>所有参与选主的主机都去Zookeeper上创建同一个临时节点，那么最终一定只有一个客户端请求能够创建成功。</span><br><span class="line"><span class="bullet">2. </span>成功创建节点的客户端所在的机器就成为了主节点，其他没有成功创建该节点的客户端，成为从节点</span><br><span class="line"><span class="bullet">3. </span>所有的从节点都会在主节点上注册一个子节点变更的Watcher，用于监控当前主节点是否存活，一旦发现当前的主节点挂了，那么其他客户端将会重新进行选主。</span><br></pre></td></tr></table></figure><p> <img data-src="/assets/image-20201014144945595.png" alt="image-20201014144945595"></p><h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><blockquote><p>分布式锁使用的是Zookeeper的临时有序节点</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>需求： </span><br><span class="line"><span class="code">在分布式系统中，很容出现多台主机操作同一资源的情况， 比如两台主机同时往一个文件中追加写入文本， </span></span><br><span class="line"><span class="code">如果不去做任何的控制，很有可能出现一个写入操作被另一个写入操作覆盖掉的状况</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>方案：</span><br><span class="line"><span class="code">此时我们可以来一把锁，哪个主机获取到了这把锁，就执行写入，另一台主机等待;直到写入操作执行完毕，另一台主机再去获得锁，然后写入</span></span><br><span class="line"><span class="code">这把锁就称为分布式锁， 也就是说:分布式锁是控制分布式系统之间同步访问共享资源的一种方式</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>实现:</span><br><span class="line"><span class="code">使用Zookeeper的临时有序节点可以轻松实现这一需求</span></span><br><span class="line"><span class="bullet">1. </span>所有需要执行操作的主机都去Zookeeper上创建一个临时有序节点</span><br><span class="line"><span class="bullet">2. </span>然后获取到Zookeeper上创建出来的这些节点进行一个从小到大的排序</span><br><span class="line"><span class="bullet">3. </span>判断自己创建的节点是不是最小的，如果是，自己就获取到了锁;   如果不是，则对最小的节点注册一个监听</span><br><span class="line"><span class="bullet">4. </span>如果自己获取到了锁，就去执行相应的操作，当执行完毕之后，连接断开，节点消失，锁就被释放了</span><br><span class="line"><span class="bullet">5. </span>如果自己没有获取到锁，就等待，一直监听节点消失，锁释放后，再重新执行抢夺锁的操作</span><br></pre></td></tr></table></figure><p><img data-src="/assets/image-20201014145925480.png" alt="image-20201014145925480"></p><h1 id="集群-高级"><a href="#集群-高级" class="headerlink" title="集群(高级)"></a>集群(高级)</h1><h2 id="集群介绍"><a href="#集群介绍" class="headerlink" title="集群介绍"></a>集群介绍</h2><p>Zookeeper在一个系统中一般会充当一个很重要的角色，所以一定要保证它的高可用，这就需要部署Zookeeper的集群。</p><p>Zookeeper 有三种运行模式：单机模式、集群模式和伪集群模式。</p><ul><li>单机模式：使用一台主机部署一个Zookeeper来对外提供服务，有单点故障问题，仅适合于开发、测试环境</li><li>集群模式：使用多台服务器，每台上部署一个Zookeeper一起对外提供服务，适合于生产环境</li><li>伪集群模式：在服务器不够多的情况下，也可以考虑在一台服务器上部署多个Zookeeper来对外提供服务</li></ul><h2 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h2><blockquote><p>本次学习环境，为了方便，我们采用windows平台部署伪集群的方式来演示Zookeeper集群的安装和使用。</p></blockquote><h3 id="软件准备"><a href="#软件准备" class="headerlink" title="软件准备"></a>软件准备</h3><p>创建一个文件夹，将Zookeeper软件解压三次，得到三个程序</p><p><img data-src="/assets/image-20201012173352810.png" alt="image-20201012173352810"> </p><h3 id="修改配置-1"><a href="#修改配置-1" class="headerlink" title="修改配置"></a>修改配置</h3><p>编辑Zookeeper的配置文件，主要修改的是端口号和服务地址[此步骤在所有zk上都有操作]</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>修改的内容</span><br><span class="line"><span class="code">dataDir： 数据存储的地址，修改为当前zk下的data目录</span></span><br><span class="line"><span class="code">clientPort：当前zk对外的端口号，因为是在同一个服务器上部署多台，此端口号不能重复</span></span><br><span class="line"><span class="code">server.id: 集群节点信息</span></span><br><span class="line"><span class="code">格式为: server.A=B:C:D    </span></span><br><span class="line"><span class="code">        A：是一个数字，表示这个是服务器的编号    </span></span><br><span class="line"><span class="code">        B：是这个服务器的ip地址    </span></span><br><span class="line"><span class="code">        C：Zookeeper服务器之间的通信端口    </span></span><br><span class="line"><span class="code">        D：Leader选举的端口</span></span><br></pre></td></tr></table></figure><h3 id="创建节点ID"><a href="#创建节点ID" class="headerlink" title="创建节点ID"></a>创建节点ID</h3><p>在dataDir 指定的目录下，创建一个文件，名字为：myid，文件内容: 为上一步service.id中的id  [此步骤在所有zk上都有操作]</p><h3 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h3><p>分别进入到每个zk服务器的bin目录，双击zkServer.cmd，启动三个服务器</p><h3 id="连接测试"><a href="#连接测试" class="headerlink" title="连接测试"></a>连接测试</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入到其中一个zk的bin目录执行连接命令</span></span><br><span class="line"><span class="comment"># zkCli.cmd -server 连接节点的ip：port</span></span><br><span class="line">zkCli.cmd <span class="literal">-server</span> <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">2182</span></span><br><span class="line">Connecting to <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">2182</span></span><br></pre></td></tr></table></figure><h2 id="一致性事务处理"><a href="#一致性事务处理" class="headerlink" title="一致性事务处理"></a>一致性事务处理</h2><h3 id="集群角色"><a href="#集群角色" class="headerlink" title="集群角色"></a>集群角色</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>ZooKeeper集群中的三个角色：</span><br><span class="line"><span class="code">Leader（领导者）：负责投票的发起和决议，更新系统状态，是事务请求的唯一处理者，一个ZooKeeper同一时刻只会有一个Leader</span></span><br><span class="line"><span class="code">Follower（跟随者）：处理客户端请求，参与选主投票</span></span><br><span class="line"><span class="code">Observer（观察者）：处理客户端请求，不参与选主投票</span></span><br><span class="line"><span class="bullet">* </span>Leader可以提供读写服务，Follower或Observer只提供读服务，但是Observer机器不参与Leader选举，也不参与写操作的『过半写成功』策略</span><br></pre></td></tr></table></figure><p><img data-src="/assets/image-20201012185750043.png" alt="image-20201012185750043"> </p><h3 id="Zookeeper的特性"><a href="#Zookeeper的特性" class="headerlink" title="Zookeeper的特性"></a>Zookeeper的特性</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>顺序性: 从同一个客户端发起的事务请求, 最终会严格按照顺序被应用到zookeeper中</span><br><span class="line"><span class="bullet">2. </span>原子性: 所有的事务请求的处理结果在整个集群中的所有机器上的应用情况是一致的; 也就是说,要么整个集群中的所有机器都成功应用了某一事务、要么全都不应用</span><br><span class="line"><span class="bullet">3. </span>可靠性: 一旦服务器成功应用了某一个事务数据,并且对客户端做了响应,那么这个数据在整个集群中一定是同步并且保留下来的</span><br><span class="line"><span class="bullet">4. </span>实时性: 一旦一个事务被成功应用,客户端就能够立即从服务器端读取到事务变更后的最新数据状态(zookeeper仅仅保证在一定时间内,近实时)</span><br></pre></td></tr></table></figure><h3 id="ZAB协议"><a href="#ZAB协议" class="headerlink" title="ZAB协议"></a>ZAB协议</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>Zookeeper采用ZAB(Zookeeper Atomic Broadcast)协议来保证分布式数据一致性。</span><br><span class="line"><span class="bullet">* </span>ZAB并不是一种通用的分布式一致性算法,而是一种专为Zookeeper设计的崩溃可恢复的原子消息广播算法。</span><br><span class="line"><span class="bullet">* </span>ZAB协议包括两种基本模式:崩溃恢复模式和消息广播模式:</span><br><span class="line"><span class="code">消息广播模式主要用来进行事务请求的处理</span></span><br><span class="line"><span class="code">崩溃恢复模式主要用来在集群启动过程,或者Leader服务器崩溃退出后进行新的Leader服务器的选举以及数据同步</span></span><br></pre></td></tr></table></figure><h3 id="事务请求的处理流程"><a href="#事务请求的处理流程" class="headerlink" title="事务请求的处理流程"></a>事务请求的处理流程</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>所有的事务请求都交由集群的Leader服务器来处理,Leader服务器会将一个事务请求转换成一个Proposal(提议),并为其生成一个全局递增的唯一ID,</span><br><span class="line"><span class="code">    这个ID就是事务ID,即ZXID,Leader服务器对Proposal是按其ZXID的先后顺序来进行排序和处理的。</span></span><br><span class="line"><span class="bullet">2. </span>Leader服务器会将Proposal放入每个Follower对应的队列中(Leader会为每个Follower分配一个单独的队列),并以FIFO的方式发送给Follower服务器。</span><br><span class="line"><span class="bullet">3. </span>Follower服务器接收到事务Proposal后,首先以事务日志的方式写入本地磁盘,并且在成功后返回Leader服务器一个ACK响应。</span><br><span class="line"><span class="bullet">4. </span>Leader服务器只要收到过半Follower的ACK响应,就会广播一个Commit消息给Follower以通知其进行Proposal的提交,同时Leader自身也会完成Proposal的提交。</span><br><span class="line"><span class="bullet">5. </span>Follower收到commit请求时，从历史队列中将事务请求commit</span><br></pre></td></tr></table></figure><p><img data-src="/assets/image-20201012183855327.png" alt="image-20201012183855327"> </p><h2 id="集群选举"><a href="#集群选举" class="headerlink" title="集群选举"></a>集群选举</h2><h3 id="服务器状态"><a href="#服务器状态" class="headerlink" title="服务器状态"></a>服务器状态</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>Zookeeper服务器有四个状态</span><br><span class="line"><span class="code">looking：  寻找leader状态。当服务器处于该状态时，它会认为当前集群中没有leader，因此需要进入leader选举状态。</span></span><br><span class="line"><span class="code">leading：  领导者状态。表明当前服务器角色是leader。</span></span><br><span class="line"><span class="code">following：跟随者状态。表明当前服务器角色是follower。</span></span><br><span class="line"><span class="code">observing：观察者状态。表明当前服务器角色是observer。</span></span><br></pre></td></tr></table></figure><h3 id="服务器启动时期的leader选举"><a href="#服务器启动时期的leader选举" class="headerlink" title="服务器启动时期的leader选举"></a>服务器启动时期的leader选举</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>在集群初始化阶段，当有一台服务器server1启动时，其单独无法进行和完成leader选举，</span><br><span class="line"><span class="bullet">* </span>当第二台服务器server2启动时，此时两台机器可以相互通信，每台机器都试图找到leader，于是进入leader选举过程。 </span><br><span class="line"><span class="bullet">* </span>选举过程如下:</span><br><span class="line"><span class="bullet">1. </span>每个server发出一个投票。</span><br><span class="line"><span class="code">   由于是初始情况，server1和server2都会将自己作为leader服务器来进行投票，每次投票会包含所推举的服务器的myid和zxid，</span></span><br><span class="line"><span class="code">   使用(myid, zxid)来表示，此时server1的投票为(1, 0)，server2的投票为(2, 0)，然后各自将这个投票发给集群中其他机器。</span></span><br><span class="line"><span class="bullet">2. </span>集群中的每台服务器接收来自集群中各个服务器的投票。</span><br><span class="line"><span class="bullet">3. </span>处理投票。针对每一个投票，服务器都需要将别人的投票和自己的投票进行pk，pk规则如下:</span><br><span class="line"><span class="code">优先检查zxid。zxid比较大的服务器优先作为leader。</span></span><br><span class="line"><span class="code">如果zxid相同，那么就比较myid。myid较大的服务器作为leader服务器。</span></span><br><span class="line"> 对于Server1而言，它的投票是(1, 0)，接收Server2的投票为(2, 0)，首先会比较两者的zxid，均为0，再比较myid，此时server2的myid最大，</span><br><span class="line"> 于是更新自己的投票为(2, 0)，然后重新投票，对于server2而言，其无须更新自己的投票，只是再次向集群中所有机器发出上一次投票信息即可。</span><br><span class="line"><span class="bullet">4. </span>统计投票。每次投票后，服务器都会统计投票信息，判断是否已经有过半机器接受到相同的投票信息，</span><br><span class="line"><span class="code">对于server1、server2而言，都统计出集群中已经有两台机器接受了(2, 0)的投票信息，此时便认为已经选出了leader</span></span><br><span class="line"><span class="bullet">5. </span>改变服务器状态。一旦确定了leader，每个服务器就会更新自己的状态，如果是follower，那么就变更为following，如果是leader，就变更为leading。</span><br></pre></td></tr></table></figure><h3 id="服务器运行时期的Leader选举"><a href="#服务器运行时期的Leader选举" class="headerlink" title="服务器运行时期的Leader选举"></a>服务器运行时期的Leader选举</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>在zookeeper运行期间，leader与非leader服务器各司其职，即便当有非leader服务器宕机或新加入，此时也不会影响leader，</span><br><span class="line"><span class="bullet">* </span>但是一旦leader服务器挂了，那么整个集群将暂停对外服务，进入新一轮leader选举，其过程和启动时期的Leader选举过程基本一致。</span><br><span class="line"><span class="bullet">* </span>假设正在运行的有server1、server2、server3三台服务器，当前leader是server2，若某一时刻leader挂了，此时便开始Leader选举。</span><br><span class="line"><span class="bullet">* </span>选举过程如下:</span><br><span class="line"><span class="bullet">1. </span>变更状态。leader挂后，余下的服务器都会将自己的服务器状态变更为looking，然后开始进入leader选举过程。</span><br><span class="line"><span class="bullet">2. </span>每个server会发出一个投票。</span><br><span class="line"><span class="code">在运行期间，每个服务器上的zxid可能不同，此时假定server1的zxid为122，server3的zxid为122，</span></span><br><span class="line"><span class="code">在第一轮投票中，server1和server3都会投自己，产生投票(1, 122)，(3, 122)，然后各自将投票发送给集群中所有机器。</span></span><br><span class="line"><span class="bullet">3. </span>接收来自各个服务器的投票。与启动时过程相同</span><br><span class="line"><span class="bullet">4. </span>处理投票。与启动时过程相同，此时，server3将会成为leader。</span><br><span class="line"><span class="bullet">5. </span>统计投票。与启动时过程相同。</span><br><span class="line"><span class="bullet">6. </span>改变服务器的状态。与启动时过程相同。</span><br></pre></td></tr></table></figure><h3 id="observer角色及其配置"><a href="#observer角色及其配置" class="headerlink" title="observer角色及其配置"></a>observer角色及其配置</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>observer角色特点：</span><br><span class="line"><span class="bullet">1. </span>不参与集群的leader选举</span><br><span class="line"><span class="bullet">2. </span>不参与集群中写数据时的ack反馈</span><br><span class="line"><span class="bullet">* </span>为了使用observer角色，在任何想变成observer角色的配置文件中加入如下配置：</span><br><span class="line"><span class="code">peerType=observer</span></span><br><span class="line"><span class="bullet">* </span>并在所有server的配置文件中，配置成observer模式的server的那行配置追加:observer</span><br><span class="line"><span class="code">server.3=192.168.60.130:2289:3389:observer</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Zookeeper介绍&quot;&gt;&lt;a href=&quot;#Zookeeper介绍&quot; class=&quot;headerlink&quot; title=&quot;Zookeeper介绍&quot;&gt;&lt;/a&gt;Zookeeper介绍&lt;/h1&gt;&lt;p&gt;ZooKeeper是一个分布式服务&lt;strong&gt;协调&lt;/strong&gt;框架，主要用来解决分布式应用中的一些数据管理问题，如：统一命名服务、状态同步服务、应用配置项的管理等等。&lt;/p&gt;
&lt;p&gt;ZooKeeper由雅虎研究院开发，是Google Chubby的开源实现，后来托管到Apache，于2010年11月正式成为Apache的顶级项目。&lt;/p&gt;
&lt;p&gt;在大数据生态系统里，很多组件的命名都是某种动物，比如hadoop就是🐘，hive就是🐝。Zookeeper的作用是用来对这些组件进行管理，即动物园管理者。&lt;/p&gt;
&lt;p&gt;官方网址：&lt;a href=&quot;https://zookeeper.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zookeeper.apache.org/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Zookeeper" scheme="http://sunmoon.com/categories/Zookeeper/"/>
    
    
      <category term="分布式协调框架" scheme="http://sunmoon.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%B0%83%E6%A1%86%E6%9E%B6/"/>
    
      <category term="zookeeper数据结构" scheme="http://sunmoon.com/tags/zookeeper%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="zookeeper常见命令" scheme="http://sunmoon.com/tags/zookeeper%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/"/>
    
      <category term="zookeeper使用场景" scheme="http://sunmoon.com/tags/zookeeper%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
    
      <category term="zookeeper集群" scheme="http://sunmoon.com/tags/zookeeper%E9%9B%86%E7%BE%A4/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo</title>
    <link href="http://sunmoon.com/2020/10/13/Dubbo/"/>
    <id>http://sunmoon.com/2020/10/13/Dubbo/</id>
    <published>2020-10-13T13:54:21.000Z</published>
    <updated>2020-10-13T14:03:34.009Z</updated>
    
    <content type="html"><![CDATA[<h1 id="系统架构演变"><a href="#系统架构演变" class="headerlink" title="系统架构演变"></a>系统架构演变</h1><p>随着互联网的发展，网站应用的规模也在不断的扩大，进而导致系统架构也在不断的进行变化。</p><p>从互联网早起到现在，系统架构大体经历了下面几个过程: </p><ul><li>单体应用架构—&gt;垂直应用架构—&gt;分布式架构—&gt;SOA架构—&gt;<code>微服务架构</code></li></ul><a id="more"></a><h2 id="单体应用架构"><a href="#单体应用架构" class="headerlink" title="单体应用架构"></a>单体应用架构</h2><p>单体应用结构，就是将一个系统的多个模块做成一个web项目，然后部署到一台tomcat服务器上</p><p><img data-src="/assets/image-20201013090302092.png" alt="image-20201013090302092"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">优点：</span><br><span class="line"><span class="bullet">- </span>项目架构简单，小型项目的话， 开发成本低</span><br><span class="line"><span class="bullet">- </span>项目部署在一个节点上， 维护方便</span><br><span class="line"></span><br><span class="line">缺点：</span><br><span class="line"><span class="bullet">- </span>项目模块之间紧密耦合，单点容错率低</span><br><span class="line"><span class="bullet">- </span>无法针对不同模块进行针对性优化和水平扩展</span><br></pre></td></tr></table></figure><h2 id="垂直应用架构"><a href="#垂直应用架构" class="headerlink" title="垂直应用架构"></a>垂直应用架构</h2><p>垂直应用架构，就是将原来的一个系统拆成成多个模块，然后每个模块部署在一台tomcat服务器上</p><p><img data-src="/assets/image-20201013090315040.png" alt="image-20201013090315040"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">优点：</span><br><span class="line"><span class="bullet">- </span>可以针对不同模块进行优化和水平扩展</span><br><span class="line"><span class="bullet">- </span>一个系统的问题不会影响到其他系统，提高单点容错率</span><br><span class="line"><span class="code">    </span></span><br><span class="line">缺点：</span><br><span class="line"><span class="bullet">- </span>系统之间相互独立，无法进行相互调用，会有重复的开发任务</span><br></pre></td></tr></table></figure><h2 id="分布式架构"><a href="#分布式架构" class="headerlink" title="分布式架构"></a>分布式架构</h2><p>分布式架构就是指将服务层单独部署在tomcat上对外提供服务，在controller中可以通过远程调用访问服务层中的方法</p><p><img data-src="/assets/image-20201013090328364.png" alt="image-20201013090328364"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">优点：</span><br><span class="line"><span class="bullet">- </span>抽取公共的功能为服务层，提高代码复用性</span><br><span class="line"></span><br><span class="line">缺点：</span><br><span class="line"><span class="bullet">- </span>调用关系错综复杂，难以维护</span><br></pre></td></tr></table></figure><h2 id="SOA架构"><a href="#SOA架构" class="headerlink" title="SOA架构"></a>SOA架构</h2><p>SOA结构，在分布式架构的基础上，增加一个调度中心对系统进行实时管理。</p><p><img data-src="/assets/image-20201013090336898.png" alt="image-20201013090336898"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">面试直达：聊一聊集群和分布式的区别?</span><br><span class="line"><span class="bullet">+ </span>集群:多台服务器重复完成同一个任务,即同一个任务部署在多台服务器上</span><br><span class="line"><span class="bullet">+ </span>分布式:多台服务器协同完成同一个任务,即同一个任务拆分为多个子任务,多个子任务部署在多台服务器上协同完成同一个任务</span><br></pre></td></tr></table></figure><p><img data-src="/assets/image-20201013091340058.png" alt="image-20201013091340058"></p><h1 id="Dubbo概述"><a href="#Dubbo概述" class="headerlink" title="Dubbo概述"></a>Dubbo概述</h1><h2 id="Dubbo简介"><a href="#Dubbo简介" class="headerlink" title="Dubbo简介"></a>Dubbo简介</h2><p>Apache Dubbo是一款高性能的Java RPC框架，可以和Spring框架无缝集成。官网地址：<a href="http://dubbo.apache.org" target="_blank" rel="noopener">http://dubbo.apache.org</a></p><h3 id="发展历程"><a href="#发展历程" class="headerlink" title="发展历程"></a>发展历程</h3><ul><li>Dubbo是阿里巴巴内部使用的分布式业务框架，2012年由阿里巴巴开源</li><li>在很短时间内，Dubbo就被许多互联网公司所采用，并产生了许多衍生版本，如网易，京东，新浪，当当等等</li><li>由于阿里策略变化，2014年10月Dubbo停止维护。随后部分互联网公司公开了自行维护的Dubbo版本，比较著名的如当当DubboX</li><li>经过三年的沉寂，在2017年9月，阿里宣布重启Dubbo项目，并决策在未来对开源进行长期持续的投入</li><li>随后Dubbo开始了密集的更新，并将停摆三年以来大量分支上的特性及缺陷修正快速整合</li><li>2018.2月，阿里将Dubbo捐献给Apache基金会，Dubbo成为Apache孵化器项目</li></ul><h3 id="RPC介绍"><a href="#RPC介绍" class="headerlink" title="RPC介绍"></a>RPC介绍</h3><ul><li><p>RPC全称为remote procedure call，<strong>即远程过程调用</strong></p></li><li><p>简单的讲，RPC可以<strong>让我们像调用本地方法一样来调用远程方法</strong></p></li><li><p>需要注意的是RPC并不是一个具体的技术，而是指整个网络远程调用过程</p></li><li><p>Java中的RPC框架比较多，广泛使用的有RMI、Hessian、Dubbo等</p></li></ul><h3 id="核心能力"><a href="#核心能力" class="headerlink" title="核心能力"></a>核心能力</h3><ul><li>面向接口的远程方法调用</li><li>智能容错和负载均衡</li><li>服务自动注册和发现</li></ul><h2 id="Dubbo架构"><a href="#Dubbo架构" class="headerlink" title="Dubbo架构"></a>Dubbo架构</h2><p><img data-src="/assets/image-20201013094335527.png" alt="image-20201013094335527"></p><p><img data-src="/assets/dubbo%E6%9E%B6%E6%9E%84.png" alt="dubbo架构"></p><p><strong>节点角色说明：</strong></p><table><thead><tr><th><strong>节点</strong></th><th><strong>角色名称</strong></th></tr></thead><tbody><tr><td>Provider</td><td>暴露服务的服务提供方</td></tr><tr><td>Consumer</td><td>调用远程服务的服务消费方</td></tr><tr><td>Registry</td><td>服务注册与发现的注册中心</td></tr><tr><td>Monitor</td><td>统计服务的调用次数和调用时间的监控中心</td></tr><tr><td>Container</td><td>服务运行容器</td></tr></tbody></table><p><strong>调用关系说明</strong>:</p><ol start="0"><li>服务容器负责启动，加载，运行服务提供者。</li><li>服务提供者在启动时，向注册中心注册自己提供的服务。</li><li>服务消费者在启动时，向注册中心订阅自己所需的服务。</li><li>注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</li><li>服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li><li>服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">面试直达: </span><br><span class="line"><span class="bullet">1. </span>服务调用者和注册中心是基于推模式还是拉模式获取服务的?</span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2. </span>如果服务注册中心宕机了, 会不会影响到服务的正常调用?</span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">3. </span>在dubbo的各个服务组件调用中中,什么地方用的是长连接,什么地方用的是短连接?</span><br></pre></td></tr></table></figure><h1 id="Dubbo入门案例"><a href="#Dubbo入门案例" class="headerlink" title="Dubbo入门案例"></a>Dubbo入门案例</h1><h2 id="服务注册中心准备"><a href="#服务注册中心准备" class="headerlink" title="服务注册中心准备"></a>服务注册中心准备</h2><p>注册中心负责服务地址的注册与查找，服务提供者和消费者与注册中心交互。</p><p>Dubbo支持的服务注册中心有很多，比如zookeeper、redis、mysql等等，官方推荐使用 zookeeper 注册中心。</p><p>Zookeeper是Apacahe Hadoop的子项目，是一个树型的目录服务，支持变更推送，适合作为Dubbo服务的注册中心，可用于生产环境。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>将的zookeeper-3.4.6.zip复制到一个没有中文，没有空格的目录，然后解压，即可得到zookeeper的软件</p><p><img data-src="/assets/zookeeper%E5%AE%89%E8%A3%85.png" alt="zookeeper安装"></p><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><ol><li>进入到zookeeper的配置目录，复制<code>zoo_sample.cfg</code>为<code>zoo.cfg</code></li><li>编辑<code>zoo.cfg</code>文件，修改<code>dataDir</code>的值为<code>安装目录\\data</code>这是zookeeper存储数据的位置</li></ol><p><img data-src="/assets/zookeeper%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE.png" alt="zookeeper修改配置"></p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>进入安装路径的bin目录，双击zkServer.cmd即可启动zookeeper服务</p><p><img data-src="/assets/zookeeper%E5%90%AF%E5%8A%A8.png" alt="zookeeper启动"></p><h2 id="准备一个父工程"><a href="#准备一个父工程" class="headerlink" title="准备一个父工程"></a>准备一个父工程</h2><blockquote><p>dubbo_parent</p></blockquote><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- dubbo相关 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.netty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>netty-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.32.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.sgroschupf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置编译版本为1.8 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="服务提供者开发"><a href="#服务提供者开发" class="headerlink" title="服务提供者开发"></a>服务提供者开发</h2><h3 id="创建一个web工程"><a href="#创建一个web工程" class="headerlink" title="创建一个web工程"></a>创建一个web工程</h3><p> <img data-src="/assets/dubbo%E5%BF%AB%E9%80%9F%E6%A1%88%E4%BE%8B1.png" alt="dubbo快速案例1"></p><h3 id="创建service接口"><a href="#创建service接口" class="headerlink" title="创建service接口"></a>创建service接口</h3><p> <img data-src="/assets/dubbo%E5%BF%AB%E9%80%9F%E6%A1%88%E4%BE%8B2.png" alt="dubbo快速案例2"></p><h3 id="创建service实现类"><a href="#创建service实现类" class="headerlink" title="创建service实现类"></a>创建service实现类</h3><p> <img data-src="/assets/dubbo%E5%BF%AB%E9%80%9F%E6%A1%88%E4%BE%8B3.png" alt="dubbo快速案例3"></p><h3 id="加入spring-dubbo配置文件"><a href="#加入spring-dubbo配置文件" class="headerlink" title="加入spring-dubbo配置文件"></a>加入spring-dubbo配置文件</h3><p> <img data-src="/assets/dubbo%E5%BF%AB%E9%80%9F%E6%A1%88%E4%BE%8B4.png" alt="dubbo快速案例4"></p><h3 id="加入web-xml"><a href="#加入web-xml" class="headerlink" title="加入web.xml"></a>加入web.xml</h3><p><img data-src="/assets/dubbo%E5%BF%AB%E9%80%9F%E6%A1%88%E4%BE%8B5.png" alt="dubbo快速案例5"></p><h3 id="部署测试"><a href="#部署测试" class="headerlink" title="部署测试"></a>部署测试</h3><p> <img data-src="/assets/dubbo%E5%BF%AB%E9%80%9F%E6%A1%88%E4%BE%8B6.png" alt="dubbo快速案例6"></p><h2 id="服务消费者开发"><a href="#服务消费者开发" class="headerlink" title="服务消费者开发"></a>服务消费者开发</h2><h3 id="创建一个web工程-1"><a href="#创建一个web工程-1" class="headerlink" title="创建一个web工程"></a>创建一个web工程</h3><p> <img data-src="/assets/dubbo%E5%BF%AB%E9%80%9F%E6%A1%88%E4%BE%8B7.png" alt="dubbo快速案例7"></p><h3 id="复制一个service接口"><a href="#复制一个service接口" class="headerlink" title="复制一个service接口"></a>复制一个service接口</h3><p> <img data-src="/assets/dubbo%E5%BF%AB%E9%80%9F%E6%A1%88%E4%BE%8B8.png" alt="dubbo快速案例8"></p><h3 id="创建controller类"><a href="#创建controller类" class="headerlink" title="创建controller类"></a>创建controller类</h3><p> <img data-src="/assets/dubbo%E5%BF%AB%E9%80%9F%E6%A1%88%E4%BE%8B9.png" alt="dubbo快速案例9"></p><h3 id="加入spring-dubbo配置文件-1"><a href="#加入spring-dubbo配置文件-1" class="headerlink" title="加入spring-dubbo配置文件"></a>加入spring-dubbo配置文件</h3><p> <img data-src="/assets/dubbo%E5%BF%AB%E9%80%9F%E6%A1%88%E4%BE%8B10.png" alt="dubbo快速案例10"></p><h3 id="加入web-xml-1"><a href="#加入web-xml-1" class="headerlink" title="加入web.xml"></a>加入web.xml</h3><p> <img data-src="/assets/dubbo%E5%BF%AB%E9%80%9F%E6%A1%88%E4%BE%8B11.png" alt="dubbo快速案例11"></p><h3 id="部署测试-1"><a href="#部署测试-1" class="headerlink" title="部署测试"></a>部署测试</h3><p> <img data-src="/assets/dubbo%E5%BF%AB%E9%80%9F%E6%A1%88%E4%BE%8B12.png" alt="dubbo快速案例12"></p><p><img data-src="/assets/dubbo%E5%BF%AB%E9%80%9F%E6%A1%88%E4%BE%8B13.png" alt="dubbo快速案例13"></p><h2 id="执行过程说明"><a href="#执行过程说明" class="headerlink" title="执行过程说明"></a>执行过程说明</h2><p><img data-src="/assets/dubbo%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E8%AF%B4%E6%98%8E.png" alt="dubbo执行过程说明"></p><h2 id="Dubbo的两种部署方式"><a href="#Dubbo的两种部署方式" class="headerlink" title="Dubbo的两种部署方式"></a>Dubbo的两种部署方式</h2><ul><li><p>直接采用tomcat部署(推荐企业生产环境)</p></li><li><p>使用main方法直接启动spring环境(推荐开发 测试阶段使用   目的节省内存资源)</p></li></ul><p><img data-src="/assets/dubbo%E9%83%A8%E7%BD%B2%E6%96%B9%E5%BC%8F.png" alt="dubbo部署方式"></p><h1 id="Dubbo的使用细节"><a href="#Dubbo的使用细节" class="headerlink" title="Dubbo的使用细节"></a>Dubbo的使用细节</h1><h2 id="包扫描"><a href="#包扫描" class="headerlink" title="包扫描"></a>包扫描</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--服务提供者和服务消费者都需要配置包扫描，作用是扫描指定包(包括子包)下的类中的注解: @Service  @Refrences--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:annotation</span> <span class="attr">package</span>=<span class="string">"com.itheima.dubbo.controller"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">在服务提供者一方配置，可以指定使用的协议名称和端口号。</span></span><br><span class="line"><span class="comment">其中Dubbo支持的协议有：dubbo、rmi、hessian、http、webservice、rest、redis等。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="启动时检查"><a href="#启动时检查" class="headerlink" title="启动时检查"></a>启动时检查</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    启动时检查, 配置在服务消费者一方，用于服务消费者在启动的时候主动检查服务提供者是否准备好提供服务</span></span><br><span class="line"><span class="comment">       如果配置为false, 代表不检查</span></span><br><span class="line"><span class="comment">       如果配置为true, 代表检查, 一旦检查到服务提供者未准备好, 就会直接抛异常</span></span><br><span class="line"><span class="comment">    建议在开发阶段将check值设置为false(默认)，在生产环境下改为true。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:consumer</span> <span class="attr">check</span>=<span class="string">"false"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="超时时间和重试机制-配置"><a href="#超时时间和重试机制-配置" class="headerlink" title="超时时间和重试机制(配置)"></a>超时时间和重试机制(配置)</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置在消费者端一方: 默认的超时时间是1s ，默认的重试次数是3次--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:consumer</span> <span class="attr">timeout</span>=<span class="string">"500000000"</span> <span class="attr">retries</span>=<span class="string">"0"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Dubbo入门案例改进"><a href="#Dubbo入门案例改进" class="headerlink" title="Dubbo入门案例改进"></a>Dubbo入门案例改进</h1><h2 id="当前工程的问题"><a href="#当前工程的问题" class="headerlink" title="当前工程的问题"></a>当前工程的问题</h2><ol><li>Service接口代码重复</li><li>两个工程中的Service必须完全一致, 这做起来其实很麻烦</li></ol><p>改进思路:  <strong>将service接口单独做成一个模块, 然后让provider和consumer来引用</strong></p><h2 id="工程改进"><a href="#工程改进" class="headerlink" title="工程改进"></a>工程改进</h2><h3 id="创建一个新模块-接口"><a href="#创建一个新模块-接口" class="headerlink" title="创建一个新模块(接口)"></a>创建一个新模块(接口)</h3><p><img data-src="/assets/%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B%E6%94%B9%E8%BF%9B1.png" alt="入门案例改进1"></p><h3 id="从provider和consumer引入新模块"><a href="#从provider和consumer引入新模块" class="headerlink" title="从provider和consumer引入新模块"></a>从provider和consumer引入新模块</h3><p><img data-src="/assets/%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B%E6%94%B9%E8%BF%9B2.png" alt="入门案例改进2"></p><h2 id="Dubbo下的标准Mavne模块划分"><a href="#Dubbo下的标准Mavne模块划分" class="headerlink" title="Dubbo下的标准Mavne模块划分"></a>Dubbo下的标准Mavne模块划分</h2><p><img data-src="/assets/Dubbo%E4%B8%8B%E7%9A%84%E6%A0%87%E5%87%86maven%E6%A8%A1%E5%9D%97%E5%88%92%E5%88%86.png" alt="Dubbo下的标准maven模块划分"></p><h1 id="Dubbo监控中心"><a href="#Dubbo监控中心" class="headerlink" title="Dubbo监控中心"></a>Dubbo监控中心</h1><p>Dubbo给我们提供了一个UI界面的监控中心, 通过它可以观察到dubbo内部的详细信息</p><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><p>准备一个没有使用过的tomcat, 解压到一个没有中文和空格的路径</p><p><img data-src="/assets/dubbo%E7%9B%91%E6%8E%A7%E4%B8%AD%E5%BF%831.png" alt="dubbo监控中心1"></p><h3 id="部署监控程序"><a href="#部署监控程序" class="headerlink" title="部署监控程序"></a>部署监控程序</h3><p>将<code>dubbo-admin.war</code>程序部署到tomcat, 然后启动tomcat, 让程序解压</p><p><img data-src="/assets/dubbo%E7%9B%91%E6%8E%A7%E4%B8%AD%E5%BF%832.png" alt="dubbo监控中心2"></p><h3 id="配置文件调整"><a href="#配置文件调整" class="headerlink" title="配置文件调整"></a>配置文件调整</h3><blockquote><p>如果zookeeper的地址和端口没有修改过,这步无需操作;   如果修改了下面的文件, 则必须重启tomcat</p></blockquote><p><img data-src="/assets/dubbo%E7%9B%91%E6%8E%A7%E4%B8%AD%E5%BF%833.png" alt="dubbo监控中心3"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>打开浏览器，输入<a href="http://127.0.0.1:9999/dubbo-admin/" target="_blank" rel="noopener">http://127.0.0.1:9999/dubbo-admin/</a> ，登录用户名和密码均为root, 登录成功可以见到下面的页面</p><p><img data-src="/assets/dubbo%E7%9B%91%E6%8E%A7%E4%B8%AD%E5%BF%834.png" alt="dubbo监控中心4"></p><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><p>通过服务治理下<code>服务  提供者  消费者</code>可以观察具体应用的信息</p><p><img data-src="/assets/dubbo%E7%9B%91%E6%8E%A7%E4%B8%AD%E5%BF%835.png" alt="dubbo监控中心5"></p><h1 id="企业用户申请"><a href="#企业用户申请" class="headerlink" title="企业用户申请"></a>企业用户申请</h1><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><h3 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h3><p>我们的平台, 除了后台管理系统之外, 其实还有一个供用户使用的前台系统, 具体页面如下</p><p>我们现在需要把这个前台系统也部署起来, 它的主要功能是完成企业的申请[ 对ss_company表做插入操作 ]</p><p><img data-src="/assets/%E4%BC%81%E4%B8%9A%E7%94%A8%E6%88%B7%E7%94%B3%E8%AF%B71.png" alt="企业用户申请1"></p><h3 id="模型分析"><a href="#模型分析" class="headerlink" title="模型分析"></a>模型分析</h3><p><img data-src="/assets/%E4%BC%81%E4%B8%9A%E7%94%A8%E6%88%B7%E7%94%B3%E8%AF%B7%E6%A8%A1%E5%9E%8B%E5%88%86%E6%9E%90.png" alt="企业用户申请模型分析"></p><h2 id="模块拆分"><a href="#模块拆分" class="headerlink" title="模块拆分"></a>模块拆分</h2><h3 id="补充缺少的模块-修改打包方式"><a href="#补充缺少的模块-修改打包方式" class="headerlink" title="补充缺少的模块, 修改打包方式"></a>补充缺少的模块, 修改打包方式</h3><p><strong>新建四个模块,并将两个service和两个web模块结尾的模块调整为maven的web模块</strong></p><p><img data-src="/assets/image-20200701234316596.png" alt="image-20200701234316596"> </p><h3 id="建立包之间的依赖关系-略"><a href="#建立包之间的依赖关系-略" class="headerlink" title="建立包之间的依赖关系(略)"></a>建立包之间的依赖关系(略)</h3><p><img data-src="/assets/image-20200701235105568.png" alt="image-20200701235105568"> </p><h3 id="代码拆分"><a href="#代码拆分" class="headerlink" title="代码拆分"></a>代码拆分</h3><p>==将当前system_service中的代码分到四个模块中==</p><p><img data-src="/assets/image-20200702101105020.png" alt="image-20200702101105020"></p><h3 id="配置文件添加"><a href="#配置文件添加" class="headerlink" title="配置文件添加"></a>配置文件添加</h3><p><img data-src="/assets/image-20200702104019293.png" alt="image-20200702104019293"> </p><h2 id="dubbo环境加入"><a href="#dubbo环境加入" class="headerlink" title="dubbo环境加入"></a>dubbo环境加入</h2><h3 id="添加dubbo的配置文件"><a href="#添加dubbo的配置文件" class="headerlink" title="添加dubbo的配置文件"></a>添加dubbo的配置文件</h3><h4 id="服务提供方"><a href="#服务提供方" class="headerlink" title="服务提供方"></a>服务提供方</h4><p>在两个service模块中,添加dubbo的配置文件<code>applicationContext-dubbo.xml</code>,内容如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--这个名字, 尽量跟项目名一致--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"export_company_service"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这个端口,不能重复--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20881"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://127.0.0.1:2181"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:annotation</span> <span class="attr">package</span>=<span class="string">"com.itheima.service"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img data-src="/assets/image-20200702104823270.png" alt="image-20200702104823270"> </p><h4 id="服务消费方"><a href="#服务消费方" class="headerlink" title="服务消费方"></a>服务消费方</h4><p>修改两个web模块中的dubbo的配置文件<code>springmvc.xml</code>,添加下面配置:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--这个名字, 尽量跟项目名一致--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"export_manager_web"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:consumer</span> <span class="attr">timeout</span>=<span class="string">"50000000"</span> <span class="attr">retries</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://127.0.0.1:2181"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:annotation</span> <span class="attr">package</span>=<span class="string">"com.itheima.web"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p> <img data-src="/assets/image-20200702105217865.png" alt="image-20200702105217865"> </p><h3 id="修改注解"><a href="#修改注解" class="headerlink" title="修改注解"></a>修改注解</h3><ol><li><p>将所有Service实现类上的@Service注解改为阿里的@Service注解</p></li><li><p>将所有下图所示所有类中的==注入service的@Autowired注解==改为阿里的@Reference</p></li></ol><p><img data-src="/assets/image-20200702000938739.png" alt="image-20200702000938739"> </p><h3 id="整合dubbo后-shiro的一个问题"><a href="#整合dubbo后-shiro的一个问题" class="headerlink" title="整合dubbo后, shiro的一个问题+"></a>整合dubbo后, shiro的一个问题+</h3><blockquote><p>现象: 在SaasRelm中, 使用@Refrence注入的userService为空</p><p>原因: Realm先于dubbo创建在，而创建的时候就会去dubbo中获取service对象, 所以获取不到</p><p>解决方案: 从Dubbo中获取userService获取后交给spring容器管理。SaasRelm使用的时候再从spring容器中获取。</p></blockquote><p><strong>1 创建一个工具类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.system.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringUtil</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserService <span class="title">userService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (SpringUtil.applicationContext == <span class="keyword">null</span>) &#123;</span><br><span class="line">            SpringUtil.applicationContext = applicationContext;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取applicationContext</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title">getApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过name获取 Bean.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getApplicationContext().getBean(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过class获取Bean.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getApplicationContext().getBean(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过name,以及Clazz返回指定的Bean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(String name, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getApplicationContext().getBean(name, clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2 修改SaasReam中获取service的方式</strong></p><p><img data-src="/assets/image-20200702113358316.png" alt="image-20200702113358316"> </p><h3 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h3><blockquote><p>开发环境下, 为了方便, 可以直接使用main方法启动两个service</p></blockquote><p><img data-src="/assets/image-20200714192208427.png" alt="image-20200714192208427"> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    ClassPathXmlApplicationContext act =</span><br><span class="line">            <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath*:spring/applicationContext-*.xml"</span>);</span><br><span class="line">    act.start();</span><br><span class="line">    System.in.read();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="开发前台功能"><a href="#开发前台功能" class="headerlink" title="开发前台功能"></a>开发前台功能</h2><h3 id="添加页面"><a href="#添加页面" class="headerlink" title="添加页面"></a>添加页面</h3><p><img data-src="/assets/image-20200701235951099.png" alt="image-20200701235951099"> </p><h3 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h3><p><img data-src="/assets/image-20200702114553037.png" alt="image-20200702114553037"> </p><p><img data-src="/assets/image-20200702115022022.png" alt="image-20200702115022022"> </p><h3 id="企业申请页面代码分析"><a href="#企业申请页面代码分析" class="headerlink" title="企业申请页面代码分析"></a>企业申请页面代码分析</h3><p><img data-src="/assets/image-20200702115409290.png" alt="image-20200702115409290"> </p><h3 id="companyController开发"><a href="#companyController开发" class="headerlink" title="companyController开发"></a>companyController开发</h3><p>在<code>export_portal_web</code>模块的<code>com.itheima.web.controller</code>下建立下面的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.company.Company;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.company.CompanyService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompanyController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span></span><br><span class="line">    <span class="keyword">private</span> CompanyService companyService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/apply"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">(Company company)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//设置企业ID和状态</span></span><br><span class="line">            company.setId(UUID.randomUUID().toString());</span><br><span class="line">            company.setState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//调用service保存</span></span><br><span class="line">            companyService.save(company);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"1"</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试-略"><a href="#测试-略" class="headerlink" title="测试(略)"></a>测试(略)</h3>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;系统架构演变&quot;&gt;&lt;a href=&quot;#系统架构演变&quot; class=&quot;headerlink&quot; title=&quot;系统架构演变&quot;&gt;&lt;/a&gt;系统架构演变&lt;/h1&gt;&lt;p&gt;随着互联网的发展，网站应用的规模也在不断的扩大，进而导致系统架构也在不断的进行变化。&lt;/p&gt;
&lt;p&gt;从互联网早起到现在，系统架构大体经历了下面几个过程: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单体应用架构—&amp;gt;垂直应用架构—&amp;gt;分布式架构—&amp;gt;SOA架构—&amp;gt;&lt;code&gt;微服务架构&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="分布式" scheme="http://sunmoon.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="Dubbo" scheme="http://sunmoon.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F/Dubbo/"/>
    
    
      <category term="系统架构" scheme="http://sunmoon.com/tags/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/"/>
    
      <category term="dubbo" scheme="http://sunmoon.com/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>Shiro安全框架</title>
    <link href="http://sunmoon.com/2020/10/11/Shiro%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6/"/>
    <id>http://sunmoon.com/2020/10/11/Shiro%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6/</id>
    <published>2020-10-11T12:08:47.000Z</published>
    <updated>2020-10-11T13:04:24.878Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Shiro概述"><a href="#Shiro概述" class="headerlink" title="Shiro概述"></a>Shiro概述</h1><h2 id="当前项目的问题"><a href="#当前项目的问题" class="headerlink" title="当前项目的问题"></a>当前项目的问题</h2><ol><li>用户不用登录，就能直接通过url访问saas系统内部的页面  <code>直接输入http://localhost:8080/system/module/list.do就能看到所有模块</code></li><li>使用低权限的管理员身份登录,也可以访问高权限的用户菜单 <code>比如使用普通员工登录, 直接url就能访问到它本应访问不到的页面</code></li><li>页面上标签未做到权限控制 <code>给一个员工分配了部门管理\查看权限, 但没分配新增权限, 但页面上依旧显示新增按钮</code></li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">问题:</span><br><span class="line"><span class="bullet">1. </span>用户不登录就可以访问系统资源</span><br><span class="line"><span class="bullet">2. </span>用户登录之后可以访问到不属于自己的资源</span><br><span class="line"><span class="bullet">3. </span>页面标签没有做到权限限制</span><br></pre></td></tr></table></figure><p>​     上述功能的描述，可以使用<strong>过滤器</strong>或<strong>拦截器</strong>完成，当然在实际开发者已经有组织把这些功能封装为框架，比如<strong>Shiro</strong>或者<strong>SpringSecurity</strong>，来简化权限的控制，我们今天使用<code>shiro</code>框架。</p><a id="more"></a><h2 id="Shiro简介"><a href="#Shiro简介" class="headerlink" title="Shiro简介"></a>Shiro简介</h2><p>Apache Shiro是Java的一个安全框架。不仅功能强大，而且使用简单，它为开发人员提供一个直观而全面的<span style="color:red">认证，授权</span>，加密及会话管理的解决方案。</p><p><img data-src="/assets/shiro%E7%AE%80%E4%BB%8B.png" alt="shiro简介"></p><p>官网地址：<a href="http://shiro.apache.org/" target="_blank" rel="noopener">http://shiro.apache.org/</a> </p><h2 id="Shiro的功能"><a href="#Shiro的功能" class="headerlink" title="Shiro的功能"></a>Shiro的功能</h2><p><img data-src="/assets/shiro%E5%8A%9F%E8%83%BD.png" alt="shiro功能"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>Authentication（认证）</span><br><span class="line"><span class="code">用户登录，身份识别    ---      结果:不是系统用户不能访问系统</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>Authorization（授权）</span><br><span class="line"><span class="code">限定用户可进行的操作  ----     结果:没权限不能访问资源</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>Cryptography（加密）</span><br><span class="line"><span class="code">安全数据加密</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>Session Manager（会话）</span><br><span class="line"><span class="code">用户登录后就是一次会话，在没有退出之前，它的所有信息都在会话中(类似于web的session)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>Web Integration</span><br><span class="line"><span class="code">web容器集成</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>Integrations</span><br><span class="line"><span class="code">集成其他应用，比如spring、缓存</span></span><br></pre></td></tr></table></figure><h2 id="shiro的架构"><a href="#shiro的架构" class="headerlink" title="shiro的架构"></a>shiro的架构</h2><p><img data-src="/assets/Shiro%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="Shiro架构图"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>Application Code（应用）</span><br><span class="line"><span class="code">我们自己编写的项目</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>Subject（主体）</span><br><span class="line"><span class="code">它是一个工具类，负责用户和shiro框架交互</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>SecurityManager（安全管理器）</span><br><span class="line"><span class="code">它是Shiro架构中最核心的组件，通过它可以协调其他组件完成用户认证和授权</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>Realm（域）</span><br><span class="line"><span class="code">它定义了访问数据的方式，用来连接不同的数据源，如：数据库，配置文件等</span></span><br></pre></td></tr></table></figure><p><strong>明确我们使用Shiro主要要做两件事</strong></p><ul><li>认证：认证指的是匹配用户名（邮箱）和密码，让平台认识你。</li><li>授权：授权指的是当前认证的用户进入平台，能操作哪些页面。</li></ul><p><img data-src="/assets/%E8%AE%A4%E8%AF%81%E5%92%8C%E6%8E%88%E6%9D%83.png" alt="认证和授权"></p><h2 id="Shiro过滤器"><a href="#Shiro过滤器" class="headerlink" title="Shiro过滤器"></a>Shiro过滤器</h2><table><thead><tr><th>过滤器简称</th><th>对应的java类</th><th>描述</th></tr></thead><tbody><tr><td><strong>anon</strong></td><td>org.apache.shiro.web.filter.authc.AnonymousFilter</td><td>未认证访问</td></tr><tr><td><strong>authc</strong></td><td>org.apache.shiro.web.filter.authc.FormAuthenticationFilter</td><td>认证后访问</td></tr><tr><td>authcBasic</td><td>org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter</td><td>httpBasic认证后访问</td></tr><tr><td><strong>perms</strong></td><td>org.apache.shiro.web.filter.authz.PermissionsAuthorizationFilter</td><td>指定权限访问</td></tr><tr><td>port</td><td>org.apache.shiro.web.filter.authz.PortFilter</td><td>指定端口访问</td></tr><tr><td>rest</td><td>org.apache.shiro.web.filter.authz.HttpMethodPermissionFilter</td><td>指定rest访问</td></tr><tr><td>roles</td><td>org.apache.shiro.web.filter.authz.RolesAuthorizationFilter</td><td>指定角色访问</td></tr><tr><td>ssl</td><td>org.apache.shiro.web.filter.authz.SslFilter</td><td>ssl认证后访问</td></tr><tr><td>user</td><td>org.apache.shiro.web.filter.authc.UserFilter</td><td>指定用户访问</td></tr><tr><td>logout</td><td>org.apache.shiro.web.filter.authc.LogoutFilter</td><td>用户退出</td></tr></tbody></table><h2 id="Shiro标签"><a href="#Shiro标签" class="headerlink" title="Shiro标签"></a>Shiro标签</h2><table><thead><tr><th><strong>标签名称</strong></th><th><strong>标签条件（均是显示标签内容）</strong></th></tr></thead><tbody><tr><td><strong>&lt;shiro:authenticated &gt;</strong></td><td>登录之后</td></tr><tr><td>&lt;shiro:notAuthenticated &gt;</td><td>不在登录状态时</td></tr><tr><td>&lt;shiro:guest &gt;</td><td>用户在没有RememberMe时</td></tr><tr><td>&lt;shiro:user &gt;</td><td>用户在RememberMe时</td></tr><tr><td>&lt;shiro:hasAnyRoles name=”abc,123”  &gt;</td><td>在有abc或者123角色时</td></tr><tr><td>&lt;shiro:hasRole name=”abc”&gt;</td><td>拥有角色abc</td></tr><tr><td>&lt;shiro:lacksRole name=”abc”&gt;</td><td>没有角色abc</td></tr><tr><td><strong>&lt;shiro:hasPermission  name=”abc”&gt;</strong></td><td>拥有权限资源abc</td></tr><tr><td>&lt;shiro:lacksPermission name=”abc”&gt;</td><td>没有abc权限资源</td></tr><tr><td>&lt;shiro:principal &gt;</td><td>默认显示用户名称</td></tr></tbody></table><h1 id="Shiro环境搭建"><a href="#Shiro环境搭建" class="headerlink" title="Shiro环境搭建"></a>Shiro环境搭建</h1><h2 id="导入坐标"><a href="#导入坐标" class="headerlink" title="导入坐标"></a>导入坐标</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--shiro和spring整合--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--shiro核心包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="web-xml配置"><a href="#web-xml配置" class="headerlink" title="web.xml配置"></a>web.xml配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Shiro Security filter filter-name这个名字的值将来还会在spring中用到--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>shiroFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>targetFilterLifecycle<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>shiroFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Spring整个Shiro"><a href="#Spring整个Shiro" class="headerlink" title="Spring整个Shiro"></a>Spring整个Shiro</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- filter-name这个名字的值来自于web.xml中filter的名字 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shiroFilter"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.web.ShiroFilterFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--认证不通过, 跳转的页面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginUrl"</span> <span class="attr">value</span>=<span class="string">"/login.jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--授权不通过, 跳转的页面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"unauthorizedUrl"</span> <span class="attr">value</span>=<span class="string">"/unauthorized.jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--拦截规则--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitions"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">        /login.jsp = anon</span><br><span class="line">        /css/** = anon</span><br><span class="line">        /img/** = anon</span><br><span class="line">        /plugins/** = anon</span><br><span class="line">        /make/** = anon</span><br><span class="line">        /login.do = anon</span><br><span class="line">        /** = authc</span><br><span class="line">      <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 引用自定义的realm --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"saasRealm"</span> <span class="attr">class</span>=<span class="string">"com.itheima.web.realm.SaasRealm"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 安全管理器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"securityManager"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.web.mgt.DefaultWebSecurityManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"realm"</span> <span class="attr">ref</span>=<span class="string">"saasRealm"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--下面所有内容为 shiro注解使用--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"lifecycleBeanPostProcessor"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.LifecycleBeanPostProcessor"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">depends-on</span>=<span class="string">"lifecycleBeanPostProcessor"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"proxyTargetClass"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="自定义Realm"><a href="#自定义Realm" class="headerlink" title="自定义Realm"></a>自定义Realm</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SaasRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//认证数据准备</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"================认证===================="</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//授权数据准备</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"================授权==================="</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Shiro执行流程的说明"><a href="#Shiro执行流程的说明" class="headerlink" title="Shiro执行流程的说明"></a>Shiro执行流程的说明</h2><blockquote><p>以登录功能为例</p></blockquote><p><img data-src="/assets/shiro%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E8%AF%B4%E6%98%8E.png" alt="shiro执行流程说明"></p><h1 id="Shiro用户认证"><a href="#Shiro用户认证" class="headerlink" title="Shiro用户认证"></a>Shiro用户认证</h1><h2 id="传统方式和shiro方式完成登录的流程区别"><a href="#传统方式和shiro方式完成登录的流程区别" class="headerlink" title="传统方式和shiro方式完成登录的流程区别"></a>传统方式和shiro方式完成登录的流程区别</h2><p><img data-src="/assets/%E4%BC%A0%E7%BB%9F%E6%96%B9%E5%BC%8F%E5%92%8Cshiro%E6%96%B9%E5%BC%8F%E5%AE%8C%E6%88%90%E7%99%BB%E5%BD%95%E7%9A%84%E6%B5%81%E7%A8%8B%E5%8C%BA%E5%88%AB.png" alt="传统方式和shiro方式完成登录的流程区别"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="LoginController"><a href="#LoginController" class="headerlink" title="LoginController"></a>LoginController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(String email, String password)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 封装email和password为Token</span></span><br><span class="line">    AuthenticationToken authenticationToken = <span class="keyword">new</span> UsernamePasswordToken(email, <span class="keyword">new</span> Md5Hash(password, email, <span class="number">2</span>).toString());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 获取Subject,并且调用login方法</span></span><br><span class="line">    Subject subject = SecurityUtils.getSubject();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        subject.login(authenticationToken);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 登录成功</span></span><br><span class="line">        User user = (User) subject.getPrincipal();</span><br><span class="line">        session.setAttribute(<span class="string">"loginUser"</span>, user);</span><br><span class="line"><span class="comment">//存储权限对应的菜单</span></span><br><span class="line">        List&lt;Module&gt; moduleList = userService.findModuleByUser(user);</span><br><span class="line">        session.setAttribute(<span class="string">"modules"</span>, moduleList);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/home/main.do"</span>;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        request.setAttribute(<span class="string">"error"</span>, <span class="string">"用户名或者密码错误"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"forward:/login.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SaasRealm"><a href="#SaasRealm" class="headerlink" title="SaasRealm"></a>SaasRealm</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//认证数据准备</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"==============认证====================="</span>);</span><br><span class="line">    <span class="comment">//获取email</span></span><br><span class="line">    UsernamePasswordToken usernamePasswordToken = (UsernamePasswordToken) authenticationToken;</span><br><span class="line">    String email = usernamePasswordToken.getUsername();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询用户信息</span></span><br><span class="line">    User user = userService.findByEmail(email);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回用户信息</span></span><br><span class="line">    <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Object principal 主角</span></span><br><span class="line">        <span class="comment">// Object credentials  密码</span></span><br><span class="line">        <span class="comment">// String realmName 当前realm的名称</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(user, user.getPassword(), <span class="keyword">this</span>.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="再谈Shiro认证代码的执行流程"><a href="#再谈Shiro认证代码的执行流程" class="headerlink" title="再谈Shiro认证代码的执行流程"></a>再谈Shiro认证代码的执行流程</h2><p><img data-src="/assets/%E5%86%8D%E8%B0%88Shiro%E8%AE%A4%E8%AF%81%E4%BB%A3%E7%A0%81%E7%9A%84%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png" alt="再谈Shiro认证代码的执行流程"></p><h2 id="用户退出"><a href="#用户退出" class="headerlink" title="用户退出"></a>用户退出</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//退出</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/logout"</span>, name = <span class="string">"用户登出"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">logout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SecurityUtils.getSubject().logout();   <span class="comment">//登出</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/login.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Shiro用户授权"><a href="#Shiro用户授权" class="headerlink" title="Shiro用户授权"></a>Shiro用户授权</h1><h2 id="授权流程说明"><a href="#授权流程说明" class="headerlink" title="授权流程说明"></a>授权流程说明</h2><p>shiro授权的意思就是: 当一个用户试图访问一个资源的时候, shiro会判断此用户是否有访问此资源的权限</p><p>shiro授权的步骤:</p><ol><li>定义每个资源访问所需要的权限</li><li>当用户访问资源的时候, 要去数据库查询到此用户拥有的权限</li><li>使用用户查询到的权限列表 跟 访问资源需要的权限比对, 决定授权是否通过</li></ol><p><img data-src="/assets/%E6%8E%88%E6%9D%83%E6%B5%81%E7%A8%8B%E8%AF%B4%E6%98%8E.png" alt="授权流程说明"></p><h2 id="授权代码实现-xml版"><a href="#授权代码实现-xml版" class="headerlink" title="授权代码实现(xml版)"></a>授权代码实现(xml版)</h2><h3 id="xml中定义权限"><a href="#xml中定义权限" class="headerlink" title="xml中定义权限"></a>xml中定义权限</h3><p><img data-src="/assets/%E6%8E%88%E6%9D%83xml%E9%85%8D%E7%BD%AE.png" alt="授权xml配置"></p><h3 id="SaasRealm中实现授权逻辑"><a href="#SaasRealm中实现授权逻辑" class="headerlink" title="SaasRealm中实现授权逻辑"></a>SaasRealm中实现授权逻辑</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//授权数据准备</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"==========================================授权==============================================="</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询当前用户的权限信息</span></span><br><span class="line">    User user = (User) principalCollection.getPrimaryPrincipal();</span><br><span class="line">    List&lt;Module&gt; moduleList = userService.findModuleByUser(user);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将信息交给shiro</span></span><br><span class="line">    SimpleAuthorizationInfo simpleAuthorizationInfo = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">    <span class="keyword">for</span> (Module <span class="keyword">module</span> : moduleList) &#123;</span><br><span class="line">        simpleAuthorizationInfo.addStringPermission(<span class="keyword">module</span>.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(simpleAuthorizationInfo.getStringPermissions());</span><br><span class="line">    <span class="keyword">return</span> simpleAuthorizationInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="授权代码实现-注解版"><a href="#授权代码实现-注解版" class="headerlink" title="授权代码实现(注解版)"></a>授权代码实现(注解版)</h2><h3 id="去掉xml中的注解配置"><a href="#去掉xml中的注解配置" class="headerlink" title="去掉xml中的注解配置"></a>去掉xml中的注解配置</h3><p> <img data-src="/assets/%E6%8E%88%E6%9D%83_%E5%8E%BB%E6%8E%89xml%E9%85%8D%E7%BD%AE.png" alt="授权_去掉xml配置"></p><h3 id="使用注解声明资源访问权限"><a href="#使用注解声明资源访问权限" class="headerlink" title="使用注解声明资源访问权限"></a>使用注解声明资源访问权限</h3><blockquote><p><code>@RequiresPermissions</code></p></blockquote> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@RequiresPermissions("企业管理")  代表只有用户有企业管理的权限,才能访问当前方法</span></span><br><span class="line"><span class="comment">//相当于XML中的   /company/list.do = perms["企业管理"]</span></span><br><span class="line"><span class="meta">@RequiresPermissions</span>(<span class="string">"企业管理"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/list"</span>, name = <span class="string">"企业列表查询"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @RequestParam(defaultValue = <span class="string">"1"</span>, name = <span class="string">"page"</span>)</span> Integer pageNum,</span></span><br><span class="line"><span class="function">    @<span class="title">RequestParam</span><span class="params">(defaultValue = <span class="string">"1"</span>)</span> Integer pageSize) </span>&#123;</span><br><span class="line"></span><br><span class="line">    PageInfo pageInfo = companyService.findByPage(pageNum, pageSize);</span><br><span class="line">    request.setAttribute(<span class="string">"page"</span>, pageInfo);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"/company/company-list"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SaasRealm中实现授权逻辑-代码不变"><a href="#SaasRealm中实现授权逻辑-代码不变" class="headerlink" title="SaasRealm中实现授权逻辑(代码不变)"></a>SaasRealm中实现授权逻辑(代码不变)</h3><h3 id="全局异常处理修改"><a href="#全局异常处理修改" class="headerlink" title="全局异常处理修改"></a>全局异常处理修改</h3><p>基于注解的授权控制, 当授权失败的时候, 不会跳转授权失败页面, 而是抛出一个异常, 需要我们在全局异常处理器中自己处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理所有的Exception及其子类</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">exceptionHandler</span>(<span class="title">Exception</span> <span class="title">e</span>, <span class="title">HttpServletRequest</span> <span class="title">request</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 打印异常,给程序员</span></span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        request.setAttribute(<span class="string">"errorMsg"</span>, e.getMessage());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 返回页面, 给用户</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理未授权的异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(UnauthorizedException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">UnauthorizedException</span>(<span class="title">Exception</span> <span class="title">e</span>, <span class="title">HttpServletRequest</span> <span class="title">request</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//2. 返回未授权页面, 给用户</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/unauthorized.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="页面元素权限控制"><a href="#页面元素权限控制" class="headerlink" title="页面元素权限控制"></a>页面元素权限控制</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>当用户没有相关资源的具体操作权限的时候,我们应该是不让其看到响应按钮的</p><p>这就要使用到了<strong>shiro标签</strong>, 这里主要介绍一个<code>&lt;shiro:hasPermission&gt;</code>, 用法如下:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--这代表用户有   删除部门   的权限, 才能看到  删除   按钮--&gt;</span><br><span class="line">&lt;shiro:hasPermission name=<span class="string">"删除部门"</span>&gt;</span><br><span class="line">    &lt;button&gt;删除&lt;/button&gt;</span><br><span class="line">&lt;/shiro:hasPermission&gt;</span><br></pre></td></tr></table></figure><p><img data-src="/assets/%E9%A1%B5%E9%9D%A2%E5%85%83%E7%B4%A0%E6%8E%A7%E5%88%B6%E8%AF%B4%E6%98%8E.png" alt="页面元素控制说明"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>以部门管理为例子, 演示效果:</p><p>① 引入shiro标签库</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"shiro"</span> uri=<span class="string">"http://shiro.apache.org/tags"</span>%&gt;</span><br></pre></td></tr></table></figure><p>② 使用shiro标签控制权限</p><p><img data-src="/assets/%E4%BD%BF%E7%94%A8shiro%E6%A0%87%E7%AD%BE%E6%8E%A7%E5%88%B6%E6%9D%83%E9%99%90.png" alt="使用shiro标签控制权限"></p><h2 id="授权数据缓存"><a href="#授权数据缓存" class="headerlink" title="授权数据缓存"></a>授权数据缓存</h2><p>我们现在访问被拦截的页面时，每次shiro的安全过滤器都需要从realm中获取认证方法，也意味这每次查询数据库，浪费服务性能，造成访问压力，这时候我们必须要进行优化：经常访问，但又不经常修改的这部分数据可以使用缓存</p><p><img data-src="/assets/%E6%8E%88%E6%9D%83%E6%95%B0%E6%8D%AE%E7%BC%93%E5%AD%98.png" alt="授权数据缓存"></p><h1 id="自定义Shiro过滤器"><a href="#自定义Shiro过滤器" class="headerlink" title="自定义Shiro过滤器"></a>自定义Shiro过滤器</h1><h2 id="需求明确"><a href="#需求明确" class="headerlink" title="需求明确"></a>需求明确</h2><p>shiro 支持如下的权限写法, 代表同时拥有多个权限,  才能访问指定资源</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/system/dept/edit.do = perms["新增部门","删除部门"]</span><br></pre></td></tr></table></figure><p>但是我们现在有这样一个需求: <strong>只需要满足其中一个个权限, 就要能对资源访问, 这时怎么办呢?</strong></p><h2 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h2><p>操作步骤：</p><ol><li>自定义过滤器, 继承<code>AuthorizationFilter</code>, 并实现里面的方法</li><li>配置文件中添加配置</li></ol><p><strong>自定义过滤器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPermissionsAuthorizationFilter</span> <span class="keyword">extends</span> <span class="title">AuthorizationFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccessAllowed</span><span class="params">(ServletRequest request, ServletResponse response, Object mappedValue)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Subject subject = getSubject(request, response); <span class="comment">//subject里面就有当前用户的权限    ["查看部门","新增部门","修改部门"]</span></span><br><span class="line">        String[] perms = (String[]) mappedValue; <span class="comment">//访问资源需要的权限 ["新增部门","删除部门"]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果没有配置,放行</span></span><br><span class="line">        <span class="keyword">if</span> (perms == <span class="keyword">null</span> || perms.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String perm : perms) &#123;</span><br><span class="line">            <span class="keyword">if</span> (subject.isPermitted(perm)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>修改配置文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">&lt;!-- filter-name这个名字的值来自于web.xml中filter的名字 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shiroFilter"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.web.ShiroFilterFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--认证不通过, 跳转的页面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginUrl"</span> <span class="attr">value</span>=<span class="string">"/login.jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--授权不通过, 跳转的页面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"unauthorizedUrl"</span> <span class="attr">value</span>=<span class="string">"/unauthorized.jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--拦截规则: 从上向下依次匹配,一旦匹配成功其中一个,匹配结束--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitions"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">            /login.jsp = anon</span><br><span class="line">            /css/** = anon</span><br><span class="line">            /img/** = anon</span><br><span class="line">            /plugins/** = anon</span><br><span class="line">            /make/** = anon</span><br><span class="line">            /login.do = anon</span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                URL=perms["权限标识"]</span></span><br><span class="line"><span class="comment">                当前访问的用户只有有  权限标识  的权限的时候,才能访问URL对应的资源</span></span><br><span class="line"><span class="comment">                注意位置必须在/**的上面</span></span><br><span class="line"><span class="comment">                 /company/list.do = perms["企业管理"]</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--3. 切换认证过滤器--&gt;</span></span><br><span class="line">            /system/dept/edit.do = myPerms["新增部门","删除部门"]</span><br><span class="line"></span><br><span class="line">            /** = authc</span><br><span class="line">        <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2 将自定义的过滤器加入到Shiro的过滤器链中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filters"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--key就是当前过滤器的一个唯一标识,类似于anon authc perms--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"myPerms"</span> <span class="attr">value-ref</span>=<span class="string">"myPermissionsAuthorizationFilter"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--1 将自定义的过滤器声明到Spring的容器中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myPermissionsAuthorizationFilter"</span> <span class="attr">class</span>=<span class="string">"com.itheima.web.filters.MyPermissionsAuthorizationFilter"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><img data-src="/assets/%E8%87%AA%E5%AE%9A%E4%B9%89Shiro%E8%BF%87%E6%BB%A4%E5%99%A8.png" alt="自定义Shiro过滤器"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Shiro概述&quot;&gt;&lt;a href=&quot;#Shiro概述&quot; class=&quot;headerlink&quot; title=&quot;Shiro概述&quot;&gt;&lt;/a&gt;Shiro概述&lt;/h1&gt;&lt;h2 id=&quot;当前项目的问题&quot;&gt;&lt;a href=&quot;#当前项目的问题&quot; class=&quot;headerlink&quot; title=&quot;当前项目的问题&quot;&gt;&lt;/a&gt;当前项目的问题&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;用户不用登录，就能直接通过url访问saas系统内部的页面  &lt;code&gt;直接输入http://localhost:8080/system/module/list.do就能看到所有模块&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用低权限的管理员身份登录,也可以访问高权限的用户菜单 &lt;code&gt;比如使用普通员工登录, 直接url就能访问到它本应访问不到的页面&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;页面上标签未做到权限控制 &lt;code&gt;给一个员工分配了部门管理\查看权限, 但没分配新增权限, 但页面上依旧显示新增按钮&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight markdown&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;问题:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;	1. &lt;/span&gt;用户不登录就可以访问系统资源&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;	2. &lt;/span&gt;用户登录之后可以访问到不属于自己的资源&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;	3. &lt;/span&gt;页面标签没有做到权限限制&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;​     上述功能的描述，可以使用&lt;strong&gt;过滤器&lt;/strong&gt;或&lt;strong&gt;拦截器&lt;/strong&gt;完成，当然在实际开发者已经有组织把这些功能封装为框架，比如&lt;strong&gt;Shiro&lt;/strong&gt;或者&lt;strong&gt;SpringSecurity&lt;/strong&gt;，来简化权限的控制，我们今天使用&lt;code&gt;shiro&lt;/code&gt;框架。&lt;/p&gt;
    
    </summary>
    
    
      <category term="框架" scheme="http://sunmoon.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Shiro" scheme="http://sunmoon.com/categories/%E6%A1%86%E6%9E%B6/Shiro/"/>
    
    
      <category term="Java安全框架" scheme="http://sunmoon.com/tags/Java%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6/"/>
    
      <category term="shiro环境搭建" scheme="http://sunmoon.com/tags/shiro%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
      <category term="shiro认证与授权" scheme="http://sunmoon.com/tags/shiro%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83/"/>
    
      <category term="自定义shiro过滤器" scheme="http://sunmoon.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89shiro%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Maven高级&amp;分模块开发</title>
    <link href="http://sunmoon.com/2020/09/30/Maven%E9%AB%98%E7%BA%A7-%E5%88%86%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91/"/>
    <id>http://sunmoon.com/2020/09/30/Maven%E9%AB%98%E7%BA%A7-%E5%88%86%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91/</id>
    <published>2020-09-30T13:11:07.000Z</published>
    <updated>2020-10-10T13:34:24.660Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分模块开发"><a href="#分模块开发" class="headerlink" title="分模块开发"></a>分模块开发</h1><h2 id="拆分与聚合的思想"><a href="#拆分与聚合的思想" class="headerlink" title="拆分与聚合的思想"></a>拆分与聚合的思想</h2><p><strong>拆分</strong> 将原来的一个项目拆分成一个个小的模块, 每个模块都有自己的坐标,  当其它项目需要本模块的功能时, 只需要按照坐标引入本模块就可以了</p><p><strong>聚合</strong> 通过坐标的形式，将各个模块组装在一起,完成一个项目的功能</p><p><img data-src="/assets/%E6%8B%86%E5%88%86%E4%B8%8E%E8%81%9A%E5%90%88%E6%80%9D%E6%83%B3.png" alt="拆分与聚合思想"></p><a id="more"></a><h2 id="父子工程搭建"><a href="#父子工程搭建" class="headerlink" title="父子工程搭建"></a>父子工程搭建</h2><p>首先创建父工程，在父工程下创建dao、service、web模块，在sevice中添加一个依赖，导入dao模块，web模块中添加service模块。</p><p>略…</p><blockquote><p>在进行依赖的时候, maven规定:</p><ul><li>编译阶段, 可以使用源代码进行依赖</li><li>运行阶段,必须使用jar包进行依赖</li></ul></blockquote><h2 id="两套关系梳理"><a href="#两套关系梳理" class="headerlink" title="两套关系梳理"></a>两套关系梳理</h2><p>在上面的工程中, 存在两套关系</p><ul><li>父子工程之间: 继承关系, 子工程可以使用父工程中的jar包</li><li>模块工程之间:  默认是没有任何关系的，但是可以通过依赖建立两者之间的关系，而且这个依赖关系是可以传递的</li></ul><blockquote><p>A–&gt;B   B–&gt;C         A–&gt;C<br>我们把A和B之间  或者  B和C 之间称为  直接依赖<br>我们把    A和C   之间称为   间接依赖</p></blockquote><h1 id="依赖冲突"><a href="#依赖冲突" class="headerlink" title="依赖冲突"></a>依赖冲突</h1><h2 id="什么是依赖冲突"><a href="#什么是依赖冲突" class="headerlink" title="什么是依赖冲突"></a>什么是依赖冲突</h2><p>在依赖的传递过程中，很容易出现同一jar包的版本冲突问题，这个就称为依赖冲突 </p><p><img data-src="/assets/%E4%BB%80%E4%B9%88%E6%98%AF%E4%BE%9D%E8%B5%96%E5%86%B2%E7%AA%81.png" alt="什么是依赖冲突"></p><h2 id="依赖冲突解决"><a href="#依赖冲突解决" class="headerlink" title="依赖冲突解决"></a>依赖冲突解决</h2><h3 id="第一声明有限原则"><a href="#第一声明有限原则" class="headerlink" title="第一声明有限原则"></a>第一声明有限原则</h3><p>在pom文件定义依赖，先声明的依赖为准。</p><p><img data-src="/assets/%E7%AC%AC%E4%B8%80%E5%A3%B0%E6%98%8E%E4%BC%98%E5%85%88%E5%8E%9F%E5%88%99.png" alt="第一声明优先原则"></p><h3 id="路径近者优先原则"><a href="#路径近者优先原则" class="headerlink" title="路径近者优先原则"></a>路径近者优先原则</h3><p>从依赖程序开始算起，到被依赖的程序，以路径短的为准。</p><p><img data-src="/assets/%E8%B7%AF%E5%BE%84%E8%BF%91%E8%80%85%E4%BC%98%E5%85%88%E5%8E%9F%E5%88%99.png" alt="路径近者优先原则"></p><h3 id="依赖排除"><a href="#依赖排除" class="headerlink" title="依赖排除"></a>依赖排除</h3><p>依赖排除就是在依赖引入的过程中，通过<code>exclusions</code>标签排掉指定的跟随依赖</p><p><img data-src="/assets/%E4%BE%9D%E8%B5%96%E6%8E%92%E9%99%A4.png" alt="依赖排除"></p><h3 id="版本锁定"><a href="#版本锁定" class="headerlink" title="版本锁定"></a>版本锁定</h3><p>面对众多的依赖，有一种方法不用考虑依赖路径、声明优先等因素，可以采用直接锁定版本的方法确定依赖构件的版本</p><p>版本锁定后，系统会以锁定的版本的为准添加到工程中，此方法在企业开发中常用。</p><p><img data-src="/assets/%E7%89%88%E6%9C%AC%E9%94%81%E5%AE%9A.png" alt="版本锁定"></p><p><strong>优化: 提取版本信息</strong> </p><p><img data-src="/assets/%E4%BC%98%E5%8C%96%E7%89%88%E6%9C%AC%E9%94%81%E5%AE%9A-%E6%8F%90%E5%8F%96%E7%89%88%E6%9C%AC%E4%BF%A1%E6%81%AF.png" alt="优化版本锁定-提取版本信息"></p><h1 id="私服"><a href="#私服" class="headerlink" title="私服"></a>私服</h1><h2 id="私服简介"><a href="#私服简介" class="headerlink" title="私服简介"></a>私服简介</h2><p>公司在自己的局域网内搭建自己的远程仓库服务器，称为私服，私服服务器即是公司内部的maven远程仓库，每个员工的电脑上安装maven软件并且连接私服服务器，员工将自己开发的项目打成jar并发布到私服服务器，其它项目组从私服服务器下载所依赖的构件（jar）。</p><p><img data-src="/assets/%E7%A7%81%E6%9C%8D.jpg" alt="私服"></p><h2 id="搭建私服环境"><a href="#搭建私服环境" class="headerlink" title="搭建私服环境"></a>搭建私服环境</h2><h3 id="下载nexus"><a href="#下载nexus" class="headerlink" title="下载nexus"></a>下载nexus</h3><p>Nexus是Maven仓库管理器，通过nexus可以搭建maven仓库, 软件已经提供在资料中<code>nexus-2.12.0-01-bundle.zip</code></p><p><img data-src="/assets/image-20200628144428365.png" alt="image-20200628144428365"></p><h3 id="安装nexus"><a href="#安装nexus" class="headerlink" title="安装nexus"></a>安装nexus</h3><p>第1步:  解压nexus-2.12.0-01-bundle.zip到一个没有中文没有空格的目录  </p><p> <img data-src="/assets/image-20200628145356064.png" alt="image-20200628145356064"></p><p>第2步: 以<code>管理员身份</code>运行cmd命令, 然后进入软件的bin目录，通过命令安装并启动nexus软件</p><p> <img data-src="/assets/image-20200628145948727.png" alt="image-20200628145948727"></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">补充下停止和下载的命令</span><br><span class="line">  停止 nexus.bat  stop</span><br><span class="line">  卸载 nexus.bat  uninstall</span><br></pre></td></tr></table></figure><p>第3步: 访问nexus</p><p>nexus默认监听端口为8081, 通过 <code>http://localhost:8081/nexus</code> 即可访问</p><p><img data-src="/assets/image-20200628150353480.png" alt="image-20200628150353480"></p><p>第4步: 登录nexus</p><p>nexus默认的用户名是==admin==, 默认的密码是==admin123==</p><p> <img data-src="/assets/image-20200628151112905.png" alt="image-20200628151112905"></p><p>登录成功后,会看到下面的内容:</p><p> <img data-src="/assets/image-20200628151303488.png" alt="image-20200628151303488"></p><h2 id="仓库类型"><a href="#仓库类型" class="headerlink" title="仓库类型"></a>仓库类型</h2><p>仓库有下面四类:</p><ul><li>proxy  代理仓库, 用于代理远程仓库(中央)</li><li>virtual  废弃的代理仓库</li><li>hosted  用于本地jar包上传的仓库</li><li>group  就是上面仓库的综合, 用于jar包的下载</li></ul><p><img data-src="/assets/image-20200628151528804.png" alt="image-20200628151528804"></p><h2 id="将项目发布到私服"><a href="#将项目发布到私服" class="headerlink" title="将项目发布到私服"></a>将项目发布到私服</h2><p>企业中多个团队协作开发通常会将一些公用的组件、开发模块等发布到私服供其它团队或模块开发人员使用。</p><p>第1步：在maven的settings.xml文件中,  添加下面配置</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    此用户名和密码用于私服校验，因为私服需要知道上传的账号和密码是否和私服中的账号和密码一致。</span></span><br><span class="line"><span class="comment">    添加到servers节点下</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第2步： 在需要操作的模块(比如ssm_dao)的pom.xml文件中, 添加下面配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">配置私服仓库的地址，如果版本为release则上传到私服的release仓库，如果版本为snapshot则上传到私服的snapshot仓库</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/repositories/releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/repositories/snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第3步： 选择需要操作的模块(比如ssm_dao), 执行deploy命令</p><p> <img data-src="/assets/image-20200628154108687.png" alt="image-20200628154108687"></p><p>第4步: 执行完毕后, 可以在私服的对应目录下观察到上传的文件</p><p> <img data-src="/assets/image-20200628154910224.png" alt="image-20200628154910224"></p><h2 id="从私服下载jar包"><a href="#从私服下载jar包" class="headerlink" title="从私服下载jar包"></a>从私服下载jar包</h2><p>配置nexus之后，本地仓库没有jar包，就去私服下载，私服如果没有, 再由私服去中央下载。</p><p>第1步:  在maven的settings.xml文件中, 添加下面配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置下载仓库--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">repository</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">releases</span>&gt;</span>  </span><br><span class="line">       <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>Public Repositories<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--使用profile定义仓库需要激活才可生效--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第2步: 测试</p><p>1)  首先在ssm_parent工程上执行install, 这样就可以将所有模块打包到本地仓库</p><p>2)  然后删除本地仓库中的ssm_dao的文件</p><p>3)  在ssm_service模块上执行compile命令</p><p>​     注意: service 要编译成功必须依赖仓库中的ssm_dao,而现在本地仓库中没有, 他就会从私服下载</p><p>4)  通过控制台观察效果</p><p><img data-src="/assets/image-20200628162939278.png" alt="image-20200628162939278"></p><h1 id="软件的服务模式"><a href="#软件的服务模式" class="headerlink" title="软件的服务模式"></a>软件的服务模式</h1><p>目前, 软件服务主要有三种模式:</p><ul><li><strong>IaaS（基础设施即服务）</strong> 提供给客户最基础的东西, 然后客户自己完成所有工作</li><li><strong>PaaS（平台即服务）</strong>提供给客户半成品的东西, 然后客户自己完成剩下的工作</li><li><strong>SaaS（软件即服务）</strong>提供给客户成品,  客户只需要使用</li></ul><p><img data-src="/assets/%E8%BD%AF%E4%BB%B6%E6%9C%8D%E5%8A%A1%E6%A8%A1%E5%BC%8F.png" alt="软件服务模式"></p><p>SaaS（Software-as-a-service）的意思是软件即服务。简单说就是在线系统模式，即软件服务商提供的软件在线服务。</p><p>SaaS软件就适用对象而言，可以划分为针对个人的与针对企业的</p><ul><li>面向个人的SaaS产品：在线文档，账务管理，文件管理，日程计划、照片管理、联系人管理，等等云类型的服务</li><li>面向企业的SaaS产品：CRM（客户关系管理）、线上视频或者与群组通话会议、OA(办公系统)、外勤管理、财务管理、审批管理等</li></ul><h2 id="软件开发流程"><a href="#软件开发流程" class="headerlink" title="软件开发流程"></a>软件开发流程</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>货代平台开发周期6个月左右，团队需要10人左右...</span><br><span class="line"><span class="code">技术总监或架构师产品经理或项目经理java开发前端和美工测试    运维</span></span><br><span class="line"><span class="code">   11  4         2  1       1</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">1. </span>立项</span><br><span class="line"><span class="code">项目可实施性分析：（招商银行）100W项目，开发周期预计6个月，需要10人，运营（人力）成本2W/人</span></span><br><span class="line"><span class="code">产品经理入住银行，进行需求调研《需求设计说明书》</span></span><br><span class="line"><span class="code">需求研讨会：团队所有成员参加</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>设计</span><br><span class="line"><span class="code">UI/UE工程师：《页面原型》</span></span><br><span class="line"><span class="code">架构师：统一开发环境，项目技术选项，项目架构设计，数据库设计等等《概要设计说明书》</span></span><br><span class="line"><span class="code">产品经理：接口规范、方法规范、参数规范、步骤要求等等《详细设计说明书》</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">3. </span>开发</span><br><span class="line"><span class="code">coding（编码），码农</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">4. </span>测试</span><br><span class="line"><span class="code">白盒测试：代码逻辑和性能</span></span><br><span class="line"><span class="code">黑盒测试：用户体验</span></span><br><span class="line"><span class="code">灰盒测试：黑+白</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">5. </span>部署</span><br><span class="line"><span class="code">运维人员产品部署上传维护....</span></span><br></pre></td></tr></table></figure><h1 id="UML建模"><a href="#UML建模" class="headerlink" title="UML建模"></a>UML建模</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>UML</code>：统一建模语言（UML，UnifiedModelingLanguage）是面向对象软件的标准化建模语言。UML因其简单、统一的特点，而且能表达软件设计中的动态和静态信息，目前已成为可视化建模语言的工业标准。</p><p><code>PowerDesigner</code>：一款绘制各种UML图形的工具    </p><h2 id="用例图"><a href="#用例图" class="headerlink" title="用例图"></a>用例图</h2><p>在整个项目中会有不同的角色在使用，但是不同的角色在项目中做的事儿或者说看到的菜单是不一样的，为了让程序员更直观的获取到需求信息，项目经理或产品经理会使用用例图直观的表示出来。</p><p><img data-src="/assets/%E7%94%A8%E4%BE%8B%E5%9B%BE-1.png" alt="用例图-1"></p><p><img data-src="/assets/%E7%94%A8%E4%BE%8B%E5%9B%BE-2.png" alt="用例图-2"></p><p><img data-src="/assets/%E7%94%A8%E4%BE%8B%E5%9B%BE-3.png" alt="用例图-3"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;分模块开发&quot;&gt;&lt;a href=&quot;#分模块开发&quot; class=&quot;headerlink&quot; title=&quot;分模块开发&quot;&gt;&lt;/a&gt;分模块开发&lt;/h1&gt;&lt;h2 id=&quot;拆分与聚合的思想&quot;&gt;&lt;a href=&quot;#拆分与聚合的思想&quot; class=&quot;headerlink&quot; title=&quot;拆分与聚合的思想&quot;&gt;&lt;/a&gt;拆分与聚合的思想&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;拆分&lt;/strong&gt; 将原来的一个项目拆分成一个个小的模块, 每个模块都有自己的坐标,  当其它项目需要本模块的功能时, 只需要按照坐标引入本模块就可以了&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;聚合&lt;/strong&gt; 通过坐标的形式，将各个模块组装在一起,完成一个项目的功能&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&quot;/assets/%E6%8B%86%E5%88%86%E4%B8%8E%E8%81%9A%E5%90%88%E6%80%9D%E6%83%B3.png&quot; alt=&quot;拆分与聚合思想&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Maven" scheme="http://sunmoon.com/categories/Maven/"/>
    
    
      <category term="Mavne高级" scheme="http://sunmoon.com/tags/Mavne%E9%AB%98%E7%BA%A7/"/>
    
      <category term="分模块开发" scheme="http://sunmoon.com/tags/%E5%88%86%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91/"/>
    
      <category term="UML建模" scheme="http://sunmoon.com/tags/UML%E5%BB%BA%E6%A8%A1/"/>
    
      <category term="Saas" scheme="http://sunmoon.com/tags/Saas/"/>
    
  </entry>
  
  <entry>
    <title>SSM的整合</title>
    <link href="http://sunmoon.com/2020/09/29/SSM%E7%9A%84%E6%95%B4%E5%90%88/"/>
    <id>http://sunmoon.com/2020/09/29/SSM%E7%9A%84%E6%95%B4%E5%90%88/</id>
    <published>2020-09-29T09:52:05.000Z</published>
    <updated>2020-09-29T10:00:36.008Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSM整合"><a href="#SSM整合" class="headerlink" title="SSM整合"></a>SSM整合</h1><h2 id="回顾SSM"><a href="#回顾SSM" class="headerlink" title="回顾SSM"></a>回顾SSM</h2><p>S : Spring——全栈</p><p>S : SpringMVC——表现层</p><p>M : Mybaits——持久层</p><a id="more"></a><h2 id="整合思路"><a href="#整合思路" class="headerlink" title="整合思路"></a>整合思路</h2><p>SSM整合基本思路：使用Spring( 容器 )来整合Mybatis和SpringMVC</p><p>整合步骤是这样：</p><ol><li>先各自搭建SSM的环境</li><li>使用Spring整合Mybatis</li><li>使用Spring整合SpringMVC</li></ol><p><img data-src="/assets/SSM%E6%95%B4%E5%90%88%E6%80%9D%E8%B7%AF.png" alt="SSM整合思路"></p><h2 id="准备数据环境"><a href="#准备数据环境" class="headerlink" title="准备数据环境"></a>准备数据环境</h2><blockquote><p>spring库</p><p>account表</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">account</span>(</span><br><span class="line">aid <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">unique</span>,</span><br><span class="line">balance <span class="built_in">float</span>(<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="搭建Mybatis环境"><a href="#搭建Mybatis环境" class="headerlink" title="搭建Mybatis环境"></a>搭建Mybatis环境</h2><h3 id="创建工程，导入相依赖"><a href="#创建工程，导入相依赖" class="headerlink" title="创建工程，导入相依赖"></a>创建工程，导入相依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--MySQL--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--log4j--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer aid;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Float balance;</span><br><span class="line">    <span class="comment">//get、set略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建Dao接口"><a href="#创建Dao接口" class="headerlink" title="创建Dao接口"></a>创建Dao接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 账户列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建Dao的映射文件"><a href="#创建Dao的映射文件" class="headerlink" title="创建Dao的映射文件"></a>创建Dao的映射文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> </span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.sun.dao.AccountDao"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.Account"</span>&gt;</span></span><br><span class="line">        select * from account</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="加入Mybatis配置文件"><a href="#加入Mybatis配置文件" class="headerlink" title="加入Mybatis配置文件"></a>加入Mybatis配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbc.properties"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--全局设置：可以设置缓存、懒加载等--&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--设置别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.sun.domain"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.sun.dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>jdbc.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span> = <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span> = <span class="string">jdbc:mysql:///spring</span></span><br><span class="line"><span class="meta">jdbc.username</span> =  <span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span> = <span class="string">root</span></span><br></pre></td></tr></table></figure><h3 id="加入log4j日志配置文件"><a href="#加入log4j日志配置文件" class="headerlink" title="加入log4j日志配置文件"></a>加入log4j日志配置文件</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span> = <span class="string">debug,stdout</span></span><br><span class="line"><span class="meta">log4j.appender.stdout</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout.ConversionPattern</span> = <span class="string">[%-5p] %d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; method:%l%n%m%n</span></span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">//读取配置文件</span></span><br><span class="line">    InputStream in = Resources.getResourceAsStream(<span class="string">"mybatis-config.xml"</span>);</span><br><span class="line">    <span class="comment">//获取SqlSessionFactory</span></span><br><span class="line">    SqlSessionFactory sessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">    <span class="comment">//获取SqlSession</span></span><br><span class="line">    SqlSession sqlSession = sessionFactory.openSession();</span><br><span class="line">    <span class="comment">//获取dao对象</span></span><br><span class="line">    AccountDao mapper = sqlSession.getMapper(AccountDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    List&lt;Account&gt; accountList = mapper.findAll();</span><br><span class="line">    <span class="keyword">for</span> (Account account : accountList) &#123;</span><br><span class="line">        System.out.println(account);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="搭建Spring环境"><a href="#搭建Spring环境" class="headerlink" title="搭建Spring环境"></a>搭建Spring环境</h2><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建Service接口"><a href="#创建Service接口" class="headerlink" title="创建Service接口"></a>创建Service接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 账户列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建Service实现类"><a href="#创建Service实现类" class="headerlink" title="创建Service实现类"></a>创建Service实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Todo 等待dao整合结束</span></span><br><span class="line">    <span class="comment">//@Autowired</span></span><br><span class="line">    <span class="comment">//private AccountDao accountDao;</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查询成功"</span>);</span><br><span class="line">        <span class="comment">//Todo 等待dao整合结束</span></span><br><span class="line">        <span class="comment">//return accountDao.findAll();</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="加入Spring配置文件"><a href="#加入Spring配置文件" class="headerlink" title="加入Spring配置文件"></a>加入Spring配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.sun.service"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//创建Spring的容器</span></span><br><span class="line">        ApplicationContext act = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">//获取对象，调用方法</span></span><br><span class="line">        AccountService accountService = act.getBean(AccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        List&lt;Account&gt; accounts = accountService.findAll();</span><br><span class="line">        <span class="keyword">if</span> (accounts != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (Account account : accounts) &#123;</span><br><span class="line">                System.out.println(account);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="搭建SpringMVC环境"><a href="#搭建SpringMVC环境" class="headerlink" title="搭建SpringMVC环境"></a>搭建SpringMVC环境</h2><h3 id="导入依赖-1"><a href="#导入依赖-1" class="headerlink" title="导入依赖"></a>导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpringMVC相关--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="加入SpringMVC配置文件"><a href="#加入SpringMVC配置文件" class="headerlink" title="加入SpringMVC配置文件"></a>加入SpringMVC配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.sun.controller"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--三大组件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span></span></span><br></pre></td></tr></table></figure><h3 id="配置web-xml"><a href="#配置web-xml" class="headerlink" title="配置web.xml"></a>配置web.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span></span></span><br><span class="line"><span class="tag"><span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--前端控制器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--编码过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="开发请求页面"><a href="#开发请求页面" class="headerlink" title="开发请求页面"></a>开发请求页面</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;index&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;</span><br><span class="line">        &lt;a href="$&#123;pageContext.request.contextPath&#125;/accountController/list"&gt;查询列表&lt;/a&gt;</span><br><span class="line">    &lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="开发Controller"><a href="#开发Controller" class="headerlink" title="开发Controller"></a>开发Controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Todo 等待整合结束</span></span><br><span class="line">    <span class="comment">//@Autowired</span></span><br><span class="line">    <span class="comment">//private AccountService accountService;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/accountController/list"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        <span class="comment">//Todo 等待整合结束</span></span><br><span class="line">        <span class="comment">//List&lt;Account&gt; accounts = accountService.findAll();</span></span><br><span class="line">        request.setAttribute(<span class="string">"accounts"</span>,<span class="string">"xxxxx"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="开发响应页面"><a href="#开发响应页面" class="headerlink" title="开发响应页面"></a>开发响应页面</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;list&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    $&#123;requestScope.accounts&#125;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="测试-略"><a href="#测试-略" class="headerlink" title="测试(略)"></a>测试(略)</h3><h2 id="Spring整合Mybatis"><a href="#Spring整合Mybatis" class="headerlink" title="Spring整合Mybatis"></a>Spring整合Mybatis</h2><h3 id="整合思路-1"><a href="#整合思路-1" class="headerlink" title="整合思路"></a>整合思路</h3><p>将mybatis的所有配置信息转移到Spring的配置文件中</p><p>将Mybatis的SqlSessionFactory托管到Spring的容器中</p><h3 id="添加整合包"><a href="#添加整合包" class="headerlink" title="添加整合包"></a>添加整合包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Spring整合Mybatis的包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="将mybatis的所有配置信息转移到Spring的配置文件中"><a href="#将mybatis的所有配置信息转移到Spring的配置文件中" class="headerlink" title="将mybatis的所有配置信息转移到Spring的配置文件中"></a>将mybatis的所有配置信息转移到Spring的配置文件中</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置数据源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入映射文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mapperScannerConfigurer"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.sun.dao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--SqlSessionFactor托管--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"com.sun.domain"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在Service中注入Dao"><a href="#在Service中注入Dao" class="headerlink" title="在Service中注入Dao"></a>在Service中注入Dao</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> accountDao.findAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">//创建Spring的容器</span></span><br><span class="line">    ApplicationContext act = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">    <span class="comment">//获取对象，调用方法</span></span><br><span class="line">    AccountService accountService = act.getBean(AccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    List&lt;Account&gt; accounts = accountService.findAll();</span><br><span class="line">    <span class="keyword">if</span> (accounts != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span> (Account account : accounts) &#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring整合SpringMVC"><a href="#Spring整合SpringMVC" class="headerlink" title="Spring整合SpringMVC"></a>Spring整合SpringMVC</h2><h3 id="整合思路-2"><a href="#整合思路-2" class="headerlink" title="整合思路"></a>整合思路</h3><p>Spring和SpringMVC本身就是一家产品，是不用整合的，</p><p>但是现在的Spring容器自己无法启动，我们需要在web容器启动的时候，加载Spring的配置文件，启动Spring容器</p><p>那么这个工作是在spring-web包中的一个监听器来做的，这个包不用单独导入，他已经在 spring-webmvc 包中了</p><p><strong>它会监听WEB容器的启动和停止，然后就可以控制Spring容器的启动和停止了</strong></p><h3 id="web-xml配置监听器"><a href="#web-xml配置监听器" class="headerlink" title="web.xml配置监听器"></a>web.xml配置监听器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Spring监听器--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--传递Spring配置文件给监听器，一共监听器读取进而启动Spring容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在Controller注入Service对象"><a href="#在Controller注入Service对象" class="headerlink" title="在Controller注入Service对象"></a>在Controller注入Service对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/accountController/list"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    List&lt;Account&gt; accounts = accountService.findAll();</span><br><span class="line">    request.setAttribute(<span class="string">"accounts"</span>,accounts);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"list"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="部署测试-略…"><a href="#部署测试-略…" class="headerlink" title="部署测试(略…)"></a>部署测试(略…)</h3><h3 id="列表查询"><a href="#列表查询" class="headerlink" title="列表查询"></a>列表查询</h3><ul><li>list.jsp</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;list&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;table border=<span class="string">"1px"</span> cellpadding=<span class="string">"0"</span> cellspacing=<span class="string">"0"</span> width=<span class="string">"500px"</span> align=<span class="string">"center"</span>&gt;</span><br><span class="line">    &lt;thead&gt;</span><br><span class="line">        &lt;th&gt;id&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;名称&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;余额&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">    &lt;/thead&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">"$&#123;requestScope.accounts&#125;"</span> <span class="keyword">var</span>=<span class="string">"account"</span>&gt;</span><br><span class="line">        &lt;tr align=<span class="string">"center"</span>&gt;</span><br><span class="line">            &lt;td&gt;$&#123;account.aid&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;account.name&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;account.balance&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;修改|删除&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="增删改查案例"><a href="#增删改查案例" class="headerlink" title="增删改查案例"></a>增删改查案例</h1><h2 id="思路图"><a href="#思路图" class="headerlink" title="思路图"></a>思路图</h2><p><img data-src="/assets/%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E6%A1%88%E4%BE%8B%E6%80%9D%E8%B7%AF%E5%9B%BE.png" alt="增删改查案例思路图"></p><h2 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h2><h3 id="在list页面添加跳转到新增页面的按钮"><a href="#在list页面添加跳转到新增页面的按钮" class="headerlink" title="在list页面添加跳转到新增页面的按钮"></a>在list页面添加跳转到新增页面的按钮</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 align="center"&gt;&lt;a href="$&#123;pageContext.request.contextPath&#125;/accountController/toAdd"&gt;新增账户&lt;/a&gt;&lt;/h1&gt;</span><br></pre></td></tr></table></figure><h3 id="Controller添加跳转到增加页面的方法"><a href="#Controller添加跳转到增加页面的方法" class="headerlink" title="Controller添加跳转到增加页面的方法"></a>Controller添加跳转到增加页面的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/accountController/toAdd"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"add"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="WEB-INF下创建新增页面"><a href="#WEB-INF下创建新增页面" class="headerlink" title="WEB-INF下创建新增页面"></a>WEB-INF下创建新增页面</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;add.jsp&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div style=<span class="string">"width: 500px;margin: 100px auto;border: 1px solid gray;padding: 20px"</span> &gt;</span><br><span class="line">    &lt;h1&gt;新增&lt;/h1&gt;</span><br><span class="line">    &lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/accountController/add"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">        &lt;label for="name"&gt;名称：&lt;/label&gt;&lt;input id="name" type="text" name="name"&gt;&lt;br/&gt;&lt;br/&gt;</span><br><span class="line">        &lt;label for="balance"&gt;余额：&lt;/label&gt;&lt;input id="balance" type="text" name="balance"&gt;&lt;br/&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> value=<span class="string">"保存"</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="Controller编写添加的方法"><a href="#Controller编写添加的方法" class="headerlink" title="Controller编写添加的方法"></a>Controller编写添加的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/accountController/add"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">(Account account)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    accountService.save(account);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/accountController/list"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Service是接口-实现类"><a href="#Service是接口-实现类" class="headerlink" title="Service是接口+实现类"></a>Service是接口+实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">    accountDao.save(account);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Dao接口-映射"><a href="#Dao接口-映射" class="headerlink" title="Dao接口+映射"></a>Dao接口+映射</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"save"</span>&gt;</span></span><br><span class="line">    insert into account values(null,#&#123;name&#125;,#&#123;balance&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><h3 id="数据回显"><a href="#数据回显" class="headerlink" title="数据回显"></a>数据回显</h3><h4 id="在list页面上添加修改按钮"><a href="#在list页面上添加修改按钮" class="headerlink" title="在list页面上添加修改按钮"></a>在list页面上添加修改按钮</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="/accountController/toUpdate?aid=$&#123;account.aid&#125;"&gt;修改&lt;/a&gt;</span><br></pre></td></tr></table></figure><h4 id="Controller添加跳转到增加页面的方法-1"><a href="#Controller添加跳转到增加页面的方法-1" class="headerlink" title="Controller添加跳转到增加页面的方法"></a>Controller添加跳转到增加页面的方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/accountController/toUpdate"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toUpdate</span><span class="params">(Integer aid,HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    Account account = accountService.findByAid(aid);</span><br><span class="line">    request.setAttribute(<span class="string">"account"</span>,account);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"update"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在service添加查询方法接口-实现类"><a href="#在service添加查询方法接口-实现类" class="headerlink" title="在service添加查询方法接口+实现类"></a>在service添加查询方法接口+实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Account <span class="title">findByAid</span><span class="params">(Integer aid)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">findByAid</span><span class="params">(Integer aid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> accountDao.findByAid(aid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在dao中添加查询方法接口-映射"><a href="#在dao中添加查询方法接口-映射" class="headerlink" title="在dao中添加查询方法接口+映射"></a>在dao中添加查询方法接口+映射</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Account <span class="title">findByAid</span><span class="params">(Integer aid)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByAid"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.Account"</span>&gt;</span></span><br><span class="line">    select * from account where aid = #&#123;aid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="添加修改账户页面"><a href="#添加修改账户页面" class="headerlink" title="添加修改账户页面"></a>添加修改账户页面</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;update&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div style=<span class="string">"width: 500px;margin: 100px auto;border: 1px solid gray;padding: 20px"</span> &gt;</span><br><span class="line">    &lt;h1&gt;修改&lt;/h1&gt;</span><br><span class="line">    &lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/accountController/update"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"aid"</span> value=<span class="string">"$&#123;requestScope.account.aid&#125;"</span>&gt;</span><br><span class="line">        &lt;label for="name"&gt;名称：&lt;/label&gt;&lt;input id="name" type="text" name="name" value="$&#123;requestScope.account.name&#125;"&gt;&lt;br/&gt;&lt;br/&gt;</span><br><span class="line">        &lt;label for="balance"&gt;余额：&lt;/label&gt;&lt;input id="balance" type="text" name="balance" value="$&#123;requestScope.account.balance&#125;"&gt;&lt;br/&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> value=<span class="string">"修改"</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="修改提交"><a href="#修改提交" class="headerlink" title="修改提交"></a>修改提交</h3><h4 id="在controller中添加修改方法"><a href="#在controller中添加修改方法" class="headerlink" title="在controller中添加修改方法"></a>在controller中添加修改方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/accountController/update"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(Account account)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    accountService.update(account);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/accountController/list"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在service中添加修改方法接口-实现类"><a href="#在service中添加修改方法接口-实现类" class="headerlink" title="在service中添加修改方法接口+实现类"></a>在service中添加修改方法接口+实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Account account)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">    accountDao.update(account);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在dao添加修改方法接口-映射"><a href="#在dao添加修改方法接口-映射" class="headerlink" title="在dao添加修改方法接口+映射"></a>在dao添加修改方法接口+映射</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Account account)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span>&gt;</span></span><br><span class="line">    update account set name = #&#123;name&#125;, balance = #&#123;balance&#125; where aid = #&#123;aid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><h3 id="修改list页面，添加删除"><a href="#修改list页面，添加删除" class="headerlink" title="修改list页面，添加删除"></a>修改list页面，添加删除</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="javascript:void(0)" onclick="deleteByAid('$&#123;account.aid&#125;')"&gt;删除&lt;/a&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function">function <span class="title">deleteByAid</span><span class="params">(aid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> flag = confirm(<span class="string">"您确定要删除吗?"</span>);</span><br><span class="line">        <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">            window.location = <span class="string">"/accountController/delete?aid="</span>+aid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="在controller中添加删除方法"><a href="#在controller中添加删除方法" class="headerlink" title="在controller中添加删除方法"></a>在controller中添加删除方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/accountController/delete"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(Integer aid)</span></span>&#123;</span><br><span class="line">    accountService.delete(aid);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/accountController/list"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在service中添加删除方法接口-实现类"><a href="#在service中添加删除方法接口-实现类" class="headerlink" title="在service中添加删除方法接口+实现类"></a>在service中添加删除方法接口+实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer aid)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer aid)</span> </span>&#123;</span><br><span class="line">    accountDao.delete(aid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在dao添加删除方法接口-映射"><a href="#在dao添加删除方法接口-映射" class="headerlink" title="在dao添加删除方法接口+映射"></a>在dao添加删除方法接口+映射</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer aid)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"delete"</span>&gt;</span></span><br><span class="line">    delete from account where aid = #&#123;aid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="添加事务控制"><a href="#添加事务控制" class="headerlink" title="添加事务控制"></a>添加事务控制</h2><h3 id="xml版本"><a href="#xml版本" class="headerlink" title="xml版本"></a>xml版本</h3><p>在Spring中配置事务控制</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--切点--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pt"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.sun.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--切面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注解版本"><a href="#注解版本" class="headerlink" title="注解版本"></a>注解版本</h3><ul><li><p>删除xml版本的配置保留事务管理器</p></li><li><p>添加事务注解驱动</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在方法或者类上添加事务控制注解<code>@Transactional</code></li></ul><blockquote><p>例如：为保存方法添加事务控制</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">    accountDao.save(account);</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Spring的父子容器"><a href="#Spring的父子容器" class="headerlink" title="Spring的父子容器"></a>Spring的父子容器</h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>Spring和SpringMVC的容器具有父子关系，Spring容器为父容器，SpringMVC为子容器</p><p>子容器可以引用父容器中的Bean，而父容器不可以引用子容器中的Bean</p><p><img data-src="/assets/Spring%E7%88%B6%E5%AD%90%E5%AE%B9%E5%99%A8%E8%AF%B4%E6%98%8E.png" alt="Spring父子容器说明"></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><img data-src="/assets/Spring%E7%88%B6%E5%AD%90%E5%AE%B9%E5%99%A8%E9%85%8D%E7%BD%AE.png" alt="Spring父子容器配置"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SSM整合&quot;&gt;&lt;a href=&quot;#SSM整合&quot; class=&quot;headerlink&quot; title=&quot;SSM整合&quot;&gt;&lt;/a&gt;SSM整合&lt;/h1&gt;&lt;h2 id=&quot;回顾SSM&quot;&gt;&lt;a href=&quot;#回顾SSM&quot; class=&quot;headerlink&quot; title=&quot;回顾SSM&quot;&gt;&lt;/a&gt;回顾SSM&lt;/h2&gt;&lt;p&gt;S : Spring——全栈&lt;/p&gt;
&lt;p&gt;S : SpringMVC——表现层&lt;/p&gt;
&lt;p&gt;M : Mybaits——持久层&lt;/p&gt;
    
    </summary>
    
    
      <category term="框架" scheme="http://sunmoon.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="SSM的整合" scheme="http://sunmoon.com/tags/SSM%E7%9A%84%E6%95%B4%E5%90%88/"/>
    
      <category term="增删改查案例" scheme="http://sunmoon.com/tags/%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E6%A1%88%E4%BE%8B/"/>
    
      <category term="Spring的父子容器" scheme="http://sunmoon.com/tags/Spring%E7%9A%84%E7%88%B6%E5%AD%90%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC-2</title>
    <link href="http://sunmoon.com/2020/09/27/SpringMVC-2/"/>
    <id>http://sunmoon.com/2020/09/27/SpringMVC-2/</id>
    <published>2020-09-27T13:29:43.000Z</published>
    <updated>2020-09-27T13:32:32.361Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工程准备"><a href="#工程准备" class="headerlink" title="工程准备"></a>工程准备</h1><blockquote><p>新建工程，进行配置</p></blockquote><ul><li>pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--springmvc--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--servlet--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--jsp--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>spring-mvc.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注解扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.sun.controller"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--三大组件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--前后缀   他们会在页面跳转的时候,拼接在方法的返回值上--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>web.xml配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--前端控制器  @WebServlet( name="dispatcherServlet",urlPatterns="/" )--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--除了.jsp文件不拦截,其他文件全部拦截--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--中文乱码过滤器  @WebFilter( name="characterEncodingFilter",urlPatterns="/*" )--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>success.jsp</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;SUCCESS!!!!&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="页面跳转之转发"><a href="#页面跳转之转发" class="headerlink" title="页面跳转之转发"></a>页面跳转之转发</h1><h2 id="方式一：简单方式"><a href="#方式一：简单方式" class="headerlink" title="方式一：简单方式"></a>方式一：简单方式</h2><blockquote><p>设置前后缀后则会拼接前后缀</p></blockquote><h3 id="前台"><a href="#前台" class="headerlink" title="前台"></a>前台</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo1"&gt;转发——简单方式&lt;/a&gt;&lt;br&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转发方式一：简单方式，会拼接前后缀</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo1"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"到达了后台demo1"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方式二：使用forward"><a href="#方式二：使用forward" class="headerlink" title="方式二：使用forward"></a>方式二：使用forward</h2><blockquote><p>不会拼接前后缀</p></blockquote><h3 id="前台-1"><a href="#前台-1" class="headerlink" title="前台"></a>前台</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo2"&gt;转发——forward方式&lt;/a&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure><h3 id="后台-1"><a href="#后台-1" class="headerlink" title="后台"></a>后台</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转发方式二：forward方式,不会拼接前后缀</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"forward:/WEB-INF/success.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方式三：使用Servlet原生API"><a href="#方式三：使用Servlet原生API" class="headerlink" title="方式三：使用Servlet原生API"></a>方式三：使用Servlet原生API</h2><blockquote><p>不会拼接前后缀</p></blockquote><h3 id="前台-2"><a href="#前台-2" class="headerlink" title="前台"></a>前台</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo3"&gt;转发——原生Servlet方式&lt;/a&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure><h3 id="后台-2"><a href="#后台-2" class="headerlink" title="后台"></a>后台</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转发方式三：servlet原生实现，不会拼接前后缀</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo3"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo3</span><span class="params">(HttpServletRequest request , HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    request.getRequestDispatcher(<span class="string">"/WEB-INF/success.jsp"</span>).forward(request,response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="转发过程中的数据传递"><a href="#转发过程中的数据传递" class="headerlink" title="转发过程中的数据传递"></a>转发过程中的数据传递</h2><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><blockquote><p>直接使用request域进行数据传递</p></blockquote><h4 id="前台-3"><a href="#前台-3" class="headerlink" title="前台"></a>前台</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo4"&gt;转发——携带数据方式一&lt;/a&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure><h4 id="后台-3"><a href="#后台-3" class="headerlink" title="后台"></a>后台</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转发携带数据方式一</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo4"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo4</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    <span class="comment">//直接使用request域进行数据传递</span></span><br><span class="line">    request.setAttribute(<span class="string">"name"</span>,<span class="string">"jj"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><blockquote><p>使用Model(ModelMap)进行传递，底层会将数据放入request域中进行数据传递</p></blockquote><h4 id="前台-4"><a href="#前台-4" class="headerlink" title="前台"></a>前台</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo5"&gt;转发——携带数据方式二&lt;/a&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure><h4 id="后台-4"><a href="#后台-4" class="headerlink" title="后台"></a>后台</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转发携带数据方式二</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo5"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo5</span><span class="params">(Model model, ModelMap map)</span></span>&#123;</span><br><span class="line">    <span class="comment">//使用model进行传递，底层会将数据放入request域中进行数据传递</span></span><br><span class="line">    model.addAttribute(<span class="string">"name"</span>,<span class="string">"mm"</span>);</span><br><span class="line">    <span class="comment">//和ModelMap和Model作用相同</span></span><br><span class="line">    map.put(<span class="string">"age"</span>,<span class="string">"18"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h3><blockquote><p>使用ModelAndView进行数据传递，设置响应的视图和数据。</p></blockquote><h4 id="前台-5"><a href="#前台-5" class="headerlink" title="前台"></a>前台</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo6"&gt;转发——携带数据方式三&lt;/a&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure><h4 id="后台-5"><a href="#后台-5" class="headerlink" title="后台"></a>后台</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转发携带数据方式三</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo6"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">demo6</span><span class="params">(ModelAndView modelAndView)</span></span>&#123;</span><br><span class="line">    <span class="comment">//设置数据</span></span><br><span class="line">    modelAndView.addObject(<span class="string">"name"</span>,<span class="string">"jjmm"</span>);</span><br><span class="line">    <span class="comment">//设置视图(页面)</span></span><br><span class="line">    <span class="comment">//注意：这里会拼接前后缀</span></span><br><span class="line">    modelAndView.setViewName(<span class="string">"success"</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：ModelAndView设置视图时，会拼接前后缀</strong></p></blockquote><h1 id="页面跳转之重定向"><a href="#页面跳转之重定向" class="headerlink" title="页面跳转之重定向"></a>页面跳转之重定向</h1><h2 id="方式一：使用redirect重定向"><a href="#方式一：使用redirect重定向" class="headerlink" title="方式一：使用redirect重定向"></a>方式一：使用redirect重定向</h2><h3 id="前台-6"><a href="#前台-6" class="headerlink" title="前台"></a>前台</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo7"&gt;重定向跳转方式一&lt;/a&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure><h3 id="后台-6"><a href="#后台-6" class="headerlink" title="后台"></a>后台</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重定向跳转方式一</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo7"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo7</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/fail.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方式二：使用Servlet原生API"><a href="#方式二：使用Servlet原生API" class="headerlink" title="方式二：使用Servlet原生API"></a>方式二：使用Servlet原生API</h2><h3 id="前台-7"><a href="#前台-7" class="headerlink" title="前台"></a>前台</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo8"&gt;重定向跳转方式二&lt;/a&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure><h3 id="后台-7"><a href="#后台-7" class="headerlink" title="后台"></a>后台</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重定向跳转方式二</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo8"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo8</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    response.sendRedirect(request.getContextPath() + <span class="string">"/fail.jsp"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="补充：通过重定向访问WEB-INF下资源"><a href="#补充：通过重定向访问WEB-INF下资源" class="headerlink" title="补充：通过重定向访问WEB-INF下资源"></a>补充：通过重定向访问WEB-INF下资源</h2><blockquote><p>直接重定向访问WEB-INF下资源是访问不到的，可以<strong>重定向到一个可以转发到WEB-INF目录下的URL路径</strong></p></blockquote><h3 id="前台-8"><a href="#前台-8" class="headerlink" title="前台"></a>前台</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo9"&gt;重定向访问WEB-INF下资源&lt;/a&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure><h3 id="后台-8"><a href="#后台-8" class="headerlink" title="后台"></a>后台</h3><blockquote><p>重定向到前面写的转发方式一，访问WEN-INF下的success.jsp页面</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过重定向访问WEB-INF下资源</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo9"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo9</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/demoController/demo1"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="释放静态资源"><a href="#释放静态资源" class="headerlink" title="释放静态资源"></a>释放静态资源</h1><p>当有静态资源需要加载时，比如jquery.js，会出现404现象。[noHandlerFound No mapping for GET /js/jquery-3.3.1.js]</p><p>之所以发生这种情况是因为：现在SpringMVC的前端控制器DispatcherServlet的url-pattern配置的是 /，代表除了jsp请求不拦截，</p><p>其他的所有请求都会拦截，包括一些静态文件(js  html  css  jpg等等)，而拦截住之后，它又找不到对应的处理器方法来处理，因此报错。</p><p>下面有三种方式解决该问题</p><h2 id="方式一-1"><a href="#方式一-1" class="headerlink" title="方式一"></a>方式一</h2><p>在SpingMVC的配置文件中加入一段配置：<code>&lt;mvc:resources mapping=&quot;&quot; location=&quot;&quot;/&gt;</code></p><ul><li>mapping:用来指定一个映射地址，匹配访问地址</li><li>location:如果一个访问的地址可以被mapping指定的规则匹配上，就不再去调用处理器映射器查找相应的方法了，而是直接去location指定路径下获取资源。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    静态资源释放方式一</span></span><br><span class="line"><span class="comment">    mapping:用来指定一个映射地址，匹配访问地址</span></span><br><span class="line"><span class="comment">    location:如果一个访问的地址可以被mapping指定的规则匹配上，就不再去调用处理器映射器查找相应的方法了，而是直接去location指定路径下获取资源</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/js/*"</span> <span class="attr">location</span>=<span class="string">"/js/"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="方式二-1"><a href="#方式二-1" class="headerlink" title="方式二"></a>方式二</h2><p>在SpingMVC的配置文件中加入一段配置：<code>&lt;mvc:default-servlet-handler/&gt;</code></p><ul><li>配置下面的标签之前，请求是这样访问的：前端控制器将请求传给处理器映射器去寻找对应的处理方法，如果找不到，就会报404</li><li>配置之后，请求时这样访问的：前端控制器将请求传给处理器映射器去寻找对应的处理方法，如果找不到，暂时不报错，而是将这个请求转交给外部容器(Tomcat)的默认处理器(default-servlet)去处理。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    静态资源释放方式二</span></span><br><span class="line"><span class="comment">       配置下面的标签之前，请求是这样访问的：前端控制器将请求传给处理器映射器去寻找对应的处理方法，如果找不到，就会报404</span></span><br><span class="line"><span class="comment">       配置之后，请求时这样访问的：前端控制器将请求传给处理器映射器去寻找对应的处理方法，如果找不到，暂时不报错，而是将这个请求转交给外部容器(Tomcat)的默认处理器(default-servlet)去处理</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="方式三-1"><a href="#方式三-1" class="headerlink" title="方式三"></a>方式三</h2><p>在web.xml中修改前端控制器的拦截路径将<code>/</code>改为<code>*.do</code>，这种写法代表的是<code>拦截所有以.do结尾的访问地址，这就要求所有的请求路径上都加上.do</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--除了.jsp文件不拦截,其他文件全部拦截--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;url-pattern&gt;/&lt;/url-pattern&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        静态资源释放方式三</span></span><br><span class="line"><span class="comment">        这种写法代表拦截的是所有以.do结尾的访问地址，这就要求所有的请求路径上都加上.do</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在配置上面的前端控制器拦截以<code>.do</code>结尾的请求路径时，SpringMVC查找的时候是这样查找的：<strong>先按照最标准的路径去查找(即带着<code>.do</code>去查找)，如果找不到就去掉后缀(.do)再找一次</strong></p><ul><li><strong>意思就是即使我们在具体的控制器的方法上配置@RequestMapping()时，不指定后缀也能访问到…</strong></li><li><strong>但是前台请求地址时必须带着.do后缀</strong></li></ul><h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo1.do"&gt;请求1&lt;/a&gt;&lt;br&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo2.do"&gt;请求2&lt;/a&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定后缀</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo1.do"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不指定后缀</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="AJAX-JSON实现异步交互"><a href="#AJAX-JSON实现异步交互" class="headerlink" title="AJAX+JSON实现异步交互"></a>AJAX+JSON实现异步交互</h1><h2 id="回顾AJAX"><a href="#回顾AJAX" class="headerlink" title="回顾AJAX"></a>回顾AJAX</h2><ul><li>前台写法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.post(url,params,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;&#125;,<span class="string">"json"</span>)</span><br></pre></td></tr></table></figure><ul><li>后台写法</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List ----&gt; new objectMapper().writeValueAsString(List)----&gt;json-----&gt;response.write(json)</span><br></pre></td></tr></table></figure><h2 id="SpringMVC实现AJAX-JSON异步交互"><a href="#SpringMVC实现AJAX-JSON异步交互" class="headerlink" title="SpringMVC实现AJAX+JSON异步交互"></a>SpringMVC实现AJAX+JSON异步交互</h2><p>接下来我们研究ajax异步发送请求数据，后端返回json响应</p><p>在SpringMVC中,  这个功能主要是通过两个注解<code>@RequestBody</code>和@R<code>esponseBody</code>实现的。</p><ul><li><code>@RequestBody</code>：用于接收前端传递的请求体中的json数据，并可以自动转换封装进指定的对象中。</li><li><code>@ResponseBody</code>：用于将controller方法返回的对象通过转换器转换为指定的格式( 通常为json )之后，再写回响应。</li></ul><p><strong>注意:  Springmvc默认用MappingJackson2HttpMessageConverter对json数据进行转换，需要加入jackson的包</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>这个jackson的包,SpringMVC底层没有引入,需要我们单独导入</p></blockquote><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><h3 id="前台代码"><a href="#前台代码" class="headerlink" title="前台代码"></a>前台代码</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src="$&#123;pageContext.request.contextPath&#125;/js/jquery-3.3.1.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;button id="ajax-json"&gt;AJAX+JSON实现异步交互&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">"#ajax-json"</span>).click(function () &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type:<span class="string">"POST"</span>,</span><br><span class="line">            url:<span class="string">"$&#123;pageContext.request.contextPath&#125;/demoController/demo10"</span>,</span><br><span class="line">            contentType:<span class="string">"application/json"</span>,<span class="comment">/*代表的是前台向后台发送的数据类型为json*/</span></span><br><span class="line">            dataType:<span class="string">"json"</span>,<span class="comment">/*代表后台向前台返回的数据类型为json*/</span></span><br><span class="line">            data:<span class="string">'[&#123;"name":"张三","age":"18"&#125;,&#123;"name":"李四","age":"20"&#125;]'</span>,</span><br><span class="line">            success:function (data) &#123;</span><br><span class="line">                <span class="comment">//获取响应会的json信息</span></span><br><span class="line">                <span class="keyword">for</span>(let user of data)&#123;</span><br><span class="line">                    alert(user.name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="后台代码"><a href="#后台代码" class="headerlink" title="后台代码"></a>后台代码</h3><ul><li>User类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//set、get略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>处理器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//AJAX+JSON实现异步交互</span></span><br><span class="line"><span class="meta">@ResponseBody</span><span class="comment">//作用是将controller方法的返回值对象通过转换器转换为指的的格式(默认为json)之后，再写回相应</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo10"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">demo10</span><span class="params">(@RequestBody List&lt;User&gt; users)</span></span>&#123;<span class="comment">//@RequestBody作用是在请求体中获取json类型的数据，然后封装到指定集合或对象中</span></span><br><span class="line">    System.out.println(users);</span><br><span class="line">    <span class="keyword">return</span> users;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="restful风格"><a href="#restful风格" class="headerlink" title="restful风格"></a>restful风格</h1><h2 id="什么是restful风格"><a href="#什么是restful风格" class="headerlink" title="什么是restful风格"></a>什么是restful风格</h2><p>REST是一种软件架构风格，其强调HTTP应当以资源为中心[在请求地址中尽量的不要出现动词]。</p><p>REST规范了HTTP请求动作，使用四个词语分别表示对资源的CRUD操作: </p><ul><li><code>GET(获取)</code></li><li><code>POST(新建)</code></li><li><code>PUT(更新)</code></li><li><code>DELETE(删除)</code> </li></ul><table><thead><tr><th></th><th>原来</th><th>Restful</th></tr></thead><tbody><tr><td>保存</td><td>/saveUser</td><td>POST     /user</td></tr><tr><td>修改</td><td>/updateUser</td><td>PUT       /user</td></tr><tr><td>删除</td><td>/deleteUser?id=1</td><td>DELETE  /user/1</td></tr><tr><td>查询所有</td><td>/findAllUsers</td><td>GET        /user</td></tr><tr><td>查询一个</td><td>/findById?id=1</td><td>GET        /user/1</td></tr></tbody></table><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><h3 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h3><h4 id="前台-9"><a href="#前台-9" class="headerlink" title="前台"></a>前台</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;button id="restful1"&gt;演示restful风格_save&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">"#restful"</span>).click(function () &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type:<span class="string">"POST"</span>,</span><br><span class="line">            url:<span class="string">"$&#123;pageContext.request.contextPath&#125;/user"</span>,</span><br><span class="line">            contentType:<span class="string">"application/json"</span>,<span class="comment">/*代表的是前台向后台发送的数据类型为json*/</span></span><br><span class="line">            dataType:<span class="string">"json"</span>,<span class="comment">/*代表后台向前台返回的数据类型为json*/</span></span><br><span class="line">            data:<span class="string">'&#123;"name":"张三","age":"18"&#125;'</span>,</span><br><span class="line">            success:function (data) &#123;</span><br><span class="line">                alert(<span class="string">"提交成功"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="后台-9"><a href="#后台-9" class="headerlink" title="后台"></a>后台</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//演示restful风格</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/user"</span>,method = RequestMethod.POST)</span><br><span class="line"><span class="comment">//@PostMapping("/user") 作用和上面注解相同，是一种简写</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">saveUser</span><span class="params">(@RequestBody User user)</span></span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"1"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><h4 id="前台-10"><a href="#前台-10" class="headerlink" title="前台"></a>前台</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;button id="restful2"&gt;演示restful风格_find&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">"#restful2"</span>).click(function () &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type:<span class="string">"GET"</span>,</span><br><span class="line">            url:<span class="string">"$&#123;pageContext.request.contextPath&#125;/user"</span>,</span><br><span class="line">            contentType:<span class="string">"application/json"</span>,</span><br><span class="line">            dataType:<span class="string">"json"</span>,</span><br><span class="line">            data:<span class="string">''</span>,</span><br><span class="line">            success:function (data) &#123;</span><br><span class="line">                alert(<span class="string">"提交成功"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="后台-10"><a href="#后台-10" class="headerlink" title="后台"></a>后台</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//演示restful风格</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/user"</span>,method = RequestMethod.GET)</span><br><span class="line"><span class="comment">//@GetMapping("/user")  作用和上面注解相同，是一种简写</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">findUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"findUSer"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"findUser"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="异常处理机制"><a href="#异常处理机制" class="headerlink" title="异常处理机制"></a>异常处理机制</h1><p>对于异常的处理一般有两种方式:</p><ul><li><p>当前方法处理(try-catch)，这种处理方式会造成业务代码和异常处理代码的耦合</p></li><li><p>当前方法不处理, 出现异常后直接抛给调用者处理</p></li></ul><p>使用Spring框架后，我们的代码最终是由框架来调用的。也就是说，异常最终会抛到框架中，然后由框架指定异常处理器来统一处理异常。</p><p><img data-src="/assets/SpringMVC%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6.png" alt="SpringMVC异常处理机制"></p><h2 id="方式一：自定义异常处理器"><a href="#方式一：自定义异常处理器" class="headerlink" title="方式一：自定义异常处理器"></a>方式一：自定义异常处理器</h2><p><strong>重点:  自定义一个类实现HandlerExceptionResolver接口</strong></p><h3 id="自定义异常处理器类"><a href="#自定义异常处理器类" class="headerlink" title="自定义异常处理器类"></a>自定义异常处理器类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerException</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//记录日志</span></span><br><span class="line">        System.out.println(e.getMessage());</span><br><span class="line">        <span class="comment">// 返回页面</span></span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mv.setViewName(<span class="string">"error"</span>);<span class="comment">//会拼接前后缀</span></span><br><span class="line">        mv.addObject(<span class="string">"message"</span>,e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在配置文件中注入对象"><a href="#在配置文件中注入对象" class="headerlink" title="在配置文件中注入对象"></a>在配置文件中注入对象</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"handlerException"</span> <span class="attr">class</span>=<span class="string">"com.sun.handlers.HandlerException"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>前台</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo11"&gt;测试自定义异常处理器&lt;/a&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><p>后台</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试自定义异常处理器</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo11"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo11</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>error界面</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;error&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;错误！！！&lt;/h1&gt;</span><br><span class="line">    $&#123;requestScope.message&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="方式二：-ControllerAdvice注解"><a href="#方式二：-ControllerAdvice注解" class="headerlink" title="方式二：@ControllerAdvice注解"></a>方式二：@ControllerAdvice注解</h2><p><code>@ControllerAdvice</code> ：此注解标注在一个类上，代表这是一个全局异常处理器的类</p><p><code>@ExceptionHandler(Exception.class)</code> ：此注解标在方法上，它支持一个value属性，用于定义当前方法可以处理的异常类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span> <span class="comment">//此注解标注在一个类上，代表这是一个全局异常处理器的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerException2</span></span>&#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(Exception<span class="class">.<span class="keyword">class</span>) //此注解标在方法上，它支持一个<span class="title">value</span>属性，用于定义当前方法可以处理的异常类型</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">resolveException</span>(<span class="title">HttpServletRequest</span> <span class="title">request</span>,<span class="title">Exception</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//记录日志</span></span><br><span class="line">        System.out.println(e.getMessage());</span><br><span class="line">        <span class="comment">//返回页面</span></span><br><span class="line">        request.setAttribute(<span class="string">"message"</span>,e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意在配置文件中添加注解扫描：<code>&lt;context:component-scan base-package=&quot;com.sun.handlers&quot;/&gt;</code></p></blockquote><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>略…</p><h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h1><h2 id="什么是拦截器"><a href="#什么是拦截器" class="headerlink" title="什么是拦截器"></a>什么是拦截器</h2><p>拦截器是Spring提供的一种技术，它的功能似于过滤器Filter，它会在<strong>进入controller之前，离开controller之后以及页面渲染完毕之后</strong>进行拦截。</p><p><img data-src="/assets/SpringMVC%E6%8B%A6%E6%88%AA%E5%99%A8.png" alt="SpringMVC拦截器"></p><h2 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h2><p>重点：自定义一个类实现<code>HandlerInterceptor</code>接口</p><h3 id="开发拦截器"><a href="#开发拦截器" class="headerlink" title="开发拦截器"></a>开发拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandlerInterceptor1</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"在进入controller之前1..."</span>);</span><br><span class="line">        <span class="comment">//此返回值代表是否放行当前请求，true为放行，false禁止放心</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"在离开controller之后1..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"在页面渲染完毕后1..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置拦截器链--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置拦截器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用于配置拦截规则--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用于配置不拦截的规则--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/demoController/demo1"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--将上面规则匹配到的拦截请求，交给拦截器处理--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myHandlerInterceptor1"</span> <span class="attr">class</span>=<span class="string">"com.sun.handlers.MyHandlerInterceptor1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo12"&gt;测试拦截器&lt;/a&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试拦截器</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo12"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo12</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"进入controller"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义拦截器链"><a href="#自定义拦截器链" class="headerlink" title="自定义拦截器链"></a>自定义拦截器链</h2><p>开发中拦截器可以单独使用，也可以同时使用多个拦截器形成一条拦截器链。</p><p>开发步骤和单个拦截器是一样的，只不过注册的时候注册多个，<code>注意这里注册的顺序就代表拦截器执行的顺序</code>。</p><h3 id="再开发拦截器"><a href="#再开发拦截器" class="headerlink" title="再开发拦截器"></a>再开发拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandlerInterceptor2</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"在进入controller2之前..."</span>);</span><br><span class="line">        <span class="comment">//此返回值代表是否放行当前请求，true为放行，false禁止放心</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"在离开controller2之后..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"在页面渲染完毕后2..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置拦截器链--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置拦截器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用于配置拦截规则--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用于配置不拦截的规则--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/demoController/demo1"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--将上米娜规则匹配到的拦截请求，交给拦截器处理--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myHandlerInterceptor1"</span> <span class="attr">class</span>=<span class="string">"com.sun.handlers.MyHandlerInterceptor1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/demoController/demo1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myHandlerInterceptor2"</span> <span class="attr">class</span>=<span class="string">"com.sun.handlers.MyHandlerInterceptor2"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="补充：拦截器释放静态资源"><a href="#补充：拦截器释放静态资源" class="headerlink" title="补充：拦截器释放静态资源"></a>补充：拦截器释放静态资源</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/**/*.css"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/**/*.js"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/**/*.png"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/**/*.gif"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/**/*.jpg"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/**/*.jpeg"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="案例：使用拦截器完成用户的访问拦截"><a href="#案例：使用拦截器完成用户的访问拦截" class="headerlink" title="案例：使用拦截器完成用户的访问拦截"></a>案例：使用拦截器完成用户的访问拦截</h2><p>需求：</p><ul><li>用户访问一个主页面index.jsp(首页, 权限控制)</li><li>如果用户已经登录，即可成功访问</li><li>如果用户没有登录，不允许访问，返回登录页面login.jsp</li></ul><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p><img data-src="/assets/%E6%8B%A6%E6%88%AA%E5%99%A8%E6%A1%88%E4%BE%8B%EF%BC%9A%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95.png" alt="拦截器案例：用户登录"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="login-jsp"><a href="#login-jsp" class="headerlink" title="login.jsp"></a>login.jsp</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;login.jsp&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/login"</span>&gt;</span><br><span class="line">    &lt;label for="username"&gt;用户名：&lt;/label&gt;&lt;input type="text" id="username" name="username"/&gt;</span><br><span class="line">    &lt;label for="password"&gt;密码：&lt;/label&gt;&lt;input type="text" id="password" name="password"/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"登录"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="配置欢迎页"><a href="#配置欢迎页" class="headerlink" title="配置欢迎页"></a>配置欢迎页</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置欢迎页--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>login.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="UserController"><a href="#UserController" class="headerlink" title="UserController"></a>UserController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(User user, HttpSession session)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"user"</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"admin"</span>.equals(user.getUsername()) &amp;&amp; <span class="string">"123"</span>.equals(user.getPassword()))&#123;</span><br><span class="line">            <span class="comment">//登录成功</span></span><br><span class="line">            session.setAttribute(<span class="string">"currentUser"</span>,user.getUsername());</span><br><span class="line">            <span class="comment">//重定向到转发到首页的方法</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"redirect:toIndex"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//登录失败,重定向到登录页</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"redirect:/login.jsp"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/toIndex"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toIndex</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="User实体"><a href="#User实体" class="headerlink" title="User实体"></a>User实体</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">//get、set略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="index-jsp"><a href="#index-jsp" class="headerlink" title="index.jsp"></a>index.jsp</h4><blockquote><p>注意:index.jsp 要放置到WEB-INF下，不然不经过前端控制器就可以直接访问到</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;登录成功,欢迎您:$&#123;sessionScope.currentUser&#125;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="开发拦截器-1"><a href="#开发拦截器-1" class="headerlink" title="开发拦截器"></a>开发拦截器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String username = (String) request.getSession().getAttribute(<span class="string">"currentUser"</span>);</span><br><span class="line">        <span class="keyword">if</span> (username == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//用户未登录，拦截</span></span><br><span class="line">            <span class="comment">//重定向到登录页</span></span><br><span class="line">            response.sendRedirect(request.getContextPath() + <span class="string">"/login.jsp"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//用户登录，放行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置拦截器-1"><a href="#配置拦截器-1" class="headerlink" title="配置拦截器"></a>配置拦截器</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置拦截器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--拦截所有--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--放行登录请求--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/login"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.sun.interceptor.LoginInterceptor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;工程准备&quot;&gt;&lt;a href=&quot;#工程准备&quot; class=&quot;headerlink&quot; title=&quot;工程准备&quot;&gt;&lt;/a&gt;工程准备&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;新建工程，进行配置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;pom.xml&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--springmvc--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-webmvc&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;5.1.6.RELEASE&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--servlet--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;javax.servlet&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;javax.servlet-api&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;3.1.0&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--jsp--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;javax.servlet&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;jsp-api&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;2.0&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="框架" scheme="http://sunmoon.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="SpringMVC" scheme="http://sunmoon.com/categories/%E6%A1%86%E6%9E%B6/SpringMVC/"/>
    
    
      <category term="页面跳转方式" scheme="http://sunmoon.com/tags/%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC%E6%96%B9%E5%BC%8F/"/>
    
      <category term="释放静态资源" scheme="http://sunmoon.com/tags/%E9%87%8A%E6%94%BE%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90/"/>
    
      <category term="SpringMVC实现AJAX" scheme="http://sunmoon.com/tags/SpringMVC%E5%AE%9E%E7%8E%B0AJAX/"/>
    
      <category term="restful风格" scheme="http://sunmoon.com/tags/restful%E9%A3%8E%E6%A0%BC/"/>
    
      <category term="异常处理机制" scheme="http://sunmoon.com/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/"/>
    
      <category term="拦截器" scheme="http://sunmoon.com/tags/%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC-1</title>
    <link href="http://sunmoon.com/2020/09/26/SpringMVC-1/"/>
    <id>http://sunmoon.com/2020/09/26/SpringMVC-1/</id>
    <published>2020-09-26T13:29:15.000Z</published>
    <updated>2020-09-26T14:16:36.628Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><h2 id="MVC模式"><a href="#MVC模式" class="headerlink" title="MVC模式"></a>MVC模式</h2><p>MVC是一种用于设计创建 Web 应用程序表现层的模式,使用它可以将业务逻辑、数据、界面显示代码分离开来.</p><ul><li>Model（模型）: 指的就是数据模型,用于封装数据</li><li>View（视图）:    用于数据展示</li><li>Controller（控制器）: 用于程序处理逻辑</li></ul><p><img data-src="/assets/MVC%E6%A8%A1%E5%BC%8F.png" alt="MVC模式"></p><a id="more"></a><h2 id="SpringMVC介绍"><a href="#SpringMVC介绍" class="headerlink" title="SpringMVC介绍"></a>SpringMVC介绍</h2><p>SpringMVC是Spring产品对MVC模式的一种具体实现，<strong>它可以通过一套注解，让一个简单Java类成为控制器</strong>。</p><p><img data-src="/assets/SpringMVC%E4%BB%8B%E7%BB%8D.png" alt="SpringMVC介绍"></p><h1 id="SpringMVC快速入门"><a href="#SpringMVC快速入门" class="headerlink" title="SpringMVC快速入门"></a>SpringMVC快速入门</h1><blockquote><p>需求：开发一个请求页面, 向后台发送一个请求, 后台需要在控制台打印一句话,  然后跳转到一个新的返回页面</p></blockquote><h2 id="创建web空工程，导入相关坐标"><a href="#创建web空工程，导入相关坐标" class="headerlink" title="创建web空工程，导入相关坐标"></a>创建web空工程，导入相关坐标</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SpringMVC--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Servlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--JSP--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="提供SpringMVC配置文件"><a href="#提供SpringMVC配置文件" class="headerlink" title="提供SpringMVC配置文件"></a>提供SpringMVC配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.sun.controller"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置三大组件--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注解驱动:相当于配置了处理器映射器、处理器适配器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Spring允许我们以配置的形式传入前后缀，他会在跳转视图的时候自动拼接--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>可以在配置视图解析器时传递设置两个属性<code>prefix</code>和<code>suffix</code>表示前缀和后缀，在跳转视图时会自拼接</p></blockquote><h2 id="在web-xml中配置前端控制器"><a href="#在web-xml中配置前端控制器" class="headerlink" title="在web.xml中配置前端控制器"></a>在web.xml中配置前端控制器</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span></span></span><br><span class="line"><span class="tag"><span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--前端控制器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- / 表示默认匹配拦截除了 .jsp 之外的所有--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="请求页面"><a href="#请求页面" class="headerlink" title="请求页面"></a>请求页面</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;index&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo1"&gt;SpringMVC快速入门&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// @RequestMapping  用于为当前方法绑定一个URL地址，作用就是为了前端请求的匹配</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"进入后台了..."</span>);</span><br><span class="line">        <span class="comment">//此处的返回值就用于说明下一个要跳转的页面的地址</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/WEB-INF/success.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="响应页面"><a href="#响应页面" class="headerlink" title="响应页面"></a>响应页面</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;success&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Success!!!&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="SpringMVC原理"><a href="#SpringMVC原理" class="headerlink" title="SpringMVC原理"></a>SpringMVC原理</h1><h2 id="SpringMVC的工作流程"><a href="#SpringMVC的工作流程" class="headerlink" title="SpringMVC的工作流程"></a>SpringMVC的工作流程</h2><p>解释：</p><ul><li><code>DispatcherServlet</code>：前端控制器</li><li><code>HandlerMapping</code>：处理器映射器</li><li><code>HandlerAdapter</code>：处理器适配器</li><li><code>Handler</code>：控制器</li><li><code>ViewResolver</code>：视图解析器</li></ul><p><img data-src="/assets/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png" alt="SpringMVC原理"></p><ol><li>用户通过浏览器发送请求至<code>DispatcherServlet</code></li><li>DispatcherServlet收到请求调用<code>HandlerMapping</code></li><li>HandlerMapping找到具体的处理器链返回给DispatcherServlet</li><li>DispatcherServlet会根据返回的处理器链调用<code>HandlerAdapter</code></li><li>HandlerAdapter经过适配调用具体的<code>Handler</code>（controller）</li><li>Controller执行完成返回一个执行结果</li><li>HandlerAdapter将Handler的结果ModelAndView对象返回给DispatcherServlet</li><li>DispatcherServlet将ModelAndView对象传给<code>ViewResolver</code></li><li>ViewReslover解析后得到具体View，并返回给DispatcherServlet</li><li>DispatcherServlet根据View进行视图渲染（即将模型数据填充至视图中）</li><li>DispatcherServlet会将渲染后的视图响应给浏览器</li></ol><h2 id="SpringMVC的三大组件"><a href="#SpringMVC的三大组件" class="headerlink" title="SpringMVC的三大组件"></a>SpringMVC的三大组件</h2><p>处理器映射器：负责根据URL寻找对应的处理器方法</p><p>处理器适配器：负责真正的去调用某个处理器方法</p><p>视图解析器：负责将逻辑视图转换成物理视图</p><blockquote><p>小贴士：</p><ul><li>当我们不进行三大组件配置时，SpringMVC会使用自己配置文件中的配置，但是我们配置的是经过功能增强的，所以不使用默认的。</li></ul></blockquote><p><img data-src="/assets/%E5%89%8D%E7%AB%AF%E6%8E%A7%E5%88%B6%E5%99%A8%E9%BB%98%E8%AE%A4%E7%9A%84%E9%85%8D%E7%BD%AE%E4%B8%89%E5%A4%A7%E7%BB%84%E4%BB%B6.png" alt="前端控制器默认的配置三大组件"></p><p>三大组件配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置三大组件--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注解驱动:相当于配置了处理器映射器、处理器适配器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置视图解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Spring允许我们以配置的形式传入前后缀，他会在跳转视图的时候自动拼接--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="RequestMapping"></a>RequestMapping</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequestMapping &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(<span class="string">"path"</span>)</span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;<span class="comment">//指定访问路径，支持多个</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(<span class="string">"value"</span>)</span><br><span class="line">    String[] path() <span class="keyword">default</span> &#123;&#125;;<span class="comment">//与value互为别名，作用相同</span></span><br><span class="line"></span><br><span class="line">    RequestMethod[] method() <span class="keyword">default</span> &#123;&#125;;<span class="comment">//用于指定请求方法，如POST、GET，支持配置多个</span></span><br><span class="line"></span><br><span class="line">    String[] params() <span class="keyword">default</span> &#123;&#125;;<span class="comment">//指定请求携带的参数，配置后前台必须传递，否则报错</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RequestMapping用于建立请求URL和处理方法之间的对应关系，也可以通过它的属性对请求做出各种限制</p><ul><li><p>value：用于限制请求URL(和path作用一样)</p></li><li><p>method：用于限制请求类型</p></li><li><p>params：用于限制请求参数的条件</p></li></ul><p><strong>此注解可以标注在方法上，也可以标注在类上，标注在类上代表类中的所有方法都可以共用一段URL。</strong></p><p><img data-src="/assets/RequestMapping%E6%B3%A8%E8%A7%A3%E6%A0%87%E5%9C%A8%E7%B1%BB%E4%B8%8A%E5%92%8C%E6%96%B9%E6%B3%95%E4%B8%8A.png" alt="RequestMapping注解标在类上和方法上">    </p><h2 id="限制请求路径"><a href="#限制请求路径" class="headerlink" title="限制请求路径"></a>限制请求路径</h2><p><code>@RequestMapping</code>注解中有两个属性，<code>value</code>和<code>path</code>，两个互为别名，表示的是当前方法绑定的URL，支持一个方法绑定多个URL。</p><h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><h4 id="前台"><a href="#前台" class="headerlink" title="前台"></a>前台</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--演示RequestMapping的value和path属性--%&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo2"&gt;RequestMapping-value&lt;/a&gt;&lt;br/&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo3"&gt;RequestMapping-value&lt;/a&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><h4 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@RequestMapping(value = &#123;"/demoController/demo2","/demoController/demo3"&#125;)</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(path = &#123;<span class="string">"/demoController/demo2"</span>,<span class="string">"/demoController/demo3"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//此处的返回值就用于说明下一个要跳转的页面的地址</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>value和path作用相同，都是用来绑定路径，支持配置多个</p></blockquote><h2 id="限制请求类型"><a href="#限制请求类型" class="headerlink" title="限制请求类型"></a>限制请求类型</h2><p><code>@RequestMapping</code>注解中有一个<code>method</code>属性，可以限定请求方式，例如GET或POST提交，支持指定多个。</p><h3 id="代码演示-1"><a href="#代码演示-1" class="headerlink" title="代码演示"></a>代码演示</h3><h4 id="前台-1"><a href="#前台-1" class="headerlink" title="前台"></a>前台</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--演示RequestMapping的method属性--%&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo4"&gt;RequestMapping-method&lt;/a&gt;&lt;br/&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/demoController/demo5"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"RequestMapping-method"</span>/&gt;</span><br><span class="line">&lt;/form&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><h4 id="后台-1"><a href="#后台-1" class="headerlink" title="后台"></a>后台</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/demoController/demo4"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//此处的返回值就用于说明下一个要跳转的页面的地址</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(path=<span class="string">"/demoController/demo5"</span>, method = &#123;RequestMethod.GET,RequestMethod.POST&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo5</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//此处的返回值就用于说明下一个要跳转的页面的地址</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：当method指定仅仅为POST方式时，前台必须以POST方式提交，否则会报错(405)</p></blockquote><h2 id="限制请求参数"><a href="#限制请求参数" class="headerlink" title="限制请求参数"></a>限制请求参数</h2><p><code>RequestMapping</code>注解中有一个<code>params</code>属性，用于指定请求参数的必传，不写代表不做限制。</p><h3 id="代码演示-2"><a href="#代码演示-2" class="headerlink" title="代码演示"></a>代码演示</h3><h4 id="前台-2"><a href="#前台-2" class="headerlink" title="前台"></a>前台</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--演示RequestMapping的params属性--%&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo6?username=jj"&gt;RequestMapping-method&lt;/a&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><h4 id="后台-2"><a href="#后台-2" class="headerlink" title="后台"></a>后台</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//params用于指定请求参数的必传，不写代表不做限制</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/demoController/demo6"</span>,params = <span class="string">"username"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo6</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//此处的返回值就用于说明下一个要跳转的页面的地址</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：当指定params属性时，前台请求必须携带该参数，否则就会报错(404)。</p></blockquote><h1 id="接收请求参数"><a href="#接收请求参数" class="headerlink" title="接收请求参数"></a>接收请求参数</h1><p>在SpringMVC中可以使用多种类型来接收前端传入的参数(字符串)</p><h2 id="简单类型"><a href="#简单类型" class="headerlink" title="简单类型"></a>简单类型</h2><p>简单类型参数接收，<strong>保证前端传递的参数名称和方法形参的名称一致</strong>即可</p><blockquote><p>对于一些简单类型的数据，SpringMVC底层内置了转换器</p></blockquote><h3 id="代码演示-3"><a href="#代码演示-3" class="headerlink" title="代码演示"></a>代码演示</h3><h4 id="前台-3"><a href="#前台-3" class="headerlink" title="前台"></a>前台</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> &lt;%--接收请求参数——简单类型(<span class="number">8</span>+<span class="number">8</span>+<span class="number">1</span>)--%&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo7?username=张三&amp;age=18"&gt;接收参数——简单类型&lt;/a&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><h4 id="后台-3"><a href="#后台-3" class="headerlink" title="后台"></a>后台</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简单类型参数接收，保证前端传递的参数名称和方法形参的名称一致即可</span></span><br><span class="line"><span class="comment">//对于一些简单类型的数据，SpringMVC底层内置了转换器</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/demoController/demo7"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo7</span><span class="params">(String username,Integer age)</span></span>&#123;</span><br><span class="line">    System.out.println(username +<span class="string">"-"</span>+ age);</span><br><span class="line">    <span class="comment">//此处的返回值就用于说明下一个要跳转的页面的地址</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h2><p>对象类型参数接收，只需要<strong>保证前端传递的参数名称和pojo的属性名称(set方法)一致</strong>即可</p><h3 id="代码演示-4"><a href="#代码演示-4" class="headerlink" title="代码演示"></a>代码演示</h3><h4 id="前台-4"><a href="#前台-4" class="headerlink" title="前台"></a>前台</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--接收请求参数——对象--%&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo8?username=李四&amp;age=20"&gt;接收参数——对象类型&lt;/a&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><h4 id="后台-4"><a href="#后台-4" class="headerlink" title="后台"></a>后台</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象类型：只需要保证前端传递的参数名称和pojo的属性名称(set方法)一致即可</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/demoController/demo8"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo8</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="comment">//此处的返回值就用于说明下一个要跳转的页面的地址</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h2><p>数组类型：只需要<strong>保证前端传递的参数名称和方法形参名称一致</strong>即可</p><h3 id="代码演示-5"><a href="#代码演示-5" class="headerlink" title="代码演示"></a>代码演示</h3><h4 id="前台-5"><a href="#前台-5" class="headerlink" title="前台"></a>前台</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--接收请求参数——数组--%&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo9?students=张三&amp;students=李四"&gt;接收参数——数组类型&lt;/a&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><h4 id="后台-5"><a href="#后台-5" class="headerlink" title="后台"></a>后台</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组类型：只需要保证前端传递的参数名称和方法形参名称一致即可</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/demoController/demo9"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo9</span><span class="params">(String[] students)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (String student : students) &#123;</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//此处的返回值就用于说明下一个要跳转的页面的地址</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h2><p>集合类型：<strong>获取集合参数时，要将集合参数包装到一个pojo中</strong>才可以</p><h3 id="代码演示-6"><a href="#代码演示-6" class="headerlink" title="代码演示"></a>代码演示</h3><h4 id="封装对象"><a href="#封装对象" class="headerlink" title="封装对象"></a>封装对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Vo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">//get、set方法略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="前台-6"><a href="#前台-6" class="headerlink" title="前台"></a>前台</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--接收请求参数——集合--%&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/demoController/demo10?students=张三&amp;students=李四"</span>&gt;</span><br><span class="line">    list第一个元素： &lt;input type=<span class="string">"text"</span> name=<span class="string">"users[0].username"</span> value=<span class="string">"张三"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> name=<span class="string">"users[0].age"</span> value=<span class="string">"18"</span>&gt;&lt;br/&gt;</span><br><span class="line">    list第二个元素： &lt;input type=<span class="string">"text"</span> name=<span class="string">"users[1].username"</span> value=<span class="string">"李四"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> name=<span class="string">"users[1].age"</span> value=<span class="string">"20"</span>&gt;&lt;br/&gt;</span><br><span class="line">    map第一个元素：&lt;input type=<span class="string">"text"</span> name=<span class="string">"map[1001]"</span> value=<span class="string">"jj"</span>&gt;&lt;br/&gt;</span><br><span class="line">    map第二个元素：&lt;input type=<span class="string">"text"</span> name=<span class="string">"map[1002]"</span> value=<span class="string">"mm"</span>&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"接收参数——集合类型"</span>&gt;&lt;br/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h4 id="后台-6"><a href="#后台-6" class="headerlink" title="后台"></a>后台</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//集合类型：获取集合参数时，要将集合参数包装到一个pojo中才可以</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/demoController/demo10"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo10</span><span class="params">(Vo vo)</span></span>&#123;</span><br><span class="line">    System.out.println(vo);</span><br><span class="line">    <span class="comment">//此处的返回值就用于说明下一个要跳转的页面的地址</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h2><p>对于一些常见的类型,  SpringMVC是内置了类型转换器的,  但是对于一些格式比较灵活的参数(日期  时间), SpringMVC无法完成类型转换。</p><p>这时候就必须<strong>自定义类型转换器</strong></p><blockquote><p>小贴士：</p><ul><li>其实SpringMVC也内置日期类型的转换器,  格式为: yyyy/MM/dd</li></ul></blockquote><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="自定义时间类型转换器"><a href="#自定义时间类型转换器" class="headerlink" title="自定义时间类型转换器"></a>自定义时间类型转换器</h4><ul><li>自定义一个类型转换器类,实现类型转换的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 日期转换类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String strDate)</span> </span>&#123;</span><br><span class="line">        Date date = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            date = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>).parse(strDate);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>实现<code>Converter&lt;S,T&gt;</code>接口，重写<code>convert()</code>转换方法</p><ul><li>泛型S代表源数据类型，就是什么数据需要转换，当前是将一个字符串转为日期类型</li><li>泛型T代表目标数据类型，现在是Date日期类型</li></ul></blockquote><ul><li>将转换器的类注册到转换服务,并且将转换服务注册到SpringMVC的注册驱动中</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注解驱动:相当于配置了处理器映射器、处理器适配器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">"conversionService2"</span>/&gt;</span><span class="comment">&lt;!--将转换服务注册到SpringMVC容器中--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--声明转换服务，并且自定义转换器对象注册到服务--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conversionService2"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.sun.converters.DateConverter"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="前台-7"><a href="#前台-7" class="headerlink" title="前台"></a>前台</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--接收请求参数——日期类型--%&gt;</span><br><span class="line">&lt;a href=<span class="string">"$&#123;pageContext.request.contextPath&#125;/demoController/demo11?date=2020-9-9"</span>&gt;</span><br><span class="line">    接收参数——日期类型</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure><h4 id="后台-7"><a href="#后台-7" class="headerlink" title="后台"></a>后台</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//日期类型</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo11"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo11</span><span class="params">(Date date)</span></span>&#123;</span><br><span class="line">    System.out.println(date);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件类型-文件上传"><a href="#文件类型-文件上传" class="headerlink" title="文件类型(文件上传)"></a>文件类型(文件上传)</h2><p>文件上传三要素：</p><ul><li><code>POST</code>方式提交</li><li>表单类型为<code>enctype=&quot;multipart/form-data&quot;</code></li><li>提供文件上传的input域<code>&lt;input type=&quot;file&quot; name=&quot;&quot;/&gt;</code></li></ul><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="导入文件上传pom依赖"><a href="#导入文件上传pom依赖" class="headerlink" title="导入文件上传pom依赖"></a>导入文件上传pom依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件上传--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置文件上传解析器"><a href="#配置文件上传解析器" class="headerlink" title="配置文件上传解析器"></a>配置文件上传解析器</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    配置文件解析器</span></span><br><span class="line"><span class="comment">    注意：这个id不能随便写，必须叫multipartResolver</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--限制每次上传文件的大小，单位是B 5M = 1024 * 1024 * 5 = 5242880--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"5242880"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="单文件上传"><a href="#单文件上传" class="headerlink" title="单文件上传"></a>单文件上传</h4><h5 id="前台-8"><a href="#前台-8" class="headerlink" title="前台"></a>前台</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/demoController/demo12"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"file"</span> name=<span class="string">"uploadFile"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"单文件上传"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h5 id="后台-8"><a href="#后台-8" class="headerlink" title="后台"></a>后台</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo12"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo12</span><span class="params">(MultipartFile uploadFile)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//获取前台input标签name属性名</span></span><br><span class="line">    String name = uploadFile.getName();</span><br><span class="line">    <span class="comment">//获取文件名</span></span><br><span class="line">    String filename = uploadFile.getOriginalFilename();</span><br><span class="line">    <span class="comment">// 使用UUID+文件名生成新文件名</span></span><br><span class="line">    String newFilename = UUID.randomUUID().toString() + filename;</span><br><span class="line">    <span class="comment">//定义一个本地目录(上传路径)</span></span><br><span class="line">    File file = <span class="keyword">new</span> File(<span class="keyword">new</span> File(<span class="string">"E:\\IDEA_Workspace"</span>), newFilename);</span><br><span class="line">    <span class="comment">//文件传输</span></span><br><span class="line">    uploadFile.transferTo(file);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：后台参数类型必须为MultipartFile，参数名称和前台的name属性名称一致</strong></p></blockquote><h4 id="多文件上传"><a href="#多文件上传" class="headerlink" title="多文件上传"></a>多文件上传</h4><blockquote><p>前台文件上传input标签中添加<code>multiple</code>属性</p><p>后台使用<code>MultipartFile[]</code><strong>数组</strong>接收</p></blockquote><h5 id="前台-9"><a href="#前台-9" class="headerlink" title="前台"></a>前台</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/demoController/demo13"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"file"</span> name=<span class="string">"uploadFile"</span> multiple&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"多文件上传"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h5 id="后台-9"><a href="#后台-9" class="headerlink" title="后台"></a>后台</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo13"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo13</span><span class="params">(MultipartFile[] uploadFile)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (MultipartFile multipartFile : uploadFile) &#123;</span><br><span class="line">        <span class="comment">//获取文件名</span></span><br><span class="line">        String filename = multipartFile.getOriginalFilename();</span><br><span class="line">        <span class="comment">// 使用UUID+文件名生成新文件名</span></span><br><span class="line">        String newFilename = UUID.randomUUID().toString() + filename;</span><br><span class="line">        <span class="comment">//定义一个本地目录(上传路径)</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="keyword">new</span> File(<span class="string">"E:\\IDEA_Workspace"</span>), newFilename);</span><br><span class="line">        <span class="comment">//文件传输</span></span><br><span class="line">        multipartFile.transferTo(file);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>多文件上传</p><ul><li>在<code>&lt;input type=&quot;file&quot;/&gt;</code>域中添加<code>multiple</code>属性</li><li>后台接收使用<code>MultipartFile[]</code>数组接收，遍历上传即可</li></ul></blockquote><h1 id="接收参数的处理"><a href="#接收参数的处理" class="headerlink" title="接收参数的处理"></a>接收参数的处理</h1><h2 id="中文乱码"><a href="#中文乱码" class="headerlink" title="中文乱码"></a>中文乱码</h2><p>SpringMVC在使用post提交请求时,  对于中文参数是有乱码问题的, 针对这种情况它提供了一个中文乱码过滤器,  我们只需要进行配置一下就可以了。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置中文过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h2><p>@RequestParam标注在<code>方法参数</code>之前，用于对传入的参数做一些限制，支持三个属性:</p><ul><li>value：默认属性，用于指定前端传入的参数名称</li><li>required：用于指定此参数是否必传，默认为true</li><li>defaultValue：当参数为非必传参数且前端没有传入参数时，指定一个默认值</li></ul><h2 id="代码演示-7"><a href="#代码演示-7" class="headerlink" title="代码演示"></a>代码演示</h2><h3 id="前台-10"><a href="#前台-10" class="headerlink" title="前台"></a>前台</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--演示RequestParam--%&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo14?students=jj&amp;students=mm"&gt;RequestParam&lt;/a&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><h3 id="后台-10"><a href="#后台-10" class="headerlink" title="后台"></a>后台</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@RequestParam标注在方法参数之前。用于表示当前参数是获取的前端传递或来的哪个参数值</span></span><br><span class="line"><span class="comment">//@RequestParam 标注方法之前，此参数为必传选项，不传就会报错，但是可以使用required = false取消这个限制</span></span><br><span class="line"><span class="comment">//defaultValue可以为当前参数设置一个默认值，当前端不传递此参数时候，就是用默认值</span></span><br><span class="line"><span class="comment">//@RequestParam(value = "studnets") 可以接收一个集合参数，可以直接封装到一个集中对象中</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo14"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo14</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @RequestParam(value = <span class="string">"username"</span>,required = <span class="keyword">false</span>,defaultValue = <span class="string">"jj"</span>)</span> String name,</span></span><br><span class="line"><span class="function">    @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"students"</span>)</span> List&lt;String&gt; students</span></span><br><span class="line"><span class="function">)</span>&#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    System.out.println(students);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="接收请求头信息"><a href="#接收请求头信息" class="headerlink" title="接收请求头信息"></a>接收请求头信息</h1><p>@RequestHeader注解，用于接收请求头信息</p><ul><li><code>@RequestHeader</code>用于接收请求头所有信息，封装到一个Map中</li><li><code>@RequestHeader(&quot;key&quot;)</code>用于接收指定的请求头信息，key为某一个请求头名称</li><li><code>@CookieValue(&quot;key&quot;)</code>用于接收cookie中的某一项信息</li></ul><h2 id="代码演示-8"><a href="#代码演示-8" class="headerlink" title="代码演示"></a>代码演示</h2><h3 id="前台-11"><a href="#前台-11" class="headerlink" title="前台"></a>前台</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--接收请求头信息--%&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo15"&gt;接收请求头信息&lt;/a&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><h3 id="后台-11"><a href="#后台-11" class="headerlink" title="后台"></a>后台</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    @RequestHeader用于接收请求头所有信息，封装到一个Map中</span></span><br><span class="line"><span class="comment">    @RequestHeader("key")用于接收指定的请求头信息，key为某一个请求头名称</span></span><br><span class="line"><span class="comment">    @CookieValue("key")用于接收cookie中的某一项信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo15"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo15</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        @RequestHeader Map map,</span></span></span><br><span class="line"><span class="function"><span class="params">        @RequestHeader(<span class="string">"cookie"</span>)</span> String cookie,</span></span><br><span class="line"><span class="function">        @<span class="title">CookieValue</span><span class="params">(<span class="string">"JSESSIONID"</span>)</span> String jsessionid</span></span><br><span class="line"><span class="function">        )</span>&#123;</span><br><span class="line">    System.out.println(map);</span><br><span class="line">    System.out.println(cookie);</span><br><span class="line">    System.out.println(jsessionid);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringMVC&quot;&gt;&lt;a href=&quot;#SpringMVC&quot; class=&quot;headerlink&quot; title=&quot;SpringMVC&quot;&gt;&lt;/a&gt;SpringMVC&lt;/h1&gt;&lt;h2 id=&quot;MVC模式&quot;&gt;&lt;a href=&quot;#MVC模式&quot; class=&quot;headerlink&quot; title=&quot;MVC模式&quot;&gt;&lt;/a&gt;MVC模式&lt;/h2&gt;&lt;p&gt;MVC是一种用于设计创建 Web 应用程序表现层的模式,使用它可以将业务逻辑、数据、界面显示代码分离开来.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Model（模型）: 指的就是数据模型,用于封装数据&lt;/li&gt;
&lt;li&gt;View（视图）:    用于数据展示&lt;/li&gt;
&lt;li&gt;Controller（控制器）: 用于程序处理逻辑&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&quot;/assets/MVC%E6%A8%A1%E5%BC%8F.png&quot; alt=&quot;MVC模式&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="框架" scheme="http://sunmoon.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="SpringMVC" scheme="http://sunmoon.com/categories/%E6%A1%86%E6%9E%B6/SpringMVC/"/>
    
    
      <category term="SpringMVC介绍" scheme="http://sunmoon.com/tags/SpringMVC%E4%BB%8B%E7%BB%8D/"/>
    
      <category term="SpringMVC原理" scheme="http://sunmoon.com/tags/SpringMVC%E5%8E%9F%E7%90%86/"/>
    
      <category term="RequestMapping" scheme="http://sunmoon.com/tags/RequestMapping/"/>
    
      <category term="SpringMVC接收请求参数" scheme="http://sunmoon.com/tags/SpringMVC%E6%8E%A5%E6%94%B6%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0/"/>
    
      <category term="SpringMVC接收参数的处理" scheme="http://sunmoon.com/tags/SpringMVC%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0%E7%9A%84%E5%A4%84%E7%90%86/"/>
    
      <category term="SpringMVC接收请求头信息" scheme="http://sunmoon.com/tags/SpringMVC%E6%8E%A5%E6%94%B6%E8%AF%B7%E6%B1%82%E5%A4%B4%E4%BF%A1%E6%81%AF/"/>
    
  </entry>
  
  <entry>
    <title>Spring-3</title>
    <link href="http://sunmoon.com/2020/09/25/Spring-3/"/>
    <id>http://sunmoon.com/2020/09/25/Spring-3/</id>
    <published>2020-09-25T14:04:30.000Z</published>
    <updated>2020-09-25T14:13:41.893Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用动态代理优化转账代码"><a href="#使用动态代理优化转账代码" class="headerlink" title="使用动态代理优化转账代码"></a>使用动态代理优化转账代码</h1><h2 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h2><blockquote><p>目标对象   + 代理逻辑  = 代理对象</p><p>目标对象:    被代理的对象–AccountServiceImpl</p><p>代理逻辑:    要增强的功能–事务管理</p><p>代理对象:     一个具有事务管理功能的Service </p></blockquote><a id="more"></a><h3 id="目标对象"><a href="#目标对象" class="headerlink" title="目标对象"></a>目标对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceAccount, String targetAccount, Float money)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//1.查询数据库获取两个用户</span></span><br><span class="line">            Account source = accountDao.findByName(sourceAccount);</span><br><span class="line">            Account target = accountDao.findByName(targetAccount);</span><br><span class="line">            <span class="comment">//2.在内存中做出转账操作</span></span><br><span class="line">            <span class="comment">//2.1 源账户-money</span></span><br><span class="line">            source.setBalance(source.getBalance() - money);</span><br><span class="line">            <span class="comment">//2.2 目标账户+money</span></span><br><span class="line">            target.setBalance(target.getBalance() + money);</span><br><span class="line">            <span class="comment">//3.设置回数据库</span></span><br><span class="line">            accountDao.updateByName(source);</span><br><span class="line">            <span class="comment">//模拟程序出现异常</span></span><br><span class="line">            <span class="comment">//int i = 1 / 0;</span></span><br><span class="line">            accountDao.updateByName(target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代理逻辑"><a href="#代理逻辑" class="headerlink" title="代理逻辑"></a>代理逻辑</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 事务管理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line">    <span class="comment">//本地集合</span></span><br><span class="line">    <span class="keyword">private</span> ThreadLocal&lt;Connection&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;Connection&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取到Connection对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Connection connection = threadLocal.get();</span><br><span class="line">        <span class="keyword">if</span> (connection == <span class="keyword">null</span>)&#123; <span class="comment">//链接不存在</span></span><br><span class="line">            <span class="comment">//获取链接</span></span><br><span class="line">            connection = dataSource.getConnection();</span><br><span class="line">            <span class="comment">//存入本地集合</span></span><br><span class="line">            threadLocal.set(connection);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开启事务方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">begin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//开启事务</span></span><br><span class="line">            getConnection().setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提交事务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            getConnection().commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//回滚事务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            getConnection().rollback();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭事务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            getConnection().close();</span><br><span class="line">            <span class="comment">//释放集合中的存储的链接</span></span><br><span class="line">            threadLocal.remove();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生存代理对象"><a href="#生存代理对象" class="headerlink" title="生存代理对象"></a>生存代理对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TxManager txManager;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//jdk动态代理进行事务的控制</span></span><br><span class="line">        AccountService instance = (AccountService) Proxy.newProxyInstance(</span><br><span class="line">                accountService.getClass().getClassLoader(),</span><br><span class="line">                accountService.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                        Object obj = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="keyword">try</span>&#123;</span><br><span class="line">                            <span class="comment">//事务开启</span></span><br><span class="line">                            txManager.begin();</span><br><span class="line">                            <span class="comment">//执行业务代码</span></span><br><span class="line">                            obj = method.invoke(accountService, args);</span><br><span class="line">                            <span class="comment">//事务提交</span></span><br><span class="line">                            txManager.commit();</span><br><span class="line">                        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                            <span class="comment">//回滚</span></span><br><span class="line">                            txManager.rollback();</span><br><span class="line">                        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                            <span class="comment">//关闭</span></span><br><span class="line">                            txManager.close();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> obj;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">        <span class="comment">//代理对象调用方法</span></span><br><span class="line">        instance.transfer(<span class="string">"A01"</span>,<span class="string">"A02"</span>,<span class="number">10f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="cglib动态代理"><a href="#cglib动态代理" class="headerlink" title="cglib动态代理"></a>cglib动态代理</h2><blockquote><p>复制上一个工程</p></blockquote><blockquote><p>删除AccountService接口及相关内容</p></blockquote><h3 id="使用cglib创建代理对象"><a href="#使用cglib创建代理对象" class="headerlink" title="使用cglib创建代理对象"></a>使用cglib创建代理对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountServiceImpl accountService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TxManager txManager;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//cglib完成动态代理</span></span><br><span class="line">        <span class="comment">//1.获取增强器</span></span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        <span class="comment">//2.设置父类</span></span><br><span class="line">        enhancer.setSuperclass(AccountServiceImpl<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//代理逻辑</span></span><br><span class="line">        InvocationHandler invocationHandler = <span class="keyword">new</span> InvocationHandler()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object o, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                Object obj = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    txManager.begin();</span><br><span class="line">                    method.invoke(accountService,args);</span><br><span class="line">                    txManager.commit();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    txManager.rollback();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    txManager.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> obj;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//3.设置代理逻辑</span></span><br><span class="line">        enhancer.setCallback(invocationHandler);</span><br><span class="line">        <span class="comment">//4.创建代理对象</span></span><br><span class="line">        AccountServiceImpl service = (AccountServiceImpl) enhancer.create();</span><br><span class="line">        <span class="comment">//执行方法</span></span><br><span class="line">        service.transfer(<span class="string">"A01"</span>,<span class="string">"A02"</span>,<span class="number">1f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="jdk和cglib两种代理方式的选择"><a href="#jdk和cglib两种代理方式的选择" class="headerlink" title="jdk和cglib两种代理方式的选择"></a>jdk和cglib两种代理方式的选择</h2><p>首先明确在创建代理实现类时，jdk的速度要高于cglib，所以选择的时候:</p><ul><li><p>当被代理类有接口的时候，使用jdk动态代理，因为它的效率高</p></li><li><p>当被代理类没有接口的时候，使用cglib动态代理，因为没办法</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img data-src="/assets/aop%E6%8E%A8%E5%AF%BC.png" alt="aop推导"></p><p>当核心业务（转账）和增强业务（事务）同时出现时，我们可以在开发时对他们分别开发，运行时再组装在一起（使用动态代理的方式）。</p><p>这样做的好处是：</p><ol><li>逻辑清晰，开发核心业务的时候，不必关注增强业务的代码</li><li>代码复用性高：增强代码不用重复书写</li></ol><p>这就是一种 AOP 的思想。 </p><p>总结:  <code>开发阶段分别开发  运行阶段组装运行</code></p><h1 id="AOP介绍"><a href="#AOP介绍" class="headerlink" title="AOP介绍"></a>AOP介绍</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>AOP( 面向切面编程 )是一种思想，它的目的就是在不修改源代码的基础上，对原有功能进行增强。</p><p>SpringAOP是对AOP思想的一种实现，Spring底层同时支持jdk和cglib动态代理。</p><p>Spring会根据被代理的类是否有接口自动选择代理方式：</p><ul><li>如果有接口，就采用jdk动态代理(当然，也可以强制使用cglib)</li><li>没有接口就采用cglib的方式</li></ul><p><img data-src="/assets/aop%E6%A6%82%E5%BF%B5.png" alt="aop概念"></p><h2 id="AOP中的术语"><a href="#AOP中的术语" class="headerlink" title="AOP中的术语"></a>AOP中的术语</h2><p><code>目标对象</code></p><ul><li>被代理的对象</li></ul><p><code>连接点</code></p><ul><li>被代理的对象中的所有方法</li></ul><p><code>切入点</code></p><ul><li>被代理的对象中的一部分方法(要进行功能增强的部分)</li></ul><p><code>增强(通知)</code></p><ul><li>一个具体的功能(打日志 开启事务  提交事务    增强类  增强方法)</li></ul><p><code>织入</code></p><ul><li>将切入点代码和增强方法合在一起的动作</li></ul><p><code>代理对象</code></p><ul><li>经过织入之后产生对象</li></ul><p><code>切面</code></p><ul><li>切点 +  增强</li><li>切面是一种描述, 描述了这样一件事: 一个<strong>什么样的增强功能</strong>添加在了<strong>哪些切点的</strong> <strong>什么位置</strong>上</li><li>切面就是描述的切点方法和增强方法的执行顺序</li></ul><p><img data-src="/assets/aop%E6%9C%AF%E8%AF%AD%E8%AE%B2%E8%A7%A3.png" alt="aop术语讲解"></p><h1 id="SpringAOP的入门案例"><a href="#SpringAOP的入门案例" class="headerlink" title="SpringAOP的入门案例"></a>SpringAOP的入门案例</h1><p>需求：模拟打印日志功能——在AccountServiceImpl类中的方法上打印日志</p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p><code>找二配一</code>：</p><ul><li><strong>找目标对象、增强对象</strong></li><li><strong>配置切面——生成代理对象</strong></li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="新建工程导入相关坐标"><a href="#新建工程导入相关坐标" class="headerlink" title="新建工程导入相关坐标"></a>新建工程导入相关坐标</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>day03_03_spring_aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切点表达式解析坐标--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建service接口及实现类-目标对象"><a href="#创建service接口及实现类-目标对象" class="headerlink" title="创建service接口及实现类(目标对象)"></a>创建service接口及实现类(目标对象)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(Object o)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Object&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Object <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"save"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"findAll"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">findByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"findByName"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建增强类-Logger"><a href="#创建增强类-Logger" class="headerlink" title="创建增强类(Logger)"></a>创建增强类(Logger)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"即将执行方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置切面"><a href="#配置切面" class="headerlink" title="配置切面"></a>配置切面</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--目标对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.sun.service.impl.AccountServiceImpl"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--增强对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"logger"</span> <span class="attr">class</span>=<span class="string">"com.sun.log.Logger"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--aop配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置切点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pt"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.sun.service.impl.AccountServiceImpl.findAll())"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            配置切面</span></span><br><span class="line"><span class="comment">            切面：切点(目标对象) + 增强(增强对象)</span></span><br><span class="line"><span class="comment">            切面是一种描述，描述了这样一件事：</span></span><br><span class="line"><span class="comment">                一个【什么样的增强功能】 添加在了【哪些切点的】【什么位置】上</span></span><br><span class="line"><span class="comment">            ref="logger"    用于指定增强类</span></span><br><span class="line"><span class="comment">            method="beforeMethod" 用于指定增强类中的一个具体的增强的方法</span></span><br><span class="line"><span class="comment">            pointcut-ref    指定切点</span></span><br><span class="line"><span class="comment">            aop:before  增强方法再切点方法中的之前执行</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"logger"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"beforeMethod"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        accountService.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="/assets/aop%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C.png" alt="aop快速入门执行结果">    </p><h1 id="SpringAOP配置详解"><a href="#SpringAOP配置详解" class="headerlink" title="SpringAOP配置详解"></a>SpringAOP配置详解</h1><h2 id="切点表达式"><a href="#切点表达式" class="headerlink" title="切点表达式"></a>切点表达式</h2><p>切点表达式的作用:  定义一组规则, 用于在连接点中挑选切点</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">配置切点</span></span><br><span class="line"><span class="comment">    切点表达式：通过一组表达式规则，在众多连接点中去挑选切点</span></span><br><span class="line"><span class="comment">    *   占位符，一个或者多个位置</span></span><br><span class="line"><span class="comment">    ..  占位符，零个或者多个位置</span></span><br><span class="line"><span class="comment">    当前配置表示匹配impl包下所有类中的所有方法，并且方法的参数可以是任意个</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pt"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.sun.service.impl.*.*(..))"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四大通知"><a href="#四大通知" class="headerlink" title="四大通知"></a>四大通知</h2><p>四大通知描述的就是增强方法在切点方法的什么位置上执行</p><ul><li>前置通知(before) ：在切点运行之前执行</li><li>后置通知(after-returning)：在切点正常运行结束之后执行</li><li>异常通知(after-throwing)：在切点发生异常的时候执行</li><li>最终通知(after)：在切点的最终执行</li></ul><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//前置通知(before) ：在切点运行之前执行</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//切点执行</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//后置通知(after-returning)：在切点正常运行结束之后执行</span></span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">    <span class="comment">//异常通知(after-throwing)：在切点发生异常的时候执行</span></span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//最终通知(after)：在切点的最终执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="给Logger类添加方法"><a href="#给Logger类添加方法" class="headerlink" title="给Logger类添加方法"></a>给Logger类添加方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"即将执行方法..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterRetureMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"方法正常结束..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"方法出现异常..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"方法运行到最后..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加aop配置"><a href="#添加aop配置" class="headerlink" title="添加aop配置"></a>添加aop配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"logger"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"beforeMethod"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"afterReturnMethod"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"afterThrowMethod"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"afterMethod"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：当四大通知同时出现的时候, 它的执行顺序会受到配置顺序的影响</strong></p><h2 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h2><p>它是一种特殊的通知，他允许你以编码的形式实现四大通知</p><h3 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aroundMethod</span><span class="params">(ProceedingJoinPoint point)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"即将执行方法..."</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//切点执行</span></span><br><span class="line">            point.proceed();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"方法正常结束..."</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"方法出现异常..."</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"方法运行到最后..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"logger"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"aroundMethod"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="AOP工作原理"><a href="#AOP工作原理" class="headerlink" title="AOP工作原理"></a>AOP工作原理</h1><h2 id="开发阶段-开发者完成"><a href="#开发阶段-开发者完成" class="headerlink" title="开发阶段(开发者完成)"></a>开发阶段(开发者完成)</h2><p>开发共性功能，制作成增强</p><p>开发非共性功能，制作成切点</p><p>在配置文件中，声明切点与增强间的关系，即切面</p><h2 id="容器启动阶段-AOP完成"><a href="#容器启动阶段-AOP完成" class="headerlink" title="容器启动阶段(AOP完成)"></a>容器启动阶段(AOP完成)</h2><p>Spring读取配置文件中的切面信息，根据切面中的描述, 将<code>增强功能</code>增加在<code>目标对象的切点方法</code>上，动态创建代理对象, 最后将代理对象放入容器中 </p><blockquote><p>AOP应用：日志处理、事务、性能统计</p></blockquote><h1 id="SpringAOP注解版"><a href="#SpringAOP注解版" class="headerlink" title="SpringAOP注解版"></a>SpringAOP注解版</h1><h2 id="复制入门案例"><a href="#复制入门案例" class="headerlink" title="复制入门案例"></a>复制入门案例</h2><p>略…</p><h2 id="添加组件扫描"><a href="#添加组件扫描" class="headerlink" title="添加组件扫描"></a>添加组件扫描</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.sun"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用注解实例化对象-Logger和AccountServiceImpl"><a href="#使用注解实例化对象-Logger和AccountServiceImpl" class="headerlink" title="使用注解实例化对象(Logger和AccountServiceImpl)"></a>使用注解实例化对象(Logger和AccountServiceImpl)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure><h2 id="四大通知-1"><a href="#四大通知-1" class="headerlink" title="四大通知"></a>四大通知</h2><blockquote><p>将切面配置转移到增强类上</p></blockquote><h3 id="激活切面自动代理"><a href="#激活切面自动代理" class="headerlink" title="激活切面自动代理"></a>激活切面自动代理</h3><blockquote><p>spring配置</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--激活切面自动代理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="修改增强类"><a href="#修改增强类" class="headerlink" title="修改增强类"></a>修改增强类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span><span class="comment">//表明当前这是一个切面(切点 + 增强)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义切点表达式</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.sun.service.impl.*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pt</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//代表的是当前增强方法再pt()挑选出来的切点前面执行</span></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"pt()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"即将执行方法..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AfterReturning</span>(<span class="string">"pt()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturnMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"方法正常结束..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AfterThrowing</span>(<span class="string">"pt()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"方法出现异常..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"pt()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"方法运行到最后..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>略….</p><blockquote><p><strong>注意：四大通知同时出现的时候,注解版会有顺序问题, 不能用</strong></p></blockquote><h2 id="环绕通知-1"><a href="#环绕通知-1" class="headerlink" title="环绕通知"></a>环绕通知</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span><span class="comment">//表明当前这是一个切面(切点 + 增强)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义切点表达式</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.sun.service.impl.*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pt</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//环绕通知,两种写法</span></span><br><span class="line">    <span class="comment">//@Around("pt()")</span></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"execution(* com.sun.service.impl.*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aroundMethod</span><span class="params">(ProceedingJoinPoint point)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"即将执行方法..."</span>);</span><br><span class="line">            <span class="comment">//切点执行</span></span><br><span class="line">            point.proceed();</span><br><span class="line">            System.out.println(<span class="string">"方法正常结束..."</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"方法出现异常..."</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"方法运行到最后..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="纯注解版"><a href="#纯注解版" class="headerlink" title="纯注解版"></a>纯注解版</h2><p>现在xml配置中只剩两条配置，配置<strong>组件扫描</strong>和<strong>激活切面自动代理</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.sun"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--激活切面自动代理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="提取配置"><a href="#提取配置" class="headerlink" title="提取配置"></a>提取配置</h3><p>定义配置Java类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.sun"</span>)<span class="comment">//组件扫描</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span> <span class="comment">//激活切面自动代理，相当于xml中的&lt;aop:aspectj-autoproxy/&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">classes</span> </span>= SpringConfig<span class="class">.<span class="keyword">class</span>) //读取<span class="title">Java</span>配置类</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        accountService.findAll();</span><br><span class="line">        System.out.println(<span class="string">"===================="</span>);</span><br><span class="line">        accountService.save(<span class="string">"1"</span>);</span><br><span class="line">        System.out.println(<span class="string">"===================="</span>);</span><br><span class="line">        accountService.findByName(<span class="string">"1"</span>);</span><br><span class="line">        System.out.println(<span class="string">"===================="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="SpringAOP实现事务管理"><a href="#SpringAOP实现事务管理" class="headerlink" title="SpringAOP实现事务管理"></a>SpringAOP实现事务管理</h1><blockquote><p>使用AOP实现转账事务的管理</p></blockquote><h2 id="dao接口及实现类"><a href="#dao接口及实现类" class="headerlink" title="dao接口及实现类"></a>dao接口及实现类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据名称查找一个账号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Account <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据名称修改账户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateByName</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> QueryRunner queryRunner;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TxManager txManager;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> queryRunner.query(txManager.getConnection(),<span class="string">"select * from account where name = ?"</span>,<span class="keyword">new</span> BeanHandler&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>),<span class="title">name</span>)</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateByName</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            queryRunner.update(txManager.getConnection(),<span class="string">"update account set balance = ? where name = ?"</span>,account.getBalance(),account.getName());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="service接口及实现类"><a href="#service接口及实现类" class="headerlink" title="service接口及实现类"></a>service接口及实现类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转账方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceAccount 转出用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetAccount 转入用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money 转账金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceAccount, String targetAccount, Float money)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceAccount, String targetAccount, Float money)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 执行sql</span></span><br><span class="line">            <span class="comment">//1.查询数据库获取两个用户</span></span><br><span class="line">            Account source = accountDao.findByName(sourceAccount);</span><br><span class="line">            Account target = accountDao.findByName(targetAccount);</span><br><span class="line">            <span class="comment">//2.在内存中做出转账操作</span></span><br><span class="line">            <span class="comment">//2.1 源账户-money</span></span><br><span class="line">            source.setBalance(source.getBalance() - money);</span><br><span class="line">            <span class="comment">//2.2 目标账户+money</span></span><br><span class="line">            target.setBalance(target.getBalance() + money);</span><br><span class="line">            <span class="comment">//3.设置回数据库</span></span><br><span class="line">            accountDao.updateByName(source);</span><br><span class="line">            <span class="comment">//模拟程序出现异常</span></span><br><span class="line">            <span class="comment">//int i = 1 / 0;</span></span><br><span class="line">            accountDao.updateByName(target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事务管理器"><a href="#事务管理器" class="headerlink" title="事务管理器"></a>事务管理器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 事务管理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxManager</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line">    <span class="comment">//本地集合</span></span><br><span class="line">    <span class="keyword">private</span> ThreadLocal&lt;Connection&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;Connection&gt;();</span><br><span class="line"><span class="comment">//环绕通知方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aroundMethod</span><span class="params">(ProceedingJoinPoint point)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            begin();</span><br><span class="line">            point.proceed();</span><br><span class="line">            commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            rollback();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取到Connection对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;...&#125;</span><br><span class="line">    <span class="comment">//开启事务方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">begin</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line">    <span class="comment">//提交事务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line">    <span class="comment">//回滚事务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line">    <span class="comment">//关闭事务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="XML配置版本"><a href="#XML配置版本" class="headerlink" title="XML配置版本"></a>XML配置版本</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--组件扫描——注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.sun"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"datasource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///spring"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"queryRunner"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbutils.QueryRunner"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"ds"</span> <span class="attr">ref</span>=<span class="string">"datasource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置aop--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pt"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.sun.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"txManager"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--四大通知版--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;aop:before method="begin" pointcut-ref="pt"/&gt;</span></span><br><span class="line"><span class="comment">            &lt;aop:after-returning method="commit" pointcut-ref="pt"/&gt;</span></span><br><span class="line"><span class="comment">            &lt;aop:after-throwing method="rollback" pointcut-ref="pt"/&gt;</span></span><br><span class="line"><span class="comment">            &lt;aop:after method="close" pointcut-ref="pt"/&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--环绕通知版--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"aroundMethod"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="注解配置版本"><a href="#注解配置版本" class="headerlink" title="注解配置版本"></a>注解配置版本</h2><blockquote><p>删除xml配置中的aop配置</p><p>激活切面自动代理</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--组件扫描——注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.sun"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--激活切面自动代理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"datasource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///spring"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"queryRunner"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbutils.QueryRunner"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"ds"</span> <span class="attr">ref</span>=<span class="string">"datasource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="在增强类中进行注解配置"><a href="#在增强类中进行注解配置" class="headerlink" title="在增强类中进行注解配置"></a>在增强类中进行注解配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">//声明为切面类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//切点配置</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.sun.service.impl.*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pt</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//环绕通知配置</span></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"pt()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aroundMethod</span><span class="params">(ProceedingJoinPoint point)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            begin();</span><br><span class="line">            point.proceed();</span><br><span class="line">            commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            rollback();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line">    <span class="comment">//本地集合</span></span><br><span class="line">    <span class="keyword">private</span> ThreadLocal&lt;Connection&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;Connection&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取到Connection对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开启事务方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">begin</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提交事务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//回滚事务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭事务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JdbcTemplate介绍"><a href="#JdbcTemplate介绍" class="headerlink" title="JdbcTemplate介绍"></a>JdbcTemplate介绍</h1><p>JdbcTemplate是Spring提供的持久层技术，用于操作数据库，它底层封装了JDBC技术。</p><p>核心类：</p><ul><li>JdbcTemplate  用于执行增删改查的SQL语句 (QueryRunner)</li><li>RowMapper  这是一个接口，主要作用是将数据库返回的记录封装进实体对象(ResultHandler)</li></ul><p>核心方法：</p><ul><li>update()  用来执行增、删、改语句</li><li>query()    用来执行查询语句</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个JdbcTemplate对象，用来执行增删改查, 需要给一个数据源</span></span><br><span class="line">JdbcTemplate  jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line"></span><br><span class="line"><span class="comment">//update方法，用于执行增删改语句</span></span><br><span class="line"><span class="comment">//第一个参数:sql语句   后面的参数:sql语句中的所需要的的值</span></span><br><span class="line">jdbcTemplate.update(<span class="string">"insert into account value(null,?,?)"</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//query或者queryForObject方法，用于执行查询语句</span></span><br><span class="line"><span class="comment">//第一个参数:sql语句   第二个参数:封装返回值   后面的参数:sql语句中的所需要的的值</span></span><br><span class="line"><span class="comment">//query 用于查询多条记录,返回一个集合   </span></span><br><span class="line">jdbcTemplate.query(<span class="string">"select * from account"</span>, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>))</span>; </span><br><span class="line"><span class="comment">//queryForObject用于查询一条记录,返回一个实体</span></span><br><span class="line">jdbcTemplate.queryForObject(<span class="string">"select * from account where aid = ?"</span>,  <span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>),  1)</span>;</span><br></pre></td></tr></table></figure><h2 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h2><blockquote><p>使用JdbcTemplate完成一个crud+转账的案例(常用注解版)</p></blockquote><h3 id="准备account表和实体"><a href="#准备account表和实体" class="headerlink" title="准备account表和实体"></a>准备account表和实体</h3><p>略。。。</p><h3 id="新建工程导入相关依赖"><a href="#新建工程导入相关依赖" class="headerlink" title="新建工程导入相关依赖"></a>新建工程导入相关依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>day03_06_jdbc_template<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring-context--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring-test--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring-jdbc--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--druid--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--aspectjweaver--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">projec</span></span></span><br></pre></td></tr></table></figure><h3 id="Dao接口及实现"><a href="#Dao接口及实现" class="headerlink" title="Dao接口及实现"></a>Dao接口及实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Account <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.queryForObject(<span class="string">"select * from account where name = ?"</span> ,<span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>),<span class="title">name</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">"update account set balance = ? where name = ?"</span>,account.getBalance(),account.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Service接口及实现"><a href="#Service接口及实现" class="headerlink" title="Service接口及实现"></a>Service接口及实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转账方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceAccountName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetAccountName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceAccountName, String targetAccountName, Float money)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceAccountName, String targetAccountName, Float money)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//查询两个账户信息</span></span><br><span class="line">        Account sourceAccount = accountDao.findByName(sourceAccountName);</span><br><span class="line">        Account targetAccount = accountDao.findByName(targetAccountName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//进行修改</span></span><br><span class="line">        sourceAccount.setBalance(sourceAccount.getBalance() - money);</span><br><span class="line">        targetAccount.setBalance(targetAccount.getBalance() + money);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置回数据库</span></span><br><span class="line">        accountDao.update(sourceAccount);</span><br><span class="line">        accountDao.update(targetAccount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="XML配置"><a href="#XML配置" class="headerlink" title="XML配置"></a>XML配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.sun"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///spring"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--jdbcTemplate对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="测试-3"><a href="#测试-3" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        accountService.transfer(<span class="string">"A01"</span>,<span class="string">"A02"</span>,<span class="number">10f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Spring中的事务管理"><a href="#Spring中的事务管理" class="headerlink" title="Spring中的事务管理"></a>Spring中的事务管理</h1><h2 id="事务管理方式"><a href="#事务管理方式" class="headerlink" title="事务管理方式"></a>事务管理方式</h2><p>Spring支持两种事务管理方式：编程式事务和声明式事务</p><ul><li><p>编程式事务就是将业务代码和事务代码放在一起书写，它的耦合性太高，开发中不使用</p></li><li><p>声明式事务其实就是将事务代码和业务代码隔离开发，然后通过一段配置让他们组装运行，最后达到事务控制的目的</p></li></ul><p>声明式事务就是通过AOP原理实现的</p><h2 id="Spring事务管理相关的API"><a href="#Spring事务管理相关的API" class="headerlink" title="Spring事务管理相关的API"></a>Spring事务管理相关的API</h2><h3 id="PlatformTransactionManager"><a href="#PlatformTransactionManager" class="headerlink" title="PlatformTransactionManager"></a>PlatformTransactionManager</h3><p><img data-src="/assets/PlatformTransactionManager.png" alt="PlatformTransactionManager"></p><p>PlatformTransactionManager这是Spring进行事务管理的一个根接口，我们要使用它的实现类做事务管理</p><p><code>我们需要知道的是:mybatis和jdbcTemplate都可以使用它的一个子类(DataSourceTransactionManager)做事务管理</code></p><h3 id="TransactionDefinition"><a href="#TransactionDefinition" class="headerlink" title="TransactionDefinition"></a>TransactionDefinition</h3><p>TransactionDefinition这个API是用来做事务定义的</p><p><img data-src="/assets/TransactionDefinition.png" alt="TransactionDefinition"></p><h4 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h4><p><img data-src="/assets/%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB.png" alt="隔离级别"></p><h4 id="传播行为"><a href="#传播行为" class="headerlink" title="传播行为"></a>传播行为</h4><p>事务传播行为指的就是当一个业务方法【被】另一个业务方法调用时，应该如何进行事务控制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a()&#123;</span><br><span class="line">    b();<span class="comment">// b必须有事务才可以运行</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b()&#123;&#125;</span><br></pre></td></tr></table></figure><p><img data-src="/assets/%E4%BC%A0%E6%92%AD%E8%A1%8C%E4%B8%BA.png" alt="传播行为"></p><h4 id="只读性"><a href="#只读性" class="headerlink" title="只读性"></a>只读性</h4><p>只读事务(增 删  改不能使用,只能查询使用)</p><p>换句话说,只读事务只能用于查询方法</p><h4 id="超时时长"><a href="#超时时长" class="headerlink" title="超时时长"></a>超时时长</h4><p>事务超时时间, 此属性需要底层数据库的支持</p><p>它的默认值是-1, 代表不限制</p><h3 id="TransactionStatus"><a href="#TransactionStatus" class="headerlink" title="TransactionStatus"></a>TransactionStatus</h3><p>TransactionStatus代表的是事务的当前状态</p><h3 id="三个API之间的关系"><a href="#三个API之间的关系" class="headerlink" title="三个API之间的关系"></a>三个API之间的关系</h3><p>PlatformTransactionManager通过读取TransactionDefinition中定义事务信息参数,来管理事务,</p><p>管理之后会产生一些列的TransactionStatus</p><h1 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><strong>目标对象</strong>:  业务层的所有对象<code>自己开发</code></p><p><strong>增强对象</strong>:  事务管理器 (DataSourceTransactionManager) </p><ul><li><code>需要我们给它传递一批参数(事务隔离级别  传播行为  超时时长  只读)</code></li></ul><p><strong>配置切面</strong>:  配置的是切点和增强的关系   ==自己配置==</p><h2 id="xml版本"><a href="#xml版本" class="headerlink" title="xml版本"></a>xml版本</h2><h3 id="复制JdbcTemplate工程"><a href="#复制JdbcTemplate工程" class="headerlink" title="复制JdbcTemplate工程"></a>复制JdbcTemplate工程</h3><p>略…</p><h3 id="目标对象-1"><a href="#目标对象-1" class="headerlink" title="目标对象"></a>目标对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure><h3 id="配置事务管理器的参数和切面"><a href="#配置事务管理器的参数和切面" class="headerlink" title="配置事务管理器的参数和切面"></a>配置事务管理器的参数和切面</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.sun"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///spring"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--jdbcTemplate对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置事务管理器(增强)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--事务管理器需要的参数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pt"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.sun.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切面--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            aop:advisor  这是一个特殊的配置，只能用在Spring声明式事务配置上</span></span><br><span class="line"><span class="comment">            advice-ref="txAdvice"   用于指定增强-带有参数的事务管理器</span></span><br><span class="line"><span class="comment">            pointcut-ref = "pt" 用于指定切点</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="事务管理器参数的配置"><a href="#事务管理器参数的配置" class="headerlink" title="事务管理器参数的配置"></a>事务管理器参数的配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--事务管理器需要的参数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            name作用是在所有的切点中进行二次匹配，通过规则挑选一部分，这个匹配从上往下执行，一旦匹配到一个，就不再匹配下面的了</span></span><br><span class="line"><span class="comment">            isolation="DEFAULT" 设置隔离级别</span></span><br><span class="line"><span class="comment">            timeout="-1"    设置超时时间</span></span><br><span class="line"><span class="comment">            read-only="false"   设置超时时间</span></span><br><span class="line"><span class="comment">            propagation="REQUIRED" 这是传播行为</span></span><br><span class="line"><span class="comment">            no-rollback-for=""  对于哪个异常不会滚</span></span><br><span class="line"><span class="comment">            rollback-for=""     只针对什么异常回滚</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span>    /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="注解版"><a href="#注解版" class="headerlink" title="注解版"></a>注解版</h2><h3 id="复制xml版本工程"><a href="#复制xml版本工程" class="headerlink" title="复制xml版本工程"></a>复制xml版本工程</h3><p>略…</p><h3 id="删除aop-config和tx-advice配置"><a href="#删除aop-config和tx-advice配置" class="headerlink" title="删除aop:config和tx:advice配置"></a>删除aop:config和tx:advice配置</h3><p>略…</p><h3 id="在xml配置中开启事务注解驱动"><a href="#在xml配置中开启事务注解驱动" class="headerlink" title="在xml配置中开启事务注解驱动"></a>在xml配置中开启事务注解驱动</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启注解驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在目标对象中添加事务管理注解"><a href="#在目标对象中添加事务管理注解" class="headerlink" title="在目标对象中添加事务管理注解"></a>在目标对象中添加事务管理注解</h3><p>涉及注解：</p><ul><li><code>@Transactional</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span> <span class="comment">//该注解可以标在类上，也可以标在方法上，当前表示类中的方法具有事务管理的功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line">    <span class="comment">//该注解标在方法上的优先级会高于标在类上</span></span><br><span class="line">    <span class="meta">@Transactional</span>(</span><br><span class="line">            readOnly = <span class="keyword">false</span>,</span><br><span class="line">            isolation = Isolation.DEFAULT,</span><br><span class="line">            propagation = Propagation.REQUIRED,</span><br><span class="line">            timeout = -<span class="number">1</span></span><br><span class="line">    )</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceAccountName, String targetAccountName, Float money)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//查询两个账户信息</span></span><br><span class="line">        Account sourceAccount = accountDao.findByName(sourceAccountName);</span><br><span class="line">        Account targetAccount = accountDao.findByName(targetAccountName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//进行修改</span></span><br><span class="line">        sourceAccount.setBalance(sourceAccount.getBalance() - money);</span><br><span class="line">        targetAccount.setBalance(targetAccount.getBalance() + money);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置回数据库</span></span><br><span class="line">        accountDao.update(sourceAccount);</span><br><span class="line">        <span class="comment">//int i = 1 / 0;</span></span><br><span class="line">        accountDao.update(targetAccount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="纯注解版-1"><a href="#纯注解版-1" class="headerlink" title="纯注解版"></a>纯注解版</h2><p>转移xml配置到配置类，删除xml所有内容</p><p>注解：<code>@EnableTransactionManagement</code>   相当于<code>&lt;tx:annotation-driven/&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.sun"</span>)   <span class="comment">//&lt;context:component-scan base-package="com.sun"/&gt;</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span>    <span class="comment">//相当于&lt;tx:annotation-driven/&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">"jdbc:mysql:///spring"</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">"root"</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">jdbcTemplate</span> <span class="params">(DataSource dataSource)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">transactionManager</span><span class="params">(DataSource dataSource)</span></span>&#123;</span><br><span class="line">        DataSourceTransactionManager transactionManager = <span class="keyword">new</span> DataSourceTransactionManager();</span><br><span class="line">        transactionManager.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> transactionManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用动态代理优化转账代码&quot;&gt;&lt;a href=&quot;#使用动态代理优化转账代码&quot; class=&quot;headerlink&quot; title=&quot;使用动态代理优化转账代码&quot;&gt;&lt;/a&gt;使用动态代理优化转账代码&lt;/h1&gt;&lt;h2 id=&quot;JDK动态代理&quot;&gt;&lt;a href=&quot;#JDK动态代理&quot; class=&quot;headerlink&quot; title=&quot;JDK动态代理&quot;&gt;&lt;/a&gt;JDK动态代理&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;目标对象   + 代理逻辑  = 代理对象&lt;/p&gt;
&lt;p&gt;目标对象:    被代理的对象–AccountServiceImpl&lt;/p&gt;
&lt;p&gt;代理逻辑:    要增强的功能–事务管理&lt;/p&gt;
&lt;p&gt;代理对象:     一个具有事务管理功能的Service &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="框架" scheme="http://sunmoon.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Spring" scheme="http://sunmoon.com/categories/%E6%A1%86%E6%9E%B6/Spring/"/>
    
    
      <category term="动态代理" scheme="http://sunmoon.com/tags/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
      <category term="AOP介绍" scheme="http://sunmoon.com/tags/AOP%E4%BB%8B%E7%BB%8D/"/>
    
      <category term="AOP注解和XML开发" scheme="http://sunmoon.com/tags/AOP%E6%B3%A8%E8%A7%A3%E5%92%8CXML%E5%BC%80%E5%8F%91/"/>
    
      <category term="JdbcTemplate" scheme="http://sunmoon.com/tags/JdbcTemplate/"/>
    
      <category term="Spring中的事务管理" scheme="http://sunmoon.com/tags/Spring%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/"/>
    
      <category term="声明式事务" scheme="http://sunmoon.com/tags/%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Spring-2</title>
    <link href="http://sunmoon.com/2020/09/23/Spring-2/"/>
    <id>http://sunmoon.com/2020/09/23/Spring-2/</id>
    <published>2020-09-23T14:24:03.000Z</published>
    <updated>2020-09-23T14:26:19.807Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring注解开发"><a href="#Spring注解开发" class="headerlink" title="Spring注解开发"></a>Spring注解开发</h1><h2 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h2><blockquote><p>对比使用xml配置来学习注解开发</p></blockquote><p>对象实例化使用的注解：</p><ul><li><code>@Component</code>：用于实例化对象，相当于配置文件中的<code>&lt;bean id=&quot;&quot; class=&quot;&quot;/&gt;</code></li></ul><p>还有三个实例化对象的注解和@Component功能类似，但是分别标注在不同的层上：</p><ul><li><code>@Controller</code>：标注在表现层的类上</li><li><code>@Service</code>：标注在业务层的类上</li><li><code>@Repository</code>：标注在持久层的类上</li></ul><blockquote><p><strong>推荐使用这三个</strong>，当一个类实在不好归属在这三个层上时，再使用@Component</p><ul><li>例如注入工具类时，不属于任何一层，可以使用@Component</li></ul></blockquote><a id="more"></a><p><strong>注意：</strong></p><ul><li>使用注解开发时，要在xml配置文件中添加一条组件扫描的配置，否则Spring找不到注解配置。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">组件扫描。他需要我们给出一个包名</span></span><br><span class="line"><span class="comment">然后Spring会扫描这个包及其子包下的所有类中的Spring注解只有被扫描到的注解才能发挥作用</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.xxx"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="对象的生存范围"><a href="#对象的生存范围" class="headerlink" title="对象的生存范围"></a>对象的生存范围</h2><p>涉及一个注解：</p><ul><li><code>@Scope</code>:指定对象的生存范围(单例和多例)</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Spring中对象的生存范围: </span><br><span class="line"><span class="code">singleton</span></span><br><span class="line"><span class="code">prototype</span></span><br><span class="line"><span class="code">request</span></span><br><span class="line"><span class="code">session</span></span><br><span class="line"><span class="code">globalsession</span></span><br></pre></td></tr></table></figure><p><strong>小结</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Scope用于指定bean的作用范围(单例和多例)</span><br><span class="line">相当于配置文件中的<span class="xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">scope</span>=<span class="string">""</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="对象的生命周期"><a href="#对象的生命周期" class="headerlink" title="对象的生命周期"></a>对象的生命周期</h2><p>涉及两个注解：</p><ul><li><code>@PostConstruct</code>：标注在方法上，指定对象创建之后执行。</li><li><code>@PreDestroy</code>：标注在方法上，指定对象销毁之前执行。</li></ul><p>小结：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@PostConstruct @PreDestroy 这两个注解标注方法分别在对象的创建之后和销毁之前执行。</span><br><span class="line">相当于<span class="xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"destory"</span> /&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="对象的依赖注入"><a href="#对象的依赖注入" class="headerlink" title="对象的依赖注入"></a>对象的依赖注入</h2><p>涉及四个注解：</p><ul><li><p><code>@Autowired</code>：这个注解表示依赖注入，他可以标注在属性上，也可以标注在方法上，当@Autowired标注在属性上的时候，属性对应的set方法可以省略不写</p><blockquote><p>使用这个注解时，Spring会在他的IOC容器中按照被标注属性的类型进行寻找</p><ul><li>如果找不到，就会报错</li><li>如果找到了，而且正好找到了一个，那么就进行依赖注入</li><li>如果找到了，但是找到了多个，它会再按照属性名称进行匹配<ul><li>如果匹配上了就注入</li><li>如果匹配不上就报错</li></ul></li></ul></blockquote></li><li><p><code>@Value</code>：这个注解表示给简单类型(基本类型+基本类型包装类+String)进行依赖注入</p></li><li><p><code>@Qualifier</code>：要跟@Autowired联合使用，代表在按照类型匹配的基础上，再按照名称匹配。</p><blockquote><p>例如：此时IOC有两个UserDao类型的实例，名称分别为userDao1和userDao2,此时只使用@AutoWired注解进行匹配，就会匹配两个，并且此时属性名称为userDao，那么就一个都不会匹配到，我们就可以在属性上在加一个注解@Qualifier(“userDao1”),此时就可以匹配到名称为userDao1的实例。</p></blockquote><ul><li><p>使用实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span>(<span class="string">"accountDao1"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl1</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;...&#125;</span><br><span class="line"><span class="meta">@Repository</span>(<span class="string">"accountDao2"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl2</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"accountDao1"</span>) <span class="comment">//要跟@Autowired联合使用，代表在按照类型匹配的基础上，再按照名称匹配</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p><code>@Resource</code>：此注解由java提供，而且JDK9版本以后废弃了</p><blockquote><p>Spring会在他的IOC容器中先按照属性名称进行寻找</p><ul><li>如果找到了，就进行依赖注入</li><li>如果找不到，再按照类型进行匹配<ul><li>如果正好匹配到一个，就注入</li><li>如果匹配到多个，就报错</li></ul></li></ul><p>注意: @Resource(name = “userDaoImpl1”) 如果直接使用name指定名称，他就只会按照名称匹配</p></blockquote></li></ul><blockquote><p>小贴士：</p><ul><li><code>@Autowired</code>和<code>@Resource</code>区别?<ul><li><code>@Autowired</code>:先进行类型的匹配，匹配到多个的时候再进行name的匹配</li><li><code>Resource</code>：先进行name的匹配，匹配到多个的时候再进行类型的匹配</li></ul></li></ul></blockquote><h2 id="相关注解使用演示"><a href="#相关注解使用演示" class="headerlink" title="相关注解使用演示"></a>相关注解使用演示</h2><h3 id="dao接口和实现类"><a href="#dao接口和实现类" class="headerlink" title="dao接口和实现类"></a>dao接口和实现类</h3><ul><li>UserDao</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>UserDaoImpl</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 实例化对象的四个注解：</span></span><br><span class="line"><span class="comment">* @Component</span></span><br><span class="line"><span class="comment">*   用于实例化对象，相当于配置文件中的&lt;bean id="" class=""/&gt;</span></span><br><span class="line"><span class="comment">*   它支持一个属性value,相当于xml中bean的id。如果不写，默认值为类名的首字母小写</span></span><br><span class="line"><span class="comment">* @Controller  @Service  @Repository</span></span><br><span class="line"><span class="comment">*   这三个注解的功能跟@Component类似，他们分别标注在不同的层上。</span></span><br><span class="line"><span class="comment">*       @Controller  标注在表现层的类上</span></span><br><span class="line"><span class="comment">*       @Service     标注在业务层的类上</span></span><br><span class="line"><span class="comment">*       @Repository  标注在持久层的类上</span></span><br><span class="line"><span class="comment">*   推荐使用这三个，当一个类实在不好归属在这三个层上时，再使用@Component</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="comment">//@Scope用于指定bean的作用范围(单例和多例)，相当于配置文件中的&lt;bean scope=""&gt;</span></span><br><span class="line"><span class="meta">@Scope</span>(<span class="string">"singleton"</span>) <span class="comment">//该注解指定当前对象为单例(默认值)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"保存成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>UserDaoImpl1</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span>(<span class="string">"accountDao1"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl1</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"保存成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>UserDaoImpl2</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span>(<span class="string">"accountDao2"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl2</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"保存成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="service接口和实现类"><a href="#service接口和实现类" class="headerlink" title="service接口和实现类"></a>service接口和实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="comment">//@Scope("prototype")//该注解指定当前对象为多例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * @Autowired这个注解表示依赖注入，他可以标注在属性上，也可以标注在方法上，</span></span><br><span class="line"><span class="comment">    * 当@Autowired标注在属性上的时候，属性对应的set方法可以省略不写</span></span><br><span class="line"><span class="comment">    *   Spring会在他的IOC容器中按照被标注属性的类型进行寻找</span></span><br><span class="line"><span class="comment">    *        如果找不到，就会报错</span></span><br><span class="line"><span class="comment">    *        如果找到了，而且正好找到了一个，那么就进行依赖注入</span></span><br><span class="line"><span class="comment">    *        如果找到了，但是找到了多个，它会再按照属性名称进行匹配</span></span><br><span class="line"><span class="comment">    *            如果匹配上了就注入</span></span><br><span class="line"><span class="comment">    *            如果匹配不上就报错</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"accountDao1"</span>) <span class="comment">//要跟@Autowired联合使用，代表在按照类型匹配的基础上，再按照名称匹配</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Autowired</span></span><br><span class="line">    <span class="comment">//public void setUserDao(UserDao userDao) &#123;</span></span><br><span class="line">    <span class="comment">//    this.userDao = userDao;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * @PostConstruct @PreDestroy 这两个注解标注方法分别在对象的创建之后和销毁之前执行。</span></span><br><span class="line"><span class="comment">    * 相当于&lt;bean init-method="init" destroy-method="destroy" /&gt;</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"对象创建之后..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"对象销毁之前..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring的xml配置"><a href="#Spring的xml配置" class="headerlink" title="Spring的xml配置"></a>Spring的xml配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        组件扫描。他需要我们给出一个包名</span></span><br><span class="line"><span class="comment">        然后Spring会扫描这个包及其子包下的所有类中的Spring注解只有被扫描到的注解才能发挥作用</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.sun"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注解开发测试</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//读取配置文件</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        UserService userService = ac.getBean(UserService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        userService.save();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试单例多例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        UserService userService1 = ac.getBean(UserService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        UserService userService2 = ac.getBean(UserService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(userService1);</span><br><span class="line">        System.out.println(userService2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试生命周期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        UserService userService1 = ac.getBean(UserService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(userService1);</span><br><span class="line">        ac.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注解总结"><a href="#注解总结" class="headerlink" title="注解总结"></a>注解总结</h2><table><thead><tr><th>xml配置</th><th>注解配置</th><th>说明</th></tr></thead><tbody><tr><td>&lt; bean id=”” class=”” &gt;</td><td>@Component @Controller @Service    @Repository</td><td>bean的实例化</td></tr><tr><td>&lt; property name=”” ref=””&gt;</td><td>@Autowired  @Qualifier  @Resource</td><td>bean的对象属性注入</td></tr><tr><td>&lt; property name=”” value=””&gt;</td><td>@Value</td><td>bean的简单属性注入</td></tr><tr><td>&lt; bean scope=””&gt;</td><td>@Scope</td><td>控制bean的作用范围</td></tr><tr><td>&lt; bean init-method=”init” destroy method=”destory” /&gt;</td><td>@PostConstruct @PreDestroy</td><td>bean创建之后和销毁之前分别调用的方法</td></tr></tbody></table><blockquote><p>常用注解</p><ul><li><p>向Spring容器中放入对象 <code>@Component</code>、<code>@Controller</code>、<code>@Service</code>、<code>@Repository</code></p></li><li><p>从Spring容器中获取对象 <code>@Autowired</code></p></li></ul></blockquote><h1 id="使用Spring常用注解版操作数据库"><a href="#使用Spring常用注解版操作数据库" class="headerlink" title="使用Spring常用注解版操作数据库"></a>使用Spring常用注解版操作数据库</h1><p>常用注解版：指的是自己写的类使用注解配置,  第三方的类使用xml配置</p><h2 id="准备实体类及数据库的表"><a href="#准备实体类及数据库的表" class="headerlink" title="准备实体类及数据库的表"></a>准备实体类及数据库的表</h2><ul><li>数据库表</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table account(</span><br><span class="line">aid int primary key auto_increment,</span><br><span class="line">name varchar(100) not null unique,</span><br><span class="line">balance float(10,2)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer aid;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Float balance;</span><br><span class="line">    <span class="comment">//get、set、全参/无参方法略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Dao接口及实现类"><a href="#Dao接口及实现类" class="headerlink" title="Dao接口及实现类"></a>Dao接口及实现类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Account <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateByName</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">//进行依赖注入</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> QueryRunner queryRunner;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            queryRunner.update(<span class="string">"insert into account values(null,?,?)"</span>,account.getName(),account.getBalance());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> queryRunner.query(<span class="string">"select * from account where name = ?"</span>,<span class="keyword">new</span> BeanHandler&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>),<span class="title">name</span>)</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> queryRunner.query(<span class="string">"select * from account"</span>,<span class="keyword">new</span> BeanListHandler&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            queryRunner.update(<span class="string">"delete from account where name = ?"</span>,name);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateByName</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            queryRunner.update(<span class="string">"update account set balance = ? where name = ?"</span>,account.getBalance(),account.getName());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Service接口及实现类"><a href="#Service接口及实现类" class="headerlink" title="Service接口及实现类"></a>Service接口及实现类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Account <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateByName</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//进行依赖注入</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        accountDao.save(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findByName(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        accountDao.deleteByName(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateByName</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        accountDao.updateByName(account);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringXML配置"><a href="#SpringXML配置" class="headerlink" title="SpringXML配置"></a>SpringXML配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--添加组件扫描，扫描注解--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.sun"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///spring?characterEncoding=utf8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"queryRunner"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbutils.QueryRunner"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"ds"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//读取配置文件，初始化IOC容器</span></span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">    AccountService accountService = ac.getBean(AccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//测试查找所有</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        List&lt;Account&gt; all = accountService.findAll();</span><br><span class="line">        <span class="keyword">for</span> (Account account : all) &#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//测试查找一个,略...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试保存,略...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试修改,略...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试根据名称删除,略...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Spring纯注解开发"><a href="#Spring纯注解开发" class="headerlink" title="Spring纯注解开发"></a>Spring纯注解开发</h1><p>改造上面案例，使用纯注解开发的方式，即无XML配置方式开发</p><p>涉及新注解：</p><ul><li><code>@ComponentScan</code>：组件扫描注解。 相当于xml配置文件中的&lt;context:component-scan base-package=””/&gt; </li><li><code>@Bean</code>(重点)：该注解只能写在方法上，表明使用此方法创建一个对象，并且放入spring容器。它支持一个name属性，用于给生成的bean取一个id。 </li></ul><h2 id="删除XML配置文件中所有内容"><a href="#删除XML配置文件中所有内容" class="headerlink" title="删除XML配置文件中所有内容"></a>删除XML配置文件中所有内容</h2><p>略…</p><h2 id="创建一个Java类作为配置类"><a href="#创建一个Java类作为配置类" class="headerlink" title="创建一个Java类作为配置类"></a>创建一个Java类作为配置类</h2><ul><li>SpringConfig.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.sun"</span>)  <span class="comment">// 组件扫描注解。相当于xml配置文件中的&lt;context:component-scan base-package=""/&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * @Bean 注解的使用：</span></span><br><span class="line"><span class="comment">     *      1.只能标注在方法上，作用时获得当前方法的返回值对象，放入SpringIOC容器中</span></span><br><span class="line"><span class="comment">     *      2.放入到容器中的对象默认Id为当前方法的名字，也可以通过@Bean(name/value="")指定id名称</span></span><br><span class="line"><span class="comment">     *      3.@Bean还具有@Autowired标注在方法上的所有功能</span></span><br><span class="line"><span class="comment">     *      4.如果当前方法需要参数，那么会自动从Spring容器中查找，查找顺序和@Autowired一致</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"datasource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">getDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DruidDataSource dataSource =  <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">"jdbc:mysql:///spring"</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">"root"</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> QueryRunner <span class="title">queryRunner</span><span class="params">(DataSource dataSource)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> QueryRunner(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//读取配置文件，初始化IOC容器</span></span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfig<span class="class">.<span class="keyword">class</span>)</span>;<span class="comment">//读取配置类</span></span><br><span class="line">    AccountService accountService = ac.getBean(AccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//测试查找所有</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        List&lt;Account&gt; all = accountService.findAll();</span><br><span class="line">        <span class="keyword">for</span> (Account account : all) &#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//测试查找一个,略...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试保存,略...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试修改,略...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试根据名称删除,略...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优化一：提取数据库配置信息"><a href="#优化一：提取数据库配置信息" class="headerlink" title="优化一：提取数据库配置信息"></a>优化一：提取数据库配置信息</h2><p>因为后期可能对数据库的配置信息进行修改，所以我们不能使用硬编码的方式再程序中写死，可以提取到配置文件中进行引入。</p><ul><li>涉及注解：<ul><li><code>@PropertySource(&quot;jdbc.properties&quot;)</code>引入一个外部的数据库配置文件</li><li><code>@Value</code>：给简单类型注入值</li></ul></li></ul><p>jdbc.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span> = <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span> = <span class="string">jdbc:mysql:///spring</span></span><br><span class="line"><span class="meta">jdbc.username</span> = <span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span> = <span class="string">root</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.sun"</span>)  <span class="comment">// 组件扫描注解。相当于xml配置文件中的&lt;context:component-scan base-package=""/&gt;</span></span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"jdbc.properties"</span>) <span class="comment">// 引入一个外部的数据库配置文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//注入值</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.driver&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.url&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.username&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.password&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"datasource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">getDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DruidDataSource dataSource =  <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        <span class="comment">//下列数据库信息应当提取到配置文件中，方便后期更改</span></span><br><span class="line">        dataSource.setDriverClassName(driver);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> QueryRunner <span class="title">queryRunner</span><span class="params">(DataSource dataSource)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> QueryRunner(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：</p><ul><li>可以使用注解<code>@PropertySource(&quot;jdbc.properties&quot;)</code>引入一个外部的数据库配置文件</li></ul></blockquote><h2 id="优化二-配置类分模块"><a href="#优化二-配置类分模块" class="headerlink" title="优化二: 配置类分模块"></a>优化二: 配置类分模块</h2><p>后期配置项可以过多，xml文件可以进行模块化，Java配置类同样可以</p><p>涉及注解：</p><ul><li><code>@Import</code>：在一个配置类中导入其它配置类的内容</li><li><code>@Configuration</code>：被此注解标注的类,会被Spring认为是配置类。Spring在启动的时候会自动扫描并加载所有配置类，然后将配置类中bean放入容器</li></ul><p>注意：这两个注解的作用相同，都是进行配置类的加载，但是如果配置类过多的话，会导致@Import注解写太多次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Import(DruidConfig.class)  //在一个配置类中导入其它配置类的内容</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.sun"</span>)  <span class="comment">// 组件扫描注解。相当于xml配置文件中的&lt;context:component-scan base-package=""/&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> QueryRunner <span class="title">queryRunner</span><span class="params">(DataSource dataSource)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> QueryRunner(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  <span class="comment">//被此注解标注的类,会被Spring认为是配置类。Spring在启动的时候会自动扫描并加载所有配置类，然后将配置类中bean放入容器,代替@import注解</span></span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"jdbc.properties"</span>) <span class="comment">// 引入一个外部的数据库配置文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//注入值</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.driver&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.url&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.username&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.password&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"datasource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">getDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DruidDataSource dataSource =  <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        <span class="comment">//下列数据库信息应当提取到配置文件中，方便后期更改</span></span><br><span class="line">        dataSource.setDriverClassName(driver);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：</p><ul><li>推荐使用<code>@Configuration</code>加载多个配置类</li></ul></blockquote><h2 id="注解总结-1"><a href="#注解总结-1" class="headerlink" title="注解总结"></a>注解总结</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@ComponentScan</span><br><span class="line"><span class="code">组件扫描注解。 相当于xml配置文件中的&lt;context:component-scan base-package=""/&gt; </span></span><br><span class="line"></span><br><span class="line">@Bean(重点)</span><br><span class="line"><span class="code">该注解只能写在方法上，表明使用此方法创建一个对象，并且放入spring容器。它支持一个name属性，用于给生成的bean取一个id。 </span></span><br><span class="line"></span><br><span class="line">@PropertySource</span><br><span class="line"><span class="code">用于引入其它的properties配置文件</span></span><br><span class="line"></span><br><span class="line">@Import</span><br><span class="line"><span class="code">在一个配置类中导入其它配置类的内容</span></span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line"><span class="code">被此注解标注的类,会被Spring认为是配置类。Spring在启动的时候会自动扫描并加载所有配置类，然后将配置类中bean放入容器</span></span><br></pre></td></tr></table></figure><h1 id="Spring整合单元测试"><a href="#Spring整合单元测试" class="headerlink" title="Spring整合单元测试"></a>Spring整合单元测试</h1><p>在单元测试中，当点击run的时候，底层工作的其实是一个运行器，这个运行器是Junit提供的，它不认识Spring的环境，这也就意味着它无法从spring的容器中获取bean，如果想要从Spring的容器中获取对象，那就必须先认识Spring环境，Spring提供了一个运行器,这个运行器就认识Spring环境, 也就可以获取对象了。</p><p>涉及注解：</p><ul><li><code>@ContextConfiguration</code>：向运行器传递配置文件的位置</li><li><code>@RunWith</code>：切换单元测试运行器</li></ul><p><strong>使用实例：</strong></p><ul><li>前提：导入依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring单元测试--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>修改测试类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Spring整合单元测试  涉及注解：@ContextConfiguration   @RunWith</span></span><br><span class="line"><span class="comment">//@ContextConfiguration("classpath:applicationContext.xml")   //向运行器传递配置文件的位置</span></span><br><span class="line"><span class="meta">@ContextConfiguration</span>(classes = SpringConfig<span class="class">.<span class="keyword">class</span>)   //向运行器传递配置文件的位置</span></span><br><span class="line"><span class="class">@<span class="title">RunWith</span>(<span class="title">SpringJUnit4ClassRunner</span>.<span class="title">class</span>)      //切换单元测试运行器</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">AccountTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//注入service对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AccountService accountService;</span><br><span class="line">    <span class="comment">//测试查找所有</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        List&lt;Account&gt; all = accountService.findAll();</span><br><span class="line">        <span class="keyword">for</span> (Account account : all) &#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="转账案例之事务问题"><a href="#转账案例之事务问题" class="headerlink" title="转账案例之事务问题"></a>转账案例之事务问题</h1><h2 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h2><h3 id="实体和表"><a href="#实体和表" class="headerlink" title="实体和表"></a>实体和表</h3><p>数据库复用之前的account表</p><p>实体:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Account实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer aid;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Float balance;</span><br><span class="line">    <span class="comment">//get、set构造方法略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dao接口及实现"><a href="#dao接口及实现" class="headerlink" title="dao接口及实现"></a>dao接口及实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据名称查找一个账号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Account <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据名称修改账户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateByName</span><span class="params">(Account account)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> QueryRunner queryRunner;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> queryRunner.query(<span class="string">"select * from account where name = ?"</span>,<span class="keyword">new</span> BeanHandler&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>),<span class="title">name</span>)</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateByName</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            queryRunner.update(<span class="string">"update account set balance = ? where name = ?"</span>,account.getBalance(),account.getName());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="service接口及实现"><a href="#service接口及实现" class="headerlink" title="service接口及实现"></a>service接口及实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转账方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceAccount 转出用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetAccount 转入用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money 转账金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceAccount, String targetAccount, Float money)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceAccount, String targetAccount, Float money)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.查询数据库获取两个用户</span></span><br><span class="line">        Account source = accountDao.findByName(sourceAccount);</span><br><span class="line">        Account target = accountDao.findByName(targetAccount);</span><br><span class="line">        <span class="comment">//2.在内存中做出转账操作</span></span><br><span class="line">        <span class="comment">//2.1 源账户-money</span></span><br><span class="line">        source.setBalance(source.getBalance() - money);</span><br><span class="line">        <span class="comment">//2.2 目标账户+money</span></span><br><span class="line">        target.setBalance(target.getBalance() + money);</span><br><span class="line">        <span class="comment">//3.设置回数据库</span></span><br><span class="line">        accountDao.updateByName(source);</span><br><span class="line">        accountDao.updateByName(target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="xml配置"><a href="#xml配置" class="headerlink" title="xml配置"></a>xml配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--组件扫描——注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.sun"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"datasource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///spring"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"queryRunner"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbutils.QueryRunner"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"ds"</span> <span class="attr">ref</span>=<span class="string">"datasource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="测试-3"><a href="#测试-3" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        accountService.transfer(<span class="string">"A01"</span>,<span class="string">"A02"</span>,<span class="number">10f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="存在的事务问题"><a href="#存在的事务问题" class="headerlink" title="存在的事务问题"></a>存在的事务问题</h2><p>代码存在事务问题，事务问题原因是:  每执行完一条sql语句后， jdbc会自动提交事务</p><p>如果想要控制事务就要关闭事务的自动提交，而选择手动提交事务</p><p>要手动提交事务，就要保证执行多条sql语句的是同一个connection</p><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><p>想办法让同一个业务中的所有sql使用同一个connection</p><blockquote><p>让同一个业务中的所有SQL语句使用同一个连接，也就是说：当一个业务中有多条SQL的时候<br>不是每执行一条SQL就去连接池获取一个连接，用完了就归还<br>而是在第一条SQL执行之前获取到连接，用完了暂不归还，而是等到所有的SQL都执行完毕再归还</p></blockquote><p>想办法禁止自动提交，然后手动控制事务的提交和回滚</p><blockquote><p>开发一个事务管理器的类，在里面手动控制事务的开启和关闭</p></blockquote><p><img data-src="/assets/%E8%BD%AC%E8%B4%A6%E6%A1%88%E4%BE%8B%E4%BA%8B%E5%8A%A1%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%80%9D%E8%B7%AF.png" alt="转账案例事务问题解决思路"></p><h2 id="ThreadLocal介绍"><a href="#ThreadLocal介绍" class="headerlink" title="ThreadLocal介绍"></a>ThreadLocal介绍</h2><p>本地局部变量，它的底层就是一个特殊的map结构，此map的键是固定的，是当前线程对象</p><p>常见方法:</p><ul><li>set(value) ：向ThreadLocal中存入值</li><li>get()：从ThreadLocal取出值</li><li>remove() ：移除ThreadLocal中跟当前线程相关的数据</li></ul><blockquote><p>JDK中给我们提供了这样一个类，我们可以直接使用</p></blockquote><h1 id="解决事务问题"><a href="#解决事务问题" class="headerlink" title="解决事务问题"></a>解决事务问题</h1><p>再上一个案例的基础上，我们进行改造</p><h2 id="开发事务管理器"><a href="#开发事务管理器" class="headerlink" title="开发事务管理器"></a>开发事务管理器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 事务管理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line">    <span class="comment">//本地集合</span></span><br><span class="line">    <span class="keyword">private</span> ThreadLocal&lt;Connection&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;Connection&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取到Connection对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Connection connection = threadLocal.get();</span><br><span class="line">        <span class="keyword">if</span> (connection == <span class="keyword">null</span>)&#123; <span class="comment">//链接不存在</span></span><br><span class="line">            <span class="comment">//获取链接</span></span><br><span class="line">            connection = dataSource.getConnection();</span><br><span class="line">            <span class="comment">//存入本地集合</span></span><br><span class="line">            threadLocal.set(connection);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开启事务方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">begin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//开启事务</span></span><br><span class="line">            getConnection().setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提交事务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            getConnection().commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//回滚事务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            getConnection().rollback();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭事务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            getConnection().close();</span><br><span class="line">            <span class="comment">//释放集合中的存储的链接</span></span><br><span class="line">            threadLocal.remove();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改dao层代码"><a href="#修改dao层代码" class="headerlink" title="修改dao层代码"></a>修改dao层代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> QueryRunner queryRunner;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TxManager txManager;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> queryRunner.query(txManager.getConnection(),<span class="string">"select * from account where name = ?"</span>,<span class="keyword">new</span> BeanHandler&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>),<span class="title">name</span>)</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateByName</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            queryRunner.update(txManager.getConnection(),<span class="string">"update account set balance = ? where name = ?"</span>,account.getBalance(),account.getName());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：改造后我们再执行sql时传递一个链接对象，指定连接对象去执行sql，该对象就是再ThreadLocal中获取的，由此便保证再执行一个事务的时候，我们获取到的连接对象是一致的。</p></blockquote><h2 id="修改Service层代码"><a href="#修改Service层代码" class="headerlink" title="修改Service层代码"></a>修改Service层代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TxManager txManager;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceAccount, String targetAccount, Float money)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            存在的问题：</span></span><br><span class="line"><span class="comment">                代码存在事务问题，事务问题原因是:  每执行完一条sql语句后， jdbc会自动提交事务</span></span><br><span class="line"><span class="comment">                如果想要控制事务就要关闭事务的自动提交，而选择手动提交事务</span></span><br><span class="line"><span class="comment">                要手动提交事务，就要保证执行多条sql语句的是同一个connection</span></span><br><span class="line"><span class="comment">            解决思路：</span></span><br><span class="line"><span class="comment">                想办法让同一个业务中的所有sql使用同一个connection</span></span><br><span class="line"><span class="comment">                让同一个业务中的所有SQL语句使用同一个连接，也就是说：当一个业务中有多条SQL的时候</span></span><br><span class="line"><span class="comment">                不是每执行一条SQL就去连接池获取一个连接，用完了就归还</span></span><br><span class="line"><span class="comment">                而是在第一条SQL执行之前获取到连接，用完了暂不归还，而是等到所有的SQL都执行完毕再归还</span></span><br><span class="line"><span class="comment">                想办法禁止自动提交，然后手动控制事务的提交和回滚</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//开启事务</span></span><br><span class="line">            txManager.begin();</span><br><span class="line">            <span class="comment">// 执行sql</span></span><br><span class="line">            <span class="comment">//1.查询数据库获取两个用户</span></span><br><span class="line">            Account source = accountDao.findByName(sourceAccount);</span><br><span class="line">            Account target = accountDao.findByName(targetAccount);</span><br><span class="line">            <span class="comment">//2.在内存中做出转账操作</span></span><br><span class="line">            <span class="comment">//2.1 源账户-money</span></span><br><span class="line">            source.setBalance(source.getBalance() - money);</span><br><span class="line">            <span class="comment">//2.2 目标账户+money</span></span><br><span class="line">            target.setBalance(target.getBalance() + money);</span><br><span class="line">            <span class="comment">//3.设置回数据库</span></span><br><span class="line">            accountDao.updateByName(source);</span><br><span class="line">            <span class="comment">//模拟程序出现异常</span></span><br><span class="line">            <span class="comment">//int i = 1 / 0;</span></span><br><span class="line">            accountDao.updateByName(target);</span><br><span class="line">            <span class="comment">//提交事务</span></span><br><span class="line">            txManager.commit();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">//事务回滚</span></span><br><span class="line">            txManager.rollback();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//事务关闭</span></span><br><span class="line">            txManager.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="改造后存在的问题"><a href="#改造后存在的问题" class="headerlink" title="改造后存在的问题"></a>改造后存在的问题</h2><p>现在的事务代码和业务代码严重耦合在一起了，我们希望的是这样：在不改动原来业务代码的前提下，给代码添加事务管理功能</p><p>即：在不修改源代码的情况下，给代码增强功能</p><h2 id="解决思路-1"><a href="#解决思路-1" class="headerlink" title="解决思路"></a>解决思路</h2><p>使用动态代理进行功能的增强</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring注解开发&quot;&gt;&lt;a href=&quot;#Spring注解开发&quot; class=&quot;headerlink&quot; title=&quot;Spring注解开发&quot;&gt;&lt;/a&gt;Spring注解开发&lt;/h1&gt;&lt;h2 id=&quot;对象的创建&quot;&gt;&lt;a href=&quot;#对象的创建&quot; class=&quot;headerlink&quot; title=&quot;对象的创建&quot;&gt;&lt;/a&gt;对象的创建&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;对比使用xml配置来学习注解开发&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对象实例化使用的注解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@Component&lt;/code&gt;：用于实例化对象，相当于配置文件中的&lt;code&gt;&amp;lt;bean id=&amp;quot;&amp;quot; class=&amp;quot;&amp;quot;/&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还有三个实例化对象的注解和@Component功能类似，但是分别标注在不同的层上：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@Controller&lt;/code&gt;：标注在表现层的类上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Service&lt;/code&gt;：标注在业务层的类上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Repository&lt;/code&gt;：标注在持久层的类上&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;推荐使用这三个&lt;/strong&gt;，当一个类实在不好归属在这三个层上时，再使用@Component&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;例如注入工具类时，不属于任何一层，可以使用@Component&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="框架" scheme="http://sunmoon.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Spring" scheme="http://sunmoon.com/categories/%E6%A1%86%E6%9E%B6/Spring/"/>
    
    
      <category term="spring注解" scheme="http://sunmoon.com/tags/spring%E6%B3%A8%E8%A7%A3/"/>
    
      <category term="常用注解版开发" scheme="http://sunmoon.com/tags/%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3%E7%89%88%E5%BC%80%E5%8F%91/"/>
    
      <category term="纯注解开发" scheme="http://sunmoon.com/tags/%E7%BA%AF%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/"/>
    
      <category term="转账之事务" scheme="http://sunmoon.com/tags/%E8%BD%AC%E8%B4%A6%E4%B9%8B%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Spring-1</title>
    <link href="http://sunmoon.com/2020/09/22/Spring-1/"/>
    <id>http://sunmoon.com/2020/09/22/Spring-1/</id>
    <published>2020-09-22T14:09:59.000Z</published>
    <updated>2020-09-22T14:23:50.851Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring概述"><a href="#Spring概述" class="headerlink" title="Spring概述"></a>Spring概述</h1><p>Spring是<code>分层(三层)</code>的Java应用<code>轻量级</code>开源框架</p><p>Spring的核心是 <code>IOC（Inverse Of Control：反转控制）</code>和 <code>AOP（Aspect Oriented Programming：面向切面编程）</code></p><p>Spring一个全栈应用框架, 提供了表现层 Spring MVC 和持久层 Spring JDBC 以及业务层事务管理等众多应用技术</p><p>Spring还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的 Java EE 企业应用开源框架 </p><a id="more"></a><p>三层：</p><ul><li>web(跟用户交互) —— SpringMVC</li><li>service(处理业务)—— 事务—–声明式事务</li><li>dao(跟数据交互) —— SpringJDBC</li></ul><p>轻量级：</p><ul><li>用起来简单—api比较少</li><li>运行时占用资源少</li></ul><p>核心：</p><ul><li>IOC   反转控制</li><li>AOP  面向切面编程</li></ul><p>体系结构：</p><p><img data-src="/assets/spring%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.png" alt="spring体系结构"></p><h1 id="认识IOC"><a href="#认识IOC" class="headerlink" title="认识IOC"></a>认识IOC</h1><p>在我们进行传统的web项目开发时：</p><ul><li>实体类：<code>class User{...}</code></li><li>dao层：<code>UserDao{访问DB进行数据库的操作}</code></li><li>service层：<code>UserServicee{UserDao dao = new UserDao}</code></li><li>web层：<code>UserServlet{UserService service = new UserService}</code></li></ul><p>用户访问时：<code>tomcat-&gt;servlet-&gt;service-&gt;dao</code></p><p>在web层和service层都存在耦合：</p><ul><li>web 依赖 service</li><li>service 依赖 dao</li></ul><p>虽然我们可以通过工厂模式对上述结构进行解耦，但是在工厂获取对象的时候，每次获取都是都是不同的对象，是多例的，浪费了资源；而且每次使用的时候才创建，浪费了时间。</p><p>在此基础上我们可以在工厂中添加静态代码块，类加载时就使用工厂生产对象，存入到一个容器中，每次需要时，直接在集合中获取返回集合。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>在这个过程中，对象的创建由原来的使用new关键字在类中主动创建变成了从工厂中获取，而对象的创建过程由工厂内部来实现，然后进一步对工厂进行优化，提前准备好对象存储到容器中，需要时直接返回。</p><p>这个优化后的工厂就类似Spring的IOC容器，也就是学习Spring之后，对象不在由自己创建，而时直接向Spring要，这种思想就是IOC。</p><h1 id="IOC思想介绍"><a href="#IOC思想介绍" class="headerlink" title="IOC思想介绍"></a>IOC思想介绍</h1><p>IOC( 控制 反转 )是一种设计思想,  它的目的是指导我们设计出更加松耦合的程序。(解耦)</p><ul><li>控制：指的是控制权，现在可以简单理解为对象的创建权限</li><li>反转：指的对象的控制权由程序员在类中主动控制(new)反转到由Spring容器来控制。</li></ul><p>举个例子：找对象</p><ul><li>传统方式 : 自己找</li><li>婚介所: 先将自己的信息注册到婚介所, 然后到你需要对象的时候, 直接问婚介所要一个对象, 婚介所会给你想办法创建一个对象出来,送过来</li></ul><blockquote><p>小结：</p><ul><li>IOC通俗的说就是，之前由我们<strong>new对象</strong>变成了<strong>向Spring的IOC容器要对象</strong></li></ul></blockquote><h1 id="Spring入门"><a href="#Spring入门" class="headerlink" title="Spring入门"></a>Spring入门</h1><h2 id="导入Spring依赖"><a href="#导入Spring依赖" class="headerlink" title="导入Spring依赖"></a>导入Spring依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="创建dao接口和实现类"><a href="#创建dao接口和实现类" class="headerlink" title="创建dao接口和实现类"></a>创建dao接口和实现类</h2><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模拟向数据库保存信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"保存了用户信息..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="加入Spring的配置文件"><a href="#加入Spring的配置文件" class="headerlink" title="加入Spring的配置文件"></a>加入Spring的配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"com.sun.dao.impl.UserDaoImpl"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="编写测试类：模拟service层调用进行测试"><a href="#编写测试类：模拟service层调用进行测试" class="headerlink" title="编写测试类：模拟service层调用进行测试"></a>编写测试类：模拟service层调用进行测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模拟Service调用dao进行测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//读取配置文件，初始化IOC容器</span></span><br><span class="line">        <span class="comment">//方式一:读取类路径下的配置文件：推荐</span></span><br><span class="line">        ApplicationContext apt = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">//方式二：读取磁盘文件中的配置文件</span></span><br><span class="line">        <span class="comment">//ApplicationContext apt = new FileSystemXmlApplicationContext("E:\\IDEA_Workspace\\spring\\day01_01spring_ioc\\src\\main\\resources\\applicationContext.xml");</span></span><br><span class="line">        <span class="comment">//IOC容器中获取UserDao对象</span></span><br><span class="line">        <span class="comment">//方式一：根据配置文件中bean的id获取</span></span><br><span class="line">        <span class="comment">//UserDao userDao = (UserDao) apt.getBean("userDao");</span></span><br><span class="line">        <span class="comment">//方式二：使用bean的class类型从容器中查找对象</span></span><br><span class="line">        <span class="comment">//UserDao userDao = apt.getBean(UserDaoImpl.class);</span></span><br><span class="line">        <span class="comment">//方式三：根据id和class类型获取对象</span></span><br><span class="line">        UserDao userDao = apt.getBean(<span class="string">"userDao"</span>, UserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//执行方法</span></span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="要点分析"><a href="#要点分析" class="headerlink" title="要点分析"></a>要点分析</h2><h3 id="SpringIOC容器启动过程中要做哪些操作"><a href="#SpringIOC容器启动过程中要做哪些操作" class="headerlink" title="SpringIOC容器启动过程中要做哪些操作"></a>SpringIOC容器启动过程中要做哪些操作</h3><p><img data-src="/assets/SpringIOC%E5%AE%B9%E6%98%93%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%81%9A%E7%9A%84%E4%BA%8B%E6%83%85.png" alt="SpringIOC容易启动过程中做的事情"></p><h3 id="SpringIOC存储对象的Map到底在哪里"><a href="#SpringIOC存储对象的Map到底在哪里" class="headerlink" title="SpringIOC存储对象的Map到底在哪里"></a>SpringIOC存储对象的Map到底在哪里</h3><p><img data-src="/assets/springIOC%E5%AD%98%E5%82%A8%E5%AF%B9%E8%B1%A1%E7%9A%84Map%E5%9C%A8%E5%93%AA%E9%87%8C.png" alt="springIOC存储对象的Map在哪里"></p><h1 id="API介绍"><a href="#API介绍" class="headerlink" title="API介绍"></a>API介绍</h1><p><img data-src="/assets/SpringAPI%E4%BB%8B%E7%BB%8D.png" alt="SpringAPI介绍"></p><h2 id="两个接口"><a href="#两个接口" class="headerlink" title="两个接口"></a>两个接口</h2><h3 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h3><p>这是SpringIOC容器的顶级接口，它定义了SpringIOC的最基础的功能，但是其功能比较简单,  一般面向Spring自身使用</p><p>BeanFactroy在第一次使用到某个Bean时(调用getBean())，才对该Bean进行加载实例化</p><h3 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h3><p>这是在BeanFactory基础上衍生出的接口，它扩展了BeanFactory的功能，一般面向程序员使用 </p><p>ApplicationContext是在容器启动时，一次性创建并加载了所有的Bean</p><p><strong>上面两种方式创建的对象都是单例，只是创建对象的时机不同</strong></p><h2 id="三个实现类"><a href="#三个实现类" class="headerlink" title="三个实现类"></a>三个实现类</h2><p>这三个类的作用都是：读取配置文件, 初始化Spring的IOC容器,  不一样的是加载配置文件的位置</p><ul><li>ClassPathXmlApplicationContext         读取类路径下的xml作为配置文件</li><li>FileSystemXmlApplicationContext       读取本地目录下的xml作为配置文件</li><li>AnnotationConfigApplicationContext  读取一个Java类作为配置文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//读取配置文件，初始化IOC容器</span></span><br><span class="line">        <span class="comment">//方式一:读取类路径下的配置文件：推荐</span></span><br><span class="line">        ApplicationContext apt1 = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">//方式二：读取磁盘文件中的配置文件</span></span><br><span class="line">        ApplicationContext apt2 = <span class="keyword">new</span> FileSystemXmlApplicationContext(<span class="string">"E:\\IDEA_Workspace\\spring\\spring_ioc\\src\\main\\resources\\applicationContext.xml"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一个方法"><a href="#一个方法" class="headerlink" title="一个方法"></a>一个方法</h2><p>getBean() 用于从Spring容器中获取Bean对象，参数可以使用三种情况：</p><ul><li><code>getBean(&quot;id&quot;)</code>：使用bean的id从容器中查找对象</li><li><code>getBean(Bean.class)</code>：使用bean的class类型从容器中查找对象</li><li><code>getBean(&quot;id&quot;, Bean.class)</code>：使用bean的id 和 class类型从容器中查找对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//读取配置文件，初始化IOC容器</span></span><br><span class="line">        ApplicationContext apt = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">//IOC容器中获取UserDao对象</span></span><br><span class="line">        <span class="comment">//方式一：根据配置文件中bean的id获取</span></span><br><span class="line">        UserDao userDao1 = (UserDao) apt.getBean(<span class="string">"userDao"</span>);</span><br><span class="line">        <span class="comment">//方式二：使用bean的class类型从容器中查找对象</span></span><br><span class="line">        UserDao userDao2 = apt.getBean(UserDaoImpl<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//方式三：根据id和class类型获取对象</span></span><br><span class="line">        UserDao userDao3 = apt.getBean(<span class="string">"userDao"</span>, UserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//执行方法</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Bean的配置"><a href="#Bean的配置" class="headerlink" title="Bean的配置"></a>Bean的配置</h1><h2 id="bean的创建方式"><a href="#bean的创建方式" class="headerlink" title="bean的创建方式"></a>bean的创建方式</h2><h3 id="传统方式创建对象的三种方式"><a href="#传统方式创建对象的三种方式" class="headerlink" title="传统方式创建对象的三种方式"></a>传统方式创建对象的三种方式</h3><p><strong>book类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line">    <span class="keyword">private</span> Date publish;</span><br><span class="line">    get/set构造方法略...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>工厂类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Book <span class="title">getBook1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Book();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Book <span class="title">getBook2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Book();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>①直接使用new关键字创建</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Book book = <span class="keyword">new</span> Book();</span><br></pre></td></tr></table></figure><p><strong>②使用静态工厂创建</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Book book1 = BeanFactory.getBook1();</span><br></pre></td></tr></table></figure><p><strong>③使用实例化工厂创建</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BeanFactory beanFactory = <span class="keyword">new</span> BeanFactory();</span><br><span class="line">Book book2 = beanFactory.getBook2();</span><br></pre></td></tr></table></figure><h3 id="Spring创建对象的三种方式"><a href="#Spring创建对象的三种方式" class="headerlink" title="Spring创建对象的三种方式"></a>Spring创建对象的三种方式</h3><p><strong>bean配置</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring创建对象的三种方式--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1 调用构造函数创建对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book"</span> <span class="attr">class</span>=<span class="string">"com.sun.createbeans.Book"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2 使用静态工厂创建对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book1"</span> <span class="attr">class</span>=<span class="string">"com.sun.createbeans.BeanFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getBook1"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3 使用实例化工厂创建对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"beanFactory"</span> <span class="attr">class</span>=<span class="string">"com.sun.createbeans.BeanFactory"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book2"</span> <span class="attr">factory-bean</span>=<span class="string">"beanFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getBook2"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCreateBook</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * Spring创建对象的三种方式</span></span><br><span class="line"><span class="comment">    *   调用构造函数创建</span></span><br><span class="line"><span class="comment">    *   使用静态工厂创建</span></span><br><span class="line"><span class="comment">    *   使用实例化工厂创建</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//读取配置文件，初始化IOC容器</span></span><br><span class="line">        ApplicationContext apt = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">//第一种,调用构造方法创建</span></span><br><span class="line">        Book book = (Book) apt.getBean(<span class="string">"book"</span>);</span><br><span class="line">        System.out.println(book);</span><br><span class="line">        <span class="comment">//第二种，使用静态工厂创建</span></span><br><span class="line">        Book book1 = (Book) apt.getBean(<span class="string">"book1"</span>);</span><br><span class="line">        System.out.println(book1);</span><br><span class="line">        <span class="comment">//第三种，使用实例化工厂创建</span></span><br><span class="line">        Book book2 = (Book) apt.getBean(<span class="string">"book2"</span>);</span><br><span class="line">        System.out.println(book2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Bean的作用范围"><a href="#Bean的作用范围" class="headerlink" title="Bean的作用范围"></a>Bean的作用范围</h2><p>在Spring中，对于bean支持五种作用范围：</p><ul><li><strong>singleton</strong>(默认) 单例模式，即对象只创建一次, 然后一直存在, 知道Spring容器关闭</li><li><strong>prototype</strong>         多例模式，即每次获取bean的时候，IOC都给我们创建一个新对象</li><li><strong>request</strong>             web项目中，Spring创建一个Bean的对象，将对象存入到request域中</li><li><strong>session</strong>              web 项目中，Spring 创建一个Bean 的对象，将对象存入到session域中</li><li><strong>globalSession</strong>   用于分布式web开发中，创建的实例绑定全局session对象</li></ul><blockquote><p>可以在bean配置中进行配置：</p><ul><li>例如：<code>&lt;bean id=&quot;book&quot; class=&quot;com.sun.createbeans.Book&quot; scope=&quot;singleton&quot;/&gt;</code></li></ul></blockquote><h2 id="Bean的生命周期"><a href="#Bean的生命周期" class="headerlink" title="Bean的生命周期"></a>Bean的生命周期</h2><p>研究bean的生命周期，无非就是弄明白bean是什么时候创建的，什么时候销毁的</p><p>在Spring中，bean的作用范围会影响到其生命周期，所以我们要分单例和多例对象来研究bean的生命周期</p><h3 id="单例对象"><a href="#单例对象" class="headerlink" title="单例对象"></a>单例对象</h3><p>生: 容器初始化</p><p>死: 容器销毁</p><p><img data-src="/assets/bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F-%E5%8D%95%E4%BE%8B%E5%AF%B9%E8%B1%A1.png" alt="bean生命周期-单例对象"></p><h3 id="多例对象"><a href="#多例对象" class="headerlink" title="多例对象"></a>多例对象</h3><p>生: 每一次getBean()调用的时候出生</p><p>死: 不会受到Spring的控制, 由垃圾回收期负责回收</p><p><img data-src="/assets/bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F-%E5%A4%9A%E4%BE%8B%E5%AF%B9%E8%B1%A1.png" alt="bean生命周期-多例对象"></p><h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><p>依赖注入(Dependency Injection，DI) 其实就是给对象中的属性赋值的过程</p><p>依赖注入有两种方式，分别是使用构造函数和set方法</p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>在book类中提供一个全参构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line">    <span class="keyword">private</span> Date publish;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//全参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String bookName, <span class="keyword">double</span> price, Date publish)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bookName = bookName;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">        <span class="keyword">this</span>.publish = publish;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在配置文件中赋值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring依赖注入 简单类型：基本类型，基本类型的包装类，String--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--构造函数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"date"</span> <span class="attr">class</span>=<span class="string">"java.util.Date"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book1"</span> <span class="attr">class</span>=<span class="string">"com.sun.createbeans.Book"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            name:构造方法中形参名称</span></span><br><span class="line"><span class="comment">            index：构造方法中形参的索引，一般省略不写</span></span><br><span class="line"><span class="comment">            type:构造函数中形参的类型，一般可以省略，底层可以通过反射技术自己获取</span></span><br><span class="line"><span class="comment">            value:构造函数中参数用改赋的值(简单类型：基本类型，基本类型的包装类，String)</span></span><br><span class="line"><span class="comment">            ref:构造函数中的参数应该赋的值(引用类型)，用于指定当前容器中一个存在的bean对象的id</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"bookName"</span> <span class="attr">value</span>=<span class="string">"西游记"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"price"</span> <span class="attr">value</span>=<span class="string">"30"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"publish"</span> <span class="attr">ref</span>=<span class="string">"date"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="set方法"><a href="#set方法" class="headerlink" title="set方法"></a>set方法</h3><p>提供book的set方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line">    <span class="keyword">private</span> Date publish;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//全参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String bookName, <span class="keyword">double</span> price, Date publish)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bookName = bookName;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">        <span class="keyword">this</span>.publish = publish;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBookName</span><span class="params">(String bookName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bookName = bookName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPublish</span><span class="params">(Date publish)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.publish = publish;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在配置文件中进行赋值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--set方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book2"</span> <span class="attr">class</span>=<span class="string">"com.sun.createbeans.Book"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"bookName"</span> <span class="attr">value</span>=<span class="string">"红楼梦"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"price"</span> <span class="attr">value</span>=<span class="string">"50"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"publish"</span> <span class="attr">ref</span>=<span class="string">"date"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="p名称空间用法"><a href="#p名称空间用法" class="headerlink" title="p名称空间用法"></a>p名称空间用法</h3><blockquote><p>注意: 使用这个必须导入p的约束</p></blockquote><p>bean配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--p名称空间（注意，使用p名称空间需要导入约束）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book3"</span> <span class="attr">class</span>=<span class="string">"com.sun.createbeans.Book"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">p:bookName</span>=<span class="string">"水浒传"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">p:price</span>=<span class="string">"80"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">p:publish-ref</span>=<span class="string">"date"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="注入集合属性"><a href="#注入集合属性" class="headerlink" title="注入集合属性"></a>注入集合属性</h2><h3 id="在book中准备集合属性"><a href="#在book中准备集合属性" class="headerlink" title="在book中准备集合属性"></a>在book中准备集合属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line">    <span class="keyword">private</span> Date publish;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String[] array;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; set;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; map;</span><br><span class="line">    <span class="keyword">private</span> Properties props;</span><br><span class="line">    <span class="comment">//提供相应的set方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setArray</span><span class="params">(String[] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.array = array;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSet</span><span class="params">(Set&lt;String&gt; set)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.set = set;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMap</span><span class="params">(Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.map = map;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProps</span><span class="params">(Properties props)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.props = props;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单列集合的注入"><a href="#单列集合的注入" class="headerlink" title="单列集合的注入"></a>单列集合的注入</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring依赖注入 集合：数组 list map set properties--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--数组--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book4"</span> <span class="attr">class</span>=<span class="string">"com.sun.createbeans.Book"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"array"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>AA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>BB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--list集合--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book5"</span> <span class="attr">class</span>=<span class="string">"com.sun.createbeans.Book"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>CC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>DD<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--set集合--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book6"</span> <span class="attr">class</span>=<span class="string">"com.sun.createbeans.Book"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"set"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>EE<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>FF<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="双列集合依赖注入"><a href="#双列集合依赖注入" class="headerlink" title="双列集合依赖注入"></a>双列集合依赖注入</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--map集合--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book7"</span> <span class="attr">class</span>=<span class="string">"com.sun.createbeans.Book"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"GG"</span> <span class="attr">value</span>=<span class="string">"gg"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"HH"</span> <span class="attr">value</span>=<span class="string">"hh"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--properties集合--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book8"</span> <span class="attr">class</span>=<span class="string">"com.sun.createbeans.Book"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"II"</span>&gt;</span>ii<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"JJ"</span>&gt;</span>jj<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="配置文件模块化"><a href="#配置文件模块化" class="headerlink" title="配置文件模块化"></a>配置文件模块化</h1><p>我们现在的配置都集中配在了一个applicationContext.xml文件中，当开发人员过多时， 如果所有bean都配置到同一个配置文件中，会使这个文件巨大。</p><p>针对这个问题, Spring给我们提供了两种解决方案:</p><ul><li><strong>同时引入多个配置文件</strong></li></ul><p><img data-src="/assets/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%A8%A1%E5%9D%97%E5%8C%961.png" alt="配置文件模块化1"></p><ul><li><strong>主从配置</strong></li></ul><p><img data-src="/assets/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%A8%A1%E5%9D%97%E5%8C%962.png" alt="配置文件模块化2"></p><blockquote><p>注意:</p><ol><li>同一个xml文件中不允许出现相同名称的bean，如果出现会报错</li><li>多个xml文件如果出现相同名称的bean，不会报错，但是后加载的会覆盖前加载，所以尽量保证bean的名称是唯一的。</li></ol></blockquote><h1 id="DBUtils"><a href="#DBUtils" class="headerlink" title="DBUtils"></a>DBUtils</h1><h2 id="DbUtils介绍"><a href="#DbUtils介绍" class="headerlink" title="DbUtils介绍"></a>DbUtils介绍</h2><blockquote><p>java中操作数据库的框架，一定会有的方法：</p><ol><li>发送SQL语句</li><li>接收返回的数据结果，并且封装为对象或集合</li></ol></blockquote><p>DbUtils是Apache的一款用于简化Dao代码的工具类，它底层封装了JDBC技术。</p><p>核心类：</p><ul><li>QueryRunner          用于执行增删改查的SQL语句</li><li>ResultSetHandler    这是一个接口，主要作用是将数据库返回的记录封装进实体对象或集合</li></ul><p>核心方法：</p><ul><li>update()    用来执行增、删、改语句  </li><li>query()      用来执行查询语句</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个QueryRunner对象，用来执行增删改查</span></span><br><span class="line"><span class="comment">//这里需要给一个数据源，如果此处不给，那么使用它调用具体API的时候必须要给</span></span><br><span class="line">QueryRunner queryRunner = <span class="keyword">new</span> QueryRunner(dataSource);</span><br><span class="line"></span><br><span class="line"><span class="comment">//update方法，用于执行增删改语句</span></span><br><span class="line"><span class="comment">//第一个参数:sql语句   后面的参数:sql语句中的所需要的的值</span></span><br><span class="line">queryRunner.update(<span class="string">"insert into account value(null,?,?)"</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//query方法，用于执行查询语句</span></span><br><span class="line"><span class="comment">//第一个参数:sql语句   第一个参数:封装返回值   后面的参数:sql语句中的所需要的的值</span></span><br><span class="line"><span class="comment">//BeanHandler用于将一条返回数据封装成一个JavaBean,  类似的子类还有BeanListHandler等</span></span><br><span class="line">queryRunner.query(<span class="string">"select * from account where aid = ?"</span>,  <span class="keyword">new</span> BeanHandler&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>),  1)</span>;</span><br></pre></td></tr></table></figure><h2 id="DBUtils简单使用案例"><a href="#DBUtils简单使用案例" class="headerlink" title="DBUtils简单使用案例"></a>DBUtils简单使用案例</h2><h3 id="准备数据表"><a href="#准备数据表" class="headerlink" title="准备数据表"></a>准备数据表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">account</span>(</span><br><span class="line">aid <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">unique</span>,</span><br><span class="line">balance <span class="built_in">float</span>(<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="新建模块导入依赖"><a href="#新建模块导入依赖" class="headerlink" title="新建模块导入依赖"></a>新建模块导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--dbutils--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--druid--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer aid;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Float balance;</span><br><span class="line">    <span class="comment">//get/set方法构造方法略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试使用DBUtils</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        DruidDataSource druidDataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        druidDataSource.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        druidDataSource.setUrl(<span class="string">"jdbc:mysql:///spring?characterEncoding=utf8"</span>);</span><br><span class="line">        druidDataSource.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        druidDataSource.setPassword(<span class="string">"root"</span>);</span><br><span class="line">        QueryRunner queryRunner = <span class="keyword">new</span> QueryRunner(druidDataSource);</span><br><span class="line">        queryRunner.update(<span class="string">"insert into account values(null,?,?)"</span>,<span class="string">"张三"</span>,<span class="number">100f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用Spring-DBUtils完成CRUD操作"><a href="#使用Spring-DBUtils完成CRUD操作" class="headerlink" title="使用Spring+DBUtils完成CRUD操作"></a>使用Spring+DBUtils完成CRUD操作</h1><h2 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h2><p>复用之前的account表…</p><h2 id="创建模块导入依赖"><a href="#创建模块导入依赖" class="headerlink" title="创建模块导入依赖"></a>创建模块导入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring_crud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="创建实体类-1"><a href="#创建实体类-1" class="headerlink" title="创建实体类"></a>创建实体类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer aid;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Float balance;</span><br><span class="line">    <span class="comment">//get/set方法构造方法略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建dao接口及实现类"><a href="#创建dao接口及实现类" class="headerlink" title="创建dao接口及实现类"></a>创建dao接口及实现类</h2><h3 id="接口-1"><a href="#接口-1" class="headerlink" title="接口"></a>接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Account <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateByName</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现类-1"><a href="#实现类-1" class="headerlink" title="实现类"></a>实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需要提供QueryRunner对象，操作数据库，在spring进行依赖注入</span></span><br><span class="line">    <span class="keyword">private</span> QueryRunner queryRunner;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setQueryRunner</span><span class="params">(QueryRunner queryRunner)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.queryRunner = queryRunner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            queryRunner.update(<span class="string">"insert into account values(null,?,?)"</span>,account.getName(),account.getBalance());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> queryRunner.query(<span class="string">"select * from account where name = ?"</span>,<span class="keyword">new</span> BeanHandler&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>),<span class="title">name</span>)</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> queryRunner.query(<span class="string">"select * from account"</span>,<span class="keyword">new</span> BeanListHandler&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            queryRunner.update(<span class="string">"delete from account where name = ?"</span>,name);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateByName</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            queryRunner.update(<span class="string">"update account set balance = ? where name = ?"</span>,account.getBalance(),account.getName());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建service接口及实现类"><a href="#创建service接口及实现类" class="headerlink" title="创建service接口及实现类"></a>创建service接口及实现类</h2><h3 id="接口-2"><a href="#接口-2" class="headerlink" title="接口"></a>接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Account <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateByName</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现类-2"><a href="#实现类-2" class="headerlink" title="实现类"></a>实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需要调用dao进行保存,在spring中进行依赖注入</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(AccountDao accountDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        accountDao.save(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findByName(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        accountDao.deleteByName(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateByName</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        accountDao.updateByName(account);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="加入Spring配置文件"><a href="#加入Spring配置文件" class="headerlink" title="加入Spring配置文件"></a>加入Spring配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///spring?characterEncoding=utf8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"queryRunner"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbutils.QueryRunner"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"ds"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"com.sun.dao.impl.AccountDaoImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"queryRunner"</span> <span class="attr">ref</span>=<span class="string">"queryRunner"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.sun.service.impl.AccountServiceImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"accountDao"</span> <span class="attr">ref</span>=<span class="string">"accountDao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="模拟测试"><a href="#模拟测试" class="headerlink" title="模拟测试"></a>模拟测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取配置文件，初始化IOC容器</span></span><br><span class="line">    ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">    <span class="comment">//获取service对象</span></span><br><span class="line">    AccountService accountService = applicationContext.getBean(AccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//测试查找所有</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        List&lt;Account&gt; all = accountService.findAll();</span><br><span class="line">        <span class="keyword">for</span> (Account account : all) &#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//测试查找一个</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Account account = accountService.findByName(<span class="string">"张三"</span>);</span><br><span class="line">        System.out.println(account);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//测试保存</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setName(<span class="string">"李四"</span>);</span><br><span class="line">        account.setBalance(<span class="number">120f</span>);</span><br><span class="line">        accountService.save(account);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//测试修改</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setName(<span class="string">"张三"</span>);</span><br><span class="line">        account.setBalance(<span class="number">50f</span>);</span><br><span class="line">        accountService.updateByName(account);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//测试根据名称删除</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        accountService.deleteByName(<span class="string">"李四"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring概述&quot;&gt;&lt;a href=&quot;#Spring概述&quot; class=&quot;headerlink&quot; title=&quot;Spring概述&quot;&gt;&lt;/a&gt;Spring概述&lt;/h1&gt;&lt;p&gt;Spring是&lt;code&gt;分层(三层)&lt;/code&gt;的Java应用&lt;code&gt;轻量级&lt;/code&gt;开源框架&lt;/p&gt;
&lt;p&gt;Spring的核心是 &lt;code&gt;IOC（Inverse Of Control：反转控制）&lt;/code&gt;和 &lt;code&gt;AOP（Aspect Oriented Programming：面向切面编程）&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Spring一个全栈应用框架, 提供了表现层 Spring MVC 和持久层 Spring JDBC 以及业务层事务管理等众多应用技术&lt;/p&gt;
&lt;p&gt;Spring还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的 Java EE 企业应用开源框架 &lt;/p&gt;
    
    </summary>
    
    
      <category term="框架" scheme="http://sunmoon.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Spring" scheme="http://sunmoon.com/categories/%E6%A1%86%E6%9E%B6/Spring/"/>
    
    
      <category term="spring" scheme="http://sunmoon.com/tags/spring/"/>
    
      <category term="IOC介绍" scheme="http://sunmoon.com/tags/IOC%E4%BB%8B%E7%BB%8D/"/>
    
      <category term="入门案例" scheme="http://sunmoon.com/tags/%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/"/>
    
      <category term="API简介" scheme="http://sunmoon.com/tags/API%E7%AE%80%E4%BB%8B/"/>
    
      <category term="bean配置" scheme="http://sunmoon.com/tags/bean%E9%85%8D%E7%BD%AE/"/>
    
      <category term="依赖注入" scheme="http://sunmoon.com/tags/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    
      <category term="DBUtils" scheme="http://sunmoon.com/tags/DBUtils/"/>
    
  </entry>
  
  <entry>
    <title>Linux&amp;Nginx</title>
    <link href="http://sunmoon.com/2020/09/19/Linux-Nginx/"/>
    <id>http://sunmoon.com/2020/09/19/Linux-Nginx/</id>
    <published>2020-09-19T12:37:14.000Z</published>
    <updated>2020-09-19T13:02:07.909Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux简介"><a href="#Linux简介" class="headerlink" title="Linux简介"></a>Linux简介</h1><h2 id="学习目的"><a href="#学习目的" class="headerlink" title="学习目的"></a>学习目的</h2><blockquote><p>window的问题</p></blockquote><ol><li>个人用户正版windows需要收费</li><li>系统长时间运行不稳定，变慢，容易死机</li><li>windows常招到病毒攻击</li></ol><blockquote><p>Linux的优点</p></blockquote><ol><li>个人用户正版Linux不需要收费</li><li>系统长时间运行稳定，不会变慢，不容易死机</li><li>Linux不常招到病毒攻击，也很难攻击</li></ol><blockquote><p>总之，做为一个后端JavaEE程序员，在windows中开发完程序后，得部署到一个相对比较安全稳定的服务器中运行，Linux就是最佳的选择。</p><p>学习Linux, 我们得学会：安装Linux操作系统，对目录，文件，权限等基本操作命令。</p></blockquote><a id="more"></a><h2 id="unix简介"><a href="#unix简介" class="headerlink" title="unix简介"></a>unix简介</h2><p>Unix是一个强大的多用户、多任务操作系统。于1969年在AT&amp;T的贝尔实验室开发（肯.汤普森）。B </p><p>UNIX的商标权由国际开放标准组织（TheOpen Group）所拥有。C</p><p>UNIX操作系统是商业版，需要收费，价格比Microsoft Windows正版要贵一些。</p><h2 id="linux简介"><a href="#linux简介" class="headerlink" title="linux简介"></a>linux简介</h2><p>Linux是一款开源免费的多用户操作系统，相对于windows而言，其运行的稳定性和安全性都有着绝对的优势，因此它几乎成为程序代码运行的最佳系统环境。</p><p>Linux的核心代码一直由Linus Torvalds（林纳斯· 托瓦兹）开发维护，作者将源代码开源之后放到了社区，众多的linux爱好者加入了开发队伍，因为也就衍生了众多的linux版本。</p><p><img data-src="/assets/image-20200816115846200.png" alt="image-20200816115846200">  </p><h2 id="linux的版本"><a href="#linux的版本" class="headerlink" title="linux的版本"></a>linux的版本</h2><p>由于linux的开源精神，使得其版本众多，发展到今天，主要有三大分支：</p><ul><li>Redhat : 应用最为广泛的服务器版本，包含：==redhat(商业)、centos(开源)==、Fedora</li><li>debian: 有着媲美windows的桌面环境(个人机)，包含：==Ubuntu==、Linux Mint</li><li>suse: 主要用于商业桌面、服务器，包含：SLES、OpenSUSE</li></ul><p><img data-src="/assets/image-20200816115901933.png" alt="image-20200816115901933">  </p><h1 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h1><h2 id="Vmware软件安装"><a href="#Vmware软件安装" class="headerlink" title="Vmware软件安装"></a>Vmware软件安装</h2><p>虚拟机是一个软件，它可以使你在一台真实PC机器上同时运行多个操作系统。</p><p>每个模拟出来的操作系统都是一个和真实操作系统一样的环境。</p><h3 id="双击软件-开启安装向导"><a href="#双击软件-开启安装向导" class="headerlink" title="双击软件,开启安装向导"></a>双击软件,开启安装向导</h3><p><img data-src="/assets/wps9.jpg" alt="img-wps9">     </p><h3 id="同意许可协议"><a href="#同意许可协议" class="headerlink" title="同意许可协议"></a>同意许可协议</h3><p><img data-src="/assets/wps10.jpg" alt="img-wps10"> </p><h3 id="选择安装位置"><a href="#选择安装位置" class="headerlink" title="选择安装位置"></a>选择安装位置</h3><p><img data-src="/assets/wps11.jpg" alt="img-wps11"> </p><h3 id="修改用户体验"><a href="#修改用户体验" class="headerlink" title="修改用户体验"></a>修改用户体验</h3><p><img data-src="/assets/wps12.jpg" alt="img-wps12"> </p><h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><p><img data-src="/assets/wps13.jpg" alt="img-wps13"> </p><h3 id="输入许可证"><a href="#输入许可证" class="headerlink" title="输入许可证"></a>输入许可证</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FC7D0-D1YDL-M8DXZ-CYPZE-P2AY6</span><br></pre></td></tr></table></figure><h3 id="大坑"><a href="#大坑" class="headerlink" title="大坑"></a>大坑</h3><p>安装完毕之后, 一定检查下 是否存在下面两块网卡,  如果没有  暂停</p><p><img data-src="/assets/image-20200919090447112.png" alt="image-20200919090447112"></p><h2 id="Linux操作系统安装"><a href="#Linux操作系统安装" class="headerlink" title="Linux操作系统安装"></a>Linux操作系统安装</h2><p>我们今天要安装的是linux的centos 7版本，这也是目前应用最广的服务器版本</p><h3 id="虚拟机新建"><a href="#虚拟机新建" class="headerlink" title="虚拟机新建"></a>虚拟机新建</h3><p><img data-src="/assets/wps14.jpg" alt="img-wps14"> </p><h3 id="选择安装方式"><a href="#选择安装方式" class="headerlink" title="选择安装方式"></a>选择安装方式</h3><p><img data-src="/assets/wps15.jpg" alt="img-wps15"> </p><h3 id="选择虚拟机类型和版本"><a href="#选择虚拟机类型和版本" class="headerlink" title="选择虚拟机类型和版本"></a>选择虚拟机类型和版本</h3><p><img data-src="/assets/wps16.jpg" alt="img-wps16"> </p><h3 id="选择虚拟机名称和位置"><a href="#选择虚拟机名称和位置" class="headerlink" title="选择虚拟机名称和位置"></a>选择虚拟机名称和位置</h3><p><img data-src="/assets/wps17.jpg" alt="img-wps17"> </p><h3 id="选择镜像"><a href="#选择镜像" class="headerlink" title="选择镜像"></a>选择镜像</h3><p><img data-src="/assets/wps18.jpg" alt="img-wps18"> </p><h3 id="开启虚拟机"><a href="#开启虚拟机" class="headerlink" title="开启虚拟机"></a>开启虚拟机</h3><p><img data-src="/assets/wps19.jpg" alt="img-wps19"> </p><h3 id="选择语言"><a href="#选择语言" class="headerlink" title="选择语言"></a>选择语言</h3><p><img data-src="/assets/wps20.jpg" alt="img-wps20"> </p><h3 id="软件选择"><a href="#软件选择" class="headerlink" title="软件选择"></a>软件选择</h3><p>点击软件-&gt;软件选择-&gt;基础设施服务器</p><p><img data-src="/assets/wps21.jpg" alt="img-wps21"> </p><h3 id="安装位置"><a href="#安装位置" class="headerlink" title="安装位置"></a>安装位置</h3><p><img data-src="/assets/wps22.jpg" alt="img-wps22"> </p><h3 id="网络连接"><a href="#网络连接" class="headerlink" title="网络连接"></a>网络连接</h3><p><img data-src="/assets/wps23.jpg" alt="img-wps23"> </p><p><img data-src="/assets/wps24.jpg" alt="img-wps24"> </p><h3 id="开始安装-1"><a href="#开始安装-1" class="headerlink" title="开始安装"></a>开始安装</h3><p><img data-src="/assets/wps25.jpg" alt="img-wps25"> </p><h3 id="设置root密码"><a href="#设置root密码" class="headerlink" title="设置root密码"></a>设置root密码</h3><p><img data-src="/assets/wps26.jpg" alt="img-wps26"> </p><p><img data-src="/assets/wps27.jpg" alt="img-wps27"> </p><h3 id="安装中……-此处省去10分钟"><a href="#安装中……-此处省去10分钟" class="headerlink" title="安装中…….此处省去10分钟"></a>安装中…….此处省去10分钟</h3><h3 id="安装完毕-重启系统"><a href="#安装完毕-重启系统" class="headerlink" title="安装完毕,重启系统"></a>安装完毕,重启系统</h3><p><img data-src="/assets/wps28.jpg" alt="img-wps28"> </p><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p><img data-src="/assets/wps29.jpg" alt="img-wps29"> </p><h2 id="Vmware神操作"><a href="#Vmware神操作" class="headerlink" title="Vmware神操作"></a>Vmware神操作</h2><h3 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h3><h4 id="选择克隆"><a href="#选择克隆" class="headerlink" title="选择克隆"></a>选择克隆</h4><p><img data-src="/assets/wps30.jpg" alt="img-wps30"> </p><h4 id="完整克隆"><a href="#完整克隆" class="headerlink" title="完整克隆"></a>完整克隆</h4><p><img data-src="/assets/wps31.jpg" alt="img-wps31"> </p><h4 id="修改克隆的名称"><a href="#修改克隆的名称" class="headerlink" title="修改克隆的名称"></a>修改克隆的名称</h4><p><img data-src="/assets/wps32.jpg" alt="img-wps32"> </p><h3 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h3><h4 id="拍摄快照"><a href="#拍摄快照" class="headerlink" title="拍摄快照"></a>拍摄快照</h4><p><img data-src="/assets/wps33.jpg" alt="img-wps33"> </p><h4 id="恢复快照"><a href="#恢复快照" class="headerlink" title="恢复快照"></a>恢复快照</h4><p><img data-src="/assets/wps34.jpg" alt="img-wps34"> </p><h2 id="远程连接工具安装"><a href="#远程连接工具安装" class="headerlink" title="远程连接工具安装"></a>远程连接工具安装</h2><p>用于连接linux的工具有很多，比较有名的有xshell、putty、SecureCRSecureFXPortable、MobaXterm</p><h3 id="解压软件"><a href="#解压软件" class="headerlink" title="解压软件"></a>解压软件</h3><p><img data-src="/assets/image-20200916150616297.png" alt="image-20200916150616297"> </p><h3 id="启动软件"><a href="#启动软件" class="headerlink" title="启动软件"></a>启动软件</h3><p><img data-src="/assets/image-20200916150649483.png" alt="image-20200916150649483"> </p><h3 id="查看服务器IP地址"><a href="#查看服务器IP地址" class="headerlink" title="查看服务器IP地址"></a>查看服务器IP地址</h3><p>在虚拟机的操作系统上打开终端，使用<code>ifconfig</code>查看ip地址</p><p><img data-src="/assets/image-20200916151127486.png" alt="image-20200916151127486">  </p><h3 id="新建连接"><a href="#新建连接" class="headerlink" title="新建连接"></a>新建连接</h3><p><img data-src="/assets/image-20200916152042625.png" alt="image-20200916152042625">   </p><h1 id="linux的目录结构"><a href="#linux的目录结构" class="headerlink" title="linux的目录结构"></a>linux的目录结构</h1><p>linux的文件系统采用的是树状目录结构，在此结构中的最上层是根目录“/”，然后在根目录下再创建其他的目录。下面来看下几个主要的目录。</p><p><img data-src="/assets/image-20200816121306020.png" alt="image-20200816121306020"> </p><h1 id="目录处理命令"><a href="#目录处理命令" class="headerlink" title="目录处理命令"></a>目录处理命令</h1><h2 id="ls-查看目录"><a href="#ls-查看目录" class="headerlink" title="ls 查看目录"></a>ls 查看目录</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">语法:  ls  [参数]  目录</span><br><span class="line">参数:</span><br><span class="line"><span class="code">-l   以详细形式查询当前目录下的文件(不包含隐藏文件) </span></span><br><span class="line"><span class="code">-a   查看目录下的所有文件,包含隐藏文件(不是详细展示)</span></span><br><span class="line"><span class="code">-la  上面两个功能的组合(详细查看所有文件)</span></span><br></pre></td></tr></table></figure><p><img data-src="/assets/ls%E5%91%BD%E4%BB%A4.png" alt="ls命令">    </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">练习:</span><br><span class="line"><span class="bullet">1. </span>查看 /etc/的文件</span><br><span class="line"><span class="code">ls /etc/</span></span><br><span class="line"><span class="bullet">2. </span>查看 /etc/的所有文件</span><br><span class="line"><span class="code">ls -a /etc/</span></span><br><span class="line"><span class="bullet">3. </span>查看 /etc/的所有文件的详细信息</span><br><span class="line"><span class="code">ls -la /etc/</span></span><br></pre></td></tr></table></figure><h2 id="pwd-查看当前所在的目录"><a href="#pwd-查看当前所在的目录" class="headerlink" title="pwd 查看当前所在的目录"></a>pwd 查看当前所在的目录</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法:  pwd</span><br></pre></td></tr></table></figure><p><img data-src="/assets/pwd%E5%91%BD%E4%BB%A4.png" alt="pwd命令">    </p><h2 id="who-an-i-查看当前用户"><a href="#who-an-i-查看当前用户" class="headerlink" title="who an i 查看当前用户"></a>who an i 查看当前用户</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：who am i</span><br></pre></td></tr></table></figure><p><img data-src="/assets/whoami%E5%91%BD%E4%BB%A4.png" alt="whoami命令">    </p><h2 id="cd-切换目录"><a href="#cd-切换目录" class="headerlink" title="cd 切换目录"></a>cd 切换目录</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">语法: cd 目录</span><br><span class="line">目录表达形式:</span><br><span class="line"><span class="code">/    从根目录开始写的绝对路径目录 </span></span><br><span class="line"><span class="code">..   上层目录</span></span><br><span class="line"><span class="code">.    当前目录</span></span><br><span class="line"><span class="code">~    宿主目录(家目录)</span></span><br><span class="line"><span class="bullet">    -    </span>上次的目录</span><br></pre></td></tr></table></figure><p><img data-src="/assets/cd%E5%91%BD%E4%BB%A4.png" alt="cd命令"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">练习:</span><br><span class="line"><span class="bullet">1. </span>切换到 /usr/local目录下</span><br><span class="line"><span class="code">cd /user/local</span></span><br><span class="line"><span class="bullet">2. </span>切换到当前目录下的src目录下</span><br><span class="line"><span class="code">cd ./src</span></span><br><span class="line"><span class="bullet">3. </span>切换到上层目录</span><br><span class="line"><span class="code">cd ../</span></span><br><span class="line"><span class="bullet">4. </span>切换到宿主目录下</span><br><span class="line"><span class="code">cd ~</span></span><br><span class="line"><span class="bullet">5. </span>切换回上次操作的目录</span><br><span class="line"><span class="code">cd -</span></span><br></pre></td></tr></table></figure><h2 id="mkdir-创建目录"><a href="#mkdir-创建目录" class="headerlink" title="mkdir 创建目录"></a>mkdir 创建目录</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">语法: mkdir  目录  [参数] </span><br><span class="line">参数:</span><br><span class="line"><span class="code">-p  一次性创建多级目录</span></span><br><span class="line"><span class="code">-v  显示创建过程</span></span><br><span class="line">总结:</span><br><span class="line"><span class="code">mkdir  创建目录  -pv</span></span><br></pre></td></tr></table></figure><p><img data-src="/assets/mkdir%E5%91%BD%E4%BB%A4.png" alt="mkdir命令">    </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">练习:</span><br><span class="line"><span class="bullet">1. </span>在 /opt目录下创建 test1目录</span><br><span class="line"><span class="code">mkdir /opt/test1 -pv</span></span><br><span class="line"><span class="bullet">2. </span>在 /opt 目录下创建 test2/test3目录</span><br><span class="line"><span class="code">mkdir /opt/test2/test3 -pv</span></span><br></pre></td></tr></table></figure><h2 id="rm-删除"><a href="#rm-删除" class="headerlink" title="rm 删除"></a>rm 删除</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">语法: rm [参数] 目录或文件</span><br><span class="line">参数:</span><br><span class="line"><span class="code">    -r 递归处理，将指定目录下的所有文件及子目录一并删除，它需要你二次确认是否删除</span></span><br><span class="line"><span class="code">    -f 强制删除目录，它不会询问你 </span></span><br><span class="line">总结:</span><br><span class="line"><span class="code">     rm  -rf  文件(目录)名</span></span><br></pre></td></tr></table></figure><p><img data-src="/assets/rm%E5%91%BD%E4%BB%A4.png" alt="rm命令">    </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">练习:</span><br><span class="line"><span class="bullet">1. </span>删除/opt目录下创建test1目录</span><br><span class="line"><span class="code">rm -rf /opt/test1</span></span><br></pre></td></tr></table></figure><h2 id="cp-复制"><a href="#cp-复制" class="headerlink" title="cp 复制"></a>cp 复制</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">语法: cp [-r] 源目录 目标目录</span><br><span class="line">参数:</span><br><span class="line"><span class="code">    -r 递归处理，将指定目录下的文件与子目录一并处理</span></span><br><span class="line">总结:</span><br><span class="line"><span class="code">    cp  -r    源目录(文件)    /          复制一个目录或文件到指定目录下</span></span><br><span class="line"><span class="code">    cp  -r    源目录(文件)    目标目录(文件)     复制并改名一个目录或文件</span></span><br></pre></td></tr></table></figure><p><img data-src="/assets/cp%E5%91%BD%E4%BB%A4.png" alt="cp命令">    </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">练习</span><br><span class="line"><span class="bullet">1. </span>在/opt下创建test1目录, 在test1目录下创建test1.txt文件</span><br><span class="line"><span class="code">mkdir /opt/test1</span></span><br><span class="line"><span class="code">touch /opt/test1/test1.txt</span></span><br><span class="line"><span class="bullet">2. </span>在/opt/test1目录下复制test1.txt 为 test11.txt</span><br><span class="line"><span class="code">cp /opt/test1/test1.txt /opt/test1/test11.txt</span></span><br><span class="line"><span class="bullet">3. </span>在/opt 目录下复制test1目录为test2目录</span><br><span class="line"><span class="code">cp -r /opt/test1 /opt/test2</span></span><br><span class="line"><span class="bullet">4. </span>复制/opt/test1/test1.txt 到 /opt/test1/下, 并重命名为test3.txt</span><br><span class="line"><span class="code">cp /opt/test1/test1.txt /opt/test1/test3.txt</span></span><br></pre></td></tr></table></figure><h2 id="mv-移动"><a href="#mv-移动" class="headerlink" title="mv 移动"></a>mv 移动</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">语法: mv 原目录位置 新目录的位置</span><br><span class="line">总结:</span><br><span class="line"><span class="code">    mv   源目录(文件)    目标目录/           剪切一个目录或文件到指定目录下</span></span><br><span class="line"><span class="code">    mv   源目录(文件)    目标目录(文件)       剪切并改名一个目录或文件</span></span><br></pre></td></tr></table></figure><p><img data-src="/assets/mv%E5%91%BD%E4%BB%A4.png" alt="mv命令">    </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">练习:</span><br><span class="line"><span class="bullet">1. </span>在/opt 下创建test1目录, 在test1目录下创建test1.txt文件</span><br><span class="line"><span class="code">mkdir /opt/test1</span></span><br><span class="line"><span class="code">touch /opt/test1/test1.txt</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2. </span>在/opt 在创建test2目录</span><br><span class="line"><span class="code">mkdir /opt/test2 -pv</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">3. </span>将test1目录下的test1.txt文件剪切到test2目录下</span><br><span class="line"><span class="code">mv /opt/test1/test1.txt /opt/test2</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">4. </span>将test2 目录下的test1.txt文件剪切到test1目录下,并重命名为test11.txt</span><br><span class="line"><span class="code">mv /opt/test2/test1 /opt/test1/test11.txt</span></span><br></pre></td></tr></table></figure><h2 id="find-查找"><a href="#find-查找" class="headerlink" title="find 查找"></a>find 查找</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法: find  路径  -name  文件名【允许模糊匹配】</span><br></pre></td></tr></table></figure><p><img data-src="/assets/find%E5%91%BD%E4%BB%A4.png" alt="find命令">    </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">练习:</span><br><span class="line"><span class="bullet">1. </span>查询根目录下（包括子目录），名为b的目录和文件</span><br><span class="line"><span class="code">find / -name 'b'</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>查询根目录下（包括子目录），名以b开头的目录和文件</span><br><span class="line"><span class="code">find / -name 'b*'</span></span><br></pre></td></tr></table></figure><h1 id="文件处理命令"><a href="#文件处理命令" class="headerlink" title="文件处理命令"></a>文件处理命令</h1><h2 id="more-查看文件"><a href="#more-查看文件" class="headerlink" title="more 查看文件"></a>more 查看文件</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">语法: more 文件名 </span><br><span class="line">扩展:</span><br><span class="line"><span class="code">cat a.java           查看a.java文件的最后一页内容</span></span><br><span class="line"><span class="code">more a.java          从第一页开始，按回车键换行，按空格健翻页，q退出</span></span><br><span class="line"><span class="code">head a.java      查看a.java文件的前10行内容</span></span><br><span class="line"><span class="code">tail a.java     查看a.java文件的后10行内容</span></span><br><span class="line"><span class="code">head  -n 7 a.java     查看a.java文件的前7行内容</span></span><br><span class="line"><span class="code">tail  -n 7 a.java     查看a.java文件的后7行内容</span></span><br><span class="line"><span class="code">tail  -f  文件名       动态查看文件信息</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">more a.java           从第一页开始，按回车键换行，按空格健翻页，q退出</span><br><span class="line">tail  -f  文件名       动态查看文件信息</span><br></pre></td></tr></table></figure><h2 id="touch-创建文件"><a href="#touch-创建文件" class="headerlink" title="touch 创建文件"></a>touch 创建文件</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法: touch 文件名</span><br></pre></td></tr></table></figure><h2 id="vi-编辑文件"><a href="#vi-编辑文件" class="headerlink" title="vi 编辑文件"></a>vi 编辑文件</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">linux 下的vi 是一种文字编辑器，后来的升级版本是vim。</span><br><span class="line">1.打开文件</span><br><span class="line"><span class="code">vim 文件名 ( 如果文件存在，就是打开文件; 如果文件不存在，就是新建打开 )</span></span><br><span class="line">2.编辑文件</span><br><span class="line"><span class="code">使用vim刚刚进入文件，我们处于命令行模式，此时不能进行文件的编辑，</span></span><br><span class="line"><span class="code">此时按下键盘上的i键就能进入编辑模式，然后就能修改文件内容了。</span></span><br><span class="line">3.保存文件</span><br><span class="line"><span class="code">当编辑工作完成后，我们需要对编辑好的文件进行保存，此时需要先退出编辑模式，按一下ESC键，就可以退出到命令行模式。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">此时如果想保存并退出文件，需要在此模式下输入 :wq然后回车 </span></span><br><span class="line"><span class="code">如果想不保存直接退出文件，需要在此模式下输入 :q! 然后回车</span></span><br></pre></td></tr></table></figure><h1 id="压缩、解压命令"><a href="#压缩、解压命令" class="headerlink" title="压缩、解压命令"></a>压缩、解压命令</h1><h2 id="压缩格式"><a href="#压缩格式" class="headerlink" title="压缩格式"></a>压缩格式</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">压缩格式</span><br><span class="line"><span class="code">windows中常见的压缩格式:  zip  rar  7z</span></span><br><span class="line"><span class="code">linux中常见的压缩格式:    zip  gz</span></span><br><span class="line">总结</span><br><span class="line"><span class="code">tar  -zcvf  压缩包名称  要压缩的文件</span></span><br><span class="line"><span class="code">tar  -zxvf  压缩文件 -C 要解压的目录</span></span><br></pre></td></tr></table></figure><h2 id="文件压缩命令"><a href="#文件压缩命令" class="headerlink" title="文件压缩命令"></a>文件压缩命令</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">语法: tar  [参数]  打包压缩后的文件名  要打包压缩的文件，支持通配符 * 号</span><br><span class="line">参数:</span><br><span class="line"><span class="code">-c 创建新的文件（必选项）</span></span><br><span class="line"><span class="code">-f 文件名由命令台设置（必选项）</span></span><br><span class="line"><span class="code">-v 输出文件清单（可选项）</span></span><br><span class="line"><span class="code">-z 自动识别压缩或解压（可选项）</span></span><br><span class="line">总结:</span><br><span class="line"><span class="code">tar  -zcvf  压缩包名称  要压缩的文件</span></span><br></pre></td></tr></table></figure><h2 id="文件解压命令"><a href="#文件解压命令" class="headerlink" title="文件解压命令"></a>文件解压命令</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">语法: tar  [参数]  压缩文件  [-C 要解压到的目录]</span><br><span class="line">参数:</span><br><span class="line"><span class="code">-x 取出文件中的内容（必选项）</span></span><br><span class="line"><span class="code">-f 文件名由命令台设置（必选项）</span></span><br><span class="line"><span class="code">-v 输出文件清单（可选项）</span></span><br><span class="line"><span class="code">-z 自动识别压缩或解压（可选项）</span></span><br><span class="line">总结:</span><br><span class="line"><span class="code">tar  -zxvf  压缩文件 -C 要解压的目录</span></span><br></pre></td></tr></table></figure><h1 id="权限管理命令"><a href="#权限管理命令" class="headerlink" title="权限管理命令"></a>权限管理命令</h1><h2 id="权限常识"><a href="#权限常识" class="headerlink" title="权限常识"></a>权限常识</h2><p>因为linux是以其稳定和安全著称的，所以的它的权限系统是非常完善的。首先来了解几个概念：</p><ul><li>文件类型</li><li>文件的属主和属组</li><li>文件的权限标识方法</li></ul><h3 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在Linux中有一句话，叫一切皆文件。就是说linux下的所有东西都是文件。但是文件有不同的类型，linux规定了三种类型，分别是：</span><br><span class="line"><span class="code">d 目录文件    </span></span><br><span class="line"><span class="bullet">- </span>普通文件    </span><br><span class="line"><span class="code">l 链接文件</span></span><br></pre></td></tr></table></figure><h3 id="文件属主（组）"><a href="#文件属主（组）" class="headerlink" title="文件属主（组）"></a>文件属主（组）</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在linux下，创建出来的文件都会默认有一个默认属主和默认属组。就像是一个文件一出生就被标记了它的管理者和管理组一样。</span><br></pre></td></tr></table></figure><h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">在linux中，有三种权限分别是读权限、写权限和执行权限。他们分别有对应的英文表示和数字表示: </span><br><span class="line"><span class="code">读     r     4</span></span><br><span class="line"><span class="code">写     w     2</span></span><br><span class="line"><span class="code">执行   x     1</span></span><br><span class="line">他们的组合就可以代表某类用户对一个文件的权限</span><br><span class="line"><span class="code">英文比如  rw(可读可写)  wx(可写可执行)  wrx(可读可写可执行)  </span></span><br><span class="line"><span class="code">数字比如  6(可读可写)   3(可写可执行)   7(可读可写可执行)</span></span><br></pre></td></tr></table></figure><p><img data-src="/assets/%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90.png" alt="文件权限"></p><h2 id="文件的具体权限控制"><a href="#文件的具体权限控制" class="headerlink" title="文件的具体权限控制"></a>文件的具体权限控制</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文件的具体权限控制就是明确定义了：什么身份有什么权限</span><br></pre></td></tr></table></figure><p> <img data-src="/assets/%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E5%85%B7%E4%BD%93%E6%8E%A7%E5%88%B6.png" alt="文件权限具体控制"></p><h2 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h2><h3 id="形式一"><a href="#形式一" class="headerlink" title="形式一"></a>形式一</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 用户类型+(-)  权限的英文表示  -R  文件</span><br><span class="line">例子：chmod  o+w  -R  文件</span><br></pre></td></tr></table></figure><h3 id="形式二"><a href="#形式二" class="headerlink" title="形式二"></a>形式二</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod  英文权限标识  -R  文件</span><br><span class="line">例子：chmod  u=wrx,g=wr,o=wr  -R 文件</span><br></pre></td></tr></table></figure><h3 id="形式三"><a href="#形式三" class="headerlink" title="形式三"></a>形式三</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod  数字权限标识  -R  文件</span><br><span class="line">例子：chmod  755  -R  test</span><br></pre></td></tr></table></figure><h1 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h1><p>防火墙，工作在主机或者网络边缘，对出入网络的IP、端口进行访问控制的软件，我们的任务是定义防火墙如何工作，也就是防火墙策略。</p><p>在Centos 7中，防火墙已经被做成了一个服务，默认使用的是firewall。 </p><p><img data-src="/assets/%E9%98%B2%E7%81%AB%E5%A2%99.png" alt="防火墙"></p><h2 id="防火墙服务的相关操作"><a href="#防火墙服务的相关操作" class="headerlink" title="防火墙服务的相关操作"></a>防火墙服务的相关操作</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">systemctl start firewalld     开启防火墙      </span><br><span class="line">systemctl stop  firewalld     关闭防火墙      </span><br><span class="line">systemctl restart firewalld   重启防火墙      </span><br><span class="line">systemctl status  firewalld   查看防火墙状态</span><br><span class="line">systemctl enable firewalld    打开防火墙开机自启  </span><br><span class="line">systemctl disable firewalld   关闭防火墙开机自启</span><br></pre></td></tr></table></figure><h2 id="设定防火墙规则"><a href="#设定防火墙规则" class="headerlink" title="设定防火墙规则"></a>设定防火墙规则</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">防火墙默认是禁止所有端口访问的</span><br><span class="line"><span class="code">允许某端口      firewall-cmd  --zone=public  --add-port=80/tcp    --permanent</span></span><br><span class="line"><span class="code">禁止某端口      firewall-cmd  --zone=public  --remove-port=80/tcp  --permanent</span></span><br><span class="line"><span class="code">查看允许的端口   firewall-cmd  --zone=public  --list-ports</span></span><br><span class="line"><span class="code">注意：使用--permanent代表永久生效，这种情况下，需要重新加载服务  firewall-cmd --reload</span></span><br><span class="line"></span><br><span class="line">常用端口说明:</span><br><span class="line"><span class="code">3306  mysql</span></span><br><span class="line"><span class="code">1521  oracle</span></span><br><span class="line"><span class="code">8080  tomcat</span></span><br><span class="line"><span class="code">80   nginx</span></span><br><span class="line"><span class="code">6379  redis</span></span><br></pre></td></tr></table></figure><p><img data-src="/assets/%E8%AE%BE%E7%BD%AE%E9%98%B2%E7%81%AB%E5%A2%99%E8%A7%84%E5%88%99.png" alt="设置防火墙规则">    </p><h1 id="其它常见命令"><a href="#其它常见命令" class="headerlink" title="其它常见命令"></a>其它常见命令</h1><h2 id="查看指定进程信息"><a href="#查看指定进程信息" class="headerlink" title="查看指定进程信息"></a>查看指定进程信息</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">语法:  ps -ef  |  grep redis</span><br><span class="line">解释:</span><br><span class="line"><span class="code">ps -ef   查看所有的正在运行的进程</span></span><br><span class="line"><span class="code">|     管道命令，它会将管道前面的命令输出作为管道后面的命令输入</span></span><br><span class="line"><span class="code">grep   文本搜索命令</span></span><br></pre></td></tr></table></figure><p><img data-src="/assets/%E6%9F%A5%E7%9C%8B%E6%8C%87%E5%AE%9A%E8%BF%9B%E7%A8%8B%E4%BF%A1%E6%81%AF.png" alt="查看指定进程信息">    </p><h2 id="查看指定端口信息"><a href="#查看指定端口信息" class="headerlink" title="查看指定端口信息"></a>查看指定端口信息</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">语法:  netstat  -an |  grep 端口号</span><br><span class="line">解释:</span><br><span class="line"><span class="code">netstat  -an   查看所有的正在占用的端口号</span></span><br><span class="line"><span class="code">|       管道命令，它会将管道前面的命令输出作为管道后面的命令输入</span></span><br><span class="line"><span class="code">grep      文本搜索命令</span></span><br></pre></td></tr></table></figure><p> <img data-src="/assets/%E6%9F%A5%E7%9C%8B%E6%8C%87%E5%AE%9A%E7%AB%AF%E5%8F%A3%E4%BF%A1%E6%81%AF.png" alt="查看指定端口信息"></p><h2 id="强制杀死进程"><a href="#强制杀死进程" class="headerlink" title="强制杀死进程"></a>强制杀死进程</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法: kill  [-9]  进程号</span><br></pre></td></tr></table></figure><p><img data-src="/assets/%E5%BC%BA%E5%88%B6%E6%9D%80%E6%AD%BB%E8%BF%9B%E7%A8%8B.png" alt="强制杀死进程">    </p><h2 id="关机和重启"><a href="#关机和重启" class="headerlink" title="关机和重启"></a>关机和重启</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">halt   关机</span><br><span class="line">reboot  重启</span><br></pre></td></tr></table></figure><h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a><strong>简介</strong></h2><p>Nginx是一款轻量级的Web服务器，由俄罗斯的程序设计师伊戈尔·西索夫所开发。</p><p>Nginx性能非常优秀，官方测试 nginx 能够支撑5万并发链接，并且cpu、内存等资源消耗却非常低，运行非常稳定。</p><p>Nginx的作用有很多，我们经常使用的是用它来做<code>静态资源服务器、负载均衡服务器和反向代理服务器</code>。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h3 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h3><p>可以部署静态资源，html js css image</p><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p><strong>代理</strong>:  给某个对象提供一个代理对象，并由代理对象控制原对象的引用</p><p><strong>正向代理</strong>: 对客户端进行代理(例如VPN)</p><p><img data-src="/assets/%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86.png" alt="正向代理"></p><p><strong>反向代理</strong>: 对服务端进行代理</p><p>反向代理，就是对服务端进行代理，作为客户端,只需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，再响应给客户端，此时反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器地址，隐藏了真实服务器IP地址。</p><p><img data-src="/assets/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86.png" alt="反向代理"></p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>负载均衡（Load Balance,  LB）意思就是将一份负载分摊到多个操作单元上进行执行</p><p><img data-src="/assets/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.png" alt="负载均衡"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>略…</p><h2 id="配置文件介绍"><a href="#配置文件介绍" class="headerlink" title="配置文件介绍"></a>配置文件介绍</h2><p>主配置文件位置:conf/nginx.conf</p><p><img data-src="/assets/nginx%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BB%8B%E7%BB%8D.png" alt="nginx配置文件介绍"></p><h2 id="nginx和tomcat的区别"><a href="#nginx和tomcat的区别" class="headerlink" title="nginx和tomcat的区别"></a>nginx和tomcat的区别</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1 存放的文件形式</span><br><span class="line"><span class="code">Nginx是http服务器,只能解析静态文件</span></span><br><span class="line"><span class="code">Tomcat是web中间件(本质上是一个servlet),能解析jsp和静态文件</span></span><br><span class="line">2 用途</span><br><span class="line"><span class="code">nginx可以作为反向代理服务器,负责均衡服务器,静态资源存放服务器</span></span><br><span class="line"><span class="code">tomcat能作为jsp容器使用,静态资源存放服务器</span></span><br><span class="line">3 性能</span><br><span class="line"><span class="code">nginx支持5W+并发,tomcat的并发只能在200-400之间</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Linux简介&quot;&gt;&lt;a href=&quot;#Linux简介&quot; class=&quot;headerlink&quot; title=&quot;Linux简介&quot;&gt;&lt;/a&gt;Linux简介&lt;/h1&gt;&lt;h2 id=&quot;学习目的&quot;&gt;&lt;a href=&quot;#学习目的&quot; class=&quot;headerlink&quot; title=&quot;学习目的&quot;&gt;&lt;/a&gt;学习目的&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;window的问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;个人用户正版windows需要收费&lt;/li&gt;
&lt;li&gt;系统长时间运行不稳定，变慢，容易死机&lt;/li&gt;
&lt;li&gt;windows常招到病毒攻击&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Linux的优点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;个人用户正版Linux不需要收费&lt;/li&gt;
&lt;li&gt;系统长时间运行稳定，不会变慢，不容易死机&lt;/li&gt;
&lt;li&gt;Linux不常招到病毒攻击，也很难攻击&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;总之，做为一个后端JavaEE程序员，在windows中开发完程序后，得部署到一个相对比较安全稳定的服务器中运行，Linux就是最佳的选择。&lt;/p&gt;
&lt;p&gt;学习Linux, 我们得学会：安装Linux操作系统，对目录，文件，权限等基本操作命令。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://sunmoon.com/categories/Linux/"/>
    
    
      <category term="linux的安装和使用" scheme="http://sunmoon.com/tags/linux%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    
      <category term="linux常用命令" scheme="http://sunmoon.com/tags/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
      <category term="CentOS_7" scheme="http://sunmoon.com/tags/CentOS-7/"/>
    
      <category term="nginx简介" scheme="http://sunmoon.com/tags/nginx%E7%AE%80%E4%BB%8B/"/>
    
  </entry>
  
  <entry>
    <title>Redis入门</title>
    <link href="http://sunmoon.com/2020/09/15/Redis%E5%85%A5%E9%97%A8/"/>
    <id>http://sunmoon.com/2020/09/15/Redis%E5%85%A5%E9%97%A8/</id>
    <published>2020-09-15T12:42:05.000Z</published>
    <updated>2020-09-15T12:50:59.528Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、NoSQL"><a href="#一、NoSQL" class="headerlink" title="一、NoSQL"></a>一、NoSQL</h2><h3 id="1-1-NoSQL介绍"><a href="#1-1-NoSQL介绍" class="headerlink" title="1.1 NoSQL介绍"></a>1.1 NoSQL介绍</h3><p>NoSQL，泛指非关系型的数据库，NoSQL即Not-Only SQL，它可以作为关系型数据库的良好补充。</p><p><img data-src="/img/NoSQL%E4%BB%8B%E7%BB%8D.png" alt="NoSQL介绍"></p><a id="more"></a><p><strong>为什么学习NoSQL？</strong></p><blockquote><p>互联网产品的特点：高并发、高可用、高性能、海量数据</p></blockquote><p><img data-src="/img/NoSQL%E7%9A%84%E5%BA%94%E7%94%A8.png" alt="NoSQL的应用"></p><blockquote><p>关系型数据库与NoSQL数据库并非对立而是互补的关系，即通常情况下使用关系型数据库，在适合<br>使用NoSQL的时候使用NoSQL数据库，NoSQL数据库对关系型数据库的不足进行弥补。  </p></blockquote><h3 id="2-2-NoSQL的主流产品"><a href="#2-2-NoSQL的主流产品" class="headerlink" title="2.2 NoSQL的主流产品"></a>2.2 NoSQL的主流产品</h3><table><thead><tr><th>分类</th><th>特点</th><th>代表产品</th></tr></thead><tbody><tr><td>键值存储</td><td>数据一般存在内存中，读写速度快(10w/s)，适合作为缓存服务</td><td>redis</td></tr><tr><td>文档型数据库</td><td>数据结构要求不严格，适合存储结构不确定或者价值较低的数据</td><td>mongdb</td></tr><tr><td>列存储数据库</td><td>查找速度快，更容易进行分布式扩展，适合作为文件存储服务</td><td>Hbase</td></tr><tr><td>图形数据库</td><td>使用“图结构”进行存储，适合做社交网络计算等等</td><td>Neo4j</td></tr></tbody></table><p><strong>图形数据库介绍</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">https://blog.csdn.net/xlgen157387/article/details/79085901</span></span><br></pre></td></tr></table></figure><blockquote><p>关系数据库，只需要学习一套SQL规范，就可以操作几乎所有关系数据库</p><p>非关系型数据库，每一种产品都是独立的，比如进行学会了redis、mongodb</p></blockquote><h2 id="二、Redis"><a href="#二、Redis" class="headerlink" title="二、Redis"></a>二、Redis</h2><h3 id="2-1-Redis介绍"><a href="#2-1-Redis介绍" class="headerlink" title="2.1 Redis介绍"></a>2.1 Redis介绍</h3><p>Redis（Remote Dictionary Server）是用C语言开发的一个开源的高性能键值对数据库。它的所有数据都是保存在<span style="color:red">内存中</span>的,这也就决定了其读写速度之快,是其它硬盘保存数据的系统所无法匹敌的。</p><p>官方曾经给出过一组测试数据，50个并发执行100000个请求: 读的速度是110000次/s,写的速度是81000次/s。</p><h3 id="2-2-Redis服务器安装和使用"><a href="#2-2-Redis服务器安装和使用" class="headerlink" title="2.2 Redis服务器安装和使用"></a>2.2 Redis服务器安装和使用</h3><p><strong>下载</strong></p><ul><li>Reids官网地址：<a href="http://redis.io" target="_blank" rel="noopener">http://redis.io</a></li><li>中文网地址：<a href="https://www.redis.net.cn/" target="_blank" rel="noopener">https://www.redis.net.cn/</a></li><li>GitHub地址：<a href="https://github.com/MSOpenTech/redis/tags" target="_blank" rel="noopener">https://github.com/MSOpenTech/redis/tags</a></li></ul><p><strong>安装</strong></p><ul><li>windows绿色版，解压即用</li></ul><p><strong>目录</strong></p><p><img data-src="/img/redis%E7%9B%AE%E5%BD%95.png" alt="redis目录"></p><table><thead><tr><th>目录或文件</th><th>作用</th></tr></thead><tbody><tr><td>redis-benchmark</td><td>性能测试工具</td></tr><tr><td>redis-check-aof</td><td>AOF文件修复工具</td></tr><tr><td>redis-check-dump</td><td>RDB文件检查工具（快照持久化文件）</td></tr><tr><td>redis-cli</td><td>命令行客户端</td></tr><tr><td>redis-server</td><td>启动redis服务器</td></tr><tr><td>redis.windows.conf</td><td>redis核心配置文件</td></tr></tbody></table><p> <strong>启动</strong></p><blockquote><p>windows平台使用</p></blockquote><p><img data-src="/img/redis%E5%90%AF%E5%8A%A8.png" alt="redis启动"></p><blockquote><p>linux平台使用</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>在当前解压后的目录下  cmd进入dos窗口</span><br><span class="line"><span class="code">先启动 redis-server.exe redis.windows.conf</span></span><br><span class="line"><span class="code">再启动 redis-cli.exe</span></span><br></pre></td></tr></table></figure><h3 id="2-3-Redis数据结构"><a href="#2-3-Redis数据结构" class="headerlink" title="2.3 Redis数据结构"></a>2.3 Redis数据结构</h3><p>Redis采用的是键值对存储，键的类型只能为字符串，值支持五种数据类型：</p><blockquote><ul><li>字符串：String</li><li>哈希：HashMap</li><li>双向链表：LinkedList</li><li>无序集合：HashSet</li><li>有序集合：LinkedHashSet</li></ul></blockquote><p><img data-src="/img/redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png" alt="redis数据结构"></p><h3 id="2-4-Redis命令操作"><a href="#2-4-Redis命令操作" class="headerlink" title="2.4 Redis命令操作"></a>2.4 Redis命令操作</h3><p>Redis命令是用来操作Redis数据库的, 就相当于操作MySql数据库时的SQL语句。</p><p>Redis的命令根据要操作的值的数据结构的不同而不同, 每种数据类型都有自己的操作命令</p><h4 id="2-4-1-String字符串"><a href="#2-4-1-String字符串" class="headerlink" title="2.4.1 String字符串"></a>2.4.1 String字符串</h4><p>字符串类型是Redis中最为基础的数据存储类型。</p><p>在Redis中字符串类型的Value最多可以容纳的数据长度是512m。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>新增（更新）</span><br><span class="line"><span class="code">set key "value" </span></span><br><span class="line"><span class="code">注意：value值内容有空格，外面需要加引号</span></span><br><span class="line"><span class="bullet">* </span>查询</span><br><span class="line"><span class="code">get key</span></span><br><span class="line"><span class="bullet">* </span>删除</span><br><span class="line"><span class="code">del key</span></span><br><span class="line"><span class="bullet">* </span>新增并指定存活时间</span><br><span class="line"><span class="code">setex key seconds value</span></span><br><span class="line"><span class="code">ttl key  查看存活时间</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>根据键判断记录是否存在</span><br><span class="line"><span class="code">exists key</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>主键自增（类似于MySQL中的，auto_increment）</span><br><span class="line"><span class="code">set id 1</span></span><br><span class="line"><span class="code">incr id</span></span><br></pre></td></tr></table></figure><p><img data-src="/img/redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8Bstring1.png" alt="redis数据结构之string1"></p><p><img data-src="/img/redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8Bstring2.png" alt="redis数据结构之string2"></p><p><img data-src="/img/redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8Bstring3.png" alt="redis数据结构之string3"></p><h4 id="2-4-2-Hash哈希"><a href="#2-4-2-Hash哈希" class="headerlink" title="2.4.2 Hash哈希"></a>2.4.2 Hash哈希</h4><p>Hash类型极其类似于java中的Map,值里面可以存放一组组的键值对</p><p>该类型非常适合于存储java中对象的信息</p><p><img data-src="/img/redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8Bhash1.png" alt="redis数据结构之hash1"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>新增（更新）</span><br><span class="line"><span class="code">hset key hkey hvalue</span></span><br><span class="line"><span class="bullet">* </span>查询</span><br><span class="line"><span class="code">hget key hkey 查询具体元素</span></span><br><span class="line"><span class="code">hgetall key   查询所有元素</span></span><br><span class="line"><span class="bullet">* </span>删除</span><br><span class="line"><span class="code">hdel key hkey 删除指定元素</span></span><br><span class="line"><span class="code">del  key      删除整个hash</span></span><br></pre></td></tr></table></figure><p><img data-src="/img/redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8Bhash2.png" alt="redis数据结构之hash2"></p><h4 id="2-4-3-List列表"><a href="#2-4-3-List列表" class="headerlink" title="2.4.3 List列表"></a>2.4.3 List列表</h4><p>List类型底层是一个双向字符串链表。里面的元素是有序的，可重复的</p><p>我们可以从链表的任何一端进行元素的增删</p><p><img data-src="/img/redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8Blist1.png" alt="redis数据结构之list1"></p><p><img data-src="/img/redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8Blist2.png" alt="redis数据结构之list2"></p><h4 id="2-4-4-Set集合-无序"><a href="#2-4-4-Set集合-无序" class="headerlink" title="2.4.4 Set集合(无序)"></a>2.4.4 Set集合(无序)</h4><p>Set类型底层是一张hash表。里面的元素是无序的，不可重复的</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>新增</span><br><span class="line"><span class="code">sadd key value</span></span><br><span class="line"><span class="bullet">* </span>查询</span><br><span class="line"><span class="code">smembers key</span></span><br><span class="line"><span class="bullet">* </span>删除</span><br><span class="line"><span class="code">srem key value</span></span><br></pre></td></tr></table></figure><p><img data-src="/img/redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8Bset1.png" alt="redis数据结构之set1"></p><h4 id="2-4-5-ZSet集合-有序"><a href="#2-4-5-ZSet集合-有序" class="headerlink" title="2.4.5 ZSet集合(有序)"></a>2.4.5 ZSet集合(有序)</h4><p>Zset,也称sortedSet, 在Set的基础上，加入了有序功能，在添加元素的时候，允许指定一个分数，它会按照这个分数排序</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>新增</span><br><span class="line"><span class="code">zadd key 分值 value</span></span><br><span class="line"><span class="bullet">* </span>查询</span><br><span class="line"><span class="code">zrange key start end [withscores] 升序</span></span><br><span class="line"><span class="code">zrevrange key start end [withscores] 降序</span></span><br><span class="line"><span class="bullet">* </span>删除</span><br><span class="line"><span class="code">zrem key value</span></span><br></pre></td></tr></table></figure><p><img data-src="/img/redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8Bzset1.png" alt="redis数据结构之zset1"></p><h4 id="2-4-6-通用命令"><a href="#2-4-6-通用命令" class="headerlink" title="2.4.6 通用命令"></a>2.4.6 通用命令</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>模糊查询键</span><br><span class="line"><span class="code">keys *</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>删除多个键</span><br><span class="line"><span class="code">del key [key] [key]</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>根据键判断值类型 </span><br><span class="line"><span class="code">type key</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>选择数据库</span><br><span class="line"><span class="code">select 库名[0~15]</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>清空当前数据库</span><br><span class="line"><span class="code">flushdb</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>清空所有数据库</span><br><span class="line"><span class="code">flushall</span></span><br></pre></td></tr></table></figure><h3 id="2-5-Redis持久化"><a href="#2-5-Redis持久化" class="headerlink" title="2.5 Redis持久化"></a>2.5 Redis持久化</h3><p>Redis的数据都是存在在内存之中的，那么这样一旦出现宕机，势必会导致数据的丢失，这就需要持久化操作，也就是要将redis在内存中的数据写到硬盘上保存。</p><p>注意：redis虽然有持久化操作，但是其全部数据依旧都在内存中存在,也就是说硬盘上的只是为了安全和<span style="color:red">备份</span>。</p><blockquote><p>Redis提供了两种数据持久化的方式，分别是RDB和AOF。</p></blockquote><p><strong>RDB：默认开启，不需要配置</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>手动持久化【了解】</span><br><span class="line"><span class="code">bgsave</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>自动持久化</span><br><span class="line"><span class="code">在redis运行期间，根据指定时间规则，将内存的数据集进行快照拍摄，持久化到硬盘 【dump.rdb】</span></span><br><span class="line"><span class="code">在redis.windows.conf配置文件中，可以查看（修改）时间规则</span></span><br><span class="line"><span class="code">        save 900 1</span></span><br><span class="line"><span class="code">        save 300 10</span></span><br><span class="line"><span class="code">        save 60 10000</span></span><br></pre></td></tr></table></figure><p><img data-src="/img/redisRDB%E9%85%8D%E7%BD%AE.png" alt="redisRDB配置"></p><p><strong>AOF：默认关闭，需手动开启</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>在redis运行期间，以日志记录方式监控写操作，持久化到硬盘【appendonly.aof】</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>在redis.windows.conf配置文件中开启</span><br><span class="line"><span class="code">appendonly no --&gt; appendonly yes</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>三种日志监控规则</span><br><span class="line"><span class="code"># appendfsync always 每次（写操作）修改时，进行持久化</span></span><br><span class="line"><span class="code">    appendfsync everysec 每秒，持久化一次</span></span><br><span class="line"><span class="code">    # appendfsync no     在CPU空闲期，进行持久化</span></span><br></pre></td></tr></table></figure><blockquote><p>RDB和AOF二种持久化机制可以同时存在</p></blockquote><p><strong>在开发中使用哪种机制进行持久化？</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>RDB：应用在缓存服务器场景</span><br><span class="line"><span class="code">优点：性能高，降低磁盘IO</span></span><br><span class="line"><span class="code">缺点：redis容灾后，容易丢失数据</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>AOF：应用在数据库服务器场景</span><br><span class="line"><span class="code">优点：不容易丢失数据（日志）</span></span><br><span class="line"><span class="code">缺点：速度稍慢（能够秒杀mysql等产品的...）</span></span><br></pre></td></tr></table></figure><h2 id="三、Jedis"><a href="#三、Jedis" class="headerlink" title="三、Jedis"></a>三、Jedis</h2><p>Redis作为一款优秀的缓存服务器存在，大多数语言都提供了连接Redis的驱动包，在java中，比较出名的是Jedis和Redisson，我们今天以Jedis为例学习，看看如何是用程序操作redis。</p><h3 id="3-1-Jedis使用"><a href="#3-1-Jedis使用" class="headerlink" title="3.1 Jedis使用"></a>3.1 Jedis使用</h3><p><strong>常用API</strong></p><table><thead><tr><th>方法</th><th>解释</th></tr></thead><tbody><tr><td>new Jedis(host, port)</td><td>创建jedis对象，参数host是redis服务器地址，参数port是redis服务端口</td></tr><tr><td>set(key,value)</td><td>设置字符串类型的数据</td></tr><tr><td>get(key)</td><td>获得字符串类型的数据</td></tr><tr><td>hset(key,field,value)</td><td>设置哈希类型的数据</td></tr><tr><td>hget(key,field)</td><td>获得哈希类型的数据</td></tr><tr><td>lpush(key,values)</td><td>设置列表类型的数据</td></tr><tr><td>lpop(key)</td><td>列表左面弹栈</td></tr><tr><td>rpop(key)</td><td>列表右面弹栈</td></tr><tr><td>del(key)</td><td>删除指定的key</td></tr></tbody></table><h4 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h4><h5 id="Ⅰ-导入坐标"><a href="#Ⅰ-导入坐标" class="headerlink" title="Ⅰ 导入坐标"></a>Ⅰ 导入坐标</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>maven官方提供坐标搜索仓库：<a href="https://mvnrepository.com/" target="_blank" rel="noopener">https://mvnrepository.com/</a></p></blockquote><h5 id="Ⅱ-编写代码"><a href="#Ⅱ-编写代码" class="headerlink" title="Ⅱ 编写代码"></a>Ⅱ 编写代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建jedis连接对象</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"127.0.0.1"</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="comment">// 2.调用set方法</span></span><br><span class="line">        jedis.set(<span class="string">"mystr"</span>, <span class="string">"传智播客"</span>);</span><br><span class="line">        <span class="comment">// 3.释放资源</span></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建jedis连接对象</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis();</span><br><span class="line">        <span class="comment">// 2.调用get方法</span></span><br><span class="line">        System.out.println(jedis.get(<span class="string">"mystr"</span>));</span><br><span class="line">        <span class="comment">// 3.释放资源</span></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-Jedis连接池"><a href="#4-2-Jedis连接池" class="headerlink" title="4.2 Jedis连接池"></a>4.2 Jedis连接池</h3><p>jedis连接资源的创建与销毁是非常消耗性能的，所以我们不希望频繁的创建和销毁它.基于这样的需求,就有了jedisPool技术。</p><h4 id="快速入门-1"><a href="#快速入门-1" class="headerlink" title="快速入门"></a>快速入门</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisPoolTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建连接池对象</span></span><br><span class="line">        JedisPool jedisPool = <span class="keyword">new</span> JedisPool(<span class="string">"127.0.0.1"</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="comment">// 2.从池中获取连接</span></span><br><span class="line">        Jedis jedis = jedisPool.getResource();</span><br><span class="line">        <span class="comment">// 3.操作api实现CRUD</span></span><br><span class="line">        jedis.setex(<span class="string">"sms_code"</span>, <span class="number">300</span>, <span class="string">"996571"</span>);</span><br><span class="line">        <span class="comment">// 4.归还到连接池</span></span><br><span class="line">        jedis.close(); <span class="comment">// 底层使用了动态代理，进行增强</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 指定连接池配置参数</span></span><br><span class="line">        JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">        config.setMaxTotal(<span class="number">50</span>); <span class="comment">// 最大连接数</span></span><br><span class="line">        config.setMinIdle(<span class="number">10</span>); <span class="comment">// 空闲期，保留连接数</span></span><br><span class="line">        config.setMaxWaitMillis(<span class="number">3000</span>);<span class="comment">// 等待时间</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.创建连接池对象</span></span><br><span class="line">        JedisPool jedisPool = <span class="keyword">new</span> JedisPool(config, <span class="string">"127.0.0.1"</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="comment">// 2.从池中获取连接</span></span><br><span class="line">        Jedis jedis = jedisPool.getResource();</span><br><span class="line">        <span class="comment">// 3.操作api实现CRUD</span></span><br><span class="line">        System.out.println(jedis.get(<span class="string">"sms_code"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.归还到连接池</span></span><br><span class="line">        jedis.close(); <span class="comment">// 底层使用了动态代理，进行增强</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="连接池工具类"><a href="#连接池工具类" class="headerlink" title="连接池工具类"></a>连接池工具类</h4><blockquote><p>JedisUtils</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JedisPool jedisPool;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String host;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Integer port;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Integer maxTotal;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Integer maxIdle;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化连接池</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ResourceBundle jedis = ResourceBundle.getBundle(<span class="string">"jedis"</span>);</span><br><span class="line">            <span class="comment">// 读取配置文件给变量赋值</span></span><br><span class="line">            <span class="comment">// 获取类加载读取 jedis.properties 获取io流</span></span><br><span class="line">            InputStream is = JedisUtils.class.getClassLoader().getResourceAsStream("jedis.properties");</span><br><span class="line">            <span class="comment">// 创建properties对象 加载io流</span></span><br><span class="line">            Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            properties.load(is);</span><br><span class="line">            <span class="comment">// 给变量赋值</span></span><br><span class="line">            host = properties.getProperty(<span class="string">"jedis.host"</span>);</span><br><span class="line">            port = Integer.parseInt(properties.getProperty(<span class="string">"jedis.port"</span>));</span><br><span class="line">            maxTotal = Integer.parseInt(properties.getProperty(<span class="string">"jedis.maxTotal"</span>));</span><br><span class="line">            maxIdle = Integer.parseInt(properties.getProperty(<span class="string">"jedis.maxIdle"</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建连接池配置对象</span></span><br><span class="line">            JedisPoolConfig jedisPoolConfig = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">            jedisPoolConfig.setMaxTotal(maxTotal);</span><br><span class="line">            jedisPoolConfig.setMaxIdle(maxIdle);</span><br><span class="line">            <span class="comment">// 创建连接池对象</span></span><br><span class="line">            jedisPool = <span class="keyword">new</span> JedisPool(jedisPoolConfig, host, port);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供获取jedis连接的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title">getJedis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jedisPool.getResource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>jedis.properties</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jedis.host</span>=<span class="string">localhost</span></span><br><span class="line"><span class="meta">jedis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="meta">jedis.maxTotal</span>=<span class="string">50</span></span><br><span class="line"><span class="meta">jedis.maxIdle</span>=<span class="string">10</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、NoSQL&quot;&gt;&lt;a href=&quot;#一、NoSQL&quot; class=&quot;headerlink&quot; title=&quot;一、NoSQL&quot;&gt;&lt;/a&gt;一、NoSQL&lt;/h2&gt;&lt;h3 id=&quot;1-1-NoSQL介绍&quot;&gt;&lt;a href=&quot;#1-1-NoSQL介绍&quot; class=&quot;headerlink&quot; title=&quot;1.1 NoSQL介绍&quot;&gt;&lt;/a&gt;1.1 NoSQL介绍&lt;/h3&gt;&lt;p&gt;NoSQL，泛指非关系型的数据库，NoSQL即Not-Only SQL，它可以作为关系型数据库的良好补充。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&quot;/img/NoSQL%E4%BB%8B%E7%BB%8D.png&quot; alt=&quot;NoSQL介绍&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="非关系型数据库" scheme="http://sunmoon.com/categories/%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="NoSQL" scheme="http://sunmoon.com/categories/%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/NoSQL/"/>
    
    
      <category term="redis" scheme="http://sunmoon.com/tags/redis/"/>
    
      <category term="jedis" scheme="http://sunmoon.com/tags/jedis/"/>
    
  </entry>
  
  <entry>
    <title>Maven基础</title>
    <link href="http://sunmoon.com/2020/09/10/Maven%E5%9F%BA%E7%A1%80/"/>
    <id>http://sunmoon.com/2020/09/10/Maven%E5%9F%BA%E7%A1%80/</id>
    <published>2020-09-10T12:59:05.000Z</published>
    <updated>2020-09-11T07:59:08.266Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Maven简介"><a href="#一、Maven简介" class="headerlink" title="一、Maven简介"></a>一、Maven简介</h2><h3 id="1-1-Maven是什么"><a href="#1-1-Maven是什么" class="headerlink" title="1.1. Maven是什么?"></a>1.1. Maven是什么?</h3><p>Maven 翻译为”专家”、”内行”，是 Apache 下的一个纯 Java 开发的开源项目。</p><p><strong>一个对 Maven 比较正式的定义是这么说的：</strong></p><p>Maven 是一个项目管理工具，它包含了一个项目对象模型，一组标准集合，一个项目生命周期，一个依赖管理系统，和用来运行定义在生命周期阶段中插件目标的工具。</p><a id="more"></a><h3 id="1-2-Maven能解决什么问题"><a href="#1-2-Maven能解决什么问题" class="headerlink" title="1.2 Maven能解决什么问题"></a>1.2 Maven能解决什么问题</h3><p>可以用更通俗的方式来说明。我们知道，项目开发不仅仅是写写代码而已，期间会伴随着各种必不可少的事情要做，下面列举几个感受一下： </p><ol><li>我们需要引用各种jar包，尤其是比较大的工程，引用的jar包往往有几十个乃至上百个，每用到一种jar包，都需要手动引入工程目录，而且经常遇到各种让人抓狂的jar包冲突，版本冲突。</li><li>我们写好的java文件，需要通过javac编译成class文件才能交给JVM运行。这项工作可以由各种集成开发工具帮我们完成 Eclipse、IDEA 等都可以将代码即时编译。 </li><li>世界上没有不存在 bug 的代码，因此写完了代码，我们还要写一些单元测试，然后一个个的运行来检验代码质量。 </li><li>再优雅的代码也是要出来卖的。我们后面还需要把代码与各种配置文件、资源整合到一起，进行打包。如果是 web 项目，还需要将之发布到服务器 。</li></ol><p>试想，如果现在有一种工具，可以把你从上面的繁琐工作中解放出来，能帮你构建工程，管理 jar包，编译代码，还能帮你自动运行单元测试，打包，生成报表，甚至能帮你部署项目，生成 Web 站点，你会心动吗？ Maven 就可以解决上面所提到的这些问题。 </p><h3 id="1-3-Maven的两个核心功能"><a href="#1-3-Maven的两个核心功能" class="headerlink" title="1.3 Maven的两个核心功能"></a>1.3 Maven的两个核心功能</h3><h4 id="1-3-1-依赖管理"><a href="#1-3-1-依赖管理" class="headerlink" title="1.3.1 依赖管理"></a>1.3.1 依赖管理</h4><p>传统的 WEB 工程中，我们必须将工程所依赖的 jar 包复制到工程中，导致了工程的变得很大。 </p><p>maven的 WEB 工程中不直接将jar包导入到工程中，而是通过在 pom.xml 文件中添加所需jar包的坐标。项目运行时，通过读取坐标到一个专门用于“存放jar包仓库”（Maven仓库）找到相应的jar包。</p><p><img data-src="/img/maven%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%861.png" alt="maven依赖管理1"></p><p><img data-src="/img/maven%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%862.png" alt="maven依赖管理2"></p><h4 id="1-3-2-项目构建"><a href="#1-3-2-项目构建" class="headerlink" title="1.3.2 项目构建"></a>1.3.2 项目构建</h4><p>我们开发的项目，往往都要经历编译、测试、打包、安装，部署等一系列过程。</p><ul><li><p>什么是构建项目</p><ul><li>指的是项目从编译、测试、打包、安装，部署整个过程都交给maven进行管理，这个过程称为构建。     </li></ul></li><li><p>一键构建</p><ul><li>指的是整个构建过程，使用 maven 一个命令可以轻松完成整个工作。 </li></ul></li></ul><p><img data-src="/img/maven%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA.png" alt="maven项目构建"></p><h2 id="二、Maven安装和使用"><a href="#二、Maven安装和使用" class="headerlink" title="二、Maven安装和使用"></a>二、Maven安装和使用</h2><h3 id="2-1-Maven下载和安装"><a href="#2-1-Maven下载和安装" class="headerlink" title="2.1 Maven下载和安装"></a>2.1 Maven下载和安装</h3><p><strong>下载</strong></p><ul><li>Maven官网下载地址 ：<a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">http://maven.apache.org/download.cgi</a></li></ul><p><strong>安装</strong></p><ul><li>Maven使用java语言开发的，解压即可运行</li><li>注意：Maven依赖 JAVA_HOME</li></ul><p><img data-src="/img/maven%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt="maven目录结构"></p><p><strong>目录</strong></p><ul><li>bin：存放了 maven 的命令，比如我们前面用到的 mvn tomcat7:run</li><li>boot：存放了一些 maven 本身的引导程序，如类加载器等</li><li>conf：存放了 maven 的一些配置文件，如 setting.xml 文件</li><li>lib：存放了 maven 本身运行所需的一些 jar 包</li></ul><p><strong>环境变量</strong></p><ul><li>MAVEN_HOME: maven安装目录</li></ul><p><img data-src="/img/%E9%85%8D%E7%BD%AEmaven%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F1.png" alt="配置maven环境变量1"></p><p><img data-src="/img/%E9%85%8D%E7%BD%AEmaven%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F2.png" alt="配置maven环境变量2"></p><p><strong>打开cmd窗口测试</strong></p><ul><li>输入：<code>mvn -v</code>回车即可，显示maven的版本信息表示成功。</li></ul><h3 id="2-2-Maven仓库"><a href="#2-2-Maven仓库" class="headerlink" title="2.2 Maven仓库"></a>2.2 Maven仓库</h3><h4 id="2-2-1-Maven仓库的分类"><a href="#2-2-1-Maven仓库的分类" class="headerlink" title="2.2.1 Maven仓库的分类"></a>2.2.1 Maven仓库的分类</h4><p>本地仓库：</p><ul><li>项目通过jar坐标，先从本地仓库找对应jar包，如果找不到会从远程仓库（互联网）去下载 jar 包，保存在本地仓库（在程序员的电脑上），第二次就不需要从远程仓库去下载了。</li></ul><p>远程仓库：</p><ul><li>中央仓库：<ul><li>由专业团队（maven团队）统一维护。中央仓库的地址：<a href="https://repo1.maven.org/maven2/" target="_blank" rel="noopener">https://repo1.maven.org/maven2/</a></li></ul></li><li>私服：<ul><li>架设在公司局域网内，提供给内部的人员使用。</li></ul></li><li>第三方仓库：<ul><li>中央仓库只有一个国内使用非常慢，我们可以更换为：阿里云镜像</li></ul></li></ul><p><img data-src="/img/maven%E4%BB%93%E5%BA%93.png" alt="maven仓库"></p><h4 id="2-2-2-Maven本地仓库配置"><a href="#2-2-2-Maven本地仓库配置" class="headerlink" title="2.2.2 Maven本地仓库配置"></a>2.2.2 Maven本地仓库配置</h4><p>修改 maven的安装目录/conf/settings.xml 文件的标签</p><ul><li><code>&lt;localRepository&gt;本地仓库地址&lt;/localRepository&gt;</code></li></ul><p><img data-src="/img/maven%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E9%85%8D%E7%BD%AE.png" alt="maven本地仓库配置"></p><h4 id="2-2-3-Maven仓库国内镜像配置"><a href="#2-2-3-Maven仓库国内镜像配置" class="headerlink" title="2.2.3 Maven仓库国内镜像配置"></a>2.2.3 Maven仓库国内镜像配置</h4><p>修改 maven 根目录下的 conf 文件夹中的 setting.xml 文件，在 mirrors 节点上，添加内容如下：</p><blockquote><p>maven仓库阿里镜像</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>        </span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img data-src="/img/maven%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E9%85%8D%E7%BD%AE.png" alt="maven国内镜像配置"></p><h3 id="2-3-Maven坐标和依赖"><a href="#2-3-Maven坐标和依赖" class="headerlink" title="2.3 Maven坐标和依赖"></a>2.3 Maven坐标和依赖</h3><p>创建Maven工程，会有一个<code>pom.xml</code>，是Maven工成的核心配置文件，可以进行依赖管理：</p><p><img data-src="/img/maven%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86.png" alt="maven依赖管理"></p><h3 id="2-4-Maven工程结构"><a href="#2-4-Maven工程结构" class="headerlink" title="2.4 Maven工程结构"></a>2.4 Maven工程结构</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>java项目</span><br><span class="line"><span class="code">java工程（项目名）</span></span><br><span class="line"><span class="code">--| src目录（存放项目的源代码和配置文件）</span></span><br><span class="line"><span class="code">--| main目录（存放运行环境代码）</span></span><br><span class="line"><span class="code">--| java目录（存放java源代码）</span></span><br><span class="line"><span class="code">--| resources目录（存放配置文件）</span></span><br><span class="line"><span class="code">--| test目录（存放测试环境代码）</span></span><br><span class="line"><span class="code">--| java目录（存放java源代码）</span></span><br><span class="line"><span class="code">--| resources目录（存放配置文件）</span></span><br><span class="line"><span class="code">--| target目录（存放编译后的代码）</span></span><br><span class="line"><span class="code">--| pom.xml（maven的核心配置文件，实现依赖管理）</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>web项目</span><br><span class="line"><span class="code">web工程（项目名）</span></span><br><span class="line"><span class="code">--| src目录（存放项目的源代码和配置文件）</span></span><br><span class="line"><span class="code">--| main目录（存放运行环境代码）</span></span><br><span class="line"><span class="code">--| java目录（存放java源代码）</span></span><br><span class="line"><span class="code">--| resources目录（存放配置文件）</span></span><br><span class="line"><span class="code">--| webapp目录（存放页面资源）</span></span><br><span class="line"><span class="code">--| WEB-INF目录</span></span><br><span class="line"><span class="code">--| index.jsp</span></span><br><span class="line"><span class="code">--| test目录（存放测试环境代码）</span></span><br><span class="line"><span class="code">--| java目录（存放java源代码）</span></span><br><span class="line"><span class="code">--| resources目录（存放配置文件）</span></span><br><span class="line"><span class="code">--| target目录（存放编译后的代码）</span></span><br><span class="line"><span class="code">--| pom.xml（maven的核心配置文件，实现依赖管理）</span></span><br></pre></td></tr></table></figure><h2 id="三、Maven的生命周期和插件"><a href="#三、Maven的生命周期和插件" class="headerlink" title="三、Maven的生命周期和插件"></a>三、Maven的生命周期和插件</h2><h3 id="3-1-Maven常用命令和插件"><a href="#3-1-Maven常用命令和插件" class="headerlink" title="3.1 Maven常用命令和插件"></a>3.1 Maven常用命令和插件</h3><p>我们可以在 cmd 中通过一系列的 maven 命令，来对我们的工程进行编译、测试、打包、安装、部署。 </p><ul><li><code>clean</code>：<strong>maven工程的清理命令，执行clean会删除target目录及内容。</strong></li><li><code>compile</code>：<strong>maven工程的编译命令，作用是将 src/main/java 下的文件编译为class文件输出到target目录下。</strong></li><li><code>test</code>：<strong>maven工程的测试命令，作用是执行 src/test/java 下单元测试类，并编译为class文件。</strong></li><li><code>package</code>：<strong>maven工程的打包命令，对于java工程执行package打成jar包，对于web工程打成war包。</strong> </li><li><code>install</code>：<strong>maven工程的安装命令，执行install将mave工程打成jar包或war包，并发布到本地仓库。</strong> </li><li><code>deploy</code>：<strong>maven工程部署命令，将jar或war包部署到私服中。</strong></li></ul><h3 id="3-2-生命周期"><a href="#3-2-生命周期" class="headerlink" title="3.2 生命周期"></a>3.2 生命周期</h3><p>maven 对项目构建过程分为<strong>“三套相互独立的”</strong>生命周期，这三套生命周期分别是：</p><ul><li>Clean Lifecycle(清理生命周期)<ul><li>在进行真正的构建之前进行一些清理工作。</li><li>命令:clean</li></ul></li><li>Default Lifecycle(默认生命周期)<ul><li>构建的核心部分，编译，测试，打包，部署等等。</li><li>命令: compile  test  package  install  deploy</li></ul></li><li>Site Lifecycle(站点生命周期)<ul><li>生成项目报告，站点，发布站点。 </li><li>命令: site</li></ul></li></ul><blockquote><p>小贴士：</p><ul><li>在同一个生命周期中的命令,执行后面的命令,前面的命令自动执行</li></ul></blockquote><h3 id="3-3-Maven概念模型"><a href="#3-3-Maven概念模型" class="headerlink" title="3.3 Maven概念模型"></a>3.3 Maven概念模型</h3><p><img data-src="/img/maven%E6%A6%82%E5%BF%B5%E6%A8%A1%E5%9E%8B.png" alt="maven概念模型"></p><h3 id="3-4-扩展：依赖管理"><a href="#3-4-扩展：依赖管理" class="headerlink" title="3.4 扩展：依赖管理"></a>3.4 扩展：依赖管理</h3><p>在导入依赖的时候，我们也可以指定依赖的作用范围：</p><table><thead><tr><th>依赖范围</th><th>编译期有效</th><th>测试期有效</th><th>运行期有效</th><th>例子</th></tr></thead><tbody><tr><td>compile（默认）</td><td>Y</td><td>Y</td><td>Y</td><td>mybatis</td></tr><tr><td>test</td><td>-</td><td>Y</td><td>-</td><td>junit</td></tr><tr><td>provided</td><td>Y</td><td>Y</td><td>-</td><td>servlet-api</td></tr><tr><td>runtime</td><td>-</td><td>Y</td><td>Y</td><td>JDBC驱动</td></tr><tr><td>system</td><td>Y</td><td>Y</td><td>-</td><td>本地，maven仓库之外的库</td></tr></tbody></table><p>解释：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>compile</span><br><span class="line"><span class="code">默认依赖范围，作用域在编译、测试、运行时都有效。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>test</span><br><span class="line"><span class="code">作用域在测试时有效。编译和运行时不需要，比如：Junit。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>provided</span><br><span class="line"><span class="code">作用域在编译、测试时有效。运行时不需要，比如： servlet api 被 tomcat 容器提供。 </span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>runtime</span><br><span class="line"><span class="code">作用域在测试、运行时有效。编译时不需要，比如：jdbc的驱动包。 </span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>system</span><br><span class="line"><span class="code">system范围依赖与provided类似，jar包在本地磁盘而不是maven仓库</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--依赖管理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--作用范围--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--作用范围--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--作用范围--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、Maven简介&quot;&gt;&lt;a href=&quot;#一、Maven简介&quot; class=&quot;headerlink&quot; title=&quot;一、Maven简介&quot;&gt;&lt;/a&gt;一、Maven简介&lt;/h2&gt;&lt;h3 id=&quot;1-1-Maven是什么&quot;&gt;&lt;a href=&quot;#1-1-Maven是什么&quot; class=&quot;headerlink&quot; title=&quot;1.1. Maven是什么?&quot;&gt;&lt;/a&gt;1.1. Maven是什么?&lt;/h3&gt;&lt;p&gt;Maven 翻译为”专家”、”内行”，是 Apache 下的一个纯 Java 开发的开源项目。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一个对 Maven 比较正式的定义是这么说的：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Maven 是一个项目管理工具，它包含了一个项目对象模型，一组标准集合，一个项目生命周期，一个依赖管理系统，和用来运行定义在生命周期阶段中插件目标的工具。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Maven" scheme="http://sunmoon.com/categories/Maven/"/>
    
    
      <category term="maven介绍" scheme="http://sunmoon.com/tags/maven%E4%BB%8B%E7%BB%8D/"/>
    
      <category term="依赖管理" scheme="http://sunmoon.com/tags/%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86/"/>
    
      <category term="相关配置" scheme="http://sunmoon.com/tags/%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/"/>
    
      <category term="maven仓库" scheme="http://sunmoon.com/tags/maven%E4%BB%93%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis注解开发&amp;分页查询</title>
    <link href="http://sunmoon.com/2020/09/09/Mybatis%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91-%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/"/>
    <id>http://sunmoon.com/2020/09/09/Mybatis%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91-%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/</id>
    <published>2020-09-09T13:39:20.000Z</published>
    <updated>2020-09-09T14:17:07.159Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-核心配置文件总结"><a href="#一-核心配置文件总结" class="headerlink" title="一  核心配置文件总结"></a>一  核心配置文件总结</h2><p><strong>SqlMapConfig.xml 中配置的内容和顺序如下：</strong>  </p><ul><li>properties（属性）</li><li>settings（全局配置参数）</li><li>typeAliases（类型别名）</li><li>typeHandlers（类型处理器）</li><li>objectFactory（对象工厂）</li><li>plugins（插件）</li><li>environments（数据库环境配置）<ul><li>environment（数据库环境子属性对象）<ul><li>transactionManager（事务管理）</li><li>dataSource（数据源）</li></ul></li></ul></li><li>mappers（映射器）</li></ul><a id="more"></a><h3 id="1-1-properties标签"><a href="#1-1-properties标签" class="headerlink" title="1.1 properties标签"></a>1.1 properties标签</h3><blockquote><p>加载外部的properties文件</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbc.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-settings标签"><a href="#1-2-settings标签" class="headerlink" title="1.2 settings标签"></a>1.2 settings标签</h3><blockquote><p>全局参数配置</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启懒加载--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定触发延迟加载的方法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadTriggerMethods"</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-typeAliases标签"><a href="#1-3-typeAliases标签" class="headerlink" title="1.3 typeAliases标签"></a>1.3 typeAliases标签</h3><blockquote><p>为 Java 类型设置一个别名</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>单个定义别名（了解）</span><br><span class="line"></span><br><span class="line"><span class="code">    &lt;typeAliases&gt;</span></span><br><span class="line"><span class="code">        &lt;typeAlias type="com.xxx.domain.User" alias="user"&gt;&lt;/typeAlias&gt;</span></span><br><span class="line"><span class="code">    &lt;/typeAliases&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">1. </span>使用包的形式批量定义别名</span><br><span class="line"></span><br><span class="line"><span class="code">    &lt;typeAliases&gt;</span></span><br><span class="line"><span class="code">        &lt;package name="com.xxx.domain"&gt;&lt;/package&gt;</span></span><br><span class="line"><span class="code">    &lt;/typeAliases&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-4-mappers标签"><a href="#1-4-mappers标签" class="headerlink" title="1.4 mappers标签"></a>1.4 mappers标签</h3><blockquote><p>加载映射配置</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>加载指定的src目录下的映射文件，例如：</span><br><span class="line"></span><br><span class="line"><span class="code">&lt;mapper resource="com/xxx/mapper/UserMapper.xml"/&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2. </span>加载指定包目录下的映射接口，例如：</span><br><span class="line"></span><br><span class="line"><span class="code">&lt;mapper class="com.xxx.mapper.UserMapper"/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">3. </span>加载并扫描指定包下所有的映射文件（接口），例如：</span><br><span class="line"></span><br><span class="line"><span class="code">    &lt;!--配置映射文件--&gt;</span></span><br><span class="line"><span class="code">    &lt;mappers&gt;</span></span><br><span class="line"><span class="code">       &lt;!-- &lt;mapper resource="com/itheima/mapper/UserMapper.xml"&gt;&lt;/mapper&gt;--&gt;</span></span><br><span class="line"><span class="code">        &lt;!--使用扫描包的方式有一个前置条件，映射文件命名必须跟映射接口一致，且在同一包下--&gt;</span></span><br><span class="line"><span class="code">        &lt;package name="com.xxx.mapper"&gt;&lt;/package&gt;</span></span><br><span class="line"><span class="code">    &lt;/mappers&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-5-environments标签"><a href="#1-5-environments标签" class="headerlink" title="1.5 environments标签"></a>1.5 environments标签</h3><blockquote><p>数据源环境配置</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;environment id="mysql"&gt;</span></span><br><span class="line"><span class="code">    &lt;!--事务管理器：使用JDBC--&gt;</span></span><br><span class="line"><span class="code">        &lt;transactionManager type="JDBC"/&gt;</span></span><br><span class="line"><span class="code">        &lt;!--数据源：使用内置连接池--&gt;</span></span><br><span class="line"><span class="code">        &lt;dataSource type="POOLED"&gt;</span></span><br><span class="line"><span class="code">            &lt;property name="driver" value="$&#123;jdbc.driver&#125;"/&gt;</span></span><br><span class="line"><span class="code">            &lt;property name="url" value="$&#123;jdbc.url&#125;"/&gt;</span></span><br><span class="line"><span class="code">            &lt;property name="username" value="$&#123;jdbc.username&#125;"/&gt;</span></span><br><span class="line"><span class="code">            &lt;property name="password" value="$&#123;jdbc.password&#125;"/&gt;</span></span><br><span class="line"><span class="code">        &lt;/dataSource&gt;</span></span><br><span class="line"><span class="code">    &lt;/environment&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>其中，事务管理器（transactionManager）类型有两种：</span><br><span class="line"><span class="bullet">* </span>JDBC：</span><br><span class="line"><span class="code">这个配置就是直接使用了JDBC 的提交和回滚设置，它依赖于从数据源得到的连接来管理事务作用域。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>MANAGED：</span><br><span class="line"><span class="code">这个配置几乎没做什么。它从来不提交或回滚一个连接，而是让容器来管理事务的整个生命周期。</span></span><br><span class="line"><span class="code">例如：mybatis与spring整合后，事务交给spring容器管理。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2. </span>其中，数据源（dataSource）常用类型有二种：</span><br><span class="line"><span class="bullet">* </span>UNPOOLED：</span><br><span class="line"><span class="code">这个数据源的实现只是每次被请求时打开和关闭连接。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>POOLED：</span><br><span class="line"><span class="code">这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来。</span></span><br></pre></td></tr></table></figure><h2 id="二、Mybatis注解"><a href="#二、Mybatis注解" class="headerlink" title="二、Mybatis注解"></a>二、Mybatis注解</h2><p>近年来注解开发越来越流行，Mybatis也可以使用注解开发方式，这样我们就可以减少编写Mapper映射文件了。我们先围绕一些基本的CRUD来学习，再学习复杂映射多表操作。</p><h3 id="2-1-Mybatis常用注解"><a href="#2-1-Mybatis常用注解" class="headerlink" title="2.1 Mybatis常用注解"></a>2.1 Mybatis常用注解</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>@Insert：实现新增，代替了<span class="xml"><span class="tag">&lt;<span class="name">insert</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="bullet">* </span>@Update：实现更新，代替了<span class="xml"><span class="tag">&lt;<span class="name">update</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>@Delete：实现删除，代替了<span class="xml"><span class="tag">&lt;<span class="name">delete</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>@Select：实现查询，代替了<span class="xml"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>@Result：实现结果集封装，代替了<span class="xml"><span class="tag">&lt;<span class="name">result</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>@Results：可以与@Result 一起使用，封装多个结果集，代替了<span class="xml"><span class="tag">&lt;<span class="name">resultMap</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>@One：实现一对一结果集封装，代替了<span class="xml"><span class="tag">&lt;<span class="name">association</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="bullet">* </span>@Many：实现一对多结果集封装，代替了<span class="xml"><span class="tag">&lt;<span class="name">collection</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="2-2-Mybatis注解单表操作"><a href="#2-2-Mybatis注解单表操作" class="headerlink" title="2.2 Mybatis注解单表操作"></a>2.2 Mybatis注解单表操作</h3><p><strong>代码示例：</strong></p><ul><li>UserMapper接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user where id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select id as uid ,username as uname,birthday as bir , sex as gender ,address as addr from user"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(&#123;</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"uid"</span>, property = <span class="string">"id"</span>, id = <span class="keyword">true</span>),  <span class="comment">// 相当于&lt;id&gt;&lt;/id&gt;</span></span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"uname"</span>, property = <span class="string">"username"</span>), <span class="comment">// 相当于&lt;result&gt;&lt;/result&gt;</span></span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"bir"</span>, property = <span class="string">"birthday"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"gender"</span>, property = <span class="string">"sex"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"addr"</span>, property = <span class="string">"address"</span>)</span><br><span class="line">    &#125;) <span class="comment">// 相当于&lt;resultMap&gt;&lt;/resultMap&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into user values(null,#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"update user set username = #&#123;username&#125;,sex = #&#123;sex&#125;,address = #&#123;address&#125;,birthday= #&#123;birthday&#125; where id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from user where id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> <span class="keyword">extends</span> <span class="title">BaseMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取代理对象</span></span><br><span class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 查询单个</span></span><br><span class="line">       <span class="comment">/* User user = userMapper.findById(41);</span></span><br><span class="line"><span class="comment">        System.out.println(user);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询所有</span></span><br><span class="line">       <span class="comment">/* List&lt;User&gt; list = userMapper.findAll();</span></span><br><span class="line"><span class="comment">        for (User user : list) &#123;</span></span><br><span class="line"><span class="comment">            System.out.println(user);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加</span></span><br><span class="line">       <span class="comment">/* User user = new User();</span></span><br><span class="line"><span class="comment">        user.setUsername("印度小啊三");</span></span><br><span class="line"><span class="comment">        user.setAddress("恒河");</span></span><br><span class="line"><span class="comment">        user.setBirthday(new Date());</span></span><br><span class="line"><span class="comment">        user.setSex("不详");</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        userMapper.save(user);*/</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// 修改</span></span><br><span class="line">        <span class="comment">/*User user = new User();</span></span><br><span class="line"><span class="comment">        user.setId(58);</span></span><br><span class="line"><span class="comment">        user.setUsername("印度啊三");</span></span><br><span class="line"><span class="comment">        user.setAddress("恒河");</span></span><br><span class="line"><span class="comment">        user.setBirthday(new Date());</span></span><br><span class="line"><span class="comment">        user.setSex("男");</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        userMapper.update(user);*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除</span></span><br><span class="line">        userMapper.delete(<span class="number">58</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-Mybatis注解多表操作"><a href="#2-3-Mybatis注解多表操作" class="headerlink" title="2.3 Mybatis注解多表操作"></a>2.3 Mybatis注解多表操作</h3><p>之前我们在映射文件中通过配置<code>&lt;resultMap&gt;、&lt;association&gt;、&lt;collection&gt;</code>来实现复杂关系映射。</p><p>使用注解开发后，我们可以使用<code>@Results、@Result，@One、@Many</code>注解组合完成复杂关系的配置。</p><p><img data-src="/img/%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E7%9B%B8%E5%85%B3%E6%B3%A8%E8%A7%A31.png" alt="多表查询相关注解1"></p><p><img data-src="/img/%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E7%9B%B8%E5%85%B3%E6%B3%A8%E8%A7%A32.png" alt="多表查询相关注解2"></p><h4 id="2-3-1-一对一查询基于注解开发"><a href="#2-3-1-一对一查询基于注解开发" class="headerlink" title="2.3.1 一对一查询基于注解开发"></a>2.3.1 一对一查询基于注解开发</h4><blockquote><p>需求：查询一个订单，与此同时查询出该订单所属的用户</p></blockquote><p><strong>一对一查询语句</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> orders <span class="keyword">where</span> <span class="keyword">id</span> = <span class="comment">#&#123;id&#125;;</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`user`</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="comment">#&#123;订单的uid&#125;;</span></span><br></pre></td></tr></table></figure><ul><li>OrderMapper接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一对一关系查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from orders where id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">Order <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>UserMapper接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询用户信息及其下属的订单信息角色信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from user where id = #&#123;id&#125;"</span>)</span><br><span class="line"><span class="function">User <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>注解嵌套</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一对一关系查询</span></span><br><span class="line"><span class="comment">     * 查询订单id及所属用户</span></span><br><span class="line"><span class="comment">     * 根据订单id查询订单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from orders where id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(&#123;</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"id"</span>,property = <span class="string">"id"</span>,id = <span class="keyword">true</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"ordertime"</span>,property = <span class="string">"ordertime"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"money"</span>,property = <span class="string">"money"</span>),</span><br><span class="line">        <span class="comment">// 一对一关系</span></span><br><span class="line">            <span class="meta">@Result</span>(property = <span class="string">"user"</span>,column = <span class="string">"uid"</span>,one = <span class="meta">@One</span>(select = <span class="string">"com.xxx.mapper.UserMapper.findById"</span>))</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function">Order <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">//工具类获取sqlSession对象</span></span><br><span class="line">    SqlSession sqlSession = MybatisUtils.openSession();</span><br><span class="line">    </span><br><span class="line">    OrderMapper mapper = sqlSession.getMapper(OrderMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    Order order = mapper.findById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(order);</span><br><span class="line">    <span class="comment">//工具类释放资源</span></span><br><span class="line">    MybatisUtils.releases(sqlSession);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-2-一对多基于注解开发"><a href="#2-3-2-一对多基于注解开发" class="headerlink" title="2.3.2 一对多基于注解开发"></a>2.3.2 一对多基于注解开发</h4><blockquote><p>需求：查询一个用户，与此同时查询出该用户具有的订单</p></blockquote><p><strong>一对多查询语句</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`user`</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="comment">#&#123;id&#125;;</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> orders <span class="keyword">where</span> uid = <span class="comment">#&#123;用户id&#125;;</span></span><br></pre></td></tr></table></figure><ul><li>UserMapper接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一对多嵌套查询</span></span><br><span class="line"><span class="meta">@Select</span>(<span class="string">"SELECT * FROM `user` WHERE id = #&#123;id&#125;"</span>)</span><br><span class="line"><span class="meta">@Results</span>(&#123;</span><br><span class="line">    <span class="meta">@Result</span>(column = <span class="string">"id"</span>,property = <span class="string">"id"</span>,id=<span class="keyword">true</span>),</span><br><span class="line">    <span class="meta">@Result</span>(column = <span class="string">"birthday"</span>,property =<span class="string">"birthday"</span> ),</span><br><span class="line">    <span class="meta">@Result</span>(column = <span class="string">"sex"</span>,property =<span class="string">"sex"</span> ),</span><br><span class="line">    <span class="meta">@Result</span>(column = <span class="string">"username"</span>,property =<span class="string">"username"</span> ),</span><br><span class="line">    <span class="meta">@Result</span>(column = <span class="string">"address"</span>,property =<span class="string">"address"</span> ),</span><br><span class="line">    <span class="comment">// &lt;collection property="orderList" column="id" select="com.xxx.mapper.OrderMapper.findByUid"&gt;&lt;/collection&gt;</span></span><br><span class="line">    <span class="meta">@Result</span>(property = <span class="string">"orderList"</span>,column = <span class="string">"id"</span>,many = <span class="meta">@Many</span>(select = <span class="string">"com.xxx.mapper.OrderMapper.findByUid"</span>))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findByIdWithOrderList</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一对多测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//工具类获取sqlSession对象</span></span><br><span class="line">    SqlSession sqlSession = MybatisUtils.openSession();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建代理对象</span></span><br><span class="line">    UserMapper userMapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">// 根据用户id查询</span></span><br><span class="line">    User user = userMapper.findByIdWithOrderList(<span class="number">41</span>);</span><br><span class="line">    System.out.println(user.getOrderList());</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//工具类释放资源</span></span><br><span class="line">    MybatisUtils.releases(sqlSession);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-3-多对多基于注解开发"><a href="#2-3-3-多对多基于注解开发" class="headerlink" title="2.3.3 多对多基于注解开发"></a>2.3.3 多对多基于注解开发</h4><blockquote><p>需求：查询一个用户，与此同时查询该用户所具有的角色列表</p></blockquote><p><strong>sql语句</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="comment">#&#123;id&#125;</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">role</span> r <span class="keyword">INNER</span> <span class="keyword">JOIN</span> user_role ur <span class="keyword">ON</span> r.id = ur.rid <span class="keyword">WHERE</span> uid = <span class="comment">#&#123;用户id&#125;</span></span><br></pre></td></tr></table></figure><p>代码示例</p><ul><li>UserMapper接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select</span>(<span class="string">"select * from user where id = #&#123;id&#125;"</span>)</span><br><span class="line"><span class="meta">@Results</span>(&#123;</span><br><span class="line">    <span class="meta">@Result</span>(column = <span class="string">"id"</span>,property = <span class="string">"id"</span>,id = <span class="keyword">true</span>),</span><br><span class="line">    <span class="meta">@Result</span>(column = <span class="string">"username"</span>, property = <span class="string">"username"</span>),</span><br><span class="line">    <span class="meta">@Result</span>(column = <span class="string">"birthday"</span>, property = <span class="string">"birthday"</span>),</span><br><span class="line">    <span class="meta">@Result</span>(column = <span class="string">"sex"</span>, property = <span class="string">"sex"</span>),</span><br><span class="line">    <span class="meta">@Result</span>(column = <span class="string">"address"</span>, property = <span class="string">"address"</span>),</span><br><span class="line">    <span class="meta">@Result</span>(property = <span class="string">"orderList"</span>, column = <span class="string">"id"</span>, many = <span class="meta">@Many</span>(select = <span class="string">"com.xxx.mapper.OrderMapper.findByUid"</span>)),</span><br><span class="line">    <span class="meta">@Result</span>(property = <span class="string">"roleList"</span>, column = <span class="string">"id"</span>, many = <span class="meta">@Many</span>(select = <span class="string">"com.xxx.mapper.RoleMapper.findByUid"</span>))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="function">User <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>RoleMapper接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据用户id查询角色信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> 角色列表</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Select</span>(<span class="string">"SELECT * FROM role r INNER JOIN user_role ur ON r.id = ur.rid WHERE uid = #&#123;uid&#125;"</span>)</span><br><span class="line"><span class="function">List&lt;Role&gt; <span class="title">findByUid</span><span class="params">(Integer uid)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 多对多(一对多)关系查询</span></span><br><span class="line"><span class="comment">     * 查询用户及其角色信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">//工具类获取sqlSession对象</span></span><br><span class="line">    SqlSession sqlSession = MybatisUtils.openSession();</span><br><span class="line">   </span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    User user = mapper.findById(<span class="number">41</span>);</span><br><span class="line">    System.out.println(user.getRoleList());</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//工具类释放资源</span></span><br><span class="line">    MybatisUtils.releases(sqlSession);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-注解配置延迟加载"><a href="#2-4-注解配置延迟加载" class="headerlink" title="2.4 注解配置延迟加载"></a>2.4 注解配置延迟加载</h3><blockquote><p>不管是一对一、一对多还是多对多 ，在注解配置中都有fetchType的属性</p></blockquote><p>在<code>@One</code>和<code>@Many</code>注解中都提供了一个属性，<code>fetchType</code>，是一个枚举类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> FetchType &#123;</span><br><span class="line">    LAZY,</span><br><span class="line">    EAGER,</span><br><span class="line">    DEFAULT;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">FetchType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三种取值分别的含义是：</p><ul><li><code>fetchType = FetchType.LAZY</code>：表示懒加载</li><li><code>fetchType = FetchType.EAGER</code>：表示立即加载</li><li><code>fetchType = FetchType.DEFAULT</code>：表示使用全局配置</li></ul><p>代码示例：</p><h3 id="2-5-二级缓存"><a href="#2-5-二级缓存" class="headerlink" title="2.5 二级缓存"></a>2.5 二级缓存</h3><blockquote><p>在Mapper接口中使用注解配置二级缓存即可</p><ul><li>在接口上加上注解<code>@CacheNamespace</code>即可，表示使用了二级缓存<ul><li><strong>注意：要在对应的实体上实现序列化接口</strong></li></ul></li></ul></blockquote><p><strong>代码示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CacheNamespace</span><span class="comment">//使用二级缓存</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure><h2 id="三、Mybatis实现分页查询"><a href="#三、Mybatis实现分页查询" class="headerlink" title="三、Mybatis实现分页查询"></a>三、Mybatis实现分页查询</h2><blockquote><p>实现B/S架构的分页查询</p></blockquote><p>如何实现分页查询</p><ul><li><p>物理分页：可以操作数据库实现（MySQL的limit关键字）</p></li><li><p>逻辑分页：查询所有，通过java代码进行逻辑分页【已经淘汰】</p></li></ul><p>MySQL分页回顾：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- sql语法</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表名 <span class="keyword">limit</span> 开始索引,每页显示个数;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 模拟百度分页，共19条记录，一页展示5条</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 第一页</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表名 <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">5</span>;</span><br><span class="line"><span class="comment">-- 第二页</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表名 <span class="keyword">limit</span> <span class="number">5</span>,<span class="number">5</span>;</span><br><span class="line"><span class="comment">-- 第三页</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表名 <span class="keyword">limit</span> <span class="number">10</span>,<span class="number">5</span>;</span><br><span class="line"><span class="comment">-- 第四页</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表名 <span class="keyword">limit</span> <span class="number">15</span>,<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 索引公式</span></span><br><span class="line">index  = (当前页-1) × 每页显示个数;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 明确一个事项：当前页和每页显示的个数都是由用户(前端)提供的</span></span><br></pre></td></tr></table></figure><p>分页查询流程分析：</p><p><img data-src="/img/%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2%E5%88%86%E6%9E%90.png" alt="分页查询分析"></p><ul><li>创建分页对象PageBean</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageBean</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer totalCount;<span class="comment">// 总记录数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer totalPage;<span class="comment">// 总页数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;E&gt; list;<span class="comment">// 结果集</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer pageNum;<span class="comment">// 当前页</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer pageSize;<span class="comment">// 每页个数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>代码执行流程分析</li></ul><p><img data-src="/img/BS%E7%BB%93%E6%9E%84%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90.png" alt="BS结构分页查询流程分析"></p><ul><li>service层核心代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分页查询</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PageBean&lt;Route&gt; <span class="title">findByPage</span><span class="params">(Integer pageNum, Integer pageSize)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取RouteDao代理对象</span></span><br><span class="line">    SqlSession sqlSession = MyBatisUtils.openSession();</span><br><span class="line">    RouteMapper routeMapper = sqlSession.getMapper(RouteMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">// 1.创建PageBean对象</span></span><br><span class="line">    PageBean&lt;Route&gt; pb = <span class="keyword">new</span> PageBean&lt;&gt;();</span><br><span class="line">    <span class="comment">// 2.封装当前页和每页个数</span></span><br><span class="line">    pb.setPageNum(pageNum);</span><br><span class="line">    pb.setPageSize(pageSize);</span><br><span class="line">    <span class="comment">// 3.调用dao查询总记录数并封装</span></span><br><span class="line">    Integer totalCount = routeMapper.findCount();</span><br><span class="line">    pb.setTotalCount(totalCount);</span><br><span class="line">    <span class="comment">// 4.计算总页数并封装</span></span><br><span class="line">    Integer totalPage = (<span class="keyword">int</span>) Math.ceil(totalCount * <span class="number">1.0</span> / pageSize);</span><br><span class="line">    pb.setTotalPage(totalPage);</span><br><span class="line">    <span class="comment">// 5.计算开始索引</span></span><br><span class="line">    Integer index = (pageNum - <span class="number">1</span>) * pageSize;</span><br><span class="line">    <span class="comment">// 6.调用dao查询结果集并封装</span></span><br><span class="line">    List&lt;Route&gt; list = routeMapper.findList(index,pageSize);</span><br><span class="line">    pb.setList(list);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放资源</span></span><br><span class="line">    MyBatisUtils.release(sqlSession);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7.返回PageBean对象</span></span><br><span class="line">    <span class="keyword">return</span> pb;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>dao层核心(接口+映射文件)<ul><li>接口</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询总记录数</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> 总记录数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">Integer <span class="title">findTotalCount</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 分页查询</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> start    起始索引</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> pageSize 每页显示条数</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> 查询到的线路信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">List&lt;Route&gt; <span class="title">findByPage</span><span class="params">(@Param(<span class="string">"start"</span>)</span> Integer start, @<span class="title">Param</span><span class="params">(<span class="string">"pageSize"</span>)</span> Integer pageSize)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.xxx.dao.RouteDao"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findTotalCount"</span> <span class="attr">resultType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">        select count(*) from tab_route</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByPage"</span> <span class="attr">resultType</span>=<span class="string">"com.xxx.domain.Route"</span>&gt;</span></span><br><span class="line">        select * from tab_route limit #&#123;start&#125;,#&#123;pageSize&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四、Lombok和MybatisX插件"><a href="#四、Lombok和MybatisX插件" class="headerlink" title="四、Lombok和MybatisX插件"></a>四、Lombok和MybatisX插件</h2><p>Lombok提供了简单的注解的形式来帮助我们简化消除一些必须有但显得很臃肿的 java 代码。通过使用对应的注解，可以在编译源码的时候生成对应的方法，所以不会影响任何运行效率。</p><h3 id="4-1-Lombok"><a href="#4-1-Lombok" class="headerlink" title="4.1 Lombok"></a>4.1 Lombok</h3><h4 id="4-1-1-常用的-Lombok注解"><a href="#4-1-1-常用的-Lombok注解" class="headerlink" title="4.1.1 常用的 Lombok注解"></a>4.1.1 常用的 Lombok注解</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>@Data：注解在类上；生成toString，getter/setter</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>@NoArgsConstructor：注解在类上；为类提供一个无参的构造方法</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>@AllArgsConstructor：注解在类上；为类提供一个全参的构造方法</span><br></pre></td></tr></table></figure><h4 id="4-1-2-IDEA配置Lombok插件支持"><a href="#4-1-2-IDEA配置Lombok插件支持" class="headerlink" title="4.1.2 IDEA配置Lombok插件支持"></a>4.1.2 IDEA配置Lombok插件支持</h4><ul><li>在设置setting 中找到plugins。在检索框中检索lombok：</li></ul><p><img data-src="/img/Lombok%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%851.png" alt="Lombok插件安装1"></p><ul><li>在setting中找到下图界面，在右侧红框出打钩：</li></ul><p><img data-src="/img/Lombok%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%852.png" alt="Lombok插件安装2"></p><ul><li>重启idea，大功告成</li></ul><blockquote><p>注意：使用Lombok注解生成get/set等方法也需要导入Lombok的jar包才可以使用</p></blockquote><p><strong>Lombok注解使用演示：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Route</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rid;<span class="comment">//线路id</span></span><br><span class="line">    <span class="keyword">private</span> String rname;<span class="comment">//线路名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;<span class="comment">//线路价格</span></span><br><span class="line">    <span class="keyword">private</span> String rimage;<span class="comment">//线路图</span></span><br><span class="line">    <span class="keyword">private</span> String routeIntroduce;<span class="comment">// 线路描述</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-MybatisX"><a href="#4-2-MybatisX" class="headerlink" title="4.2 MybatisX"></a>4.2 MybatisX</h3><p>MybatisX 是一款基于 IDEA 的快速开发插件，为效率而生，主要功能有：</p><ul><li>Java 与 XML 调回跳转</li><li>Mapper 方法自动生成 XML</li></ul><h4 id="4-2-1-IDEA配置MybatisX插件支持"><a href="#4-2-1-IDEA配置MybatisX插件支持" class="headerlink" title="4.2.1 IDEA配置MybatisX插件支持"></a>4.2.1 IDEA配置MybatisX插件支持</h4><p>打开 IDEA，进入 File -&gt; Settings -&gt; Plugins，搜索 <code>mybatisx</code> 并安装</p><blockquote><p>IDEA2018操作</p></blockquote><p><img data-src="/img/MybatisX%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85.png" alt="MybatisX插件安装"></p><blockquote><p>安装完后重启IDEA</p></blockquote><h4 id="4-2-2-项目中使用"><a href="#4-2-2-项目中使用" class="headerlink" title="4.2.2 项目中使用"></a>4.2.2 项目中使用</h4><p><img data-src="/img/%E4%BD%BF%E7%94%A8MybatisX.gif" alt="使用MybatisX"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一-核心配置文件总结&quot;&gt;&lt;a href=&quot;#一-核心配置文件总结&quot; class=&quot;headerlink&quot; title=&quot;一  核心配置文件总结&quot;&gt;&lt;/a&gt;一  核心配置文件总结&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;SqlMapConfig.xml 中配置的内容和顺序如下：&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;properties（属性）&lt;/li&gt;
&lt;li&gt;settings（全局配置参数）&lt;/li&gt;
&lt;li&gt;typeAliases（类型别名）&lt;/li&gt;
&lt;li&gt;typeHandlers（类型处理器）&lt;/li&gt;
&lt;li&gt;objectFactory（对象工厂）&lt;/li&gt;
&lt;li&gt;plugins（插件）&lt;/li&gt;
&lt;li&gt;environments（数据库环境配置）&lt;ul&gt;
&lt;li&gt;environment（数据库环境子属性对象）&lt;ul&gt;
&lt;li&gt;transactionManager（事务管理）&lt;/li&gt;
&lt;li&gt;dataSource（数据源）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;mappers（映射器）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="框架" scheme="http://sunmoon.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Mybatis" scheme="http://sunmoon.com/categories/%E6%A1%86%E6%9E%B6/Mybatis/"/>
    
    
      <category term="Mybatis注解" scheme="http://sunmoon.com/tags/Mybatis%E6%B3%A8%E8%A7%A3/"/>
    
      <category term="分页查询" scheme="http://sunmoon.com/tags/%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/"/>
    
      <category term="Lombok插件" scheme="http://sunmoon.com/tags/Lombok%E6%8F%92%E4%BB%B6/"/>
    
      <category term="MybatisX插件" scheme="http://sunmoon.com/tags/MybatisX%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis高级</title>
    <link href="http://sunmoon.com/2020/09/07/Mybatis%E9%AB%98%E7%BA%A7/"/>
    <id>http://sunmoon.com/2020/09/07/Mybatis%E9%AB%98%E7%BA%A7/</id>
    <published>2020-09-07T14:17:41.000Z</published>
    <updated>2020-09-07T14:24:38.577Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Mybatis动态SQL"><a href="#一、Mybatis动态SQL" class="headerlink" title="一、Mybatis动态SQL"></a>一、Mybatis动态SQL</h2><h3 id="1-1-什么是动态SQL"><a href="#1-1-什么是动态SQL" class="headerlink" title="1.1 什么是动态SQL"></a>1.1 什么是动态SQL</h3><p><strong>先来看一个需求</strong></p><p>把页面输入的id和username封装到User实体中，并作为条件查询数据库</p><p><img data-src="/img/%E5%8A%A8%E6%80%81sql_%E9%9C%80%E6%B1%82.png" alt="动态sql_需求"></p><p><strong>这个时候我们执行的sql就有多种可能</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- 如果id和用户名不为空</span><br><span class="line">select * from user where id&#x3D; #&#123;id&#125; and username &#x3D; #&#123;username&#125;</span><br><span class="line"></span><br><span class="line">-- 如果只有id</span><br><span class="line">select * from user where id&#x3D; #&#123;id&#125; </span><br><span class="line"></span><br><span class="line">-- 如果只有用户名</span><br><span class="line">select * from user where username &#x3D; #&#123;username&#125;</span><br><span class="line"></span><br><span class="line">-- 如果id和用户名都为空</span><br><span class="line">select * from user</span><br></pre></td></tr></table></figure><blockquote><p>像上面这样, 根据传入的参数不同, 需要执行的SQL的结构就会不同，这就是动态SQL。</p></blockquote><a id="more"></a><h3 id="1-2-环境搭建"><a href="#1-2-环境搭建" class="headerlink" title="1.2 环境搭建"></a>1.2 环境搭建</h3><p><img data-src="/img/%E5%8A%A8%E6%80%81sql_%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.png" alt="动态sql_环境搭建"></p><h3 id="1-3-if-和-where-标签"><a href="#1-3-if-和-where-标签" class="headerlink" title="1.3 if 和 where 标签"></a>1.3 if 和 where 标签</h3><p>需求：页面输入的id和username封装到User实体中，并作为条件查询数据库</p><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// if 和 where 标签</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByIf</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    if和where标签</span></span><br><span class="line"><span class="comment">    if：条件判断</span></span><br><span class="line"><span class="comment">    where：动态where,如果没有条件where关键字不在拼接，如果有条件去掉第一个 and | or</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByIf"</span> <span class="attr">parameterType</span>=<span class="string">"com.sun.domain.User"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">   <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id != null"</span>&gt;</span></span><br><span class="line">           and id = #&#123;id&#125;</span><br><span class="line">       <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username != null"</span>&gt;</span></span><br><span class="line">           and username = #&#123;username&#125;</span><br><span class="line">       <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SqlSession sqlSession;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取sqlSession</span></span><br><span class="line">        sqlSession = MyBatisUtils.openSession();</span><br><span class="line">        <span class="comment">// 2.创建UserMapper代理对象</span></span><br><span class="line">        userMapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 4.释放资源</span></span><br><span class="line">        MyBatisUtils.release(sqlSession);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// if和where标签测试</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 封装条件</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">         user.setId(<span class="number">41</span>);</span><br><span class="line">         user.setUsername(<span class="string">"老王"</span>);</span><br><span class="line">        <span class="comment">// 执行查询</span></span><br><span class="line">        List&lt;User&gt; list = userMapper.findByIf(user);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>if标签用于单分支条件判断, 相当于java中的if关键字</span><br><span class="line"><span class="bullet">* </span>where标签作用</span><br><span class="line"><span class="code">当where代码块中的条件都不成立的时候, where不在拼接</span></span><br><span class="line"><span class="code">当where代码块中的条件至少有一个成立的时候，它会帮你去掉第一个and|or</span></span><br></pre></td></tr></table></figure><h3 id="1-4-if-和-set-标签"><a href="#1-4-if-和-set-标签" class="headerlink" title="1.4 if 和 set 标签"></a>1.4 if 和 set 标签</h3><blockquote><p>需求：动态更新user表数据，如果该属性有值就更新，没有值不做处理</p></blockquote><h4 id="接口-1"><a href="#接口-1" class="headerlink" title="接口"></a>接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// set标签</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateIf</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="映射-1"><a href="#映射-1" class="headerlink" title="映射"></a>映射</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--set标签：帮你去掉最后一个逗号 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateIf"</span> <span class="attr">parameterType</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">    update user</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username != null"</span>&gt;</span></span><br><span class="line">            username = #&#123;username&#125; ,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"birthday != null"</span>&gt;</span></span><br><span class="line">            birthday = #&#123;birthday&#125; ,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"sex != null"</span>&gt;</span></span><br><span class="line">            sex = #&#123;sex&#125; ,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"address != null"</span>&gt;</span></span><br><span class="line">            address = #&#123;address&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// set标签</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">// 封装修改的内容</span></span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">54</span>);</span><br><span class="line">    user.setUsername(<span class="string">"西西"</span>);</span><br><span class="line">    <span class="comment">// 执行更新</span></span><br><span class="line">    userMapper.updateIf(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>set标签作用</span><br><span class="line"><span class="code">在代码块之前加入一个set关键字  </span></span><br><span class="line"><span class="code">删除掉代码块中的最后一个逗号（,）</span></span><br></pre></td></tr></table></figure><h3 id="1-5-foreach标签"><a href="#1-5-foreach标签" class="headerlink" title="1.5 foreach标签"></a>1.5 foreach标签</h3><blockquote><p>需求：根据多个id查询，user对象的集合</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">in</span> (<span class="number">41</span>,<span class="number">43</span>,<span class="number">46</span>);</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span><span class="xml"><span class="tag">&lt;<span class="name">foreach</span>&gt;</span></span>标签用于遍历集合，它的属性：</span><br><span class="line"></span><br><span class="line"><span class="code">    • collection：代表要遍历的集合元素</span></span><br><span class="line"></span><br><span class="line"><span class="code">    • open：代表语句的开始部分</span></span><br><span class="line"></span><br><span class="line"><span class="code">    • close：代表结束部分</span></span><br><span class="line"></span><br><span class="line"><span class="code">    • item：代表遍历集合的每个元素，生成的变量名</span></span><br><span class="line"></span><br><span class="line"><span class="code">    • sperator：代表分隔符</span></span><br></pre></td></tr></table></figure><p><strong>传递参数三种场景</strong></p><ul><li>普通list集合</li><li>普通array数组</li><li>实体中list | array</li></ul><h4 id="接口-2"><a href="#接口-2" class="headerlink" title="接口"></a>接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通list集合</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findList</span><span class="params">(List&lt;Integer&gt; ids)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通array数组</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findArray</span><span class="params">(Integer[] ids)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实体中的list属性</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findQueryVo</span><span class="params">(QueryVo queryVo)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="映射-2"><a href="#映射-2" class="headerlink" title="映射"></a>映射</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    foreach之普通list</span></span><br><span class="line"><span class="comment">        collection属性值只能为：list | collection</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findList"</span> <span class="attr">parameterType</span>=<span class="string">"list"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">    select * from user where id in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    foreach之普通array</span></span><br><span class="line"><span class="comment">        collection属性值只能为：array</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findArray"</span> <span class="attr">parameterType</span>=<span class="string">"integer"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">    select * from user where id in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"array"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    foreach之实体中的list属性</span></span><br><span class="line"><span class="comment">          collection属性值只能为：list属性的名称</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findQueryVo"</span> <span class="attr">parameterType</span>=<span class="string">"com.sun.domain.QueryVo"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">     select * from user where id in</span><br><span class="line">     <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"ids"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">         #&#123;id&#125;</span><br><span class="line">     <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// foreach标签</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 普通list</span></span><br><span class="line">  <span class="comment">/*  List&lt;Integer&gt; ids = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">    ids.add(41);</span></span><br><span class="line"><span class="comment">    ids.add(43);</span></span><br><span class="line"><span class="comment">    ids.add(46);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    List&lt;User&gt; resultList1 = userMapper.findList(ids);</span></span><br><span class="line"><span class="comment">    System.out.println(resultList1);*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 普通array</span></span><br><span class="line">  <span class="comment">/*  Integer[] ids = &#123;41, 43, 46&#125;;</span></span><br><span class="line"><span class="comment">    List&lt;User&gt; userList = userMapper.findArray(ids);</span></span><br><span class="line"><span class="comment">    System.out.println(userList);*/</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实体list属性</span></span><br><span class="line">    QueryVo queryVo = <span class="keyword">new</span> QueryVo();</span><br><span class="line">    List&lt;Integer&gt; ids = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    ids.add(<span class="number">41</span>);</span><br><span class="line">    ids.add(<span class="number">43</span>);</span><br><span class="line">    ids.add(<span class="number">46</span>);</span><br><span class="line">    queryVo.setIds(ids);</span><br><span class="line">    List&lt;User&gt; userList = userMapper.findQueryVo(queryVo);</span><br><span class="line">    System.out.println(userList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* foreach标签的collection属性根据传输的java类型不同而采用不同的值</span><br><span class="line">集合：list   </span><br><span class="line">数组：array   </span><br><span class="line">实体：实体的属性名</span><br></pre></td></tr></table></figure><h3 id="1-6-SQL片段"><a href="#1-6-SQL片段" class="headerlink" title="1.6 SQL片段"></a>1.6 SQL片段</h3><p><strong>应用场景</strong></p><p>映射文件中可将重复的 sql 提取出来，使用时用 include 引用即可，最终达到 sql 复用的目的</p><p><img data-src="/img/sql%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5.png" alt="sql代码片段"></p><h2 id="二、Mybatis多表查询"><a href="#二、Mybatis多表查询" class="headerlink" title="二、Mybatis多表查询"></a>二、Mybatis多表查询</h2><h3 id="2-1-表关系回顾"><a href="#2-1-表关系回顾" class="headerlink" title="2.1 表关系回顾"></a>2.1 表关系回顾</h3><blockquote><p>在关系型数据库中，表关系分为以下三种：</p></blockquote><p><img data-src="/img/%E8%A1%A8%E5%85%B3%E7%B3%BB%E5%9B%9E%E9%A1%BE.png" alt="表关系回顾"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>在数据库中表建立关系：通过主外键关联</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>在java中实体建立关系：通过属性关联</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>在mybatis框架中把（多对一）也可以理解（一对一）</span><br><span class="line"><span class="code">在订单的角度去看，一个订单只从属于一个用户</span></span><br></pre></td></tr></table></figure><blockquote><p>本次讲解多表查询</p></blockquote><p><img data-src="/img/mybatis%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2.png" alt="mybatis多表查询"></p><h3 id="2-2-环境搭建"><a href="#2-2-环境搭建" class="headerlink" title="2.2 环境搭建"></a>2.2 环境搭建</h3><h4 id="①-创建java模块，导入jar包"><a href="#①-创建java模块，导入jar包" class="headerlink" title="① 创建java模块，导入jar包"></a>① 创建java模块，导入jar包</h4><p><img data-src="/img/%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.png" alt="多表查询环境搭建"></p><h4 id="②-准备三个实体类"><a href="#②-准备三个实体类" class="headerlink" title="② 准备三个实体类"></a>② 准备三个实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 订单实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date ordertime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 角色</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String role_name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String role_desc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="③-创建三个接口和三个映射文件"><a href="#③-创建三个接口和三个映射文件" class="headerlink" title="③ 创建三个接口和三个映射文件"></a>③ 创建三个接口和三个映射文件</h4><p><img data-src="/img/%E4%B8%89%E4%B8%AA%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6.png" alt="三个接口和映射文件"></p><h4 id="④-创建mybatis核心文件"><a href="#④-创建mybatis核心文件" class="headerlink" title="④ 创建mybatis核心文件"></a>④ 创建mybatis核心文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置存储数据库信息的配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbc.properties"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置连接池--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--配置数据库基本四项--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis_db"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置映射--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/sun/mapper/UserMapper.xml"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/sun/mapper/OrderMapper.xml"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/sun/mapper/RoleMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="⑤-导入MybatisUtils工具类"><a href="#⑤-导入MybatisUtils工具类" class="headerlink" title="⑤ 导入MybatisUtils工具类"></a>⑤ 导入MybatisUtils工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Mybatis工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Sunmoon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory factory;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> InputStream in;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//加载mybatis核心配置文件</span></span><br><span class="line">            in = Resources.getResourceAsStream(<span class="string">"mybatis-config.xml"</span>);</span><br><span class="line">            <span class="comment">// 构建者创建工厂</span></span><br><span class="line">            factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"mybatis初始化异常"</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 释放资源</span></span><br><span class="line">            <span class="keyword">if</span> (in!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    in.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供获取连接会话的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 会话对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">openSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> factory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提交事务归还连接的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session 会话对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">releases</span><span class="params">(SqlSession session)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (session!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            session.commit();</span><br><span class="line">            session.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="⑥-抽取测试基类"><a href="#⑥-抽取测试基类" class="headerlink" title="⑥ 抽取测试基类"></a>⑥ 抽取测试基类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Mapper单元测试基类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> SqlSession sqlSession;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        sqlSession = MybatisUtils.openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MybatisUtils.releases(sqlSession);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-一对一"><a href="#2-3-一对一" class="headerlink" title="2.3 一对一"></a>2.3 一对一</h3><p>一对一查询模型**</p><p>用户表和订单表的关系为，一个用户有多个订单，一个订单只从属于一个用户</p><blockquote><p>需求：查询一个订单，与此同时查询出该订单所属的用户</p></blockquote><p><img data-src="/img/%E4%B8%80%E5%AF%B9%E4%B8%80%E6%9F%A5%E8%AF%A2%E6%A8%A1%E5%9E%8B.png" alt="一对一查询模型"></p><p><strong>sql语句</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> orders o <span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`user`</span> u <span class="keyword">ON</span> o.<span class="string">`uid`</span> = u.<span class="string">`id`</span> <span class="keyword">WHERE</span> o.id = <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="①-实体和表映射关系"><a href="#①-实体和表映射关系" class="headerlink" title="① 实体和表映射关系"></a>① 实体和表映射关系</h4><p><img data-src="/img/%E4%B8%80%E5%AF%B9%E4%B8%80_%E5%AE%9E%E4%BD%93%E5%92%8C%E8%A1%A8%E6%98%A0%E5%B0%84%E5%85%B3%E7%B3%BB.png" alt="一对一_实体和表映射关系"></p><h4 id="②-创建Order实体"><a href="#②-创建Order实体" class="headerlink" title="② 创建Order实体"></a>② 创建Order实体</h4><p><img data-src="/img/order%E5%AE%9E%E4%BD%93.png" alt="order实体"></p><h4 id="③-编写OrderMapper接口"><a href="#③-编写OrderMapper接口" class="headerlink" title="③ 编写OrderMapper接口"></a>③ 编写OrderMapper接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据订单id查询，返回订单信息和用户信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Order <span class="title">findByIdWithUser</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="④-编写OrderMapper-xml"><a href="#④-编写OrderMapper-xml" class="headerlink" title="④ 编写OrderMapper.xml"></a>④ 编写OrderMapper.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.sun.mapper.OrderMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--一对一手动映射封装--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"orderBaseMap"</span> <span class="attr">type</span>=<span class="string">"com.sun.domain.Order"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"ordertime"</span> <span class="attr">property</span>=<span class="string">"ordertime"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"money"</span> <span class="attr">property</span>=<span class="string">"money"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            association 一对一关联封装</span></span><br><span class="line"><span class="comment">                property="user" 订单中的实体属性名</span></span><br><span class="line"><span class="comment">                javaType="com.itheima.domain.User" 该属性对应的java类型</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span> <span class="attr">javaType</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     一对一查询</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByIdWithUser"</span> <span class="attr">parameterType</span>=<span class="string">"integer"</span> <span class="attr">resultMap</span>=<span class="string">"orderBaseMap"</span>&gt;</span></span><br><span class="line">        SELECT * FROM orders o INNER JOIN `user` u ON o.`uid` = u.`id` WHERE o.id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="⑤-测试"><a href="#⑤-测试" class="headerlink" title="⑤ 测试"></a>⑤ 测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderMapperTest</span> <span class="keyword">extends</span> <span class="title">BaseMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一对一测试</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 获取代理对象</span></span><br><span class="line">        OrderMapper orderMapper = sqlSession.getMapper(OrderMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询</span></span><br><span class="line">        Order order = orderMapper.findByIdWithUser(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(order);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="⑥-一对一代码关系图"><a href="#⑥-一对一代码关系图" class="headerlink" title="⑥ 一对一代码关系图"></a>⑥ 一对一代码关系图</h4><p><img data-src="/img/%E4%B8%80%E5%AF%B9%E4%B8%80%E4%BB%A3%E7%A0%81%E5%85%B3%E7%B3%BB%E5%9B%BE.png" alt="一对一代码关系图"></p><h3 id="2-4-一对多"><a href="#2-4-一对多" class="headerlink" title="2.4 一对多"></a>2.4 一对多</h3><p><strong>一对多查询模型</strong></p><p>用户表和订单表的关系为，一个用户有多个订单，一个订单只从属于一个用户</p><blockquote><p>需求：查询一个用户，与此同时查询出该用户具有的订单</p></blockquote><p><img data-src="/img/%E4%B8%80%E5%AF%B9%E5%A4%9A%E6%9F%A5%E8%AF%A2%E6%A8%A1%E5%9E%8B.png" alt="一对多查询模型"></p><p><strong>sql语句</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *,o.id <span class="keyword">AS</span> <span class="keyword">oid</span> <span class="keyword">FROM</span> <span class="string">`user`</span> u <span class="keyword">INNER</span> <span class="keyword">JOIN</span> orders o <span class="keyword">ON</span> u.<span class="string">`id`</span> = o.<span class="string">`uid`</span> <span class="keyword">WHERE</span> u.id = <span class="number">41</span></span><br></pre></td></tr></table></figure><h4 id="①-实体和表映射关系-1"><a href="#①-实体和表映射关系-1" class="headerlink" title="① 实体和表映射关系"></a>① 实体和表映射关系</h4><p> <img data-src="/img/%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%AE%9E%E4%BD%93%E5%92%8C%E8%A1%A8%E7%9A%84%E6%98%A0%E5%B0%84%E6%83%AF%E6%80%A7%E7%B3%BB.png" alt="一对多实体和表的映射惯性系"></p><h4 id="②-编写User实体"><a href="#②-编写User实体" class="headerlink" title="② 编写User实体"></a>② 编写User实体</h4><p><img data-src="/img/User%E5%AE%9E%E4%BD%93.png" alt="User实体"></p><h4 id="③-编写UserMapper接口"><a href="#③-编写UserMapper接口" class="headerlink" title="③ 编写UserMapper接口"></a>③ 编写UserMapper接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一对多根据用户id，查询用户和订单信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findByIdWithOrderList</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="④-编写UserMapper-xml"><a href="#④-编写UserMapper-xml" class="headerlink" title="④ 编写UserMapper.xml"></a>④ 编写UserMapper.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.sun.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--一对多手动映射--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userWithOrderMap"</span> <span class="attr">type</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            一对多封装使用collection标签</span></span><br><span class="line"><span class="comment">                property="orderList" 是user实体的订单属集合名称</span></span><br><span class="line"><span class="comment">                ofType="com.itheima.domain.Order" 封装数据的java类型，可以简单理解为list的泛型</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"orderList"</span> <span class="attr">ofType</span>=<span class="string">"com.sun.domain.Order"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"oid"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"ordertime"</span> <span class="attr">property</span>=<span class="string">"ordertime"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"money"</span> <span class="attr">property</span>=<span class="string">"money"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        一对多根据用户id，查询用户和订单信息</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByIdWithOrderList"</span> <span class="attr">parameterType</span>=<span class="string">"integer"</span> <span class="attr">resultMap</span>=<span class="string">"userWithOrderMap"</span>&gt;</span></span><br><span class="line">        SELECT *,o.id AS oid FROM `user` u INNER JOIN orders o ON u.`id` = o.`uid` WHERE u.id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="⑤-测试-1"><a href="#⑤-测试-1" class="headerlink" title="⑤ 测试"></a>⑤ 测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> <span class="keyword">extends</span> <span class="title">BaseMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一对多测试</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 创建代理对象</span></span><br><span class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 根据用户id查询</span></span><br><span class="line">        User user = userMapper.findByIdWithOrderList(<span class="number">41</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="⑥-一对多代码关系图"><a href="#⑥-一对多代码关系图" class="headerlink" title="⑥ 一对多代码关系图"></a>⑥ 一对多代码关系图</h4><p><img data-src="/img/%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%85%B3%E7%B3%BB%E4%BB%A3%E7%A0%81%E5%9B%BE.png" alt="一对多关系代码图"></p><h3 id="2-5-多对多"><a href="#2-5-多对多" class="headerlink" title="2.5 多对多"></a>2.5 多对多</h3><p><strong>多对多查询的模型</strong></p><p>用户表和角色表的关系为，一个用户有多个角色，一个角色被多个用户使用</p><blockquote><p>需求：查询用户同时查询出该用户的所有角色</p></blockquote><p><img data-src="/img/%E5%A4%9A%E5%AF%B9%E5%A4%9A%E6%9F%A5%E8%AF%A2%E6%A8%A1%E5%9E%8B.png" alt="多对多查询模型"></p><p><strong>注意：多对多实现代码流程跟一对多是一样的，只是sql语句稍有不同</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`user`</span> u</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> user_role ur <span class="keyword">ON</span> u.id = ur.<span class="string">`uid`</span> <span class="comment">-- 用户关联中间表</span></span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">role</span> r <span class="keyword">ON</span> ur.<span class="string">`rid`</span> = r.<span class="string">`id`</span> <span class="comment">-- 中间表关联用户</span></span><br><span class="line"><span class="keyword">WHERE</span> u.id = <span class="number">41</span></span><br></pre></td></tr></table></figure><h4 id="①-实体和表映射关系-2"><a href="#①-实体和表映射关系-2" class="headerlink" title="① 实体和表映射关系"></a>① 实体和表映射关系</h4><p>  <img data-src="/img/%E5%A4%9A%E5%AF%B9%E5%A4%9A%E5%AE%9E%E4%BD%93%E5%92%8C%E8%A1%A8%E7%9A%84%E6%98%A0%E5%B0%84%E5%85%B3%E7%B3%BB.png" alt="多对多实体和表的映射关系"></p><h4 id="②-编写User和Role实体"><a href="#②-编写User和Role实体" class="headerlink" title="② 编写User和Role实体"></a>② 编写User和Role实体</h4><p> <img data-src="/img/User%E5%AE%9E%E4%BD%932.png" alt="User实体2"></p><h4 id="③-编写UserMapper接口-1"><a href="#③-编写UserMapper接口-1" class="headerlink" title="③ 编写UserMapper接口"></a>③ 编写UserMapper接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 多对多根据用户id，查询用户和角色信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findByIdWithRoleList</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="④-编写UserMapper-xml-1"><a href="#④-编写UserMapper-xml-1" class="headerlink" title="④ 编写UserMapper.xml"></a>④ 编写UserMapper.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    多对多手动映射封装</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userWithRoleMap"</span> <span class="attr">type</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        多对多手动映射使用collection标签</span></span><br><span class="line"><span class="comment">            property="roleList" 需要封装实体list集合的属性名</span></span><br><span class="line"><span class="comment">            ofType="com.itheima.domain.Role" 该集合泛型的java类型</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"roleList"</span> <span class="attr">ofType</span>=<span class="string">"com.sun.domain.Role"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"rid"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"role_name"</span> <span class="attr">property</span>=<span class="string">"role_name"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"role_desc"</span> <span class="attr">property</span>=<span class="string">"role_desc"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    多对多根据用户id，查询用户和角色信息</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByIdWithRoleList"</span> <span class="attr">parameterType</span>=<span class="string">"integer"</span> <span class="attr">resultMap</span>=<span class="string">"userWithRoleMap"</span>&gt;</span></span><br><span class="line">    SELECT * FROM `user` u</span><br><span class="line">        INNER JOIN user_role ur ON u.id = ur.`uid`</span><br><span class="line">        INNER JOIN role r ON ur.`rid` = r.`id`</span><br><span class="line">        WHERE u.id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="⑤-测试-2"><a href="#⑤-测试-2" class="headerlink" title="⑤ 测试"></a>⑤ 测试</h4><p> <img data-src="/img/%E5%A4%9A%E5%AF%B9%E5%A4%9A%E6%B5%8B%E8%AF%95.png" alt="多对多测试"></p><h3 id="2-6-知识小结"><a href="#2-6-知识小结" class="headerlink" title="2.6 知识小结"></a>2.6 知识小结</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">一对一配置：使用<span class="xml"><span class="tag">&lt;<span class="name">resultMap</span>&gt;</span></span>+<span class="xml"><span class="tag">&lt;<span class="name">association</span>&gt;</span></span>做配置</span><br><span class="line"><span class="code">association:</span></span><br><span class="line"><span class="code">    property：关联的实体属性名</span></span><br><span class="line"><span class="code">    javaType：关联的实体类型</span></span><br><span class="line"></span><br><span class="line">一对多配置：使用<span class="xml"><span class="tag">&lt;<span class="name">resultMap</span>&gt;</span></span>+<span class="xml"><span class="tag">&lt;<span class="name">collection</span>&gt;</span></span>做配置</span><br><span class="line"><span class="code">collection：</span></span><br><span class="line"><span class="code">property：关联的集合属性名</span></span><br><span class="line"><span class="code">ofType：关联的集合泛型类型</span></span><br><span class="line"></span><br><span class="line">多对多配置：使用<span class="xml"><span class="tag">&lt;<span class="name">resultMap</span>&gt;</span></span>+<span class="xml"><span class="tag">&lt;<span class="name">collection</span>&gt;</span></span>做配置</span><br><span class="line"><span class="code">collection：</span></span><br><span class="line"><span class="code">property：关联的集合属性名</span></span><br><span class="line"><span class="code">ofType：关联的集合泛型类型</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">多对多的配置跟一对多很相似，难度在于SQL语句的编写。</span><br></pre></td></tr></table></figure><h2 id="三、Mybatis嵌套查询"><a href="#三、Mybatis嵌套查询" class="headerlink" title="三、Mybatis嵌套查询"></a>三、Mybatis嵌套查询</h2><h3 id="3-1-什么是嵌套查询"><a href="#3-1-什么是嵌套查询" class="headerlink" title="3.1 什么是嵌套查询"></a>3.1 什么是嵌套查询</h3><p>嵌套查询就是将原来多表查询中的联合查询语句拆成单个表的查询，再使用mybatis的语法嵌套在一起。</p><blockquote><p><strong>需求</strong>：查询一个订单，与此同时查询出该订单所属的用户</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>关联查询：</span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">SELECT * FROM orders o INNER JOIN `user` u ON o.`uid` = u.`id` WHERE o.id = 1 </span></span><br><span class="line"><span class="bullet">* </span>缺点</span><br><span class="line"><span class="code">sql语句比较复杂</span></span><br><span class="line"><span class="code">多表查询会产生笛卡尔积</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>嵌套查询：</span><br><span class="line"><span class="code">1.先根据订单id查询订单信息</span></span><br><span class="line"><span class="code">select * from orders where id = 1;</span></span><br><span class="line"><span class="code">2.根据订单信息中的uid再去查询用户信息</span></span><br><span class="line"><span class="code">select * from user where id = 41;</span></span><br><span class="line"><span class="code">3.再由mybatis进行组合嵌套</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>优点</span><br><span class="line"><span class="code">sql写起来简单</span></span><br><span class="line"><span class="code">嵌套查询不会出现笛卡尔积</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>缺点</span><br><span class="line"><span class="code">需要编写二个单体映射封装，在进行嵌套组合，步骤较为繁琐</span></span><br></pre></td></tr></table></figure><h3 id="3-2-环境搭建"><a href="#3-2-环境搭建" class="headerlink" title="3.2 环境搭建"></a>3.2 环境搭建</h3><p>复制多表查询的模块，清除测试和mapper.xml文件中的代码即可…</p><h3 id="3-3-一对一"><a href="#3-3-一对一" class="headerlink" title="3.3 一对一"></a>3.3 一对一</h3><blockquote><p>需求：查询一个订单，与此同时查询出该订单所属的用户</p></blockquote><p><strong>sql语句</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1.先根据订单id查询订单信息</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> orders <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 2.根据订单信息中的uid再去查询用户信息</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">41</span>;</span><br><span class="line"><span class="comment">-- 3.再由mybatis进行组合嵌套</span></span><br></pre></td></tr></table></figure><h4 id="①-OrderMapper接口"><a href="#①-OrderMapper接口" class="headerlink" title="① OrderMapper接口"></a>① OrderMapper接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一对一嵌套查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Order <span class="title">findByIdWithUser</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="②-OrderMapper映射"><a href="#②-OrderMapper映射" class="headerlink" title="② OrderMapper映射"></a>② OrderMapper映射</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.sun.mapper.OrderMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--一对一嵌套查询--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByIdWithUser"</span> <span class="attr">parameterType</span>=<span class="string">"integer"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.Order"</span>&gt;</span></span><br><span class="line">        select * from orders where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="③-UserMapper接口"><a href="#③-UserMapper接口" class="headerlink" title="③ UserMapper接口"></a>③ UserMapper接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据用户id查询用户信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="④-UserMapper映射"><a href="#④-UserMapper映射" class="headerlink" title="④ UserMapper映射"></a>④ UserMapper映射</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.sun.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"integer"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">        select * from user where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="⑤-mybatis嵌套组合"><a href="#⑤-mybatis嵌套组合" class="headerlink" title="⑤ mybatis嵌套组合"></a>⑤ mybatis嵌套组合</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.sun.mapper.OrderMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--一对一嵌套查询手动封装--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"orderWithUserMap"</span> <span class="attr">type</span>=<span class="string">"com.sun.domain.Order"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"ordertime"</span> <span class="attr">property</span>=<span class="string">"ordertime"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"money"</span> <span class="attr">property</span>=<span class="string">"money"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            一对一嵌套</span></span><br><span class="line"><span class="comment">                 column="uid" 就是订单表的查询结果 uid作为条件</span></span><br><span class="line"><span class="comment">                 select="com.sun.mapper.UserMapper.findById" 去调用（UserMapper中findById方法）实现单表查询</span></span><br><span class="line"><span class="comment">                 最后通过association组合嵌套，封装到 Order实体中user属性汇总</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">select</span>=<span class="string">"com.sun.mapper.UserMapper.findById"</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--一对一嵌套查询--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByIdWithUser"</span> <span class="attr">parameterType</span>=<span class="string">"integer"</span> <span class="attr">resultMap</span>=<span class="string">"orderWithUserMap"</span>&gt;</span></span><br><span class="line">        select * from orders where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="⑥-测试"><a href="#⑥-测试" class="headerlink" title="⑥ 测试"></a>⑥ 测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderMapperTest</span> <span class="keyword">extends</span> <span class="title">BaseMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一对一测试</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 获取代理对象</span></span><br><span class="line">        OrderMapper orderMapper = sqlSession.getMapper(OrderMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询</span></span><br><span class="line">        Order order = orderMapper.findByIdWithUser(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(order);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="⑦-嵌套关系"><a href="#⑦-嵌套关系" class="headerlink" title="⑦ 嵌套关系"></a>⑦ 嵌套关系</h4><p><img data-src="/img/%E5%B5%8C%E5%A5%97%E5%85%B3%E7%B3%BB_%E4%B8%80%E5%AF%B9%E4%B8%80.png" alt="嵌套关系_一对一"></p><h3 id="3-4-一对多"><a href="#3-4-一对多" class="headerlink" title="3.4 一对多"></a>3.4 一对多</h3><blockquote><p>需求：查询一个用户，与此同时查询出该用户具有的订单</p></blockquote><p><strong>sql语句</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1.先根据用户id查询用户信息</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">41</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2.再根据用户id查询订单列表</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> orders <span class="keyword">where</span> uid = <span class="number">41</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3.最后由mybatis进行组合嵌套</span></span><br></pre></td></tr></table></figure><h4 id="①-UserMapper接口"><a href="#①-UserMapper接口" class="headerlink" title="① UserMapper接口"></a>① UserMapper接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一对多嵌套查询</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findByIdWithOrderList</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="②-UserMapper映射"><a href="#②-UserMapper映射" class="headerlink" title="② UserMapper映射"></a>② UserMapper映射</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByIdWithOrderList"</span> <span class="attr">parameterType</span>=<span class="string">"integer"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">    select * from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="③-OrderMapper接口"><a href="#③-OrderMapper接口" class="headerlink" title="③ OrderMapper接口"></a>③ OrderMapper接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据uid查询订单列表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Order&gt; <span class="title">findByUid</span><span class="params">(Integer uid)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="④-OrderMapper映射"><a href="#④-OrderMapper映射" class="headerlink" title="④ OrderMapper映射"></a>④ OrderMapper映射</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByUid"</span> <span class="attr">parameterType</span>=<span class="string">"integer"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.Order"</span>&gt;</span></span><br><span class="line">    select * from orders where uid = #&#123;uid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="⑤-mybatis嵌套组合-1"><a href="#⑤-mybatis嵌套组合-1" class="headerlink" title="⑤ mybatis嵌套组合"></a>⑤ mybatis嵌套组合</h4><blockquote><p>用户嵌套订单，UserMapper.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--一对多手动映射封装--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userWithOrderMap"</span> <span class="attr">type</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        一对多嵌套</span></span><br><span class="line"><span class="comment">             column="id" 用户表查询结果作为条件</span></span><br><span class="line"><span class="comment">             select="com.sun.mapper.OrderMapper.findByUid"  调用（OerderMapper中findByUid方法）查询 订单列表</span></span><br><span class="line"><span class="comment">             最后由mybatis组合嵌套封装到 user实体的orderList属性中</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"orderList"</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">select</span>=<span class="string">"com.sun.mapper.OrderMapper.findByUid"</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByIdWithOrderList"</span> <span class="attr">parameterType</span>=<span class="string">"integer"</span> <span class="attr">resultMap</span>=<span class="string">"userWithOrderMap"</span>&gt;</span></span><br><span class="line">    select * from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="⑥-测试-1"><a href="#⑥-测试-1" class="headerlink" title="⑥ 测试"></a>⑥ 测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> <span class="keyword">extends</span> <span class="title">BaseMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一对多测试</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 创建代理对象</span></span><br><span class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 根据用户id查询</span></span><br><span class="line">        User user = userMapper.findByIdWithOrderList(<span class="number">41</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="⑦-嵌套关系-1"><a href="#⑦-嵌套关系-1" class="headerlink" title="⑦ 嵌套关系"></a>⑦ 嵌套关系</h4><p> <img data-src="/img/%E5%B5%8C%E5%A5%97%E5%85%B3%E7%B3%BB_%E4%B8%80%E5%AF%B9%E5%A4%9A.png" alt="嵌套关系_一对多"></p><h3 id="3-5-多对多"><a href="#3-5-多对多" class="headerlink" title="3.5 多对多"></a>3.5 多对多</h3><blockquote><p>需求：查询用户同时查询出该用户的所有角色</p></blockquote><blockquote><p>站在用户一方，此用户具有多个角色，实现步骤和一对多一样</p></blockquote><p><strong>sql语句</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1.先根据用户id查询用户信息</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">41</span>;</span><br><span class="line"><span class="comment">-- 2.再根据用户id查询角色列表</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">role</span> r <span class="keyword">inner</span> <span class="keyword">join</span> user_role ur <span class="keyword">on</span> ur.rid = r.id <span class="keyword">where</span> ur.uid= <span class="number">41</span>;</span><br><span class="line"><span class="comment">-- 3.最后由mybatis进行组合嵌套</span></span><br></pre></td></tr></table></figure><h4 id="①-UserMapper接口-1"><a href="#①-UserMapper接口-1" class="headerlink" title="① UserMapper接口"></a>① UserMapper接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多对多嵌套查询</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findByIdWithRoleList</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="②-UserMapper映射-1"><a href="#②-UserMapper映射-1" class="headerlink" title="② UserMapper映射"></a>② UserMapper映射</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByIdWithRoleList"</span> <span class="attr">parameterType</span>=<span class="string">"integer"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">    select * from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="③-RoleMapper接口"><a href="#③-RoleMapper接口" class="headerlink" title="③ RoleMapper接口"></a>③ RoleMapper接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RoleMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据用户id查询角色列表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">findByUid</span><span class="params">(Integer uid)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="④-RoleMapper映射"><a href="#④-RoleMapper映射" class="headerlink" title="④ RoleMapper映射"></a>④ RoleMapper映射</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.sun.mapper.RoleMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByUid"</span> <span class="attr">parameterType</span>=<span class="string">"integer"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.Role"</span>&gt;</span></span><br><span class="line">        select * from role r inner join user_role ur on ur.rid = r.id where ur.uid= #&#123;uid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="⑤-mybatis嵌套组合-2"><a href="#⑤-mybatis嵌套组合-2" class="headerlink" title="⑤ mybatis嵌套组合"></a>⑤ mybatis嵌套组合</h4><blockquote><p>用户嵌套角色，定位UserMapper.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--多对多嵌套手动封装--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userWithRoleMap"</span> <span class="attr">type</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--多对多嵌套</span></span><br><span class="line"><span class="comment">        column="id" 用户表查询结果作为条件</span></span><br><span class="line"><span class="comment">        select="com.sun.mapper.RoleMapper.findByUid" 去调用（RoleMapper中findByUid方法） 查询角色列表</span></span><br><span class="line"><span class="comment">        最后由mybatis组合嵌套，封装到User实体的roleList属性中</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"roleList"</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">select</span>=<span class="string">"com.sun.mapper.RoleMapper.findByUid"</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByIdWithRoleList"</span> <span class="attr">parameterType</span>=<span class="string">"integer"</span> <span class="attr">resultMap</span>=<span class="string">"userWithRoleMap"</span>&gt;</span></span><br><span class="line">    select * from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="⑥-测试-2"><a href="#⑥-测试-2" class="headerlink" title="⑥ 测试"></a>⑥ 测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多对多测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 创建代理对象</span></span><br><span class="line">    UserMapper userMapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">// 根据用户id查询</span></span><br><span class="line">    User user = userMapper.findByIdWithRoleList(<span class="number">41</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="⑦-嵌套关系-2"><a href="#⑦-嵌套关系-2" class="headerlink" title="⑦ 嵌套关系"></a>⑦ 嵌套关系</h4><p> <img data-src="/img/%E5%B5%8C%E5%A5%97%E5%85%B3%E7%B3%BB_%E5%A4%9A%E5%AF%B9%E5%A4%9A.png" alt="嵌套关系_多对多"></p><h2 id="3-6-知识小结"><a href="#3-6-知识小结" class="headerlink" title="3.6 知识小结"></a>3.6 知识小结</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">一对一配置：使用<span class="xml"><span class="tag">&lt;<span class="name">resultMap</span>&gt;</span></span>+<span class="xml"><span class="tag">&lt;<span class="name">association</span>&gt;</span></span>做配置，通过column条件，执行select查询</span><br><span class="line"></span><br><span class="line">一对多配置：使用<span class="xml"><span class="tag">&lt;<span class="name">resultMap</span>&gt;</span></span>+<span class="xml"><span class="tag">&lt;<span class="name">collection</span>&gt;</span></span>做配置，通过column条件，执行select查询</span><br><span class="line"></span><br><span class="line">多对多配置：使用<span class="xml"><span class="tag">&lt;<span class="name">resultMap</span>&gt;</span></span>+<span class="xml"><span class="tag">&lt;<span class="name">collection</span>&gt;</span></span>做配置，通过column条件，执行select查询</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">总结一句话：二张表数据过大就使用嵌套查询，否则还是关联查询足以....</span><br></pre></td></tr></table></figure><h2 id="四-MyBatis加载策略"><a href="#四-MyBatis加载策略" class="headerlink" title="四 MyBatis加载策略"></a>四 MyBatis加载策略</h2><h3 id="4-1-什么是延迟加载？"><a href="#4-1-什么是延迟加载？" class="headerlink" title="4.1 什么是延迟加载？"></a>4.1 什么是延迟加载？</h3><p><strong>问题</strong></p><p>​    通过前面的学习，我们已经掌握了Mybatis中一对一，一对多，多对多关系的配置及实现，可以实现对象的关联查询。实际开发过程中很多时候我们并不需要总是在加载用户信息时就一定要加载他的订单信息。此时就是我们所说的延迟加载。</p><p><strong>举个栗子</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>在一对多中，当我们有一个用户，它有个100个订单</span><br><span class="line"><span class="code">在查询用户的时候，要不要把关联的订单查出来？</span></span><br><span class="line"><span class="code">在查询订单的时候，要不要把关联的用户查出来？</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>回答</span><br><span class="line"><span class="code">在查询用户时，用户下的订单应该是，什么时候用，什么时候查询。【延迟（懒）加载】</span></span><br><span class="line"><span class="code">在查询订单时，订单所属的用户信息应该是随着订单一起查询出来。</span></span><br></pre></td></tr></table></figure><p><strong>延迟加载</strong></p><p>​    就是在需要用到数据时才进行加载，不需要用到数据时就不加载数据。延迟加载也称懒加载。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>在多表中：</span><br><span class="line"><span class="code">一对多，多对多：通常情况下采用延迟加载</span></span><br><span class="line"><span class="code">一对一：通常情况下采用立即加载</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>注意：</span><br><span class="line"><span class="code">延迟加载是基于嵌套查询来实现的</span></span><br></pre></td></tr></table></figure><h3 id="4-2-配置延迟加载"><a href="#4-2-配置延迟加载" class="headerlink" title="4.2 配置延迟加载"></a>4.2 配置延迟加载</h3><h4 id="4-2-1-全局延迟加载"><a href="#4-2-1-全局延迟加载" class="headerlink" title="4.2.1 全局延迟加载"></a>4.2.1 全局延迟加载</h4><p> <img data-src="/img/%E5%85%A8%E5%B1%80%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE.png" alt="全局延迟加载配置"></p><blockquote><p>在Mybatis的核心配置文件中可以使用setting标签开启全局的加载策略</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--settings设置--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--开启全局延迟加载功能了--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-2-2-局部延迟加载"><a href="#4-2-2-局部延迟加载" class="headerlink" title="4.2.2 局部延迟加载"></a>4.2.2 局部延迟加载</h4><blockquote><p>​    在Mapper映射文件中在association和collection标签中都有一个fetchType属性，通过修改它的值，可以修改局部的加载策略</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fetchType 属性</span><br><span class="line">eager 立即加载</span><br><span class="line">lazy  延迟加载</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">fetchType</span>=<span class="string">"eager"</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">collection</span> <span class="attr">fetchType</span>=<span class="string">"eager"</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：局部延迟加载优先级高于全局延迟加载，通常是为了覆盖全局延迟来设置的方式</p></blockquote><h3 id="4-3-触发加载"><a href="#4-3-触发加载" class="headerlink" title="4.3  触发加载"></a>4.3  触发加载</h3><p> <img data-src="/img/%E8%A7%A6%E5%8F%91%E5%8A%A0%E8%BD%BD.png" alt="触发加载"></p><blockquote><p>​    大家在配置了延迟加载策略后，发现即使没有调用关联对象的任何方法，但是在你调用当前对象的equals、clone、hashCode、toString方法时也会触发关联对象的查询。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--settings设置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启全局延迟加载功能了--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--关闭四个默认触发关联查询的功能，只有调用getOrderList()时才会触发关联查询--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadTriggerMethods"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">setting</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="五-MyBatis缓存"><a href="#五-MyBatis缓存" class="headerlink" title="五 MyBatis缓存"></a>五 MyBatis缓存</h2><h3 id="5-1-什么是缓存"><a href="#5-1-什么是缓存" class="headerlink" title="5.1 什么是缓存"></a>5.1 什么是缓存</h3><p> <img data-src="/img/%E7%BC%93%E5%AD%98.png" alt="mybatis一级缓存"></p><blockquote><p>缓存就是计算机内存中的一块区域</p></blockquote><p><strong>为什么要使用缓存吗？</strong></p><blockquote><p>为了提高查询效率，减少磁盘IO，降低数据库访问压力</p></blockquote><p><strong>什么样的数据适合做缓存？</strong></p><blockquote><p>经常访问但又不经常修改的数据</p></blockquote><p>缓存是用来提高查询效率的，所有的持久层框架基本上都有缓存机制<br>Mybatis也提供了缓存策略，分为一级缓存，二级缓存</p><h3 id="5-2-一级缓存"><a href="#5-2-一级缓存" class="headerlink" title="5.2 一级缓存"></a>5.2 一级缓存</h3><h4 id="5-1-1-介绍"><a href="#5-1-1-介绍" class="headerlink" title="5.1.1 介绍"></a>5.1.1 介绍</h4><p>MyBatis一级缓存是：SqlSession级别的缓存，默认开启</p><p><img data-src="/img/mybatis%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98%E4%BB%8B%E7%BB%8D.png" alt="mybatis一级缓存介绍"></p><h4 id="5-1-2-验证"><a href="#5-1-2-验证" class="headerlink" title="5.1.2 验证"></a>5.1.2 验证</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试一级缓存</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtils.openSession();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第一次查询</span></span><br><span class="line">    UserMapper userMapper1 = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    User user1 = userMapper1.findById(<span class="number">41</span>);</span><br><span class="line">    System.out.println(user1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 手动清除缓存</span></span><br><span class="line">    sqlSession.clearCache();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二次查询</span></span><br><span class="line">    UserMapper userMapper2 = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    User user2 = userMapper2.findById(<span class="number">41</span>);</span><br><span class="line">    System.out.println(user2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭sqlSession</span></span><br><span class="line">    MyBatisUtils.release(sqlSession);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-1-3-分析"><a href="#5-1-3-分析" class="headerlink" title="5.1.3 分析"></a>5.1.3 分析</h4><p>一级缓存是SqlSession范围的缓存，不同的sqlsession之间的缓存区域是互相不影响的，执行SqlSession的C（增加）U（更新）D（删除）操作，或者调用clearCache()、commit()、close()方法，都会清空缓存</p><p> <img data-src="/img/mybatis%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98.png" alt="mybatis一级缓存"></p><h3 id="5-3-二级缓存"><a href="#5-3-二级缓存" class="headerlink" title="5.3 二级缓存"></a>5.3 二级缓存</h3><h4 id="5-2-1-介绍"><a href="#5-2-1-介绍" class="headerlink" title="5.2.1 介绍"></a>5.2.1 介绍</h4><p>​    MyBatis的二级缓存虽然是默认开启的，但需要在映射文件中配置<code>&lt;cache/&gt;</code>标签才能使用，而且要求实体类的必须实现序列化接口</p><p>  <img data-src="/img/mybatis%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98%E4%BB%8B%E7%BB%8D.png" alt="mybatis二级缓存介绍"></p><h4 id="5-2-2-验证"><a href="#5-2-2-验证" class="headerlink" title="5.2.2 验证"></a>5.2.2 验证</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试二级缓存</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟第一个用户</span></span><br><span class="line">    SqlSession sqlSession1 = MyBatisUtils.openSession();</span><br><span class="line">    UserMapper userMapper1 = sqlSession1.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    User user1 = userMapper1.findById(<span class="number">41</span>);</span><br><span class="line">    System.out.println(user1);</span><br><span class="line">    MyBatisUtils.release(sqlSession1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟第二个用户</span></span><br><span class="line">    SqlSession sqlSession2 = MyBatisUtils.openSession();</span><br><span class="line">    UserMapper userMapper2 = sqlSession2.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    User user2 = userMapper2.findById(<span class="number">41</span>);</span><br><span class="line">    System.out.println(user2);</span><br><span class="line">    MyBatisUtils.release(sqlSession2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-1-3-分析-1"><a href="#5-1-3-分析-1" class="headerlink" title="5.1.3 分析"></a>5.1.3 分析</h4><p>​    二级缓存是mapper映射级别的缓存，多个SqlSession去操作同一个Mapper映射的sql语句，多个SqlSession可以共用二级缓存，二级缓存是跨SqlSession的。</p><p>二级缓存相比一级缓存的范围更大（按namespace来划分）</p><p> <img data-src="/img/mybatis%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98.png" alt="mybatis二级缓存"></p><h3 id="5-4-知识小结"><a href="#5-4-知识小结" class="headerlink" title="5.4 知识小结"></a>5.4 知识小结</h3><p><img data-src="/img/Mybatis%E7%BC%93%E5%AD%98%E7%9F%A5%E8%AF%86%E5%B0%8F%E7%BB%93.png" alt="Mybatis缓存知识小结"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>mybatis的缓存，都不需要我们手动存储和获取数据。mybatis自动维护的。</span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>使用mybatis，如果是中小型项目，使用自带缓存的机制是可以满足需求的。如果是大型（分布式）项目，mybatis的缓存灵活性不足，需要使用第三方的缓存技术（redis）解决问题。</span><br></pre></td></tr></table></figure><p> <img data-src="/img/Mybatis%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98.png" alt="Mybatis二级缓存存在的问题"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、Mybatis动态SQL&quot;&gt;&lt;a href=&quot;#一、Mybatis动态SQL&quot; class=&quot;headerlink&quot; title=&quot;一、Mybatis动态SQL&quot;&gt;&lt;/a&gt;一、Mybatis动态SQL&lt;/h2&gt;&lt;h3 id=&quot;1-1-什么是动态SQL&quot;&gt;&lt;a href=&quot;#1-1-什么是动态SQL&quot; class=&quot;headerlink&quot; title=&quot;1.1 什么是动态SQL&quot;&gt;&lt;/a&gt;1.1 什么是动态SQL&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;先来看一个需求&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;把页面输入的id和username封装到User实体中，并作为条件查询数据库&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&quot;/img/%E5%8A%A8%E6%80%81sql_%E9%9C%80%E6%B1%82.png&quot; alt=&quot;动态sql_需求&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这个时候我们执行的sql就有多种可能&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-- 如果id和用户名不为空&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;select * from user where id&amp;#x3D; #&amp;#123;id&amp;#125; and username &amp;#x3D; #&amp;#123;username&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-- 如果只有id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;select * from user where id&amp;#x3D; #&amp;#123;id&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-- 如果只有用户名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;select * from user where username &amp;#x3D; #&amp;#123;username&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-- 如果id和用户名都为空&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;select * from user&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;像上面这样, 根据传入的参数不同, 需要执行的SQL的结构就会不同，这就是动态SQL。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="框架" scheme="http://sunmoon.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Mybatis" scheme="http://sunmoon.com/categories/%E6%A1%86%E6%9E%B6/Mybatis/"/>
    
    
      <category term="多表查询" scheme="http://sunmoon.com/tags/%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/"/>
    
      <category term="持久层框架" scheme="http://sunmoon.com/tags/%E6%8C%81%E4%B9%85%E5%B1%82%E6%A1%86%E6%9E%B6/"/>
    
      <category term="mybatis" scheme="http://sunmoon.com/tags/mybatis/"/>
    
      <category term="嵌套查询" scheme="http://sunmoon.com/tags/%E5%B5%8C%E5%A5%97%E6%9F%A5%E8%AF%A2/"/>
    
      <category term="缓存" scheme="http://sunmoon.com/tags/%E7%BC%93%E5%AD%98/"/>
    
      <category term="动态sql" scheme="http://sunmoon.com/tags/%E5%8A%A8%E6%80%81sql/"/>
    
      <category term="加载策略" scheme="http://sunmoon.com/tags/%E5%8A%A0%E8%BD%BD%E7%AD%96%E7%95%A5/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis基础</title>
    <link href="http://sunmoon.com/2020/09/06/Mybatis%E5%9F%BA%E7%A1%80/"/>
    <id>http://sunmoon.com/2020/09/06/Mybatis%E5%9F%BA%E7%A1%80/</id>
    <published>2020-09-06T14:09:55.000Z</published>
    <updated>2020-09-06T14:14:44.314Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、框架简介"><a href="#一、框架简介" class="headerlink" title="一、框架简介"></a>一、框架简介</h2><p><img data-src="/img/%E6%A1%86%E6%9E%B6%E7%AE%80%E4%BB%8B.png" alt="框架简介"></p><a id="more"></a><h3 id="1-1-回顾三层架构"><a href="#1-1-回顾三层架构" class="headerlink" title="1.1 回顾三层架构"></a>1.1 回顾三层架构</h3><p>在java语言中开发软件的架构是三层架构，之所以流行是因为有着清晰的任务划分。一般包括以下三层：  </p><ul><li>持久层：主要完成与数据库相关的操作，即对数据库的增删改查。  </li><li>业务层：主要根据功能需求完成业务逻辑的定义和实现。  </li><li>表现层：主要完成与软件用户的交互，需要有交互界面（UI）。  </li></ul><h3 id="1-2-框架"><a href="#1-2-框架" class="headerlink" title="1.2 框架"></a>1.2 框架</h3><p><strong>什么是框架？</strong></p><ul><li>把重复的代码工作抽取出来，让程序员把精力专注在核心的业务代码实现上。</li><li>框架可以理解为半成品软件，框架做好以后，接下来在它基础上进行开发  </li></ul><p><strong>为什么学习框架？</strong></p><ul><li>因为学了它之后，我们的开发确实变得简单。</li><li>企业开发中都在用，不会它，你就无法正常进入企业进行开发工作。</li></ul><p><strong>java中常见的框架？</strong></p><p>Java世界中的框架非常的多，每一个框架都是为了解决某一部分或某些问题而存在的。</p><ul><li><p>持久层框架：专注于解决数据持久化的框架。常用的有mybatis、hibernate、spring jdbc等等。</p></li><li><p>表现层框架：专注于解决与用户交互的框架。常见的有struts2、spring mvc等等。</p></li><li><p>全栈框架: 能在各层都给出解决方案的框架。比较著名的就是spring。</p></li></ul><p><strong>这么多框架，我们怎么选择呢?</strong></p><p>我们以企业中最常用的组合为准来学习Spring + Spring MVC + mybatis（SSM）</p><h2 id="二、Mybatis简介"><a href="#二、Mybatis简介" class="headerlink" title="二、Mybatis简介"></a>二、Mybatis简介</h2><h3 id="2-1-ORM概述"><a href="#2-1-ORM概述" class="headerlink" title="2.1 ORM概述"></a>2.1 ORM概述</h3><p><img data-src="/img/ORM%E6%A6%82%E8%BF%B0.png" alt="ORM概述"></p><p>ORM（Object Relational Mapping）对象关系映射，是一个针对持久层的理论思想。</p><ul><li>Object：对象，这里指的是java类</li><li>Relational：关系，这里指的是数据表</li><li>Mapping：映射，这里指的是java类和数据表之间建立的对应关系</li></ul><p><strong>ORM用来解决什么问题呢?</strong></p><p>一句话说，就是ORM思想可以让我们以面向对象的形式操作数据库</p><p> <strong>常见的ORM框架有哪些？</strong></p><ul><li>Hibernate（全自动ORM，是JPA实现的框架）</li><li>Mybatis（半自动ORM，实现自动封装实体、但是需要开发人员编写sql）</li></ul><h3 id="2-2-Mybatis介绍"><a href="#2-2-Mybatis介绍" class="headerlink" title="2.2 Mybatis介绍"></a>2.2 Mybatis介绍</h3><p><strong>历史</strong></p><ul><li>Mybatis本是apache的一个开源项目，名为iBatis。</li><li>2010年这个项目由apache迁移到了google，并且改名为Mybatis。</li><li>2013年迁移到Github。</li></ul><p><strong>简介</strong></p><p>Mybatis官网地址：<a href="http://www.mybatis.org/mybatis-3/" target="_blank" rel="noopener">http://www.mybatis.org/mybatis-3/</a> </p><ul><li><p>Mybatis是一款优秀的持久层框架，它不需要像JDBC那样去写复杂代码、手动设置参数、繁琐的处理结果集</p></li><li><p>它采用简单的XML配置 + 接口方法的形式实现对数据库的增删改查，使得让程序员只关注sql本身</p></li></ul><blockquote><p>小结：</p><ul><li>Mybatis可以是我们不需要再去编写JDBC繁琐的步骤了，通过<strong>配置文件+接口</strong>方式就可以实现CRUD，我们开发只需要关注sql</li></ul></blockquote><h2 id="三、Mybatis快速入门"><a href="#三、Mybatis快速入门" class="headerlink" title="三、Mybatis快速入门"></a>三、Mybatis快速入门</h2><p><strong>需求</strong></p><blockquote><p>查询数据库user表的所有记录，封装到User对象中。</p></blockquote><h3 id="3-1-开发步骤"><a href="#3-1-开发步骤" class="headerlink" title="3.1 开发步骤"></a>3.1 开发步骤</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>准备mybatis_db和user表</span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>创建java模块，并导入相关jar包</span><br><span class="line"></span><br><span class="line"><span class="bullet">3. </span>创建User实体</span><br><span class="line"></span><br><span class="line"><span class="bullet">4. </span>编写映射文件 UserMapper.xml</span><br><span class="line"></span><br><span class="line"><span class="bullet">5. </span>编写核心文件 SqlMapConfig.xml （mybatis-config.xml）</span><br><span class="line"></span><br><span class="line"><span class="bullet">6. </span>编写测试</span><br></pre></td></tr></table></figure><h3 id="3-2-代码实现"><a href="#3-2-代码实现" class="headerlink" title="3.2 代码实现"></a>3.2 代码实现</h3><h4 id="Ⅰ-准备数据库和user表"><a href="#Ⅰ-准备数据库和user表" class="headerlink" title="Ⅰ 准备数据库和user表"></a>Ⅰ 准备数据库和user表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">create database if not exists &#96;mybatis_db&#96;;</span><br><span class="line">USE &#96;mybatis_db&#96;;</span><br><span class="line">CREATE TABLE &#96;user&#96; (</span><br><span class="line">  &#96;id&#96; int(11) NOT NULL auto_increment,</span><br><span class="line">  &#96;username&#96; varchar(32) NOT NULL COMMENT &#39;用户名称&#39;,</span><br><span class="line">  &#96;birthday&#96; datetime default NULL COMMENT &#39;生日&#39;,</span><br><span class="line">  &#96;sex&#96; varchar(10) default NULL COMMENT &#39;性别&#39;,</span><br><span class="line">  &#96;address&#96; varchar(256) default NULL COMMENT &#39;地址&#39;,</span><br><span class="line">  PRIMARY KEY  (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">insert into &#96;user&#96;(&#96;id&#96;,&#96;username&#96;,&#96;birthday&#96;,&#96;sex&#96;,&#96;address&#96;) </span><br><span class="line">values (41,&#39;老王&#39;,&#39;2019-05-27 17:47:08&#39;,&#39;男&#39;,&#39;北京&#39;),</span><br><span class="line">(42,&#39;王小二&#39;,&#39;2019-03-02 15:09:37&#39;,&#39;女&#39;,&#39;北京金燕龙&#39;),</span><br><span class="line">(43,&#39;老李&#39;,&#39;2019-03-04 11:34:34&#39;,&#39;女&#39;,&#39;北京修正&#39;),</span><br><span class="line">(45,&#39;张三&#39;,&#39;2019-03-04 12:04:06&#39;,&#39;男&#39;,&#39;北京金燕龙&#39;),</span><br><span class="line">(46,&#39;王小二&#39;,&#39;2018-09-07 17:37:26&#39;,&#39;男&#39;,&#39;北京TBD&#39;),</span><br><span class="line">(48,&#39;小马宝莉&#39;,&#39;2019-03-08 11:44:00&#39;,&#39;女&#39;,&#39;北京修正&#39;);</span><br></pre></td></tr></table></figure><h4 id="Ⅱ-创建java模块，并导入相关jar包"><a href="#Ⅱ-创建java模块，并导入相关jar包" class="headerlink" title="Ⅱ 创建java模块，并导入相关jar包"></a>Ⅱ 创建java模块，并导入相关jar包</h4><p><img data-src="/img/mybatis%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E5%88%9B%E5%BB%BAjava%E6%A8%A1%E5%9D%97.png" alt="mybatis快速入门——创建java模块"></p><h4 id="Ⅲ-创建User实体"><a href="#Ⅲ-创建User实体" class="headerlink" title="Ⅲ 创建User实体"></a>Ⅲ 创建User实体</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="comment">// setter、getter 略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Ⅳ-编写映射文件-UserMapper-xml"><a href="#Ⅳ-编写映射文件-UserMapper-xml" class="headerlink" title="Ⅳ 编写映射文件 UserMapper.xml"></a>Ⅳ 编写映射文件 UserMapper.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--查询所有--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Ⅴ-编写核心文件-SqlMapConfig-xml-（mybatis-config-xml）"><a href="#Ⅴ-编写核心文件-SqlMapConfig-xml-（mybatis-config-xml）" class="headerlink" title="Ⅴ 编写核心文件 SqlMapConfig.xml （mybatis-config.xml）"></a>Ⅴ 编写核心文件 SqlMapConfig.xml （mybatis-config.xml）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置数据库环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql环境--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--事务管理器--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--数据源：使用内置连接池--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis_db"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加载映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/sun/mapper/UserMapper.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Ⅵ-测试"><a href="#Ⅵ-测试" class="headerlink" title="Ⅵ 测试"></a>Ⅵ 测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询所有</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1.加载核心文件</span></span><br><span class="line">        InputStream in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">// 2.构建工厂对象</span></span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        <span class="comment">// 3.创建会话对象（简单理解为：connection）</span></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        <span class="comment">// 4.调用API执行sql语句</span></span><br><span class="line">        <span class="comment">// 参数：命名空间.id</span></span><br><span class="line">        List&lt;User&gt; list = sqlSession.selectList(<span class="string">"UserMapper.findAll"</span>);</span><br><span class="line">        <span class="keyword">for</span> (User user : list) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 5.释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、Mybatis映射文件概述"><a href="#四、Mybatis映射文件概述" class="headerlink" title="四、Mybatis映射文件概述"></a>四、Mybatis映射文件概述</h2><p><img data-src="/img/mybatis%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6%E6%A6%82%E8%BF%B0.png" alt="mybatis映射文件概述"></p><h2 id="五、Mybatis完成增删改查"><a href="#五、Mybatis完成增删改查" class="headerlink" title="五、Mybatis完成增删改查"></a>五、Mybatis完成增删改查</h2><h3 id="5-1-新增"><a href="#5-1-新增" class="headerlink" title="5.1 新增"></a>5.1 新增</h3><blockquote><p>需求: 向数据库user表新增一条记录</p></blockquote><h4 id="①-编写UserMapper-xml"><a href="#①-编写UserMapper-xml" class="headerlink" title="① 编写UserMapper.xml"></a>① 编写UserMapper.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加记录--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"save"</span> <span class="attr">parameterType</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">    insert into user values(null,#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="②-编写测试类"><a href="#②-编写测试类" class="headerlink" title="② 编写测试类"></a>② 编写测试类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加记录</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 1.加载核心文件</span></span><br><span class="line">    InputStream in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">    <span class="comment">// 2.构建工厂对象</span></span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">    <span class="comment">// 3.创建会话对象（简单理解为：connection）</span></span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">// 4.调用api添加记录</span></span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(<span class="string">"jack"</span>);</span><br><span class="line">    user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">    user.setSex(<span class="string">"男"</span>);</span><br><span class="line">    user.setAddress(<span class="string">"上海"</span>);</span><br><span class="line">    <span class="keyword">int</span> i = sqlSession.insert(<span class="string">"UserMapper.save"</span>, user);</span><br><span class="line">    System.out.println(i);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.提交事务并释放资源</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="③-新增注意事项"><a href="#③-新增注意事项" class="headerlink" title="③ 新增注意事项"></a>③ 新增注意事项</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>新增操作使用 <span class="xml"><span class="tag">&lt;<span class="name">insert</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span> 标签</span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>parameterType属性为传递参数的java类型</span><br><span class="line"></span><br><span class="line"><span class="bullet">3. </span>#&#123;&#125; 相当于?占位符，花括号内写实体的属性名</span><br><span class="line"></span><br><span class="line"><span class="bullet">4. </span>新增操作的API使用 sqlSession.insert(“命名空间.id”,实体对象);</span><br><span class="line"></span><br><span class="line"><span class="bullet">5. </span>DML操作需要手动提交事务 sqlSession.commit()</span><br></pre></td></tr></table></figure><h3 id="5-2-修改"><a href="#5-2-修改" class="headerlink" title="5.2 修改"></a>5.2 修改</h3><blockquote><p>需求: 根据user的主键修改其他属性  </p></blockquote><h4 id="①-编写UserMapper-xml-1"><a href="#①-编写UserMapper-xml-1" class="headerlink" title="① 编写UserMapper.xml"></a>① 编写UserMapper.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--修改记录--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">    update user set username = #&#123;username&#125; , birthday = #&#123;birthday&#125; , sex = #&#123;sex&#125; ,address = #&#123;address&#125; where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="②-编写测试类-1"><a href="#②-编写测试类-1" class="headerlink" title="② 编写测试类"></a>② 编写测试类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改记录</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 1.加载核心文件</span></span><br><span class="line">    InputStream in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">    <span class="comment">// 2.构建工厂对象</span></span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">    <span class="comment">// 3.创建会话对象（简单理解为：connection）</span></span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">// 4.调用API实现修改操作</span></span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">50</span>);</span><br><span class="line">    user.setUsername(<span class="string">"呵呵"</span>);</span><br><span class="line">    user.setSex(<span class="string">"女"</span>);</span><br><span class="line">    user.setAddress(<span class="string">"葫芦岛"</span>);</span><br><span class="line">    user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i = sqlSession.update(<span class="string">"UserMapper.update"</span>, user);</span><br><span class="line">    System.out.println(i);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.提交事务并释放资源</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="③-修改注意事项"><a href="#③-修改注意事项" class="headerlink" title="③ 修改注意事项"></a>③ 修改注意事项</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>修改操作使用 <span class="xml"><span class="tag">&lt;<span class="name">update</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span> 标签</span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>parameterType属性为传递参数的java类型</span><br><span class="line"></span><br><span class="line"><span class="bullet">3. </span>#&#123;&#125; 相当于?占位符，花括号内写实体的属性名</span><br><span class="line"></span><br><span class="line"><span class="bullet">4. </span>修改操作的API使用 sqlSession.update(“命名空间.id”,实体对象);</span><br><span class="line"></span><br><span class="line"><span class="bullet">5. </span>DML操作需要手动提交事务 sqlSession.commit()</span><br></pre></td></tr></table></figure><h3 id="5-3-删除"><a href="#5-3-删除" class="headerlink" title="5.3 删除"></a>5.3 删除</h3><blockquote><p>需求:根据主键删除一个用户  </p></blockquote><h4 id="①-编写UserMapper-xml-2"><a href="#①-编写UserMapper-xml-2" class="headerlink" title="① 编写UserMapper.xml"></a>① 编写UserMapper.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--删除记录--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"delete"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">    delete from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="②-编写测试类-2"><a href="#②-编写测试类-2" class="headerlink" title="② 编写测试类"></a>② 编写测试类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除记录</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">// 1.加载核心文件</span></span><br><span class="line">    InputStream in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">    <span class="comment">// 2.构建工厂对象</span></span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">    <span class="comment">// 3.创建会话对象（简单理解为：connection）</span></span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">// 4.调用api实现删除操作</span></span><br><span class="line">    Integer id = <span class="number">50</span>;</span><br><span class="line">    sqlSession.delete(<span class="string">"UserMapper.delete"</span>, id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.提交事务并释放资源</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="③-删除注意事项"><a href="#③-删除注意事项" class="headerlink" title="③ 删除注意事项"></a>③ 删除注意事项</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>删除操作使用 <span class="xml"><span class="tag">&lt;<span class="name">delete</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span> 标签</span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>parameterType属性为传递参数的java类型</span><br><span class="line"></span><br><span class="line"><span class="bullet">3. </span>#&#123;&#125; 相当于?占位符，如果传递是简单类型，花括号内随便写，通常做到见名之意即可</span><br><span class="line"></span><br><span class="line"><span class="bullet">4. </span>删除操作的API使用 sqlSession.delete(“命名空间.id”,主键);</span><br><span class="line"></span><br><span class="line"><span class="bullet">5. </span>DML操作需要手动提交事务 sqlSession.commit()</span><br></pre></td></tr></table></figure><h3 id="5-4-工具类"><a href="#5-4-工具类" class="headerlink" title="5.4 工具类"></a>5.4 工具类</h3><blockquote><p>编写了CRUD案例后，发现了测试代码加载文件、创建会话对象，都属于公共部分，可以抽取到工具类中，简化代码，提高效率</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化mybatis环境</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.加载核心文件</span></span><br><span class="line">            InputStream in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">            <span class="comment">// 2.构建工厂对象</span></span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"mybatis框架初始化失败..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取sqlSession方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">openSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提交事务并释放资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(SqlSession sqlSession)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sqlSession != <span class="keyword">null</span>) &#123;</span><br><span class="line">            sqlSession.commit();</span><br><span class="line">            sqlSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><blockquote><p>需求，查询id为 41这条记录</p></blockquote><h4 id="①-UserMapper-xml"><a href="#①-UserMapper-xml" class="headerlink" title="① UserMapper.xml"></a>① UserMapper.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--查询一个--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">    select * from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="②-测试代码"><a href="#②-测试代码" class="headerlink" title="② 测试代码"></a>② 测试代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询一个</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">// 1.获取sqlSession会话</span></span><br><span class="line">    SqlSession sqlSession = MyBatisUtils.openSession();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.调用api查询</span></span><br><span class="line">    User user = sqlSession.selectOne(<span class="string">"UserMapper.findById"</span>, <span class="number">41</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(user);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.提交并释放资源</span></span><br><span class="line">    MyBatisUtils.release(sqlSession);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、Mybatis核心文件概述"><a href="#六、Mybatis核心文件概述" class="headerlink" title="六、Mybatis核心文件概述"></a>六、Mybatis核心文件概述</h2><h3 id="6-1-标签层级关系"><a href="#6-1-标签层级关系" class="headerlink" title="6.1 标签层级关系"></a>6.1 标签层级关系</h3><blockquote><p>MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。 配置文档的顶层结构如下：</p></blockquote><p><img data-src="/img/mybatis%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%A0%87%E7%AD%BE%E5%B1%82%E7%BA%A7%E5%85%B3%E7%B3%BB.png" alt="mybatis核心配置文件标签层级关系"></p><h3 id="6-2-常用配置标签"><a href="#6-2-常用配置标签" class="headerlink" title="6.2 常用配置标签"></a>6.2 常用配置标签</h3><h4 id="environments标签"><a href="#environments标签" class="headerlink" title="environments标签"></a>environments标签</h4><blockquote><p>数据库环境的配置，支持多环境配置</p></blockquote><p><img data-src="/img/environments%E6%A0%87%E7%AD%BE.png" alt="environments标签"></p><h4 id="properties标签"><a href="#properties标签" class="headerlink" title="properties标签"></a>properties标签</h4><p><img data-src="/img/properties%E6%A0%87%E7%AD%BE.png" alt="properties标签"></p><h4 id="typeAliases标签"><a href="#typeAliases标签" class="headerlink" title="typeAliases标签"></a>typeAliases标签</h4><p><img data-src="/img/typeAliases%E6%A0%87%E7%AD%BE1.png" alt="typeAliases标签1"></p><p><img data-src="/img/typeAliases%E6%A0%87%E7%AD%BE2.png" alt="typeAliases标签2"></p><h4 id="mappers标签"><a href="#mappers标签" class="headerlink" title="mappers标签"></a>mappers标签</h4><blockquote><p>该标签的作用是加载映射文件的，加载方式有如下几种：</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>加载指定的src目录下的映射文件，例如：</span><br><span class="line"><span class="code">&lt;mapper resource="com/sun/mapper/UserMapper.xml"/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>加载指定接口的全限定名，例如：【注解开发】</span><br><span class="line"><span class="code">&lt;mapper class="com.sun.mapper.UserMapper"/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">3. </span>加载并扫描指定包下所有的接口，例如：【注解开发】</span><br><span class="line"><span class="code">&lt;package name="com.sun.mapper"/&gt;</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/sun/mapper/UserMapper.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-3-标签书写顺序"><a href="#6-3-标签书写顺序" class="headerlink" title="6.3 标签书写顺序"></a>6.3 标签书写顺序</h3><p><img data-src="/img/%E6%A0%87%E7%AD%BE%E4%B9%A6%E5%86%99%E9%A1%BA%E5%BA%8F.png" alt="标签书写顺序"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--引入外置properties文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbc.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--java类型别名配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--单个类型别名定义--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;typeAlias type="com.itheima.domain.User" alias="User"&gt;&lt;/typeAlias&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--把当前包内的所有java类型定义了别名，别名就是类名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.sun.domain"</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置数据库环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql环境--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--事务管理器--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--数据源：使用内置连接池--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加载映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/sun/mapper/UserMapper.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="七、Mybatis的API概述"><a href="#七、Mybatis的API概述" class="headerlink" title="七、Mybatis的API概述"></a>七、Mybatis的API概述</h2><h3 id="7-1-API介绍"><a href="#7-1-API介绍" class="headerlink" title="7.1 API介绍"></a>7.1 API介绍</h3><h4 id="7-1-1-Resources"><a href="#7-1-1-Resources" class="headerlink" title="7.1.1 Resources"></a>7.1.1 Resources</h4><ul><li>加载mybatis的核心配置文件，获取io流</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">InputStream inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br></pre></td></tr></table></figure><h4 id="7-1-2-SqlSessionFactoryBuilder"><a href="#7-1-2-SqlSessionFactoryBuilder" class="headerlink" title="7.1.2 SqlSessionFactoryBuilder"></a>7.1.2 SqlSessionFactoryBuilder</h4><ul><li>将mybatis配置文件加载到内存，构建出SqlSessionFactory工厂对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder(); </span><br><span class="line">SqlSessionFactory factory = builder.build(inputStream);</span><br></pre></td></tr></table></figure><h4 id="7-1-3-SqlSessionFactory"><a href="#7-1-3-SqlSessionFactory" class="headerlink" title="7.1.3 SqlSessionFactory"></a>7.1.3 SqlSessionFactory</h4><ul><li>这是一个工厂对象，对于这种创建和销毁都非常耗费资源的重量级对象，一个项目中只需要存在一个即可。<br>  也就是说，它的生命周期跟项目的生命周期是一致的(项目不亡，我不销毁)</li></ul><blockquote><p>它的任务是创建SqlSession会话底层</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要手动提交事务，DML语句才会持久化到数据库中</span></span><br><span class="line"><span class="function">SqlSession <span class="title">openSession</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置是否开启自动提交，如果设置为true，开启自动提交事务【了解】</span></span><br><span class="line"><span class="function">SqlSession <span class="title">openSession</span><span class="params">(<span class="keyword">boolean</span> autoCommit)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="7-1-4-SqlSession【核心】"><a href="#7-1-4-SqlSession【核心】" class="headerlink" title="7.1.4 SqlSession【核心】"></a>7.1.4 SqlSession【核心】</h4><ul><li>这是Mybatis的一个核心对象。我们基于这个对象可以实现对数据的CRUD操作。</li></ul><blockquote><p>注意：对于这个对象应做到每个线程独有，每次用时打开，用完关闭。</p></blockquote><p><strong>执行语句的方法主要有：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;T&gt; <span class="function">T <span class="title">selectOne</span><span class="params">(String statement, Object parameter)</span></span>;</span><br><span class="line"></span><br><span class="line">&lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">selectList</span><span class="params">(String statement, Object parameter)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(String statement, Object parameter)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(String statement, Object parameter)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(String statement, Object parameter)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>操作事务的方法主要有：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h3 id="7-2-配置关系"><a href="#7-2-配置关系" class="headerlink" title="7.2 配置关系"></a>7.2 配置关系</h3><p><img data-src="/img/%E9%85%8D%E7%BD%AE%E5%85%B3%E7%B3%BB.png" alt="配置关系"></p><h3 id="7-3-框架工作原理"><a href="#7-3-框架工作原理" class="headerlink" title="7.3 框架工作原理"></a>7.3 框架工作原理</h3><p><img data-src="/img/%E6%A1%86%E6%9E%B6%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" alt="框架工作原理"></p><h2 id="八、Mybatis实现Dao层"><a href="#八、Mybatis实现Dao层" class="headerlink" title="八、Mybatis实现Dao层"></a>八、Mybatis实现Dao层</h2><h3 id="8-1-传统开发方式【了解】"><a href="#8-1-传统开发方式【了解】" class="headerlink" title="8.1 传统开发方式【了解】"></a>8.1 传统开发方式【了解】</h3><h4 id="①-创建新模块导入相关资源"><a href="#①-创建新模块导入相关资源" class="headerlink" title="① 创建新模块导入相关资源"></a>① 创建新模块导入相关资源</h4><p>略…</p><h4 id="②-创建UserMapper（UserDao）"><a href="#②-创建UserMapper（UserDao）" class="headerlink" title="② 创建UserMapper（UserDao）"></a>② 创建UserMapper（UserDao）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供根据id查询的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(Integer id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1.加载核心文件</span></span><br><span class="line">        InputStream in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">// 2.构建工厂</span></span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        <span class="comment">// 3.创建会话</span></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        <span class="comment">// 4.执行sql</span></span><br><span class="line">        User user = sqlSession.selectOne(<span class="string">"UserMapper.findById"</span>, id);</span><br><span class="line">        <span class="comment">// 5.释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="③-映射文件UserMapper-xml"><a href="#③-映射文件UserMapper-xml" class="headerlink" title="③ 映射文件UserMapper.xml"></a>③ 映射文件UserMapper.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--查询一个--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">        select * from user where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="④-模拟service进行测试"><a href="#④-模拟service进行测试" class="headerlink" title="④ 模拟service进行测试"></a>④ 模拟service进行测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 调用dao【mapper】</span></span><br><span class="line">        UserMapper userMapper = <span class="keyword">new</span> UserMapper();</span><br><span class="line">        User user = userMapper.findById(<span class="number">41</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="⑤-通过观察UserMapper代码"><a href="#⑤-通过观察UserMapper代码" class="headerlink" title="⑤ 通过观察UserMapper代码"></a>⑤ 通过观察UserMapper代码</h4><blockquote><p>我们类+方法+参数+返回结果的命名规范，与sqlSession执行底层代码一致，这部分可以交给mybatis通过动态代理，自动生成…</p></blockquote><p><img data-src="/img/%E4%BC%A0%E7%BB%9F%E5%BC%80%E5%8F%91%E6%96%B9%E5%BC%8F%E2%91%A4.png" alt="传统开发方式⑤"></p><h3 id="8-2-接口代理开发方式【掌握】"><a href="#8-2-接口代理开发方式【掌握】" class="headerlink" title="8.2 接口代理开发方式【掌握】"></a>8.2 接口代理开发方式【掌握】</h3><p>采用 Mybatis 的基于接口代理方式实现 持久层 的开发，这种方式是我们后面进入企业的主流。</p><p>基于接口代理方式的开发只需要程序员编写 Mapper 接口，Mybatis 框架会为我们动态生成实现类的对象。</p><p><strong>需要遵循以下命名规范</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>Mapper映射文件的namespace属性是接口的权限定名</span><br><span class="line"><span class="code">namespace="com.sun.mapper.UserMapper"</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2. </span>select等标签的id属性名与接口的方法名一致</span><br><span class="line"><span class="code">  id="findById"</span></span><br><span class="line"><span class="code"> </span></span><br><span class="line"><span class="bullet">3. </span>select等标签的parameterType的类型与方法的参数类型一致</span><br><span class="line"><span class="code">parameterType="int"</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">4. </span>select等标签的resultType的类型与方法的返回值类型一致</span><br><span class="line"><span class="code">resultType="com.sun.domain.User"</span></span><br></pre></td></tr></table></figure><p><img data-src="/img/%E6%8E%A5%E5%8F%A3%E4%BB%A3%E7%90%86%E5%BC%80%E5%8F%91%E6%96%B9%E5%BC%8F.png" alt="接口代理开发方式"></p><h4 id="①-新建模块创建、导入相关资源文件"><a href="#①-新建模块创建、导入相关资源文件" class="headerlink" title="① 新建模块创建、导入相关资源文件"></a>① 新建模块创建、导入相关资源文件</h4><p>略…</p><h4 id="②-编写UserMapper接口"><a href="#②-编写UserMapper接口" class="headerlink" title="② 编写UserMapper接口"></a>② 编写UserMapper接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据id查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="③-编写映射UserMapper-xml"><a href="#③-编写映射UserMapper-xml" class="headerlink" title="③ 编写映射UserMapper.xml"></a>③ 编写映射UserMapper.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.sun.mapper.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--查询一个--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">        select * from user where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="④-模拟service进行测试-1"><a href="#④-模拟service进行测试-1" class="headerlink" title="④ 模拟service进行测试"></a>④ 模拟service进行测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取sqlSession</span></span><br><span class="line">        SqlSession sqlSession = MyBatisUtils.openSession();</span><br><span class="line">        <span class="comment">// 2.创建UserMapper代理对象</span></span><br><span class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 3.执行sql</span></span><br><span class="line">        User user = userMapper.findById(<span class="number">41</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="comment">// 4.释放资源</span></span><br><span class="line">        MyBatisUtils.release(sqlSession);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-3-了解Mybatis底层动态代理生成"><a href="#8-3-了解Mybatis底层动态代理生成" class="headerlink" title="8.3 了解Mybatis底层动态代理生成"></a>8.3 了解Mybatis底层动态代理生成</h3><p><img data-src="/img/mybatis%E5%BA%95%E5%B1%82%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E7%9A%84%E7%94%9F%E6%88%90.png" alt="mybatis底层动态代理的生成"></p><h2 id="九、Mybatis高级查询"><a href="#九、Mybatis高级查询" class="headerlink" title="九、Mybatis高级查询"></a>九、Mybatis高级查询</h2><h3 id="9-1-ResutlMap标签"><a href="#9-1-ResutlMap标签" class="headerlink" title="9.1 ResutlMap标签"></a>9.1 ResutlMap标签</h3><p>如果数据库结果集中的列名和要封装实体的属性名完全一致的话用 resultType 属性</p><p>如果数据库结果集中的列名和要封装实体的属性名有不一致的情况用 resultMap 属性，通过resultMap手动建立对象关系映射。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.sun.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        手动映射封装</span></span><br><span class="line"><span class="comment">            id="BaseMap" 该标签的唯一标识</span></span><br><span class="line"><span class="comment">            type="com.itheima.domain.User" 封装后的java类型</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseMap"</span> <span class="attr">type</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            column="uid" 数据库查询的字段名</span></span><br><span class="line"><span class="comment">            property="id" 需要封装到实体属性名</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">property</span>=<span class="string">"id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"bir"</span> <span class="attr">property</span>=<span class="string">"birthday"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"gender"</span> <span class="attr">property</span>=<span class="string">"sex"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"addr"</span> <span class="attr">property</span>=<span class="string">"address"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--查询一个--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultMap</span>=<span class="string">"BaseMap"</span>&gt;</span></span><br><span class="line">        SELECT id AS uid,username AS `name`, birthday AS bir,sex AS gender, address AS addr FROM USER WHERE id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9-2-多条件查询"><a href="#9-2-多条件查询" class="headerlink" title="9.2 多条件查询"></a>9.2 多条件查询</h3><ul><li>需求：根据id和username查询user表</li></ul><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><ul><li>使用 <code>#{arg0}-#{arg1}</code> 或者 <code>#{param1}-#{param2}</code> 获取参数</li></ul><p>代码实现</p><ul><li>接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多条件查询方式一</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByIdAndUsername1</span><span class="params">(Integer id,String username)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>映射</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    多条件查询方式一</span></span><br><span class="line"><span class="comment">        注意：此parameterType属性只能出现一次，如果传递多个值，可以省略</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByIdAndUsername1"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- select * from user where id = #&#123;arg0&#125; and username = #&#123;arg1&#125; --&gt;</span></span><br><span class="line">    select * from user where id = #&#123;param1&#125; and username = #&#123;param2&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多条件查询测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    List&lt;User&gt; list = userMapper.findByIdAndUsername1(<span class="number">41</span>, <span class="string">"老王"</span>);</span><br><span class="line">    System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><ul><li>使用注解<code>@Param()</code>注解获取参数</li></ul><p>代码实现</p><ul><li>接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多条件查询方式二</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByIdAndUsername2</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Integer id,@<span class="title">Param</span><span class="params">(<span class="string">"username"</span>)</span> String username)</span>;</span><br></pre></td></tr></table></figure><ul><li>映射</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">多条件查询方式二</span></span><br><span class="line"><span class="comment">    注意：此parameterType属性只能出现一次，如果传递多个值，可以省略</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByIdAndUsername2"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">    select * from user where id = #&#123;id&#125; and username = #&#123;username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多条件查询测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    List&lt;User&gt; list = userMapper.findByIdAndUsername2(<span class="number">41</span>, <span class="string">"老王"</span>);</span><br><span class="line">    System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h4><ul><li>使用实体对象传递参数</li></ul><p>代码实现</p><ul><li>接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多条件查询方式三</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findByIdAndUsername3</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>映射</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">多条件查询方式三</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByIdAndUsername3"</span> <span class="attr">parameterType</span>=<span class="string">"com.sun.domain.User"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">    select * from user where id = #&#123;id&#125; and username = #&#123;username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多条件查询测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实体封装条件</span></span><br><span class="line">    User param = <span class="keyword">new</span> User();</span><br><span class="line">    param.setId(<span class="number">41</span>);</span><br><span class="line">    param.setUsername(<span class="string">"老王"</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; list = userMapper.findByIdAndUsername3(param);</span><br><span class="line">    System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-3-模糊查询"><a href="#9-3-模糊查询" class="headerlink" title="9.3 模糊查询"></a>9.3 模糊查询</h3><ul><li><strong>需求</strong>：根据username模糊查询user表</li></ul><h4 id="方式一-1"><a href="#方式一-1" class="headerlink" title="方式一"></a>方式一</h4><p>代码实现</p><ul><li>接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模糊查询方式一</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findLikeUsername1</span><span class="params">(String username)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>映射</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">           模糊查询方式一</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findLikeUsername1"</span> <span class="attr">parameterType</span>=<span class="string">"string"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">    select * from user where username like #&#123;username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试模糊查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    List&lt;User&gt; list = userMapper.findLikeUsername1(<span class="string">"%王%"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (User user : list) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>%%是sql的语法，卸载Java中不太合适</p></blockquote><h4 id="方式二-1"><a href="#方式二-1" class="headerlink" title="方式二"></a>方式二</h4><p>代码实现</p><ul><li>接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模糊查询方式二</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findLikeUsername2</span><span class="params">(String username)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>映射</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   模糊查询方式二</span></span><br><span class="line"><span class="comment">    oracle数据库 双引号除了别名的位置上，其他地方使用报错...</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findLikeUsername2"</span> <span class="attr">parameterType</span>=<span class="string">"string"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">      select * from user where username like "%" #&#123;username&#125; "%"</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试模糊查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    List&lt;User&gt; list = userMapper.findLikeUsername2(<span class="string">"王"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (User user : list) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方式三-1"><a href="#方式三-1" class="headerlink" title="方式三"></a>方式三</h4><p>代码实现</p><ul><li>接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模糊查询方式三</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findLikeUsername3</span><span class="params">(String username)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>映射</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   模糊查询方式三</span></span><br><span class="line"><span class="comment">    $&#123;&#125; 底层使用字符串拼接，可能会出现sql注入问题，开发绝对不用</span></span><br><span class="line"><span class="comment">    如果你传递的是简单数据类型 $&#123;value&#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findLikeUsername3"</span> <span class="attr">parameterType</span>=<span class="string">"string"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">      select * from user where username like '%$&#123;value&#125;%'</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试模糊查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    List&lt;User&gt; list = userMapper.findLikeUsername3(<span class="string">"王"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (User user : list) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方式四"><a href="#方式四" class="headerlink" title="方式四"></a>方式四</h4><blockquote><p>使用这种方式最合适</p></blockquote><p>代码实现</p><ul><li>接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模糊查询方式四</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findLikeUsername4</span><span class="params">(String username)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>映射</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     模糊查询方式四</span></span><br><span class="line"><span class="comment">      使用concat()函数帮我们进行拼接，注意oracle数据库中此函数只能传递二个参数，需要进行嵌套</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findLikeUsername4"</span> <span class="attr">parameterType</span>=<span class="string">"string"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">        select * from user where username like  concat(concat('%',#&#123;username&#125;),'%')</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试模糊查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    List&lt;User&gt; list = userMapper.findLikeUsername4(<span class="string">"王"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (User user : list) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-4-面试题"><a href="#9-4-面试题" class="headerlink" title="9.4 面试题"></a>9.4 面试题</h3><p><code>${}</code> 与 <code>#{}</code> 区别</p><p><strong><code>#{}</code>:表示一个占位符号</strong> </p><ul><li>通过<code>#{}</code>可以实现preparedStatement向占位符中设置值，自动进行java类型和jdbc类型转换，#{}可以有效防止sql注入。</li><li><code>#{}</code>可以接收简单类型值或实体属性值。 </li><li>如果parameterType传输单个简单类型值，<code>#{}</code>括号中名称任意。 </li></ul><p>*<em><code>${}</code>:表示拼接sql串 *</em></p><ul><li><p>通过<code>${}</code>底层使用statement对象内容拼接在sql中且不进行jdbc类型转换，会出现sql注入问题。</p></li><li><p><code>${}</code>可以接收简单类型值或实体属性值。</p></li><li><p>如果parameterType传输单个简单类型值，<code>${}</code>括号中只能是value。</p><ul><li><blockquote><p>补充：TextSqlNode.java 源码可以证明</p></blockquote></li></ul></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>简单类型</span><br><span class="line"><span class="code">string、int（Integer）、long、double</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>实体（复杂）类型</span><br><span class="line"><span class="code">new User()</span></span><br></pre></td></tr></table></figure><h2 id="十、返回主键"><a href="#十、返回主键" class="headerlink" title="十、返回主键"></a>十、返回主键</h2><ul><li><strong>需求</strong>：向数据库保存一个用户后, 然后在控制台记录下此用户的主键值(id)</li></ul><p>代码实现：</p><ul><li>接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回主键</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>映射</li><li>方式一</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        返回主键 方式一</span></span><br><span class="line"><span class="comment">            useGeneratedKeys="true" 开启返回主键功能</span></span><br><span class="line"><span class="comment">            keyColumn="id" 数据库主键列</span></span><br><span class="line"><span class="comment">            keyProperty="id" 实体主键属性</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            这种方式操作虽然简单，但仅支持主键自增类型的数据库：mysql、sqlServer</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"save"</span> <span class="attr">parameterType</span>=<span class="string">"com.sun.domain.User"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyColumn</span>=<span class="string">"id"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">    insert into user values(null,#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>方式二</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        返回主键方式二</span></span><br><span class="line"><span class="comment">            keyColumn="id" 表的主键列</span></span><br><span class="line"><span class="comment">            keyProperty="id" 实体的主键属性</span></span><br><span class="line"><span class="comment">            resultType="int" 实体主键的java类型</span></span><br><span class="line"><span class="comment">            order="AFTER"  selectKey标签sql语句的执行时机</span></span><br><span class="line"><span class="comment">                before：在insert语句执行之前，执行</span></span><br><span class="line"><span class="comment">                after：在insert语句执行之后，执行</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            这种方式虽然繁琐，但是通用...</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"save"</span> <span class="attr">parameterType</span>=<span class="string">"com.sun.domain.User"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyColumn</span>=<span class="string">"id"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">resultType</span>=<span class="string">"int"</span> <span class="attr">order</span>=<span class="string">"AFTER"</span>&gt;</span></span><br><span class="line">        SELECT LAST_INSERT_ID()</span><br><span class="line">    <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">    insert into user values(#&#123;id&#125;,#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回主键测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(<span class="string">"lala"</span>);</span><br><span class="line">    user.setSex(<span class="string">"女"</span>);</span><br><span class="line">    user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">    user.setAddress(<span class="string">"衡水"</span>);</span><br><span class="line">    userMapper.save(user);</span><br><span class="line"></span><br><span class="line">    System.out.println(user.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、框架简介&quot;&gt;&lt;a href=&quot;#一、框架简介&quot; class=&quot;headerlink&quot; title=&quot;一、框架简介&quot;&gt;&lt;/a&gt;一、框架简介&lt;/h2&gt;&lt;p&gt;&lt;img data-src=&quot;/img/%E6%A1%86%E6%9E%B6%E7%AE%80%E4%BB%8B.png&quot; alt=&quot;框架简介&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="框架" scheme="http://sunmoon.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Mybatis" scheme="http://sunmoon.com/categories/%E6%A1%86%E6%9E%B6/Mybatis/"/>
    
    
      <category term="持久层框架" scheme="http://sunmoon.com/tags/%E6%8C%81%E4%B9%85%E5%B1%82%E6%A1%86%E6%9E%B6/"/>
    
      <category term="mybatis" scheme="http://sunmoon.com/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>JDBC&amp;Druid连接池</title>
    <link href="http://sunmoon.com/2020/09/05/JDBC-Druid%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    <id>http://sunmoon.com/2020/09/05/JDBC-Druid%E8%BF%9E%E6%8E%A5%E6%B1%A0/</id>
    <published>2020-09-05T13:17:49.000Z</published>
    <updated>2020-09-05T13:23:30.594Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、JDBC基础"><a href="#一、JDBC基础" class="headerlink" title="一、JDBC基础"></a>一、JDBC基础</h2><h3 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h3><p>Java 数据库连接（Java DataBase Connectivity）</p><ul><li>作用：通过Java语言操作数据库</li><li>本质：是官方（sun公司）定义的一套操作所有关系型数据库的规则&amp;，即接口。各个数据库厂商去实现这套接口，提供数据库驱动jar包。我们可以使用这套接口（JDBC）编程，真正执行的代码是驱动jar包中的实现类。</li></ul><a id="more"></a><p><img data-src="/img/JDBC%E6%A6%82%E8%BF%B0.png" alt="JDBC概述"></p><blockquote><p>面向接口编程</p></blockquote><p><img data-src="/img/%E9%9D%A2%E5%90%91%E6%8E%A5%E5%8F%A3%E7%BC%96%E7%A8%8B.png" alt="面向接口编程"></p><h3 id="1-2-快速入门"><a href="#1-2-快速入门" class="headerlink" title="1.2 快速入门"></a>1.2 快速入门</h3><ul><li>需求：通过java代码向数据库插入一条记录</li></ul><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><h5 id="Ⅰ-准备数据库和表"><a href="#Ⅰ-准备数据库和表" class="headerlink" title="Ⅰ 准备数据库和表"></a>Ⅰ 准备数据库和表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> jdbc;</span><br><span class="line"><span class="keyword">USE</span> jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">USER</span>(</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`uaername`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="Ⅱ-创建Java模块，导入mysql驱动jar包"><a href="#Ⅱ-创建Java模块，导入mysql驱动jar包" class="headerlink" title="Ⅱ 创建Java模块，导入mysql驱动jar包"></a>Ⅱ 创建Java模块，导入mysql驱动jar包</h5><p><img data-src="/img/jdbc%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E5%88%9B%E5%BB%BA%E6%A8%A1%E5%9D%97%E5%AF%BC%E5%85%A5jar%E5%8C%85.png" alt="jdbc快速入门——创建模块导入jar包"></p><h5 id="Ⅲ-步骤分析"><a href="#Ⅲ-步骤分析" class="headerlink" title="Ⅲ 步骤分析"></a>Ⅲ 步骤分析</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>注册驱动</span><br><span class="line"><span class="bullet">2. </span>建立连接</span><br><span class="line"><span class="bullet">3. </span>编写sql</span><br><span class="line"><span class="bullet">4. </span>获取sql执行对象</span><br><span class="line"><span class="bullet">5. </span>发送sql并返回结果</span><br><span class="line"><span class="bullet">6. </span>处理结果</span><br><span class="line"><span class="bullet">7. </span>释放资源</span><br></pre></td></tr></table></figure><p><img data-src="/img/jdbc%E6%AD%A5%E9%AA%A4%E5%88%86%E6%9E%90.png" alt="jdbc步骤分析"></p><h5 id="Ⅳ-代码实现"><a href="#Ⅳ-代码实现" class="headerlink" title="Ⅳ 代码实现"></a>Ⅳ 代码实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcQuick</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 注册驱动</span></span><br><span class="line">        DriverManager.registerDriver(<span class="keyword">new</span> Driver());</span><br><span class="line">        <span class="comment">// 2. 建立连接</span></span><br><span class="line">        Connection connection = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/jdbc"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line">        <span class="comment">// 3. 编写sql（分号可以省略）</span></span><br><span class="line">        String sql = <span class="string">"insert into user values(null,'哈哈','999');"</span>;</span><br><span class="line">        <span class="comment">// 4. 获取sql执行对象</span></span><br><span class="line">        Statement statement = connection.createStatement();</span><br><span class="line">        <span class="comment">// 5. 发送sql并返回结果</span></span><br><span class="line">        <span class="keyword">int</span> i = statement.executeUpdate(sql);</span><br><span class="line">        <span class="comment">// 6. 处理结果</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"添加成功"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"添加失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7. 释放资源</span></span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-相关API介绍"><a href="#1-3-相关API介绍" class="headerlink" title="1.3 相关API介绍"></a>1.3 相关API介绍</h3><blockquote><p>在java.sql 包下</p></blockquote><ul><li><strong>DriverManager：驱动管理对象【工具类】</strong></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>注册驱动</span><br><span class="line"><span class="code">静态方法：static void registerDriver(Driver driver) 【了解】</span></span><br><span class="line"><span class="code">我们观察mysql实现类内部代码，发现了静态代码也注册了一次驱动</span></span><br><span class="line"><span class="code">    static &#123;</span></span><br><span class="line"><span class="code">                try &#123;</span></span><br><span class="line"><span class="code">                    DriverManager.registerDriver(new Driver());</span></span><br><span class="line"><span class="code">                &#125; catch (SQLException var1) &#123;</span></span><br><span class="line"><span class="code">                    throw new RuntimeException("Can't register driver!");</span></span><br><span class="line"><span class="code">                &#125;</span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code">            </span></span><br><span class="line">   反射：Class.forName("com.mysql.jdbc.Driver"); </span><br><span class="line">   加载mysql的驱动类到jvm虚拟机，触发初始化方法</span><br><span class="line">   SPI:服务注册机制【了解】</span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>建立连接</span><br><span class="line"><span class="code">static Connection getConnection(String url, String user, String password);</span></span><br><span class="line"><span class="code">参数</span></span><br><span class="line"><span class="code">url：固定格式</span></span><br><span class="line"><span class="code">语法：jdbc:mysql://主机地址:端口/数据库名</span></span><br><span class="line"><span class="code">实例：</span></span><br><span class="line"><span class="code">jdbc:mysql://localhost:3306/web15</span></span><br><span class="line"><span class="code">jdbc:mysql:///web15  【连接本机】</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">user：用户名</span></span><br><span class="line"><span class="code">password：密码</span></span><br></pre></td></tr></table></figure><ul><li><strong>Connection：数据库连接对象</strong></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>获取sql执行对象</span><br><span class="line"><span class="code">Statement createStatement() 【了解】</span></span><br><span class="line"><span class="code">PreparedStatement prepareStatement(String sql)  【掌握】</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>事务管理</span><br><span class="line"><span class="code">1）开启事务（关闭自动提交）</span></span><br><span class="line"><span class="code">void setAutoCommit(boolean autoCommit)  </span></span><br><span class="line"><span class="code">参数：</span></span><br><span class="line"><span class="code">true：开启自动提交</span></span><br><span class="line"><span class="code">flase：关闭自动提交</span></span><br><span class="line"><span class="code">2）提交事务</span></span><br><span class="line"><span class="code">void commit()  </span></span><br><span class="line"><span class="code">3）回滚事务</span></span><br><span class="line"><span class="code">void rollback()</span></span><br></pre></td></tr></table></figure><ul><li><strong>Statement：执行sql的对象</strong></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>执行所有类型的sql语句 </span><br><span class="line"><span class="code">boolean execute(String sql)  </span></span><br><span class="line">-----------------------------------</span><br><span class="line"><span class="bullet">2. </span>执行DML类型的sql语句[常用]</span><br><span class="line"><span class="code">int executeUpdate(String sql)  </span></span><br><span class="line"><span class="code">参数：insert、delete、update</span></span><br><span class="line"><span class="code">返回值：影响行数</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">3. </span>执行DQL类型的sql语句[常用]</span><br><span class="line"><span class="code">ResultSet executeQuery(String sql)  </span></span><br><span class="line"><span class="code">参数：select</span></span><br><span class="line"><span class="code">返回值：查询后的结果集（单条、多条）</span></span><br></pre></td></tr></table></figure><ul><li><strong>ResultSet：结果集对象,封装查询结果</strong></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>指针下移（通常与while、if结合使用）</span><br><span class="line"><span class="code">boolean next()</span></span><br><span class="line"><span class="code">返回值：</span></span><br><span class="line"><span class="code">true 有数据</span></span><br><span class="line"><span class="code">false 没数据</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>获取数据</span><br><span class="line"><span class="code">T getXxx(int 列编号)</span></span><br><span class="line"><span class="code">T getXxx(String 列名)</span></span><br><span class="line"></span><br><span class="line"><span class="code">Object getObject(String 列名)</span></span><br><span class="line"><span class="code">String getString(String 列名)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">注意：每一行数据对应java中的一个对象</span></span><br></pre></td></tr></table></figure><p><img data-src="/img/resultSet.png" alt="resultSet"></p><h3 id="1-4-使用JDBC实现CRUD操作"><a href="#1-4-使用JDBC实现CRUD操作" class="headerlink" title="1.4 使用JDBC实现CRUD操作"></a>1.4 使用JDBC实现CRUD操作</h3><h5 id="Ⅰ-C：添加一条记录到"><a href="#Ⅰ-C：添加一条记录到" class="headerlink" title="Ⅰ C：添加一条记录到"></a>Ⅰ C：添加一条记录到</h5><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cTest</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">    <span class="comment">//注册驱动</span></span><br><span class="line">    Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/jdbc"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line">    <span class="comment">//定义sql</span></span><br><span class="line">    String sql = <span class="string">"insert into user values(null,'清风','123')"</span>;</span><br><span class="line">    <span class="comment">//获取执行sql对象</span></span><br><span class="line">    Statement stat = conn.createStatement();</span><br><span class="line">    <span class="comment">//执行sql</span></span><br><span class="line">    <span class="keyword">int</span> i = stat.executeUpdate(sql);</span><br><span class="line">    <span class="comment">//结果处理</span></span><br><span class="line">    <span class="keyword">if</span> (i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">"添加成功！"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"添加失败！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    stat.close();</span><br><span class="line">    conn.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Ⅱ-R：查询所有记录"><a href="#Ⅱ-R：查询所有记录" class="headerlink" title="Ⅱ R：查询所有记录"></a>Ⅱ R：查询所有记录</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rTest</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">    <span class="comment">//注册驱动</span></span><br><span class="line">    Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/jdbc"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line">    <span class="comment">//定义sql</span></span><br><span class="line">    String sql = <span class="string">"select * from user"</span>;</span><br><span class="line">    <span class="comment">//获取执行sql对象</span></span><br><span class="line">    Statement stat = conn.createStatement();</span><br><span class="line">    <span class="comment">//执行sql</span></span><br><span class="line">    ResultSet resultSet = stat.executeQuery(sql);</span><br><span class="line">    <span class="comment">//结果处理,遍历数据</span></span><br><span class="line">    <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">        System.out.println(resultSet.getInt(<span class="string">"id"</span>) + resultSet.getString(<span class="string">"username"</span>) + resultSet.getString(<span class="string">"password"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    resultSet.close();</span><br><span class="line">    stat.close();</span><br><span class="line">    conn.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Ⅲ-U：修改记录"><a href="#Ⅲ-U：修改记录" class="headerlink" title="Ⅲ U：修改记录"></a>Ⅲ U：修改记录</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uTest</span><span class="params">()</span> <span class="keyword">throws</span> SQLException, ClassNotFoundException </span>&#123;</span><br><span class="line">    <span class="comment">//注册驱动</span></span><br><span class="line">    Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/jdbc"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line">    <span class="comment">//定义sql</span></span><br><span class="line">    String sql = <span class="string">"update user set username = 'hello' where id = 4"</span>;</span><br><span class="line">    <span class="comment">//获取执行sql对象</span></span><br><span class="line">    Statement stat = conn.createStatement();</span><br><span class="line">    <span class="comment">//执行sql</span></span><br><span class="line">    <span class="keyword">int</span> i = stat.executeUpdate(sql);</span><br><span class="line">    <span class="comment">//结果处理</span></span><br><span class="line">    <span class="keyword">if</span> (i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">"修改成功"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"修改失败"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    stat.close();</span><br><span class="line">    conn.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Ⅳ-D：删除记录"><a href="#Ⅳ-D：删除记录" class="headerlink" title="Ⅳ D：删除记录"></a>Ⅳ D：删除记录</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dTest</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">    <span class="comment">//注册驱动</span></span><br><span class="line">    Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/jdbc"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line">    <span class="comment">//定义sql</span></span><br><span class="line">    String sql = <span class="string">"delete from user where id = 4"</span>;</span><br><span class="line">    <span class="comment">//获取执行sql对象</span></span><br><span class="line">    Statement stat = conn.createStatement();</span><br><span class="line">    <span class="comment">//执行sql</span></span><br><span class="line">    <span class="keyword">int</span> i = stat.executeUpdate(sql);</span><br><span class="line">    <span class="comment">//结果处理</span></span><br><span class="line">    <span class="keyword">if</span> (i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">"删除成功"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"删除失败"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    stat.close();</span><br><span class="line">    conn.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-5-工具类"><a href="#1-5-工具类" class="headerlink" title="1.5 工具类"></a>1.5 工具类</h3><p>通过上面案例需求我们会发现每次去执行SQL语句都需要注册驱动，获取连接，得到Statement，以及释放资源。发现很多重复的劳动，我们可以将重复的代码定义到一个工具类中。 </p><blockquote><p><strong>目的</strong>：简化书写，一劳永逸</p></blockquote><p>步骤分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcUtils</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">   <span class="comment">// 1.注册驱动 </span></span><br><span class="line">   <span class="keyword">static</span>&#123;</span><br><span class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 2.建立连接</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span>  DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/jdbc"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="comment">// 3.释放资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(......)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//注册驱动</span></span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对外提供获取连接方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 连接对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/jdbc"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resultSet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> statement</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(ResultSet resultSet, Statement statement,Connection connection)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (resultSet != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (statement != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(Statement statement,Connection connection)</span></span>&#123;</span><br><span class="line">        release(<span class="keyword">null</span>,statement,connection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-JDBC的事务操作"><a href="#1-6-JDBC的事务操作" class="headerlink" title="1.6 JDBC的事务操作"></a>1.6 JDBC的事务操作</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>事务</span><br><span class="line"><span class="code">如果一个包含多个步骤的业务操作，被事务管理，那么这些操作要么同时成功，要么同时失败。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>MySQL操作</span><br><span class="line"><span class="code">1.开启事务</span></span><br><span class="line"><span class="code">begin</span></span><br><span class="line"><span class="code">2.提交事务</span></span><br><span class="line"><span class="code">commit</span></span><br><span class="line"><span class="code">3.回滚事务</span></span><br><span class="line"><span class="code">rollback</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>java操作（使用Connection对象）</span><br><span class="line"><span class="code">1.开启事务（关闭自动提交）</span></span><br><span class="line"><span class="code">void setAutoCommit(false);</span></span><br><span class="line"><span class="code">2.提交事务</span></span><br><span class="line"><span class="code">void commit();</span></span><br><span class="line"><span class="code">3.回滚事务</span></span><br><span class="line"><span class="code">void rollback();</span></span><br></pre></td></tr></table></figure><h4 id="转账案例"><a href="#转账案例" class="headerlink" title="转账案例"></a>转账案例</h4><h5 id="Ⅰ-准备表和数据"><a href="#Ⅰ-准备表和数据" class="headerlink" title="Ⅰ 准备表和数据"></a>Ⅰ 准备表和数据</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">account</span>(</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`user`</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">  <span class="string">`balance`</span> <span class="keyword">DOUBLE</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">account</span> <span class="keyword">VALUES</span>(<span class="literal">NULL</span>,<span class="string">'张三'</span>,<span class="number">1000</span>),(<span class="literal">NULL</span>,<span class="string">'李四'</span>,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h5 id="Ⅱ-异常捕获架构"><a href="#Ⅱ-异常捕获架构" class="headerlink" title="Ⅱ 异常捕获架构"></a>Ⅱ 异常捕获架构</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TXDemo</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTx</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Ⅲ-嵌入事务代码"><a href="#Ⅲ-嵌入事务代码" class="headerlink" title="Ⅲ 嵌入事务代码"></a>Ⅲ 嵌入事务代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TXDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTx</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        Statement statement = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.获取连接</span></span><br><span class="line">            connection = JdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">// 2.开启事务</span></span><br><span class="line">            connection.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3.处理业务逻辑（包含多条sql语句）</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4.提交事务</span></span><br><span class="line">            connection.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 5.回滚事务</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.rollback();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 6.释放资源</span></span><br><span class="line">            JdbcUtils.release(statement, connection);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Ⅳ-代码实现-1"><a href="#Ⅳ-代码实现-1" class="headerlink" title="Ⅳ 代码实现"></a>Ⅳ 代码实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC的事务操作</span></span><br><span class="line"><span class="comment"> *      转账</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTransaction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement stat = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取连接</span></span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">// 关闭自动提交</span></span><br><span class="line">            conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">// 定义张三转出sql语句</span></span><br><span class="line">            String sql1 = <span class="string">"update account set balance = balance - 100 where id = 1"</span>;</span><br><span class="line">            <span class="comment">// 获取执行sql的statement对象</span></span><br><span class="line">            stat = conn.createStatement();</span><br><span class="line">            <span class="comment">// 开始转账</span></span><br><span class="line">            <span class="keyword">int</span> i = stat.executeUpdate(sql1);</span><br><span class="line">            <span class="keyword">if</span> (i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"张三转出..."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//模拟系统故障</span></span><br><span class="line">            <span class="keyword">int</span> h = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 定义李四转入sql</span></span><br><span class="line">            String sql2 = <span class="string">"update account set balance = balance + 100 where id = 2"</span>;</span><br><span class="line">            <span class="comment">// 开始执行</span></span><br><span class="line">            <span class="keyword">int</span> j = stat.executeUpdate(sql2);</span><br><span class="line">            <span class="keyword">if</span> (j&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"李四转入...."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 全部执行完，提交事务</span></span><br><span class="line">            conn.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="comment">// 出异常时，回滚</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.rollback();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 释放资源</span></span><br><span class="line">            JdbcUtils.release(stat,conn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、案例：用户登录"><a href="#二、案例：用户登录" class="headerlink" title="二、案例：用户登录"></a>二、案例：用户登录</h2><p><strong>需求：</strong>登录页面，用户输入账号和密码，实现登录网站功能</p><h3 id="2-1-需求分析"><a href="#2-1-需求分析" class="headerlink" title="2.1 需求分析"></a>2.1 需求分析</h3><p><img data-src="/img/%E7%99%BB%E5%BD%95%E6%A1%88%E4%BE%8B%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90.png" alt="登录案例需求分析"></p><h3 id="2-2-代码实现"><a href="#2-2-代码实现" class="headerlink" title="2.2 代码实现"></a>2.2 代码实现</h3><h5 id="Ⅰ-创建web模块，导入jar包"><a href="#Ⅰ-创建web模块，导入jar包" class="headerlink" title="Ⅰ 创建web模块，导入jar包"></a>Ⅰ 创建web模块，导入jar包</h5><p><img data-src="/img/%E7%99%BB%E9%99%86%E6%A1%88%E4%BE%8B%E5%AF%BC%E5%85%A5jar%E5%8C%85.png" alt="登陆案例导入jar包"></p><h5 id="Ⅱ-导入资源"><a href="#Ⅱ-导入资源" class="headerlink" title="Ⅱ 导入资源"></a>Ⅱ 导入资源</h5><p><img data-src="/img/%E7%99%BB%E5%BD%95%E6%A1%88%E4%BE%8B%E5%AF%BC%E5%85%A5%E9%A1%B5%E9%9D%A2%E8%B5%84%E6%BA%90.png" alt="登录案例导入页面资源"></p><h5 id="Ⅲ-login-jsp"><a href="#Ⅲ-login-jsp" class="headerlink" title="Ⅲ login.jsp"></a>Ⅲ login.jsp</h5><p><img data-src="/img/%E7%99%BB%E5%BD%95%E6%A1%88%E4%BE%8Blogin.jsp(1).png" alt="login.jsp"></p><p><img data-src="/img/%E7%99%BB%E5%BD%95%E6%A1%88%E4%BE%8Blogin.jsp(2).png" alt="login.jsp"></p><h5 id="Ⅳ-导入JdbcUtils"><a href="#Ⅳ-导入JdbcUtils" class="headerlink" title="Ⅳ 导入JdbcUtils"></a>Ⅳ 导入JdbcUtils</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sun.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Sunmoon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Connection conn;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//注册驱动</span></span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/jdbc"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(ResultSet resultSet, Statement statement,Connection connection)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (resultSet != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (statement != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(Statement statement,Connection connection)</span></span>&#123;</span><br><span class="line">        release(<span class="keyword">null</span>,statement,connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Ⅴ-LoginServlet"><a href="#Ⅴ-LoginServlet" class="headerlink" title="Ⅴ LoginServlet"></a>Ⅴ LoginServlet</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/LoginServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.接收请求参数</span></span><br><span class="line">        String username = request.getParameter(<span class="string">"username"</span>);</span><br><span class="line">        String password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 2.jdbc查询数据库</span></span><br><span class="line">            <span class="comment">// 2.1 建立连接</span></span><br><span class="line">            Connection connection = JdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">// 2.2 编写sql</span></span><br><span class="line">            <span class="comment">// String sql = "select * from user where username = 'admin' and password = '123'";</span></span><br><span class="line">            String sql = <span class="string">"select * from user where username = '"</span> + username + <span class="string">"' and password = '"</span> + password + <span class="string">"'"</span>;</span><br><span class="line">            System.out.println(sql);</span><br><span class="line">            <span class="comment">// 2.3 获取sql执行对象</span></span><br><span class="line">            Statement statement = connection.createStatement();</span><br><span class="line">            <span class="comment">// 2.4 发送sql并返回结果</span></span><br><span class="line">            ResultSet resultSet = statement.executeQuery(sql);</span><br><span class="line">            <span class="comment">// 3. 判断</span></span><br><span class="line">            <span class="keyword">if</span> (resultSet.next()) &#123; <span class="comment">// 登录成功</span></span><br><span class="line">                <span class="comment">// 从数据库中获取</span></span><br><span class="line">                String loginUsername = resultSet.getString(<span class="string">"username"</span>);</span><br><span class="line">                <span class="comment">// 登录人存入session</span></span><br><span class="line">                request.getSession().setAttribute(<span class="string">"loginUsername"</span>, loginUsername);</span><br><span class="line">                <span class="comment">// 重定向list.jsp</span></span><br><span class="line">                response.sendRedirect(request.getContextPath() + <span class="string">"/list.jsp"</span>);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 登录失败</span></span><br><span class="line">                request.setAttribute(<span class="string">"error"</span>, <span class="string">"用户名或密码错误"</span>);</span><br><span class="line">                request.getRequestDispatcher(<span class="string">"/login.jsp"</span>).forward(request, response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"数据库建立连接失败..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Ⅵ-list-jsp"><a href="#Ⅵ-list-jsp" class="headerlink" title="Ⅵ list.jsp"></a>Ⅵ list.jsp</h5><p><img data-src="/img/%E7%99%BB%E5%BD%95%E6%A1%88%E4%BE%8Blist.jsp.png" alt="登录案例list.jsp"></p><h2 id="三、PreparedStatement"><a href="#三、PreparedStatement" class="headerlink" title="三、PreparedStatement"></a>三、PreparedStatement</h2><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h3><p>我们让用户输入的信息和SQL语句进行字符串拼接。用户输入的内容作为了SQL语句语法的一部分，改变了原有SQL真正的意义，以上问题称为SQL注入。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 此sql原有的含义，是根据用户名和密码 查询</span><br><span class="line">SELECT * FROM USER WHERE username &#x3D; &#39;jack&#39; AND PASSWORD &#x3D; &#39;123&#39;；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 现在我们将用户输入的参数和sql字符语句进行拼接，改了sql原有的含义，只是根据用户名去查询（sql注入）</span><br><span class="line">SELECT * FROM USER WHERE username &#x3D; &#39;jack&#39;# &#39; and password &#x3D; &#39;&#39;；</span><br></pre></td></tr></table></figure><p><strong>解决sql注入问题</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 将实际参数采用？占位符代替</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">USER</span> <span class="keyword">WHERE</span> username = ? <span class="keyword">AND</span> <span class="keyword">PASSWORD</span> = ?</span><br></pre></td></tr></table></figure><p><strong>PreparedSatement使用步骤</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.sql语句使用？占位符代替</span></span><br><span class="line">String sql = <span class="string">"SELECT * FROM USER WHERE username = ? AND PASSWORD = ?"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.conn获取sql预编译执行对象,先把java中sql字符串发送给数据库进行预编译</span></span><br><span class="line">PreparedSatement pstmt = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.给?赋予实际参数</span></span><br><span class="line">pstmt.setString(<span class="number">1</span>,<span class="string">"admin"</span>);</span><br><span class="line">pstmt.setObject(<span class="number">2</span>,<span class="string">"123"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.执行sql并返回结果，不需要再传递sql语句了</span></span><br><span class="line">ResultSet rs = pstmt.executeQuery();</span><br></pre></td></tr></table></figure><h3 id="3-2-改进登录案例"><a href="#3-2-改进登录案例" class="headerlink" title="3.2 改进登录案例"></a>3.2 改进登录案例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/LoginServletPro"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServletPro</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.接收请求参数</span></span><br><span class="line">        String username = request.getParameter(<span class="string">"username"</span>);</span><br><span class="line">        String password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line">        <span class="comment">// 声明对象</span></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 2.jdbc查询数据库</span></span><br><span class="line">            <span class="comment">// 2.1 建立连接</span></span><br><span class="line">            connection = JdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">// 2.2 编写sql语句</span></span><br><span class="line">            String sql = <span class="string">"select * from user where username = ? and password = ?"</span>;</span><br><span class="line">            <span class="comment">// 2.3 获取sql预编译执行对象</span></span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            <span class="comment">// 2.4 设置实际参数</span></span><br><span class="line">            preparedStatement.setString(<span class="number">1</span>, username);</span><br><span class="line">            preparedStatement.setString(<span class="number">2</span>, password);</span><br><span class="line">            <span class="comment">// 2.5 执行sql并返回结果</span></span><br><span class="line">            resultSet = preparedStatement.executeQuery();</span><br><span class="line">            <span class="comment">// 3. 判断</span></span><br><span class="line">            <span class="keyword">if</span> (resultSet.next()) &#123; <span class="comment">// 登录成功</span></span><br><span class="line">                <span class="comment">// 从数据库中获取</span></span><br><span class="line">                String loginUsername = resultSet.getString(<span class="string">"username"</span>);</span><br><span class="line">                <span class="comment">// 登录人存入session</span></span><br><span class="line">                request.getSession().setAttribute(<span class="string">"loginUsername"</span>, loginUsername);</span><br><span class="line">                <span class="comment">// 重定向list.jsp</span></span><br><span class="line">                response.sendRedirect(request.getContextPath() + <span class="string">"/list.jsp"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 登录失败</span></span><br><span class="line">                request.setAttribute(<span class="string">"error"</span>, <span class="string">"用户名或密码错误"</span>);</span><br><span class="line">                request.getRequestDispatcher(<span class="string">"/login.jsp"</span>).forward(request, response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"数据库建立连接失败..."</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.release(resultSet, preparedStatement, connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>PreparedStatement使用步骤小结：</p><ol><li>建立连接</li><li>编写sql，?占位符代替实际参数</li><li>获取sql预编译执行对象</li><li>给?设置实际参数</li><li>执行sql并返回结果</li><li>处理结果</li><li>释放资源</li></ol></blockquote><h3 id="3-3-PreparedStatement优点"><a href="#3-3-PreparedStatement优点" class="headerlink" title="3.3 PreparedStatement优点"></a>3.3 PreparedStatement优点</h3><ul><li>防止sql注入，提高程序的安全性</li><li>减少编译次数，提高程序的效率</li></ul><h2 id="四、连接池"><a href="#四、连接池" class="headerlink" title="四、连接池"></a>四、连接池</h2><h3 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h3><p><img data-src="/img/%E8%BF%9E%E6%8E%A5%E6%B1%A0%E6%A6%82%E8%BF%B01.png" alt="连接池概述"></p><p>连接池其实就是一个容器(集合)，存放数据库连接的容器。</p><p>当系统初始化好后，容器被创建，容器中会申请一些连接对象，当用户来访问数据库时，从容器中获取连接对象，用户访问完之后，会将连接对象归还给容器。</p><p><strong>优点</strong></p><ul><li>节约资源，减轻服务器压力</li><li>提高连接复用性，用户访问高效</li></ul><p><strong>实现</strong></p><p>Java为数据库连接池提供了公共的接口: DataSource ，各个连接池厂商去实现这套接口，提供jar包。</p><p><img data-src="/img/%E8%BF%9E%E6%8E%A5%E6%B1%A0%E6%A6%82%E8%BF%B02.png" alt="连接池概述2"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>DataSource （javax.sql）</span><br><span class="line"><span class="code">功能</span></span><br><span class="line"><span class="bullet">* </span>获取连接：Connection getConnection()</span><br><span class="line"><span class="bullet">* </span>归还连接：connection.close()</span><br><span class="line"><span class="code">连接池底层对connection.close()进行了增强，使用动态代理，不再是释放资源而是归还连接..</span></span><br></pre></td></tr></table></figure><p><strong>常用的连接池技术</strong></p><ul><li>C3P0：数据库连接池技术，使用它的开源项目有Hibernate、Spring等。</li><li><span style="color:red">Druid</span>：(德鲁伊)阿里巴巴提供的数据库连接池技术，是目前最好的数据库连接池。</li><li>HikariCP：日本开发的连接池技术,称之为效率最高的一款连接池,springboot默认的连接池</li></ul><p><strong>其他的连接池</strong>(了解)</p><ul><li>boneCP：数据库连接池技术，体积小速度快。</li><li>DBCP：Apache提供的数据库连接池技术。</li></ul><h3 id="4-2-Druid连接池的使用"><a href="#4-2-Druid连接池的使用" class="headerlink" title="4.2 Druid连接池的使用"></a>4.2 Druid连接池的使用</h3><p> <strong>导入环境(相关jar包)</strong></p><p><img data-src="/img/%E5%AF%BC%E5%85%A5Druid%E8%BF%9E%E6%8E%A5%E6%B1%A0jar%E5%8C%85.png" alt="导入Druid连接池jar包"></p><h4 id="4-2-1-硬编码"><a href="#4-2-1-硬编码" class="headerlink" title="4.2.1 硬编码"></a>4.2.1 硬编码</h4><p>相关参数配置</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>jdbcUrl</td><td>连接数据库的url：mysql : jdbc:mysql://localhost:3306/数据库名</td></tr><tr><td>username</td><td>数据库的用户名</td></tr><tr><td>password</td><td>数据库密码</td></tr><tr><td>driverClassName</td><td>驱动类名。根据url自动识别，这一项可配可不配，如果不配置druid会根据 url自动识别dbType，然后选择相应的driverClassName(建议配置下)</td></tr><tr><td>initialSize</td><td>初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次 getConnection时。(不配置默认为0)</td></tr><tr><td>maxActive</td><td>最大连接池数量(不配置默认为8)</td></tr><tr><td>minIdle</td><td>最小连接池数量</td></tr><tr><td>maxWait</td><td>获取连接时最大等待时间，单位毫秒。</td></tr></tbody></table><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 硬编码方式编写 druid连接池</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建druid连接池对象</span></span><br><span class="line">        DruidDataSource druidDataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.设置数据库基本四项（驱动、url、username、password）</span></span><br><span class="line">        druidDataSource.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        druidDataSource.setUrl(<span class="string">"jdbc:mysql://localhost:3306/jdbc"</span>);</span><br><span class="line">        druidDataSource.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        druidDataSource.setPassword(<span class="string">"root"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置容器参数</span></span><br><span class="line">        druidDataSource.setInitialSize(<span class="number">5</span>); <span class="comment">// 初始化5个连接对象</span></span><br><span class="line">        druidDataSource.setMaxActive(<span class="number">10</span>); <span class="comment">// 最大连接数10个</span></span><br><span class="line">        druidDataSource.setMinIdle(<span class="number">6</span>); <span class="comment">// 空闲期保留6个连接对象、</span></span><br><span class="line">        druidDataSource.setMaxWait(<span class="number">3000</span>); <span class="comment">// 第11个人访问时，等待3秒</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.获取连接对象</span></span><br><span class="line">        DruidPooledConnection connection = druidDataSource.getConnection();</span><br><span class="line">        System.out.println(<span class="string">"使用连接操作数据库："</span>+connection);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.归还到连接池</span></span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面的代码将可能会修改的参数，写死在java代码中，不方便后期项目的迭代和维护…</p></blockquote><h4 id="4-2-2-配置文件"><a href="#4-2-2-配置文件" class="headerlink" title="4.2.2 配置文件"></a>4.2.2 配置文件</h4><blockquote><p>配置文件要求在src根目录下</p></blockquote><blockquote><p><code>druid.properties</code> 配置文件内容</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据库基本四项</span></span><br><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/jdbc</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化个数</span></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">5</span></span><br><span class="line"><span class="comment"># 最大连接个数</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 等待时间，毫秒</span></span><br><span class="line"><span class="attr">maxWait</span>=<span class="string">3000</span></span><br></pre></td></tr></table></figure><p><strong>代码引入配置文件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置文件方式 创建druid连接池对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 通过ClassLoader 加载src目录下的 druid.properties  （固定语法）</span></span><br><span class="line">        InputStream in = Demo2.class.getClassLoader().getResourceAsStream("druid.properties");</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.load(in);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取druid连接对象</span></span><br><span class="line">        DataSource dataSource = DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">11</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 获取连接</span></span><br><span class="line">            Connection connection = dataSource.getConnection();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"第"</span> + i + <span class="string">"次获取连接："</span> + connection);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">10</span>)&#123; <span class="comment">// 归还</span></span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-编写Druid连接池工具类"><a href="#4-3-编写Druid连接池工具类" class="headerlink" title="4.3 编写Druid连接池工具类"></a>4.3 编写Druid连接池工具类</h3><p>我们现在发现每一个执行conn之前，都需要实现创建dataSource对象，这个对象是非常笨重的，一个项目只需要配置一次连接池即可。</p><ul><li><strong>技术分析</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcUtils</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1.初始化连接池对象</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2.提供获取连接池的静态方法</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3.提供获取连接对象的静态方法</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 4.提供释放资源的方法（close方法是归还数据库连接到连接池）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>代码实现</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  连接池工具类，保证一个项目中的连接池对象只创建一次....</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource dataSource;</span><br><span class="line">    <span class="comment">// 1.初始化连接池对象</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 通过ClassLoader 加载src目录下的 druid.properties  （固定语法）</span></span><br><span class="line">            InputStream in = Demo2.class.getClassLoader().getResourceAsStream("druid.properties");</span><br><span class="line">            Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            properties.load(in);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取druid连接对象</span></span><br><span class="line">            dataSource = DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2.提供获取连接池的静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.提供获取连接对象的静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.提供释放资源的方法（conn是归还）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(ResultSet resultSet, Statement statement, Connection connection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (resultSet != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (statement != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(Statement statement, Connection connection)</span> </span>&#123;</span><br><span class="line">        release(<span class="keyword">null</span>, statement, connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、JDBC基础&quot;&gt;&lt;a href=&quot;#一、JDBC基础&quot; class=&quot;headerlink&quot; title=&quot;一、JDBC基础&quot;&gt;&lt;/a&gt;一、JDBC基础&lt;/h2&gt;&lt;h3 id=&quot;1-1-概述&quot;&gt;&lt;a href=&quot;#1-1-概述&quot; class=&quot;headerlink&quot; title=&quot;1.1 概述&quot;&gt;&lt;/a&gt;1.1 概述&lt;/h3&gt;&lt;p&gt;Java 数据库连接（Java DataBase Connectivity）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作用：通过Java语言操作数据库&lt;/li&gt;
&lt;li&gt;本质：是官方（sun公司）定义的一套操作所有关系型数据库的规则&amp;amp;，即接口。各个数据库厂商去实现这套接口，提供数据库驱动jar包。我们可以使用这套接口（JDBC）编程，真正执行的代码是驱动jar包中的实现类。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="JavaWeb" scheme="http://sunmoon.com/categories/JavaWeb/"/>
    
    
      <category term="JDBC" scheme="http://sunmoon.com/tags/JDBC/"/>
    
      <category term="PreparedStatement" scheme="http://sunmoon.com/tags/PreparedStatement/"/>
    
      <category term="Druid连接池" scheme="http://sunmoon.com/tags/Druid%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    
  </entry>
  
</feed>
