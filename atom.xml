<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>清风的博客</title>
  
  <subtitle>山水有相逢，山不动，水不停</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://sunmoon.com/"/>
  <updated>2020-11-06T14:03:59.272Z</updated>
  <id>http://sunmoon.com/</id>
  
  <author>
    <name>Sunmoon</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Lucene&amp;Elasticsearch</title>
    <link href="http://sunmoon.com/2020/11/06/lucene&amp;Elasticsearch/"/>
    <id>http://sunmoon.com/2020/11/06/lucene&amp;Elasticsearch/</id>
    <published>2020-11-06T13:53:57.000Z</published>
    <updated>2020-11-06T14:03:59.272Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-什么是全文检索"><a href="#1-什么是全文检索" class="headerlink" title="1  什么是全文检索"></a>1  什么是全文检索</h1><h2 id="1-1-数据分类"><a href="#1-1-数据分类" class="headerlink" title="1.1  数据分类"></a>1.1  数据分类</h2><p>我们生活中的数据总体分为两种：结构化数据和非结构化数据。</p><p>​    结构化数据：指具有固定格式或有限长度的数据，如数据库，元数据等。</p><p>​    非结构化数据：指不定长或无固定格式的数据，如邮件，word 文档等磁盘上的文件</p><a id="more"></a><h2 id="1-2-结构化数据搜索"><a href="#1-2-结构化数据搜索" class="headerlink" title="1.2  结构化数据搜索"></a>1.2  结构化数据搜索</h2><p>常见的结构化数据也就是数据库中的数据。在数据库中搜索很容易实现，通常都是使用 sql<br>语句进行查询，而且能很快的得到查询结果。<br>为什么数据库搜索很容易？<br>因为数据库中的数据存储是有规律的，有行有列而且数据格式、数据长度都是固定的。</p><h2 id="1-3-非结构化数据查询方法"><a href="#1-3-非结构化数据查询方法" class="headerlink" title="1.3  非结构化数据查询方法"></a>1.3  非结构化数据查询方法</h2><p>（1 ） 顺序扫描法(Serial Scanning)<br>所谓顺序扫描，比如要找内容包含某一个字符串的文件，就是一个文档一个文档的看，对<br>于每一个文档，从头看到尾，如果此文档包含此字符串，则此文档为我们要找的文件，接着看下<br>一个文件，直到扫描完所有的文件。如利用 windows 的搜索也可以搜索文件内容，只是相当的<br>慢。<br>（2 ） 全文检索(Full-text Search)<br>将非结构化数据中的一部分信息提取出来，重新组织，使其变得有一定结构，然后对此有<br>一定结构的数据进行搜索，从而达到搜索相对较快的目的。这部分从非结构化数据中提取出的然<br>后重新组织的信息，我们称之 索引。<br>例如：字典。字典的拼音表和部首检字表就相当于字典的索引，对每一个字的解释是非结<br>构化的，如果字典没有音节表和部首检字表，在茫茫辞海中找一个字只能顺序扫描。然而字的某<br>些信息可以提取出来进行结构化处理，比如读音，就比较结构化，分声母和韵母，分别只有几种<br>可以一一列举，于是将读音拿出来按一定的顺序排列，每一项读音都指向此字的详细解释的页数。<br>我们搜索时按结构化的拼音搜到读音，然后按其指向的页数，便可找到我们的非结构化数据——<br>也即对字的解释。<br>这种先建立索引，再对索引进行搜索的过程就叫全文检索(Full-text Search) 。<br>虽然创建索引的过程也是非常耗时的，但是索引一旦创建就可以多次使用，全文检索主要处<br>理的是查询，所以耗时间创建索引是值得的。</p><h2 id="1-4-如何实现全文检索"><a href="#1-4-如何实现全文检索" class="headerlink" title="1.4  如何实现全文检索"></a>1.4  如何实现全文检索</h2><p>可以使用 Lucene 实现全文检索。Lucene 是 apache 下的一个开放源代码的全文检索引擎工具<br>包。提供了完整的查询引擎和索引引擎，部分文本分析引擎。Lucene 的目的是为软件开发<br>人员提供一个简单易用的工具包，以方便的在目标系统中实现全文检索的功能。</p><h2 id="1-5-全文检索的应用场景"><a href="#1-5-全文检索的应用场景" class="headerlink" title="1.5  全文检索的应用场景"></a>1.5  全文检索的应用场景</h2><p>对于数据量大、数据结构不固定的数据可采用全文检索方式搜索，比如百度、Google 等搜<br>索引擎、论坛站内搜索、电商网站站内搜索等。</p><h1 id="2-Lucene-实现全文检索的流程说明"><a href="#2-Lucene-实现全文检索的流程说明" class="headerlink" title="2 Lucene  实现全文检索的流程说明"></a>2 Lucene  实现全文检索的流程说明</h1><h2 id="2-1-索引和搜索流程图"><a href="#2-1-索引和搜索流程图" class="headerlink" title="2.1  索引和搜索流程图"></a>2.1  索引和搜索流程图</h2><p><img data-src="/assets/1575463885250.png" alt="1575463885250"></p><p>1、绿色表示索引过程，对要搜索的原始内容进行索引构建一个索引库，索引过程包括：</p><p>​    确定原始内容即要搜索的内容–&gt;采集文档–&gt;创建文档–&gt;分析文档–&gt;索引文档</p><p>2、红色表示搜索过程，从索引库中搜索内容，搜索过程包括：</p><p>​    用户通过搜索界面–&gt;创建查询–&gt;执行搜索，从索引库搜索–&gt;渲染搜索结果</p><h2 id="2-2-创建索引"><a href="#2-2-创建索引" class="headerlink" title="2.2  创建索引"></a>2.2  创建索引</h2><p>我们以一个招聘网站的搜索为例，比如说智联招聘，在网站上输入关键字搜索显示的内容不是直接从数据库中来的，而是从索引库中获取的，网站的索引数据需要提前创建的。以下是创建的过程：</p><p>第一步：获得原始文档：就是从mysql数据库中通过sql语句查询需要创建索引的数据</p><p>第二步：创建文档对象，把查询的内容构建成lucene能识别的Document对象<br>获取原始内容的目的是为了索引，在索引前需要将原始内容创建成文档（Document），<br>文档中包括一个一个的域（Field），这个域对应就是表中的列。</p><p>注意：每个 Document 可以有多个 Field，不同的 Document 可以有不同的 Field，同一个<br>Document 可以有相同的 Field（域名和域值都相同）<br>每个文档都有一个唯一的编号，就是文档 id。</p><p>第三步：分析文档<br>将原始内容创建为包含域（Field）的文档（document），需要再对域中的内容进行分析，<br>分析的过程是经过对原始文档提取单词、将字母转为小写、去除标点符号、去除停用词等过<br>程生成最终的语汇单元，可以将语汇单元理解为一个一个的单词。</p><p> <img data-src="/assets/1575723420567.png" alt="1575723420567"></p><p>分好的词会组成索引库中最小的单元：term，一个term由域名和词组成</p><p>第四步：创建索引，</p><p>对所有文档分析得出的语汇单元进行索引，索引的目的是为了搜索，最终要实现只搜索<br>被索引的语汇单元从而找到 Document（文档）。</p><p>注意：创建索引是对语汇单元索引，通过词语找文档，这种索引的结构叫 倒排索引结构。<br>倒排索引结构是根据内容（词语）找文档，如下图：</p><p><img data-src="/assets/1575464886255.png" alt="1575464886255"></p><p>倒排索引结构也叫反向索引结构，包括索引和文档两部分，索引即词汇表，它的规模较小，而文档集合较大。</p><h2 id="2-3-查询索引"><a href="#2-3-查询索引" class="headerlink" title="2.3  查询索引"></a>2.3  查询索引</h2><p>查询索引也是搜索的过程。搜索就是用户输入关键字，从索引（index）中进行搜索的<br>过程。根据关键字搜索索引，根据索引找到对应的文档</p><p>第一步：创建用户接口：用户输入关键字的地方</p><p><img data-src="/assets/1575465355731.png" alt="1575465355731"></p><p>第二步：创建查询 指定查询的域名和关键字 </p><p>第三步：执行查询 </p><p>第四步：渲染结果 （结果内容显示到页面上 关键字需要高亮）</p><p><img data-src="/assets/1575465344229.png" alt="1575465344229"></p><h1 id="3-实战"><a href="#3-实战" class="headerlink" title="3 实战"></a>3 实战</h1><h2 id="3-1-需求说明"><a href="#3-1-需求说明" class="headerlink" title="3.1 需求说明"></a>3.1 需求说明</h2><p>把表中的数据放入到索引库中  </p><p>先把数据导入到mysql 中（随便放到一个database就行），数据如下  </p><p><img data-src="/assets/1575465470422.png" alt="1575465470422"></p><p><img data-src="/assets/1604625834702.png" alt="60462583470"></p><h2 id="3-2-准备开发环境"><a href="#3-2-准备开发环境" class="headerlink" title="3.2 准备开发环境"></a>3.2 准备开发环境</h2><p>第一步：创建一个maven工程 ,刚学过SpringBoot，我们就创建一个SpringBoot项目</p><p><img data-src="/assets/1604627167153.png" alt="60462716715"></p><p>第二步：导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-analyzers-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第三步：创建引导类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"cn.itcast.mapper"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LuceneApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LuceneApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第四步：配置yml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">lucene-demo</span> <span class="comment"># 服务名称</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql:///lucene_db</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure><p>第五步：创建实体类、mapper、service  </p><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"job_info"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobInfo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@KeySql</span>(useGeneratedKeys = <span class="keyword">true</span>) <span class="comment">//使用主键自增策略</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String  companyName;</span><br><span class="line">    <span class="keyword">private</span> String  companyAddr;</span><br><span class="line">    <span class="keyword">private</span> String  jobName;</span><br><span class="line">    <span class="keyword">private</span> String  jobAddr;</span><br><span class="line">    <span class="meta">@Column</span>(name=<span class="string">"salary_min"</span>)  <span class="comment">//列表和属性名的对应</span></span><br><span class="line">    <span class="keyword">private</span> Integer  salary;</span><br><span class="line">    <span class="keyword">private</span> String  url;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JobInfoMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">JobInfo</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service  （只是测试，这个可以省略）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobInfoServiceImpl</span> <span class="keyword">implements</span> <span class="title">JobInfoService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobInfoMapper jobInfoMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;JobInfo&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobInfoMapper.selectAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>功能测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span>(<span class="title">classes</span> </span>= LuceneApplication<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">LuceneTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobInfoService jobInfoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        List&lt;JobInfo&gt; list = jobInfoService.findAll();</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整体结构：</p><p><img data-src="/assets/1604627922838.png" alt="60462792283"></p><h2 id="3-3创建索引"><a href="#3-3创建索引" class="headerlink" title="3.3创建索引"></a>3.3创建索引</h2><p>在test下创建一个包com.sun</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span>(<span class="title">classes</span> </span>= LuceneApplication<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">LuceneTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobInfoService jobInfoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        List&lt;JobInfo&gt; list = jobInfoService.findAll();</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//基于Lucene创建索引</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreateIndex</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//1、指定索引库目录</span></span><br><span class="line">        FSDirectory directory = FSDirectory.open(<span class="keyword">new</span> File(<span class="string">"D:\\worksoft\\luceneindex\\java4"</span>));</span><br><span class="line">        <span class="comment">//2、索引写入对象的配置信息对象</span></span><br><span class="line">        <span class="comment">//指定分词器</span></span><br><span class="line">        StandardAnalyzer analyzer = <span class="keyword">new</span> StandardAnalyzer();</span><br><span class="line">        IndexWriterConfig config = <span class="keyword">new</span> IndexWriterConfig(Version.LATEST,analyzer);</span><br><span class="line">        <span class="comment">//3、创建索引 写入对象</span></span><br><span class="line">        IndexWriter indexWriter = <span class="keyword">new</span> IndexWriter(directory,config);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、准备原始数据（数据库中的数据）</span></span><br><span class="line">        List&lt;JobInfo&gt; list = jobInfoService.findAll();</span><br><span class="line">        <span class="comment">//遍历原始数据，创建文档对象 （每一条数据库数据都是一个文档对象）</span></span><br><span class="line">        <span class="keyword">for</span> (JobInfo jobInfo : list) &#123;</span><br><span class="line">            <span class="comment">//创建文档对象</span></span><br><span class="line">            Document document = <span class="keyword">new</span> Document();</span><br><span class="line">            <span class="comment">//指定文档对象中存储的内容   参数一：字段名称 参数二：字段内容 参数三：是否存储字段到索引库</span></span><br><span class="line">            document.add(<span class="keyword">new</span> LongField(<span class="string">"id"</span>,jobInfo.getId(), Field.Store.YES));</span><br><span class="line">            <span class="comment">//TextField 代表字符串类型，并且是可以分次的字符串</span></span><br><span class="line">            document.add(<span class="keyword">new</span> TextField(<span class="string">"companyName"</span>,jobInfo.getCompanyName(), Field.Store.YES));</span><br><span class="line">            document.add(<span class="keyword">new</span> TextField(<span class="string">"companyAddr"</span>,jobInfo.getCompanyAddr(), Field.Store.YES));</span><br><span class="line">            document.add(<span class="keyword">new</span> TextField(<span class="string">"jobName"</span>,jobInfo.getJobName(), Field.Store.YES));</span><br><span class="line">            document.add(<span class="keyword">new</span> TextField(<span class="string">"jobAddr"</span>,jobInfo.getJobAddr(), Field.Store.YES));</span><br><span class="line">            document.add(<span class="keyword">new</span> IntField(<span class="string">"salary"</span>,jobInfo.getSalary(), Field.Store.YES));</span><br><span class="line">            <span class="comment">//StringField 代表字符串类型，并且不分词</span></span><br><span class="line">            document.add(<span class="keyword">new</span> StringField(<span class="string">"url"</span>,jobInfo.getUrl(), Field.Store.YES));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//添加到索引库写对象</span></span><br><span class="line">            indexWriter.addDocument(document);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        indexWriter.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4查询索引"><a href="#3-4查询索引" class="headerlink" title="3.4查询索引"></a>3.4查询索引</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuery</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">//1、指定索引库目录</span></span><br><span class="line">    FSDirectory directory = FSDirectory.open(<span class="keyword">new</span> File(<span class="string">"D:\\worksoft\\luceneindex\\java4"</span>));</span><br><span class="line">    <span class="comment">//2、创建读取索引库对象</span></span><br><span class="line">    DirectoryReader reader = DirectoryReader.open(directory);</span><br><span class="line">    <span class="comment">//3、创建查询索引库对象</span></span><br><span class="line">    IndexSearcher searcher = <span class="keyword">new</span> IndexSearcher(reader);</span><br><span class="line">    <span class="comment">//4、指定查询对象</span></span><br><span class="line">    TermQuery query = <span class="keyword">new</span> TermQuery(<span class="keyword">new</span> Term(<span class="string">"companyName"</span>,<span class="string">"北京"</span>));</span><br><span class="line">    <span class="comment">//4、执行查询  参数一：查询对象 参数二：展示的数据条数</span></span><br><span class="line">    TopDocs topDocs = searcher.search(query, <span class="number">10</span>);</span><br><span class="line">    System.out.println(<span class="string">"满足条件的数据个数"</span>+topDocs.totalHits);</span><br><span class="line">    <span class="comment">//5、展示查询结果集</span></span><br><span class="line">    ScoreDoc[] scoreDocs = topDocs.scoreDocs;</span><br><span class="line">    <span class="keyword">for</span> (ScoreDoc scoreDoc : scoreDocs) &#123;</span><br><span class="line">        <span class="comment">//获取文档id</span></span><br><span class="line">        <span class="keyword">int</span> docId = scoreDoc.doc;</span><br><span class="line">        <span class="comment">//获取文档对象</span></span><br><span class="line">        Document document = searcher.doc(docId);</span><br><span class="line">        System.out.println( <span class="string">"id:"</span>+ document.get(<span class="string">"id"</span>));</span><br><span class="line">        System.out.println( <span class="string">"companyName:"</span>+ document.get(<span class="string">"companyName"</span>));</span><br><span class="line">        System.out.println( <span class="string">"companyAddr:"</span>+ document.get(<span class="string">"companyAddr"</span>));</span><br><span class="line">        System.out.println( <span class="string">"salary:"</span>+ document.get(<span class="string">"salary"</span>));</span><br><span class="line">        System.out.println( <span class="string">"url:"</span>+ document.get(<span class="string">"url"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看结果你会发现，居然没有数据，如果把查询的关键字“北京”那里改为“北”或“京”就可以，原因是因为中文会一个字一个字的分词，显然是不合适的，所以我们需要使用可以合理分词的分词器，其中最有名的是IKAnalyzer分词器</p><h2 id="3-5中文分词器的使用"><a href="#3-5中文分词器的使用" class="headerlink" title="3.5中文分词器的使用"></a>3.5中文分词器的使用</h2><p>使用方式：</p><p>第一步：导依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.janeluo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ikanalyzer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2012_u6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二步：可以添加配置文件</p><p><img data-src="/assets/1575466190696.png" alt="1575466190696"></p><p>放入到resources文件夹中。</p><p><strong>加载扩展词和停用词：</strong></p><p>扩展词：随着语言发展，产生的新词就是扩展词。 例如：奥利给</p><p>停用词：不能用于搜索的词条。  例如：语气助词 的 呢</p><p>第三步 创建索引时使用IKanalyzer</p><p><img data-src="/assets/1604631318099.png" alt="60463131809"></p><p>把原来的索引数据删除，再重新生成索引文件，再使用关键字“北京”就可以查询到结果了</p><p>考虑一个问题：一个大型网站中的索引数据会很庞大的，所以使用lucene这种原生的写代码的方式就不合适了，所以需要借助一个成熟的项目来实现，目前比较有名是solr和elasticSearch，我们今天学习elasticSearch的使用。 </p><h1 id="4-Elasticsearch介绍和安装"><a href="#4-Elasticsearch介绍和安装" class="headerlink" title="4.Elasticsearch介绍和安装"></a>4.Elasticsearch介绍和安装</h1><p>Elasticsearch是一个需要安装配置的软件。</p><h2 id="4-1-简介"><a href="#4-1-简介" class="headerlink" title="4.1.简介"></a>4.1.简介</h2><h3 id="4-1-1-Elastic"><a href="#4-1-1-Elastic" class="headerlink" title="4.1.1.Elastic"></a>4.1.1.Elastic</h3><p>Elastic官网：<a href="https://www.elastic.co/cn/" target="_blank" rel="noopener">https://www.elastic.co/cn/</a></p><p><img data-src="/assets/1526464088259.png" alt="1526464088259"></p><p>Elastic有一条完整的产品线：Elasticsearch、Logstash、Kibana等，前面说的三个就是大家常说的ELK技术栈。</p><p> <img data-src="/assets/1526464220142.png" alt="1526464220142"></p><h3 id="4-1-2-Elasticsearch"><a href="#4-1-2-Elasticsearch" class="headerlink" title="4.1.2.Elasticsearch"></a>4.1.2.Elasticsearch</h3><p>Elasticsearch官网：<a href="https://www.elastic.co/cn/products/elasticsearch" target="_blank" rel="noopener">https://www.elastic.co/cn/products/elasticsearch</a></p><p><img data-src="/assets/1526464283575.png" alt="1526464283575"></p><p>如上所述，Elasticsearch具备以下特点：</p><ul><li>分布式，无需人工搭建集群（solr就需要人为配置，使用Zookeeper作为注册中心）</li><li>Restful风格，一切API都遵循Rest原则，容易上手</li><li>近实时搜索，数据更新在Elasticsearch中几乎是完全同步的。</li></ul><h3 id="4-1-3-版本"><a href="#4-1-3-版本" class="headerlink" title="4.1.3.版本"></a>4.1.3.版本</h3><p>目前Elasticsearch最新的版本是6.2.4，我们就使用的是2019年4月份的版本</p><p>需要JDK1.8及以上</p><p>总结：elasticsearch搜索服务器。是在Lucene技术的基础上进行封装， 完成==大数据==量数据搜索功能。</p><h2 id="4-2-安装和配置"><a href="#4-2-安装和配置" class="headerlink" title="4.2.安装和配置"></a>4.2.安装和配置</h2><p>为了快速看到效果我们直接在本地window下安装Elasticsearch。环境要求：JDK8及以上版本<br>第一步：把今天资料文件夹中准备好的软件放到<strong>一个没有中文没有空格</strong>的位置，解压即可</p><p><img data-src="/assets/1575454022284.png" alt="1575454022284"></p><p>第二步：修改配置文件</p><p>1、修改索引数据和日志数据存储的路径</p><p><img data-src="/assets/1575454096418.png" alt="1575454096418"></p><p>第33行和37行，修改完记得把注释打开</p><p><img data-src="/assets/1604632131955.png" alt="60463213195"></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">path.data</span>: <span class="string">d:\class\es\data</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Path to log files:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="meta">path.logs</span>: <span class="string">d:\class\es\logs</span></span><br></pre></td></tr></table></figure><p>第三步：进入bin目录中直接双击 图下的命令文件。</p><p><img data-src="/assets/1575454114980.png" alt="1575454114980"></p><p>如果启动失败（估计好多同学都会启动失败的），需要修改虚拟机内存的大小<br>找到jvm.options文件 如图修改</p><p><img data-src="/assets/1575454129972.png" alt="1575454129972"></p><h2 id="4-3-访问"><a href="#4-3-访问" class="headerlink" title="4.3.访问"></a>4.3.访问</h2><p>启动后台输出如下</p><p><img data-src="/assets/1575454150869.png" alt="1575454150869"></p><p>可以看到绑定了两个端口:<br>9300：集群节点间通讯接口，接收tcp协议<br>9200：客户端访问接口，接收Http协议<br>我们在浏览器中访问：<a href="http://127.0.0.1:9200" target="_blank" rel="noopener">http://127.0.0.1:9200</a></p><p><img data-src="/assets/1604632275669.png" alt="1575454179087"></p><p>自己安装一下谷歌elasticsearch head 插件</p><p><img data-src="/assets/1604632425002.png" alt="60463242500"></p><h2 id="4-4-安装kibana"><a href="#4-4-安装kibana" class="headerlink" title="4.4.安装kibana"></a>4.4.安装kibana</h2><h3 id="4-4-1-什么是Kibana"><a href="#4-4-1-什么是Kibana" class="headerlink" title="4.4.1.什么是Kibana"></a>4.4.1.什么是Kibana</h3><p><img data-src="/assets/1526481256534.png" alt="1526481256534"></p><p>Kibana是一个基于Node.js的Elasticsearch索引库数据统计工具，可以利用Elasticsearch的聚合功能，生成各种图表，如柱形图，线状图，饼图等。</p><p>而且还提供了操作Elasticsearch索引数据的控制台，并且提供了一定的API提示，非常有利于我们学习Elasticsearch的语法。</p><h3 id="4-4-2-安装"><a href="#4-4-2-安装" class="headerlink" title="4.4.2.安装"></a>4.4.2.安装</h3><p>因为Kibana依赖于node，需要在windows下先安装Node.js，双击运行课前资料提供的node.js的安装包：</p><p><img data-src="/assets/1555583973406.png" alt="1555583973406"> </p><p>一路下一步即可安装成功，然后在任意黑窗口输入名：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">node</span> <span class="title">-v</span></span><br></pre></td></tr></table></figure><p>可以查看到node版本，如下：</p><p><img data-src="/assets/1555584029808.png" alt="1555584029808"> </p><p>然后安装kibana，最新版本与elasticsearch保持一致，也是6.2.4</p><p> <img data-src="/assets/1526481608877.png" alt="1526481608877"></p><p>解压即可：</p><p> <img data-src="/assets/1526482581793.png" alt="1526482581793"></p><h3 id="4-4-3-配置运行"><a href="#4-4-3-配置运行" class="headerlink" title="4.4.3.配置运行"></a>4.4.3.配置运行</h3><blockquote><p>配置</p></blockquote><p>进入安装目录下的config目录，修改kibana.yml文件：</p><p>修改elasticsearch服务器的地址：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">elasticsearch.url:</span> <span class="string">"http://127.0.0.1:9200"</span></span><br></pre></td></tr></table></figure><blockquote><p>运行</p></blockquote><p>进入安装目录下的bin目录：</p><p> <img data-src="/assets/1526482642658.png" alt="1526482642658"></p><p>双击运行：</p><p><img data-src="/assets/1526482862080.png" alt="1526482862080"></p><p>发现kibana的监听端口是5601</p><p>我们访问：<a href="http://127.0.0.1:5601" target="_blank" rel="noopener">http://127.0.0.1:5601</a></p><p><img data-src="/assets/1526482926798.png" alt="1526482926798"></p><h3 id="4-4-4-控制台"><a href="#4-4-4-控制台" class="headerlink" title="4.4.4.控制台"></a>4.4.4.控制台</h3><p>选择左侧的DevTools菜单，即可进入控制台页面：</p><p> <img data-src="/assets/1604632766480.png" alt="1526483064339"></p><p>在页面右侧，我们就可以输入请求，访问Elasticsearch了。</p><p><img data-src="/assets/1526483200872.png" alt="1526483200872"></p><h2 id="4-5-安装ik分词器"><a href="#4-5-安装ik分词器" class="headerlink" title="4.5.安装ik分词器"></a>4.5.安装ik分词器</h2><p>Lucene的IK分词器早在2012年已经没有维护了，现在我们要使用的是在其基础上维护升级的版本，并且开发为Elasticsearch的集成插件了，与Elasticsearch一起维护升级，版本也保持一致，最新版本：6.2.4</p><p><a href="https://github.com/medcl/elasticsearch-analysis-ik" target="_blank" rel="noopener">https://github.com/medcl/elasticsearch-analysis-ik</a></p><h3 id="4-5-1-安装"><a href="#4-5-1-安装" class="headerlink" title="4.5.1.安装"></a>4.5.1.安装</h3><ol><li>解压elasticsearch-analysis-ik-6.2.4.zip后,将解压后的文件夹拷贝到elasticsearch-6.2.4\plugins<br> 下，并重命名文件夹为ik<br> 最后如图</li></ol><p><img data-src="/assets/1575454301632.png" alt="1575454301632"></p><ol start="2"><li>重新启动ElasticSearch，即可加载IK分词器</li></ol><h3 id="4-5-2-测试"><a href="#4-5-2-测试" class="headerlink" title="4.5.2.测试"></a>4.5.2.测试</h3><p>大家先不管语法，我们先测试一波。</p><p>在kibana控制台输入下面的请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span>, </span><br><span class="line">  <span class="attr">"text"</span>: <span class="string">"我爱北京天安门"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行得到结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tokens"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"我"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"CN_CHAR"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"爱"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"CN_CHAR"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"北京"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">4</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"CN_WORD"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"天安门"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">4</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">7</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"CN_WORD"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">3</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"天安"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">4</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">6</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"CN_WORD"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">4</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"token"</span>: <span class="string">"门"</span>,</span><br><span class="line">      <span class="attr">"start_offset"</span>: <span class="number">6</span>,</span><br><span class="line">      <span class="attr">"end_offset"</span>: <span class="number">7</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"CN_CHAR"</span>,</span><br><span class="line">      <span class="attr">"position"</span>: <span class="number">5</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-7-API"><a href="#4-7-API" class="headerlink" title="4.7.API"></a>4.7.API</h2><p>Elasticsearch提供了Rest风格的API，即http请求接口，而且也提供了各种语言的客户端API</p><h3 id="4-7-1-Rest风格API"><a href="#4-7-1-Rest风格API" class="headerlink" title="4.7.1.Rest风格API"></a>4.7.1.Rest风格API</h3><p>文档地址：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/getting-started.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/getting-started.html</a></p><p>从官网中查找方式如下:</p><p><img data-src="/assets/1575454458023.png" alt="1575454458023"></p><h3 id="4-7-2-客户端API"><a href="#4-7-2-客户端API" class="headerlink" title="4.7.2.客户端API"></a>4.7.2.客户端API</h3><p>Elasticsearch支持的客户端非常多：<a href="https://www.elastic.co/guide/en/elasticsearch/client/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/client/index.html</a></p><p>  <img data-src="/assets/1526518624942.png" alt="1526518624942"></p><p>点击Java Rest Client后，你会发现又有两个：</p><p> <img data-src="/assets/1526518662013.png" alt="1526518662013"></p><p>Low Level Rest Client是低级别封装，提供一些基础功能，但更灵活</p><p>High Level Rest Client，是在Low  Level Rest Client基础上进行的高级别封装，功能更丰富和完善，而且API会变的简单</p><p> <img data-src="/assets/1526518875072.png" alt="1526518875072"></p><h3 id="4-7-3-如何学习"><a href="#4-7-3-如何学习" class="headerlink" title="4.7.3.如何学习"></a>4.7.3.如何学习</h3><p>建议先学习Rest风格API，了解发起请求的底层实现，请求体格式等。</p><h1 id="5-使用kibana对索引库操作"><a href="#5-使用kibana对索引库操作" class="headerlink" title="5.使用kibana对索引库操作"></a>5.使用kibana对索引库操作</h1><h2 id="5-1-基本概念"><a href="#5-1-基本概念" class="headerlink" title="5.1.基本概念"></a>5.1.基本概念</h2><p>Elasticsearch也是基于Lucene的全文检索库，本质也是存储数据，很多概念与MySQL类似的。</p><p>对比关系：</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">索引库（indices）<span class="comment">---------------------------------Database 数据库</span></span><br><span class="line"></span><br><span class="line">    类型（<span class="keyword">type</span>）<span class="comment">----------------------------------Table 数据表</span></span><br><span class="line"></span><br><span class="line"> 文档（<span class="type">Document</span>）<span class="comment">---------------------------------Row 行</span></span><br><span class="line"></span><br><span class="line">   域字段（<span class="type">Field</span>）<span class="comment">--------------------------------Columns 列 </span></span><br><span class="line">     </span><br><span class="line">映射配置（mappings）<span class="comment">-------------------------------每个列的约束（类型、长度）</span></span><br></pre></td></tr></table></figure><p>详细说明：</p><table><thead><tr><th>概念</th><th>说明</th></tr></thead><tbody><tr><td>索引库（indices)</td><td>indices是index的复数，代表许多的索引，</td></tr><tr><td>类型（type）</td><td>类型是模拟mysql中的table概念，一个索引库下可以有不同类型的索引，类似数据库中的表概念。数据库表中有表结构，也就是表中每个字段的约束信息；索引库的类型中对应表结构的叫做<code>映射(mapping)</code>，用来定义每个字段的约束。</td></tr><tr><td>文档（document）</td><td>存入索引库原始的数据。比如每一条商品信息，就是一个文档</td></tr><tr><td>字段（field）</td><td>文档中的属性</td></tr><tr><td>映射配置（mappings）</td><td>字段的数据类型、属性、是否索引、是否存储等特性</td></tr></tbody></table><h2 id="5-2-创建索引库"><a href="#5-2-创建索引库" class="headerlink" title="5.2.创建索引库"></a>5.2.创建索引库</h2><h3 id="5-2-1-语法"><a href="#5-2-1-语法" class="headerlink" title="5.2.1.语法"></a>5.2.1.语法</h3><p>Elasticsearch采用Rest风格API，因此其API就是一次http请求，你可以用任何工具发起http请求</p><p>创建索引的请求格式：</p><ul><li><p>请求方式：PUT</p></li><li><p>请求路径：/索引库名</p></li><li><p>请求参数：json格式：</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"settings"</span>: &#123;</span><br><span class="line">        <span class="attr">"属性名"</span>: <span class="string">"属性值"</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  settings：就是索引库设置，其中可以定义索引库的各种属性，目前我们可以不设置，都走默认。</p></li></ul><h3 id="5-2-3-使用kibana创建"><a href="#5-2-3-使用kibana创建" class="headerlink" title="5.2.3.使用kibana创建"></a>5.2.3.使用kibana创建</h3><p>kibana的控制台，可以对http请求进行简化，示例：</p><p><img data-src="/assets/1604645660289.png" alt="1553005898346"></p><p>相当于是省去了elasticsearch的服务器地址</p><p>而且还有语法提示，非常舒服。</p><h2 id="5-3-查看索引库"><a href="#5-3-查看索引库" class="headerlink" title="5.3.查看索引库"></a>5.3.查看索引库</h2><blockquote><p>语法</p></blockquote><p>Get请求可以帮我们查看索引信息，格式：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">GET</span> /索引库名</span><br></pre></td></tr></table></figure><p><img data-src="/assets/1604645729018.png" alt="60464572901"></p><h2 id="5-4-删除索引库"><a href="#5-4-删除索引库" class="headerlink" title="5.4.删除索引库"></a>5.4.删除索引库</h2><p>删除索引使用DELETE请求</p><blockquote><p>语法</p></blockquote><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> /索引库名</span><br></pre></td></tr></table></figure><blockquote><p>示例</p></blockquote><p><img data-src="/assets/1604645757348.png" alt="1526520267195"></p><p>再次查看heima：</p><p><img data-src="/assets/1604645801945.png" alt="1526520309064"></p><p>当然，我们也可以用HEAD请求，查看索引是否存在：</p><p> <img data-src="/assets/1604645821091.png" alt="60464582109"></p><h1 id="6-使用kibana对类型及映射操作"><a href="#6-使用kibana对类型及映射操作" class="headerlink" title="6.使用kibana对类型及映射操作"></a>6.使用kibana对类型及映射操作</h1><p>有了<code>索引库</code>，等于有了数据库中的<code>database</code>。接下来就需要索引库中的<code>类型</code>了，也就是数据库中的<code>表</code>。创建数据库表需要设置字段约束，索引库也一样，在创建索引库的类型时，需要知道这个类型下有哪些字段，每个字段有哪些<strong>约束</strong>信息，这就叫做<code>字段映射(mapping)</code></p><p>字段的约束我们在学习Lucene中我们都见到过，包括到不限于：</p><ul><li>字段的数据类型</li><li>是否要存储</li><li>是否要索引</li><li>是否分词</li><li>分词器是什么</li></ul><p>我们一起来看下创建的语法。</p><h2 id="6-1-创建字段映射"><a href="#6-1-创建字段映射" class="headerlink" title="6.1.创建字段映射"></a>6.1.创建字段映射</h2><blockquote><p>语法</p></blockquote><p>请求方式依然是PUT</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PUT <span class="regexp">/索引库名/_mapping/</span>类型名称</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"properties"</span>: &#123;</span><br><span class="line">    <span class="string">"字段名"</span>: &#123;</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"类型"</span>,</span><br><span class="line">      <span class="string">"index"</span>: <span class="literal">true</span>，</span><br><span class="line">      <span class="string">"store"</span>: <span class="literal">true</span>，</span><br><span class="line">      <span class="string">"analyzer"</span>: <span class="string">"分词器"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>类型名称：就是前面将的type的概念，类似于数据库中的表<br>  字段名：任意填写，下面指定许多属性，例如：</p><ul><li><p>type：类型，可以是text、keyword、long、short、date、integer、object等</p><p>text：字符串类型，可以分词</p><p>keyword：字符串类型，不分词</p></li><li><p>index：是否索引，默认为true</p></li><li><p>store：是否存储，默认为false</p></li><li><p>analyzer：分词器，这里的<code>ik_max_word</code>即使用ik分词器</p></li></ul></li></ul><blockquote><p>示例</p></blockquote><p>发起请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PUT heima</span><br><span class="line"></span><br><span class="line">PUT heima/_mapping/goods</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"properties"</span>: &#123;</span><br><span class="line">    <span class="attr">"title"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">      <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"images"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">      <span class="attr">"index"</span>: <span class="string">"false"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"price"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"float"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：需要先建立索引库，在建映射类型</strong></p><p>响应结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"acknowledged"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述案例中，就给heima这个索引库添加了一个名为<code>goods</code>的类型，并且在类型中设置了3个字段：</p><ul><li>title：商品标题</li><li>images：商品图片</li><li>price：商品价格</li></ul><p>并且给这些字段设置了一些属性，至于这些属性对应的含义，我们在后续会详细介绍。</p><h2 id="6-2-查看映射关系"><a href="#6-2-查看映射关系" class="headerlink" title="6.2.查看映射关系"></a>6.2.查看映射关系</h2><blockquote><p>语法：</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">GET</span> /索引库名/_mapping</span><br></pre></td></tr></table></figure><p>查看某个索引库中的所有类型的映射。如果要查看某个类型映射，可以再路径后面跟上类型名称。即：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">GET</span> /索引库名/_mapping/映射名</span><br></pre></td></tr></table></figure><blockquote><p>示例：</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">GET</span> /heima/_mapping</span><br></pre></td></tr></table></figure><blockquote><p>响应：</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"heima"</span>: &#123;</span><br><span class="line">    <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">      <span class="attr">"goods"</span>: &#123;</span><br><span class="line">        <span class="attr">"properties"</span>: &#123;</span><br><span class="line">          <span class="attr">"images"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">            <span class="attr">"index"</span>: <span class="literal">false</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"price"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"float"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"title"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">            <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <img data-src="/assets/1604646562334.png" alt="60464656233"></p><h2 id="6-3-映射属性详解"><a href="#6-3-映射属性详解" class="headerlink" title="6.3.映射属性详解"></a>6.3.映射属性详解</h2><h4 id="1）type"><a href="#1）type" class="headerlink" title="1）type"></a>1）type</h4><p>Elasticsearch中支持的数据类型非常丰富：</p><p> <img data-src="/assets/1526523877042.png" alt="1526523877042"></p><p>我们说几个关键的：</p><ul><li><p>String类型，又分两种：</p><ul><li>text：可分词，不可参与聚合</li><li>keyword：不可分词，数据会作为完整字段进行匹配，可以参与聚合</li></ul></li><li><p>Numerical：数值类型，分两类</p><ul><li>基本数据类型：long、interger、short、byte、double、float、half_float</li></ul></li><li><p>Date：日期类型</p><p>  elasticsearch可以对日期格式化为字符串存储，但是建议我们存储为毫秒值，存储为long，节省空间。</p></li><li><p>Array：数组类型</p><ul><li>进行匹配时，任意一个元素满足，都认为满足</li><li>排序时，如果升序则用数组中的最小值来排序，如果降序则用数组中的最大值来排序</li></ul></li><li><p>Object：对象</p></li></ul><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="symbol">    name:</span><span class="string">"Jack"</span>,</span><br><span class="line"><span class="symbol">    age:</span><span class="number">21</span>,    </span><br><span class="line"><span class="symbol">   girl:</span>&#123;</span><br><span class="line"><span class="symbol">name:</span> <span class="string">"Rose"</span>,</span><br><span class="line"><span class="symbol">        age:</span><span class="number">21</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果存储到索引库的是对象类型，例如上面的girl，会把girl编程两个字段：girl.name和girl.age</p><h4 id="2）index"><a href="#2）index" class="headerlink" title="2）index"></a>2）index</h4><p>index影响字段的索引情况。</p><ul><li>true：字段会被索引，则可以用来进行搜索过滤。默认值就是true</li><li>false：字段不会被索引，不能用来搜索</li></ul><p>index的默认值就是true，也就是说你不进行任何配置，所有字段都会被索引。</p><p>但是有些字段是我们不希望被索引的，比如商品的图片信息，就需要手动设置index为false。</p><h4 id="3）store"><a href="#3）store" class="headerlink" title="3）store"></a>3）store</h4><p>是否将数据进行额外存储。</p><p>在学习lucene时，我们知道如果一个字段的store设置为false，那么在文档列表中就不会有这个字段的值，用户的搜索结果中不会显示出来。</p><p>但是在Elasticsearch中，即便store设置为false，也可以搜索到结果。</p><p>原因是Elasticsearch在创建文档索引时，会将文档中的原始数据备份，保存到一个叫做<code>_source</code>的属性中。而且我们可以通过过滤<code>_source</code>来选择哪些要显示，哪些不显示。</p><p>而如果设置store为true，就会在<code>_source</code>以外额外存储一份数据，多余，因此一般我们都会将store设置为false，事实上，<strong>store的默认值就是false。</strong></p><p><img data-src="/assets/1526525159369.png" alt="1526525159369"></p><h2 id="6-4-一次创建索引库和类型"><a href="#6-4-一次创建索引库和类型" class="headerlink" title="6.4.一次创建索引库和类型"></a>6.4.一次创建索引库和类型</h2><p>刚才 的案例中我们是把创建索引库和类型分开来做，其实也可以在创建索引库的同时，直接制定索引库中的类型，基本语法：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">put /索引库名</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"settings"</span>:&#123;</span><br><span class="line">        <span class="attr">"索引库属性名"</span>:<span class="string">"索引库属性值"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"mappings"</span>:&#123;</span><br><span class="line">        <span class="attr">"类型名"</span>:&#123;</span><br><span class="line">            <span class="attr">"properties"</span>:&#123;</span><br><span class="line">                <span class="attr">"字段名"</span>:&#123;</span><br><span class="line">                    <span class="attr">"映射属性名"</span>:<span class="string">"映射属性值"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来试一下吧：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">PUT heima2</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"settings"</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"goods"</span>:&#123;</span><br><span class="line">      <span class="attr">"properties"</span>: &#123;</span><br><span class="line">        <span class="attr">"images"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">          <span class="attr">"index"</span>: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"price"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"float"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"title"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">          <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"acknowledged"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"shards_acknowledged"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"index"</span>: <span class="string">"heima2"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们查看下映射：</p><p><img data-src="/assets/1604646947042.png" alt="1553044770207"></p><h1 id="7-使用kibana对文档操作"><a href="#7-使用kibana对文档操作" class="headerlink" title="7.使用kibana对文档操作"></a>7.使用kibana对文档操作</h1><p>文档，即索引库中某个类型下的数据，会根据规则创建索引，将来用来搜索。可以类比做数据库中的每一行数据。</p><h2 id="7-1-新增文档"><a href="#7-1-新增文档" class="headerlink" title="7.1.新增文档"></a>7.1.新增文档</h2><h3 id="7-1-1-新增并随机生成id"><a href="#7-1-1-新增并随机生成id" class="headerlink" title="7.1.1.新增并随机生成id"></a>7.1.1.新增并随机生成id</h3><p>通过POST请求，可以向一个已经存在的索引库中添加文档数据。</p><blockquote><p>语法：</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST <span class="regexp">/索引库名/</span>类型名</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"key"</span>:<span class="string">"value"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>示例：</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /heima/goods/</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"title"</span>:<span class="string">"小米手机"</span>,</span><br><span class="line">    <span class="attr">"images"</span>:<span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">    <span class="attr">"price"</span>:<span class="number">2699.00</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"heima"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"-ztrnHUBKzkPCnWAsfcJ"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"result"</span>: <span class="string">"created"</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"_seq_no"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"_primary_term"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="/assets/1604647153018.png" alt="60464715301"></p><p>可以看到结果显示为：<code>created</code>，应该是创建成功了。</p><p>另外，需要注意的是，在响应结果中有个<code>_id</code>字段，这个就是这条文档数据的<code>唯一标示</code>，以后的增删改查都依赖这个id作为唯一标示。</p><p>可以看到id的值为：<code>r9c1KGMBIhaxtY5rlRKv</code>,这里我们新增时没有指定id，所以是ES帮我们随机生成的id。</p><h2 id="7-2-查看文档"><a href="#7-2-查看文档" class="headerlink" title="7.2.查看文档"></a>7.2.查看文档</h2><p>根据rest风格，新增是post，查询应该是get，不过查询一般都需要条件，这里我们把刚刚生成数据的id带上。</p><p>通过kibana查看数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET heima/goods/-ztrnHUBKzkPCnWAsfcJ</span><br></pre></td></tr></table></figure><p>查看结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"heima"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"-ztrnHUBKzkPCnWAsfcJ"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"found"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"_source"</span>: &#123;</span><br><span class="line">    <span class="attr">"title"</span>: <span class="string">"小米手机"</span>,</span><br><span class="line">    <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">    <span class="attr">"price"</span>: <span class="number">2699</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>_source</code>：源文档信息，所有的数据都在里面。</li><li><code>_id</code>：这条文档的唯一标示</li></ul><p><img data-src="/assets/1604647240450.png" alt="60464724045"></p><h2 id="7-3-新增文档并自定义id"><a href="#7-3-新增文档并自定义id" class="headerlink" title="7.3.新增文档并自定义id"></a>7.3.新增文档并自定义id</h2><p>如果我们想要自己新增的时候指定id，可以这么做：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /索引库名/类型<span class="string">/id</span>值</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST heima/goods/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>:<span class="string">"大米手机"</span>,</span><br><span class="line">    <span class="attr">"images"</span>:<span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">    <span class="attr">"price"</span>:<span class="number">3699.00</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到的数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"heima"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"result"</span>: <span class="string">"created"</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"_seq_no"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"_primary_term"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="/assets/1604647311353.png" alt="60464731135"></p><p><img data-src="/assets/1604647341026.png" alt="60464734102"></p><h2 id="7-4-修改数据"><a href="#7-4-修改数据" class="headerlink" title="7.4.修改数据"></a>7.4.修改数据</h2><p>把刚才新增的请求方式改为PUT，就是修改了。不过修改必须指定id，</p><ul><li>id对应文档存在，则修改</li><li>id对应文档不存在，则新增</li></ul><p>比如，我们把使用id为3，不存在，则应该是新增：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT heima/goods/2</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>:<span class="string">"红米手机"</span>,</span><br><span class="line">    <span class="attr">"images"</span>:<span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">    <span class="attr">"price"</span>:<span class="number">3699.00</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"heima"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"2"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"result"</span>: <span class="string">"created"</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"_seq_no"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"_primary_term"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到是<code>created</code>，是新增。</p><p><img data-src="/assets/1604647469478.png" alt="60464746947"></p><p>我们再次执行刚才的请求，不过把数据改一下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT heima/goods/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"title"</span>:<span class="string">"红米手机"</span>,</span><br><span class="line">    <span class="attr">"images"</span>:<span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">    <span class="attr">"price"</span>:<span class="number">3699.00</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"heima"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"result"</span>: <span class="string">"updated"</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"_seq_no"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"_primary_term"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到结果是：<code>updated</code>，显然是更新数据</p><p><img data-src="/assets/1604647417227.png" alt="60464741722"></p><h2 id="7-5-删除数据"><a href="#7-5-删除数据" class="headerlink" title="7.5.删除数据"></a>7.5.删除数据</h2><p>删除使用DELETE请求，同样，需要根据id进行删除：</p><blockquote><p>语法</p></blockquote><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="regexp">/索引库名/</span>类型名<span class="regexp">/id值</span></span><br></pre></td></tr></table></figure><blockquote><p>示例：</p></blockquote><p> <img data-src="/assets/1604647520015.png" alt="1526528059521"></p><h2 id="7-6-智能判断"><a href="#7-6-智能判断" class="headerlink" title="7.6.智能判断"></a>7.6.智能判断</h2><p>刚刚我们在新增数据时，添加的字段都是提前在类型中定义过的，如果我们添加的字段并没有提前定义过，能够成功吗？</p><p>事实上Elasticsearch非常智能，你不需要给索引库设置任何mapping映射，它也可以根据你输入的数据来判断类型，动态添加数据映射。</p><p>测试一下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST /heima/goods/3</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"title"</span>:<span class="string">"超大米手机"</span>,</span><br><span class="line">    <span class="attr">"images"</span>:<span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">    <span class="attr">"price"</span>:<span class="number">3299.00</span>,</span><br><span class="line">    <span class="attr">"stock"</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">"saleable"</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"subTitle"</span>:<span class="string">"哈哈"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们额外添加了stock库存，saleable是否上架，subtitle副标题、3个字段。</p><p>来看结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"heima"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"3"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"result"</span>: <span class="string">"created"</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"_seq_no"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"_primary_term"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="/assets/1604648697236.png" alt="60464869723"></p><p>成功了！在看下索引库的映射关系:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"heima"</span>: &#123;</span><br><span class="line">    <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">      <span class="attr">"goods"</span>: &#123;</span><br><span class="line">        <span class="attr">"properties"</span>: &#123;</span><br><span class="line">          <span class="attr">"images"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">            <span class="attr">"index"</span>: <span class="literal">false</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"price"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"float"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"saleable"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"boolean"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"stock"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"long"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"subTitle"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">            <span class="attr">"fields"</span>: &#123;</span><br><span class="line">              <span class="attr">"keyword"</span>: &#123;</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">                <span class="attr">"ignore_above"</span>: <span class="number">256</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"title"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">            <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>stock、saleable、subtitle都被成功映射了。</p><p>subtitle是String类型数据，ES无法智能判断，它就会存入两个字段。例如：</p><ul><li>subtitle：text类型</li><li>subtitle.keyword：keyword类型</li></ul><p>这种智能映射，底层原理是动态模板映射，如果我们想修改这种智能映射的规则，其实只要修改动态模板即可！</p><h2 id="7-7-动态映射模板"><a href="#7-7-动态映射模板" class="headerlink" title="7.7.动态映射模板"></a>7.7.动态映射模板</h2><p>动态模板的语法：</p><p><img data-src="/assets/1547005993592.png" alt="1547005993592"> </p><p>1）模板名称，随便起</p><p>2）匹配条件，凡是符合条件的未定义字段，都会按照这个规则来映射</p><p>3）映射规则，匹配成功后的映射规则</p><p>举例，我们可以把所有未映射的string类型数据自动映射为keyword类型：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">PUT heima3</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"goods"</span>: &#123;</span><br><span class="line">      <span class="attr">"properties"</span>: &#123;</span><br><span class="line">        <span class="attr">"title"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">          <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"dynamic_templates"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"strings"</span>: &#123;  <span class="comment">// 模板名称</span></span><br><span class="line">            <span class="attr">"match_mapping_type"</span>: <span class="string">"string"</span>, <span class="comment">//匹配字段类型是字符串类型</span></span><br><span class="line">            <span class="attr">"mapping"</span>: &#123;</span><br><span class="line">              <span class="attr">"type"</span>: <span class="string">"keyword"</span> <span class="comment">//对应es索引库数据类型 keyword</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个案例中，我们把做了两个映射配置：</p><ul><li>title字段：统一映射为text类型，并制定分词器</li><li>其它字段：只要是string类型，统一都处理为keyword类型。</li></ul><p>这样，未知的string类型数据就不会被映射为text和keyword并存，而是统一以keyword来处理！</p><p>我们试试看新增一个数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /heima3/goods/1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"title"</span>:<span class="string">"超大米手机"</span>,</span><br><span class="line">    <span class="attr">"images"</span>:<span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">    <span class="attr">"price"</span>:<span class="number">3299.00</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们只对title做了配置，现在来看看images和price会被映射为什么类型呢：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">GET</span> /heima3/_mapping</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"heima3"</span>: &#123;</span><br><span class="line">    <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">      <span class="attr">"goods"</span>: &#123;</span><br><span class="line">        <span class="attr">"dynamic_templates"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"strings"</span>: &#123;</span><br><span class="line">              <span class="attr">"match_mapping_type"</span>: <span class="string">"string"</span>,</span><br><span class="line">              <span class="attr">"mapping"</span>: &#123;</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"keyword"</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"properties"</span>: &#123;</span><br><span class="line">          <span class="attr">"images"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"keyword"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"price"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"float"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"title"</span>: &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">            <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到images被映射成了keyword，而非之前的text和keyword并存，说明我们的动态模板生效了！</p><h1 id="8-查询"><a href="#8-查询" class="headerlink" title="8.查询"></a>8.查询</h1><p>我们从4块来讲查询：</p><ul><li>基本查询</li><li><code>_source</code>过滤</li><li>结果过滤</li><li>高级查询</li><li>排序</li></ul><h2 id="8-1-基本查询："><a href="#8-1-基本查询：" class="headerlink" title="8.1.基本查询："></a>8.1.基本查询：</h2><blockquote><p>基本语法</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /索引库名/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"查询类型"</span>:&#123;</span><br><span class="line">            <span class="attr">"查询条件"</span>:<span class="string">"查询条件值"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的query代表一个查询对象，里面可以有不同的查询属性</p><ul><li>查询类型：<ul><li>例如：<code>match_all</code>， <code>match</code>，<code>term</code> ， <code>range</code> 等等</li></ul></li><li>查询条件：查询条件会根据类型的不同，写法也有差异，后面详细讲解</li></ul><h3 id="8-1-1-查询所有（match-all"><a href="#8-1-1-查询所有（match-all" class="headerlink" title="8.1.1 查询所有（match_all)"></a>8.1.1 查询所有（match_all)</h3><blockquote><p>示例：</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET /heima/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"match_all"</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>query</code>：代表查询对象</p></li><li><p><code>match_all</code>：代表查询所有</p><p>  <img data-src="/assets/1604649545636.png" alt="60464954563"></p></li></ul><blockquote><p>结果：</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"heima"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"红米手机"</span>,</span><br><span class="line">          <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">3699</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"heima"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"-ztrnHUBKzkPCnWAsfcJ"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"小米手机"</span>,</span><br><span class="line">          <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">2699</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"heima"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"3"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"超大米手机"</span>,</span><br><span class="line">          <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">3299</span>,</span><br><span class="line">          <span class="attr">"stock"</span>: <span class="number">200</span>,</span><br><span class="line">          <span class="attr">"saleable"</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">"subTitle"</span>: <span class="string">"哈哈"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>took：查询花费时间，单位是毫秒</li><li>time_out：是否超时</li><li>_shards：分片信息</li><li>hits：搜索结果总览对象<ul><li>total：搜索到的总条数</li><li>max_score：所有结果中文档得分的最高分</li><li>hits：搜索结果的文档对象数组，每个元素是一条搜索到的文档信息<ul><li>_index：索引库</li><li>_type：文档类型</li><li>_id：文档id</li><li>_score：文档得分（<a href="https://blog.csdn.net/paditang/article/details/79098830）" target="_blank" rel="noopener">https://blog.csdn.net/paditang/article/details/79098830）</a></li><li>_source：文档的源数据</li></ul></li></ul></li></ul><h3 id="8-1-2-匹配查询（match）"><a href="#8-1-2-匹配查询（match）" class="headerlink" title="8.1.2 匹配查询（match）"></a>8.1.2 匹配查询（match）</h3><p>我们先加入一条数据，便于测试：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT /heima/goods/3</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"title"</span>:<span class="string">"小米电视4A"</span>,</span><br><span class="line">    <span class="attr">"images"</span>:<span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">    <span class="attr">"price"</span>:<span class="number">3899.00</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，索引库中有2部手机，1台电视：</p><p><img data-src="/assets/1604649821223.png" alt="60464982122"></p><ul><li>or关系</li></ul><p><code>match</code>类型查询，会把查询条件进行分词，然后进行查询,多个词条之间是or的关系</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET heima/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">      <span class="attr">"title"</span>: <span class="string">"小米手机"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p> <img data-src="/assets/1604649806073.png" alt="1526529226647"></p><p>在上面的案例中，不仅会查询到电视，而且与小米相关的都会查询到，多个词之间是<code>or</code>的关系。</p><ul><li>and关系</li></ul><p>某些情况下，我们需要更精确查找，我们希望这个关系变成<code>and</code>，可以这样做：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET heima/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">      <span class="attr">"title"</span>: &#123;</span><br><span class="line">        <span class="attr">"query"</span>: <span class="string">"小米手机"</span>,</span><br><span class="line">        <span class="attr">"operator"</span>: <span class="string">"and"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p> <img data-src="/assets/1604649912639.png" alt="1526529350469"></p><p>本例中，只有同时包含<code>小米</code>和<code>手机</code>的词条才会被搜索到。</p><h3 id="8-1-3-词条匹配-term"><a href="#8-1-3-词条匹配-term" class="headerlink" title="8.1.3 词条匹配(term)"></a>8.1.3 词条匹配(term)</h3><p><code>term</code> 查询被用于精确值 匹配，这些精确值可能是数字、时间、布尔或者那些<strong>未分词</strong>的字符串</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET heima/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"term"</span>: &#123;</span><br><span class="line">      <span class="attr">"title"</span>: &#123;</span><br><span class="line">        <span class="attr">"value"</span>: <span class="string">"小米"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">0.80259144</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"heima"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"-ztrnHUBKzkPCnWAsfcJ"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">0.80259144</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"小米手机"</span>,</span><br><span class="line">          <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">2699</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"heima"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">0.2876821</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"红米手机"</span>,</span><br><span class="line">          <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">3699</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-1-4-布尔组合（bool"><a href="#8-1-4-布尔组合（bool" class="headerlink" title="8.1.4 布尔组合（bool)"></a>8.1.4 布尔组合（bool)</h3><p><code>bool</code>把各种其它查询通过<code>must</code>（与）、<code>must_not</code>（非）、<code>should</code>（或）的方式进行组合</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET heima/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"bool"</span>: &#123;</span><br><span class="line">      <span class="attr">"must"</span>:&#123; <span class="attr">"match"</span>: &#123; <span class="attr">"title"</span>: <span class="string">"小米"</span> &#125;&#125;,</span><br><span class="line">       <span class="attr">"must_not"</span>: &#123; <span class="attr">"match"</span>: &#123; <span class="attr">"title"</span>:  <span class="string">"电视"</span> &#125;&#125;,</span><br><span class="line">       <span class="attr">"should"</span>:   &#123; <span class="attr">"match"</span>: &#123; <span class="attr">"title"</span>: <span class="string">"手机"</span> &#125;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">21</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">1.0137006</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"heima"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"-ztrnHUBKzkPCnWAsfcJ"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1.0137006</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"小米手机"</span>,</span><br><span class="line">          <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">2699</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-1-5-范围查询-range"><a href="#8-1-5-范围查询-range" class="headerlink" title="8.1.5 范围查询(range)"></a>8.1.5 范围查询(range)</h3><p><code>range</code> 查询找出那些落在指定区间内的数字或者时间</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET heima/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"range"</span>: &#123;</span><br><span class="line">      <span class="attr">"price"</span>: &#123;</span><br><span class="line">        <span class="attr">"gte"</span>: <span class="number">2000</span>,</span><br><span class="line">        <span class="attr">"lte"</span>: <span class="number">3000</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>range</code>查询允许以下字符：</p><table><thead><tr><th align="center">操作符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">gt</td><td align="center">大于</td></tr><tr><td align="center">gte</td><td align="center">大于等于</td></tr><tr><td align="center">lt</td><td align="center">小于</td></tr><tr><td align="center">lte</td><td align="center">小于等于</td></tr></tbody></table><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"heima"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"-ztrnHUBKzkPCnWAsfcJ"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"小米手机"</span>,</span><br><span class="line">          <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">2699</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-2-结果过滤"><a href="#8-2-结果过滤" class="headerlink" title="8.2.结果过滤"></a>8.2.结果过滤</h2><p>默认情况下，elasticsearch在搜索的结果中，会把文档中保存在<code>_source</code>的所有字段都返回。</p><p>如果我们只想获取其中的部分字段，我们可以添加<code>_source</code>的过滤</p><h3 id="8-2-1-直接指定字段"><a href="#8-2-1-直接指定字段" class="headerlink" title="8.2.1.直接指定字段"></a>8.2.1.直接指定字段</h3><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET heima/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match_all"</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"_source"</span>: [<span class="string">"title"</span>,<span class="string">"price"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回的结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"heima"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">3699</span>,</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"红米手机"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"heima"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"-ztrnHUBKzkPCnWAsfcJ"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">2699</span>,</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"小米手机"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"heima"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"3"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">3899</span>,</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"小米电视4A"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-2-2-指定includes和excludes"><a href="#8-2-2-指定includes和excludes" class="headerlink" title="8.2.2.指定includes和excludes"></a>8.2.2.指定includes和excludes</h3><p>我们也可以通过：</p><ul><li>includes：来指定想要显示的字段</li><li>excludes：来指定不想要显示的字段</li></ul><p>二者都是可选的。</p><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET heima/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match_all"</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"_source"</span>: &#123;</span><br><span class="line">    <span class="attr">"includes"</span>: [<span class="string">"title"</span>,<span class="string">"price"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与下面的结果将是一样的：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"heima"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">3699</span>,</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"红米手机"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"heima"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"-ztrnHUBKzkPCnWAsfcJ"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">2699</span>,</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"小米手机"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"heima"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"3"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">3899</span>,</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"小米电视4A"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-3-过滤-filter"><a href="#8-3-过滤-filter" class="headerlink" title="8.3 过滤(filter)"></a>8.3 过滤(filter)</h2><blockquote><p><strong>条件查询中进行过滤</strong></p></blockquote><p>所有的查询都会影响到文档的评分及排名。如果我们需要在查询结果中进行过滤，并且不希望过滤条件影响评分，那么就不要把过滤条件作为查询条件来用。而是使用<code>filter</code>方式：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET heima/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"bool"</span>: &#123;</span><br><span class="line">      <span class="attr">"must"</span>:&#123; <span class="attr">"match"</span>: &#123; <span class="attr">"title"</span>: <span class="string">"小米手机"</span> &#125;&#125;,</span><br><span class="line">        <span class="attr">"filter"</span>:&#123;</span><br><span class="line">                <span class="attr">"range"</span>:&#123;<span class="attr">"price"</span>:&#123;<span class="attr">"gt"</span>:<span class="number">2000.00</span>,<span class="attr">"lt"</span>:<span class="number">3800.00</span>&#125;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">1.0137006</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"heima"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"-ztrnHUBKzkPCnWAsfcJ"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1.0137006</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"小米手机"</span>,</span><br><span class="line">          <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">2699</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"heima"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">0.2876821</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"红米手机"</span>,</span><br><span class="line">          <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">3699</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-4-排序"><a href="#8-4-排序" class="headerlink" title="8.4 排序"></a>8.4 排序</h2><h3 id="8-8-1-单字段排序"><a href="#8-8-1-单字段排序" class="headerlink" title="8.8.1 单字段排序"></a>8.8.1 单字段排序</h3><p><code>sort</code> 可以让我们按照不同的字段进行排序，并且通过<code>order</code>指定排序的方式</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET heima/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match_all"</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"sort"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"price"</span>: &#123;</span><br><span class="line">        <span class="attr">"order"</span>: <span class="string">"desc"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">17</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"heima"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"3"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"小米电视4A"</span>,</span><br><span class="line">          <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">3899</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"sort"</span>: [</span><br><span class="line">          <span class="number">3899</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"heima"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"红米手机"</span>,</span><br><span class="line">          <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">3699</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"sort"</span>: [</span><br><span class="line">          <span class="number">3699</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"heima"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"-ztrnHUBKzkPCnWAsfcJ"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"小米手机"</span>,</span><br><span class="line">          <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">2699</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"sort"</span>: [</span><br><span class="line">          <span class="number">2699</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-4-2-多字段排序"><a href="#8-4-2-多字段排序" class="headerlink" title="8.4.2 多字段排序"></a>8.4.2 多字段排序</h3><p>假定我们想要结合使用 price和 _score（得分） 进行查询，并且匹配的结果首先按照价格排序，然后按照相关性得分排序：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET /heima/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"bool"</span>:&#123;</span><br><span class="line">        <span class="attr">"must"</span>:&#123; <span class="attr">"match"</span>: &#123; <span class="attr">"title"</span>: <span class="string">"小米手机"</span> &#125;&#125;,</span><br><span class="line">        <span class="attr">"filter"</span>:&#123;</span><br><span class="line">                <span class="attr">"range"</span>:&#123;<span class="attr">"price"</span>:&#123;<span class="attr">"gt"</span>:<span class="number">2000</span>,<span class="attr">"lt"</span>:<span class="number">3000</span>&#125;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"sort"</span>: [</span><br><span class="line">      &#123; <span class="attr">"price"</span>: &#123; <span class="attr">"order"</span>: <span class="string">"desc"</span> &#125;&#125;,</span><br><span class="line">      &#123; <span class="attr">"_score"</span>: &#123; <span class="attr">"order"</span>: <span class="string">"desc"</span> &#125;&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-5-分页"><a href="#8-5-分页" class="headerlink" title="8.5.分页"></a>8.5.分页</h2><p>elasticsearch的分页与mysql数据库非常相似，都是指定两个值：</p><ul><li>from：开始位置</li><li>size：每页大小</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET /heima/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match_all"</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"sort"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"price"</span>: &#123;</span><br><span class="line">        <span class="attr">"order"</span>: <span class="string">"asc"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"from"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"heima"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"-ztrnHUBKzkPCnWAsfcJ"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"小米手机"</span>,</span><br><span class="line">          <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">2699</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"sort"</span>: [</span><br><span class="line">          <span class="number">2699</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"heima"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"红米手机"</span>,</span><br><span class="line">          <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">3699</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"sort"</span>: [</span><br><span class="line">          <span class="number">3699</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-6-高亮"><a href="#8-6-高亮" class="headerlink" title="8.6.高亮"></a>8.6.高亮</h2><p>高亮原理：</p><ul><li>服务端搜索数据，得到搜索结果</li><li>把搜索结果中，搜索关键字都加上约定好的标签</li><li>前端页面提前写好标签的CSS样式，即可高亮</li></ul><p>elasticsearch中实现高亮的语法比较简单：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET /heima/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match"</span>: &#123;</span><br><span class="line">      <span class="attr">"title"</span>: <span class="string">"小米"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"highlight"</span>: &#123;</span><br><span class="line">    <span class="attr">"pre_tags"</span>: <span class="string">"&lt;font color='red'&gt;"</span>,</span><br><span class="line">    <span class="attr">"post_tags"</span>: <span class="string">"&lt;/font&gt;"</span>,</span><br><span class="line">    <span class="attr">"fields"</span>: &#123;</span><br><span class="line">      <span class="attr">"title"</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用match查询的同时，加上一个highlight属性：</p><ul><li>pre_tags：前置标签</li><li>post_tags：后置标签</li><li>fields：需要高亮的字段<ul><li>title：这里声明title字段需要高亮，后面可以为这个字段设置特有配置，也可以空</li></ul></li></ul><p>结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">29</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">0.21110918</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"heima"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"-ztrnHUBKzkPCnWAsfcJ"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">0.21110918</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"小米手机"</span>,</span><br><span class="line">          <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">2699</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"highlight"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: [</span><br><span class="line">            <span class="string">"&lt;font color='red'&gt;小米&lt;/font&gt;手机"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"heima"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"goods"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"3"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">0.16044298</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: <span class="string">"小米电视4A"</span>,</span><br><span class="line">          <span class="attr">"images"</span>: <span class="string">"http://image.leyou.com/12479122.jpg"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">3899</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"highlight"</span>: &#123;</span><br><span class="line">          <span class="attr">"title"</span>: [</span><br><span class="line">            <span class="string">"&lt;font color='red'&gt;小米&lt;/font&gt;电视4A"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="9-聚合aggregations"><a href="#9-聚合aggregations" class="headerlink" title="9. 聚合aggregations"></a>9. 聚合aggregations</h1><p>mysql聚合函数 一般都是和分组配合使用的 所以mysql中聚合函数又叫组函数  group by</p><p>聚合可以让我们极其方便的实现对数据的统计、分析。例如：</p><ul><li>什么品牌的手机最受欢迎？</li><li>这些手机的平均价格、最高价格、最低价格？</li><li>这些手机每月的销售情况如何？</li></ul><p>实现这些统计功能的比数据库的sql要方便的多，而且查询速度非常快，可以实现近实时搜索效果。</p><h2 id="9-1-基本概念"><a href="#9-1-基本概念" class="headerlink" title="9.1 基本概念"></a>9.1 基本概念</h2><p>Elasticsearch中的聚合，包含多种类型，最常用的两种，一个叫<code>桶</code>，一个叫<code>度量</code>：</p><blockquote><p>*<em>桶（bucket） *</em>      类似于 group by</p></blockquote><p>桶的作用，是按照某种方式对数据进行分组，每一组数据在ES中称为一个<code>桶</code>，例如我们根据国籍对人划分，可以得到<code>中国桶</code>、<code>英国桶</code>，<code>日本桶</code>……或者我们按照年龄段对人进行划分：0<del>10,10</del>20,20<del>30,30</del>40等。</p><p>Elasticsearch中提供的划分桶的方式有很多：</p><ul><li>Date Histogram Aggregation：根据日期阶梯分组，例如给定阶梯为周，会自动每周分为一组</li><li>Histogram Aggregation：根据数值阶梯分组，与日期类似，需要知道分组的间隔（interval）</li><li>Terms Aggregation：根据词条内容分组，词条内容完全匹配的为一组</li><li>Range Aggregation：数值和日期的范围分组，指定开始和结束，然后按段分组</li><li>……</li></ul><p>综上所述，我们发现bucket aggregations 只负责对数据进行分组，并不进行计算，因此往往bucket中往往会嵌套另一种聚合：metrics aggregations即度量</p><blockquote><p><strong>度量（metrics）</strong>             相当于聚合的结果</p></blockquote><p>分组完成以后，我们一般会对组中的数据进行聚合运算，例如求平均值、最大、最小、求和等，这些在ES中称为<code>度量</code></p><p>比较常用的一些度量聚合方式：</p><ul><li>Avg Aggregation：求平均值</li><li>Max Aggregation：求最大值</li><li>Min Aggregation：求最小值</li><li>Percentiles Aggregation：求百分比</li><li>Stats Aggregation：同时返回avg、max、min、sum、count等</li><li>Sum Aggregation：求和</li><li>Top hits Aggregation：求前几</li><li>Value Count Aggregation：求总数</li><li>……</li></ul><p>为了测试聚合，我们先批量导入一些数据</p><p>创建索引：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">PUT /car</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">    <span class="attr">"orders"</span>: &#123;</span><br><span class="line">      <span class="attr">"properties"</span>: &#123;</span><br><span class="line">        <span class="attr">"color"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"keyword"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"make"</span>: &#123;</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"keyword"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：在ES中，需要进行聚合、排序、过滤的字段其处理方式比较特殊，因此不能被分词，必须使用<code>keyword</code>或<code>数值类型</code>。这里我们将color和make这两个文字类型的字段设置为keyword类型，这个类型不会被分词，将来就可以参与聚合</p><p>导入数据，这里是采用批处理的API，大家直接复制到kibana运行即可：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">POST /car/orders/_bulk</span><br><span class="line">&#123; <span class="attr">"index"</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="attr">"price"</span> : <span class="number">10000</span>, <span class="attr">"color"</span> : <span class="string">"红"</span>, <span class="attr">"make"</span> : <span class="string">"本田"</span>, <span class="attr">"sold"</span> : <span class="string">"2014-10-28"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="attr">"price"</span> : <span class="number">20000</span>, <span class="attr">"color"</span> : <span class="string">"红"</span>, <span class="attr">"make"</span> : <span class="string">"本田"</span>, <span class="attr">"sold"</span> : <span class="string">"2014-11-05"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="attr">"price"</span> : <span class="number">30000</span>, <span class="attr">"color"</span> : <span class="string">"绿"</span>, <span class="attr">"make"</span> : <span class="string">"福特"</span>, <span class="attr">"sold"</span> : <span class="string">"2014-05-18"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="attr">"price"</span> : <span class="number">15000</span>, <span class="attr">"color"</span> : <span class="string">"蓝"</span>, <span class="attr">"make"</span> : <span class="string">"丰田"</span>, <span class="attr">"sold"</span> : <span class="string">"2014-07-02"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="attr">"price"</span> : <span class="number">12000</span>, <span class="attr">"color"</span> : <span class="string">"绿"</span>, <span class="attr">"make"</span> : <span class="string">"丰田"</span>, <span class="attr">"sold"</span> : <span class="string">"2014-08-19"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="attr">"price"</span> : <span class="number">20000</span>, <span class="attr">"color"</span> : <span class="string">"红"</span>, <span class="attr">"make"</span> : <span class="string">"本田"</span>, <span class="attr">"sold"</span> : <span class="string">"2014-11-05"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="attr">"price"</span> : <span class="number">80000</span>, <span class="attr">"color"</span> : <span class="string">"红"</span>, <span class="attr">"make"</span> : <span class="string">"宝马"</span>, <span class="attr">"sold"</span> : <span class="string">"2014-01-01"</span> &#125;</span><br><span class="line">&#123; <span class="attr">"index"</span>: &#123;&#125;&#125;</span><br><span class="line">&#123; <span class="attr">"price"</span> : <span class="number">25000</span>, <span class="attr">"color"</span> : <span class="string">"蓝"</span>, <span class="attr">"make"</span> : <span class="string">"福特"</span>, <span class="attr">"sold"</span> : <span class="string">"2014-02-12"</span> &#125;</span><br></pre></td></tr></table></figure><h2 id="9-2-聚合为桶"><a href="#9-2-聚合为桶" class="headerlink" title="9.2 聚合为桶"></a>9.2 聚合为桶</h2><p>首先，我们按照 汽车的颜色<code>color来</code>划分<code>桶</code>，按照颜色分桶，最好是使用TermAggregation类型，按照颜色的名称来分桶。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET car/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match_all"</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>, </span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"popular_colors"</span>: &#123;</span><br><span class="line">      <span class="attr">"terms"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"color"</span>,</span><br><span class="line">        <span class="attr">"size"</span>: <span class="number">10</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>size： 查询条数，这里设置为0，因为我们不关心搜索到的数据，只关心聚合结果，提高效率</li><li>aggs：声明这是一个聚合查询，是aggregations的缩写<ul><li>popular_colors：给这次聚合起一个名字，可任意指定。<ul><li>terms：聚合的类型，这里选择terms，是根据词条内容（这里是颜色）划分<ul><li>field：划分桶时依赖的字段</li></ul></li></ul></li></ul></li></ul><p>结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">33</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">8</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: []</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"aggregations"</span>: &#123;</span><br><span class="line">    <span class="attr">"popular_colors"</span>: &#123;</span><br><span class="line">      <span class="attr">"doc_count_error_upper_bound"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"sum_other_doc_count"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"buckets"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="string">"红"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">4</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="string">"绿"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="string">"蓝"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>hits：查询结果为空，因为我们设置了size为0</li><li>aggregations：聚合的结果</li><li>popular_colors：我们定义的聚合名称</li><li>buckets：查找到的桶，每个不同的color字段值都会形成一个桶<ul><li>key：这个桶对应的color字段的值</li><li>doc_count：这个桶中的文档数量</li></ul></li></ul><p>通过聚合的结果我们发现，目前红色的小车比较畅销！</p><h2 id="9-3-桶内度量"><a href="#9-3-桶内度量" class="headerlink" title="9.3 桶内度量"></a>9.3 桶内度量</h2><p>前面的例子告诉我们每个桶里面的文档数量，这很有用。 但通常，我们的应用需要提供更复杂的文档度量。 例如，每种颜色汽车的平均价格是多少？</p><p>因此，我们需要告诉Elasticsearch<code>使用哪个字段</code>，<code>使用何种度量方式</code>进行运算，这些信息要嵌套在<code>桶</code>内，<code>度量</code>的运算会基于<code>桶</code>内的文档进行</p><p>现在，我们为刚刚的聚合结果添加 求价格平均值的度量：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">GET car/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"match_all"</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">0</span>, </span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"popular_colors"</span>: &#123;</span><br><span class="line">      <span class="attr">"terms"</span>: &#123;</span><br><span class="line">        <span class="attr">"field"</span>: <span class="string">"color"</span>,</span><br><span class="line">        <span class="attr">"size"</span>: <span class="number">10</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">        <span class="attr">"avg_price"</span>: &#123;</span><br><span class="line">          <span class="attr">"avg"</span>: &#123;</span><br><span class="line">            <span class="attr">"field"</span>: <span class="string">"price"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>aggs：我们在上一个aggs(popular_colors)中添加新的aggs。可见度量也是一个聚合</li><li>avg_price：聚合的名称</li><li>avg：度量的类型，这里是求平均值</li><li>field：度量运算的字段</li></ul><p>结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">8</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">8</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: []</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"aggregations"</span>: &#123;</span><br><span class="line">    <span class="attr">"popular_colors"</span>: &#123;</span><br><span class="line">      <span class="attr">"doc_count_error_upper_bound"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"sum_other_doc_count"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">"buckets"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="string">"红"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">4</span>,</span><br><span class="line">          <span class="attr">"avg_price"</span>: &#123;</span><br><span class="line">            <span class="attr">"value"</span>: <span class="number">32500</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="string">"绿"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"avg_price"</span>: &#123;</span><br><span class="line">            <span class="attr">"value"</span>: <span class="number">21000</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"key"</span>: <span class="string">"蓝"</span>,</span><br><span class="line">          <span class="attr">"doc_count"</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">"avg_price"</span>: &#123;</span><br><span class="line">            <span class="attr">"value"</span>: <span class="number">20000</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到每个桶中都有自己的<code>avg_price</code>字段，这是度量聚合的结果</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-什么是全文检索&quot;&gt;&lt;a href=&quot;#1-什么是全文检索&quot; class=&quot;headerlink&quot; title=&quot;1  什么是全文检索&quot;&gt;&lt;/a&gt;1  什么是全文检索&lt;/h1&gt;&lt;h2 id=&quot;1-1-数据分类&quot;&gt;&lt;a href=&quot;#1-1-数据分类&quot; class=&quot;headerlink&quot; title=&quot;1.1  数据分类&quot;&gt;&lt;/a&gt;1.1  数据分类&lt;/h2&gt;&lt;p&gt;我们生活中的数据总体分为两种：结构化数据和非结构化数据。&lt;/p&gt;
&lt;p&gt;​    结构化数据：指具有固定格式或有限长度的数据，如数据库，元数据等。&lt;/p&gt;
&lt;p&gt;​    非结构化数据：指不定长或无固定格式的数据，如邮件，word 文档等磁盘上的文件&lt;/p&gt;
    
    </summary>
    
    
      <category term="全文检索" scheme="http://sunmoon.com/categories/%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2/"/>
    
    
      <category term="全文检索" scheme="http://sunmoon.com/tags/%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2/"/>
    
      <category term="Elasticsearch" scheme="http://sunmoon.com/tags/Elasticsearch/"/>
    
      <category term="Lucene" scheme="http://sunmoon.com/tags/Lucene/"/>
    
      <category term="Kibana操作" scheme="http://sunmoon.com/tags/Kibana%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud-2</title>
    <link href="http://sunmoon.com/2020/11/04/SpringCloud-2/"/>
    <id>http://sunmoon.com/2020/11/04/SpringCloud-2/</id>
    <published>2020-11-04T13:50:53.000Z</published>
    <updated>2020-11-04T14:05:31.382Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Feign"><a href="#1-Feign" class="headerlink" title="1.Feign"></a>1.Feign</h1><p>在前面的学习中，我们使用了Ribbon的负载均衡功能，大大简化了远程调用时的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String userStr = restTemplate.getForObject(<span class="string">"http://user-service/findById/"</span> + id, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure><p>如果就学到这里，你可能以后需要编写类似的大量重复代码，格式基本相同，无非参数不一样。有没有更优雅的方式，来对这些代码再次优化呢？</p><p>这就是我们接下来要学的Feign的功能了。</p><h2 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1.简介"></a>1.1.简介</h2><p>有道词典的英文解释：</p><p><img data-src="/assets/1525662976679.png" alt="1525662976679"> </p><p>为什么叫伪装？</p><p>Feign可以把Rest的请求进行隐藏，伪装成类似SpringMVC的Controller一样。你不用再自己拼接url，拼接参数等等操作，一切都交给Feign去做。</p><p>项目主页：<a href="https://github.com/OpenFeign/feign" target="_blank" rel="noopener">https://github.com/OpenFeign/feign</a></p><a id="more"></a><h2 id="1-2-快速入门"><a href="#1-2-快速入门" class="headerlink" title="1.2.快速入门"></a>1.2.快速入门</h2><h3 id="1-2-1-导入依赖"><a href="#1-2-1-导入依赖" class="headerlink" title="1.2.1.导入依赖"></a>1.2.1.导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入feign--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-2-Feign的客户端"><a href="#1-2-2-Feign的客户端" class="headerlink" title="1.2.2.Feign的客户端"></a>1.2.2.Feign的客户端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"user-service"</span>)<span class="comment">// eureka注册中心服务名称</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/findById/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>首先这是一个接口，Feign会通过动态代理，帮我们生成实现类。这点跟mybatis的mapper很像</li><li><code>@FeignClient</code>，声明这是一个Feign客户端，同时通过<code>value</code>属性指定服务名称</li><li>接口中的定义方法，完全采用SpringMVC的注解，Feign会根据注解帮我们生成URL，并访问获取结果</li></ul><p>改造原来的调用逻辑，使用UserClient访问：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"consumer"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserClient userClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/findById/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">       </span><br><span class="line">        User user = userClient.findById(id);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-3-开启Feign功能"><a href="#1-2-3-开启Feign功能" class="headerlink" title="1.2.3.开启Feign功能"></a>1.2.3.开启Feign功能</h3><p>我们在启动类上，添加注解，开启Feign功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*@SpringBootApplication</span></span><br><span class="line"><span class="comment">@EnableDiscoveryClient</span></span><br><span class="line"><span class="comment">@EnableCircuitBreaker  //开启熔断器的使用*/</span></span><br><span class="line"><span class="meta">@SpringCloudApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span> <span class="comment">//开启feign远程调用服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span>  <span class="comment">// 表明采用负载均衡策略</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>你会发现RestTemplate的注册被我删除了。Feign中已经自动集成了Ribbon负载均衡，因此我们不需要自己定义RestTemplate了</li></ul><h3 id="1-2-4-启动测试："><a href="#1-2-4-启动测试：" class="headerlink" title="1.2.4.启动测试："></a>1.2.4.启动测试：</h3><p>访问接口：</p><p><img data-src="/assets/1604453036544.png" alt="1533907548664"></p><p>正常获取到了结果。</p><h2 id="1-3-负载均衡"><a href="#1-3-负载均衡" class="headerlink" title="1.3.负载均衡"></a>1.3.负载均衡</h2><p>Feign中本身已经集成了Ribbon依赖和自动配置：</p><p><img data-src="/assets/1525672070679.png" alt="1525672070679"></p><p>因此我们不需要额外引入依赖，也不需要再注册<code>RestTemplate</code>对象。</p><p>Fegin内置的ribbon默认设置了请求超时时长，默认是1000ms，我们可以通过手动配置来修改这个超时时长：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">2000</span> <span class="comment"># 读取超时时长</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">1000</span> <span class="comment"># 建立链接的超时时长</span></span><br></pre></td></tr></table></figure><p>，因为ribbon内部有重试机制，一旦超时，会自动重新发起请求。如果不希望重试，可以添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">2000</span> <span class="comment"># 数据通信超时时长</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">500</span> <span class="comment"># 连接超时时长  </span></span><br><span class="line">  <span class="attr">MaxAutoRetries:</span> <span class="number">0</span> <span class="comment"># 当前服务器的重试次数</span></span><br><span class="line">  <span class="attr">MaxAutoRetriesNextServer:</span> <span class="number">1</span> <span class="comment"># 重试多少次服务</span></span><br><span class="line">  <span class="attr">OkToRetryOnAllOperations:</span> <span class="literal">false</span> <span class="comment"># 是否对所有的请求方式都重试 如果是false代表只对get请求重试</span></span><br></pre></td></tr></table></figure><p>另外，Hystix的超时时间，应该比重试的总时间要大，比如当前案例中，应该配 大于2500*2 = 5000</p><h2 id="1-4-Hystrix支持-了解"><a href="#1-4-Hystrix支持-了解" class="headerlink" title="1.4.Hystrix支持(了解)"></a>1.4.Hystrix支持(了解)</h2><p>Feign默认也有对Hystrix的集成：</p><p><img data-src="/assets/1525672466192.png" alt="1525672466192"></p><p>只不过，默认情况下是关闭的。我们需要通过下面的参数来开启：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启Feign的熔断功能</span></span><br></pre></td></tr></table></figure><p>但是，Feign中的Fallback配置不像Hystrix中那样简单了。</p><p>1）首先，我们要定义一个类，是在刚才编写的UserFeignClient，作为fallback的处理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserClientFallback</span> <span class="keyword">implements</span> <span class="title">UserClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(id);</span><br><span class="line">        user.setName(<span class="string">"用户查询出现异常！"</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）然后在UserFeignClient中，指定刚才编写的实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"user-service"</span>, fallback = UserClientFallback<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">UserClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">queryById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）重启测试：</p><p>我们关闭user-service服务，然后在页面访问：</p><p> <img data-src="/assets/1533942286259.png" alt="1533942286259"></p><h2 id="1-5-请求压缩-了解"><a href="#1-5-请求压缩-了解" class="headerlink" title="1.5.请求压缩(了解)"></a>1.5.请求压缩(了解)</h2><p>Spring Cloud Feign 支持对请求和响应进行GZIP压缩，以减少通信过程中的性能损耗。通过下面的参数即可开启请求与响应的压缩功能：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">compression:</span></span><br><span class="line">    <span class="attr">request:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启请求压缩</span></span><br><span class="line">    <span class="attr">response:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启响应压缩</span></span><br></pre></td></tr></table></figure><p>同时，我们也可以对请求的数据类型，以及触发压缩的大小下限进行设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">compression:</span></span><br><span class="line">    <span class="attr">request:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启请求压缩</span></span><br><span class="line">      <span class="attr">mime-types:</span> <span class="string">text/html,application/xml,application/json</span> <span class="comment"># 设置压缩的数据类型</span></span><br><span class="line">      <span class="attr">min-request-size:</span> <span class="number">2048</span> <span class="comment"># 设置触发压缩的大小下限</span></span><br></pre></td></tr></table></figure><p>注：上面的数据类型、压缩大小下限均为默认值。</p><h2 id="1-6-日志级别-了解"><a href="#1-6-日志级别-了解" class="headerlink" title="1.6.日志级别(了解)"></a>1.6.日志级别(了解)</h2><p>前面讲过，通过<code>logging.level.xx=debug</code>来设置日志级别。然而这个对Fegin客户端而言不会产生效果。因为<code>@FeignClient</code>注解修改的客户端在被代理时，都会创建一个新的Fegin.Logger实例。我们需要额外指定这个日志的级别才可以。</p><p>1）设置cn.itcast包下的日志级别都为debug</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">cn.itcast:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><p>2）编写配置类，定义日志级别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.<span class="function">Level <span class="title">feignLoggerLevel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里指定的Level级别是FULL，Feign支持4种级别：</p><p><img data-src="/assets/1525674373507.png" alt="1525674373507"></p><ul><li>NONE：不记录任何日志信息，这是默认值。</li><li>BASIC：仅记录请求的方法，URL以及响应状态码和执行时间</li><li>HEADERS：在BASIC的基础上，额外记录了请求和响应的头信息</li><li>FULL：记录所有请求和响应的明细，包括头信息、请求体、元数据。</li></ul><p>3）在FeignClient中指定配置类：（可以省略）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"user-service"</span>, fallback = UserClientFallback<span class="class">.<span class="keyword">class</span>, <span class="title">configuration</span> </span>= FeignConfig<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">UserClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">queryById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4）重启项目，即可看到每次访问的日志：</p><p><img data-src="/assets/1525674544569.png" alt="1525674544569"></p><h1 id="2-Zuul网关"><a href="#2-Zuul网关" class="headerlink" title="2.Zuul网关"></a>2.Zuul网关</h1><h2 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1.简介"></a>2.1.简介</h2><p>官网：<a href="https://github.com/Netflix/zuul" target="_blank" rel="noopener">https://github.com/Netflix/zuul</a></p><p> <img data-src="/assets/1525675037152.png" alt="1525675037152"></p><p>Zuul：维基百科：</p><p>电影《捉鬼敢死队》中的怪兽，Zuul，在纽约引发了巨大骚乱。</p><p>事实上，在微服务架构中，Zuul就是守门的大Boss！一夫当关，万夫莫开！</p><p><img data-src="/assets/1525675168152.png" alt="1525675168152"></p><p>网关的核心功能是：过滤（鉴权）和路由</p><h2 id="2-2-Zuul加入后的架构"><a href="#2-2-Zuul加入后的架构" class="headerlink" title="2.2.Zuul加入后的架构"></a>2.2.Zuul加入后的架构</h2><p><img data-src="/assets/1525675648881.png" alt="1525675648881"></p><p><img data-src="/assets/1604456792781.png" alt="60445679278"></p><ul><li>不管是来自于客户端（PC或移动端）的请求，还是服务内部调用。一切对服务的请求都会经过Zuul这个网关，然后再由网关来实现 鉴权、动态路由等等操作。Zuul就是我们服务的统一入口。</li></ul><h2 id="2-3-快速入门"><a href="#2-3-快速入门" class="headerlink" title="2.3.快速入门"></a>2.3.快速入门</h2><h3 id="2-3-1-新建工程"><a href="#2-3-1-新建工程" class="headerlink" title="2.3.1.新建工程"></a>2.3.1.新建工程</h3><p>填写基本信息：</p><p><img data-src="/assets/1604457755133.png" alt="1529223147899"></p><p>添加Zuul依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w2.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zuul-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-2-编写启动类"><a href="#2-3-2-编写启动类" class="headerlink" title="2.3.2.编写启动类"></a>2.3.2.编写启动类</h3><p>通过<code>@EnableZuulProxy</code>注解开启Zuul的功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.zuul.EnableZuulProxy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.zuul.EnableZuulServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span> <span class="comment">//开启网关功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ZuulApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-2-编写配置"><a href="#2-3-2-编写配置" class="headerlink" title="2.3.2.编写配置"></a>2.3.2.编写配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">zuul-server</span>  <span class="comment"># 微服务名称</span></span><br></pre></td></tr></table></figure><h3 id="2-3-4-编写路由规则"><a href="#2-3-4-编写路由规则" class="headerlink" title="2.3.4.编写路由规则"></a>2.3.4.编写路由规则</h3><p>我们需要用Zuul来代理user-service服务，先看一下控制面板中的服务状态：</p><p><img data-src="/assets/1604460532648.png" alt="60446053264"></p><ul><li>ip为：127.0.0.1</li><li>端口为：8081</li></ul><p>映射规则：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">user-service:</span> <span class="comment"># 网关动态路由分发路由名称  </span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/user-service/**</span>  <span class="comment"># 映射路径  通过映射路径，关联真实的请求路径</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">http://localhost:8081</span>  <span class="comment"># 微服务真实路径</span></span><br></pre></td></tr></table></figure><p>我们将符合<code>path</code> 规则的一切请求，都代理到 <code>url</code>参数指定的地址</p><p>本例中，我们将 <code>/user-service/**</code>开头的请求，代理到<a href="http://127.0.0.1:8081" target="_blank" rel="noopener">http://127.0.0.1:8081</a></p><h3 id="2-3-5-启动测试："><a href="#2-3-5-启动测试：" class="headerlink" title="2.3.5.启动测试："></a>2.3.5.启动测试：</h3><p>访问的路径中需要加上配置规则的映射路径，我们访问：<a href="http://127.0.0.1:10010/user-service/findById/10" target="_blank" rel="noopener">http://127.0.0.1:10010/user-service/findById/10</a></p><p><img data-src="/assets/1604458786643.png" alt="60445878664"></p><h2 id="2-4-面向服务的路由"><a href="#2-4-面向服务的路由" class="headerlink" title="2.4.面向服务的路由"></a>2.4.面向服务的路由</h2><p>在刚才的路由规则中，我们把路径对应的服务地址写死了！如果同一服务有多个实例的话，这样做显然就不合理了。</p><p>我们应该根据服务的名称，去Eureka注册中心查找 服务对应的所有实例列表，然后进行动态路由才对！</p><h3 id="2-4-1-添加Eureka客户端依赖"><a href="#2-4-1-添加Eureka客户端依赖" class="headerlink" title="2.4.1.添加Eureka客户端依赖"></a>2.4.1.添加Eureka客户端依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-2-开启Eureka客户端发现功能"><a href="#2-4-2-开启Eureka客户端发现功能" class="headerlink" title="2.4.2.开启Eureka客户端发现功能"></a>2.4.2.开启Eureka客户端发现功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.zuul.EnableZuulProxy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.zuul.EnableZuulServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">//开启eureka客户端功能</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span> <span class="comment">//开启网关功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ZuulApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-3-添加Eureka配置，获取服务信息"><a href="#2-4-3-添加Eureka配置，获取服务信息" class="headerlink" title="2.4.3.添加Eureka配置，获取服务信息"></a>2.4.3.添加Eureka配置，获取服务信息</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:10086/eureka</span>  <span class="comment">#eureka服务端连接地址</span></span><br></pre></td></tr></table></figure><h3 id="2-4-4-修改映射配置，通过服务名称获取"><a href="#2-4-4-修改映射配置，通过服务名称获取" class="headerlink" title="2.4.4.修改映射配置，通过服务名称获取"></a>2.4.4.修改映射配置，通过服务名称获取</h3><p>因为已经有了Eureka客户端，我们可以从Eureka获取服务的地址信息，因此映射时无需指定IP地址，而是通过服务名称来访问，而且Zuul已经集成了Ribbon的负载均衡功能。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">user-service:</span> <span class="comment"># 网关动态路由分发的微服务名称</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/user-service/**</span>  <span class="comment"># 映射路径  通过映射路径，关联真实的请求路径</span></span><br><span class="line">      <span class="attr">serviceId:</span> <span class="string">user-service</span> <span class="comment"># eureka注册中心，服务id</span></span><br><span class="line">      <span class="comment"># url: http://localhost:8081  # 微服务真实路径</span></span><br></pre></td></tr></table></figure><h3 id="2-4-5-启动测试"><a href="#2-4-5-启动测试" class="headerlink" title="2.4.5.启动测试"></a>2.4.5.启动测试</h3><p>再次启动，这次Zuul进行代理时，会利用Ribbon进行负载均衡访问：</p><p><img data-src="/assets/1604459313314.png" alt="1525677821212"></p><p>​    </p><p>日志中可以看到使用了负载均衡器：</p><p><img data-src="/assets/1525677891119.png" alt="1525677891119"></p><h2 id="2-5-简化的路由配置"><a href="#2-5-简化的路由配置" class="headerlink" title="2.5.简化的路由配置"></a>2.5.简化的路由配置</h2><p>在刚才的配置中，我们的规则是这样的：</p><ul><li><code>zuul.routes.&lt;route&gt;.path=/xxx/**</code>： 来指定映射路径。<code>&lt;route&gt;</code>是自定义的路由名</li><li><code>zuul.routes.&lt;route&gt;.serviceId=/user-service</code>：来指定服务名。</li></ul><p>而大多数情况下，我们的<code>&lt;route&gt;</code>路由名称往往和 服务名会写成一样的。因此Zuul就提供了一种简化的配置语法：<code>zuul.routes.&lt;serviceId&gt;=&lt;path&gt;</code></p><p>比方说上面我们关于user-service的配置可以简化为一条：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">user-service:</span> <span class="string">/user-service/**</span>  <span class="comment"># 路由分发规则简化配置</span></span><br></pre></td></tr></table></figure><p>省去了对服务名称的配置。</p><h2 id="2-6-默认的路由规则"><a href="#2-6-默认的路由规则" class="headerlink" title="2.6.默认的路由规则"></a>2.6.默认的路由规则</h2><p>在使用Zuul的过程中，上面讲述的规则已经大大的简化了配置项。但是当服务较多时，配置也是比较繁琐的。因此Zuul就指定了默认的路由规则：</p><ul><li>默认情况下，一切服务的映射路径就是服务名本身。<ul><li>例如服务名为：<code>user-service</code>，则默认的映射路径就是：<code>/user-service/**</code></li></ul></li></ul><p>也就是说，刚才的映射规则我们完全不配置也是OK的，不信就试试看。</p><p>如果想要禁用某个路由规则，可以这样：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">ignored-services:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">eureka-server</span></span><br></pre></td></tr></table></figure><h2 id="2-7-路由前缀"><a href="#2-7-路由前缀" class="headerlink" title="2.7.路由前缀"></a>2.7.路由前缀</h2><p>配置示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">user-service:</span> <span class="string">/user-service/**</span>  <span class="comment"># 路由分发规则简化配置</span></span><br><span class="line">      <span class="comment">#user-service: # 网关动态路由分发的微服务名称</span></span><br><span class="line">      <span class="comment">#path: /user-service/**  # 映射路径  通过映射路径，关联真实的请求路径</span></span><br><span class="line">      <span class="comment">#serviceId: user-service # eureka注册中心，服务id</span></span><br><span class="line">      <span class="comment"># url: http://localhost:8081  # 微服务真实路径</span></span><br><span class="line">  <span class="attr">ignored-services:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">eureka-server</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">/api</span>  <span class="comment"># 路由前缀</span></span><br></pre></td></tr></table></figure><p>我们通过<code>zuul.prefix=/api</code>来指定了路由的前缀，这样在发起请求时，路径就要以/api开头。</p><p>路径<code>/api/user-service/user/1</code>将会被代理到<code>/user-service/user/1</code></p><h2 id="2-8-过滤器"><a href="#2-8-过滤器" class="headerlink" title="2.8.过滤器"></a>2.8.过滤器</h2><p>Zuul作为网关的其中一个重要功能，就是实现请求的鉴权。而这个动作我们往往是通过Zuul提供的过滤器来实现的。</p><h3 id="2-8-1-ZuulFilter"><a href="#2-8-1-ZuulFilter" class="headerlink" title="2.8.1.ZuulFilter"></a>2.8.1.ZuulFilter</h3><p>ZuulFilter是过滤器的顶级父类。在这里我们看一下其中定义的4个最重要的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> ZuulFilter implements IZuulFilter&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span></span>;<span class="comment">// 来自IZuulFilter</span></span><br><span class="line"></span><br><span class="line">    <span class="function">Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException</span>;<span class="comment">// IZuulFilter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>filterType</code>：返回字符串，代表过滤器的类型。包含以下4种： </p><p>  <code>pre</code>：请求在被路由之前执行</p><p>  <code>route</code>：在路由请求时调用</p><p>  <code>post</code>：在routing和errror过滤器之后调用</p><p>  <code>error</code>：处理请求时发生错误调用</p></li><li><p><code>filterOrder</code>：通过返回的int值来定义过滤器的执行顺序，数字越小优先级越高。</p></li><li><p><code>shouldFilter</code>：返回一个Boolean值，判断该过滤器是否需要执行。返回true执行，返回false不执行。</p></li><li><p><code>run</code>：过滤器的具体业务逻辑。</p></li></ul><h3 id="2-8-2-过滤器执行生命周期："><a href="#2-8-2-过滤器执行生命周期：" class="headerlink" title="2.8.2.过滤器执行生命周期："></a>2.8.2.过滤器执行生命周期：</h3><p>这张是Zuul官网提供的请求生命周期图，清晰的表现了一次请求在各个过滤器的执行顺序。</p><p><img data-src="/assets/1533945001048.png" alt="1533945001048"></p><ul><li>正常流程：<ul><li>请求到达首先会经过pre类型过滤器，而后到达routing类型，进行路由，请求就到达真正的服务提供者，执行请求，返回结果后，会到达post过滤器。而后返回响应。</li></ul></li><li>异常流程：<ul><li>整个过程中，pre或者routing过滤器出现异常，都会直接进入error过滤器，再error处理完毕后，会将请求交给POST过滤器，最后返回给用户。</li><li>如果是error过滤器自己出现异常，最终也会进入POST过滤器，而后返回。</li><li>如果是POST过滤器出现异常，会跳转到error过滤器，但是与pre和routing不同的时，请求不会再到达POST过滤器了。</li></ul></li></ul><p>所有内置过滤器列表：</p><p><img data-src="/assets/1604474654324.png" alt="1525682427811"></p><h3 id="2-8-3-使用场景"><a href="#2-8-3-使用场景" class="headerlink" title="2.8.3.使用场景"></a>2.8.3.使用场景</h3><p>场景非常多：</p><ul><li>请求鉴权：一般放在pre类型，如果没有访问权限，直接就拦截了</li><li>异常处理：一般会在error类型和post类型过滤器中结合来处理。</li><li>服务调用时长统计：pre和post结合使用。</li></ul><h2 id="2-9-自定义过滤器"><a href="#2-9-自定义过滤器" class="headerlink" title="2.9.自定义过滤器"></a>2.9.自定义过滤器</h2><p>接下来我们来自定义一个过滤器，模拟一个登录的校验。基本逻辑：如果请求中有access-token参数，则认为请求有效，放行。</p><h3 id="2-9-1-定义过滤器类"><a href="#2-9-1-定义过滤器类" class="headerlink" title="2.9.1.定义过滤器类"></a>2.9.1.定义过滤器类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.filters;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.ZuulFilter;</span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.context.RequestContext;</span><br><span class="line"><span class="keyword">import</span> com.netflix.zuul.exception.ZuulException;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.cloud.netflix.zuul.filters.support.FilterConstants.FORM_BODY_WRAPPER_FILTER_ORDER;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.cloud.netflix.zuul.filters.support.FilterConstants.PRE_TYPE;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PRE_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> FORM_BODY_WRAPPER_FILTER_ORDER+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> ZuulException </span>&#123;</span><br><span class="line">        <span class="comment">//如果请求中有access-token参数，则认为请求有效，放行。</span></span><br><span class="line">        <span class="comment">//1、获取请求对象 参考 FormBodyWrapperFilter获取请求对象</span></span><br><span class="line">        RequestContext ctx = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = ctx.getRequest();</span><br><span class="line">        <span class="comment">//2获取请求参数</span></span><br><span class="line">        String token = request.getParameter(<span class="string">"access-token"</span>);</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isBlank(token))&#123;</span><br><span class="line">            <span class="comment">//未登录，拦截请求</span></span><br><span class="line">            ctx.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">//返回权限不足状态码</span></span><br><span class="line">            ctx.setResponseStatusCode(HttpStatus.UNAUTHORIZED.value());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;  <span class="comment">//登录了，放行请求</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-9-2-测试"><a href="#2-9-2-测试" class="headerlink" title="2.9.2.测试"></a>2.9.2.测试</h3><p>没有token参数时，访问失败：</p><p><img data-src="/assets/1604474580424.png" alt="60447458042"></p><p>添加token参数后：</p><p><img data-src="/assets/1604474595462.png" alt="1525683354113"></p><h2 id="2-10-负载均衡和熔断"><a href="#2-10-负载均衡和熔断" class="headerlink" title="2.10.负载均衡和熔断"></a>2.10.负载均衡和熔断</h2><p>Zuul中默认就已经集成了Ribbon负载均衡和Hystix熔断机制。但是所有的超时策略都是走的默认值，比如熔断超时时间只有1S，很容易就触发了。因此建议我们手动进行配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">6000</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">1000</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">2000</span></span><br><span class="line">  <span class="attr">MaxAutoRetries:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">MaxAutoRetriesNextServer:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="2-11-Zuul的高可用"><a href="#2-11-Zuul的高可用" class="headerlink" title="2.11.Zuul的高可用"></a>2.11.Zuul的高可用</h2><p>启动多个Zuul服务，自动注册到Eureka，形成集群。如果是服务内部访问，你访问Zuul，自动负载均衡，没问题。</p><p>但是，Zuul更多是外部访问，PC端、移动端等。他们无法通过Eureka进行负载均衡，那么该怎么办？</p><p>此时，我们会使用其它的服务网关，来对Zuul进行代理。比如：Nginx</p><h1 id="3-了解知识："><a href="#3-了解知识：" class="headerlink" title="3.了解知识："></a>3.了解知识：</h1><h2 id="3-1-bootstrap-yml-和-application-yml"><a href="#3-1-bootstrap-yml-和-application-yml" class="headerlink" title="3.1.bootstrap.yml 和 application.yml"></a>3.1.bootstrap.yml 和 application.yml</h2><p>bootstrap.yml（bootstrap.properties）用来程序引导时执行，应用于更加早期配置信息读取，如可以使用来配置application.yml中使用到参数等</p><p>application.yml（application.properties) 应用程序特有配置信息，可以用来配置后续各个模块中需使用的公共参数等。</p><p>bootstrap.yml 先于 application.yml 加载</p><p>技术上，bootstrap.yml 是被一个父级的 Spring ApplicationContext 加载的。</p><p>这个父级的 Spring ApplicationContext是先加载的，在加载application.yml 的 ApplicationContext之前。</p><p>可以通过设置<code>spring.cloud.bootstrap.enabled=false</code>来禁用<code>bootstrap</code>。</p><h2 id="3-2-Spring-Boot多环境配置切换"><a href="#3-2-Spring-Boot多环境配置切换" class="headerlink" title="3.2.Spring Boot多环境配置切换"></a>3.2.Spring Boot多环境配置切换</h2><p>一般在一个项目中，总是会有好多个环境。</p><p>比如：开发环境 -&gt; 测试环境 -&gt; 预发布环境 -&gt; 生产环境。</p><p><img data-src="/assets/1604476475148.png" alt="60447647514"></p><p>每个环境上的配置文件总是不一样的，甚至开发环境中每个开发者的环境可能也会有一点不同，配置读取可是一个让人有点伤脑筋的问题。</p><p>Spring Boot提供了一种优先级配置读取的机制来帮助我们从这种困境中走出来。</p><p>常规情况下，我们都知道Spring Boot的配置会从<code>application.yml或.properties</code>中读取</p><p>根据Spring Boot的文档,配置使用的优先级从高到低的顺序，具体如下所示：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 命令行参数。</span><br><span class="line"><span class="number">2.</span> 通过 System.getProperties() 获取的 Java 系统参数。</span><br><span class="line"><span class="number">3.</span> 操作系统环境变量。</span><br><span class="line"><span class="number">4.</span> 从 java:comp/env 得到的 JNDI 属性。</span><br><span class="line"><span class="number">5.</span> 通过 RandomValuePropertySource 生成的“random.*”属性。</span><br><span class="line"><span class="number">6.</span> 应用 Jar 文件之外的属性文件(application.properties/yml)。</span><br><span class="line"><span class="number">7.</span> 应用 Jar 文件内部的属性文件(application.properties/yml)。</span><br><span class="line"><span class="number">8.</span> 在应用配置 Java 类（包含“@Configuration”注解的 Java 类）中通过“@PropertySource”注解声明的属性文件。</span><br><span class="line"><span class="number">9.</span> 通过“SpringApplication.setDefaultProperties”声明的默认属性。</span><br></pre></td></tr></table></figure><p>这意味着，如果Spring Boot在优先级更高的位置找到了配置，那么它就会无视低级的配置。</p><p>方法一、不在配置文件写上配置节定义，而是通过执行时定位不同配置文件来区分。如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar demo.jar --spring.config.location=/path/test_evn.properties</span><br></pre></td></tr></table></figure><p>方法二、在配置文件写上配置节定义，在执行时传递配置节需激活定义名称来区分。</p><p>一般情况下我们这样定义环境：dev :开发，test：测试环境，prod：生产环境</p><p>在yml 文件中配置的话，写法如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">prod</span> <span class="comment">#生产环境</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/test</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure><p>启动Jar包的时候：Java -jar xxxxxx.jar spring.profiles.active=prod 也可以这样启动设置配置文件，但是这只是用于开发和测试</p><h1 id="4-集中配置组件SpringCloudConfig-4-1-Spring-Cloud-Config简介"><a href="#4-集中配置组件SpringCloudConfig-4-1-Spring-Cloud-Config简介" class="headerlink" title="4. 集中配置组件SpringCloudConfig 4.1 Spring Cloud Config简介"></a>4. 集中配置组件SpringCloudConfig 4.1 Spring Cloud Config简介</h1><p>​    在分布式系统中，由于服务数量巨多，为了方便服务配置文件统一管理，实时更新，所以需要分布式配置中心组件。在Spring Cloud中，有分布式配置中心组件spring cloud config ，它支持配置服务放在配置服务的内存中（即本地），也支持放在远程Git仓库中。在spring cloud config 组件中，分两个角色，一是config server，二是config client。</p><p>​    Config Server是一个可横向扩展、集中式的配置服务器，它用于集中管理应用程序各个环境下的配置，默认使用Git存储配置文件内容，也可以使用SVN存储，或者是本地文件存储。</p><p>​    Config Client是Config Server的客户端，用于操作存储在Config Server中的配置内容。微服务在启动时会请求Config Server获取配置文件的内容，请求到后再启动容器。</p><p>详细内容看在线文档： <a href="https://springcloud.cc/spring-cloud-config.html" target="_blank" rel="noopener">https://springcloud.cc/spring-cloud-config.html</a></p><h2 id="4-2-配置服务端"><a href="#4-2-配置服务端" class="headerlink" title="4.2 配置服务端"></a>4.2 配置服务端</h2><h3 id="4-2-1-将配置文件提交到码云"><a href="#4-2-1-将配置文件提交到码云" class="headerlink" title="4.2.1 将配置文件提交到码云"></a>4.2.1 将配置文件提交到码云</h3><p>​    使用GitHub时，国内的用户经常遇到的问题是访问速度太慢，有时候还会出现无法连接的情况。如果我们希望体验Git飞一般的速度，可以使用国内的Git托管服务——<a href="https://gitee.com/" target="_blank" rel="noopener">码云</a>（<a href="https://gitee.com/" target="_blank" rel="noopener">gitee.com</a>）。</p><p>​    和GitHub相比，码云也提供免费的Git仓库。此外，还集成了代码质量检测、项目演示等功能。对于团队协作开发，码云还提供了项目管理、代码托管、文档管理的服务。</p><p>步骤：</p><p>（1）浏览器打开gitee.com，注册用户 ，注册后登陆码云管理控制台</p><p><img data-src="/assets/8_21.png" alt=""></p><p>（2）创建仓库  javaee4  (点击右上角的加号 ，下拉菜单选择创建项目)</p><p><img data-src="/assets/1604476876771.png" alt="60447687677"></p><p>（3）上传配置文件，将user-service工程的application.yml改名为user-dev.yml后上传</p><p><img data-src="/assets/1604476981117.png" alt="60447698111"></p><p>可以通过拖拽的方式将文件上传上去</p><p><img data-src="/assets/8_26.png" alt=""></p><p>上传成功后列表可见</p><p><img data-src="/assets/1604477058559.png" alt="60447705855"></p><p>可以再次编辑此文件</p><p><img data-src="/assets/1604478662261.png" alt="60447866226"></p><p>文件命名规则：</p><p>{application}-{profile}.yml或{application}-{profile}.properties</p><p>application为应用名称 profile指的开发环境（用于区分开发环境，测试环境、生产环境等）</p><p>（4）复制git地址 ,备用</p><p><img data-src="/assets/8_24.png" alt=""></p><p>地址为：<a href="https://gitee.com/sunmoon76/spring-cloud-config-test.git" target="_blank" rel="noopener">https://gitee.com/sunmoon76/spring-cloud-config-test.git</a></p><h3 id="4-2-2-配置中心微服务"><a href="#4-2-2-配置中心微服务" class="headerlink" title="4.2.2 配置中心微服务"></a>4.2.2 配置中心微服务</h3><p>（1）创建工程模块 配置中心微服务  config-server  </p><p><img data-src="/assets/1604477163724.png" alt="1576229334831"></p><p> pom.xml引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）创建启动类ConfigServerApplication</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.config.server.EnableConfigServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span> <span class="comment">//开启配置中心服务端应用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigServerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigServerApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）编写配置文件application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">12000</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-server</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://gitee.com/zhangxian-vika/javaee4.git</span></span><br><span class="line">          <span class="attr">skip-ssl-validation:</span> <span class="literal">true</span>  <span class="comment"># 跳过SSL安全认证</span></span><br></pre></td></tr></table></figure><p>（4）浏览器测试：<a href="http://localhost:12000/user-dev.yml" target="_blank" rel="noopener">http://localhost:12000/user-dev.yml</a> 可以看到配置内容</p><h2 id="4-3-配置客户端"><a href="#4-3-配置客户端" class="headerlink" title="4.3 配置客户端"></a>4.3 配置客户端</h2><p>（1）在user-service工程添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）在user-service工程中添加bootstrap.yml ,删除application.yml </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">user</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://127.0.0.1:12000</span></span><br></pre></td></tr></table></figure><h1 id="5-消息总线组件SpringCloudBus"><a href="#5-消息总线组件SpringCloudBus" class="headerlink" title="5 消息总线组件SpringCloudBus"></a>5 消息总线组件SpringCloudBus</h1><h2 id="5-1-SpringCloudBus简介"><a href="#5-1-SpringCloudBus简介" class="headerlink" title="5.1 SpringCloudBus简介"></a>5.1 SpringCloudBus简介</h2><p>​    如果我们更新码云中的配置文件，那客户端工程是否可以及时接受新的配置信息呢？我们现在来做有一个测试，修改一下码云中的配置文件中mysql的端口 或者连接不同mysql服务器 ，然后测试数据依然可以查询出来，证明修改服务器中的配置并没有更新立刻到工程，只有重新启动程序才会读取配置。 那我们如果想在不重启微服务的情况下更新配置如何来实现呢?  我们使用SpringCloudBus来实现配置的自动更新。</p><p>工作流程图：</p><p><img data-src="/assets/1584512626579.png" alt="1584512626579"></p><h2 id="5-2-代码实现"><a href="#5-2-代码实现" class="headerlink" title="5.2 代码实现"></a>5.2 代码实现</h2><h3 id="5-2-1-配置服务端-config-server"><a href="#5-2-1-配置服务端-config-server" class="headerlink" title="5.2.1 配置服务端  config-server"></a>5.2.1 配置服务端  config-server</h3><p>（1）修改config-sever工程的pom.xml，引用依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）修改application.yml ，添加配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/leyou</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">leyou</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">leyou</span></span><br><span class="line"><span class="attr">management:</span> <span class="comment">#暴露触发消息总线的地址</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">bus-refresh</span></span><br></pre></td></tr></table></figure><h3 id="5-2-2-配置客户端-user-service"><a href="#5-2-2-配置客户端-user-service" class="headerlink" title="5.2.2 配置客户端  user-service"></a>5.2.2 配置客户端  user-service</h3><p>我们还是以用户微服务模块为例，加入消息总线，确保RabbitMQ正常</p><p>（1）修改user_service工程 ，引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）在user-service的bootstrap.yml添加rabbitMQ的配置文件</p><p><img data-src="/assets/1604479832065.png" alt="60447983206"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">user-service</span> <span class="comment"># 作为注册中当前应用的唯一标记 应用名称  使用中划线拼接</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/springboot_db2</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/leyou</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">leyou</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">leyou</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#defaultZone: http://localhost:10086/eureka,http://localhost:10087/eureka  # eureka客户端连接服务端地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:10086/eureka</span>  <span class="comment"># eureka客户端连接服务端地址</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">ip-address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span>  <span class="comment"># 优先使用IP地址进行服务注册和服务调用 默认：使用主机名</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">$&#123;eureka.instance.ip-address&#125;:$&#123;server.port&#125;</span>  <span class="comment"># 自定义eureka管理平台展示服务信息的格式</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">30</span> <span class="comment">#服务续约(renew)的间隔，默认为30秒</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">90</span> <span class="comment">#服务失效时间，默认值90秒</span></span><br></pre></td></tr></table></figure><p>（3）启动 注册中心、配置中心、user-service项目看是否正常运行</p><p>（4）修改码云上的配置文件 ，将数据库改成另一个数据库springboot_db2</p><p><strong>准备springboot_db2数据库和相关数据</strong></p><p><img data-src="/assets/1604478997721.png" alt="60447899772"></p><p><img data-src="/assets/1604478662261.png" alt="60447866226"></p><p><img data-src="/assets/1604478701630.png" alt="60447870163"></p><p>（5）测试    Url: <a href="http://127.0.0.1:12000/actuator/bus-refresh" target="_blank" rel="noopener">http://127.0.0.1:12000/actuator/bus-refresh</a>   Method: post  </p><p><img data-src="/assets/1604480227081.png" alt="60448022708"></p><p><img data-src="C:/Users/Sunmoon/Desktop/%E5%B0%B1%E4%B8%9A%E7%8F%AD/%E7%AC%94%E8%AE%B0/Spring/SpringCloud/assets/1604480260363.png" alt="60448026036"></p><p><img data-src="/assets/1604480273543.png" alt="60448027354"></p><p>（6）再次观察输出的数据是否是读取了springboot_db中的数据。</p><p><img data-src="/assets/1604480329763.png" alt="60448032976"></p><p>经常出的错误：415问题 </p><p><img data-src="/assets/1584513241138.png" alt="1584513241138"></p><p><img data-src="/assets/1584526763709.png" alt="1584526763709"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-Feign&quot;&gt;&lt;a href=&quot;#1-Feign&quot; class=&quot;headerlink&quot; title=&quot;1.Feign&quot;&gt;&lt;/a&gt;1.Feign&lt;/h1&gt;&lt;p&gt;在前面的学习中，我们使用了Ribbon的负载均衡功能，大大简化了远程调用时的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String userStr = restTemplate.getForObject(&lt;span class=&quot;string&quot;&gt;&quot;http://user-service/findById/&quot;&lt;/span&gt; + id, String&lt;span class=&quot;class&quot;&gt;.&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;如果就学到这里，你可能以后需要编写类似的大量重复代码，格式基本相同，无非参数不一样。有没有更优雅的方式，来对这些代码再次优化呢？&lt;/p&gt;
&lt;p&gt;这就是我们接下来要学的Feign的功能了。&lt;/p&gt;
&lt;h2 id=&quot;1-1-简介&quot;&gt;&lt;a href=&quot;#1-1-简介&quot; class=&quot;headerlink&quot; title=&quot;1.1.简介&quot;&gt;&lt;/a&gt;1.1.简介&lt;/h2&gt;&lt;p&gt;有道词典的英文解释：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&quot;/assets/1525662976679.png&quot; alt=&quot;1525662976679&quot;&gt; &lt;/p&gt;
&lt;p&gt;为什么叫伪装？&lt;/p&gt;
&lt;p&gt;Feign可以把Rest的请求进行隐藏，伪装成类似SpringMVC的Controller一样。你不用再自己拼接url，拼接参数等等操作，一切都交给Feign去做。&lt;/p&gt;
&lt;p&gt;项目主页：&lt;a href=&quot;https://github.com/OpenFeign/feign&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/OpenFeign/feign&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="框架" scheme="http://sunmoon.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="SpringCloud" scheme="http://sunmoon.com/categories/%E6%A1%86%E6%9E%B6/SpringCloud/"/>
    
    
      <category term="Feign" scheme="http://sunmoon.com/tags/Feign/"/>
    
      <category term="Zuul网关" scheme="http://sunmoon.com/tags/Zuul%E7%BD%91%E5%85%B3/"/>
    
      <category term="集中配置组件SpringCloudConfig" scheme="http://sunmoon.com/tags/%E9%9B%86%E4%B8%AD%E9%85%8D%E7%BD%AE%E7%BB%84%E4%BB%B6SpringCloudConfig/"/>
    
      <category term="消息总线组件SpringCloudBus" scheme="http://sunmoon.com/tags/%E6%B6%88%E6%81%AF%E6%80%BB%E7%BA%BF%E7%BB%84%E4%BB%B6SpringCloudBus/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud-1</title>
    <link href="http://sunmoon.com/2020/11/03/SpringCloud-1/"/>
    <id>http://sunmoon.com/2020/11/03/SpringCloud-1/</id>
    <published>2020-11-03T13:50:18.000Z</published>
    <updated>2020-11-04T14:07:46.822Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-系统架构演变"><a href="#1-系统架构演变" class="headerlink" title="1.系统架构演变"></a>1.系统架构演变</h1><p>随着互联网的发展，网站应用的规模不断扩大。需求的激增，带来的是技术上的压力。系统架构也因此也不断的演进、升级、迭代。从单一应用，到垂直拆分，到分布式服务，到SOA，以及现在火热的微服务架构，还有在Google带领下来势汹涌的Service Mesh。我们到底是该乘坐微服务的船只驶向远方，还是偏安一隅得过且过？</p><p>其实生活不止眼前的苟且，还有诗和远方。所以我们今天就回顾历史，看一看系统架构演变的历程；把握现在，学习现在最火的技术架构；展望未来，争取成为一名优秀的Java工程师。</p><a id="more"></a><h2 id="1-1-集中式架构（单体架构）"><a href="#1-1-集中式架构（单体架构）" class="headerlink" title="1.1. 集中式架构（单体架构）"></a>1.1. 集中式架构（单体架构）</h2><p>当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是影响项目开发的关键。</p><p><img data-src="/assets/1545912768292.png" alt="1545912768292"> </p><p>存在的问题：</p><ul><li>代码耦合，开发维护困难</li><li>无法针对不同模块进行针对性优化</li><li>无法水平扩展</li><li>单点容错率低，并发能力差</li></ul><h2 id="1-2-垂直拆分"><a href="#1-2-垂直拆分" class="headerlink" title="1.2.垂直拆分"></a>1.2.垂直拆分</h2><p>当访问量逐渐增大，单一应用无法满足需求，此时为了应对更高的并发和业务需求，我们根据业务功能对系统进行拆分：</p><p><img data-src="/assets/1545912974097.png" alt="1545912974097"> </p><p>优点：</p><ul><li>系统拆分实现了流量分担，解决了并发问题</li><li>可以针对不同模块进行优化</li><li>方便水平扩展，负载均衡，容错率提高</li></ul><p>缺点：</p><ul><li>系统间相互独立，会有很多重复开发工作，影响开发效率</li></ul><h2 id="1-3-分布式服务"><a href="#1-3-分布式服务" class="headerlink" title="1.3.分布式服务"></a>1.3.分布式服务</h2><p>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式调用是关键。</p><p><img data-src="/assets/1545913905548.png" alt="1545913905548"> </p><p>优点：</p><ul><li>将基础服务进行了抽取，系统间相互调用，提高了代码复用和开发效率</li></ul><p>缺点：</p><ul><li>系统间耦合度变高，调用关系错综复杂，难以维护</li></ul><h2 id="1-4-服务治理架构（SOA）"><a href="#1-4-服务治理架构（SOA）" class="headerlink" title="1.4.服务治理架构（SOA）"></a>1.4.服务治理架构（SOA）</h2><p>SOA ：面向服务的架构</p><p>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(SOA)是关键</p><p><img data-src="/assets/1525530804753.png" alt="1525530804753"></p><p>以前出现了什么问题？</p><ul><li>服务越来越多，需要管理每个服务的地址</li><li>调用关系错综复杂，难以理清依赖关系</li><li>服务过多，服务状态难以管理，无法根据服务情况动态管理</li></ul><p>服务治理要做什么？</p><ul><li>服务注册中心，实现服务自动注册和发现，无需人为记录服务地址</li><li>服务自动订阅，服务列表自动推送，服务调用透明化，无需关心依赖关系</li><li>动态监控服务状态监控报告，人为控制服务状态</li></ul><p>缺点：</p><ul><li>服务间会有依赖关系，一旦某个环节出错会影响较大</li><li>服务关系复杂，运维、测试部署困难，不符合DevOps思想</li></ul><h2 id="1-5-微服务"><a href="#1-5-微服务" class="headerlink" title="1.5.微服务"></a>1.5.微服务</h2><p>前面说的SOA，英文翻译过来是面向服务。微服务，似乎也是服务，都是对系统进行拆分。因此两者非常容易混淆，但其实缺有一些差别：</p><p><img data-src="/assets/1604365934008.png" alt="60436593400"></p><p>微服务的特点：</p><ul><li>单一职责：微服务中每一个服务都对应唯一的业务能力，做到单一职责</li><li>微：微服务的服务拆分粒度很小，例如一个用户管理就可以作为一个服务。每个服务虽小，但“五脏俱全”。</li><li>面向服务：面向服务是说每个服务都要对外暴露Rest风格服务接口API。并不关心服务的技术实现，做到与平台和语言无关，也不限定用什么技术实现，只要提供Rest的接口即可。</li><li>自治：自治是说服务间互相独立，互不干扰<ul><li>团队独立：每个服务都是一个独立的开发团队，人数不能过多。</li><li>技术独立：因为是面向服务，提供Rest接口，使用什么技术没有别人干涉</li><li>前后端分离：采用前后端分离开发，提供统一Rest接口，后端不用再为PC、移动段开发不同接口</li><li>数据库分离：每个服务都使用自己的数据源</li><li>部署独立，服务间虽然有调用，但要做到服务重启不影响其它服务。有利于持续集成和持续交付。每个服务都是独立的组件，可复用，可替换，降低耦合，易维护</li></ul></li></ul><p>微服务结构图：</p><p><img data-src="/assets/1526860071166.png" alt="1526860071166"></p><h1 id="2-服务调用方式"><a href="#2-服务调用方式" class="headerlink" title="2.服务调用方式"></a>2.服务调用方式</h1><h2 id="2-1-RPC和HTTP"><a href="#2-1-RPC和HTTP" class="headerlink" title="2.1.RPC和HTTP"></a>2.1.RPC和HTTP</h2><p>无论是微服务还是SOA，都面临着服务间的远程调用。那么服务间的远程调用方式有哪些呢？</p><p>常见的远程调用方式有以下2种：</p><ul><li>RPC：Remote Produce Call远程过程调用，类似的还有RMI（remote method invoke）。自定义数据格式，基于原生TCP通信，速度快，效率高。早期的webservice，现在热门的dubbo，都是RPC的典型代表.</li></ul><ul><li><p>Http：http其实是一种网络传输协议，基于TCP，规定了数据传输的格式。现在客户端浏览器与服务端通信基本都是采用Http协议，也可以用来进行远程服务调用。缺点是消息封装臃肿，优势是对服务的提供和调用方没有任何技术限定，自由灵活，更符合微服务理念。</p><p>  现在热门的Rest风格，就可以通过http协议来实现。</p></li></ul><p>如果你们公司全部采用Java技术栈，那么使用Dubbo作为微服务架构是一个不错的选择。</p><p>相反，如果公司的技术栈多样化，而且你更青睐Spring家族，那么SpringCloud搭建微服务是不二之选。在我们的项目中，我们会选择SpringCloud套件，因此我们会使用Http方式来实现服务间调用。</p><h2 id="2-2-Http客户端工具"><a href="#2-2-Http客户端工具" class="headerlink" title="2.2.Http客户端工具"></a>2.2.Http客户端工具</h2><p>既然微服务选择了Http，那么我们就需要考虑自己来实现对请求和响应的处理。不过开源世界已经有很多的http客户端工具，能够帮助我们做这些事情，例如：</p><ul><li>HttpClient</li><li>OKHttp</li><li>URLConnection</li></ul><p>接下来，不过这些不同的客户端，API各不相同，都是通过java技术模拟浏览器发请求。</p><h1 id="3-Spring的RestTemplate"><a href="#3-Spring的RestTemplate" class="headerlink" title="3.Spring的RestTemplate"></a>3.Spring的RestTemplate</h1><p>Spring提供了一个RestTemplate模板工具类，对基于Http的客户端进行了封装，并且实现了对象与json的序列化和反序列化，非常方便。RestTemplate并没有限定Http的客户端类型，而是进行了抽象，目前常用的3种都有支持：</p><ul><li>HttpClient</li><li>OkHttp</li><li>JDK原生的URLConnection（默认的）</li></ul><p>我们导入资料提供的demo工程：</p><p><img data-src="/assets/1584236228790.png" alt="1584236228790"></p><p>首先在项目中注册一个<code>RestTemplate</code>对象，可以在启动类位置注册：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpDemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(HttpDemoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">      StringHttpMessageConverter messageConverter = <span class="keyword">new</span> StringHttpMessageConverter(Charset.forName(<span class="string">"UTF-8"</span>));</span><br><span class="line"><span class="comment">//    修改默认的字符集 默认是的iso-8859-1</span></span><br><span class="line">      restTemplate.getMessageConverters().add(<span class="number">1</span>,messageConverter);</span><br><span class="line">      <span class="keyword">return</span> restTemplate;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在测试类中直接<code>@Autowired</code>注入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.HttpDemoApplication;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span>(<span class="title">classes</span> </span>= HttpDemoApplication<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">HttpDemoApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">httpGet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">User user = <span class="keyword">this</span>.restTemplate.getForObject(<span class="string">"http://localhost/findById/8"</span>, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过RestTemplate的getForObject()方法，传递url地址及实体类的字节码，RestTemplate会自动发起请求，接收响应，并且帮我们对响应结果进行反序列化。</li></ul><p><img data-src="/assets/1525573702492.png" alt="1525573702492"></p><p>学习完了Http客户端工具，接下来就可以正式学习微服务了。</p><h1 id="4-初识SpringCloud"><a href="#4-初识SpringCloud" class="headerlink" title="4.初识SpringCloud"></a>4.初识SpringCloud</h1><p>微服务是一种架构方式，最终肯定需要技术架构去实施。</p><p>微服务的实现方式很多，但是最火的莫过于Spring Cloud了。为什么？</p><ul><li>后台硬：作为Spring家族的一员，有整个Spring全家桶靠山，背景十分强大。</li><li>技术强：Spring作为Java领域的前辈，可以说是功力深厚。有强力的技术团队支撑，一般人还真比不了</li><li>群众基础好：可以说大多数程序员的成长都伴随着Spring框架，试问：现在有几家公司开发不用Spring？SpringCloud与Spring的各个框架无缝整合，对大家来说一切都是熟悉的配方，熟悉的味道。</li><li>使用方便：相信大家都体会到了SpringBoot给我们开发带来的便利，而SpringCloud完全支持SpringBoot的开发，用很少的配置就能完成微服务框架的搭建</li></ul><h2 id="4-1-简介"><a href="#4-1-简介" class="headerlink" title="4.1.简介"></a>4.1.简介</h2><p>SpringCloud是Spring旗下的项目之一，<a href="http://projects.spring.io/spring-cloud/" target="_blank" rel="noopener">官网地址：http://projects.spring.io/spring-cloud/</a></p><p>Spring最擅长的就是集成，把世界上最好的框架拿过来，集成到自己的项目中。</p><p>SpringCloud也是一样，它将现在非常流行的一些技术整合到一起，实现了诸如：配置管理，服务发现，智能路由，负载均衡，熔断器，控制总线，集群状态等等功能。其主要涉及的组件包括：</p><p>Netflix：</p><ul><li>Eureka：注册中心 </li><li>Zuul：服务网关 </li><li>Ribbon：负载均衡</li><li>Feign：服务调用</li><li>Hystrix：熔断器</li></ul><p>以上只是其中一部分，架构图：</p><p><img data-src="/assets/1525575656796.png" alt="1525575656796"></p><h2 id="4-2-版本"><a href="#4-2-版本" class="headerlink" title="4.2.版本"></a>4.2.版本</h2><p>Spring Cloud的版本命名比较特殊，因为它不是一个组件，而是许多组件的集合，它的命名是以A到Z的为首字母的一些单词（其实是伦敦地铁站的名字）组成：</p><p><img data-src="/assets/1576137430009.png" alt="1576137430009"></p><p>其中包含的组件，也都有各自的版本，如下表：</p><table><thead><tr><th>Component</th><th>Edgware.SR6</th><th>Greenwich.SR2</th><th>Greenwich.BUILD-SNAPSHOT</th></tr></thead><tbody><tr><td>spring-cloud-aws</td><td>1.2.4.RELEASE</td><td>2.1.2.RELEASE</td><td>2.1.3.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-bus</td><td>1.3.4.RELEASE</td><td>2.1.2.RELEASE</td><td>2.1.3.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-cli</td><td>1.4.1.RELEASE</td><td>2.0.0.RELEASE</td><td>2.0.1.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-commons</td><td>1.3.6.RELEASE</td><td>2.1.2.RELEASE</td><td>2.1.3.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-contract</td><td>1.2.7.RELEASE</td><td>2.1.2.RELEASE</td><td>2.1.3.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-config</td><td>1.4.7.RELEASE</td><td>2.1.3.RELEASE</td><td>2.1.4.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-netflix</td><td>1.4.7.RELEASE</td><td>2.1.2.RELEASE</td><td>2.1.3.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-security</td><td>1.2.4.RELEASE</td><td>2.1.3.RELEASE</td><td>2.1.4.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-cloudfoundry</td><td>1.1.3.RELEASE</td><td>2.1.2.RELEASE</td><td>2.1.3.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-consul</td><td>1.3.6.RELEASE</td><td>2.1.2.RELEASE</td><td>2.1.3.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-sleuth</td><td>1.3.6.RELEASE</td><td>2.1.1.RELEASE</td><td>2.1.2.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-stream</td><td>Ditmars.SR5</td><td>Fishtown.SR3</td><td>Fishtown.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-zookeeper</td><td>1.2.3.RELEASE</td><td>2.1.2.RELEASE</td><td>2.1.3.BUILD-SNAPSHOT</td></tr><tr><td>spring-boot</td><td>1.5.21.RELEASE</td><td>2.1.5.RELEASE</td><td>2.1.8.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-task</td><td>1.2.4.RELEASE</td><td>2.1.2.RELEASE</td><td>2.1.3.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-vault</td><td>1.1.3.RELEASE</td><td>2.1.2.RELEASE</td><td>2.1.3.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-gateway</td><td>1.0.3.RELEASE</td><td>2.1.2.RELEASE</td><td>2.1.3.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-openfeign</td><td></td><td>2.1.2.RELEASE</td><td>2.1.3.BUILD-SNAPSHOT</td></tr><tr><td>spring-cloud-function</td><td>1.0.2.RELEASE</td><td>2.0.2.RELEASE</td><td>2.0.3.BUILD-SNAPSHOT</td></tr></tbody></table><p>注意：Spring Cloud和spring boot版本的关系</p><table><thead><tr><th>Release Train</th><th>Boot Version</th></tr></thead><tbody><tr><td>Hoxton</td><td>2.2.x</td></tr><tr><td>Greenwich</td><td>2.1.x</td></tr><tr><td>Finchley</td><td>2.0.x</td></tr><tr><td>Edgware</td><td>1.5.x</td></tr><tr><td>Dalston</td><td>1.5.x</td></tr></tbody></table><p>接下来，我们就一一学习SpringCloud中的重要组件。</p><h1 id="5-微服务场景模拟"><a href="#5-微服务场景模拟" class="headerlink" title="5.微服务场景模拟"></a>5.微服务场景模拟</h1><p>首先，我们需要模拟一个服务调用的场景。方便后面学习微服务架构</p><h2 id="5-1-创建父工程"><a href="#5-1-创建父工程" class="headerlink" title="5.1.创建父工程"></a>5.1.创建父工程</h2><p>微服务中需要同时创建多个项目，为了方便课堂演示，我们先创建一个父工程，然后后续的工程都以这个工程为父，实现maven的聚合。这样可以在一个窗口看到所有工程，方便我们讲解。<strong>在实际开发中，应该是每个微服务独立一个工程。</strong></p><p><img data-src="/assets/1529042834656.png" alt="1529042834656"></p><p>编写项目信息：</p><p> <img data-src="/assets/1529042868833.png" alt="1529042868833"></p><p>编写保存位置：</p><p><img data-src="/assets/1529042934471.png" alt="1529042934471"></p><p>然后将Pom修改成这样：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Greenwich.SR1<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper.starter.version</span>&gt;</span>2.1.4<span class="tag">&lt;/<span class="name">mapper.starter.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pageHelper.starter.version</span>&gt;</span>1.2.5<span class="tag">&lt;/<span class="name">pageHelper.starter.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- springCloud --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 通用Mapper启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mapper.starter.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mysql驱动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里已经对大部分要用到的依赖的版本进行了 管理，方便后续使用</p><h2 id="5-2-服务提供者"><a href="#5-2-服务提供者" class="headerlink" title="5.2.服务提供者"></a>5.2.服务提供者</h2><p>我们新建一个项目，对外提供查询用户的服务。</p><h3 id="5-2-1-创建module"><a href="#5-2-1-创建module" class="headerlink" title="5.2.1.创建module"></a>5.2.1.创建module</h3><p>选中父工程：cloud-demo</p><p> <img data-src="/assets/1533786389928.png" alt="1533786389928"></p><p>填写module信息：</p><p><img data-src="/assets/1529043293477.png" alt="1529043293477"></p><p>注意，子模块要在父工程的下级目录：</p><p><img data-src="/assets/1529043334927.png" alt="1529043334927"></p><h3 id="5-2-2-依赖"><a href="#5-2-2-依赖" class="headerlink" title="5.2.2.依赖"></a>5.2.2.依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>user-service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>项目结构：</p><p> <img data-src="/assets/1529043450850.png" alt="1529043450850"></p><h3 id="5-1-2-编写代码"><a href="#5-1-2-编写代码" class="headerlink" title="5.1.2.编写代码"></a>5.1.2.编写代码</h3><p>属性文件,这里我们采用了yml语法，而不是properties：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/数据库名称?useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p>启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"cn.itcast.user.mapper"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(UserApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_user"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@KeySql</span>(useGeneratedKeys = <span class="keyword">true</span>) </span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userName; <span class="comment">// 用户名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password; <span class="comment">// 密码</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">// 姓名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;<span class="comment">// 年龄</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer sex;<span class="comment">// 性别，1男性，2女性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date birthday;<span class="comment">// 出生日期</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date created;<span class="comment">// 创建时间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date updated;<span class="comment">// 更新时间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String note;<span class="comment">// 备注</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mapper:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">User</span>&gt;</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Service：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findByById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.selectByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加一个对外查询的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.findByById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>项目结构：</p><p> <img data-src="/assets/1529043755485.png" alt="1529043755485"></p><h3 id="5-1-3-启动并测试："><a href="#5-1-3-启动并测试：" class="headerlink" title="5.1.3.启动并测试："></a>5.1.3.启动并测试：</h3><p>启动项目，访问接口：<a href="http://localhost:8081/user/7" target="_blank" rel="noopener">http://localhost:8081/user/7</a></p><p> <img data-src="/assets/1525593139364.png" alt="1525593139364"></p><h2 id="5-2-服务调用者"><a href="#5-2-服务调用者" class="headerlink" title="5.2.服务调用者"></a>5.2.服务调用者</h2><h3 id="5-2-1-创建工程"><a href="#5-2-1-创建工程" class="headerlink" title="5.2.1.创建工程"></a>5.2.1.创建工程</h3><p>与上面类似，这里不再赘述，需要注意的是，我们<strong>调用</strong>user-service的功能，因此不需要mybatis相关依赖了。</p><p><img data-src="/assets/1529043818258.png" alt="1529043818258"></p><p><img data-src="/assets/1529043876180.png" alt="1529043876180"></p><p>pom：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>consumer-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结构：</p><p> <img data-src="/assets/1529043945158.png" alt="1529043945158"></p><h3 id="5-2-2-编写代码"><a href="#5-2-2-编写代码" class="headerlink" title="5.2.2.编写代码"></a>5.2.2.编写代码</h3><p>首先在启动类中注册<code>RestTemplate</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userName; <span class="comment">// 用户名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password; <span class="comment">// 密码</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">// 姓名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;<span class="comment">// 年龄</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer sex;<span class="comment">// 性别，1男性，2女性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date birthday;<span class="comment">// 出生日期</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date created;<span class="comment">// 创建时间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date updated;<span class="comment">// 更新时间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String note;<span class="comment">// 备注</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写controller，在controller中直接调用RestTemplate，远程访问user-service的服务接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"consumer"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>&#123;</span><br><span class="line">        String url = <span class="string">"http://localhost:8081/user/"</span> + id;</span><br><span class="line">        User user = restTemplate.getForObject(url, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>项目结构：</p><p> <img data-src="/assets/1533791573960.png" alt="1533791573960"></p><h3 id="5-2-3-启动测试："><a href="#5-2-3-启动测试：" class="headerlink" title="5.2.3.启动测试："></a>5.2.3.启动测试：</h3><p>因为我们没有配置端口，那么默认就是8080，我们访问：<a href="http://localhost:8080/consumer/8" target="_blank" rel="noopener">http://localhost:8080/consumer/8</a></p><p> <img data-src="/assets/1533792850467.png" alt="1533792850467"></p><p>一个简单的远程服务调用案例就实现了。</p><h2 id="5-3-有没有问题？"><a href="#5-3-有没有问题？" class="headerlink" title="5.3.有没有问题？"></a>5.3.有没有问题？</h2><p>简单回顾一下，刚才我们写了什么：</p><p>user-service：对外提供了查询用户的接口</p><p>consumer：通过RestTemplate访问<code>http://locahost:8081/user/{id}</code>接口，查询用户数据</p><p>存在什么问题？</p><ul><li>在consumer中，我们把url地址硬编码到了代码中，不方便后期维护</li><li>consumer需要记忆user-service的地址，如果出现变更，可能得不到通知，地址将失效</li><li>consumer不清楚user-service的状态，服务宕机也不知道</li><li>user-service只有1台服务，不具备高可用性</li><li>即便user-service形成集群，consumer还需自己实现负载均衡</li></ul><p>其实上面说的问题，概括一下就是分布式服务必然要面临的问题：</p><ul><li>服务管理<ul><li>如何自动注册和发现</li><li>如何实现状态监管</li><li>如何实现动态路由</li></ul></li><li>服务如何实现负载均衡</li><li>服务如何解决容灾问题</li><li>服务如何实现统一配置</li></ul><p>以上的问题，我们都将在SpringCloud中得到答案。</p><h1 id="6-Eureka注册中心"><a href="#6-Eureka注册中心" class="headerlink" title="6.Eureka注册中心"></a>6.Eureka注册中心</h1><p>是Netflix公司出品，英文直译：发现了，找到了！</p><h2 id="6-1-认识Eureka"><a href="#6-1-认识Eureka" class="headerlink" title="6.1.认识Eureka"></a>6.1.认识Eureka</h2><p>首先我们来解决第一问题，服务的管理。</p><blockquote><p>问题分析</p></blockquote><p>在刚才的案例中，user-service对外提供服务，需要对外暴露自己的地址。而consumer（调用者）需要记录服务提供者的地址。将来地址出现变更，还需要及时更新。这在服务较少的时候并不觉得有什么，但是在现在日益复杂的互联网环境，一个项目肯定会拆分出十几，甚至数十个微服务。此时如果还人为管理地址，不仅开发困难，将来测试、发布上线都会非常麻烦，这与DevOps的思想是背道而驰的。</p><blockquote><p>网约车</p></blockquote><p>这就好比是 网约车出现以前，人们出门叫车只能叫出租车。一些私家车想做出租却没有资格，被称为黑车。而很多人想要约车，但是无奈出租车太少，不方便。私家车很多却不敢拦，而且满大街的车，谁知道哪个才是愿意载人的。一个想要，一个愿意给，就是缺少引子，缺乏管理啊。</p><p>此时滴滴这样的网约车平台出现了，所有想载客的私家车全部到滴滴注册，记录你的车型（服务类型），身份信息（联系方式）。这样提供服务的私家车，在滴滴那里都能找到，一目了然。</p><p>此时要叫车的人，只需要打开APP，输入你的目的地，选择车型（服务类型），滴滴自动安排一个符合需求的车到你面前，为你服务，完美！</p><blockquote><p>Eureka做什么？</p></blockquote><p>Eureka就好比是滴滴，负责管理、记录服务提供者的信息。服务调用者无需自己寻找服务，而是把自己的需求告诉Eureka，然后Eureka会把符合你需求的服务告诉你。</p><p>同时，服务提供方与Eureka之间通过<code>“心跳”</code>机制进行监控，当某个服务提供方出现问题，Eureka自然会把它从服务列表中剔除。</p><p>这就实现了服务的自动注册、发现、状态监控。</p><h2 id="6-2-原理图"><a href="#6-2-原理图" class="headerlink" title="6.2.原理图"></a>6.2.原理图</h2><blockquote><p>基本架构：</p></blockquote><p><img data-src="/assets/1548578752909.png" alt="1548578752909"></p><p>renewal：续约</p><ul><li>Eureka-Server：就是服务注册中心（可以是一个集群），对外暴露自己的地址。</li><li>提供者：启动后向Eureka注册自己信息（地址，服务名称等），并且定期进行服务续约</li><li>消费者：服务调用方，会定期去Eureka拉取服务列表，然后使用负载均衡算法选出一个服务进行调用。</li><li>心跳(续约)：提供者定期通过http方式向Eureka刷新自己的状态</li></ul><h2 id="6-3-入门案例"><a href="#6-3-入门案例" class="headerlink" title="6.3.入门案例"></a>6.3.入门案例</h2><h3 id="6-3-1-编写EurekaServer"><a href="#6-3-1-编写EurekaServer" class="headerlink" title="6.3.1.编写EurekaServer"></a>6.3.1.编写EurekaServer</h3><p>接下来我们创建一个项目，启动一个EurekaServer：</p><p> <img data-src="/assets/1529060127090.png" alt="1529060127090"></p><p> <img data-src="/assets/1529060143421.png" alt="1529060143421"></p><p>依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span> <span class="comment">// 声明这个应用是一个EurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(EurekaServer<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10086</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span> <span class="comment"># 应用名称，会在Eureka中作为服务的id标识（serviceId）</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment"># EurekaServer的地址，现在是自己的地址，如果是集群，需要写其它Server的地址。</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment"># 不注册自己</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment">#不拉取服务</span></span><br></pre></td></tr></table></figure><p>启动服务，并访问：<a href="http://127.0.0.1:10086" target="_blank" rel="noopener">http://127.0.0.1:10086</a></p><p><img data-src="/assets/1525604959508.png" alt="1525604959508"></p><p><img data-src="/assets/1533793804268.png" alt="1533793804268"></p><h3 id="6-3-2-服务注册"><a href="#6-3-2-服务注册" class="headerlink" title="6.3.2.服务注册"></a>6.3.2.服务注册</h3><p>注册服务，就是在服务上添加Eureka的客户端依赖，客户端代码会自动把服务注册到EurekaServer中。</p><blockquote><p>我们在user-service-demo中添加Eureka客户端依赖：</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Eureka客户端 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在启动类上开启Eureka客户端功能</p></blockquote><p>通过添加<code>@EnableDiscoveryClient</code>来开启Eureka客户端功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.spring.annotation.MapperScan;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"cn.itcast.dao"</span>)</span><br><span class="line"><span class="comment">//@EnableEurekaClient  此注解仅支持eureka注册中心</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span>  <span class="comment">// 此注解不仅支持eureka注册中心，还支持 像zookeeper等注册中心</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(UserApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>编写配置</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/heima</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">user-service</span> <span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment"># EurekaServer地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>这里我们添加了spring.application.name属性来指定应用名称，将来会作为服务的id使用。</li></ul><blockquote><p>重启项目，访问<a href="http://127.0.0.1:10086/eureka" target="_blank" rel="noopener">Eureka监控页面</a>查看 <a href="http://127.0.0.1:10086/eureka" target="_blank" rel="noopener">http://127.0.0.1:10086/eureka</a> </p></blockquote><p><img data-src="/assets/1533793943618.png" alt="1533793943618"></p><p>我们发现user-service服务已经注册成功了</p><p><img data-src="/assets/1543548007606.png" alt="1543548007606"></p><h3 id="6-3-3-服务发现"><a href="#6-3-3-服务发现" class="headerlink" title="6.3.3.服务发现"></a>6.3.3.服务发现</h3><p>接下来我们修改consumer-demo，尝试从EurekaServer获取服务。</p><p>方法与消费者类似，只需要在项目中添加EurekaClient依赖，就可以通过服务名称来获取信息了！</p><p>1）添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Eureka客户端 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2）在启动类开启Eureka客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">// 开启Eureka客户端  可以省略</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApplication</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）修改配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consumer</span> <span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment"># EurekaServer地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure><p>4）修改代码，用DiscoveryClient类的方法，根据服务名称，获取服务实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"consumer"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>&#123;</span><br><span class="line">        <span class="comment">// 根据服务id(spring.application.name)，获取服务实例列表</span></span><br><span class="line">        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">"user-service"</span>);</span><br><span class="line">        <span class="comment">// 取出一个服务实例</span></span><br><span class="line">        ServiceInstance instance = instances.get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 查询</span></span><br><span class="line">        User user = restTemplate.getForObject(instance.getUri()+<span class="string">"/user/"</span> + id, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5）Debug跟踪运行：</p><p>生成的URL：</p><p> <img data-src="/assets/1533824658440.png" alt="1533824658440"></p><p>这里的ip是本机的局域网ip。</p><p>访问结果：</p><p> <img data-src="/assets/1533824695239.png" alt="1533824695239"></p><h2 id="6-4-Eureka详解"><a href="#6-4-Eureka详解" class="headerlink" title="6.4.Eureka详解"></a>6.4.Eureka详解</h2><p>接下来我们详细讲解Eureka的原理及配置。</p><h3 id="6-4-1-基础架构"><a href="#6-4-1-基础架构" class="headerlink" title="6.4.1.基础架构"></a>6.4.1.基础架构</h3><p>Eureka架构中的三个核心角色：</p><ul><li><p>服务注册中心</p><p>  Eureka的服务端应用，提供服务注册和发现功能，就是刚刚我们建立的eureka-server</p></li><li><p>服务提供者</p><p>  提供服务的应用，可以是SpringBoot应用，也可以是其它任意技术实现，只要对外提供的是Rest风格服务即可。本例中就是我们实现的user-service</p></li><li><p>服务消费者</p><p>  消费应用从注册中心获取服务列表，从而得知每个服务方的信息，知道去哪里调用服务方。本例中就是我们实现的consumer</p></li></ul><h3 id="6-4-2-高可用的Eureka-Server"><a href="#6-4-2-高可用的Eureka-Server" class="headerlink" title="6.4.2.高可用的Eureka Server"></a>6.4.2.高可用的Eureka Server</h3><p>Eureka Server即服务的注册中心，在刚才的案例中，我们只有一个EurekaServer，事实上EurekaServer也可以是一个集群，形成高可用的Eureka中心。</p><blockquote><p>服务同步</p></blockquote><p>多个Eureka Server之间也会互相注册为服务，当服务提供者注册到Eureka Server集群中的某个节点时，该节点会把服务的信息同步给集群中的每个节点，从而实现高可用集群。因此，无论客户端访问到Eureka Server集群中的任意一个节点，都可以获取到完整的服务列表信息。</p><p>而作为客户端，需要把信息注册到每个Eureka中：</p><p> <img data-src="/assets/1533825644505.png" alt="1533825644505"></p><p>如果有三个Eureka，则每一个EurekaServer都需要注册到其它几个Eureka服务中，例如：有三个分别为10086、10087、10088，则：</p><ul><li>10086要注册到10087和10088上</li><li>10087要注册到10086和10088上</li><li>10088要注册到10086和10087上</li></ul><blockquote><p>动手搭建高可用的EurekaServer</p></blockquote><p>我们假设要搭建<strong>两条</strong>EurekaServer的集群，端口分别为：10086和10087</p><p>1）我们修改原来的EurekaServer配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10086</span> <span class="comment"># 端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span> <span class="comment"># 应用名称，会在Eureka中显示</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment"># 配置其他Eureka服务的地址，而不是自己，比如10087</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10087/eureka</span></span><br></pre></td></tr></table></figure><p>所谓的高可用注册中心，其实就是把EurekaServer自己也作为一个服务，注册到其它EurekaServer上，这样多个EurekaServer之间就能互相发现对方，从而形成集群。因此我们做了以下修改：</p><ul><li>把service-url的值改成了另外一台EurekaServer的地址，而不是自己</li></ul><p>此时启动EurekaServer</p><p>2）另外一台配置恰好相反：</p><p>注意：idea中一个应用不能启动两次，我们需要重新配置一个启动器：</p><p> <img data-src="/assets/1525615070033.png" alt="1525615070033"></p><p>赋值一个启动项</p><p> <img data-src="/assets/1533825083030.png" alt="1533825083030"></p><p>通过JVM参数覆盖配置文件配置：</p><p><img data-src="/assets/1556338089508.png" alt="1556338089508"></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-<span class="module-access"><span class="module"><span class="identifier">Dserver</span>.</span></span>port=<span class="number">10087</span> -<span class="module-access"><span class="module"><span class="identifier">Deureka</span>.</span></span>client.serviceUrl.defaultZone=http:<span class="comment">//127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure><p><img data-src="/assets/1604387065961.png" alt="60438706596"></p><p>然后启动即可。</p><p>3）启动测试：</p><p><img data-src="/assets/1533825779695.png" alt="1533825779695"></p><p>4）客户端注册服务到集群</p><p>因为EurekaServer不止一个，因此注册服务的时候，service-url参数需要变化：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span> <span class="comment"># EurekaServer地址,多个地址以','隔开</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka,http://127.0.0.1:10087/eureka</span></span><br></pre></td></tr></table></figure><h3 id="6-4-3-Eureka客户端"><a href="#6-4-3-Eureka客户端" class="headerlink" title="6.4.3.Eureka客户端"></a>6.4.3.Eureka客户端</h3><p>服务提供者要向EurekaServer注册服务，并且完成服务续约等工作。</p><blockquote><p>服务注册</p></blockquote><p>服务提供者在启动时，会检测配置属性中的：<code>eureka.client.register-with-erueka=true</code>参数是否正确，事实上默认就是true。如果值确实为true，则会向EurekaServer发起一个Rest请求，并携带自己的元数据信息，Eureka Server会把这些信息保存到一个双层Map结构中。</p><ul><li>第一层Map的Key就是服务id，一般是配置中的<code>spring.application.name</code>属性</li><li>第二层Map的key是服务的实例id。一般host+ serviceId + port，例如：<code>locahost:user-service:8081</code></li><li>值则是服务的实例对象，也就是说一个服务，可以同时启动多个不同实例，形成集群。</li></ul><p>user-service默认注册时使用的是主机名，如果我们想用ip进行注册，可以在user-service的application.yml添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">ip-address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="comment"># ip地址</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment"># 更倾向于使用ip，而不是host名</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">$&#123;eureka.instance.ip-address&#125;:$&#123;server.port&#125;</span> <span class="comment"># 自定义实例的id</span></span><br></pre></td></tr></table></figure><blockquote><p>服务续约</p></blockquote><p>在注册服务完成以后，<strong>服务提供者</strong>会维持一个心跳（定时向EurekaServer发起Rest请求），告诉EurekaServer：“我还活着”。这个我们称为服务的续约（renewal）；</p><p>有两个重要参数可以修改服务续约的行为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span>    </span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">30</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">90</span></span><br></pre></td></tr></table></figure><ul><li>lease-renewal-interval-in-seconds：服务续约(renew)的间隔，默认为30秒</li><li>lease-expiration-duration-in-seconds：服务失效时间，默认值90秒</li></ul><p>也就是说，默认情况下每个30秒服务会向注册中心发送一次心跳，证明自己还活着。如果超过90秒没有发送心跳，EurekaServer就会认为该服务宕机，会从服务列表中移除，这两个值在生产环境不要修改，默认即可。</p><blockquote><p>获取服务列表</p></blockquote><p>当<strong>服务消费者</strong>启动时，会检测<code>eureka.client.fetch-registry=true</code>参数的值，如果为true，则会从Eureka Server服务的列表只读备份，然后缓存在本地。并且<code>每隔30秒</code>会重新获取并更新数据。我们可以通过下面的参数来修改：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">registry-fetch-interval-seconds:</span> <span class="number">30</span></span><br></pre></td></tr></table></figure><h3 id="6-4-5-服务下线、失效剔除和自我保护"><a href="#6-4-5-服务下线、失效剔除和自我保护" class="headerlink" title="6.4.5.服务下线、失效剔除和自我保护"></a>6.4.5.服务下线、失效剔除和自我保护</h3><blockquote><p>服务下线</p></blockquote><p>当服务进行正常关闭操作时，它会触发一个服务下线的REST请求给Eureka Server，告诉服务注册中心：“我要下线了”。服务中心接受到请求之后，将该服务置为下线状态。</p><blockquote><p>失效剔除</p></blockquote><p>有时我们的服务可能由于内存溢出或网络故障等原因使得服务不能正常的工作，而服务注册中心并未收到“服务下线”的请求。相对于服务提供者的“服务续约”操作，服务注册中心在启动时会创建一个定时任务，默认每隔一段时间（默认为60秒）将当前清单中超时（默认为90秒）没有续约的服务剔除，这个操作被称为失效剔除。</p><p>可以通过<code>eureka.server.eviction-interval-timer-in-ms</code>参数对其进行修改，单位是毫秒。</p><blockquote><p>自我保护</p></blockquote><p>我们关停一个服务，就会在Eureka面板看到一条警告：</p><p><img data-src="/assets/1525618396076.png" alt="1525618396076"></p><p>这是触发了Eureka的自我保护机制。当服务未按时进行心跳续约时，Eureka会统计服务实例最近15分钟心跳续约的比例是否低于了85%。在生产环境下，因为网络延迟等原因，心跳失败实例的比例很有可能超标，但是此时就把服务剔除列表并不妥当，因为服务可能没有宕机。Eureka在这段时间内不会剔除任何服务实例，直到网络恢复正常。生产环境下这很有效，保证了大多数服务依然可用，不过也有可能获取到失败的服务实例，因此服务调用者必须做好服务的失败容错。</p><p>我们可以通过下面的配置来关停自我保护：（在eureka注册中心的微服务中配置）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span> <span class="comment"># 关闭自我保护模式（缺省为打开）</span></span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>服务的注册和发现都是可控制的，可以关闭也可以开启。默认都是开启</li><li>注册后需要心跳，心跳周期默认30秒一次，超过90秒没法认为宕机</li><li>服务拉取默认30秒拉取一次</li><li>Eureka每个60秒会剔除标记为宕机的服务</li><li>Eureka会有自我保护，当心跳失败比例超过阈值，那么开启自我保护，不再剔除服务。</li><li>Eureka高可用就是多台Eureka互相注册在对方上</li></ul><h1 id="7-负载均衡Ribbon"><a href="#7-负载均衡Ribbon" class="headerlink" title="7.负载均衡Ribbon"></a>7.负载均衡Ribbon</h1><p>在刚才的案例中，我们启动了一个user-service，然后通过DiscoveryClient来获取服务实例信息，然后获取ip和端口来访问。</p><p>但是实际环境中，我们往往会开启很多个user-service的集群。此时我们获取的服务列表中就会有多个，到底该访问哪一个呢？</p><p>一般这种情况下我们就需要编写负载均衡算法，在多个实例列表中进行选择。</p><p>不过Eureka中已经帮我们集成了负载均衡组件：Ribbon，简单修改代码即可使用。</p><p>什么是Ribbon：</p><p><img data-src="/assets/1525619257397.png" alt="1525619257397"></p><p>接下来，我们就来使用Ribbon实现负载均衡。</p><h2 id="7-1-启动两个服务实例"><a href="#7-1-启动两个服务实例" class="headerlink" title="7.1.启动两个服务实例"></a>7.1.启动两个服务实例</h2><p>首先我们启动两个user-service实例，一个8081，一个8082。</p><p>和Eureka的高可用配置方式一致，复制启动参数，修改启动端口  -Dserver.port=8082</p><p> <img data-src="/assets/1533826535457.png" alt="1533826535457"></p><p>Eureka监控面板：</p><p><img data-src="/assets/1533826564383.png" alt="1533826564383"></p><h2 id="7-2-开启负载均衡"><a href="#7-2-开启负载均衡" class="headerlink" title="7.2.开启负载均衡"></a>7.2.开启负载均衡</h2><p>因为Eureka中已经集成了Ribbon，所以我们无需引入新的依赖。直接修改代码：</p><p>在RestTemplate的配置方法上添加<code>@LoadBalanced</code>注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改调用方式，不再手动获取ip和端口，而是直接通过服务名称调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">queryById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>&#123;</span><br><span class="line">    String url = <span class="string">"http://user-service/user/"</span> + id;</span><br><span class="line">    User user = restTemplate.getForObject(url, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问页面，查看结果：</p><p> <img data-src="/assets/1533824695239.png" alt="1533824695239"></p><p>完美！</p><h2 id="7-3-源码跟踪"><a href="#7-3-源码跟踪" class="headerlink" title="7.3.源码跟踪"></a>7.3.源码跟踪</h2><p>为什么我们只输入了service名称就可以访问了呢？之前还要获取ip和端口。</p><p>显然有人帮我们根据service名称，获取到了服务实例的ip和端口。它就是<code>LoadBalancerInterceptor</code>，这个类会在对RestTemplate的请求进行拦截，然后从Eureka根据服务id获取服务列表，随后利用负载均衡算法得到真实的服务地址信息，替换服务id。</p><p>我们进行源码跟踪：</p><p><img data-src="/assets/1525620483637.png" alt="1525620483637"></p><p>继续跟入execute方法：发现获取了8082端口的服务</p><p><img data-src="/assets/1525620787090.png" alt="1525620787090"></p><p>再跟下一次，发现获取的是8081：</p><p> <img data-src="/assets/1525620835911.png" alt="1525620835911"></p><p>果然实现了负载均衡。</p><p><strong>源码跟踪</strong></p><p>LoadBalancerInterceptor—&gt;RibbonLoadBalancerClient—&gt;DynamicServerListLoadBalancer—&gt;BaseLoadBalancer—&gt;IRule—&gt;RoundRobinRule</p><p>​    获取服务列表（在loadBalancer中查看）</p><h2 id="7-4-负载均衡策略"><a href="#7-4-负载均衡策略" class="headerlink" title="7.4.负载均衡策略"></a>7.4.负载均衡策略</h2><p>在刚才的代码中，可以看到获取服务使通过一个<code>getServer</code>方法:</p><p> <img data-src="/assets/1525620835911.png" alt="1525620835911"></p><p>我们继续跟入：</p><p><img data-src="/assets/1544361421671.png" alt="1544361421671"></p><p>继续跟踪源码chooseServer方法，发现这么一段代码：</p><p> <img data-src="/assets/1525622652849.png" alt="1525622652849"></p><p>我们看看这个rule是谁：</p><p> <img data-src="/assets/1525622699666.png" alt="1525622699666"></p><p>这里的rule默认值是一个<code>RoundRobinRule</code>，看类的介绍：</p><p> <img data-src="/assets/1525622754316.png" alt="1525622754316"></p><p>这不就是轮询的意思嘛。</p><p>我们注意到，这个类其实是实现了接口IRule的，查看一下：</p><p> <img data-src="/assets/1525622817451.png" alt="1525622817451"></p><p>定义负载均衡的规则接口。</p><p>它有以下实现：</p><p> <img data-src="/assets/1525622876842.png" alt="1525622876842"></p><p>SpringBoot也帮我们提供了修改负载均衡规则的配置入口：（consumer的微服务上配置）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user-service:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span></span><br></pre></td></tr></table></figure><p>格式是：<code>{服务名称}.ribbon.NFLoadBalancerRuleClassName</code>，值就是IRule的实现类。</p><p>再次测试，发现结果变成了随机：</p><p> <img data-src="/assets/1525623193949.png" alt="1525623193949"></p><p>附加：</p><p>Ribbon默认是采用懒加载，即第一次访问时才会去创建负载均衡客户端。往往会出现超时。如果需要采用饥饿加载，即项目启动即创建，可以这样配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">eager-load:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">clients:</span> <span class="string">user-service</span></span><br></pre></td></tr></table></figure><p>负载均衡的源码流程图：</p><p><img data-src="/assets/1551316355275.png" alt="1551316355275"></p><h1 id="8-Hystrix"><a href="#8-Hystrix" class="headerlink" title="8.Hystrix"></a>8.Hystrix</h1><h2 id="8-1-简介"><a href="#8-1-简介" class="headerlink" title="8.1.简介"></a>8.1.简介</h2><p>Hystix,英文意思是豪猪，全身是刺，看起来就不好惹，是一种保护机制。</p><p>Hystrix也是Netflix公司的一款组件。</p><p>主页：<a href="https://github.com/Netflix/Hystrix/" target="_blank" rel="noopener">https://github.com/Netflix/Hystrix/</a></p><p><img data-src="/assets/1525658740266.png" alt="1525658740266"></p><p>那么Hystix的作用是什么呢？具体要保护什么呢？</p><p>Hystix是Netflix开源的一个延迟和容错库，用于隔离访问远程服务、第三方库，防止出现级联失败。</p><h2 id="8-2-雪崩问题"><a href="#8-2-雪崩问题" class="headerlink" title="8.2.雪崩问题"></a>8.2.雪崩问题</h2><p>微服务中，服务间调用关系错综复杂，一个请求，可能需要调用多个微服务接口才能实现，会形成非常复杂的调用链路：</p><p> <img data-src="/assets/1533829099748.png" alt="1533829099748"></p><p>如图，一次业务请求，需要调用A、P、H、I四个服务，这四个服务又可能调用其它服务。</p><p>如果此时，某个服务出现异常：</p><p> <img data-src="/assets/1533829198240.png" alt="1533829198240"></p><p>例如微服务I发生异常，请求阻塞，用户不会得到响应，则tomcat的这个线程不会释放，于是越来越多的用户请求到来，越来越多的线程会阻塞：</p><p> <img data-src="/assets/1533829307389.png" alt="1533829307389"></p><p>服务器支持的线程和并发数有限，请求一直阻塞，会导致服务器资源耗尽，从而导致所有其它服务都不可用，形成雪崩效应。</p><p>这就好比，一个汽车生产线，生产不同的汽车，需要使用不同的零件，如果某个零件因为种种原因无法使用，那么就会造成整台车无法装配，陷入等待零件的状态，直到零件到位，才能继续组装。  此时如果有很多个车型都需要这个零件，那么整个工厂都将陷入等待的状态，导致所有生产都陷入瘫痪。一个零件的波及范围不断扩大。 </p><p>Hystix解决雪崩问题的手段主要是服务降级，包括：</p><ul><li>线程隔离</li><li>服务熔断</li></ul><h2 id="8-3-线程隔离，服务降级"><a href="#8-3-线程隔离，服务降级" class="headerlink" title="8.3.线程隔离，服务降级"></a>8.3.线程隔离，服务降级</h2><h3 id="8-3-1-原理"><a href="#8-3-1-原理" class="headerlink" title="8.3.1.原理"></a>8.3.1.原理</h3><p>线程隔离示意图：</p><p> <img data-src="/assets/1533829598310.png" alt="1533829598310"></p><p>解读：</p><p>Hystrix为每个依赖服务调用分配一个小的线程池，如果线程池已满调用将被立即拒绝，默认不采用排队.加速失败判定时间。</p><p>用户的请求将不再直接访问服务，而是通过线程池中的空闲线程来访问服务，如果<strong>线程池已满</strong>，或者<strong>请求超时</strong>，则会进行降级处理，什么是服务降级？</p><blockquote><p>服务降级：优先保证核心服务，而非核心服务不可用或弱可用。</p></blockquote><p>用户的请求故障时，不会被阻塞，更不会无休止的等待或者看到系统崩溃，至少可以看到一个执行结果（例如返回友好的提示信息） 。</p><p>服务降级虽然会导致请求失败，但是不会导致阻塞，而且最多会影响这个依赖服务对应的线程池中的资源，对其它服务没有响应。</p><p>触发Hystix服务降级的情况：</p><ul><li>线程池已满</li><li>请求超时</li></ul><h3 id="8-3-2-动手实践"><a href="#8-3-2-动手实践" class="headerlink" title="8.3.2.动手实践"></a>8.3.2.动手实践</h3><h4 id="引入依赖："><a href="#引入依赖：" class="headerlink" title="引入依赖："></a>引入依赖：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="开启熔断："><a href="#开启熔断：" class="headerlink" title="开启熔断："></a>开启熔断：</h4><p>在启动类上添加注解：@EnableCircuitBreaker</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApplication</span> </span>&#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，我们类上的注解越来越多，在微服务中，经常会引入上面的三个注解，于是Spring就提供了一个组合注解：@SpringCloudApplication</p><p>  <img data-src="/assets/1533856086255.png" alt="1533856086255"></p><p>因此，我们可以使用这个组合注解来代替之前的3个注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringCloudApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApplication</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写降级逻辑"><a href="#编写降级逻辑" class="headerlink" title="编写降级逻辑"></a>编写降级逻辑</h4><p>当目标服务的调用出现故障，我们希望快速失败，给用户一个友好提示。因此需要提前编写好失败时的降级处理逻辑，要使用HystixCommond来完成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"&#123;id&#125;"</span>)</span><br><span class="line"><span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"queryByIdFallBack"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">queryById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>&#123;</span><br><span class="line">    String url = <span class="string">"http://user-service/user/"</span> + id;</span><br><span class="line">    String user = restTemplate.getForObject(url, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">queryByIdFallBack</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">    log.error(<span class="string">"查询用户信息失败，id：&#123;&#125;"</span>, id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"对不起，网络太拥挤了！"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要注意，因为熔断的降级逻辑方法必须跟正常逻辑方法保证：<strong>相同的参数列表和返回值声明</strong>。失败逻辑中返回User对象没有太大意义，一般会返回友好提示。所以我们把queryById的方法改造为返回String，反正也是Json数据。这样失败逻辑中返回一个错误说明，会比较方便。</p><p>说明：</p><ul><li>@HystrixCommand(fallbackMethod = “queryByIdFallBack”)：用来声明一个降级逻辑的方法</li></ul><p>测试：</p><p>当user-service正常提供服务时，访问与以前一致。但是当我们将user-service停机时，会发现页面返回了降级处理信息：</p><p><img data-src="/assets/1533857268880.png" alt="1533857268880"></p><h4 id="默认的Fallback"><a href="#默认的Fallback" class="headerlink" title="默认的Fallback"></a>默认的Fallback</h4><p>我们刚才把fallback写在了某个业务方法上，如果这样的方法很多，那岂不是要写很多。所以我们可以把Fallback配置加在类上，实现默认fallback：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"consumer"</span>)</span><br><span class="line"><span class="meta">@DefaultProperties</span>(defaultFallback = <span class="string">"defaultFallBack"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"&#123;id&#125;"</span>)</span><br><span class="line">    <span class="meta">@HystrixCommand</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>&#123;</span><br><span class="line">        String url = <span class="string">"http://user-service/user/"</span> + id;</span><br><span class="line">        String user = restTemplate.getForObject(url, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">defaultFallBack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"默认提示：对不起，网络太拥挤了！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@DefaultProperties(defaultFallback = “defaultFallBack”)：在类上指明统一的失败降级方法</li></ul><p><img data-src="/assets/1533858138646.png" alt="1533858138646"></p><h4 id="超时设置："><a href="#超时设置：" class="headerlink" title="超时设置："></a>超时设置：</h4><p>在之前的案例中，请求在超过1秒后都会返回错误信息，这是因为Hystix的默认超时时长为1，我们可以通过配置修改这个值：(以下书写没有提示，可以直接拷贝测试)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">2000</span></span><br></pre></td></tr></table></figure><p>这个配置会作用于全局所有方法。</p><p>为了触发超时，我们可以在user-service中休眠2秒：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> userMapper.selectByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><p><img data-src="/assets/1533858701825.png" alt="1533858701825"></p><p>可以发现，请求的时长已经到了2.01s，证明配置生效了。</p><p>如果把修改时间修改到2秒以下，又可以正常访问了。</p><h2 id="8-4-服务熔断："><a href="#8-4-服务熔断：" class="headerlink" title="8.4.服务熔断："></a>8.4.服务熔断：</h2><h3 id="8-4-1-熔断原理"><a href="#8-4-1-熔断原理" class="headerlink" title="8.4.1.熔断原理"></a>8.4.1.熔断原理</h3><p>熔断器，也叫断路器，其英文单词为：Circuit Breaker </p><p><img data-src="/assets/1525658640314.png" alt="1525658640314"></p><p>Hystix的熔断状态机模型：</p><p><img data-src="/assets/1533830345149.png" alt="1533830345149"></p><p>状态机有3个状态：</p><ul><li>Closed：关闭状态（断路器关闭），所有请求都正常访问。</li><li>Open：打开状态（断路器打开），所有请求都会被降级。Hystix会对请求情况计数，当一定时间内失败请求百分比达到阈值，则触发熔断，断路器会完全关闭。默认失败比例的阈值是50%，请求次数最少不低于20次。</li><li>Half Open：半开状态，open状态不是永久的，打开后会进入休眠时间（默认是5S）。随后断路器会自动进入半开状态。此时会释放1次请求通过，若这个请求是健康的，则会关闭断路器，否则继续保持打开，再次进行5秒休眠计时。</li></ul><h3 id="8-4-2-动手实践"><a href="#8-4-2-动手实践" class="headerlink" title="8.4.2.动手实践"></a>8.4.2.动手实践</h3><p>为了能够精确控制请求的成功或失败，我们在consumer的调用业务中加入一段逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"&#123;id&#125;"</span>)</span><br><span class="line"><span class="meta">@HystrixCommand</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">queryById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(id == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"太忙了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    String url = <span class="string">"http://user-service/user/"</span> + id;</span><br><span class="line">    String user = restTemplate.getForObject(url, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样如果参数是id为1，一定失败，其它情况都成功。（不要忘了清空user-service中的休眠逻辑）</p><p>我们准备两个请求窗口：</p><ul><li>一个请求：<a href="http://localhost:8080/consumer/1，注定失败" target="_blank" rel="noopener">http://localhost:8080/consumer/1，注定失败</a></li><li>一个请求：<a href="http://localhost:8080/consumer/2，肯定成功" target="_blank" rel="noopener">http://localhost:8080/consumer/2，肯定成功</a></li></ul><p>熔断器的默认触发阈值是20次请求，不好触发。休眠时间时5秒，时间太短，不易观察，为了测试方便，我们可以通过配置修改熔断策略：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hystrix</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">command</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">default</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">circuitBreaker</span>:<span class="string"></span></span><br><span class="line"> <span class="attr">requestVolumeThreshold</span>: <span class="string">10</span></span><br><span class="line"> <span class="attr">sleepWindowInMilliseconds</span>: <span class="string">10000</span></span><br><span class="line"> <span class="attr">errorThresholdPercentage</span>: <span class="string">50</span></span><br></pre></td></tr></table></figure><p>解读：</p><ul><li>requestVolumeThreshold：触发熔断的最小请求次数，默认10</li><li>sleepWindowInMilliseconds：休眠时长，默认是10000毫秒</li><li>errorThresholdPercentage：触发熔断的失败请求最小占比，默认50%</li></ul><p>当我们疯狂访问id为1的请求时（超过5次），就会触发熔断。断路器会端口，一切请求都会被降级处理。</p><p>此时你访问id为2的请求，会发现返回的也是失败，而且失败时间很短，只有20毫秒左右：</p><p><img data-src="/assets/1533859591238.png" alt="1533859591238"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-系统架构演变&quot;&gt;&lt;a href=&quot;#1-系统架构演变&quot; class=&quot;headerlink&quot; title=&quot;1.系统架构演变&quot;&gt;&lt;/a&gt;1.系统架构演变&lt;/h1&gt;&lt;p&gt;随着互联网的发展，网站应用的规模不断扩大。需求的激增，带来的是技术上的压力。系统架构也因此也不断的演进、升级、迭代。从单一应用，到垂直拆分，到分布式服务，到SOA，以及现在火热的微服务架构，还有在Google带领下来势汹涌的Service Mesh。我们到底是该乘坐微服务的船只驶向远方，还是偏安一隅得过且过？&lt;/p&gt;
&lt;p&gt;其实生活不止眼前的苟且，还有诗和远方。所以我们今天就回顾历史，看一看系统架构演变的历程；把握现在，学习现在最火的技术架构；展望未来，争取成为一名优秀的Java工程师。&lt;/p&gt;
    
    </summary>
    
    
      <category term="框架" scheme="http://sunmoon.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="SpringCloud" scheme="http://sunmoon.com/categories/%E6%A1%86%E6%9E%B6/SpringCloud/"/>
    
    
      <category term="系统架构演变" scheme="http://sunmoon.com/tags/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E6%BC%94%E5%8F%98/"/>
    
      <category term="服务调用方式" scheme="http://sunmoon.com/tags/%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8%E6%96%B9%E5%BC%8F/"/>
    
      <category term="微服务" scheme="http://sunmoon.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="Eureka注册中心" scheme="http://sunmoon.com/tags/Eureka%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
    
      <category term="负载均衡Ribbon" scheme="http://sunmoon.com/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1Ribbon/"/>
    
      <category term="Hystrix熔断器" scheme="http://sunmoon.com/tags/Hystrix%E7%86%94%E6%96%AD%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot高级</title>
    <link href="http://sunmoon.com/2020/11/02/SpringBoot%E9%AB%98%E7%BA%A7/"/>
    <id>http://sunmoon.com/2020/11/02/SpringBoot%E9%AB%98%E7%BA%A7/</id>
    <published>2020-11-02T09:23:04.000Z</published>
    <updated>2020-11-02T09:32:39.088Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-学习SpringBoot整合常用的框架"><a href="#1-学习SpringBoot整合常用的框架" class="headerlink" title="1. 学习SpringBoot整合常用的框架"></a>1. 学习SpringBoot整合常用的框架</h1><p>我们在学习项目一时用到了很多框架比如shiro、Dubbo 、Quartz、rabbitMQ，每使用一个框架时都需要一些xml配置文件，比较麻烦，而SpringBoot在整合这些框架时就非常方便而且不用出现任何xml文件，接下来见证一下吧！ </p><a id="more"></a><h2 id="1-1-整合Thymeleaf"><a href="#1-1-整合Thymeleaf" class="headerlink" title="1.1 整合Thymeleaf"></a>1.1 整合Thymeleaf</h2><h3 id="1-1-1-需求分析"><a href="#1-1-1-需求分析" class="headerlink" title="1.1.1 需求分析"></a>1.1.1 需求分析</h3><p>现在需要把用户信息在list.html页面上展示，目前有两种思路</p><ul><li>思路1：直接在浏览器上访问 list.html页面，进入页面后异步加载商品数据，渲染页面</li><li>思路2：将请求交给tomcat处理，在服务端完成查询数据，跳转到list.html页面</li></ul><p>两种方式都行，现在我们选择思路2，但是现在的页面是静态的HTML页面，静态页面中没有request域、不能使用&lt;&lt;c:foreach&gt;&gt;标签，那怎么把数据显示到静态页面上呢，答案是：可以使用Themeleaf (模板引擎)。Themeleaf是一种模板引擎，今天的资料中有提供Thymeleaf的学习。</p><p>下面我们就用Thymeleaf把数据显示到静态页面上</p><h3 id="1-1-2-环境准备"><a href="#1-1-2-环境准备" class="headerlink" title="1.1.2 环境准备"></a>1.1.2 环境准备</h3><p>创建工程：</p><p><img data-src="/assets/thymeleaf0.png" alt="thymeleaf0">    </p><p>第一步：添加Themeleaf的启动器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot_day02<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 不需要在单独指定jar包版本 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--springboot整合jdbc--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--指定操作的数据库--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--通用mapper整合springboot --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>编写application.yml配置文件</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql:///springboot_db</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure><p>不需要做任何配置，启动器已经帮我们把Thymeleaf的视图器配置完成：</p><p> <img data-src="/assets/thymeleaf3.png" alt="1526435647041"></p><p>而且，还配置了模板文件（html）的位置，与jsp类似的前缀+ 视图名 + 后缀风格：</p><p><img data-src="/assets/thymeleaf4.png" alt="1526435706301">    </p><ul><li>默认前缀：<code>classpath:/templates/</code></li><li>默认后缀：<code>.html</code></li></ul><p>所以如果我们返回视图：<code>list</code>，会指向到 <code>classpath:/templates/list.html</code></p><p>第二步：把准备好的静态资源，直接放入到项目的resources下的templates和static文件夹下</p><p>如下结构：</p><p><img data-src="/assets/thymeleaf1.png" alt="thymeleaf1">    </p><h3 id="1-1-3-实现功能"><a href="#1-1-3-实现功能" class="headerlink" title="1.1.3 实现功能"></a>1.1.3 实现功能</h3><p>第一步：在Controller、service中添加查询所有用户的方法</p><p>我们重新创建一个正式的UserController代码，因为要跳转到页面，所以就不用RestController注解了</p><p>UserController代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@RestController</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/findAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAll</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; list = userService.findAll();</span><br><span class="line">        model.addAttribute(<span class="string">"users"</span>,list);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id, Model model)</span>&#123;</span><br><span class="line">        User user = userService.findById(id);</span><br><span class="line">        model.addAttribute(<span class="string">"user"</span>,user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"view"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service实现类添加的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.selectAll();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.selectByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dao：使用通用mapper，继承BaseMapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步：查看静态页面</p><p><strong>注意</strong>，把html 的名称空间，改成：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img data-src="/assets/thymeleaf5.png" alt="thymeleaf5">    </p><p>第三步：测试</p><p>访问：<code>http://localhost/findAll</code> 和 <code>http://localhost/user/1</code></p><blockquote><p>略…</p></blockquote><h2 id="1-2-SpringBoot整合rabbitMQ"><a href="#1-2-SpringBoot整合rabbitMQ" class="headerlink" title="1.2 SpringBoot整合rabbitMQ"></a>1.2 SpringBoot整合rabbitMQ</h2><h3 id="1-2-1-需求分析"><a href="#1-2-1-需求分析" class="headerlink" title="1.2.1 需求分析"></a>1.2.1 需求分析</h3><p>创建两个springboot项目。一个用来向RabbitMQ中发送消息（生产者），一个从RabbitMQ中获取消息（消费者）</p><h3 id="1-2-2-环境准备"><a href="#1-2-2-环境准备" class="headerlink" title="1.2.2 环境准备"></a>1.2.2 环境准备</h3><p>第一步：准备RabbitMQ</p><p>浏览器访问：<a href="http://127.0.0.1:15672" target="_blank" rel="noopener">http://127.0.0.1:15672</a> 使用guest/guest登录，在控制创建</p><p>虚拟主机: /leyou</p><p>添加用户并设置密码：leyou/leyou</p><p>给用户赋虚拟主机的权限:使用”leyou”账户操作”/leyou”虚拟主机、</p><p>​    <img data-src="/assets/springboot%E6%95%B4%E5%90%88rabbitMQ0.png" alt="springboot整合rabbitMQ0"></p><p>第二步：</p><p>1、创建消费提供者项目 rabbitmq_producer</p><p><img data-src="/assets/springboot%E6%95%B4%E5%90%88rabbitMQ1.png" alt="springboot整合rabbitMQ1">    </p><p>2、项目中添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SpringBoot整合rabbitMQ--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SpringBoot整合单元测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、在resources目录下添加application.yml文件，里面内容如下</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/leyou</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">leyou</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">leyou</span></span><br></pre></td></tr></table></figure><p>4、在com.sun下创建引导类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ProducerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三步：</p><p> 1、创建消费提供者项目 rabbitmq_consumer</p><p><img data-src="/assets/springboot%E6%95%B4%E5%90%88rabbitMQ2.png" alt="springboot整合rabbitMQ2">    </p><p> 2、3、4和rabbitmq_producer的操作一模一样！</p><h3 id="1-2-3-实现功能"><a href="#1-2-3-实现功能" class="headerlink" title="1.2.3 实现功能"></a>1.2.3 实现功能</h3><p>springboot和junit整合发送消息</p><p>第一步：在<strong>rabbitmq_producer</strong>中添加一个测似类<code>ProducerTest</code>类，代码如下：</p><blockquote><p>关键注解：<code>@RunWith(SpringRunner.class)</code>、<code>@SpringBootTest</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ProducerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生产rabbitMQ消息</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsgTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">"spring.boot.exchange"</span>,<span class="string">"boot.msg"</span>,<span class="string">"这是SpringBoot整合rabbitMQ发送的第一条消息..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步：接收消息</p><p>在<strong>rabbitmq_consumer</strong>项目中的com.sun.consumer包下添加以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//将监听类交给Spring容器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConsumerListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编写监听方法，参数就是监听的内容</span></span><br><span class="line">    <span class="meta">@RabbitListener</span>(bindings = &#123;<span class="meta">@QueueBinding</span>(value = <span class="meta">@Queue</span>(value = <span class="string">"spring.boot.test"</span>,declare = <span class="string">"true"</span>),</span><br><span class="line">                    exchange = <span class="meta">@Exchange</span>(value = <span class="string">"spring.boot.exchange"</span>,</span><br><span class="line">                    type = ExchangeTypes.TOPIC),key = <span class="string">"#.#"</span>)&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getMsg</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三步：测试</p><p>1、先启动rabbitmq_consumer项目的引导类</p><p>2、在执行rabbitmq_producer项目中的junit方法</p><p><img data-src="/assets/springboot%E6%95%B4%E5%90%88rabbitMQ3.png" alt="springboot整合rabbitMQ3">    </p><p>消费者端收到消息，搞定！</p><h1 id="2-SpringBoot原理详细分析"><a href="#2-SpringBoot原理详细分析" class="headerlink" title="2. SpringBoot原理详细分析"></a>2. SpringBoot原理详细分析</h1><p>以上的整合中大都是在项目中导入启动器就可以直接使用了，非常方便，这是什么原理呢，接下来我们从几个注解来剖析一下SpringBoot的原理</p><h2 id="2-1-Conditional说明"><a href="#2-1-Conditional说明" class="headerlink" title="2.1 @Conditional说明"></a>2.1 @Conditional说明</h2><p>看他的中文意思：有条件的</p><p>Condition 是在Spring 4.0 增加的条件判断功能，通过这个可以功能可以实现选择性的创建 Bean 操作。</p><p>SpringBoot是如何知道要创建哪个Bean的？比如SpringBoot是如何知道要创建RabbitTemplate的？</p><p>接下来，创建一个项目具体演示@Conditional注解的用法：</p><h3 id="2-1-1-环境准备"><a href="#2-1-1-环境准备" class="headerlink" title="2.1.1 环境准备"></a>2.1.1 环境准备</h3><p>1、创建项目 springboot_condition</p><p><img data-src="/assets/conditional0.png" alt="conditional0">    </p><p>2、导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--springboot项目基本的启动器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、在com.sun包下创建引导类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConditionApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        ConfigurableApplicationContext run </span><br><span class="line">                = SpringApplication.run(ConditionApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、在com.sun.pojo中添加一个User类,空的就行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、在com.sun.config下创建一个配置类，配置类中使用@Bean创建Bean对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、在引导类中获取User对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConditionApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext run</span><br><span class="line">                = SpringApplication.run(ConditionApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">        User user = run.getBean(User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看控制台日志的输出，证明User对象已经获取了</p><p><img data-src="/assets/conditional1.png" alt="conditional1">    </p><p>现在要做一些限制</p><h3 id="2-1-2-有选择性的创建对象"><a href="#2-1-2-有选择性的创建对象" class="headerlink" title="2.1.2 有选择性的创建对象"></a>2.1.2 有选择性的创建对象</h3><p>需求1：导入Jedis坐标后，创建User这个Bean，没导入，则不创建。</p><h4 id="2-1-2-1-Conditional使用说明"><a href="#2-1-2-1-Conditional使用说明" class="headerlink" title="2.1.2.1 @Conditional使用说明"></a>2.1.2.1 @Conditional使用说明</h4><p><img data-src="/assets/conditional2.png" alt="conditional2">    </p><p>参考上图理解下面的步骤</p><p>① 在创建bean的位置添加@Conditional注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Conditional</span>() <span class="comment">//此时这里会报错的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>② @Conditional注解的源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.context.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Conditional &#123;</span><br><span class="line">    Class&lt;? extends Condition&gt;[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③ 自定义一个实现了Condition接口的子类,需要实现一个matches方法，里面默认是直接返回false</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>④ 在创建User的bean时指定MyCondition的字节码</p><p><img data-src="/assets/conditional3.png" alt="conditional3">    </p><p>再运行引导类时发现User对象获取不到了</p><p><img data-src="/assets/conditional4.png" alt="conditional4">    </p><p>原因是因为自定义的MyCondition中的matches方法返回false导致的，那么如果返回true就能获取到了，那在回到我们的需求：导入Jedis坐标后，创建User这个Bean，没导入，则不创建，那么我们怎么知道Jedis的坐标有没有导入呢？其实很简单，看能不能加载到 Jedis 这个类就可判断了</p><h4 id="2-1-2-2-修改Condition的条件"><a href="#2-1-2-2-修改Condition的条件" class="headerlink" title="2.1.2.2 修改Condition的条件"></a>2.1.2.2 修改Condition的条件</h4><p>所以再修改MyCondition中的matches方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//判断jedis相关jar包是否导入</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"redis.clients.jedis.Jedis"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">//e.printStackTrace();</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试发现，导入Jedis的坐标就能获取User对象，不导入Jedis的坐标就不能获取User对象了</p><p>Jedis坐标如下，自己测试一下吧~</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-1-3-Conditional的高级玩法"><a href="#2-1-3-Conditional的高级玩法" class="headerlink" title="2.1.3 @Conditional的高级玩法"></a>2.1.3 @Conditional的高级玩法</h3><p>需求：将类的判断定义为动态的。判断哪个字节码文件存在可以动态指定。</p><p>自定义条件的步骤</p><p>第一步：自定义一个注解@MyConditional，</p><p>​               需要继承@Conditional注解，再自定义的注解中添加一个name属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Conditional</span>(MyCondition<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">MyConditional</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步：修改刚才的MyCondition类：重写 matches 方法，在 matches 方法中进行逻辑判断，返回boolean值 。 matches 方法两个参数：</p><p>context：上下文对象，可以获取属性值，获取类加载器，获取BeanFactory等。</p><p>metadata：元数据对象，用于获取注解属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断jedis相关jar包是否导入</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//Class.forName("redis.clients.jedis.Jedis");</span></span><br><span class="line">            <span class="comment">//获取注解中的属性</span></span><br><span class="line">            Map&lt;String, Object&gt; map</span><br><span class="line">                    = metadata.getAnnotationAttributes(MyConditional<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br><span class="line">            <span class="comment">//获取name属性</span></span><br><span class="line">            String name = (String) map.get(<span class="string">"name"</span>);</span><br><span class="line">            Class.forName(name);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">//e.printStackTrace();</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三步：在初始化Bean时，使用 @MyClassConditional(name=”类的全限定名”)注解</p><p>在UserConfig中修改user()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">//@Conditional(MyCondition.class) //判断条件是否满足的一个注解</span></span><br><span class="line">    <span class="meta">@MyConditional</span>(name = <span class="string">"redis.clients.jedis.Jedis"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-4-SpringBoot常用条件注解"><a href="#2-1-4-SpringBoot常用条件注解" class="headerlink" title="2.1.4 SpringBoot常用条件注解"></a>2.1.4 SpringBoot常用条件注解</h3><p><code>@ConditionalOnClass</code>：判断环境中是否有对应字节码文件才初始化Bean，和我们自定义的@MyConditional原理一模一样</p><p><code>@ConditionalOnMissingClass</code>：判断环境中没有对应Bean才初始化Bean，和ConditionalOnClass相反</p><p><code>@ConditionalOnProperty</code>：判断配置文件中是否有对应属性和值才初始化Bean</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mm:</span> <span class="string">jj</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">//@Conditional(MyCondition.class) //判断条件是否满足的一个注解</span></span><br><span class="line">    <span class="comment">//@MyConditional(name = "redis.clients.jedis.Jedis")</span></span><br><span class="line">    <span class="comment">//@ConditionalOnClass(name = "redis.clients.jedis.Jedis")</span></span><br><span class="line">    <span class="comment">//@ConditionalOnMissingClass(value = "redis.clients.jedis.Jedis")</span></span><br><span class="line">    <span class="meta">@ConditionalOnProperty</span>(name = <span class="string">"mm"</span>, havingValue = <span class="string">"jj"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-Import说明"><a href="#2-2-Import说明" class="headerlink" title="2.2 @Import说明"></a>2.2 @Import说明</h2><p>SpringBoot 工程是否可以直接获取第三方（非spring的）jar包中定义的Bean？</p><p>SpringBoot中提供了很多Enable开头的注解，这些注解都是用于动态启用某些功能的。而其底层原理是使用@Import注解导入一些配置类，实现Bean的动态加载。</p><p>比如@EnableAutoConfiguration注解</p><p><img data-src="/assets/import%E6%B3%A8%E8%A7%A31.png" alt="import注解1">    </p><h3 id="2-2-1-环境准备"><a href="#2-2-1-环境准备" class="headerlink" title="2.2.1 环境准备"></a>2.2.1 环境准备</h3><p><strong>说明</strong></p><p>创建两个项目<br>第一个项目提供一个User的bean和配置类UserConfig 都放到com.sun包下</p><p>第二个项目com.sun包下创建引导类，获取User对象</p><p>注意两个项目的包故意做成不一样的！</p><p><strong>步骤</strong></p><p>第一步：创建项目springboot_other（可以不用创建直接用自定义条件注解工程）</p><p><img data-src="/assets/import%E6%B3%A8%E8%A7%A32.png" alt="import注解2">    </p><p>添加springboot最基础的启动器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在cn.sun.pojo包下创建实体类User</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sun.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在cn.itcast.config包下创建配置类UserConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//声明配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//实例化对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步：创建项目springboot_import</p><p><img data-src="/assets/import%E6%B3%A8%E8%A7%A33.png" alt="import注解3">    </p><p>添加springboot基本的启动器的依赖，并且添加springboot-other的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot_other<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在com.meng包下创建引导类获取<strong>springboot_other</strong>项目中的User对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.meng;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//run方法后初始化容器</span></span><br><span class="line">        ConfigurableApplicationContext app = SpringApplication.run(MyApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">        <span class="comment">//从容器中获取user对象</span></span><br><span class="line">        User user = app.getBean(User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(user); <span class="comment">//验证是否能获取到user对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码肯定是获取不到的，因为@SpringBootApplication上的@ComponentScan只扫描了com.meng,而第三方的对象在com.sun包下，所以是无法创建User对象的</p><p>我们可以在引导类上使用@ComponentScan（“cn.sun”）即可</p><p><img data-src="/assets/import%E6%B3%A8%E8%A7%A34.png" alt="import注解4">    </p><p>但是在最项目时其实会用到很多非spring提供的包，都是用@ComponentScan扫描那么在引导类上会出现很多的，有没有其他的方式呢？当然有，那就是@Import</p><h3 id="2-2-2-Import的使用"><a href="#2-2-2-Import的使用" class="headerlink" title="2.2.2 @Import的使用"></a>2.2.2 @Import的使用</h3><p>@Import的4种用法都可以把第三方包的类创建对象</p><p>第一种用法：引导类上 @Import(User.class)  ,获取的时候需要使用类型方式</p><p><img data-src="/assets/import%E6%B3%A8%E8%A7%A35.png" alt="import注解5">    </p><p>第二种用法： @Import(UserConfig.class)</p><p><img data-src="/assets/import%E6%B3%A8%E8%A7%A36.png" alt="import注解6">    </p><h2 id="2-3-小结"><a href="#2-3-小结" class="headerlink" title="2.3 小结"></a>2.3 小结</h2><p>@EnableAutoConfiguration 注解内部使用 @Import(AutoConfigurationImportSelector.<strong>class</strong>)来加载配置类。</p><p>配置文件位置：META-INF/spring.factories，该配置文件中定义了大量的配置类，当 SpringBoot 应用启动时，会自动加载这些配置类，初始化Bean</p><p>并不是所有的Bean都会被初始化，在配置类中使用Condition来加载满足条件的Bean</p><h1 id="3-学习自定义启动器"><a href="#3-学习自定义启动器" class="headerlink" title="3. 学习自定义启动器"></a>3. 学习自定义启动器</h1><h2 id="3-1步骤"><a href="#3-1步骤" class="headerlink" title="3.1步骤"></a>3.1步骤</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1、创建starter项目</span><br><span class="line">2、创建实际的业务功能项目hello-spring-boot-autoconfigure</span><br><span class="line">3、添加springboot依赖</span><br><span class="line">4、定义HelloTemplate，实现一个方法</span><br><span class="line">5、定义配置类，在配置类中将HelloTemplate定义为一个Bean</span><br><span class="line">6、添加META-INF/spring.factories，在这个配置文件中添加自动配置的key和value</span><br><span class="line">7、在其他项目中添加启动项目</span><br></pre></td></tr></table></figure><h2 id="3-2创建starter项目"><a href="#3-2创建starter项目" class="headerlink" title="3.2创建starter项目"></a>3.2创建starter项目</h2><h3 id="1-开发一个hello-spring-boot-starter项目，这个项目是空项目，主要做依赖管理"><a href="#1-开发一个hello-spring-boot-starter项目，这个项目是空项目，主要做依赖管理" class="headerlink" title="1.开发一个hello-spring-boot-starter项目，这个项目是空项目，主要做依赖管理"></a>1.开发一个hello-spring-boot-starter项目，这个项目是空项目，主要做依赖管理</h3><p><img data-src="/assets/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%90%AF%E5%8A%A8%E5%99%A81.png" alt="自定义启动器1">    </p><h3 id="2-创建hello-spring-boot-autoconfigure项目"><a href="#2-创建hello-spring-boot-autoconfigure项目" class="headerlink" title="2.创建hello-spring-boot-autoconfigure项目"></a>2.创建hello-spring-boot-autoconfigure项目</h3><p>因为springboot自带的autoconfigure中没有我们开发的HelloTemplate的自动装配，我们需要开发一个hello-spring-boot-autoconfigure项目</p><p>​    <img data-src="/assets/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%90%AF%E5%8A%A8%E5%99%A82.png" alt="自定义启动器2"></p><p>添加基本的springboot依赖(因为需要使用@Bean等注解)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-在autoconfigure项目中开发"><a href="#3-在autoconfigure项目中开发" class="headerlink" title="3.在autoconfigure项目中开发"></a>3.在autoconfigure项目中开发</h3><p>3.1 定义HelloTemplate工具类，实现一个简单功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sun.auto.utils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloTemplate</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello,这是springboot的自定义启动器"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.2 定义HelloAutoConfiguration配置类，将HelloTemplate工具类交给IOC容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sun.auto.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.auto.utils.HelloTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloTemplate <span class="title">helloTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HelloTemplate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.3 在autoconfigure项目的resources目录中创建META-INF目录</p><p>在META-INF目录定义spring.factories配置文件，在改配置文件中定义扫描的配置类（HelloAutoConfiguration),这样spring就能扫描到HelloAutoConfiguration配置类了</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一行固定写法，第二行是我们定义的配置类全限定名，这样spring就能扫描到配置类了</span></span><br><span class="line"><span class="comment"># Auto Configure</span></span><br><span class="line"><span class="string">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span></span><br><span class="line"><span class="string">com.sun.auto.config.HelloAutoConfiguration</span></span><br></pre></td></tr></table></figure><h3 id="4-在hello-spring-boot-starter中添加hello-spring-boot-autoconfigure依赖"><a href="#4-在hello-spring-boot-starter中添加hello-spring-boot-autoconfigure依赖" class="headerlink" title="4.在hello-spring-boot-starter中添加hello-spring-boot-autoconfigure依赖"></a>4.在hello-spring-boot-starter中添加hello-spring-boot-autoconfigure依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-在任何一个springboot项目中使用HelloTemplate工具类"><a href="#5-在任何一个springboot项目中使用HelloTemplate工具类" class="headerlink" title="5.在任何一个springboot项目中使用HelloTemplate工具类"></a>5.在任何一个springboot项目中使用HelloTemplate工具类</h3><p>仅需要添加我们开发的hello-spring-boot-starter依赖，就可以使用HelloTemplate工具类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--自定义启动器hello-spring-boot-starter--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以写编写单元测试一下功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">HelloStartTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HelloTemplate helloTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        String hello = helloTemplate.sayHello();</span><br><span class="line">        System.out.println(hello);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-SpringBoot监控（了解）"><a href="#4-SpringBoot监控（了解）" class="headerlink" title="4. SpringBoot监控（了解）"></a>4. SpringBoot监控（了解）</h1><h2 id="4-1-Actuator监控"><a href="#4-1-Actuator监控" class="headerlink" title="4.1 Actuator监控"></a>4.1 Actuator监控</h2><p>SpringBoot自带监控功能Actuator，可以帮助实现对程序内部运行情况监控，比如监控状况、Bean加载情况、配置属性、日志信息等。</p><p>在任意的springboot项目中测试</p><p>①导入依赖坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpringBoot自带的监控器actuator--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>②访问<a href="http://localhost/actuator" target="_blank" rel="noopener">http://localhost/actuator</a>   springboot项目设置的端口号是80，80端口号可以省略的</p><p><img data-src="/assets/actuator%E7%9B%91%E6%8E%A7%E5%99%A81.png" alt="actuator监控器1">    </p><p>如果想看更详细的health信息信息，在配置文件中添加以下代码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><p>重启项目后再访问</p><p><img data-src="/assets/actuator%E7%9B%91%E6%8E%A7%E5%99%A82.png" alt="actuator监控器2">    </p><p>④ 如果想看更多的信息，在配置文件中添加以下代码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">"*"</span></span><br></pre></td></tr></table></figure><p>重启在访问 <a href="http://localhost/actuator" target="_blank" rel="noopener">http://localhost/actuator</a> ，发现多了很多东西</p><p>重点关注3个</p><p> <a href="http://localhost/actuator/beans" target="_blank" rel="noopener">http://localhost/actuator/beans</a> </p><p> <a href="http://localhost/actuator/env" target="_blank" rel="noopener">http://localhost/actuator/env</a> </p><p> <a href="http://localhost/actuator/mappings" target="_blank" rel="noopener">http://localhost/actuator/mappings</a> </p><p>具体详细的解释：</p><table><thead><tr><th><strong>路径</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>/beans</td><td>描述应用程序上下文里全部的Bean，以及它们的关系</td></tr><tr><td>/env</td><td>获取全部环境属性</td></tr><tr><td>/env/{name}</td><td>根据名称获取特定的环境属性值</td></tr><tr><td>/health</td><td>报告应用程序的健康指标，这些值由HealthIndicator的实现类提供</td></tr><tr><td>/info</td><td>获取应用程序的定制信息，这些信息由info打头的属性提供</td></tr><tr><td>/mappings</td><td>描述全部的URI路径，以及它们和控制器(包含Actuator端点)的映射关系</td></tr><tr><td>/metrics</td><td>报告各种应用程序度量信息，比如内存用量和HTTP请求计数</td></tr><tr><td>/metrics/{name}</td><td>报告指定名称的应用程序度量值</td></tr><tr><td>/trace</td><td>提供基本的HTTP请求跟踪信息(时间戳、HTTP头等)</td></tr></tbody></table><h2 id="4-2-Spring-Boot-Admin"><a href="#4-2-Spring-Boot-Admin" class="headerlink" title="4.2 Spring Boot Admin"></a>4.2 Spring Boot Admin</h2><p>actuator的监控内容够详细，但是阅读性比较差，所以可以使用Spring Boot Admin提供一个可视化的界面查阅信息，Spring Boot Admin是一个开源社区项目，用于管理和监控SpringBoot应用程序。 </p><p>Spring Boot Admin 有两个角色，客户端(Client)和服务端(Server)。</p><p>应用程序作为Spring Boot Admin Client向为Spring Boot Admin Server注册</p><p>Spring Boot Admin Server 的界面将Boot Admin ClientActuatorEndpoint</p><p><strong>开发步骤如下</strong>：</p><p>admin-server：</p><p>①创建 admin-server 模块</p><p>②导入依赖坐标 admin-starter-server</p><p>③在引导类上启用监控功能@EnableAdminServer</p><p>admin-client： 自己创建的项目就是所谓的client端</p><p>①创建 admin-client 模块</p><p>②导入依赖坐标 admin-starter-client</p><p>③配置相关信息：server地址等</p><p>④启动server和client服务，访问server</p><p><strong>功能演示：</strong></p><p>第一步：创建springboot-admin-server端</p><p>1、创建项目</p><p><img data-src="/assets/springbootadmin1.png" alt="springbootadmin1">    </p><p>2、导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、创建引导类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAdminServer</span><span class="comment">//注意这里需要开启注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootAdminServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBootAdminServerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步：把springboot-demo项目作为client端</p><p>1、在springboot-demo项目中添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、发布到server端,在application.yml中添加</p><p>spring.boot.admin.client.url=<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a></p><p>​    <img data-src="/assets/springbootadmin3.png" alt="actuator监控器3"></p><p>第三步：两个项目启动 （先启动server）</p><p>访问项目 <a href="http://localhost:8080/#/applications" target="_blank" rel="noopener">http://localhost:8080/#/applications</a> 查阅信息即可</p><p><img data-src="/assets/springbootadmin2.png" alt="springbootadmin2">    </p><h1 id="5-SpringBoot项目的部署"><a href="#5-SpringBoot项目的部署" class="headerlink" title="5. SpringBoot项目的部署"></a>5. SpringBoot项目的部署</h1><p>SpringBoot 项目开发完毕后，支持两种方式部署到服务器：</p><h2 id="5-1-jar包-官方推荐"><a href="#5-1-jar包-官方推荐" class="headerlink" title="5.1 jar包(官方推荐)"></a>5.1 jar包(官方推荐)</h2><p>第一步：在项目中添加一个插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--         最后导出jar或war的名称--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>springboot-demo<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二步：执行package命令打出一个jar</p><p><img data-src="/assets/springboot%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B21.png" alt="springboot项目部署1">    </p><p>第三步：直接使用java -jar 运行jar项目</p><p>把打出的jar放入到一个没有中文没有空格的位置执行<code>java -jar jar包名称</code></p><p><img data-src="/assets/springboot%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B22.png" alt="springboot项目部署2">    </p><p>成功！</p><h2 id="5-2-war包"><a href="#5-2-war包" class="headerlink" title="5.2 war包"></a>5.2 war包</h2><p>第一步：项目的打包方式改为war</p><p><img data-src="/assets/springboot%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B23.png" alt="springboot项目部署3">    </p><p>第二步：在引导类上修改代码</p><p>1、继承一个父类 SpringBootServletInitializer   2、添加一个方法 configure方法</p><p><img data-src="/assets/springboot%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B24.png" alt="springboot项目部署4">    </p><p>第三步：执行package命令打出一个war</p><p><img data-src="/assets/springboot%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B21.png" alt="springboot项目部署1">    </p><p>第四步：放入到一个tomcat8的webapps目录中运行即可</p><p><img data-src="/assets/springboot%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B25.png" alt="springboot项目部署5">    </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-学习SpringBoot整合常用的框架&quot;&gt;&lt;a href=&quot;#1-学习SpringBoot整合常用的框架&quot; class=&quot;headerlink&quot; title=&quot;1. 学习SpringBoot整合常用的框架&quot;&gt;&lt;/a&gt;1. 学习SpringBoot整合常用的框架&lt;/h1&gt;&lt;p&gt;我们在学习项目一时用到了很多框架比如shiro、Dubbo 、Quartz、rabbitMQ，每使用一个框架时都需要一些xml配置文件，比较麻烦，而SpringBoot在整合这些框架时就非常方便而且不用出现任何xml文件，接下来见证一下吧！ &lt;/p&gt;
    
    </summary>
    
    
      <category term="框架" scheme="http://sunmoon.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="SpringBoot" scheme="http://sunmoon.com/categories/%E6%A1%86%E6%9E%B6/SpringBoot/"/>
    
    
      <category term="整合第三方框架" scheme="http://sunmoon.com/tags/%E6%95%B4%E5%90%88%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A1%86%E6%9E%B6/"/>
    
      <category term="原理详细分析" scheme="http://sunmoon.com/tags/%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90/"/>
    
      <category term="自定义启动器" scheme="http://sunmoon.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%90%AF%E5%8A%A8%E5%99%A8/"/>
    
      <category term="SpringBoot监控" scheme="http://sunmoon.com/tags/SpringBoot%E7%9B%91%E6%8E%A7/"/>
    
      <category term="SpringBoot项目部署" scheme="http://sunmoon.com/tags/SpringBoot%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot初级</title>
    <link href="http://sunmoon.com/2020/10/31/SpringBoot%E5%88%9D%E7%BA%A7/"/>
    <id>http://sunmoon.com/2020/10/31/SpringBoot%E5%88%9D%E7%BA%A7/</id>
    <published>2020-10-31T14:05:21.000Z</published>
    <updated>2020-10-31T14:18:27.811Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-了解SpringBoot"><a href="#1-了解SpringBoot" class="headerlink" title="1.了解SpringBoot"></a>1.了解SpringBoot</h1><p>在这一部分，我们主要了解以下3个问题：</p><ul><li>什么是SpringBoot  springboot是一种快速使用spring框架的简便的方式</li><li>为什么要学习SpringBoot</li><li>SpringBoot的特点</li></ul><a id="more"></a><h2 id="1-1-什么是SpringBoot"><a href="#1-1-什么是SpringBoot" class="headerlink" title="1.1.什么是SpringBoot"></a>1.1.什么是SpringBoot</h2><p>SpringBoot是Spring项目中的一个子工程，与我们所熟知的Spring-framework 同属于spring的产品:</p><p><img data-src="/assets/springboot%E4%BB%8B%E7%BB%8D.png" alt="60410542187"></p><p>我们可以看到下面的一段介绍：</p><blockquote><p>Takes an opinionated view of building production-ready Spring applications. Spring Boot favors convention over configuration and is designed to get you up and running as quickly as possible.</p></blockquote><p>翻译一下：</p><blockquote><p>用一些固定的方式来构建生产级别的spring应用。Spring Boot 推崇约定大于配置的方式以便于你能够尽可能快速的启动并运行程序。</p></blockquote><p>其实人们把Spring Boot 称为搭建程序的<code>脚手架</code>。其最主要作用就是帮我们快速的构建庞大的spring项目，并且尽可能的减少一切xml配置，做到开箱即用，迅速上手，让我们关注与业务而非配置。</p><h2 id="1-2-为什么要学习SpringBoot"><a href="#1-2-为什么要学习SpringBoot" class="headerlink" title="1.2.为什么要学习SpringBoot"></a>1.2.为什么要学习SpringBoot</h2><p>java一直被人诟病的一点就是臃肿、麻烦。当我们还在辛苦的搭建项目时，可能Python程序员已经把功能写好了，究其原因注意是两点：</p><ul><li><p>复杂的配置</p><p>  项目各种配置其实是开发时的损耗， 因为在思考 Spring 特性配置和解决业务问题之间需要进行思维切换，所以写配置挤占了写应用程序逻辑的时间。</p></li><li><p>一个是混乱的依赖管理</p><p>  项目的依赖管理也是件吃力不讨好的事情。决定项目里要用哪些库就已经够让人头痛的了，你还要知道这些库的哪个版本和其他库不会有冲突，这难题实在太棘手。并且，依赖管理也是一种损耗，添加依赖不是写应用程序代码。一旦选错了依赖的版本，随之而来的不兼容问题毫无疑问会是生产力杀手。</p></li></ul><p>而SpringBoot让这一切成为过去！</p><blockquote><p>Spring Boot 简化了基于Spring的应用开发，只需要“run”就能创建一个独立的、生产级别的Spring应用。Spring Boot为Spring平台及第三方库提供开箱即用的设置（提供默认设置，存放默认配置的包就是启动器starter），这样我们就可以简单的开始。多数Spring Boot应用只需要很少的Spring配置。</p></blockquote><p>我们可以使用SpringBoot创建java应用，并使用java –jar 启动它，就能得到一个生产级别的web工程。</p><h2 id="1-3-SpringBoot的特点"><a href="#1-3-SpringBoot的特点" class="headerlink" title="1.3.SpringBoot的特点"></a>1.3.SpringBoot的特点</h2><p>Spring Boot 主要目标是：</p><ul><li><p>为所有 Spring 的开发者提供一个非常快速的、广泛接受的入门体验 ，springboot是一种快速使用spring框架的简便的方式</p></li><li><p>开箱即用（启动器starter-其实就是SpringBoot提供的一个jar包），但通过自己设置参数（.properties或yml），即可快速摆脱这种方式。</p></li><li><p>提供了一些大型项目中常见的非功能性特性，如内嵌服务器、安全、指标，健康检测、外部化配置等</p></li><li><p>绝对没有代码生成，也无需 XML 配置。</p></li></ul><p>更多细节，大家可以到<a href="http://projects.spring.io/spring-boot/" target="_blank" rel="noopener">官网</a>查看。</p><h1 id="2-快速入门（重要）"><a href="#2-快速入门（重要）" class="headerlink" title="2.快速入门（重要）"></a>2.快速入门（重要）</h1><p>接下来，我们就来利用SpringBoot搭建一个web工程，体会一下SpringBoot的魅力所在！</p><p>需求：浏览器输入一个地址，返回一句话</p><h2 id="2-1-创建工程"><a href="#2-1-创建工程" class="headerlink" title="2.1.创建工程"></a>2.1.创建工程</h2><p>我们先新建一个空的工程：</p><p><img data-src="/assets/springboot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A81.png" alt="image-20201031174810265"></p><h2 id="2-2-添加依赖"><a href="#2-2-添加依赖" class="headerlink" title="2.2.添加依赖"></a>2.2.添加依赖</h2><p>看到这里很多同学会有疑惑，前面说传统开发的问题之一就是依赖管理混乱，怎么这里我们还需要管理依赖呢？难道SpringBoot不帮我们管理吗？</p><p>别着急，现在我们的项目与SpringBoot还没有什么关联。SpringBoot提供了一个名为spring-boot-starter-parent的工程，里面已经对各种常用依赖（并非全部）的版本进行了管理，我们的项目需要以这个项目为父工程，这样我们就不用操心依赖的版本问题了，需要什么依赖，直接引入坐标即可！</p><h3 id="2-2-1-添加父工程坐标"><a href="#2-2-1-添加父工程坐标" class="headerlink" title="2.2.1.添加父工程坐标"></a>2.2.1.添加父工程坐标</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--所有的springboot构建的项目，都需要继承如下父工程 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-2-添加web启动器"><a href="#2-2-2-添加web启动器" class="headerlink" title="2.2.2.添加web启动器"></a>2.2.2.添加web启动器</h3><p>为了让SpringBoot帮我们完成各种自动配置，我们必须引入SpringBoot提供的自动配置依赖，我们称为<code>启动器</code>。因为我们是web项目，这里我们引入web启动器：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加依赖--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 不需要在单独指定jar包版本 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要注意的是，我们并没有在这里指定版本信息。因为SpringBoot的父工程已经对版本进行了管理了。</p><p>这个时候，我们会发现项目中多出了大量的依赖：</p><p> <img data-src="/assets/springboot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A82.png" alt="springboot快速入门2"></p><p>这些都是SpringBoot根据spring-boot-starter-web这个依赖自动引入的，而且所有的版本都已经管理好，不会出现冲突。</p><h3 id="2-2-3-完整pom"><a href="#2-2-3-完整pom" class="headerlink" title="2.2.3.完整pom"></a>2.2.3.完整pom</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot_day01<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--所有的springboot构建的项目，都需要继承如下父工程 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--添加依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 不需要在单独指定jar包版本 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-3-启动类或引导类"><a href="#2-3-启动类或引导类" class="headerlink" title="2.3.启动类或引导类"></a>2.3.启动类或引导类</h2><p>Spring Boot项目通过main函数即可启动，我们需要创建一个启动类：启动类的名称可以任意</p><p><img data-src="/assets/springboot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A83.png" alt="image-20201031175842211"></p><p>然后编写main函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 引导类：springboot项目运行的入口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@SpringBootApplication</span> 表明当前类是引导类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContext</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ApplicationContext<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-编写controller"><a href="#2-4-编写controller" class="headerlink" title="2.4.编写controller"></a>2.4.编写controller</h2><p>接下来，我们就可以像以前那样开发SpringMVC的项目了！</p><p>我们编写一个controller：</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span> <span class="comment">//相当于@Controller + @ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@RequestMapping(value = "/hello",method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"你好，SpringBoot。。。"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5-启动测试"><a href="#2-5-启动测试" class="headerlink" title="2.5.启动测试"></a>2.5.启动测试</h2><p>接下来，我们运行main函数，查看控制台，并且可以看到监听的端口信息：</p><p> <img data-src="/assets/springboot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A84.png" alt="springboot快速入门4"></p><h1 id="3-Java配置"><a href="#3-Java配置" class="headerlink" title="3.Java配置"></a>3.Java配置</h1><p>在入门案例中，我们没有任何的配置，就可以实现一个SpringMVC的项目了，快速、高效！</p><p>但是有同学会有疑问，如果没有任何的xml，那么我们如果要配置一个Bean该怎么办？</p><h2 id="3-1-回顾历史"><a href="#3-1-回顾历史" class="headerlink" title="3.1.回顾历史"></a>3.1.回顾历史</h2><p>事实上，在Spring3.0开始，Spring官方就已经开始推荐使用java配置来代替传统的xml配置了，我们不妨来回顾一下Spring的历史：</p><ul><li><p>Spring1.0时代</p><p>  在此时因为jdk1.5刚刚出来，注解开发并未盛行，因此一切Spring配置都是xml格式，想象一下所有的bean都用xml配置，细思极恐啊，心疼那个时候的程序员2秒</p></li><li><p>Spring2.0时代</p></li><li><p>Spring引入了注解开发，但是因为并不完善，因此并未完全替代xml，此时的程序员往往是把xml与注解进行结合，貌似我们之前都是这种方式。</p></li><li><p>Spring3.0及以后</p><p>  3.0以后Spring的注解已经非常完善了，因此Spring推荐大家使用完全的java配置来代替以前的xml，不过似乎在国内并未推广盛行。然后当SpringBoot来临，人们才慢慢认识到java配置的优雅。</p></li></ul><p>有句古话说的好：拥抱变化，拥抱未来。所以我们也应该顺应时代潮流，做时尚的弄潮儿，一起来学习下java配置的玩法。</p><h2 id="3-2-spring纯注解基本知识"><a href="#3-2-spring纯注解基本知识" class="headerlink" title="3.2.spring纯注解基本知识"></a>3.2.spring纯注解基本知识</h2><p>先演示之前学习到的如何从properties配置文件中取值</p><p>然后再学习SpringBoot如何从properties配置文件中取值</p><p>java配置主要靠java类和一些注解，比较常用的注解有：</p><ul><li><code>@Configuration</code>：声明一个类作为配置类，代替xml文件</li><li><code>@Bean</code>：声明在方法上，将方法的返回值加入Bean容器，代替<code>&lt;bean&gt;</code>标签</li><li><code>@Value</code>：属性注入</li><li><code>@PropertySource</code>：指定外部属性文件</li><li><code>@ComponentScan</code>：包扫描注解  相当于<code>&lt;context:component-scan&gt;</code></li></ul><p>需求：定义一个简单的User类，定义配置文件，User对象中的属性值从配置文件中获取</p><p>导入lombok相关jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建User类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-Value方式"><a href="#3-3-Value方式" class="headerlink" title="3.3 @Value方式"></a>3.3 @Value方式</h2><p>第一步：在resources下创建一个user.properties文件，里面的内容如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">user.username</span>=<span class="string">zhangsan</span></span><br><span class="line"><span class="meta">user.password</span>=<span class="string">123</span></span><br><span class="line"><span class="meta">user.age</span>=<span class="string">19</span></span><br></pre></td></tr></table></figure><p>第二步：在com.sun.config包下创建一个配置类，并使用@Configuration声明是一个配置类，在配置类中创建User对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//声明当前为配置类</span></span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:user.properties"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;user.username&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;user.password&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;user.age&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//将user对象交给Spring管理</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(username);</span><br><span class="line">        user.setPassword(password);</span><br><span class="line">        user.setAge(age);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三步：测试</p><p>在HelloController中添加一个方法，验证User中是否有值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"getUser..."</span>);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><p><img data-src="/assets/springboot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A85.png" alt="springboot快速入门5"></p><h2 id="3-4-Environment获取数据方式（了解）"><a href="#3-4-Environment获取数据方式（了解）" class="headerlink" title="3.4 Environment获取数据方式（了解）"></a>3.4 Environment获取数据方式（了解）</h2><p> spring中的Environment用来表示整个应用运行时的环境，可以使用Environment获取整个运行环境中的配置信息：方法是：environment.getProperty（配置文件中的key）,返回的一律都是字符串，可以根据需要转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//配置类</span></span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:user.properties"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment environment;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>  <span class="comment">//将user对象交给spring的IOC容器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String username = environment.getProperty(<span class="string">"user.username"</span>);</span><br><span class="line">        String password = environment.getProperty(<span class="string">"user.password"</span>);</span><br><span class="line">        Integer age = Integer.parseInt(environment.getProperty(<span class="string">"user.age"</span>));</span><br><span class="line"></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(username);</span><br><span class="line">        user.setPassword(password);</span><br><span class="line">        user.setAge(age);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-ConfigurationProperties方式"><a href="#3-5-ConfigurationProperties方式" class="headerlink" title="3.5 @ConfigurationProperties方式"></a>3.5 @ConfigurationProperties方式</h2><p>spring约定的、非常简洁的配置方式   </p><p><strong>首先约定，配置信息需要写在一个application.properties的文件中</strong></p><p>第一步：在resources中创建一个application.properties文件，文件内容如下(和user.properties中的内容一样)：</p><blockquote><p>配置文件名必须为：<code>application.properties</code></p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">user.username</span>=<span class="string">王五</span></span><br><span class="line"><span class="meta">user.password</span>=<span class="string">123</span></span><br><span class="line"><span class="meta">user.age</span>=<span class="string">18</span></span><br></pre></td></tr></table></figure><p>第二步：修改配置类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//配置类</span></span><br><span class="line"><span class="comment">//@PropertySource("classpath:user.properties")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span>  <span class="comment">//将user对象交给spring的IOC容器</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三步：测试仍然可以获取数据，很神奇！</p><p><img data-src="/assets/springboot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A86.png" alt="springboot快速入门6">    </p><p>分析：要想简单的获取值，条件是User类中的属性名称和配置文件中的key名称是要一致的！！</p><h2 id="3-6-SpringBoot支持的配置文件说明"><a href="#3-6-SpringBoot支持的配置文件说明" class="headerlink" title="3.6 SpringBoot支持的配置文件说明"></a>3.6 SpringBoot支持的配置文件说明</h2><h3 id="3-6-1-yaml-amp-yml"><a href="#3-6-1-yaml-amp-yml" class="headerlink" title="3.6.1 yaml&amp;yml"></a>3.6.1 yaml&amp;yml</h3><p>​     配置文件除了可以使用application.properties类型，还可以使用后缀名为：.yml或者.yaml的类型，也就是：application.yml或者application.yaml</p><p><img data-src="/assets/1531284020457.png" alt="1531284020457"></p><p>yml和yaml基本格式是一样的：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user:</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">jj</span></span><br><span class="line">  <span class="attr">password:</span> <span class="number">123</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br></pre></td></tr></table></figure><p><img data-src="/assets/yml%E6%A0%BC%E5%BC%8F.png" alt="yml格式"></p><p>yml 和yaml 比properties 强大的是可以在配置文件中定义一个数组或集合</p><p>如果项目中同时有application.properties 和application.yml时 优先加载的是application.properties </p><p>举例如下：</p><p>第一步：在User类中添加3个属性，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; strList;</span><br><span class="line">    <span class="keyword">private</span> String[] strArray;</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; userList;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步：在application.yml或application.yaml中添加如下配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user:</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">jj</span></span><br><span class="line">  <span class="attr">password:</span> <span class="number">123</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">  <span class="attr">strList:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">呵呵</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">哈哈</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">嘿嘿</span></span><br><span class="line">  <span class="attr">strArray:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">呵呵1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">哈哈1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">嘿嘿1</span></span><br><span class="line">  <span class="string">userList[0]:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">呵呵2</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">哈哈2</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">  <span class="string">userList[1]:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">呵呵3</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">哈哈3</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">19</span></span><br></pre></td></tr></table></figure><p>第三步：测试</p><p><img data-src="/assets/spring%E6%94%AF%E6%8C%81%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F.png" alt="spring支持的配置文件格式"></p><p>我们在研究SpringBoot原理的方向：SpringBoot是如何加载对象</p><h1 id="4-自动配置原理"><a href="#4-自动配置原理" class="headerlink" title="4.自动配置原理"></a>4.自动配置原理</h1><p>使用SpringBoot之后，一个整合了SpringMVC的WEB工程开发，变的无比简单，那些繁杂的配置都消失不见了，这是如何做到的？</p><p>一切魔力的开始，都是从我们的main函数来的，所以我们再次来看下启动类：</p><p><img data-src="/assets/%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%861.png" alt="自动配置原理1"></p><p>我们发现特别的地方有两个：</p><ul><li>注解：@SpringBootApplication</li><li>run方法：SpringApplication.run()</li></ul><p>我们分别来研究这两个部分。</p><h2 id="4-1-了解-SpringBootApplication"><a href="#4-1-了解-SpringBootApplication" class="headerlink" title="4.1.了解@SpringBootApplication"></a>4.1.了解@SpringBootApplication</h2><p>点击进入，查看源码：</p><p><img data-src="/assets/%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%862.png" alt="自动配置原理2"></p><p>这里重点的注解有3个：</p><ul><li>@SpringBootConfiguration</li><li>@EnableAutoConfiguration</li><li>@ComponentScan</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Target(ElementType.TYPE) 注解在什么位置生效  ElementType.TYPE代表在类上</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME) 什么时候生效   运行时生效</span><br><span class="line">@Documented   是否能生成api文档</span><br><span class="line">@Inherited    是否能被继承</span><br></pre></td></tr></table></figure><h3 id="4-1-1-SpringBootConfiguration"><a href="#4-1-1-SpringBootConfiguration" class="headerlink" title="4.1.1.@SpringBootConfiguration"></a>4.1.1.@SpringBootConfiguration</h3><p>我们继续点击查看源码：</p><p><img data-src="/assets/%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%863.png" alt="自动配置原理3"></p><p>通过这段我们可以看出，在这个注解上面，又有一个<code>@Configuration</code>注解。通过上面的注释阅读我们知道：这个注解的作用就是声明当前类是一个配置类，然后Spring会自动扫描到添加了<code>@Configuration</code>的类，并且读取其中的配置信息。而<code>@SpringBootConfiguration</code>是来声明当前类是SpringBoot应用的配置类，项目中只能有一个。所以一般我们无需自己添加。</p><h3 id="4-1-2-EnableAutoConfiguration"><a href="#4-1-2-EnableAutoConfiguration" class="headerlink" title="4.1.2.@EnableAutoConfiguration"></a>4.1.2.@EnableAutoConfiguration</h3><p>关于这个注解，官网上有一段说明：</p><blockquote><p>The second class-level annotation is <code>@EnableAutoConfiguration</code>. This annotation<br>tells Spring Boot to “guess” how you want to configure Spring, based on the jar<br>dependencies that you have added. Since <code>spring-boot-starter-web</code> added Tomcat<br>and Spring MVC, the auto-configuration assumes that you are developing a web<br>application and sets up Spring accordingly.</p></blockquote><p>简单翻译以下：</p><blockquote><p>第二级的注解<code>@EnableAutoConfiguration</code>，告诉SpringBoot基于你所添加的依赖，去“猜测”你想要如何配置Spring。比如我们引入了<code>spring-boot-starter-web</code>，而这个启动器中帮我们添加了<code>tomcat</code>、<code>SpringMVC</code>的依赖。此时自动配置就知道你是要开发一个web应用，所以就帮你完成了web及SpringMVC的默认配置了！ </p></blockquote><p>总结，SpringBoot内部对大量的第三方库或Spring内部库进行了默认配置，这些配置是否生效，取决于我们是否引入了对应库所需的依赖，如果有那么默认配置就会生效。</p><p>所以，我们使用SpringBoot构建一个项目，只需要引入所需框架的依赖，配置就可以交给SpringBoot处理了。除非你不希望使用SpringBoot的默认配置，它也提供了自定义配置的入口。</p><h3 id="4-1-3-ComponentScan"><a href="#4-1-3-ComponentScan" class="headerlink" title="4.1.3.@ComponentScan"></a>4.1.3.@ComponentScan</h3><p>我们跟进源码：</p><p><img data-src="/assets/%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%864.png" alt="自动配置原理4"></p><p>并没有看到什么特殊的地方。我们查看注释：</p><p><img data-src="/assets/%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%865.png" alt="自动配置原理5"></p><p>大概的意思：</p><blockquote><p>配置组件扫描的指令。提供了类似与<code>&lt;context:component-scan&gt;</code>标签的作用</p><p>通过basePackageClasses或者basePackages属性来指定要扫描的包。如果没有指定这些属性，那么将从声明这个注解的类所在的包开始，扫描包及子包</p></blockquote><p>而我们的@SpringBootApplication注解声明的类就是main函数所在的启动类，因此扫描的包是该类所在包及其子包。因此，<strong>一般启动类会放在一个比较前的包目录中。</strong></p><h2 id="4-2-默认配置原理"><a href="#4-2-默认配置原理" class="headerlink" title="4.2.默认配置原理"></a>4.2.默认配置原理</h2><h3 id="4-2-1-spring-factories"><a href="#4-2-1-spring-factories" class="headerlink" title="4.2.1.spring.factories"></a>4.2.1.spring.factories</h3><p>在SpringApplication类构建的时候，有这样一段初始化代码：</p><p><img data-src="/assets/%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%866.png" alt="自动配置原理6"></p><p>跟进去：</p><p><img data-src="/assets/%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%867.png" alt="自动配置原理7"></p><p>这里发现会通过loadFactoryNames尝试加载一些FactoryName，然后利用createSpringFactoriesInstances将这些加载到的类名进行实例化。</p><p>继续跟进loadFactoryNames方法：</p><p><img data-src="/assets/%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%868.png" alt="自动配置原理8"></p><p>发现此处会利用类加载器加载某个文件：<code>FACTORIES_RESOURCE_LOCATION</code>，然后解析其内容。我们找到这个变量的声明：</p><p><img data-src="/assets/%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%869.png" alt="自动配置原理9"></p><p>可以发现，其地址是：<code>META-INF/spring.factories</code>，我们知道，ClassLoader默认是从classpath下读取文件，因此，SpringBoot会在初始化的时候，加载<strong>所有</strong>classpath:META-INF/spring.factories文件，包括jar包当中的。</p><p>而在Spring的一个依赖包：spring-boot-autoconfigure中，就有这样的文件：</p><p><img data-src="/assets/%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%8610.png" alt="自动配置原理10"></p><p>以后我们引入的任何第三方启动器，只要实现自动配置，也都会有类似文件。</p><h3 id="4-2-1默认配置类"><a href="#4-2-1默认配置类" class="headerlink" title="4.2.1默认配置类"></a>4.2.1默认配置类</h3><p>我们打开刚才的spring.factories文件：</p><p><img data-src="/assets/%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%8611.png" alt="自动配置原理11"></p><p>可以发现以EnableAutoConfiguration接口为key的一系列配置，key所对应的值，就是所有的自动配置类，可以在当前的jar包中找到这些自动配置类：</p><p><img data-src="/assets/%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%8612.png" alt="自动配置原理12"></p><p>还有：</p><p><img data-src="/assets/%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%8613.png" alt="自动配置原理13"></p><p>非常多，几乎涵盖了现在主流的开源框架，例如：</p><ul><li>redis</li><li>jms</li><li>amqp</li><li>jdbc</li><li>jackson</li><li>mongodb</li><li>jpa</li><li>solr</li><li>elasticsearch</li></ul><p>… 等等</p><p>我们来看一个我们熟悉的，例如SpringMVC，查看mvc 的自动配置类：</p><p> <img data-src="/assets/%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%8614.png" alt="自动配置原理14"></p><p>打开WebMvcAutoConfiguration：</p><p><img data-src="/assets/%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%8615.png" alt="自动配置原理15"></p><p>我们看到这个类上的4个注解：</p><ul><li><code>@Configuration</code>：声明这个类是一个配置类</li></ul><ul><li><p><code>@ConditionalOnWebApplication(type = Type.SERVLET)</code></p><p>  ConditionalOn，翻译就是在某个条件下，此处就是满足项目的类是是Type.SERVLET类型，也就是一个普通web工程，显然我们就是</p></li><li><p><code>@ConditionalOnClass({ Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class })</code></p><p>  这里的条件是OnClass，也就是满足以下类存在：Servlet、DispatcherServlet、WebMvcConfigurer，其中Servlet只要引入了tomcat依赖自然会有，后两个需要引入SpringMVC才会有。这里就是判断你是否引入了相关依赖，引入依赖后该条件成立，当前类的配置才会生效！</p></li><li><p><code>@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</code></p><p>  这个条件与上面不同，OnMissingBean，是说环境中没有指定的Bean这个才生效。其实这就是自定义配置的入口，也就是说，如果我们自己配置了一个WebMVCConfigurationSupport的类，那么这个默认配置就会失效！</p></li></ul><p>接着，我们查看该类中定义了什么：</p><p>视图解析器：</p><p> <img data-src="/assets/%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%8616.png" alt="自动配置原理16"></p><p>处理器适配器（HandlerAdapter）：</p><p> <img data-src="/assets/%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%8617.png" alt="自动配置原理17"></p><p>还有很多，这里就不一一截图了。</p><h3 id="4-2-2-默认配置属性"><a href="#4-2-2-默认配置属性" class="headerlink" title="4.2.2.默认配置属性"></a>4.2.2.默认配置属性</h3><p>另外，这些默认配置的属性来自哪里呢？</p><p><img data-src="/assets/%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%8618.png" alt="自动配置原理18"></p><p>我们看到，这里通过@EnableAutoConfiguration注解引入了两个属性：WebMvcProperties和ResourceProperties。这不正是SpringBoot的属性注入玩法嘛。</p><p>我们查看这两个属性类：</p><p> <img data-src="/assets/%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%8619.png" alt="自动配置原理19"></p><p>找到了内部资源视图解析器的prefix和suffix属性。</p><p>ResourceProperties中主要定义了静态资源（.js,.html,.css等)的路径：</p><p> <img data-src="/assets/%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%8620.png" alt="自动配置原理20"></p><p>如果我们要覆盖这些默认属性，只需要在application.properties中定义与其前缀prefix和字段名一致的属性即可。</p><h2 id="4-3-总结"><a href="#4-3-总结" class="headerlink" title="4.3.总结"></a>4.3.总结</h2><p>SpringBoot为我们提供了默认配置，而默认配置生效的步骤：</p><ul><li><p>@EnableAutoConfiguration注解会去寻找<code>META-INF/spring.factories</code>文件，读取其中以<code>EnableAutoConfiguration</code>为key的所有类的名称，这些类就是提前写好的自动配置类</p></li><li><p>这些类都声明了<code>@Configuration</code>注解，并且通过<code>@Bean</code>注解提前配置了我们所需要的一切实例。完成自动配置</p></li><li><p>但是，这些配置不一定生效，因为有<code>@ConditionalOn</code>注解，满足一定条件才会生效。比如条件之一：是一些相关的类要存在</p></li><li><p>类要存在，我们只需要引入了相关依赖（启动器），依赖有了条件成立，自动配置生效。</p></li><li><p>如果我们自己配置了相关Bean，那么会覆盖默认的自动配置的Bean</p></li><li><p>我们还可以通过配置application.properties文件，来覆盖自动配置中的属性</p></li></ul><p>1）启动器</p><p>所以，我们如果不想配置，只需要引入依赖即可，而依赖版本我们也不用操心，因为只要引入了SpringBoot提供的stater（启动器），就会自动管理依赖及版本了。</p><p>因此，玩SpringBoot的第一件事情，就是找启动器，SpringBoot提供了大量的默认启动器</p><p>2）全局配置</p><p>另外，SpringBoot的默认配置，都会读取默认属性，而这些属性可以通过自定义<code>application.properties</code>文件来进行覆盖。这样虽然使用的还是默认配置，但是配置中的值改成了我们自定义的。</p><p>因此，玩SpringBoot的第二件事情，就是通过<code>application.properties</code>来覆盖默认属性值，形成自定义配置。我们需要知道SpringBoot的默认属性key，非常多，可以再idea中自动提示</p><h1 id="5-SpringBoot实践"><a href="#5-SpringBoot实践" class="headerlink" title="5.SpringBoot实践"></a>5.SpringBoot实践</h1><p>接下来，我们来看看如何用SpringBoot来玩转以前的S spring  S springmvc M mybatis,我们会在数据库引入一张用户表tb_user和实体类User</p><p>tb_user：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`tb_user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`user_name`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户名'</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'密码'</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'姓名'</span>,</span><br><span class="line">  <span class="string">`age`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'年龄'</span>,</span><br><span class="line">  <span class="string">`sex`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'性别，1男性，2女性'</span>,</span><br><span class="line">  <span class="string">`birthday`</span> <span class="built_in">date</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'出生日期'</span>,</span><br><span class="line">  <span class="string">`note`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'备注'</span>,</span><br><span class="line">  <span class="string">`created`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`updated`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`username`</span> (<span class="string">`user_name`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">13</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><blockquote><p>插入一些数据</p></blockquote><p>就在刚才的springboot-demo工程中做开发就可以！</p><p>user实体类：放入到com.sun.pojo包下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span>  <span class="comment">//注意要记得添加lombok的依赖</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="comment">// id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">// 用户名</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="comment">// 密码</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">// 年龄</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">// 性别，1男性，2女性</span></span><br><span class="line">    <span class="keyword">private</span> Integer sex;</span><br><span class="line">    <span class="comment">// 出生日期</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="comment">// 创建时间</span></span><br><span class="line">    <span class="keyword">private</span> Date created;</span><br><span class="line">    <span class="comment">// 更新时间</span></span><br><span class="line">    <span class="keyword">private</span> Date updated;</span><br><span class="line">    <span class="comment">// 备注</span></span><br><span class="line">    <span class="keyword">private</span> String note;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-1-整合SpringMVC"><a href="#5-1-整合SpringMVC" class="headerlink" title="5.1.整合SpringMVC"></a>5.1.整合SpringMVC</h2><p>虽然默认配置已经可以使用SpringMVC了，不过我们有时候需要进行自定义配置。</p><h3 id="5-1-0-日志控制"><a href="#5-1-0-日志控制" class="headerlink" title="5.1.0.日志控制"></a>5.1.0.日志控制</h3><p>导入相关jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>日志级别控制：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.sun:</span> <span class="string">info</span> <span class="comment"># 日志级别：debug info warn error</span></span><br><span class="line">    <span class="attr">org.springframework.boot:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span> <span class="comment">//相当于 @Controller+ @ResponseBody</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@RequestMapping(value = "/hello",method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//基于lombok提供的日志对象记录日志</span></span><br><span class="line">        log.debug(<span class="string">"HelloController中的hello方法执行了"</span>);</span><br><span class="line">        <span class="comment">//System.out.println("访问到了HelloController中的hello方法");</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"欢迎来到神奇的springboot项目中"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">"HelloController中user方法"</span>);</span><br><span class="line">       <span class="comment">// System.out.println("访问到了HelloController中user方法");</span></span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="/assets/springboot%E6%95%B4%E5%90%88%E6%97%A5%E5%BF%97.png" alt="springboot整合日志"></p><p>其中：</p><ul><li>logging.level：是固定写法，说明下面是日志级别配置，日志相关其它配置也可以使用。</li><li>com.leyou和org.springframework是指定包名，后面的配置仅对这个包有效。</li><li>debug：日志的级别 常用的级别有4个  debug  info  warn  error</li></ul><h3 id="5-1-1-修改端口"><a href="#5-1-1-修改端口" class="headerlink" title="5.1.1.修改端口"></a>5.1.1.修改端口</h3><p>查看SpringBoot的全局属性可知，端口通过以下方式配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>重启服务后测试：</p><p> <img data-src="/assets/springboot%E4%BF%AE%E6%94%B9%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E5%8F%A3.png" alt="springboot修改服务器端口"></p><h3 id="5-1-2-访问静态资源"><a href="#5-1-2-访问静态资源" class="headerlink" title="5.1.2.访问静态资源"></a>5.1.2.访问静态资源</h3><p>现在，我们的项目是一个jar工程，那么就没有webapp，我们的静态资源该放哪里呢？</p><p>回顾我们上面看的源码，有一个叫做ResourceProperties的类，里面就定义了静态资源的默认查找路径：</p><p> <img data-src="/assets/%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%8620.png" alt="自动配置原理20"></p><p>默认的静态资源路径为：</p><ul><li>classpath:/META-INF/resources/</li><li>classpath:/resources/</li><li>classpath:/static/</li><li>classpath:/public</li></ul><p>只要静态资源放在这些目录中任何一个，SpringMVC都会帮我们处理。</p><p>我们习惯会把静态资源放在<code>classpath:/static/</code>目录下。我们创建目录，并且添加一些静态资源：</p><p> <img data-src="/assets/springboot%E8%AE%BF%E9%97%AE%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%901.png" alt="springboot访问静态资源1"></p><p>重启项目后测试：</p><p> <img data-src="/assets/springboot%E8%AE%BF%E9%97%AE%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%902.png" alt="springboot访问静态资源2"></p><h3 id="5-1-3-添加拦截器"><a href="#5-1-3-添加拦截器" class="headerlink" title="5.1.3.添加拦截器"></a>5.1.3.添加拦截器</h3><p>拦截器也是我们经常需要使用的，在SpringBoot中该如何配置呢？</p><p>拦截器不是一个普通属性，而是一个类，所以就要用到java配置方式了。在SpringBoot官方文档中有这么一段说明：</p><blockquote><p>If you want to keep Spring Boot MVC features and you want to add additional <a href="https://docs.spring.io/spring/docs/5.0.5.RELEASE/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">MVC configuration</a> (interceptors, formatters, view controllers, and other features), you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurer</code> but <strong>without</strong> <code>@EnableWebMvc</code>. If you wish to provide custom instances of <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code>, or <code>ExceptionHandlerExceptionResolver</code>, you can declare a <code>WebMvcRegistrationsAdapter</code> instance to provide such components.</p><p>If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc</code>.</p></blockquote><p>翻译：</p><blockquote><p>如果你想要保持Spring Boot 的一些默认MVC特征，同时又想自定义一些MVC配置（包括：拦截器，格式化器, 视图控制器、消息转换器 等等），你应该让一个类实现<code>WebMvcConfigurer</code>，并且添加<code>@Configuration</code>注解，但是<strong>千万不要</strong>加<code>@EnableWebMvc</code>注解。如果你想要自定义<code>HandlerMapping</code>、<code>HandlerAdapter</code>、<code>ExceptionResolver</code>等组件，你可以创建一个<code>WebMvcRegistrationsAdapter</code>实例 来提供以上组件。</p><p>如果你想要完全自定义SpringMVC，不保留SpringBoot提供的一切特征，你可以自己定义类并且添加<code>@Configuration</code>注解和<code>@EnableWebMvc</code>注解</p></blockquote><p>总结：通过实现<code>WebMvcConfigurer</code>并添加<code>@Configuration</code>注解来实现自定义部分SpringMvc配置。</p><p>首先我们定义一个拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j<span class="comment">//记录日志注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.debug(<span class="string">"UserInterceptor中的preHandle方法执行了..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.debug(<span class="string">"UserInterceptor中的postHandle方法执行了..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.debug(<span class="string">"UserInterceptor中的afterCompletion方法执行了..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，我们定义配置类，注册拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将自定义的拦截器添加到SpringMVC拦截器栈</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * addInterceptor 添加自定义的拦截器</span></span><br><span class="line"><span class="comment">         * addPathPatterns 添加拦截路径(支持可变参数)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> UserInterceptor()).addPathPatterns(<span class="string">"/**"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结构如下：</p><p> <img data-src="/assets/springboot%E6%95%B4%E5%90%88springmvc%E9%85%8D%E7%BD%AE%E6%8B%A6%E6%88%AA%E5%99%A8.png" alt="springboot整合springmvc配置拦截器">    </p><p>接下来运行并查看日志：</p><p>你会发现日志中什么都没有，因为我们记录的log级别是debug，默认是显示info以上，我们需要进行配置。</p><p>SpringBoot通过<code>logging.level.*=debug</code>来配置日志级别，*填写包名</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置com.leyou包的日志级别为debug</span></span><br><span class="line"><span class="attr">logging</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">level</span>:<span class="string"></span></span><br><span class="line">    <span class="meta">com.sun</span>: <span class="string">debug</span></span><br></pre></td></tr></table></figure><p>再次运行查看：</p><p><img data-src="/assets/springboot%E6%95%B4%E5%90%88springmvc%E9%85%8D%E7%BD%AE%E6%8B%A6%E6%88%AA%E5%99%A82.png" alt="springboot整合springmvc配置拦截器2"></p><h2 id="5-2-整合jdbc和事务"><a href="#5-2-整合jdbc和事务" class="headerlink" title="5.2.整合jdbc和事务"></a>5.2.整合jdbc和事务</h2><p>spring中的jdbc连接和事务是配置中的重要一环，在SpringBoot中该如何处理呢？</p><p>答案是不需要处理，我们只要找到SpringBoot提供的启动器即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--整合jdbc和事务--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然，不要忘了数据库驱动，SpringBoot并不知道我们用的什么数据库，这里我们选择MySQL：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--数据库驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>至于事务，SpringBoot中通过注解来控制。就是我们熟知的<code>@Transactional</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span> <span class="comment">//基于注解实现事务管理</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"save方法执行了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"update方法执行了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"delete方法执行了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-3-整合连接池"><a href="#5-3-整合连接池" class="headerlink" title="5.3.整合连接池"></a>5.3.整合连接池</h2><p>其实，在刚才引入jdbc启动器的时候，SpringBoot已经自动帮我们引入了一个连接池：</p><p> <img data-src="/assets/springboot%E6%95%B4%E5%90%88%E8%BF%9E%E6%8E%A5%E6%B1%A01.png" alt="springboot整合连接池1"></p><p>HikariCP应该是目前速度最快的连接池了，我们看看它与c3p0的对比：</p><p><img data-src="/assets/springboot%E6%95%B4%E5%90%88%E8%BF%9E%E6%8E%A5%E6%B1%A02.png" alt="springboot整合连接池2"></p><p>因此，我们只需要指定连接池参数即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql:///springboot_db</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure><h2 id="5-4-整合mybatis"><a href="#5-4-整合mybatis" class="headerlink" title="5.4.整合mybatis"></a>5.4.整合mybatis</h2><h3 id="5-4-1-mybatis"><a href="#5-4-1-mybatis" class="headerlink" title="5.4.1.mybatis"></a>5.4.1.mybatis</h3><p>SpringBoot官方并没有提供Mybatis的启动器，不过Mybatis<a href="https://github.com/mybatis/spring-boot-starter" target="_blank" rel="noopener">官网</a>自己实现了：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis整合springboot--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置，一些文件位置相关的，mybatis知道，需要我们来指定：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis</span>:<span class="string"></span></span><br><span class="line"><span class="comment">  # mybatis别名扫描</span></span><br><span class="line">  <span class="meta">type-aliases-package</span>: <span class="string">com.sun.pojo</span></span><br><span class="line"><span class="comment">  # mapper.xml文件位置，如果没有映射文件，请注释掉</span></span><br><span class="line">  <span class="meta">mapper-locations</span>: <span class="string">classpath:mappers/**.xml</span></span><br></pre></td></tr></table></figure><p>需求：查询所有用户信息</p><p>Controller代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/findAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>service代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userDao.findAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dao代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mapper映射文件</p><p>文件所在位置如图：</p><p><img data-src="/assets/mybatis%E6%95%B4%E5%90%88springboot.png" alt="mybatis整合springboot">    </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.sun.dao.UserDao"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.pojo.User"</span>&gt;</span></span><br><span class="line">        select * from tb_user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>另外，Mapper接口的位置在application.yml中并不能配置，Mapper接口的扫描有两种实现方式：</p><blockquote><p>方式一</p></blockquote><p>我们需要给每一个Mapper接口添加<code>@Mapper</code>注解，由Spring来扫描这些注解，完成Mapper的动态代理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询所有</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>方式二</p></blockquote><p>在启动类上添加扫描包注解(<strong>推荐</strong>)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 引导类：springboot项目运行的入口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@SpringBootApplication</span> 表明当前类是引导类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.sun.dao"</span>)<span class="comment">//扫描dao包结构，为dao创建代理对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContext</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ApplicationContext<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试略…</p></blockquote><p>这种方式的好处是，不用给每一个Mapper都添加注解。</p><p>以下代码示例中，我们将采用@MapperScan扫描方式进行。</p><p><strong>开启自动驼峰标识</strong></p><p>测试发现userName为空，原因是因为属性名和列名没有对应上</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">cn.itcast.pojo</span>  <span class="comment"># 扫描实体类包结构</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mappers/*.xml</span>  <span class="comment"># mybatis映射文件目录位置</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span> <span class="comment"># 开启驼峰命名  例如：user_name映射到userName</span></span><br></pre></td></tr></table></figure><h3 id="5-4-2-通用mapper"><a href="#5-4-2-通用mapper" class="headerlink" title="5.4.2.通用mapper"></a>5.4.2.通用mapper</h3><p> <a href="https://mapperhelper.github.io/docs/2.use/" target="_blank" rel="noopener">https://mapperhelper.github.io/docs/2.use/</a> </p><p><strong>注意：先把mybatis相关的配置文件删除、把引导类上mapperScan注解删除、把mybatis的启动器删除</strong></p><p>通用Mapper的作者也为自己的插件编写了启动器，我们直接引入即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通用mapper --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：一旦引入了通用Mapper的启动器，会覆盖Mybatis官方启动器的功能，因此需要移除对官方Mybatis启动器的依赖。</p><p>无需任何配置就可以使用了。如果有特殊需要，可以到通用mapper官网查看： <a href="https://mapperhelper.github.io/docs/" target="_blank" rel="noopener">https://mapperhelper.github.io/docs/</a> </p><p>另外，我们需要把启动类上的@MapperScan注解修改为通用mapper中自带的：</p><p><img data-src="/assets/%E9%80%9A%E7%94%A8mapper1.png" alt="通用mapper1"></p><p>接下来就是通用mapper的使用步骤了：</p><p>1）继承Mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）在实体类上加JPA注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tb_user"</span>)<span class="comment">//指定数据库表明与实体类映射关系</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span> <span class="comment">//当前属性为主键</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer sex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date created;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date updated;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String note;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，对UserService的代码进行简单改造：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span> <span class="comment">//基于注解实现事务管理</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.selectAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>调用selectAll方法</p></blockquote><h2 id="5-5-启动测试"><a href="#5-5-启动测试" class="headerlink" title="5.5.启动测试"></a>5.5.启动测试</h2><p>将controller进行简单改造：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span> <span class="comment">//相当于 @Controller+ @ResponseBody</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/findAll"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/findById"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(String id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.findById(Integer.parseInt(id));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们启动项目，查看：</p><p><img data-src="/assets/%E9%80%9A%E7%94%A8mapper2.png" alt="通用mapper2"></p><p>友情提示：如果你非要用MyBatis的通用mapper，并且出了这个异常tk.mybatis.mapper.provider.base.BaseSelectProvider，看看<code>@MapperScan</code>的包是不是tk的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//import org.mybatis.spring.annotation.MapperScan;</span></span><br><span class="line"><span class="keyword">import</span> tk.mybatis.spring.annotation.MapperScan;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-了解SpringBoot&quot;&gt;&lt;a href=&quot;#1-了解SpringBoot&quot; class=&quot;headerlink&quot; title=&quot;1.了解SpringBoot&quot;&gt;&lt;/a&gt;1.了解SpringBoot&lt;/h1&gt;&lt;p&gt;在这一部分，我们主要了解以下3个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;什么是SpringBoot  springboot是一种快速使用spring框架的简便的方式&lt;/li&gt;
&lt;li&gt;为什么要学习SpringBoot&lt;/li&gt;
&lt;li&gt;SpringBoot的特点&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="框架" scheme="http://sunmoon.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="SpringBoot" scheme="http://sunmoon.com/categories/%E6%A1%86%E6%9E%B6/SpringBoot/"/>
    
    
      <category term="入门" scheme="http://sunmoon.com/tags/%E5%85%A5%E9%97%A8/"/>
    
      <category term="SpringBoot的配置" scheme="http://sunmoon.com/tags/SpringBoot%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
    
      <category term="自动配置原理" scheme="http://sunmoon.com/tags/%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86/"/>
    
      <category term="整合SpringMVC" scheme="http://sunmoon.com/tags/%E6%95%B4%E5%90%88SpringMVC/"/>
    
      <category term="整合Mybatis" scheme="http://sunmoon.com/tags/%E6%95%B4%E5%90%88Mybatis/"/>
    
      <category term="整合连接池" scheme="http://sunmoon.com/tags/%E6%95%B4%E5%90%88%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    
      <category term="整合JDBC" scheme="http://sunmoon.com/tags/%E6%95%B4%E5%90%88JDBC/"/>
    
      <category term="通用Mapper" scheme="http://sunmoon.com/tags/%E9%80%9A%E7%94%A8Mapper/"/>
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="http://sunmoon.com/2020/10/24/Git/"/>
    <id>http://sunmoon.com/2020/10/24/Git/</id>
    <published>2020-10-24T11:13:50.000Z</published>
    <updated>2020-10-24T11:19:27.738Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git概述"><a href="#Git概述" class="headerlink" title="Git概述"></a>Git概述</h1><h2 id="Git历史"><a href="#Git历史" class="headerlink" title="Git历史"></a>Git历史</h2><ul><li><p>Linus在1991年创建了开源的Linux，从此，世界各地的优秀程序员都在为linux的源代码开始奉献自己的一份力量</p></li><li><p>2002年以前，世界各地的志愿者把源代码文件通过diff的方式发给Linus，然后由Linus本人通过手工方式合并代码，效率非常差</p></li><li><p>2002年，BitMover公司决定将自己的商业版本控制系统BitKeeper让Linus团队免费使用，以维护Linux的源代码</p></li><li><p>2005年，Linus团队的一个小伙试图破解BitKeeper的协议，被发现了，于是BitMover公司怒了，收回了Linux社区的免费使用权</p></li><li><p>接下来，Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！</p></li><li><p>2008年，基于的Git的GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub</p></li><li><p>现在，Git已经成为最流行的分布式版本控制系统</p></li></ul><p><img data-src="/assets/1582022666115.png" alt="1582022666115"> </p><a id="more"></a><h2 id="Git和SVN区别"><a href="#Git和SVN区别" class="headerlink" title="Git和SVN区别"></a>Git和SVN区别</h2><p><strong>SVN是集中式的版本控制系统，Git是分布式版本控制系统</strong></p><p><img data-src="/assets/image-20201024085844872.png" alt="image-20201024085844872"></p><h2 id="Git工作流程"><a href="#Git工作流程" class="headerlink" title="Git工作流程"></a>Git工作流程</h2><p><img data-src="/assets/image-20200717153615947.png" alt="image-20200717153615947"> </p><p>一般工作流程如下：</p><p>1．创建本地仓库（或者从远程仓库中克隆资源作为本地仓库）</p><p>2．从本地仓库中checkout代码然后进行代码修改（自动执行）</p><p>3．先将代码提交到暂存区（其实就是将自己写的代码添加到git管理的意思）</p><p>4．提交代码到本地仓库，本地仓库中保存修改的各个历史版本</p><p>5．在修改完成后，需要和团队成员共享代码时，可以将代码push到远程仓库</p><h1 id="Git的安装"><a href="#Git的安装" class="headerlink" title="Git的安装"></a>Git的安装</h1><h2 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h2><p>服务端下载地址：<a href="https://git-scm.com/download" target="_blank" rel="noopener">https://git-scm.com/download</a></p><p>客户端下载地址：<a href="https://tortoisegit.org/download" target="_blank" rel="noopener">https://tortoisegit.org/download</a></p><p><img data-src="/assets/image-20200717154340992.png" alt="image-20200717154340992"> </p><h2 id="Git服务器安装"><a href="#Git服务器安装" class="headerlink" title="Git服务器安装"></a>Git服务器安装</h2><p>双击启动安装程序，选择一个没有中文的目录，剩下的选项全部采用默认值，一路下一步，直到安装结束</p><p>==注意：安装的位置记录一下==</p><p><img data-src="/assets/image-20200717155019636.png" alt="image-20200717155019636"> </p><h2 id="Git客户端安装"><a href="#Git客户端安装" class="headerlink" title="Git客户端安装"></a>Git客户端安装</h2><h3 id="启动安装程序"><a href="#启动安装程序" class="headerlink" title="启动安装程序"></a>启动安装程序</h3><p>双击启动安装程序，选择一个没有中文的目录，剩下的选项全部采用默认值，一路下一步，直到安装结束</p><p><img data-src="/assets/image-20200717155536087.png" alt="image-20200717155536087"> </p><h3 id="运行首次启动向导"><a href="#运行首次启动向导" class="headerlink" title="运行首次启动向导"></a>运行首次启动向导</h3><p><img data-src="/assets/image-20200717155652923.png" alt="image-20200717155652923"> </p><h3 id="语言选择"><a href="#语言选择" class="headerlink" title="语言选择"></a>语言选择</h3><p>Language选择English，点击下一步</p><p><img data-src="/assets/image-20200717155952630.png" alt="image-20200717155952630"> </p><h3 id="配置git-exe位置"><a href="#配置git-exe位置" class="headerlink" title="配置git.exe位置"></a>配置git.exe位置</h3><p>再刚才安装git软件的时候，记录下了其安装位置， 我们需要在这里指定一下</p><p><img data-src="/assets/image-20200717160349865.png" alt="image-20200717160349865"> </p><h3 id="配置名称和邮箱"><a href="#配置名称和邮箱" class="headerlink" title="配置名称和邮箱"></a>配置名称和邮箱</h3><p>这些信息会在后期提交代码的时候，作为身份信息被提交到版本库</p><p>name写自己名字的拼音, 邮箱写自己的真实邮箱</p><p><img data-src="/assets/image-20200717160434881.png" alt="image-20200717160434881"> </p><h3 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成"></a>安装完成</h3><p><img data-src="/assets/image-20200717161020931.png" alt="image-20200717161020931"> </p><h3 id="重启电脑"><a href="#重启电脑" class="headerlink" title="重启电脑"></a>重启电脑</h3><p>安装完毕之后，一定要重新启动下电脑，然后在桌面上右键，看到下面的五个按钮，代表安装成功了</p><p><img data-src="/assets/image-20200717161259603.png" alt="image-20200717161259603"> </p><h2 id="客户端汉化"><a href="#客户端汉化" class="headerlink" title="客户端汉化"></a>客户端汉化</h2><h3 id="安装汉化包"><a href="#安装汉化包" class="headerlink" title="安装汉化包"></a>安装汉化包</h3><p>在资料中找到客户端的汉化包，双击运行，然后一路下一步完成汉化过程</p><p><img data-src="/assets/image-20200717161548368.png" alt="image-20200717161548368"> </p><h3 id="中文语言配置"><a href="#中文语言配置" class="headerlink" title="中文语言配置"></a>中文语言配置</h3><p>在桌面右键，按如下进行选择，即可完成中文语言配置</p><p><img data-src="/assets/image-20200717161828922.png" alt="image-20200717161828922"> </p><h1 id="Git操作本地仓库"><a href="#Git操作本地仓库" class="headerlink" title="Git操作本地仓库"></a>Git操作本地仓库</h1><h2 id="创建本地仓库"><a href="#创建本地仓库" class="headerlink" title="创建本地仓库"></a>创建本地仓库</h2><p><img data-src="/assets/image-20200717164905847.png" alt="image-20200717164905847"> </p><h2 id="创建文件，并执行添加操作"><a href="#创建文件，并执行添加操作" class="headerlink" title="创建文件，并执行添加操作"></a>创建文件，并执行添加操作</h2><p>注意: 添加操作， 只是让git环境识别了我们新建的文件， 但是并没有将其放入到git仓库</p><p><img data-src="/assets/image-20200717201147718.png" alt="image-20200717201147718"> </p><h2 id="提交文件到本地仓库"><a href="#提交文件到本地仓库" class="headerlink" title="提交文件到本地仓库"></a>提交文件到本地仓库</h2><p>提交操作的作用是将文件放到本地仓库中进行管理</p><p><img data-src="/assets/image-20200717202436106.png" alt="image-20200717202436106"></p><h2 id="查看历史版本"><a href="#查看历史版本" class="headerlink" title="查看历史版本"></a>查看历史版本</h2><p><img data-src="/assets/image-20200717203200332.png" alt="image-20200717203200332"> </p><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><p>删除文件需要做两件事:1) 删除文件  2) 提交更新</p><p><img data-src="/assets/image-20200717204313603.png" alt="image-20200717204313603"></p><h2 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h2><p>在特定情况下，我们不希望自己的某些文件被git管理，这时候，我们就要设置git忽略掉此文件</p><p><img data-src="/assets/image-20200717205156485.png" alt="image-20200717205156485"> </p><h1 id="Git操作远程仓库"><a href="#Git操作远程仓库" class="headerlink" title="Git操作远程仓库"></a>Git操作远程仓库</h1><p>现在我们已经在本地创建了一个Git仓库，但是这只能满足我们单人开发，如果想要团队协作，还需要一个远程仓库</p><p>目前比较流行的远程仓库，有下面这两个：</p><ul><li>github：<a href="https://github.com" target="_blank" rel="noopener">https://github.com</a></li><li>码云 ：<a href="https://gitee.com" target="_blank" rel="noopener">https://gitee.com</a></li></ul><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="注册码云"><a href="#注册码云" class="headerlink" title="注册码云"></a>注册码云</h3><p><img data-src="/assets/image-20200719083258106.png" alt="image-20200719083258106"> </p><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p><img data-src="/assets/image-20200719084642812.png" alt="image-20200719084642812"> </p><h3 id="仓库连接协议"><a href="#仓库连接协议" class="headerlink" title="仓库连接协议"></a>仓库连接协议</h3><p>git仓库支持两种连接协议：</p><ul><li>HTTPS：是以安全为目标的HTTP通道，在HTTP的基础上通过传输加密和身份认证保证了传输过程的安全性</li><li>SSH：安全外壳协议，通过密钥对方式对传输的数据进行加密，实现免密登录</li></ul><p><img data-src="/assets/image-20200719091754184.png" alt="image-20200719091754184"> </p><p>复制git的地址（一定注意：这个地址是SSH的，以git开头，千万不要复制成HTTPS的）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git@gitee.com:xiaomingguo/saas-bk.git</span><br></pre></td></tr></table></figure><h2 id="基于SSH协议的仓库操作"><a href="#基于SSH协议的仓库操作" class="headerlink" title="基于SSH协议的仓库操作"></a>基于SSH协议的仓库操作</h2><h3 id="本地电脑生成秘钥对"><a href="#本地电脑生成秘钥对" class="headerlink" title="本地电脑生成秘钥对"></a>本地电脑生成秘钥对</h3><p>使用<code>cmd</code>命令启动dos窗口，然后输入<code>ssh-keygen -t rsa</code>命令按回车键，然后一路回车，生成秘钥对</p><p><img data-src="/assets/image-20200719093023113.png" alt="image-20200719093023113"> </p><h3 id="将公钥复制到gitee中"><a href="#将公钥复制到gitee中" class="headerlink" title="将公钥复制到gitee中"></a>将公钥复制到gitee中</h3><p><img data-src="/assets/image-20200719093330699.png" alt="image-20200719093330699"> </p><p><img data-src="/assets/image-20200719093558066.png" alt="image-20200719093558066"> </p><h3 id="配置小乌龟开启ssh认证协议"><a href="#配置小乌龟开启ssh认证协议" class="headerlink" title="配置小乌龟开启ssh认证协议"></a>配置小乌龟开启ssh认证协议</h3><p><img data-src="/assets/image-20200719094642199.png" alt="image-20200719094642199"> </p><h3 id="克隆远程仓库到本地"><a href="#克隆远程仓库到本地" class="headerlink" title="克隆远程仓库到本地"></a>克隆远程仓库到本地</h3><p>在本地新建一个<code>zhang</code>文件夹，然后在文件夹中右键点击<code>Git克隆...</code>，填写URL（从网页中复制），点击确定</p><p><img data-src="/assets/image-20200719095547661.png" alt="image-20200719095547661"> </p><h3 id="在本地仓库中添加文件"><a href="#在本地仓库中添加文件" class="headerlink" title="在本地仓库中添加文件"></a>在本地仓库中添加文件</h3><p>在文件夹中新建一个hello.txt文件，并执行add–commit操作，将其添加到本地仓库</p><h3 id="将文件推送到远程仓库"><a href="#将文件推送到远程仓库" class="headerlink" title="将文件推送到远程仓库"></a>将文件推送到远程仓库</h3><p><img data-src="/assets/image-20200719101831458.png" alt="image-20200719101831458"> </p><p><img data-src="/assets/image-20200719101812440.png" alt="image-20200719101812440"> </p><p><img data-src="/assets/image-20200719102238266.png" alt="image-20200719102238266"> </p><p><img data-src="/assets/image-20200719102350957.png" alt="image-20200719102350957"> </p><h2 id="代码冲突"><a href="#代码冲突" class="headerlink" title="代码冲突"></a>代码冲突</h2><h3 id="模拟冲突"><a href="#模拟冲突" class="headerlink" title="模拟冲突"></a>模拟冲突</h3><ol><li><p>新建一个<code>yuan</code>文件夹，模拟另一个用户，然后将远程仓库克隆进来</p></li><li><p>然后在<code>zhang</code>文件夹下，修改文件内容，并执行commit–push操作，将文件推送到远程仓库</p><p> <img data-src="/assets/image-20200719103324250.png" alt="image-20200719103324250"> </p></li><li><p>然后在<code>yuan</code>文件夹下，修改文件内容，并执行commit–push操作，将文件推送到远程仓库</p><p> <img data-src="/assets/image-20200719103830225.png" alt="image-20200719103830225"> </p></li></ol><p>此时发现，推送的过程出现问题了，这就是文件冲突，下面就来解决文件冲突</p><p><img data-src="/assets/image-20200719103936088.png" alt="image-20200719103936088"> </p><h3 id="冲突解决"><a href="#冲突解决" class="headerlink" title="冲突解决"></a>冲突解决</h3><h4 id="执行拉取操作"><a href="#执行拉取操作" class="headerlink" title="执行拉取操作"></a>执行拉取操作</h4><p><img data-src="/assets/image-20200719104421532.png" alt="image-20200719104421532"> </p><h4 id="编辑冲突"><a href="#编辑冲突" class="headerlink" title="编辑冲突"></a>编辑冲突</h4><p><img data-src="/assets/image-20200719110721223.png" alt="image-20200719110721223"> </p><p><img data-src="/assets/image-20200719111106434.png" alt="image-20200719111106434"></p><h4 id="提交并推送修改"><a href="#提交并推送修改" class="headerlink" title="提交并推送修改"></a>提交并推送修改</h4><p><img data-src="/assets/image-20200719111354844.png" alt="image-20200719111354844"></p><h1 id="IDEA中使用Git"><a href="#IDEA中使用Git" class="headerlink" title="IDEA中使用Git"></a>IDEA中使用Git</h1><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="在idea中配置Git"><a href="#在idea中配置Git" class="headerlink" title="在idea中配置Git"></a>在idea中配置Git</h3><p><img data-src="/assets/image-20200719112154085.png" alt="image-20200719112154085">  </p><h3 id="在idea中配置git管理"><a href="#在idea中配置git管理" class="headerlink" title="在idea中配置git管理"></a>在idea中配置git管理</h3><p><img data-src="/assets/image-20200719115701896.png" alt="image-20200719115701896"> </p><h3 id="在idea中配置忽略文件"><a href="#在idea中配置忽略文件" class="headerlink" title="在idea中配置忽略文件"></a>在idea中配置忽略文件</h3><p>1) 安装文件忽略插件,重启idea</p><p><img data-src="/assets/image-20200912115027605.png" alt="image-20200912115027605">  </p><p>2) 添加文件忽略配置文件</p><p><img data-src="/assets/image-20200912120113487.png" alt="image-20200912120113487"> </p><blockquote><p>解释:</p><p>​    .idea/           忽略.idea文件夹</p><p>​    rebel.xml     忽略所有的rebel.xml文件</p><p>​    *.iml             忽略所有的.iml文件</p><p>​    out/             忽略out文件夹</p><p>​    target/         忽略target文件夹</p></blockquote><h3 id="提交代码到本地仓库（commit）"><a href="#提交代码到本地仓库（commit）" class="headerlink" title="提交代码到本地仓库（commit）"></a>提交代码到本地仓库（commit）</h3><p><img data-src="/assets/image-20200719123852392-1603507027188.png" alt="image-20200719123852392"> </p><h3 id="重新创建远程仓库"><a href="#重新创建远程仓库" class="headerlink" title="重新创建远程仓库"></a>重新创建远程仓库</h3><p>==注意：将当前的远程仓库删除掉，重新创建一个同名字的==</p><p><img data-src="/assets/image-20200719130659471.png" alt="image-20200719130659471"> </p><h3 id="推送代码到远程仓库（push）"><a href="#推送代码到远程仓库（push）" class="headerlink" title="推送代码到远程仓库（push）"></a>推送代码到远程仓库（push）</h3><p><img data-src="/assets/image-20200719124315493.png" alt="image-20200719124315493"></p><p>如果上一步无法填写远程仓库,可以使用下面的方式</p><p><img data-src="/assets/image-20200913104149636.png" alt="image-20200913104149636"> </p><h2 id="代码冲突-1"><a href="#代码冲突-1" class="headerlink" title="代码冲突"></a>代码冲突</h2><h3 id="模拟冲突-1"><a href="#模拟冲突-1" class="headerlink" title="模拟冲突"></a>模拟冲突</h3><p><img data-src="/assets/image-20200719152120310.png" alt="image-20200719152120310"></p><p>1）在idea中对pom.xml文件进行修改操作</p><p>2）在本地新建一个文件夹other，然后将代码克隆一份下来，然后也修改下pom.xml</p><p>3）通过小乌龟现将本地other文件夹的代码提交到远程仓库</p><p>4）再通过idea将idea中的代码推送到远程仓库，再推送的过程中，就会出现下面的错误</p><p><img data-src="/assets/image-20200719152554359.png" alt="image-20200719152554359"> </p><p>加下来，我们点击Merge开始合并代码（解决冲突）</p><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><p><img data-src="/assets/image-20200719152943235.png" alt="image-20200719152943235"></p><p>1）在idea中手动合并代码，解决掉冲突</p><p>2）将改好代码再次向远程仓库推送</p><h1 id="Git分支管理"><a href="#Git分支管理" class="headerlink" title="Git分支管理"></a>Git分支管理</h1><p>几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离开来，以免影响开发主线。</p><p><img data-src="/assets/image-20200630115406801.png" alt="image-20200630115406801"> </p><h2 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h2><p><img data-src="/assets/image-20200630115750447.png" alt="image-20200630115750447"> </p><h2 id="在分支上进行代码的开发"><a href="#在分支上进行代码的开发" class="headerlink" title="在分支上进行代码的开发"></a>在分支上进行代码的开发</h2><p>接下来就可以在lucy分支上进行代码的开发了，开发完毕之后进行commit和push操作</p><p><img data-src="/assets/image-20200719160916901.png" alt="image-20200719160916901"> </p><h2 id="将代码合并到主分支"><a href="#将代码合并到主分支" class="headerlink" title="将代码合并到主分支"></a>将代码合并到主分支</h2><p>1） 先切换到master分支</p><p><img data-src="/assets/image-20200719161312710.png" alt="image-20200719161312710"> </p><p>2） 然后在master分支上将其他分支代码合并进来</p><p><img data-src="/assets/image-20200719161533231.png" alt="image-20200719161533231"> </p><h2 id="分支类型"><a href="#分支类型" class="headerlink" title="分支类型"></a>分支类型</h2><p><img data-src="/assets/image-20201024111933903.png" alt="image-20201024111933903"> </p><p>顺序:  add——-开发—-commit到本地—–&gt;pull代码(可能出现代码冲突,  需要merge代码)——–&gt;push代码</p><p>上午:  开始工作  先拉取代码  有人  推送之前一次</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Git概述&quot;&gt;&lt;a href=&quot;#Git概述&quot; class=&quot;headerlink&quot; title=&quot;Git概述&quot;&gt;&lt;/a&gt;Git概述&lt;/h1&gt;&lt;h2 id=&quot;Git历史&quot;&gt;&lt;a href=&quot;#Git历史&quot; class=&quot;headerlink&quot; title=&quot;Git历史&quot;&gt;&lt;/a&gt;Git历史&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Linus在1991年创建了开源的Linux，从此，世界各地的优秀程序员都在为linux的源代码开始奉献自己的一份力量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2002年以前，世界各地的志愿者把源代码文件通过diff的方式发给Linus，然后由Linus本人通过手工方式合并代码，效率非常差&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2002年，BitMover公司决定将自己的商业版本控制系统BitKeeper让Linus团队免费使用，以维护Linux的源代码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2005年，Linus团队的一个小伙试图破解BitKeeper的协议，被发现了，于是BitMover公司怒了，收回了Linux社区的免费使用权&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;接下来，Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2008年，基于的Git的GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;现在，Git已经成为最流行的分布式版本控制系统&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&quot;/assets/1582022666115.png&quot; alt=&quot;1582022666115&quot;&gt; &lt;/p&gt;
    
    </summary>
    
    
      <category term="其他" scheme="http://sunmoon.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="Git" scheme="http://sunmoon.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ&amp;SpringAMQP&amp;PDF报表</title>
    <link href="http://sunmoon.com/2020/10/23/RabbitMQ-SpringAMQP-PDF%E6%8A%A5%E8%A1%A8/"/>
    <id>http://sunmoon.com/2020/10/23/RabbitMQ-SpringAMQP-PDF%E6%8A%A5%E8%A1%A8/</id>
    <published>2020-10-23T12:17:01.000Z</published>
    <updated>2020-10-23T12:22:07.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="消息中间件"><a href="#消息中间件" class="headerlink" title="消息中间件"></a>消息中间件</h1><p>消息队列中间件是分布式系统中重要的组件，主要解决<strong>异步消息，应用解耦，流量削峰等</strong>问题，实现高性能，高可用，可伸缩和最终一致性架构。</p><p>对于消息中间件，常见的角色大致也就有<strong>Producer</strong>（生产者）、<strong>Consumer</strong>（消费者）。</p><a id="more"></a><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h3 id="异步消息"><a href="#异步消息" class="headerlink" title="异步消息"></a>异步消息</h3><p>场景说明：用户注册后，需要发注册邮件和注册短信。</p><p><img data-src="/assets/%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF-%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF.png" alt="应用场景-异步消息"></p><h3 id="应用解耦"><a href="#应用解耦" class="headerlink" title="应用解耦"></a>应用解耦</h3><p>上面的应用页体现了解耦</p><h3 id="流量削峰"><a href="#流量削峰" class="headerlink" title="流量削峰"></a>流量削峰</h3><p>流量削峰也是消息队列中的常用场景，一般在秒杀或团抢活动中使用广泛。</p><p>应用场景：秒杀活动，一般会因为流量过大，导致流量暴增，应用挂掉。为解决这个问题，一般需要在应用前端加入消息队列。</p><p><img data-src="/assets/%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF-%E6%B5%81%E9%87%8F%E5%89%8A%E5%B3%B0.png" alt="应用场景-流量削峰"></p><h2 id="常见的消息中间件"><a href="#常见的消息中间件" class="headerlink" title="常见的消息中间件"></a>常见的消息中间件</h2><p>常见的消息中间件，有下面这些：</p><ul><li>ActiveMQ：是Apache出品基于JMS（Java Message Service）规范的一种消息中间件的实现。</li><li>ZeroMQ：号称”史上最快的消息中间件”，基于C语言开发的。</li><li>Kafka：Apache下的一个子项目 。特点：可以达到10W/s的吞吐速率；适合处理海量数据。</li><li><strong>RabbitMQ</strong>：是基于AMQP(Advanced Message Queuing Protocol)协议上完成的，基Erlang语言开发的。</li><li>RocketMQ ：阿里巴巴推出。</li></ul><blockquote><p><strong>AMQP和JMS区别</strong>： JMS限定了必须使用Java语言；AMQP只是协议，不规定实现方式，因此是跨平台跨语言的</p></blockquote><h1 id="RabbitMQ安装"><a href="#RabbitMQ安装" class="headerlink" title="RabbitMQ安装"></a>RabbitMQ安装</h1><p>RabbitMQ是基于AMQP（Advanced Message Queuing Protocol）的一款消息中间件管理系统，官网地址： <a href="http://www.rabbitmq.com/" target="_blank" rel="noopener">http://www.rabbitmq.com/</a></p><h2 id="安装和启动"><a href="#安装和启动" class="headerlink" title="安装和启动"></a>安装和启动</h2><h3 id="Erlang"><a href="#Erlang" class="headerlink" title="Erlang"></a>Erlang</h3><p>RabbitMQ是基于Erlang语言开发，所以我们需要先安装此环境</p><p>官网地址：<a href="https://www.erlang.org/" target="_blank" rel="noopener">https://www.erlang.org/</a></p><p><img data-src="/assets/Erlang%E5%AE%89%E8%A3%85.png" alt="Erlang安装"></p><blockquote><p>一直下一步</p><p>注意：安装Erlang语言，不要有中文路径</p></blockquote><h3 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><p><img data-src="/assets/RabbitMQ%E5%AE%89%E8%A3%85.png" alt="RabbitMQ安装"></p><blockquote><p>注意：</p><ul><li>安装RabbitMQ，不要有中文路径</li></ul></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>双击rabbitmq-server-3.7.16.exe安装即可（这个目录要记住）</span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>进入到rabbitMq的安装目录中，进入sbin文件夹中，打开dos窗口</span><br><span class="line"><span class="code">2.1 启动</span></span><br><span class="line"><span class="code">rabbitmqctl start_app</span></span><br><span class="line"><span class="code">2.2 开启web控制台的访问</span></span><br><span class="line"><span class="code">rabbitmq-plugins enable rabbitmq_management</span></span><br><span class="line"><span class="code">        </span></span><br><span class="line"><span class="bullet">3. </span>浏览器访问管理控制台</span><br><span class="line"><span class="code">http://127.0.0.1:15672/</span></span><br><span class="line"><span class="code">用户名：guest</span></span><br><span class="line"><span class="code">密码：guest</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>控制台  15672</span><br><span class="line"><span class="bullet">* </span>软件    5672</span><br></pre></td></tr></table></figure><blockquote><p>注意：如果windows用户名为中文，安装必然必败</p><ul><li>解决方法<ul><li>首先创建一个新的windows用户，不要有中文，使用这个账户安装，注意（这个账户不要删）</li><li>安装完毕之后再切回到你的中文用户，可以共享这个rabbitMQ使用…..</li></ul></li></ul></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>重置MQ数据 </span><br><span class="line"><span class="code">rabbitmqctl stop_app</span></span><br><span class="line"><span class="code">rabbitmqctl reset</span></span><br><span class="line"><span class="code">rabbitmqctl start_app</span></span><br></pre></td></tr></table></figure><h2 id="空间和用户管理"><a href="#空间和用户管理" class="headerlink" title="空间和用户管理"></a>空间和用户管理</h2><p>要想使用RabbitMQ，必须创建出空间【类似于数据库服务器中的一个库一样】和用户</p><h3 id="创建空间"><a href="#创建空间" class="headerlink" title="创建空间"></a>创建空间</h3><p><img data-src="/assets/RabbitMQ%E5%88%9B%E5%BB%BA%E7%A9%BA%E9%97%B4.png" alt="RabbitMQ创建空间"></p><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><p><img data-src="/assets/RabbitMQ%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7.png" alt="RabbitMQ创建用户"></p><h3 id="将空间交给用户管理"><a href="#将空间交给用户管理" class="headerlink" title="将空间交给用户管理"></a>将空间交给用户管理</h3><p><img data-src="/assets/%E5%B0%86%E7%A9%BA%E9%97%B4%E4%BA%A4%E7%BB%99%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86.png" alt="将空间交给用户管理"></p><h1 id="五种消息模型"><a href="#五种消息模型" class="headerlink" title="五种消息模型"></a>五种消息模型</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>消息中间件的消息分为两类传输模型：<strong>点对点模型</strong>、<strong>发布/订阅模型</strong>   </p><p><img data-src="/assets/2%E7%A7%8D%E6%B6%88%E6%81%AF%E4%BC%A0%E8%BE%93%E6%A8%A1%E5%9E%8B.png" alt="2种消息传输模型"></p><p>RabbitMQ在此基础上进行细化，提供了6种消息模型，但是第6种其实是RPC，并不是MQ，因此不予学习。那么也就剩下5种:</p><ul><li>1、2（点对点模型）</li><li>3、4、5（发布/订阅模型）</li></ul><p><img data-src="/assets/RabbitMQ%E7%9A%84%E4%BA%94%E7%A7%8D%E6%B6%88%E6%81%AF%E6%A8%A1%E5%9E%8B.png" alt="RabbitMQ的五种消息模型"></p><h2 id="消息模型"><a href="#消息模型" class="headerlink" title="消息模型"></a>消息模型</h2><h3 id="Simple消息模型"><a href="#Simple消息模型" class="headerlink" title="Simple消息模型"></a>Simple消息模型</h3><blockquote><p>这是最简单的消息模型，典型的一个生产者对应一个消费者，生产者向队列生成消息，消费者从队列消费消息</p></blockquote><p><img data-src="/assets/image-20201023092653836.png" alt="image-20201023092653836"></p><blockquote><p>ACK确认机制</p><ul><li>自动回执：消费者一旦拿到消息，立马发送回执，当业务不是主要的业务，数据不敏感时使用</li><li>手动回执：消费者拿到数据之后，根据处理的结果，手动发送回执，当业务数据要求严谨时使用</li></ul></blockquote><p> <img data-src="/assets/image-20201023094821198.png" alt="image-20201023094821198"> </p><h3 id="Work消息模型"><a href="#Work消息模型" class="headerlink" title="Work消息模型"></a>Work消息模型</h3><blockquote><p>当消息处理比较耗时的时候，可能生产消息的速度会远远大于消息的消费速度。长此以往，消息就会堆积越来越多，无法及时处理。</p><p>此时就可以使用work 模型：让多个消费者绑定到一个队列，共同消费队列中的消息，注意同一条消息只能被其中一个消费者消费。</p></blockquote><p><img data-src="/assets/image-20201023100055533.png" alt="image-20201023100055533"> </p><h3 id="订阅消息模型-Fanout-广播"><a href="#订阅消息模型-Fanout-广播" class="headerlink" title="订阅消息模型-Fanout( 广播 )"></a>订阅消息模型-Fanout( 广播 )</h3><blockquote><p>Fanout类型的交换机与多个队列绑定，当消息发送到此类型的交换机时，所有与之绑定的队列都能收到消息。</p></blockquote><p><img data-src="/assets/image-20201023100841284.png" alt="image-20201023100841284"></p><h3 id="订阅消息模型-Direct"><a href="#订阅消息模型-Direct" class="headerlink" title="订阅消息模型-Direct"></a>订阅消息模型-Direct</h3><blockquote><p>当一个队列与Direct类型的交换机绑定的时候，需要声明出自己能够处理的请求标识（binding key）</p><p>当我们程序将消息发送给此类型的交换机时，也需要指定一个标识（routing key），只有routing和binding完全匹配时，绑定的队列才能收到消息。</p></blockquote><p><img data-src="/assets/image-20201023101601626.png" alt="image-20201023101601626"> </p><h3 id="订阅消息模型-Topic"><a href="#订阅消息模型-Topic" class="headerlink" title="订阅消息模型-Topic"></a>订阅消息模型-Topic</h3><blockquote><p>Topic类型的交换机与Direct类型的交换机基本功能是一样的，但是它支持使用通配符来书写binding key </p><p>常用的通配符有两个：</p><ul><li><p><code>#</code>：匹配一个或多个词</p></li><li><p><code>*</code>：匹配不多不少恰好1个词</p></li></ul></blockquote><p> <img data-src="/assets/image-20201023102441660.png" alt="image-20201023102441660"></p><h2 id="消息持久化"><a href="#消息持久化" class="headerlink" title="消息持久化"></a>消息持久化</h2><p>为了保证在MQ宕机的时候，消息不丢失，对消息、队列、交换机添加持久化的设置</p><p>1）生产者开启交换机和消息的持久化 </p><p><img data-src="/assets/image-20200811152211097.png" alt="image-20200811152211097"> </p><p>2）消费者开启交换机和队列的持久化</p><p><img data-src="/assets/image-20200811152311495.png" alt="image-20200811152311495"> </p><p>3）删除MQ中现有的交换机和队列， 然后再测试（略）</p><p><img data-src="/assets/image-20200811152638867.png" alt="image-20200811152638867"> </p><blockquote><p><strong>面试题：如何避免消息丢失？</strong></p><p>​    1）消息的持久化机制，可以防止由于MQ宕机导致的消息丢失。</p><p>​    2）消费者的手动ACK机制，可以防止消费者丢失消息。</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>点对点</span><br><span class="line"><span class="code">Simple   一个生产者---一个消费者</span></span><br><span class="line"><span class="code">Work     一个生产者---多个消费者</span></span><br><span class="line"><span class="code">平均消费</span></span><br><span class="line"><span class="code">竞争消费</span></span><br><span class="line"><span class="bullet">2. </span>发布订阅</span><br><span class="line"><span class="code">Fanout(广播)   一个生产者---多个消费者</span></span><br><span class="line"><span class="code">Direct(路由)   一个生产者---多个消费者  (  bindingkey    routingkey  )</span></span><br><span class="line"><span class="code">Topic (主题)   一个生产者---多个消费者  (  bindingkey    routingkey      支持 routingkey的通配符 *  # )</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">3. </span>ACk确认机制</span><br><span class="line"><span class="code">自动回执: 消费者拿到消息之后自动回执消息</span></span><br><span class="line"><span class="code">手动回执: 消费成功之后使用代码手动回执消息</span></span><br></pre></td></tr></table></figure><h1 id="Spring-AMQP"><a href="#Spring-AMQP" class="headerlink" title="Spring AMQP"></a>Spring AMQP</h1><p>Spring有很多不同的子项目，其中就有对AMQP的支持，为我们提供了一个模板 bean（AMQPTemplate） 来发送和接收消息，来简化RabbitMQ操作。</p><p>官网地址：<a href="https://spring.io/projects/spring-amqp" target="_blank" rel="noopener">https://spring.io/projects/spring-amqp</a></p><blockquote><p>Spring-amqp是对AMQP协议的抽象实现，而spring-rabbit是对协议的具体实现，也是目前的唯一实现。</p></blockquote><h2 id="创建父工程"><a href="#创建父工程" class="headerlink" title="创建父工程"></a>创建父工程</h2><blockquote><p>导入依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.amqp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="创建消费者模块"><a href="#创建消费者模块" class="headerlink" title="创建消费者模块"></a>创建消费者模块</h2><h3 id="加入spring配置文件"><a href="#加入spring配置文件" class="headerlink" title="加入spring配置文件"></a>加入spring配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:rabbit</span>=<span class="string">"http://www.springframework.org/schema/rabbit"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/rabbit</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/rabbit/spring-rabbit.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置连接工厂 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:connection-factory</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span> <span class="attr">virtual-host</span>=<span class="string">"saas-bk"</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">host</span>=<span class="string">"127.0.0.1"</span> <span class="attr">port</span>=<span class="string">"5672"</span> <span class="attr">username</span>=<span class="string">"saas"</span> <span class="attr">password</span>=<span class="string">"saas"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义mq管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:admin</span> <span class="attr">connection-factory</span>=<span class="string">"connectionFactory"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 声明队列  此队列名称与发送者一致  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:queue</span> <span class="attr">name</span>=<span class="string">"spring.test.queue"</span> <span class="attr">auto-declare</span>=<span class="string">"true"</span> <span class="attr">durable</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--绑定队列到交换机--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:topic-exchange</span>  <span class="attr">id</span>=<span class="string">"springTestExchange"</span> <span class="attr">name</span>=<span class="string">"spring.test.exchange"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">rabbit:binding</span> <span class="attr">queue</span>=<span class="string">"spring.test.queue"</span> <span class="attr">pattern</span>=<span class="string">"user.#"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rabbit:bindings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rabbit:topic-exchange</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定义消费者监听器  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"testMqListener"</span> <span class="attr">class</span>=<span class="string">"com.sun.MqListener"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定义消费者监听队列</span></span><br><span class="line"><span class="comment">        acknowledge="manual"设置为手动回执模式</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:listener-container</span> <span class="attr">connection-factory</span>=<span class="string">"connectionFactory"</span> <span class="attr">acknowledge</span>=<span class="string">"manual"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rabbit:listener</span> <span class="attr">ref</span>=<span class="string">"testMqListener"</span> <span class="attr">queues</span>=<span class="string">"spring.test.queue"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rabbit:listener-container</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="实现一个监听器负责接收消息"><a href="#实现一个监听器负责接收消息" class="headerlink" title="实现一个监听器负责接收消息"></a>实现一个监听器负责接收消息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义监听器</span></span><br><span class="line"><span class="comment"> * 自动回执实现接口MessageListener</span></span><br><span class="line"><span class="comment"> * 手动回执实现接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MqListener</span> <span class="keyword">implements</span> <span class="title">ChannelAwareMessageListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获取消息的字节数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] body = message.getBody();</span><br><span class="line">        <span class="comment">//转为字符串</span></span><br><span class="line">        String str = <span class="keyword">new</span> String(body);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        <span class="comment">//手动回执</span></span><br><span class="line">        channel.basicAck(message.getMessageProperties().getDeliveryTag(),<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动Spring环境"><a href="#启动Spring环境" class="headerlink" title="启动Spring环境"></a>启动Spring环境</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerStart</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext act</span><br><span class="line">                = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext-mq-consumer.xml"</span>);</span><br><span class="line">        act.start();</span><br><span class="line"></span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建生产者模块"><a href="#创建生产者模块" class="headerlink" title="创建生产者模块"></a>创建生产者模块</h2><h3 id="加入Spring配置文件"><a href="#加入Spring配置文件" class="headerlink" title="加入Spring配置文件"></a>加入Spring配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:rabbit</span>=<span class="string">"http://www.springframework.org/schema/rabbit"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/rabbit</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/rabbit/spring-rabbit.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置连接工厂 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:connection-factory</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span> <span class="attr">virtual-host</span>=<span class="string">"saas-bk"</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">host</span>=<span class="string">"127.0.0.1"</span> <span class="attr">port</span>=<span class="string">"5672"</span> <span class="attr">username</span>=<span class="string">"saas"</span> <span class="attr">password</span>=<span class="string">"saas"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义mq管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:admin</span> <span class="attr">connection-factory</span>=<span class="string">"connectionFactory"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--定义交换机（topic模式）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:topic-exchange</span> <span class="attr">id</span>=<span class="string">"springTestExchange"</span> <span class="attr">name</span>=<span class="string">"spring.test.exchange"</span>&gt;</span><span class="tag">&lt;/<span class="name">rabbit:topic-exchange</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 消息对象json转换类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jsonMessageConverter"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"org.springframework.amqp.support.converter.Jackson2JsonMessageConverter"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定义模版 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:template</span> <span class="attr">id</span>=<span class="string">"rabbitTemplate"</span> <span class="attr">connection-factory</span>=<span class="string">"connectionFactory"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">exchange</span>=<span class="string">"spring.test.exchange"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">message-converter</span>=<span class="string">"jsonMessageConverter"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="加入一个发送消息的类，测试"><a href="#加入一个发送消息的类，测试" class="headerlink" title="加入一个发送消息的类，测试"></a>加入一个发送消息的类，测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动Spring环境</span></span><br><span class="line">        ClassPathXmlApplicationContext act</span><br><span class="line">                = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext-mq-producer.xml"</span>);</span><br><span class="line">        <span class="comment">//获取Template，使用它就可以完成数据的传递</span></span><br><span class="line">        AmqpTemplate template = act.getBean(AmqpTemplate<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//消息发送</span></span><br><span class="line">        <span class="comment">//参数一：routing key</span></span><br><span class="line">        <span class="comment">//参数二：发送的消息</span></span><br><span class="line">        template.convertAndSend(<span class="string">"user.hello"</span>,<span class="string">"你好啊！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="手动ACK机制"><a href="#手动ACK机制" class="headerlink" title="手动ACK机制"></a>手动ACK机制</h2><blockquote><p>Spring整合rabbit之后,默认使用的依旧是自动消息回执,如果需要手动回执,需要处理下面两步骤:</p></blockquote><ol><li>在消费者的配置文件中配置消息回执为手动回执模式( acknowledge=”manual” )</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义消费者监听队列 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rabbit:listener-container</span> <span class="attr">connection-factory</span>=<span class="string">"connectionFactory"</span> <span class="attr">acknowledge</span>=<span class="string">"manual"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rabbit:listener</span> <span class="attr">ref</span>=<span class="string">"testMqListener"</span> <span class="attr">queues</span>=<span class="string">"spring.test.queue"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rabbit:listener-container</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>当消息正常消费完毕之后,使用代码手动发送回执</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MqListener</span> <span class="keyword">implements</span> <span class="title">ChannelAwareMessageListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"接收到信息了,消息内容是:"</span> + <span class="keyword">new</span> String(message.getBody()));</span><br><span class="line"></span><br><span class="line">        channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="发送邮件改版-重点"><a href="#发送邮件改版-重点" class="headerlink" title="发送邮件改版(重点)"></a>发送邮件改版(重点)</h1><h2 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h2><p>添加用户成功，向MQ中发送一个消息，然后由<strong>邮件发送模块</strong>监听这个MQ， 拿到消息之后，开始向用户的邮箱中发送一封邮件。</p><p><img data-src="/assets/image-20200910144733655.png" alt=""></p><h2 id="改造生成者工程"><a href="#改造生成者工程" class="headerlink" title="改造生成者工程"></a>改造生成者工程</h2><h3 id="加入Spring的配置文件"><a href="#加入Spring的配置文件" class="headerlink" title="加入Spring的配置文件"></a>加入Spring的配置文件</h3><p><img data-src="/assets/image-20201023143920903.png" alt="image-20201023143920903"> </p><h3 id="加入发送消息的代码"><a href="#加入发送消息的代码" class="headerlink" title="加入发送消息的代码"></a>加入发送消息的代码</h3><p><img data-src="/assets/image-20201023144325749.png" alt="image-20201023144325749"> </p><h2 id="搭建消费者工程"><a href="#搭建消费者工程" class="headerlink" title="搭建消费者工程"></a>搭建消费者工程</h2><h3 id="创建发送邮件的模块"><a href="#创建发送邮件的模块" class="headerlink" title="创建发送邮件的模块"></a>创建发送邮件的模块</h3><p><img data-src="/assets/image-20201023144504399.png" alt="image-20201023144504399"> </p><h3 id="加入配置文件"><a href="#加入配置文件" class="headerlink" title="加入配置文件"></a>加入配置文件</h3><p><img data-src="/assets/image-20201023145019838.png" alt="image-20201023145019838"> </p><h3 id="加入监听的类"><a href="#加入监听的类" class="headerlink" title="加入监听的类"></a>加入监听的类</h3><p><img data-src="/assets/image-20201023145010161.png" alt="image-20201023145010161"></p><h3 id="启动Spring环境-1"><a href="#启动Spring环境-1" class="headerlink" title="启动Spring环境"></a>启动Spring环境</h3><p><img data-src="/assets/image-20201023145133016.png" alt="image-20201023145133016"> </p><h1 id="PDF报表"><a href="#PDF报表" class="headerlink" title="PDF报表"></a>PDF报表</h1><h2 id="报表技术概述"><a href="#报表技术概述" class="headerlink" title="报表技术概述"></a>报表技术概述</h2><p>在企业级应用开发中，报表下载打印是很重要的一个功能。其实除了Excel报表之外，PDF报表也有广泛的应用场景，例如:货运详情，货运单等。</p><p>目前世面上比较流行的制作PDF报表的工具如下：</p><ul><li><strong>iTextPDF</strong>：用于生成PDF文档的一个java类库，使用起来相对繁琐。 </li><li><strong>OpenOffice</strong>：是一套跨平台的办公室软件套件，可以灵活的将word或者Excel转化为PDF文档。</li><li><strong>JasperReport</strong>：JasperReport是一个强大、灵活的报表生成工具，能够展示丰富的页面内容并生成PDF。</li></ul><h2 id="JasperReport介绍"><a href="#JasperReport介绍" class="headerlink" title="JasperReport介绍"></a>JasperReport介绍</h2><blockquote><p>JasperReport  步骤  阶段   生命周期</p></blockquote><p>JasperReport是一个强大、灵活的报表生成工具，能够展示丰富的页面内容，并将之转换成PDF，HTML，或者XML格式。</p><p>官网地址：<a href="https://community.jaspersoft.com/" target="_blank" rel="noopener">https://community.jaspersoft.com/</a></p><p>使用JasperReport做开发，一共分为三个步骤：</p><ul><li><strong>设计</strong>：指定PDF页面布局、复杂公式、数据源等，创建出PDF模板（xx.jrxml）</li><li><strong>执行</strong>：将java查询的数据填充到PDF模板中（xx.jasper + data）</li><li><strong>输出</strong>：生成PDF报表</li></ul><p><img data-src="/assets/image-20201023150441792.png" alt="image-20201023150441792"> </p><h1 id="Jaspersoft-Studio安装和使用"><a href="#Jaspersoft-Studio安装和使用" class="headerlink" title="Jaspersoft Studio安装和使用"></a>Jaspersoft Studio安装和使用</h1><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><p>Jaspersoft Studio是一款基于Eclipse的报表设计器，使用该软件可以方便地对报表进行可视化的模板设计。</p><p>官网下载地址：<a href="https://community.jaspersoft.com/community-download，" target="_blank" rel="noopener">https://community.jaspersoft.com/community-download，</a></p><p><img data-src="/assets/image-20200709134536939.png" alt="image-20200709134536939"> </p><h2 id="软件布局介绍"><a href="#软件布局介绍" class="headerlink" title="软件布局介绍"></a>软件布局介绍</h2><p><img data-src="/assets/image-20200813090134038.png" alt="image-20200813090134038"></p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="创建一个新工程"><a href="#创建一个新工程" class="headerlink" title="创建一个新工程"></a>创建一个新工程</h3><p><img data-src="/assets/image-20200811192221945.png" alt="image-20200811192221945"> </p><h3 id="创建一个新模板"><a href="#创建一个新模板" class="headerlink" title="创建一个新模板"></a>创建一个新模板</h3><p><img data-src="/assets/image-20200811192514207.png" alt="image-20200811192514207"> </p><h3 id="模板基本布局介绍"><a href="#模板基本布局介绍" class="headerlink" title="模板基本布局介绍"></a>模板基本布局介绍</h3><p><img data-src="/assets/image-20200811193331884.png" alt="image-20200811193331884"> </p><h3 id="在模板上添加一些元素"><a href="#在模板上添加一些元素" class="headerlink" title="在模板上添加一些元素"></a>在模板上添加一些元素</h3><p><img data-src="/assets/image-20200811194124605.png" alt="image-20200811194124605"> </p><h3 id="将模板转换为二进制文件"><a href="#将模板转换为二进制文件" class="headerlink" title="将模板转换为二进制文件"></a>将模板转换为二进制文件</h3><blockquote><p>将  .jrxml 文件转换成  .jasper文件</p></blockquote><p><img data-src="/assets/image-20200811194413239.png" alt="image-20200811194413239"> </p><h3 id="通过java代码，填充数据，生成pdf"><a href="#通过java代码，填充数据，生成pdf" class="headerlink" title="通过java代码，填充数据，生成pdf"></a>通过java代码，填充数据，生成pdf</h3><p>在ExportController添加导出方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/exportPdf1"</span>, name = <span class="string">"测试"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exportPdf1</span><span class="params">(String id)</span> <span class="keyword">throws</span> JRException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1. 获取模板</span></span><br><span class="line">    String realPath = session.getServletContext().getRealPath(<span class="string">"/jasper/demo1.jasper"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2  向模板填充数据</span></span><br><span class="line">    HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    JRDataSource dataSource = <span class="keyword">new</span> JREmptyDataSource();</span><br><span class="line">    JasperPrint jasperPrint = JasperFillManager.fillReport(realPath, map, dataSource);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.输出到浏览器</span></span><br><span class="line">    JasperExportManager.exportReportToPdfStream(jasperPrint, response.getOutputStream());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中文处理"><a href="#中文处理" class="headerlink" title="中文处理"></a>中文处理</h2><h3 id="修改模板中的文字-为中文楷体"><a href="#修改模板中的文字-为中文楷体" class="headerlink" title="修改模板中的文字,为中文楷体"></a>修改模板中的文字,为中文楷体</h3><blockquote><p>注意:  修改完毕之后要重新编译文件, 然后复制替换java工程中的模板 </p></blockquote><p><img data-src="/assets/image-20200811203004897.png" alt="image-20200811203004897"> </p><h3 id="在工程中添加中文楷体的库和配置"><a href="#在工程中添加中文楷体的库和配置" class="headerlink" title="在工程中添加中文楷体的库和配置"></a>在工程中添加中文楷体的库和配置</h3><blockquote><p>注意:  修改完之后,重启tomcat</p></blockquote><p><img data-src="/assets/image-20200811203209704.png" alt="image-20200811203209704"> </p><h1 id="模板数据填充"><a href="#模板数据填充" class="headerlink" title="模板数据填充"></a>模板数据填充</h1><h2 id="Map集合数据填充"><a href="#Map集合数据填充" class="headerlink" title="Map集合数据填充"></a>Map集合数据填充</h2><h3 id="需求说明-1"><a href="#需求说明-1" class="headerlink" title="需求说明"></a>需求说明</h3><blockquote><p>要完成如下效果,  注意: 页面上的数据要通过后台动态传递</p></blockquote><p><img data-src="/assets/image-20200709143929324.png" alt="image-20200709143929324"> </p><h3 id="制作模板"><a href="#制作模板" class="headerlink" title="制作模板"></a>制作模板</h3><p><img data-src="/assets/image-20200811204910541.png" alt="image-20200811204910541"> </p><h3 id="填充数据"><a href="#填充数据" class="headerlink" title="填充数据"></a>填充数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/exportPdf2"</span>, name = <span class="string">"测试"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exportPdf2</span><span class="params">(String id)</span> <span class="keyword">throws</span> JRException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1. 获取模板</span></span><br><span class="line">    String realPath = session.getServletContext().getRealPath(<span class="string">"/jasper/demo2.jasper"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2  向模板填充数据</span></span><br><span class="line">    HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"username"</span>, <span class="string">"安妮"</span>);</span><br><span class="line">    map.put(<span class="string">"age"</span>, <span class="string">"18"</span>);</span><br><span class="line">    map.put(<span class="string">"address"</span>, <span class="string">"家里蹲"</span>);</span><br><span class="line">    map.put(<span class="string">"company"</span>, <span class="string">"腾讯"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    JRDataSource dataSource = <span class="keyword">new</span> JREmptyDataSource();</span><br><span class="line">    JasperPrint jasperPrint = JasperFillManager.fillReport(realPath, map, dataSource);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.输出到浏览器</span></span><br><span class="line">    JasperExportManager.exportReportToPdfStream(jasperPrint, response.getOutputStream());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="List集合数据填充"><a href="#List集合数据填充" class="headerlink" title="List集合数据填充"></a>List集合数据填充</h2><h3 id="需求说明-2"><a href="#需求说明-2" class="headerlink" title="需求说明"></a>需求说明</h3><blockquote><p>要完成如下效果,  注意: 页面上的数据要通过后台动态传递</p></blockquote><p><img data-src="/assets/image-20200709144050594.png" alt="image-20200709144050594"> </p><h3 id="制作模板-1"><a href="#制作模板-1" class="headerlink" title="制作模板"></a>制作模板</h3><p><img data-src="/assets/image-20200811211507727.png" alt="image-20200811211507727"> </p><h3 id="填充数据-1"><a href="#填充数据-1" class="headerlink" title="填充数据"></a>填充数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/exportPdf3"</span>, name = <span class="string">"测试"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exportPdf3</span><span class="params">(String id)</span> <span class="keyword">throws</span> JRException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1. 获取模板</span></span><br><span class="line">    String realPath = session.getServletContext().getRealPath(<span class="string">"/jasper/demo3.jasper"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2  向模板填充数据</span></span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"userName"</span>, <span class="string">"安妮"</span> + i);</span><br><span class="line">        map.put(<span class="string">"email"</span>, <span class="string">"18"</span> + i);</span><br><span class="line">        map.put(<span class="string">"deptName"</span>, <span class="string">"家里蹲"</span> + i);</span><br><span class="line">        map.put(<span class="string">"companyName"</span>, <span class="string">"腾讯"</span> + i);</span><br><span class="line"></span><br><span class="line">        list.add(map);</span><br><span class="line">    &#125;</span><br><span class="line">    JRDataSource dataSource = <span class="keyword">new</span> JRBeanCollectionDataSource(list);</span><br><span class="line"></span><br><span class="line">    JasperPrint jasperPrint = JasperFillManager.fillReport(realPath, <span class="keyword">new</span> HashMap&lt;&gt;(), dataSource);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.输出到浏览器</span></span><br><span class="line">    JasperExportManager.exportReportToPdfStream(jasperPrint, response.getOutputStream());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="报运单详情PDF生成"><a href="#报运单详情PDF生成" class="headerlink" title="报运单详情PDF生成"></a>报运单详情PDF生成</h1><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p><img data-src="/assets/image-20200813104549638.png" alt="image-20200813104549638"> </p><h2 id="导入模板-已提供"><a href="#导入模板-已提供" class="headerlink" title="导入模板(已提供)"></a>导入模板(已提供)</h2><p><img data-src="/assets/image-20200813104602900.png" alt="image-20200813104602900"> </p><h2 id="数据填充"><a href="#数据填充" class="headerlink" title="数据填充"></a>数据填充</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/exportPdf"</span>, name = <span class="string">"报运单下载"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exportPdf</span><span class="params">(String id)</span> <span class="keyword">throws</span> JRException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//0. 获取模板</span></span><br><span class="line">    String realPath = session.getServletContext().getRealPath(<span class="string">"/jasper/export.jasper"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 获取数据 条件 报运单id    结果 报运单信息和报运单下货物信息</span></span><br><span class="line">    <span class="comment">//1-1) 报运单信息</span></span><br><span class="line">    Export export = exportService.findById(id);</span><br><span class="line">    Map&lt;String, Object&gt; map = BeanUtil.beanToMap(export);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1-2) 货物信息</span></span><br><span class="line">    List&lt;ExportProduct&gt; list = exportProductService.findByExportId(id);</span><br><span class="line">    JRDataSource dataSource = <span class="keyword">new</span> JRBeanCollectionDataSource(list);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2  向模板填充数据</span></span><br><span class="line">    JasperPrint jasperPrint = JasperFillManager.fillReport(realPath, map, dataSource);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.输出到浏览器</span></span><br><span class="line">    JasperExportManager.exportReportToPdfStream(jasperPrint, response.getOutputStream());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="pdf下载"><a href="#pdf下载" class="headerlink" title="pdf下载"></a>pdf下载</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/exportPdf"</span>, name = <span class="string">"报运单下载"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exportPdf</span><span class="params">(String id)</span> <span class="keyword">throws</span> JRException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//0. 获取模板</span></span><br><span class="line">    String realPath = session.getServletContext().getRealPath(<span class="string">"/jasper/export.jasper"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 获取数据 条件 报运单id    结果 报运单信息和报运单下货物信息</span></span><br><span class="line">    <span class="comment">//1-1) 报运单信息</span></span><br><span class="line">    Export export = exportService.findById(id);</span><br><span class="line">    Map&lt;String, Object&gt; map = BeanUtil.beanToMap(export);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1-2) 货物信息</span></span><br><span class="line">    List&lt;ExportProduct&gt; list = exportProductService.findByExportId(id);</span><br><span class="line">    JRDataSource dataSource = <span class="keyword">new</span> JRBeanCollectionDataSource(list);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2  向模板填充数据</span></span><br><span class="line">    JasperPrint jasperPrint = JasperFillManager.fillReport(realPath, map, dataSource);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.输出到浏览器</span></span><br><span class="line">    <span class="comment">//JasperExportManager.exportReportToPdfStream(jasperPrint, response.getOutputStream());</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 文件下载</span></span><br><span class="line">    ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">    JasperExportManager.exportReportToPdfStream(jasperPrint, byteArrayOutputStream);</span><br><span class="line">    DownloadUtil.download(byteArrayOutputStream,response,<span class="string">"报运单.pdf"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;消息中间件&quot;&gt;&lt;a href=&quot;#消息中间件&quot; class=&quot;headerlink&quot; title=&quot;消息中间件&quot;&gt;&lt;/a&gt;消息中间件&lt;/h1&gt;&lt;p&gt;消息队列中间件是分布式系统中重要的组件，主要解决&lt;strong&gt;异步消息，应用解耦，流量削峰等&lt;/strong&gt;问题，实现高性能，高可用，可伸缩和最终一致性架构。&lt;/p&gt;
&lt;p&gt;对于消息中间件，常见的角色大致也就有&lt;strong&gt;Producer&lt;/strong&gt;（生产者）、&lt;strong&gt;Consumer&lt;/strong&gt;（消费者）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="其他" scheme="http://sunmoon.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="消息中间件" scheme="http://sunmoon.com/tags/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
      <category term="RabbitMQ" scheme="http://sunmoon.com/tags/RabbitMQ/"/>
    
      <category term="Spring AMQP" scheme="http://sunmoon.com/tags/Spring-AMQP/"/>
    
      <category term="PDF报表" scheme="http://sunmoon.com/tags/PDF%E6%8A%A5%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>Echarts&amp;发送邮件</title>
    <link href="http://sunmoon.com/2020/10/21/Echarts-%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
    <id>http://sunmoon.com/2020/10/21/Echarts-%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</id>
    <published>2020-10-21T13:01:06.000Z</published>
    <updated>2020-10-21T13:04:13.601Z</updated>
    
    <content type="html"><![CDATA[<h1 id="出口报运"><a href="#出口报运" class="headerlink" title="出口报运"></a>出口报运</h1><h2 id="调用流程分析"><a href="#调用流程分析" class="headerlink" title="调用流程分析"></a>调用流程分析</h2><p><img data-src="/assets/image-20201021085324793.png" alt="image-20201021085324793"></p><a id="more"></a><h2 id="海关报运平台搭建"><a href="#海关报运平台搭建" class="headerlink" title="海关报运平台搭建"></a>海关报运平台搭建</h2><h3 id="导入sql脚本到数据库"><a href="#导入sql脚本到数据库" class="headerlink" title="导入sql脚本到数据库"></a>导入sql脚本到数据库</h3><p><img data-src="/assets/image-20200707182940750.png" alt="image-20201021085324793"></p><h3 id="导入海关程序"><a href="#导入海关程序" class="headerlink" title="导入海关程序"></a>导入海关程序</h3><p>将jk_export导入到export_parent的同级目录,  然后使用idea导入此程序</p><p> <img data-src="/assets/image-20200707184848096.png" alt="image-20200707185218626"></p><h3 id="部署海关程序"><a href="#部署海关程序" class="headerlink" title="部署海关程序"></a>部署海关程序</h3><p><img data-src="/assets/image-20200707185218626.png" alt="image-20200707185218626"></p><h3 id="程序使用地址"><a href="#程序使用地址" class="headerlink" title="程序使用地址"></a>程序使用地址</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">电子报运提交（post）</span><br><span class="line"><span class="code">http://localhost:5003/ws/export/user</span></span><br><span class="line">电子保存结果查询（get）</span><br><span class="line"><span class="code">http://localhost:5003/ws/export/user/报运单id</span></span><br></pre></td></tr></table></figure><h2 id="发送电子报运"><a href="#发送电子报运" class="headerlink" title="发送电子报运"></a>发送电子报运</h2><h3 id="导入海关提供的标准对象"><a href="#导入海关提供的标准对象" class="headerlink" title="导入海关提供的标准对象"></a>导入海关提供的标准对象</h3><p><img data-src="/assets/image-20200707185711085.png" alt="image-20200707185711085"> </p><h3 id="ExportController"><a href="#ExportController" class="headerlink" title="ExportController"></a>ExportController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/exportE"</span>, name = <span class="string">"海关电子报运"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">exportE</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">    exportService.exportE(id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重定向到list方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/cargo/export/list.do"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ExportService"><a href="#ExportService" class="headerlink" title="ExportService"></a>ExportService</h3><p><img data-src="/assets/image-20201021091214531.png" alt="image-20201021091214531"> </p><p><img data-src="/assets/image-20201021091724593.png" alt="image-20201021091724593"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exportE</span><span class="params">(String id)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exportE</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1. 查询报运单信息,封装成ExportVo</span></span><br><span class="line">    Export export = exportDao.selectByPrimaryKey(id);</span><br><span class="line">    ExportVo exportVo = <span class="keyword">new</span> ExportVo();</span><br><span class="line">    BeanUtils.copyProperties(export, exportVo);</span><br><span class="line">    exportVo.setExportId(id);</span><br><span class="line">    exportVo.setExportDate(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 查询报运单下的货物信息, 封装成ExportProductVo</span></span><br><span class="line">    ExportProductExample exportProductExample = <span class="keyword">new</span> ExportProductExample();</span><br><span class="line">    exportProductExample.createCriteria().andExportIdEqualTo(id);</span><br><span class="line">    List&lt;ExportProduct&gt; exportProductList = exportProductDao.selectByExample(exportProductExample);</span><br><span class="line">    <span class="keyword">for</span> (ExportProduct exportProduct : exportProductList) &#123;</span><br><span class="line">        ExportProductVo exportProductVo = <span class="keyword">new</span> ExportProductVo();</span><br><span class="line">        BeanUtils.copyProperties(exportProduct, exportProductVo);</span><br><span class="line">        exportProductVo.setExportProductId(exportProduct.getId());</span><br><span class="line"></span><br><span class="line">        exportVo.getProducts().add(exportProductVo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 调用海关平台,然后将ExportVo发送出去</span></span><br><span class="line">    WebClient.create(<span class="string">"http://localhost:5003/ws/export/user"</span>).post(exportVo);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 修改当前报运单的状态(0-草稿  1-已上报  2-已报运)</span></span><br><span class="line">    export.setState(<span class="number">1</span>);</span><br><span class="line">    exportDao.updateByPrimaryKeySelective(export);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查询报运结果"><a href="#查询报运结果" class="headerlink" title="查询报运结果"></a>查询报运结果</h2><h3 id="ExportController-1"><a href="#ExportController-1" class="headerlink" title="ExportController"></a>ExportController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/findExportResult"</span>, name = <span class="string">"查询海关电子报运结果"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">findExportResult</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">    exportService.findExportResult(id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重定向到list方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/cargo/export/list.do"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ExportService-1"><a href="#ExportService-1" class="headerlink" title="ExportService"></a>ExportService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findExportResult</span><span class="params">(String id)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findExportResult</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//1.调用接口查询报运单审核状态</span></span><br><span class="line">        ExportResult exportResult = WebClient.create(<span class="string">"http://localhost:5003/ws/export/user/"</span> + id).get(ExportResult<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 根据exportResult对象更新报运单中的信息</span></span><br><span class="line">        Export export = <span class="keyword">new</span> Export();</span><br><span class="line">        export.setId(id);</span><br><span class="line">        export.setState(exportResult.getState());</span><br><span class="line">        export.setRemark(exportResult.getRemark());</span><br><span class="line">        exportDao.updateByPrimaryKeySelective(export);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 根据exportResult对象中的products更新报运单中的信息</span></span><br><span class="line">        <span class="keyword">for</span> (ExportProductResult exportProductResult : exportResult.getProducts()) &#123;</span><br><span class="line">            ExportProduct exportProduct = <span class="keyword">new</span> ExportProduct();</span><br><span class="line">            exportProduct.setId(exportProductResult.getExportProductId());</span><br><span class="line">            exportProduct.setTax(exportProductResult.getTax());</span><br><span class="line">            exportProductDao.updateByPrimaryKeySelective(exportProduct);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        System.out.println(<span class="string">"查询海关数据失败,请检查"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="整合定时任务"><a href="#整合定时任务" class="headerlink" title="整合定时任务"></a>整合定时任务</h2><blockquote><p>要求每天的1,9,17点进行查询</p></blockquote><h3 id="创建定时任务的类"><a href="#创建定时任务的类" class="headerlink" title="创建定时任务的类"></a>创建定时任务的类</h3><p>在export_cargo模块下创建定时任务的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExportJob</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ExportDao exportDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ExportProductDao exportProductDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateExportResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1 查询状态为1的报运单</span></span><br><span class="line">        ExportExample exportExample = <span class="keyword">new</span> ExportExample();</span><br><span class="line">        exportExample.createCriteria().andStateEqualTo(<span class="number">1L</span>);</span><br><span class="line">        List&lt;Export&gt; exportList = exportDao.selectByExample(exportExample);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Export export : exportList) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//2 调用海关平台查询</span></span><br><span class="line">                ExportResult exportResult = WebClient.create(<span class="string">"http://localhost:5003/ws/export/user/"</span> + export.getId()).get(ExportResult<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//3 更新报运单状态</span></span><br><span class="line">                export.setId(exportResult.getExportId());<span class="comment">//id</span></span><br><span class="line">                export.setState(exportResult.getState());<span class="comment">//状态</span></span><br><span class="line">                export.setRemark(exportResult.getRemark());<span class="comment">//备注</span></span><br><span class="line">                exportDao.updateByPrimaryKeySelective(export);<span class="comment">//一定支持动态SQL</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//4 更新报运单下货物的税</span></span><br><span class="line">                <span class="keyword">for</span> (ExportProductResult product : exportResult.getProducts()) &#123;</span><br><span class="line">                    ExportProduct exportProduct = <span class="keyword">new</span> ExportProduct();</span><br><span class="line">                    exportProduct.setId(product.getExportProductId());</span><br><span class="line">                    exportProduct.setTax(product.getTax());</span><br><span class="line"></span><br><span class="line">                    exportProductDao.updateByPrimaryKeySelective(exportProduct);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                System.out.println(<span class="string">"未查到相关信息"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加定时任务的配置"><a href="#添加定时任务的配置" class="headerlink" title="添加定时任务的配置"></a>添加定时任务的配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--1.配置Job：自定义java类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myJob"</span> <span class="attr">class</span>=<span class="string">"com.itheima.service.cargo.job.ExportJob"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--2.配置JobDetail：执行任务来的方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jobDetail"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--1.确定任务类--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetObject"</span> <span class="attr">ref</span>=<span class="string">"myJob"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--2.确认任务的方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetMethod"</span> <span class="attr">value</span>=<span class="string">"updateExportResult"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--3.配置Trigger：根据时间规则，触发方法执行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"trigger"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.CronTriggerFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--1.指定时间规则--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cronExpression"</span> <span class="attr">value</span>=<span class="string">"0 0 1,9,17 * * ? *"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--2.指定JobDetail--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jobDetail"</span> <span class="attr">ref</span>=<span class="string">"jobDetail"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--4.配置Scheduler：统一管理配置trigger--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"scheduler"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.SchedulerFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"triggers"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"trigger"</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="图表报表工具-Echarts"><a href="#图表报表工具-Echarts" class="headerlink" title="图表报表工具 Echarts"></a>图表报表工具 Echarts</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>​    Echarts 是由百度前端团队开发的一款开源的基于js图形报表组件，可以流畅的运行在 PC 和移动设备上，兼容当前绝大部分浏览器，底层依赖轻量级的矢量图形库 ZRender，提供直观，交互丰富，可高度个性化定制的数据可视化图表。  </p><p>2018年3月全球著名开源社区Apache宣布百度ECharts进入Apache孵化器。</p><p>官网地址：<a href="https://echarts.apache.org/" target="_blank" rel="noopener">https://echarts.apache.org/</a></p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><ol><li>下载echarts组件</li><li>html引入echarts组件</li><li>div容器（宽、高）</li><li>通过js初始化echarts图形报表</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.引入 ECharts 文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"plugins/echarts/echarts.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2. 为 ECharts 准备一个具备大小（宽高）的 DOM --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span> <span class="attr">style</span>=<span class="string">"width: 600px;height:400px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 基于准备好的dom，初始化echarts实例</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> myChart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'main'</span>));</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 指定图表的配置项和数据</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> option = &#123;</span></span><br><span class="line">        title: &#123;</span><br><span class="line"><span class="actionscript">            text: <span class="string">'ECharts 入门示例'</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        tooltip: &#123;&#125;,</span><br><span class="line">        legend: &#123;</span><br><span class="line"><span class="actionscript">            data:[<span class="string">'销量'</span>]</span></span><br><span class="line">        &#125;,</span><br><span class="line">        xAxis: &#123;</span><br><span class="line"><span class="actionscript">            data: [<span class="string">"衬衫"</span>,<span class="string">"羊毛衫"</span>,<span class="string">"雪纺衫"</span>,<span class="string">"裤子"</span>,<span class="string">"高跟鞋"</span>,<span class="string">"袜子"</span>]</span></span><br><span class="line">        &#125;,</span><br><span class="line">        yAxis: &#123;&#125;,</span><br><span class="line">        series: [&#123;</span><br><span class="line"><span class="actionscript">            name: <span class="string">'销量'</span>,</span></span><br><span class="line"><span class="actionscript">            type: <span class="string">'bar'</span>,</span></span><br><span class="line">            data: [5, 20, 36, 10, 10, 201]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 使用刚指定的配置项和数据显示图表。</span></span></span><br><span class="line">    myChart.setOption(option);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>==我们学习echarts发现基于快速入门的代码，只需要修改option数据，就可以完成其他的图表展示了==</p><p><img data-src="/assets/image-20201021101534728.png" alt="image-20201021101534728"></p><h1 id="统计分析模块"><a href="#统计分析模块" class="headerlink" title="统计分析模块"></a>统计分析模块</h1><h2 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h2><ul><li>厂家销售统计 （统计每个厂家的销售额）</li><li>产品的销量排行榜（统计产品销售数量前10名厂家）</li><li>系统访问压力图（统计每个小时访问系统的人员数量）</li></ul><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h3><p><img data-src="/assets/image-20200707231144692.png" alt="image-20200707231144692"> </p><h3 id="创建模块-建立依赖"><a href="#创建模块-建立依赖" class="headerlink" title="创建模块,建立依赖"></a>创建模块,建立依赖</h3><p><img data-src="/assets/image-20200707231646308.png" alt="image-20200707231144692"> </p><h3 id="复制代码"><a href="#复制代码" class="headerlink" title="复制代码"></a>复制代码</h3><p><img data-src="/assets/image-20200707232340454.png" alt="image-20200707231144692"></p><h3 id="复制配置文件"><a href="#复制配置文件" class="headerlink" title="复制配置文件"></a>复制配置文件</h3><p><img data-src="/assets/image-20200707232545527.png" alt="image-20200707232545527"> </p><h3 id="添加启动文件"><a href="#添加启动文件" class="headerlink" title="添加启动文件"></a>添加启动文件</h3><p><img data-src="/assets/image-20200707233356651.png" alt="image-20200707233356651"> </p><h3 id="实现页面跳转"><a href="#实现页面跳转" class="headerlink" title="实现页面跳转"></a>实现页面跳转</h3><p>在<code>export_manager_web</code>模块的<code>com.itheima.web.controller.stat</code>包下建立<code>StatController</code>类            </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/stat"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StatController</span> <span class="keyword">extends</span> <span class="title">BaseController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span></span><br><span class="line">    <span class="keyword">private</span> StatService statService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/toCharts"</span>, name = <span class="string">"跳转图形页面"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toCharts</span><span class="params">(String chartsType)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/stat/stat-"</span> + chartsType;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="访问测试-略"><a href="#访问测试-略" class="headerlink" title="访问测试(略)"></a>访问测试(略)</h3><h2 id="厂家销售统计"><a href="#厂家销售统计" class="headerlink" title="厂家销售统计"></a>厂家销售统计</h2><h3 id="StatController"><a href="#StatController" class="headerlink" title="StatController"></a>StatController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/factoryCharts"</span>, name = <span class="string">"厂家销量统计"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Map&gt; <span class="title">factoryCharts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> statService.findFactoryCharts(getCompanyId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="StatDao-xml"><a href="#StatDao-xml" class="headerlink" title="StatDao.xml"></a>StatDao.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findFactoryCharts"</span> <span class="attr">resultType</span>=<span class="string">"java.util.Map"</span>&gt;</span></span><br><span class="line">    SELECT factory_name AS `name`,SUM(amount) AS `value`</span><br><span class="line">        FROM `co_contract_product`</span><br><span class="line">        WHERE company_id = #&#123;companyId&#125;</span><br><span class="line">        GROUP BY factory_name</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="stat-factory-jsp"><a href="#stat-factory-jsp" class="headerlink" title="stat-factory.jsp"></a>stat-factory.jsp</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="comment">// 基于准备好的dom，初始化echarts实例</span></span><br><span class="line">    <span class="keyword">var</span> myChart = echarts.init(document.getElementById(<span class="string">'main'</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定图表的配置项和数据</span></span><br><span class="line">    $.get(<span class="string">'/stat/factoryCharts.do'</span>).done(function (data) &#123;</span><br><span class="line">        <span class="keyword">var</span> titles = [];</span><br><span class="line">        <span class="keyword">for</span> (let e of data) &#123;</span><br><span class="line">            titles.push(e.name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用刚指定的配置项和数据显示图表。</span></span><br><span class="line">        myChart.setOption(&#123;</span><br><span class="line">            title: &#123;</span><br><span class="line">                text: <span class="string">'厂家销售统计'</span>,</span><br><span class="line">                subtext: <span class="string">''</span>,</span><br><span class="line">                x: <span class="string">'center'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            legend: &#123;</span><br><span class="line">                orient: <span class="string">'vertical'</span>,</span><br><span class="line">                left: <span class="string">'left'</span>,</span><br><span class="line">                data: titles</span><br><span class="line">            &#125;,</span><br><span class="line">            tooltip: &#123;</span><br><span class="line">                trigger: <span class="string">'item'</span>,</span><br><span class="line">                formatter: <span class="string">"&#123;a&#125; &lt;br/&gt;&#123;b&#125; : &#123;c&#125; (&#123;d&#125;%)"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            series: [</span><br><span class="line">                &#123;</span><br><span class="line">                    name: <span class="string">'访问来源'</span>,</span><br><span class="line">                    type: <span class="string">'pie'</span>,</span><br><span class="line">                    radius: <span class="string">'55%'</span>,</span><br><span class="line">                    center: [<span class="string">'50%'</span>, <span class="string">'60%'</span>],</span><br><span class="line">                    data: data,</span><br><span class="line">                    itemStyle: &#123;</span><br><span class="line">                        emphasis: &#123;</span><br><span class="line">                            shadowBlur: <span class="number">10</span>,</span><br><span class="line">                            shadowOffsetX: <span class="number">0</span>,</span><br><span class="line">                            shadowColor: <span class="string">'rgba(0, 0, 0, 0.5)'</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="产品的销量排行榜"><a href="#产品的销量排行榜" class="headerlink" title="产品的销量排行榜"></a>产品的销量排行榜</h2><h3 id="StatController-1"><a href="#StatController-1" class="headerlink" title="StatController"></a>StatController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/sellCharts"</span>, name = <span class="string">"产品销售统计"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Map&gt; <span class="title">sellCharts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> statService.findSellCharts(getCompanyId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="StatDao-xml-1"><a href="#StatDao-xml-1" class="headerlink" title="StatDao.xml"></a>StatDao.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findSellCharts"</span> <span class="attr">resultType</span>=<span class="string">"java.util.Map"</span>&gt;</span></span><br><span class="line">    SELECT product_no as `name` , SUM(cnumber) AS `value`</span><br><span class="line">        FROM `co_contract_product`</span><br><span class="line">        WHERE company_id = #&#123;companyId&#125;</span><br><span class="line">        GROUP BY product_no</span><br><span class="line">        ORDER BY `value` DESC</span><br><span class="line">        LIMIT 10</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="stat-sell-jsp"><a href="#stat-sell-jsp" class="headerlink" title="stat-sell.jsp"></a>stat-sell.jsp</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="comment">// 基于准备好的dom，初始化echarts实例</span></span><br><span class="line">    <span class="keyword">var</span> myChart = echarts.init(document.getElementById(<span class="string">'main'</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    $.get(<span class="string">'/stat/sellCharts.do'</span>).done(function (data) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> titles = [];</span><br><span class="line">        <span class="keyword">var</span> values = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (let e of data) &#123;</span><br><span class="line">            titles.push(e.name);</span><br><span class="line">            values.push(e.value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用刚指定的配置项和数据显示图表。</span></span><br><span class="line">        myChart.setOption(</span><br><span class="line">            option = &#123;</span><br><span class="line">                title: &#123;</span><br><span class="line">                    left: <span class="string">'center'</span>,</span><br><span class="line">                    text: <span class="string">'产品销量排行'</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                xAxis: &#123;</span><br><span class="line">                    type: <span class="string">'category'</span>,</span><br><span class="line">                    data: titles,</span><br><span class="line">                    axisLabel: &#123;</span><br><span class="line">                        rotate: <span class="number">70</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                yAxis: &#123;</span><br><span class="line">                    type: <span class="string">'value'</span></span><br><span class="line">                &#125;,</span><br><span class="line">                series: [&#123;</span><br><span class="line">                    data: values,</span><br><span class="line">                    type: <span class="string">'bar'</span></span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="系统访问压力图"><a href="#系统访问压力图" class="headerlink" title="系统访问压力图"></a>系统访问压力图</h2><h3 id="StatController-2"><a href="#StatController-2" class="headerlink" title="StatController"></a>StatController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/onlineCharts"</span>, name = <span class="string">"在线人数统计"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Map&gt; <span class="title">onlineCharts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> statService.findOnlineCharts(getCompanyId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="StatDao-xml-2"><a href="#StatDao-xml-2" class="headerlink" title="StatDao.xml"></a>StatDao.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--系统访问压力图--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findOnlineCharts"</span> <span class="attr">resultType</span>=<span class="string">"java.util.Map"</span>&gt;</span></span><br><span class="line">    SELECT a.A1 AS `name`,IFNULL(b.`value`,0) AS `value`</span><br><span class="line">        FROM `st_online_info` AS a</span><br><span class="line">        LEFT JOIN</span><br><span class="line">            (SELECT DATE_FORMAT(`time`,"%H") AS  mytime,COUNT(1) AS `value` FROM `st_sys_log`</span><br><span class="line">            WHERE company_id = #&#123;companyId&#125;</span><br><span class="line">            GROUP BY mytime) AS b</span><br><span class="line">        ON a.A1 = b.mytime</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="stat-online-jsp"><a href="#stat-online-jsp" class="headerlink" title="stat-online.jsp"></a>stat-online.jsp</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="comment">// 基于准备好的dom，初始化echarts实例</span></span><br><span class="line">    <span class="keyword">var</span> myChart = echarts.init(document.getElementById(<span class="string">'main'</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    $.get(<span class="string">'/stat/sellCharts.do'</span>).done(function (data) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> titles = [];</span><br><span class="line">        <span class="keyword">var</span> values = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (let e of data) &#123;</span><br><span class="line">            titles.push(e.name);</span><br><span class="line">            values.push(e.value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用刚指定的配置项和数据显示图表。</span></span><br><span class="line">        myChart.setOption(</span><br><span class="line">            option = &#123;</span><br><span class="line">                title: &#123;</span><br><span class="line">                    left: <span class="string">'center'</span>,</span><br><span class="line">                    text: <span class="string">'产品销量排行'</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                xAxis: &#123;</span><br><span class="line">                    type: <span class="string">'category'</span>,</span><br><span class="line">                    data: titles,</span><br><span class="line">                    axisLabel: &#123;</span><br><span class="line">                        rotate: <span class="number">70</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                yAxis: &#123;</span><br><span class="line">                    type: <span class="string">'value'</span></span><br><span class="line">                &#125;,</span><br><span class="line">                series: [&#123;</span><br><span class="line">                    data: values,</span><br><span class="line">                    type: <span class="string">'bar'</span></span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="发送邮件"><a href="#发送邮件" class="headerlink" title="发送邮件"></a>发送邮件</h1><h2 id="邮件传输的过程"><a href="#邮件传输的过程" class="headerlink" title="邮件传输的过程"></a>邮件传输的过程</h2><ul><li><p>SMTP邮件服务器：发送邮件</p></li><li><p>POP3/IMAP邮件服务器：接收邮件</p><p>  <img data-src="/assets/image-20200811124725610.png" alt="image-20200811124725610"> </p></li></ul><p>POP3/IMAP对比:</p><p><img data-src="/assets/image-20200908210036559.png" alt=""> </p><h2 id="发送邮件准备工作"><a href="#发送邮件准备工作" class="headerlink" title="发送邮件准备工作"></a>发送邮件准备工作</h2><h3 id="引入坐标-已加入"><a href="#引入坐标-已加入" class="headerlink" title="引入坐标(已加入)"></a>引入坐标(已加入)</h3><p><img data-src="/assets/image-20200708092122257.png" alt="image-20200708092122257"> </p><h3 id="申请授权码"><a href="#申请授权码" class="headerlink" title="申请授权码"></a>申请授权码</h3><p><img data-src="/assets/image-20200708094441079.png" alt="image-20200708094441079"> </p><h3 id="加入工具类-并修改"><a href="#加入工具类-并修改" class="headerlink" title="加入工具类,并修改"></a>加入工具类,并修改</h3><p><img data-src="/assets/image-20200708093243089.png" alt="image-20200708093243089"> </p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p><img data-src="/assets/image-20200708095518203.png" alt="image-20200708095518203"> </p><h2 id="实现发送邮件功能"><a href="#实现发送邮件功能" class="headerlink" title="实现发送邮件功能"></a>实现发送邮件功能</h2><p>修改<code>UserController</code>，添加保存用户后发送一封邮件的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/edit"</span>, name = <span class="string">"用户新增或编辑"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">edit</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果传入的密码不是空,加密</span></span><br><span class="line">    String oldPassword = user.getPassword();</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isNotEmpty(oldPassword)) &#123;</span><br><span class="line">        String newPassword = <span class="keyword">new</span> Md5Hash(oldPassword, user.getEmail(), <span class="number">2</span>).toString();</span><br><span class="line">        user.setPassword(newPassword);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(user.getId())) &#123;</span><br><span class="line">        <span class="comment">//1. 设置主键</span></span><br><span class="line">        user.setId(UUID.randomUUID().toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 设置企业信息</span></span><br><span class="line">        user.setCompanyId(getCompanyId());</span><br><span class="line">        user.setCompanyName(getCompanyName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3 用户保存成功</span></span><br><span class="line">        userService.save(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4 开始发送邮件</span></span><br><span class="line">        String to = user.getEmail();</span><br><span class="line">        String title = <span class="string">"saas平台--用户新增成功"</span>;</span><br><span class="line">        String content = <span class="string">"恭喜您,您的账号已经在saas平台开通成功,请使用当前邮箱作用账号,使用"</span> + oldPassword + <span class="string">"作为密码进行登录"</span>;</span><br><span class="line">        MailUtil.sendMail(to, title, content);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        userService.update(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重定向到list方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/system/user/list.do"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="发送邮件功能问题分析"><a href="#发送邮件功能问题分析" class="headerlink" title="发送邮件功能问题分析"></a>发送邮件功能问题分析</h2><p><img data-src="/assets/image-20201021151435733.png" alt="image-20201021151435733"> </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;出口报运&quot;&gt;&lt;a href=&quot;#出口报运&quot; class=&quot;headerlink&quot; title=&quot;出口报运&quot;&gt;&lt;/a&gt;出口报运&lt;/h1&gt;&lt;h2 id=&quot;调用流程分析&quot;&gt;&lt;a href=&quot;#调用流程分析&quot; class=&quot;headerlink&quot; title=&quot;调用流程分析&quot;&gt;&lt;/a&gt;调用流程分析&lt;/h2&gt;&lt;p&gt;&lt;img data-src=&quot;/assets/image-20201021085324793.png&quot; alt=&quot;image-20201021085324793&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="其他" scheme="http://sunmoon.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="Echarts" scheme="http://sunmoon.com/tags/Echarts/"/>
    
      <category term="发送邮件" scheme="http://sunmoon.com/tags/%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>WebService&amp;ApacheCXF&amp;打断设计思想</title>
    <link href="http://sunmoon.com/2020/10/20/WebService-ApacheCXF-%E6%89%93%E6%96%AD%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/"/>
    <id>http://sunmoon.com/2020/10/20/WebService-ApacheCXF-%E6%89%93%E6%96%AD%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/</id>
    <published>2020-10-20T10:17:07.000Z</published>
    <updated>2020-10-20T11:34:35.249Z</updated>
    
    <content type="html"><![CDATA[<h1 id="合同管理"><a href="#合同管理" class="headerlink" title="合同管理"></a>合同管理</h1><h2 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h2><p>实现合同管理列表的查询，只查询<code>购销合同状态为已提交(state=1)</code>的状态的数据</p><p><img data-src="/assets/image-20200710004802779.png" alt="image-20200710004802779"></p><a id="more"></a><h2 id="ExportController"><a href="#ExportController" class="headerlink" title="ExportController"></a>ExportController</h2><p>在<code>export_manager_web</code>模块下的<code>com.itheima.web.controller.cargo</code>包下创建<code>ExportController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/cargo/export"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExportController</span> <span class="keyword">extends</span> <span class="title">BaseController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span></span><br><span class="line">    <span class="keyword">private</span> ContractService contractService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/contractList"</span>, name = <span class="string">"已提交状态的合同列表查询"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @RequestParam(defaultValue = <span class="string">"1"</span>, name = <span class="string">"page"</span>)</span> Integer pageNum,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(defaultValue = <span class="string">"10"</span>)</span> Integer pageSize) </span>&#123;</span><br><span class="line"></span><br><span class="line">        ContractExample contractExample = <span class="keyword">new</span> ContractExample();</span><br><span class="line">        ContractExample.Criteria criteria = contractExample.createCriteria();</span><br><span class="line">        criteria.andCompanyIdEqualTo(getCompanyId());<span class="comment">//企业id</span></span><br><span class="line">        criteria.andStateEqualTo(<span class="number">1</span>);<span class="comment">//状态提交</span></span><br><span class="line"></span><br><span class="line">        PageInfo pageInfo = contractService.findByPage(pageNum, pageSize, contractExample);</span><br><span class="line">        request.setAttribute(<span class="string">"page"</span>, pageInfo);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/cargo/export/export-contractList"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="货代整体流程"><a href="#货代整体流程" class="headerlink" title="货代整体流程"></a>货代整体流程</h1><h2 id="货代整体流程说明"><a href="#货代整体流程说明" class="headerlink" title="货代整体流程说明"></a>货代整体流程说明</h2><p>平台的大体流程是这样的: 合同签订–电子海关报运–货物装箱–委托运输–发票催款–财务记账</p><p><img data-src="/assets/image-20201020085857512.png" alt="image-20201020085857512"> </p><h2 id="打断设计思想"><a href="#打断设计思想" class="headerlink" title="打断设计思想"></a>打断设计思想</h2><p>当关联查询的层级大于4层时，就要考虑打断设计，这样可以借助<strong>跳跃查询</strong>实现快速查询。</p><ul><li>一对一：多张表共用主键（id）</li><li>一对多：在主表中通过创建一个打断字段，存储内容是从表的主键（id）集合</li></ul><p><img data-src="/assets/image-20201020091240825.png" alt="image-20201020091240825"></p><h1 id="报运单管理"><a href="#报运单管理" class="headerlink" title="报运单管理"></a>报运单管理</h1><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><h3 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h3><p>SaaS货代平台是通过国际物流运输把货物运国外，这个过程需要经过海关人员的审批。</p><p>所以公司对于出口的产品就要进行出口报运，就需要形成出口报运单，将来公司的报运人员，需要拿着出口报运单到海关进行审批。</p><p>而出口报运单需要打印出来，打印的数据来自于数据库表。</p><h3 id="数据模型分析"><a href="#数据模型分析" class="headerlink" title="数据模型分析"></a>数据模型分析</h3><p><img data-src="/assets/image-20200706213910737.png" alt="image-20200706213910737"> </p><h2 id="代码复制"><a href="#代码复制" class="headerlink" title="代码复制"></a>代码复制</h2><p><img data-src="/assets/image-20200706222945755.png" alt="image-20200706222945755"> </p><h2 id="报运单列表"><a href="#报运单列表" class="headerlink" title="报运单列表"></a>报运单列表</h2><p><img data-src="/assets/image-20200710004900004.png" alt="image-20200710004900004"></p><p>修改ExportController, 新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/list"</span>, name = <span class="string">"报运单列表查询"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        @RequestParam(defaultValue = <span class="string">"1"</span>, name = <span class="string">"page"</span>)</span> Integer pageNum,</span></span><br><span class="line"><span class="function">        @<span class="title">RequestParam</span><span class="params">(defaultValue = <span class="string">"10"</span>)</span> Integer pageSize) </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ExportExample exportExample = <span class="keyword">new</span> ExportExample();</span><br><span class="line">    ExportExample.Criteria criteria = exportExample.createCriteria();</span><br><span class="line">    criteria.andCompanyIdEqualTo(getCompanyId());<span class="comment">//企业id</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    PageInfo pageInfo = exportService.findByPage(pageNum, pageSize, exportExample);</span><br><span class="line">    request.setAttribute(<span class="string">"page"</span>, pageInfo);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"/cargo/export/export-list"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="新增报运单"><a href="#新增报运单" class="headerlink" title="新增报运单"></a>新增报运单</h2><p><img data-src="/assets/image-20200710005138395.png" alt="image-20200710005138395"></p><h3 id="跳转生成报运单页面"><a href="#跳转生成报运单页面" class="headerlink" title="跳转生成报运单页面"></a>跳转生成报运单页面</h3><p>修改ExportController, 新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/toExport"</span>, name = <span class="string">"跳转报运单新增页面"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toAdd</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//回显合同id集合</span></span><br><span class="line">    request.setAttribute(<span class="string">"id"</span>, id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"/cargo/export/export-toExport"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生成报运单"><a href="#生成报运单" class="headerlink" title="生成报运单"></a>生成报运单</h3><h4 id="ExportController-1"><a href="#ExportController-1" class="headerlink" title="ExportController"></a>ExportController</h4><p><img data-src="/assets/image-20201020100304589.png" alt="image-20201020100304589"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/edit"</span>, name = <span class="string">"报运单新增"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">edit</span><span class="params">(Export export)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(export.getId())) &#123;</span><br><span class="line">        <span class="comment">//1. 设置主键</span></span><br><span class="line">        export.setId(UUID.randomUUID().toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 设置企业信息</span></span><br><span class="line">        export.setCompanyId(getCompanyId());</span><br><span class="line">        export.setCompanyName(getCompanyName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.制单时间</span></span><br><span class="line">        export.setInputDate(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 设置当前合同的状态</span></span><br><span class="line">        export.setState(<span class="number">0</span>);<span class="comment">//草稿</span></span><br><span class="line"></span><br><span class="line">        exportService.save(export);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        exportService.update(export);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重定向到list方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/cargo/export/list.do"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ExportServiceImpl"><a href="#ExportServiceImpl" class="headerlink" title="ExportServiceImpl"></a>ExportServiceImpl</h4><p><img data-src="/assets/image-20201020100925921.png" alt="image-20201020100925921"> </p><p><img data-src="/assets/image-20201020102100084.png" alt="image-20201020102100084"> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//保存</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Export export)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//=========================查询===================================//</span></span><br><span class="line">    List&lt;String&gt; contractIdList = Arrays.asList(export.getContractIds().split(<span class="string">","</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//=========================查询合同信息,封装报运单信息===================================//</span></span><br><span class="line">    <span class="comment">//1. 查询当前报运单下的合同</span></span><br><span class="line">    ContractExample contractExample = <span class="keyword">new</span> ContractExample();</span><br><span class="line">    contractExample.createCriteria().andIdIn(contractIdList);</span><br><span class="line">    List&lt;Contract&gt; contractList = contractDao.selectByExample(contractExample);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2 拼接信息</span></span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    Integer proNum = <span class="number">0</span>;</span><br><span class="line">    Integer extNum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Contract contract : contractList) &#123;</span><br><span class="line">        sb.append(contract.getContractNo()).append(<span class="string">" "</span>);</span><br><span class="line">        proNum += contract.getProNum();</span><br><span class="line">        extNum += contract.getExtNum();</span><br><span class="line">    &#125;</span><br><span class="line">    export.setCustomerContract(sb.toString());</span><br><span class="line">    export.setProNum(proNum);</span><br><span class="line">    export.setExtNum(extNum);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 执行报运单保存</span></span><br><span class="line">    exportDao.insertSelective(export);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//=========================查询合同货物信息,封装报运单货物信息===================================//</span></span><br><span class="line">    <span class="comment">//1. 先查询当前报运单下的合同中的货物</span></span><br><span class="line">    ContractProductExample contractProductExample = <span class="keyword">new</span> ContractProductExample();</span><br><span class="line">    contractProductExample.createCriteria().andContractIdIn(contractIdList);</span><br><span class="line">    List&lt;ContractProduct&gt; contractProductList = contractProductDao.selectByExample(contractProductExample);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 数据封装</span></span><br><span class="line">    <span class="keyword">for</span> (ContractProduct contractProduct : contractProductList) &#123;</span><br><span class="line">        <span class="comment">//复制对象的属性</span></span><br><span class="line">        <span class="comment">//注意:1.属性的复制一定在自己赋值之前  2使用springframework的BeanUtils</span></span><br><span class="line">        ExportProduct exportProduct = <span class="keyword">new</span> ExportProduct();</span><br><span class="line">        BeanUtils.copyProperties(contractProduct, exportProduct);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置id</span></span><br><span class="line">        exportProduct.setId(UUID.randomUUID().toString());</span><br><span class="line">        <span class="comment">//设置exportId</span></span><br><span class="line">        exportProduct.setExportId(export.getId());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 数据保存</span></span><br><span class="line">        exportProductDao.insertSelective(exportProduct);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//=========================查询合同附件信息,封装报运单附件信息===================================//</span></span><br><span class="line">    <span class="comment">//1. 先查询当前报运单下的合同中的附件</span></span><br><span class="line">    ExtCproductExample extCproductExample = <span class="keyword">new</span> ExtCproductExample();</span><br><span class="line">    extCproductExample.createCriteria().andContractIdIn(contractIdList);</span><br><span class="line">    List&lt;ExtCproduct&gt; extCproductList = extCproductDao.selectByExample(extCproductExample);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 数据封装</span></span><br><span class="line">    <span class="keyword">for</span> (ExtCproduct extCproduct : extCproductList) &#123;</span><br><span class="line">        <span class="comment">//复制对象数据</span></span><br><span class="line">        ExtEproduct extEproduct = <span class="keyword">new</span> ExtEproduct();</span><br><span class="line">        BeanUtils.copyProperties(extCproduct, extEproduct);</span><br><span class="line">        <span class="comment">//设置id</span></span><br><span class="line">        extEproduct.setId(UUID.randomUUID().toString());</span><br><span class="line">        <span class="comment">//设置exportid</span></span><br><span class="line">        extEproduct.setExportId(export.getId());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 数据保存</span></span><br><span class="line">        extEproductDao.insertSelective(extEproduct);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改报运单"><a href="#修改报运单" class="headerlink" title="修改报运单"></a>修改报运单</h2><p><img data-src="/assets/image-20200710005428565.png" alt="image-20200710005428565"></p><h3 id="跳转修改页面"><a href="#跳转修改页面" class="headerlink" title="跳转修改页面"></a>跳转修改页面</h3><p>修改ExportController, 新增方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/toUpdate"</span>, name = <span class="string">"跳转报运单编辑页面"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toUpdate</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1. 根据id查询当前报运单信息</span></span><br><span class="line">    Export export = exportService.findById(id);</span><br><span class="line">    request.setAttribute(<span class="string">"export"</span>, export);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 根据报运单id查询当前报运单下的所有货物</span></span><br><span class="line">    List&lt;ExportProduct&gt; eps = exportProductService.findByExportId(id);</span><br><span class="line">    request.setAttribute(<span class="string">"eps"</span>, eps);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 转发到修改页面</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"/cargo/export/export-update"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改报运单-1"><a href="#修改报运单-1" class="headerlink" title="修改报运单"></a>修改报运单</h3><h4 id="ExportController-2"><a href="#ExportController-2" class="headerlink" title="ExportController"></a>ExportController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/edit"</span>, name = <span class="string">"报运单新增"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">edit</span><span class="params">(Export export)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(export.getId())) &#123;</span><br><span class="line">        <span class="comment">//1. 设置主键</span></span><br><span class="line">        export.setId(UUID.randomUUID().toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 设置企业信息</span></span><br><span class="line">        export.setCompanyId(getCompanyId());</span><br><span class="line">        export.setCompanyName(getCompanyName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.制单时间</span></span><br><span class="line">        export.setInputDate(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 设置当前合同的状态</span></span><br><span class="line">        export.setState(<span class="number">0</span>);<span class="comment">//草稿</span></span><br><span class="line"></span><br><span class="line">        exportService.save(export);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        exportService.update(export);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重定向到list方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/cargo/export/list.do"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ExportServiceImpl-1"><a href="#ExportServiceImpl-1" class="headerlink" title="ExportServiceImpl"></a>ExportServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//更新</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Export export)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1. 修改报运单信息</span></span><br><span class="line">    exportDao.updateByPrimaryKeySelective(export);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (ExportProduct exportProduct : export.getExportProducts()) &#123;</span><br><span class="line">        <span class="comment">//2. 修改报运单下的货物信息</span></span><br><span class="line">        exportProductDao.updateByPrimaryKeySelective(exportProduct);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="报运单的删除"><a href="#报运单的删除" class="headerlink" title="报运单的删除"></a>报运单的删除</h2><blockquote><p>删除三种表的数据,删除顺序: 附件  货物  报运单</p></blockquote><h3 id="ExportController-3"><a href="#ExportController-3" class="headerlink" title="ExportController"></a>ExportController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/delete"</span>,name = <span class="string">"删除报运单信息方法"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(String id)</span></span>&#123;</span><br><span class="line">    <span class="comment">//调用service删除</span></span><br><span class="line">    exportService.delete(id);</span><br><span class="line">    <span class="comment">//重定向到合同列表查询方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/cargo/export/list.do"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ExportServiceImpl-2"><a href="#ExportServiceImpl-2" class="headerlink" title="ExportServiceImpl"></a>ExportServiceImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询</span></span><br><span class="line">    <span class="comment">//报运单下附件</span></span><br><span class="line">    ExtEproductExample extEproductExample = <span class="keyword">new</span> ExtEproductExample();</span><br><span class="line">    extEproductExample.createCriteria().andExportIdEqualTo(id);</span><br><span class="line">    List&lt;ExtEproduct&gt; extEproductList = extEproductDao.selectByExample(extEproductExample);</span><br><span class="line">    <span class="comment">//报运单下货物</span></span><br><span class="line">    ExportProductExample exportProductExample = <span class="keyword">new</span> ExportProductExample();</span><br><span class="line">    exportProductExample.createCriteria().andExportIdEqualTo(id);</span><br><span class="line">    List&lt;ExportProduct&gt; exportProductList = exportProductDao.selectByExample(exportProductExample);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除报运单下附件</span></span><br><span class="line">    <span class="keyword">for</span> (ExtEproduct extEproduct : extEproductList) &#123;</span><br><span class="line">        extEproductDao.deleteByPrimaryKey(extEproduct.getId());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除报运单下货物</span></span><br><span class="line">    <span class="keyword">for</span> (ExportProduct exportProduct : exportProductList) &#123;</span><br><span class="line">        exportProductDao.deleteByPrimaryKey(exportProduct.getId());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除报运单</span></span><br><span class="line">    exportDao.deleteByPrimaryKey(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="WebService"><a href="#WebService" class="headerlink" title="WebService"></a>WebService</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>WebService是一种<span style="color:red">跨编程语言</span>和<span style="color:red">跨操作系统</span>平台的<span style="color:red">远程调用技术</span></p><ul><li><p><strong>跨编程语言</strong>：是指服务端、客户端程序的编程语言可以不同</p></li><li><p><strong>跨操作系统</strong>：是指服务端、客户端可在不同的操作系统上运行</p></li><li><p><strong>远程调用技术</strong>：远程调用是指一台设备上的程序A可以调用另一台设备上的方法B     比如：支付时调用微信提供的支付接口</p></li></ul><p><img data-src="/assets/image-20201020110857633.png" alt="image-20201020110857633"> </p><h2 id="实现规范-面试"><a href="#实现规范-面试" class="headerlink" title="实现规范(面试)"></a>实现规范(面试)</h2><p> JAVA 中共有三种WebService 规范，分别是JAX-WS、JAX-RS、JAXM&amp;SAAJ(废弃)。</p><ul><li><p><strong>JAX-WS</strong>：是早期出现的WebService规范，通过<span style="color:red">SOAP协议</span>传输标。<br>  注：SOAP 是http+xml，通过http的形式发送标准格式的XML文件数据。只能通过客户端代码调用（固定）</p></li><li><p><strong>JAX-RS</strong>： JAVA 针对REST(Representation State Transfer)风格制定的一套Web服务规范。<br>  注：REST 是一种软件架构风格，rest服务采用HTTP做传输协议。可以通过浏览器获取数据（灵活）</p></li></ul><h1 id="Apache的CXF"><a href="#Apache的CXF" class="headerlink" title="Apache的CXF"></a>Apache的CXF</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>​    Apache CXF 是一个开源的 Web Services 框架。与spring整合后可以轻松实现 Web Services 的发布和使用，并支持SOAP协议和REST风格，操作简单，灵活部署。官网地址：<a href="http://cxf.apache.org/" target="_blank" rel="noopener">http://cxf.apache.org/</a></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>创建<code>webservice_parent</code>聚合父工程，统一管理依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.cxf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cxf-rt-frontend-jaxws<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- cxf 进行rs开发 必须导入  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.cxf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cxf-rt-frontend-jaxrs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志引入  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 客户端 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.cxf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cxf-rt-rs-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扩展json提供者 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.cxf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cxf-rt-rs-extension-providers<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 转换json工具包，被extension providers 依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.jettison<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jettison<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- spring 核心 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring web集成 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring 整合junit  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- junit 开发包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置编译版本为1.8 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="基于JAX-WS规范的入门"><a href="#基于JAX-WS规范的入门" class="headerlink" title="基于JAX-WS规范的入门"></a>基于JAX-WS规范的入门</h2><h3 id="JAX-WS规范三要素-笔试"><a href="#JAX-WS规范三要素-笔试" class="headerlink" title="JAX-WS规范三要素(笔试)"></a>JAX-WS规范三要素(笔试)</h3><ul><li><strong>SOAP</strong>:   http+xml 基于HTTP协议，采用XML格式，用来传递信息</li><li><strong>WSDL</strong>:  使用说明书（用来描述如何访问具体的服务）</li><li><strong>UDDI</strong>:    产品目录（企业将自己提供的WebService注册在UDDI，也可以使用别的企业在UDDI注册的WebService，从而达到资源共享）</li></ul><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><h4 id="创建一个web模块-ws-server"><a href="#创建一个web模块-ws-server" class="headerlink" title="创建一个web模块(ws_server)"></a>创建一个web模块(ws_server)</h4><p><img data-src="/assets/image-20201020143851466.png" alt="image-20201020143851466"> </p><h4 id="创建接口和实现类"><a href="#创建接口和实现类" class="headerlink" title="创建接口和实现类"></a>创建接口和实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当写了此注解时，表明当前接口是一个webservice接口</span></span><br><span class="line"><span class="meta">@WebService</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WeatherService</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据城市名称，获取城市天气</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">String <span class="title">getWeatherByCityName</span><span class="params">(String cityName)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherServiceImpl</span> <span class="keyword">implements</span> <span class="title">WeatherService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     此处就不经过数据库了，为的是演示webservice的用法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWeatherByCityName</span><span class="params">(String cityName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"北京"</span>.equals(cityName)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"万里无云"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"上海"</span>.equals(cityName)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"小雨"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"深圳"</span>.equals(cityName)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"晴"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"未知"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="加入配置文件"><a href="#加入配置文件" class="headerlink" title="加入配置文件"></a>加入配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:jaxws</span>=<span class="string">"http://cxf.apache.org/jaxws"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://cxf.apache.org/jaxws</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://cxf.apache.org/schemas/jaxws.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        提供的webService基于jaxws的服务端</span></span><br><span class="line"><span class="comment">        address="/接口服务访问地址"</span></span><br><span class="line"><span class="comment">        serviceClass="服务实现类全限定名"</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jaxws:server</span> <span class="attr">address</span>=<span class="string">"/weatherService"</span> <span class="attr">serviceClass</span>=<span class="string">"com.sun.service.WeatherServiceImpl"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="加入web-xml"><a href="#加入web-xml" class="headerlink" title="加入web.xml"></a>加入web.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span></span></span><br><span class="line"><span class="tag"><span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext-cxf-server.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- CXF框架的核心控制器:CXFServlet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>cxf<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.apache.cxf.transport.servlet.CXFServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>4<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>cxf<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/ws/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><p><img data-src="/assets/image-20201020144644061.png" alt="image-20201020144644061"> </p><blockquote><p>生成的wsdl的地址:  <a href="http://localhost:5000/ws/weatherService?wsdl" target="_blank" rel="noopener">http://localhost:5000/ws/weatherService?wsdl</a></p></blockquote><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><h4 id="创建一个web模块-ws-client"><a href="#创建一个web模块-ws-client" class="headerlink" title="创建一个web模块(ws_client)"></a>创建一个web模块(ws_client)</h4><p><img data-src="/assets/image-20201020145128223.png" alt="image-20201020145128223"> </p><h4 id="使用wsdl生成客户端的程序代码"><a href="#使用wsdl生成客户端的程序代码" class="headerlink" title="使用wsdl生成客户端的程序代码"></a>使用wsdl生成客户端的程序代码</h4><blockquote><p>命令：<code>wsimport -s ./ http://localhost:5000/ws/weatherService?wsdl</code></p><ul><li>最后的地址为生成的wsdl地址</li></ul></blockquote><p><img data-src="/assets/image-20201020145758261.png" alt="image-20201020145758261"> </p><h4 id="加入配置文件-1"><a href="#加入配置文件-1" class="headerlink" title="加入配置文件"></a>加入配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:jaxws</span>=<span class="string">"http://cxf.apache.org/jaxws"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://cxf.apache.org/jaxws</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://cxf.apache.org/schemas/jaxws.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        提供的webService基于jaxws的服客户端</span></span><br><span class="line"><span class="comment">        id:生成代理对象id,可以理解为Spring中bean的id</span></span><br><span class="line"><span class="comment">        address：服务端wsdl请求路径</span></span><br><span class="line"><span class="comment">        serviceClass：生成代理对象接口全限定名</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jaxws:client</span> <span class="attr">id</span>=<span class="string">"weatherService"</span> <span class="attr">address</span>=<span class="string">"http://localhost:5000/ws/weatherService?wsdl"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">serviceClass</span>=<span class="string">"com.sun.service.WeatherService"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">jaxws:client</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="加入测试的类"><a href="#加入测试的类" class="headerlink" title="加入测试的类"></a>加入测试的类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//启动Spring环境</span></span><br><span class="line">        ClassPathXmlApplicationContext act</span><br><span class="line">                = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext-cxf-client.xml"</span>);</span><br><span class="line">        <span class="comment">//获取代理对象</span></span><br><span class="line">        WeatherService weatherService = act.getBean(WeatherService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//调用对象执行方法</span></span><br><span class="line">        System.out.println(weatherService.getWeatherByCityName(<span class="string">"北京"</span>));</span><br><span class="line">        System.out.println(weatherService.getWeatherByCityName(<span class="string">"兰州"</span>));</span><br><span class="line">        System.out.println(weatherService.getWeatherByCityName(<span class="string">"上海"</span>));</span><br><span class="line">        System.out.println(weatherService.getWeatherByCityName(<span class="string">"深圳"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基于JAX-RS规范的入门"><a href="#基于JAX-RS规范的入门" class="headerlink" title="基于JAX-RS规范的入门"></a>基于JAX-RS规范的入门</h2><h3 id="服务端-1"><a href="#服务端-1" class="headerlink" title="服务端"></a>服务端</h3><h4 id="创建一个web模块-rs-server"><a href="#创建一个web模块-rs-server" class="headerlink" title="创建一个web模块(rs_server)"></a>创建一个web模块(rs_server)</h4><p><img data-src="/assets/image-20201020150655693.png" alt="image-20201020150655693"> </p><h4 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sun.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.bind.annotation.XmlRootElement;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@XmlRootElement用于指定生成的XML格式数据的根元素名称</span></span><br><span class="line"><span class="meta">@XmlRootElement</span>(name = <span class="string">"User"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line"></span><br><span class="line"><span class="comment">//get、set、toString方法略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建接口和实现类-1"><a href="#创建接口和实现类-1" class="headerlink" title="创建接口和实现类"></a>创建接口和实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Path</span> 访问路径，这个跟SpringMVC中的<span class="doctag">@RequestMapping</span>的path属性类似</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@POST</span> <span class="doctag">@PUT</span> <span class="doctag">@GET</span> <span class="doctag">@DELETE</span> 用于标识此操作是增删改查中的哪一个，这个个SpringMVC中的<span class="doctag">@RequestMapping</span>的method属性</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Consumes</span> 指定此方法可以接收的数据类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Produces</span> 指定此方法可以返回的响应的数据类型，默认是XML</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// @Path("/userService")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@POST</span></span><br><span class="line">    <span class="meta">@Path</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="meta">@Consumes</span>(&#123;<span class="string">"application/xml"</span>, <span class="string">"application/json"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PUT</span></span><br><span class="line">    <span class="meta">@Path</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="meta">@Consumes</span>(&#123;<span class="string">"application/xml"</span>, <span class="string">"application/json"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GET</span></span><br><span class="line">    <span class="meta">@Path</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="meta">@Produces</span>(&#123;<span class="string">"application/xml"</span>, <span class="string">"application/json"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAllUsers</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GET</span></span><br><span class="line">    <span class="meta">@Path</span>(<span class="string">"/user/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="meta">@Consumes</span>(&#123;<span class="string">"application/xml"</span>, <span class="string">"application/json"</span>&#125;)</span><br><span class="line">    <span class="meta">@Produces</span>(&#123;<span class="string">"application/xml"</span>, <span class="string">"application/json"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">finUserById</span><span class="params">(@PathParam(<span class="string">"id"</span>)</span> Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DELETE</span></span><br><span class="line">    <span class="meta">@Path</span>(<span class="string">"/user/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="meta">@Consumes</span>(&#123;<span class="string">"application/xml"</span>, <span class="string">"application/json"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(@PathParam(<span class="string">"id"</span>)</span> Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"save user:"</span> + user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"update user:"</span> + user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAllUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        User user1 = <span class="keyword">new</span> User();</span><br><span class="line">        user1.setId(<span class="number">1</span>);</span><br><span class="line">        user1.setUsername(<span class="string">"小明"</span>);</span><br><span class="line">        user1.setCity(<span class="string">"北京"</span>);</span><br><span class="line">        users.add(user1);</span><br><span class="line"></span><br><span class="line">        User user2 = <span class="keyword">new</span> User();</span><br><span class="line">        user2.setId(<span class="number">2</span>);</span><br><span class="line">        user2.setUsername(<span class="string">"小丽"</span>);</span><br><span class="line">        user2.setCity(<span class="string">"上海"</span>);</span><br><span class="line">        users.add(user2);</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">finUserById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (id == <span class="number">1</span>) &#123;</span><br><span class="line">            User user1 = <span class="keyword">new</span> User();</span><br><span class="line">            user1.setId(<span class="number">1</span>);</span><br><span class="line">            user1.setUsername(<span class="string">"小明"</span>);</span><br><span class="line">            user1.setCity(<span class="string">"北京"</span>);</span><br><span class="line">            <span class="keyword">return</span> user1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"delete user id :"</span> + id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="加入配置文件-2"><a href="#加入配置文件-2" class="headerlink" title="加入配置文件"></a>加入配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:jaxrs</span>=<span class="string">"http://cxf.apache.org/jaxrs"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://cxf.apache.org/jaxrs</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://cxf.apache.org/schemas/jaxrs.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        提供的webService基于jaxrs的服务端</span></span><br><span class="line"><span class="comment">        address:接口服务访问地址</span></span><br><span class="line"><span class="comment">        serviceClass：服务接口实现类的全限定类名</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jaxrs:server</span> <span class="attr">address</span>=<span class="string">"/userService"</span> <span class="attr">serviceClass</span>=<span class="string">"com.sun.service.UserServiceImpl"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="加入web-xml-1"><a href="#加入web-xml-1" class="headerlink" title="加入web.xml"></a>加入web.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span></span></span><br><span class="line"><span class="tag"><span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext-rs.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- CXF的核心控制器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>cxfServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.apache.cxf.transport.servlet.CXFServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>cxfServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/ws/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="部署-1"><a href="#部署-1" class="headerlink" title="部署"></a>部署</h4><p><img data-src="/assets/image-20201020152148178.png" alt="image-20201020152148178"> </p><h3 id="浏览器客户端"><a href="#浏览器客户端" class="headerlink" title="浏览器客户端"></a>浏览器客户端</h3><blockquote><p>不需要什么wsdl说明书，直接通过http协议发送请求，获得xml或json数据，非常简单…</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//localhost:5001/ws/userService/user</span></span><br></pre></td></tr></table></figure><h3 id="程序客户端"><a href="#程序客户端" class="headerlink" title="程序客户端"></a>程序客户端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RsClientTset</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        WebClient client = WebClient.create(<span class="string">"http://localhost:5001/ws/userService/user"</span>);</span><br><span class="line">        Collection&lt;? extends User&gt; collection = client.getCollection(User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">for</span> (User user : collection) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        WebClient webClient = WebClient.create(<span class="string">"http://localhost:5001/ws/userService/user/1"</span>);</span><br><span class="line">        User user = webClient.get(User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        WebClient webClient = WebClient.create(<span class="string">"http://localhost:5001/ws/userService/user"</span>);</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">1</span>);</span><br><span class="line">        user.setUsername(<span class="string">"张三"</span>);</span><br><span class="line">        user.setCity(<span class="string">"上海"</span>);</span><br><span class="line">        webClient.post(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        WebClient webClient = WebClient.create(<span class="string">"http://localhost:5001/ws/userService/user/1"</span>);</span><br><span class="line">        webClient.delete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        WebClient webClient = WebClient.create(<span class="string">"http://localhost:5001/ws/userService/user"</span>);</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">1</span>);</span><br><span class="line">        user.setUsername(<span class="string">"张三"</span>);</span><br><span class="line">        user.setCity(<span class="string">"上海"</span>);</span><br><span class="line">        webClient.put(user);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;合同管理&quot;&gt;&lt;a href=&quot;#合同管理&quot; class=&quot;headerlink&quot; title=&quot;合同管理&quot;&gt;&lt;/a&gt;合同管理&lt;/h1&gt;&lt;h2 id=&quot;需求说明&quot;&gt;&lt;a href=&quot;#需求说明&quot; class=&quot;headerlink&quot; title=&quot;需求说明&quot;&gt;&lt;/a&gt;需求说明&lt;/h2&gt;&lt;p&gt;实现合同管理列表的查询，只查询&lt;code&gt;购销合同状态为已提交(state=1)&lt;/code&gt;的状态的数据&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&quot;/assets/image-20200710004802779.png&quot; alt=&quot;image-20200710004802779&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="其他" scheme="http://sunmoon.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="WebService" scheme="http://sunmoon.com/tags/WebService/"/>
    
      <category term="ApacheCXF" scheme="http://sunmoon.com/tags/ApacheCXF/"/>
    
      <category term="打断设计思想" scheme="http://sunmoon.com/tags/%E6%89%93%E6%96%AD%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>百万数据报表技术&amp;EasyPOI&amp;定时任务</title>
    <link href="http://sunmoon.com/2020/10/18/%E7%99%BE%E4%B8%87%E6%95%B0%E6%8D%AE%E6%8A%A5%E8%A1%A8%E6%8A%80%E6%9C%AF-EasyPOI-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <id>http://sunmoon.com/2020/10/18/%E7%99%BE%E4%B8%87%E6%95%B0%E6%8D%AE%E6%8A%A5%E8%A1%A8%E6%8A%80%E6%9C%AF-EasyPOI-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</id>
    <published>2020-10-18T12:14:19.000Z</published>
    <updated>2020-10-18T12:16:51.723Z</updated>
    
    <content type="html"><![CDATA[<h1 id="出货表导出"><a href="#出货表导出" class="headerlink" title="出货表导出"></a>出货表导出</h1><h2 id="跳转出货表页面"><a href="#跳转出货表页面" class="headerlink" title="跳转出货表页面"></a>跳转出货表页面</h2><p>在<code>ContractController</code>中添加下面方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/print"</span>, name = <span class="string">"跳转出货表页面"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"/cargo/print/contract-print"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><h3 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h3><p>要求可以按照按照条件导出指定月份的出货表</p><p><img data-src="/assets/image-20200710004038151.png" alt="image-20200710004038151"></p><p><img data-src="/assets/image-20200710004138812.png" alt="image-20200710004138812"> </p><p><img data-src="/assets/image-20201018085318567.png" alt="image-20201018085318567"> </p><h3 id="sql语句分析"><a href="#sql语句分析" class="headerlink" title="sql语句分析"></a>sql语句分析</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  c.<span class="string">`custom_name`</span> <span class="keyword">AS</span> customName,</span><br><span class="line">c.<span class="string">`contract_no`</span> <span class="keyword">AS</span> contractNo,</span><br><span class="line">cp.<span class="string">`product_no`</span> <span class="keyword">AS</span> productNo,</span><br><span class="line">cp.<span class="string">`cnumber`</span> <span class="keyword">AS</span> cnumber,</span><br><span class="line">cp.<span class="string">`factory_name`</span> <span class="keyword">AS</span> factoryName,</span><br><span class="line">c.<span class="string">`delivery_period`</span> <span class="keyword">AS</span> deliveryPeriod,</span><br><span class="line">c.<span class="string">`ship_time`</span> <span class="keyword">AS</span> shipTime,</span><br><span class="line">c.<span class="string">`trade_terms`</span> <span class="keyword">AS</span> tradeTerms </span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`co_contract`</span> c </span><br><span class="line"><span class="keyword">JOIN</span> <span class="string">`co_contract_product`</span> cp <span class="keyword">ON</span> c.id = cp.<span class="string">`contract_id`</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">DATE_FORMAT</span>(c.<span class="string">`ship_time`</span>,<span class="string">"%Y-%m"</span>) = <span class="string">'2015-01'</span> </span><br><span class="line"><span class="keyword">AND</span> c.<span class="string">`company_id`</span> = <span class="string">'1'</span></span><br></pre></td></tr></table></figure><h2 id="基础代码复制"><a href="#基础代码复制" class="headerlink" title="基础代码复制"></a>基础代码复制</h2><h3 id="ContractProductVo"><a href="#ContractProductVo" class="headerlink" title="ContractProductVo"></a>ContractProductVo</h3><p><img data-src="/assets/image-20201018090602092.png" alt="image-20201018090602092"> </p><h3 id="DownloadUtil"><a href="#DownloadUtil" class="headerlink" title="DownloadUtil"></a>DownloadUtil</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath   要下载的文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> returnName 返回的文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response   HttpServletResponse</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delFlag    是否删除文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">(String filePath, String returnName, HttpServletResponse response, <span class="keyword">boolean</span> delFlag)</span> </span>&#123;</span><br><span class="line">        prototypeDownload(<span class="keyword">new</span> File(filePath), returnName, response, delFlag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file       要下载的文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> returnName 返回的文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response   HttpServletResponse</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delFlag    是否删除文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">(File file, String returnName, HttpServletResponse response, <span class="keyword">boolean</span> delFlag)</span> </span>&#123;</span><br><span class="line">        prototypeDownload(file, returnName, response, delFlag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file       要下载的文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> returnName 返回的文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response   HttpServletResponse</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delFlag    是否删除文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prototypeDownload</span><span class="params">(File file, String returnName, HttpServletResponse response, <span class="keyword">boolean</span> delFlag)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 下载文件</span></span><br><span class="line">        FileInputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">        ServletOutputStream outputStream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!file.exists()) <span class="keyword">return</span>;</span><br><span class="line">            response.reset();</span><br><span class="line">            <span class="comment">//设置响应类型PDF文件为"application/pdf"，WORD文件为："application/msword"， EXCEL文件为："application/vnd.ms-excel"。</span></span><br><span class="line">            response.setContentType(<span class="string">"application/octet-stream;charset=utf-8"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//设置响应的文件名称,并转换成中文编码</span></span><br><span class="line">            <span class="comment">//returnName = URLEncoder.encode(returnName,"UTF-8");</span></span><br><span class="line">            returnName = response.encodeURL(<span class="keyword">new</span> String(returnName.getBytes(), <span class="string">"iso8859-1"</span>));    <span class="comment">//保存的文件名,必须和页面编码一致,否则乱码</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//attachment作为附件下载；inline客户端机器有安装匹配程序，则直接打开；注意改变配置，清除缓存，否则可能不能看到效果</span></span><br><span class="line">            response.addHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment;filename="</span> + returnName);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将文件读入响应流</span></span><br><span class="line">            inputStream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">            outputStream = response.getOutputStream();</span><br><span class="line">            <span class="keyword">int</span> length = <span class="number">1024</span>;</span><br><span class="line">            <span class="keyword">int</span> readLength = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">byte</span> buf[] = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            readLength = inputStream.read(buf, <span class="number">0</span>, length);</span><br><span class="line">            <span class="keyword">while</span> (readLength != -<span class="number">1</span>) &#123;</span><br><span class="line">                outputStream.write(buf, <span class="number">0</span>, readLength);</span><br><span class="line">                readLength = inputStream.read(buf, <span class="number">0</span>, length);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                outputStream.flush();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                outputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                inputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//删除原文件</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (delFlag) &#123;</span><br><span class="line">                file.delete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">(ByteArrayOutputStream byteArrayOutputStream, HttpServletResponse response, String returnName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">"application/octet-stream;charset=utf-8"</span>);</span><br><span class="line">        returnName = response.encodeURL(<span class="keyword">new</span> String(returnName.getBytes(), <span class="string">"iso8859-1"</span>));<span class="comment">//保存的文件名,必须和页面编码一致,否则乱码</span></span><br><span class="line">        response.addHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment;filename="</span> + returnName);</span><br><span class="line">        response.setContentLength(byteArrayOutputStream.size());</span><br><span class="line"></span><br><span class="line">        ServletOutputStream outputstream = response.getOutputStream();    <span class="comment">//取得输出流</span></span><br><span class="line">        byteArrayOutputStream.writeTo(outputstream);                    <span class="comment">//写到输出流</span></span><br><span class="line">        byteArrayOutputStream.close();                                    <span class="comment">//关闭</span></span><br><span class="line">        outputstream.flush();                                            <span class="comment">//刷数据</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h2><h3 id="ContractController"><a href="#ContractController" class="headerlink" title="ContractController"></a>ContractController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/cargo/contract"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContractPrintController</span> <span class="keyword">extends</span> <span class="title">BaseController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span></span><br><span class="line">    <span class="keyword">private</span> ContractService contractService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(path = <span class="string">"/print"</span>, name = <span class="string">"跳转出货表页面"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/cargo/print/contract-print"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(path = <span class="string">"/printExcel"</span>, name = <span class="string">"打印出货表"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printExcel</span><span class="params">(String inputDate)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//查询数据</span></span><br><span class="line">        List&lt;ContractProductVo&gt; list = contractService.findContractProductVo(inputDate, getCompanyId());</span><br><span class="line">        <span class="comment">//封装到Excel</span></span><br><span class="line">        Workbook workbook = <span class="keyword">new</span> XSSFWorkbook();</span><br><span class="line">        <span class="comment">//创建工作表</span></span><br><span class="line">        Sheet sheet = workbook.createSheet();</span><br><span class="line">        <span class="comment">//合并单元格</span></span><br><span class="line">        sheet.addMergedRegion(<span class="keyword">new</span> CellRangeAddress(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">8</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            sheet.setColumnWidth(i, <span class="number">15</span> * <span class="number">256</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建第0行</span></span><br><span class="line">        Row row0 = sheet.createRow(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            Cell cell = row0.createCell(i);</span><br><span class="line">            cell.setCellStyle(bigTitleStyle(workbook));</span><br><span class="line">        &#125;</span><br><span class="line">        String title = inputDate.replaceAll(<span class="string">"-0"</span>, <span class="string">"年"</span>).replaceAll(<span class="string">"-"</span>, <span class="string">"年"</span>);</span><br><span class="line">        row0.getCell(<span class="number">1</span>).setCellValue(title + <span class="string">"月份出货表"</span>);</span><br><span class="line">        <span class="comment">//创建第一行</span></span><br><span class="line">        String[] littleTitle = &#123;<span class="string">"客户"</span>, <span class="string">"合同号"</span>, <span class="string">"货号"</span>, <span class="string">"数量"</span>, <span class="string">"工厂"</span>, <span class="string">"工厂交期"</span>, <span class="string">"船期"</span>, <span class="string">"贸易条款"</span>&#125;;</span><br><span class="line">        Row row1 = sheet.createRow(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            Cell cell = row1.createCell(i);</span><br><span class="line">            cell.setCellStyle(littleTitleStyle(workbook));</span><br><span class="line">            cell.setCellValue(littleTitle[i - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建第n行</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">2</span>;</span><br><span class="line">        SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">        <span class="keyword">for</span> (ContractProductVo contractProductVo : list) &#123;</span><br><span class="line">            <span class="comment">//创建单元格</span></span><br><span class="line">            Row rowN = sheet.createRow(index++);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">                Cell cell = rowN.createCell(i);</span><br><span class="line">                cell.setCellStyle(textStyle(workbook));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//向表格添加数据</span></span><br><span class="line">            rowN.getCell(<span class="number">1</span>).setCellValue(contractProductVo.getCustomName());</span><br><span class="line">            rowN.getCell(<span class="number">2</span>).setCellValue(contractProductVo.getContractNo());</span><br><span class="line">            rowN.getCell(<span class="number">3</span>).setCellValue(contractProductVo.getProductNo());</span><br><span class="line">            rowN.getCell(<span class="number">4</span>).setCellValue(contractProductVo.getCnumber());</span><br><span class="line">            rowN.getCell(<span class="number">5</span>).setCellValue(contractProductVo.getFactoryName());</span><br><span class="line">            rowN.getCell(<span class="number">6</span>).setCellValue(dateFormat.format(contractProductVo.getDeliveryPeriod()));</span><br><span class="line">            rowN.getCell(<span class="number">7</span>).setCellValue(dateFormat.format(contractProductVo.getShipTime()));</span><br><span class="line">            rowN.getCell(<span class="number">8</span>).setCellValue(contractProductVo.getTradeTerms());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//下载方法</span></span><br><span class="line">        ByteArrayOutputStream out = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        workbook.write(out);</span><br><span class="line">        DownloadUtils.download(out, response, <span class="string">"出货表.xlsx"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//大标题的样式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CellStyle <span class="title">bigTitleStyle</span><span class="params">(Workbook wb)</span> </span>&#123;</span><br><span class="line">        CellStyle style = wb.createCellStyle();</span><br><span class="line">        Font font = wb.createFont();</span><br><span class="line">        font.setFontName(<span class="string">"宋体"</span>);</span><br><span class="line">        font.setFontHeightInPoints((<span class="keyword">short</span>) <span class="number">16</span>);</span><br><span class="line">        font.setBold(<span class="keyword">true</span>);<span class="comment">//字体加粗</span></span><br><span class="line">        style.setFont(font);</span><br><span class="line">        style.setAlignment(HorizontalAlignment.CENTER);                <span class="comment">//横向居中</span></span><br><span class="line">        style.setVerticalAlignment(VerticalAlignment.CENTER);        <span class="comment">//纵向居中</span></span><br><span class="line">        <span class="keyword">return</span> style;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//小标题的样式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CellStyle <span class="title">littleTitleStyle</span><span class="params">(Workbook wb)</span> </span>&#123;</span><br><span class="line">        CellStyle style = wb.createCellStyle();</span><br><span class="line">        Font font = wb.createFont();</span><br><span class="line">        font.setFontName(<span class="string">"黑体"</span>);</span><br><span class="line">        font.setFontHeightInPoints((<span class="keyword">short</span>) <span class="number">12</span>);</span><br><span class="line">        style.setFont(font);</span><br><span class="line">        style.setAlignment(HorizontalAlignment.CENTER);                <span class="comment">//横向居中</span></span><br><span class="line">        style.setVerticalAlignment(VerticalAlignment.CENTER);        <span class="comment">//纵向居中</span></span><br><span class="line">        style.setBorderTop(BorderStyle.THIN);                        <span class="comment">//上细线</span></span><br><span class="line">        style.setBorderBottom(BorderStyle.THIN);                    <span class="comment">//下细线</span></span><br><span class="line">        style.setBorderLeft(BorderStyle.THIN);                        <span class="comment">//左细线</span></span><br><span class="line">        style.setBorderRight(BorderStyle.THIN);                        <span class="comment">//右细线</span></span><br><span class="line">        <span class="keyword">return</span> style;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//文字样式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CellStyle <span class="title">textStyle</span><span class="params">(Workbook wb)</span> </span>&#123;</span><br><span class="line">        CellStyle style = wb.createCellStyle();</span><br><span class="line">        Font font = wb.createFont();</span><br><span class="line">        font.setFontName(<span class="string">"Times New Roman"</span>);</span><br><span class="line">        font.setFontHeightInPoints((<span class="keyword">short</span>) <span class="number">10</span>);</span><br><span class="line">        style.setFont(font);</span><br><span class="line">        style.setAlignment(HorizontalAlignment.LEFT);                <span class="comment">//横向居左</span></span><br><span class="line">        style.setVerticalAlignment(VerticalAlignment.CENTER);        <span class="comment">//纵向居中</span></span><br><span class="line">        style.setBorderTop(BorderStyle.THIN);                        <span class="comment">//上细线</span></span><br><span class="line">        style.setBorderBottom(BorderStyle.THIN);                    <span class="comment">//下细线</span></span><br><span class="line">        style.setBorderLeft(BorderStyle.THIN);                        <span class="comment">//左细线</span></span><br><span class="line">        style.setBorderRight(BorderStyle.THIN);                        <span class="comment">//右细线</span></span><br><span class="line">        <span class="keyword">return</span> style;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ContractService"><a href="#ContractService" class="headerlink" title="ContractService"></a>ContractService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;ContractProductVo&gt; <span class="title">findContractProductVo</span><span class="params">(String inputDate, String companyId)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;ContractProductVo&gt; <span class="title">findContractProductVo</span><span class="params">(String inputDate, String companyId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> contractDao.findContractProductVo(inputDate, companyId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ContractDao"><a href="#ContractDao" class="headerlink" title="ContractDao"></a>ContractDao</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;ContractProductVo&gt; <span class="title">findContractProductVo</span><span class="params">(@Param(<span class="string">"inputDate"</span>)</span> String inputDate, @<span class="title">Param</span><span class="params">(<span class="string">"companyId"</span>)</span> String companyId)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findContractProductVo"</span> <span class="attr">resultType</span>=<span class="string">"com.itheima.vo.ContractProductVo"</span>&gt;</span></span><br><span class="line">    SELECT  c.`custom_name` AS customName,</span><br><span class="line">    c.`contract_no` AS contractNo,</span><br><span class="line">    cp.`product_no` AS productNo,</span><br><span class="line">    cp.`cnumber` AS cnumber,</span><br><span class="line">    cp.`factory_name` AS factoryName,</span><br><span class="line">    c.`delivery_period` AS deliveryPeriod,</span><br><span class="line">    c.`ship_time` AS shipTime,</span><br><span class="line">    c.`trade_terms` AS tradeTerms</span><br><span class="line"></span><br><span class="line">    FROM `co_contract` c</span><br><span class="line">    JOIN `co_contract_product` cp ON c.id = cp.`contract_id`</span><br><span class="line">    WHERE DATE_FORMAT(c.`ship_time`,"%Y-%m") = #&#123;inputDate&#125;</span><br><span class="line">    AND c.`company_id` = #&#123;companyId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="使用模板导出出货表"><a href="#使用模板导出出货表" class="headerlink" title="使用模板导出出货表"></a>使用模板导出出货表</h1><h2 id="需求说明-1"><a href="#需求说明-1" class="headerlink" title="需求说明"></a>需求说明</h2><p>自定义生成Excel报表文件是非常复杂的，特别是针对复杂报表头，单元格样式，字体等操作。</p><p>为了简便，我们可以使用已经准备好的Excel模板，将模板读到程序中， 然后设置上数据即可。</p><h2 id="步骤分析"><a href="#步骤分析" class="headerlink" title="步骤分析"></a>步骤分析</h2><p> <img data-src="/assets/image-20200706110708113.png" alt="image-20200706110708113"></p><p>操作步骤：</p><ol><li><p>制作模版文件（一般是由设计人员或者项目经理完成）</p></li><li><p>加载模版文件，从而得到一个工作簿</p></li><li><p>读取工作表</p></li><li><p>读取行，此时发现其实表中的前两行是固定内容， 所以不用处理</p></li><li><p>直接读取第三行中的每个单元格的样式信息,存储在一个数组中,备用</p></li><li><p>接下来开始遍历创建行，设置每行中单元格的文字和样式（使用上步读到的样式）</p></li></ol><h2 id="代码编写-1"><a href="#代码编写-1" class="headerlink" title="代码编写"></a>代码编写</h2><h3 id="jsp页面调整"><a href="#jsp页面调整" class="headerlink" title="jsp页面调整"></a>jsp页面调整</h3><p>修改<code>\webapp\WEB-INF\pages\cargo\print\contract-print.jsp</code>中的内容</p><p><strong>第一步：复制一个form表单</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;form role=<span class="string">"form"</span> action=<span class="string">"/cargo/contract/printExcelWithTemplate.do"</span>&gt;</span><br><span class="line">         &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"input-group input-group-sm"</span> &gt;</span><br><span class="line">             &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"input-group-addon"</span>&gt;</span><br><span class="line">                 &lt;i class="fa fa-calendar"&gt;&lt;/i&gt;</span><br><span class="line">             &lt;/div&gt;</span><br><span class="line">             &lt;input type=<span class="string">"text"</span> name=<span class="string">"inputDate"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control pull-right"</span> id=<span class="string">"datepicker1"</span>&gt;</span><br><span class="line">             &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"input-group-btn"</span>&gt;</span><br><span class="line">                 &lt;button type="submit"   class="btn btn-info btn-flat"&gt;模板导出&lt;/button&gt;</span><br><span class="line">             &lt;/span&gt;</span><br><span class="line">         &lt;/div&gt;</span><br><span class="line">     &lt;/form&gt;</span><br></pre></td></tr></table></figure><p><strong>第二步：在js中添加</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#datepicker1'</span>).datepicker(&#123;</span><br><span class="line">    language: <span class="string">"zh-CN"</span>,</span><br><span class="line">    autoclose: <span class="literal">true</span>,</span><br><span class="line">    format: <span class="string">'yyyy-mm'</span>,</span><br><span class="line">    startView: <span class="string">'months'</span>, <span class="comment">//开始视图层，为月视图层</span></span><br><span class="line">    maxViewMode:<span class="string">'years'</span>, <span class="comment">//最大视图层，为年视图层</span></span><br><span class="line">    minViewMode:<span class="string">'months'</span>, <span class="comment">//最小视图层，为月视图层</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>页面效果如下：</strong></p><p><img data-src="/assets/1574904807326.png" alt="1574904807326"> </p><h3 id="ContractController-1"><a href="#ContractController-1" class="headerlink" title="ContractController"></a>ContractController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/printTemplateExcel"</span>, name = <span class="string">"模板打印出货表"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printTemplateExcel</span><span class="params">(String inputDate)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//查询数据</span></span><br><span class="line">    List&lt;ContractProductVo&gt; list = contractService.findContractProductVo(inputDate, getCompanyId());</span><br><span class="line">    <span class="comment">//读取模板获取工作簿</span></span><br><span class="line">    String path = session.getServletContext().getRealPath(<span class="string">"/make/xlsprint/tOUTPRODUCT.xlsx"</span>);</span><br><span class="line">    Workbook workbook = <span class="keyword">new</span> XSSFWorkbook(<span class="keyword">new</span> FileInputStream(path));</span><br><span class="line">    Sheet sheet = workbook.getSheetAt(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//获取第0行</span></span><br><span class="line">    Row row0 = sheet.getRow(<span class="number">0</span>);</span><br><span class="line">    String title = inputDate.replaceAll(<span class="string">"-0"</span>,<span class="string">"年"</span>).replaceAll(<span class="string">"-"</span>,<span class="string">"年"</span>);</span><br><span class="line">    <span class="comment">//替换标题</span></span><br><span class="line">    row0.getCell(<span class="number">1</span>).setCellValue(title + <span class="string">"月份出货表"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取第2行的每一个单元格的样式,存储到一个数组中,备用</span></span><br><span class="line">    Row row2 = sheet.getRow(<span class="number">2</span>);</span><br><span class="line">    CellStyle[] cellStyles = <span class="keyword">new</span> CellStyle[<span class="number">8</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">        cellStyles[i-<span class="number">1</span>] = row2.getCell(i).getCellStyle();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加数据</span></span><br><span class="line">    SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (ContractProductVo contractProductVo : list) &#123;</span><br><span class="line">        Row rowN = sheet.createRow(index++);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            Cell cell = rowN.createCell(i);</span><br><span class="line">            cell.setCellStyle(cellStyles[i-<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//向表格添加数据</span></span><br><span class="line">        rowN.getCell(<span class="number">1</span>).setCellValue(contractProductVo.getCustomName());</span><br><span class="line">        rowN.getCell(<span class="number">2</span>).setCellValue(contractProductVo.getContractNo());</span><br><span class="line">        rowN.getCell(<span class="number">3</span>).setCellValue(contractProductVo.getProductNo());</span><br><span class="line">        rowN.getCell(<span class="number">4</span>).setCellValue(contractProductVo.getCnumber());</span><br><span class="line">        rowN.getCell(<span class="number">5</span>).setCellValue(contractProductVo.getFactoryName());</span><br><span class="line">        rowN.getCell(<span class="number">6</span>).setCellValue(dateFormat.format(contractProductVo.getDeliveryPeriod()));</span><br><span class="line">        rowN.getCell(<span class="number">7</span>).setCellValue(dateFormat.format(contractProductVo.getShipTime()));</span><br><span class="line">        rowN.getCell(<span class="number">8</span>).setCellValue(contractProductVo.getTradeTerms());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下载方法</span></span><br><span class="line">    ByteArrayOutputStream out = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">    workbook.write(out);</span><br><span class="line">    DownloadUtils.download(out, response, <span class="string">"出货表.xlsx"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="百万级别数据报表技术"><a href="#百万级别数据报表技术" class="headerlink" title="百万级别数据报表技术"></a>百万级别数据报表技术</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>对于百万数据量的Excel导入导出，只讨论基于Excel2007的解决方法。Excel2007的数据结构是XML，操作XML有两种模式：</p><ul><li><strong>用户模式：</strong>基于dom4j的解析,  一次性加载xml文件再解析（XSSF对象底层用的就是dom4j，它的缺点是当数据量过大时，会导致内存溢出）</li></ul><ul><li><strong>事件模式：</strong>基于SAX方式解析XML，逐行加载，逐行解析（SXSSF对象底层用的是SAX，它的缺点是不能使用模板，并且不支持过多的CellStyle[62000]）</li></ul><h2 id="Jvisualvm"><a href="#Jvisualvm" class="headerlink" title="Jvisualvm"></a>Jvisualvm</h2><p>Jvisualvm是JDK自带的一个Java程序性能检测工具。基于它可以监视程序的运行情况，包括CUP，垃圾回收，内存的分配和使用情况。</p><p>此软件放在jdk的安装目录下的bin目录下，名字叫jvisualvm.exe。</p><p><img data-src="/assets/image-20200706124626268.png" alt="image-20200706124626268"> </p><p>双击即可启动图形化检测界面，找到我们的tomcat，点击就可以看到其运行详情。</p><p><img data-src="/assets/image-20200706124948524.png" alt="image-20200706124948524"></p><p>概述：可以看到进程的启动参数。</p><p>监视：左上：cpu利用率，gc状态的监控，右上：堆利用率，永久内存区的利用率，左下：类的监控，右下：线程的监控</p><p>线程：能够显示线程的名称和运行的状态，在调试多线程时必不可少，而且可以点进一个线程查看这个线程的详细运行情况</p><h2 id="百万级别数据导出"><a href="#百万级别数据导出" class="headerlink" title="百万级别数据导出"></a>百万级别数据导出</h2><h3 id="jsp页面调整-1"><a href="#jsp页面调整-1" class="headerlink" title="jsp页面调整"></a>jsp页面调整</h3><p><strong>第一步：复制一个form表单</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;form role=<span class="string">"form"</span> action=<span class="string">"/cargo/contract/printExcelMillion.do"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"input-group input-group-sm"</span> &gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"input-group-addon"</span>&gt;</span><br><span class="line">            &lt;i class="fa fa-calendar"&gt;&lt;/i&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;input type=<span class="string">"text"</span> name=<span class="string">"inputDate"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control pull-right"</span> id=<span class="string">"datepicker2"</span>&gt;</span><br><span class="line">        &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"input-group-btn"</span>&gt;</span><br><span class="line">            &lt;button type="submit" class="btn btn-info btn-flat"&gt;百万级别数据导出&lt;/button&gt;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><strong>第二步：在js中添加</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#datepicker2'</span>).datepicker(&#123;</span><br><span class="line">    language: <span class="string">"zh-CN"</span>,</span><br><span class="line">    autoclose: <span class="literal">true</span>,</span><br><span class="line">    format: <span class="string">'yyyy-mm'</span>,</span><br><span class="line">    startView: <span class="string">'months'</span>, <span class="comment">//开始视图层，为月视图层</span></span><br><span class="line">    maxViewMode:<span class="string">'years'</span>, <span class="comment">//最大视图层，为年视图层</span></span><br><span class="line">    minViewMode:<span class="string">'months'</span>, <span class="comment">//最小视图层，为月视图层</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>页面效果如下：</strong></p><p><img data-src="/assets/1574904899006.png" alt="1574904899006"> </p><h3 id="ContractController代码调整"><a href="#ContractController代码调整" class="headerlink" title="ContractController代码调整"></a>ContractController代码调整</h3><p>修改内容：</p><ul><li><p>new XSSFWorkbook(); —&gt;改为 new SXSSFWorkbook();</p></li><li><p>导出数据那里模拟一个8000次的循环</p></li><li><p>去掉所有样式设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/printExcelMillion"</span>, name = <span class="string">"百万数据导出"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printExcelMillion</span><span class="params">(String inputDate)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//查询数据</span></span><br><span class="line">    List&lt;ContractProductVo&gt; list = contractService.findContractProductVo(inputDate, getCompanyId());</span><br><span class="line">    <span class="comment">//封装到Excel</span></span><br><span class="line">    Workbook workbook = <span class="keyword">new</span> XSSFWorkbook();</span><br><span class="line">    <span class="comment">//创建工作表</span></span><br><span class="line">    Sheet sheet = workbook.createSheet();</span><br><span class="line">    <span class="comment">//合并单元格</span></span><br><span class="line">    sheet.addMergedRegion(<span class="keyword">new</span> CellRangeAddress(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">8</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">        sheet.setColumnWidth(i, <span class="number">15</span> * <span class="number">256</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建第0行</span></span><br><span class="line">    Row row0 = sheet.createRow(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">        Cell cell = row0.createCell(i);</span><br><span class="line">        cell.setCellStyle(bigTitleStyle(workbook));</span><br><span class="line">    &#125;</span><br><span class="line">    String title = inputDate.replaceAll(<span class="string">"-0"</span>, <span class="string">"年"</span>).replaceAll(<span class="string">"-"</span>, <span class="string">"年"</span>);</span><br><span class="line">    row0.getCell(<span class="number">1</span>).setCellValue(title + <span class="string">"月份出货表"</span>);</span><br><span class="line">    <span class="comment">//创建第一行</span></span><br><span class="line">    String[] littleTitle = &#123;<span class="string">"客户"</span>, <span class="string">"合同号"</span>, <span class="string">"货号"</span>, <span class="string">"数量"</span>, <span class="string">"工厂"</span>, <span class="string">"工厂交期"</span>, <span class="string">"船期"</span>, <span class="string">"贸易条款"</span>&#125;;</span><br><span class="line">    Row row1 = sheet.createRow(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">        Cell cell = row1.createCell(i);</span><br><span class="line">        cell.setCellStyle(littleTitleStyle(workbook));</span><br><span class="line">        cell.setCellValue(littleTitle[i - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建第n行</span></span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">2</span>;</span><br><span class="line">    SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">    <span class="keyword">for</span> (ContractProductVo contractProductVo : list) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8000</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//创建单元格</span></span><br><span class="line">            Row rowN = sheet.createRow(index++);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">9</span>; j++) &#123;</span><br><span class="line">                Cell cell = rowN.createCell(j);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//向表格添加数据</span></span><br><span class="line">            rowN.getCell(<span class="number">1</span>).setCellValue(contractProductVo.getCustomName());</span><br><span class="line">            rowN.getCell(<span class="number">2</span>).setCellValue(contractProductVo.getContractNo());</span><br><span class="line">            rowN.getCell(<span class="number">3</span>).setCellValue(contractProductVo.getProductNo());</span><br><span class="line">            rowN.getCell(<span class="number">4</span>).setCellValue(contractProductVo.getCnumber());</span><br><span class="line">            rowN.getCell(<span class="number">5</span>).setCellValue(contractProductVo.getFactoryName());</span><br><span class="line">            rowN.getCell(<span class="number">6</span>).setCellValue(dateFormat.format(contractProductVo.getDeliveryPeriod()));</span><br><span class="line">            rowN.getCell(<span class="number">7</span>).setCellValue(dateFormat.format(contractProductVo.getShipTime()));</span><br><span class="line">            rowN.getCell(<span class="number">8</span>).setCellValue(contractProductVo.getTradeTerms());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下载方法</span></span><br><span class="line">    ByteArrayOutputStream out = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">    workbook.write(out);</span><br><span class="line">    DownloadUtils.download(out, response, <span class="string">"出货表.xlsx"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="百万级别数据导入"><a href="#百万级别数据导入" class="headerlink" title="百万级别数据导入"></a>百万级别数据导入</h2><h3 id="自定义处理器-直接复制"><a href="#自定义处理器-直接复制" class="headerlink" title="自定义处理器(直接复制)"></a>自定义处理器(直接复制)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.poi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.poi.openxml4j.exceptions.InvalidFormatException;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.openxml4j.opc.OPCPackage;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.openxml4j.opc.PackageAccess;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.eventusermodel.XSSFReader;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.eventusermodel.XSSFSheetXMLHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.model.SharedStringsTable;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.model.StylesTable;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.InputSource;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.XMLReader;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.helpers.XMLReaderFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用于处理百万级别数据</span></span><br><span class="line"><span class="comment">//需要我们做的是在SheetHandler中自定义处理逻辑</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelParse</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">(String path)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//解析器</span></span><br><span class="line">        SheetHandler hl = <span class="keyword">new</span> SheetHandler();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.根据 Excel 获取 OPCPackage 对象</span></span><br><span class="line">        OPCPackage pkg = OPCPackage.open(path, PackageAccess.READ);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//2.创建 XSSFReader 对象</span></span><br><span class="line">            XSSFReader reader = <span class="keyword">new</span> XSSFReader(pkg);</span><br><span class="line">            <span class="comment">//3.获取 SharedStringsTable 对象</span></span><br><span class="line">            SharedStringsTable sst = reader.getSharedStringsTable();</span><br><span class="line">            <span class="comment">//4.获取 StylesTable 对象</span></span><br><span class="line">            StylesTable styles = reader.getStylesTable();</span><br><span class="line">            XMLReader parser = XMLReaderFactory.createXMLReader();</span><br><span class="line">            <span class="comment">// 处理公共属性</span></span><br><span class="line">            parser.setContentHandler(<span class="keyword">new</span> XSSFSheetXMLHandler(styles, sst, hl, <span class="keyword">false</span>));</span><br><span class="line">            XSSFReader.SheetIterator sheets = (XSSFReader.SheetIterator) reader.getSheetsData();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//逐行读取逐行解析</span></span><br><span class="line">            <span class="keyword">while</span> (sheets.hasNext()) &#123;</span><br><span class="line">                InputStream sheetstream = sheets.next();</span><br><span class="line">                InputSource sheetSource = <span class="keyword">new</span> InputSource(sheetstream);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    parser.parse(sheetSource);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    sheetstream.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            pkg.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        parse(<span class="string">"c:/upload/data.xlsx"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义解析器"><a href="#自定义解析器" class="headerlink" title="自定义解析器"></a>自定义解析器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.poi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.eventusermodel.XSSFSheetXMLHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFComment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义解析器,负责每行代码的处理</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SheetHandler</span> <span class="keyword">implements</span> <span class="title">XSSFSheetXMLHandler</span>.<span class="title">SheetContentsHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ContractProductVo contractProductVo = <span class="keyword">null</span>;</span><br><span class="line">    List&lt;ContractProductVo&gt; list = <span class="keyword">new</span> ArrayList&lt;ContractProductVo&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//rowIndex 行索引</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startRow</span><span class="params">(<span class="keyword">int</span> rowIndex)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"进入了第"</span> + rowIndex + <span class="string">"行"</span>);</span><br><span class="line">        contractProductVo =  <span class="keyword">new</span> ContractProductVo();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//每个单元格中要做的操作</span></span><br><span class="line">    <span class="comment">//cellName  单元格名称   C2</span></span><br><span class="line">    <span class="comment">//cellValue 单元格中的值</span></span><br><span class="line">    <span class="comment">//xssfComment  单元格批注</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cell</span><span class="params">(String cellName, String cellValue, XSSFComment xssfComment)</span> </span>&#123;</span><br><span class="line">        System.out.print(cellName + <span class="string">":"</span> + cellValue+<span class="string">"   "</span>);</span><br><span class="line">        <span class="keyword">if</span> (cellName.startsWith(<span class="string">"B"</span>))&#123;</span><br><span class="line">            contractProductVo.setCustomName(cellValue);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (cellName.startsWith(<span class="string">"C"</span>))&#123;</span><br><span class="line">            contractProductVo.setContractNo(cellValue);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endRow</span><span class="params">(<span class="keyword">int</span> rowIndex)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"离开了第"</span> + rowIndex + <span class="string">"行"</span>);</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        </span><br><span class="line">        list.add(contractProductVo);</span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="EasyPOI"><a href="#EasyPOI" class="headerlink" title="EasyPOI"></a>EasyPOI</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>​    easypoi主打的功能就是容易，让一个没见接触过poi的人员，就可以方便的写出Excel导出和导入功能，它通过简单的注解和模板语言(熟悉的表达式语法)，完成以前复杂的写法。</p><p>官方文档：<a href="http://easypoi.mydoc.io/" target="_blank" rel="noopener">http://easypoi.mydoc.io/</a></p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.afterturn<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easypoi-base<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.afterturn<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easypoi-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.afterturn<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easypoi-annotation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="定义实体"><a href="#定义实体" class="headerlink" title="定义实体"></a>定义实体</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContractProductVo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"客户"</span>)</span><br><span class="line">    <span class="keyword">private</span> String customName;        <span class="comment">//客户名称</span></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"合同号"</span>)</span><br><span class="line">    <span class="keyword">private</span> String contractNo;        <span class="comment">//合同号，订单号</span></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"货号"</span>)</span><br><span class="line">    <span class="keyword">private</span> String productNo;        <span class="comment">//货号</span></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"数量"</span>,type = <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer cnumber;        <span class="comment">//数量</span></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"工厂"</span>)</span><br><span class="line">    <span class="keyword">private</span> String factoryName;        <span class="comment">//厂家名称</span></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"工厂交期"</span>, format = <span class="string">"yyyy-MM-dd"</span>,width = <span class="number">15</span>)</span><br><span class="line">    <span class="keyword">private</span> Date deliveryPeriod;    <span class="comment">//交货期限</span></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"船期"</span>, format = <span class="string">"yyyy-MM-dd"</span>,width = <span class="number">15</span>)</span><br><span class="line">    <span class="keyword">private</span> Date shipTime;            <span class="comment">//船期</span></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"贸易条款"</span>)</span><br><span class="line">    <span class="keyword">private</span> String tradeTerms;        <span class="comment">//贸易条款</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCustomName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> customName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomName</span><span class="params">(String customName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.customName = customName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContractNo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> contractNo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContractNo</span><span class="params">(String contractNo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.contractNo = contractNo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProductNo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> productNo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProductNo</span><span class="params">(String productNo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.productNo = productNo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getCnumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cnumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCnumber</span><span class="params">(Integer cnumber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cnumber = cnumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFactoryName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> factoryName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFactoryName</span><span class="params">(String factoryName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.factoryName = factoryName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getDeliveryPeriod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deliveryPeriod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDeliveryPeriod</span><span class="params">(Date deliveryPeriod)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.deliveryPeriod = deliveryPeriod;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getShipTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> shipTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setShipTime</span><span class="params">(Date shipTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.shipTime = shipTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTradeTerms</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tradeTerms;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTradeTerms</span><span class="params">(String tradeTerms)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tradeTerms = tradeTerms;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ContractProductVo&#123;"</span> +</span><br><span class="line">                <span class="string">"customName='"</span> + customName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", contractNo='"</span> + contractNo + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", productNo='"</span> + productNo + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", cnumber="</span> + cnumber +</span><br><span class="line">                <span class="string">", factoryName='"</span> + factoryName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", deliveryPeriod="</span> + deliveryPeriod +</span><br><span class="line">                <span class="string">", shipTime="</span> + shipTime +</span><br><span class="line">                <span class="string">", tradeTerms='"</span> + tradeTerms + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建excel"><a href="#创建excel" class="headerlink" title="创建excel"></a>创建excel</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateExcel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1.定义excel配置</span></span><br><span class="line">        ExportParams exportParams = <span class="keyword">new</span> ExportParams();</span><br><span class="line">        exportParams.setSheetName(<span class="string">"Sheet1"</span>);<span class="comment">// 页名称</span></span><br><span class="line">        exportParams.setTitle(<span class="string">"2015年01月份出货表"</span>);<span class="comment">// 大标题</span></span><br><span class="line">        exportParams.setType(ExcelType.XSSF);<span class="comment">// 07及以上版本</span></span><br><span class="line">        <span class="comment">// 2.创建workbook对象</span></span><br><span class="line">        Workbook wb = ExcelExportUtil.exportExcel(exportParams, ContractProductVo<span class="class">.<span class="keyword">class</span>, <span class="title">getData</span>())</span>;</span><br><span class="line">        <span class="comment">// 3.导出到文件</span></span><br><span class="line">        FileOutputStream out = <span class="keyword">new</span> FileOutputStream(<span class="string">"d:/demo.xlsx"</span>);</span><br><span class="line">        wb.write(out);</span><br><span class="line">        wb.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从数据库中查找了数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;ContractProductVo&gt; <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;ContractProductVo&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            ContractProductVo vo = <span class="keyword">new</span> ContractProductVo();</span><br><span class="line">            vo.setCustomName(<span class="string">"客户"</span>+i);</span><br><span class="line">            vo.setContractNo(<span class="string">"合同号"</span>+i);</span><br><span class="line">            vo.setProductNo(<span class="string">"货号"</span>+i);</span><br><span class="line">            vo.setCnumber(i);</span><br><span class="line">            vo.setFactoryName(<span class="string">"工厂"</span>+i);</span><br><span class="line">            vo.setDeliveryPeriod(<span class="keyword">new</span> Date());</span><br><span class="line">            vo.setShipTime(<span class="keyword">new</span> Date());</span><br><span class="line">            vo.setTradeTerms(<span class="string">"条款"</span>+i);</span><br><span class="line">            list.add(vo);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解析excel"><a href="#解析excel" class="headerlink" title="解析excel"></a>解析excel</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParseExcel</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.解析excel的配置参数</span></span><br><span class="line">        ImportParams params = <span class="keyword">new</span> ImportParams();</span><br><span class="line">        params.setTitleRows(<span class="number">1</span>); <span class="comment">// 大标题行数</span></span><br><span class="line">        params.setHeadRows(<span class="number">1</span>); <span class="comment">//  列标题行数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.实现解析</span></span><br><span class="line">        List&lt;ContractProductVo&gt; list = ExcelImportUtil.importExcel(<span class="keyword">new</span> File(<span class="string">"D:/demo.xlsx"</span>), ContractProductVo<span class="class">.<span class="keyword">class</span>, <span class="title">params</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.遍历输出</span></span><br><span class="line">        <span class="keyword">for</span> (ContractProductVo contractProductVo : list) &#123;</span><br><span class="line">            System.out.println(contractProductVo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p><strong>定时任务</strong>：按照配置的时间规则，自动执行java类中的方法</p><p><strong>实现框架</strong>：Quartz、Spring Task</p><p><strong>应用场景</strong>：</p><ul><li>某些网站会定时发送优惠邮件</li><li>银行系统还款日信用卡催收款短信</li><li>某些应用的生日祝福短信等</li></ul><p><strong>Quartz</strong> 是一个完全由 Java 编写的开源任务调度框架，为在 Java 应用程序中进行任务调度提供了简单却强大的机制。</p><p>官网地址：<a href="http://www.quartz-scheduler.org/" target="_blank" rel="noopener">http://www.quartz-scheduler.org/</a></p><h2 id="核心组件"><a href="#核心组件" class="headerlink" title="核心组件"></a>核心组件</h2><p>Quartz 定时任务调度框架（按照配置的时间规则，自动执行java<strong>类</strong>中的<strong>方法</strong>）</p><ul><li><p><strong>Job</strong>：需要执行的java类</p></li><li><p><strong>JobDetail</strong>：任务细节，用来指定java类和具体执行的方法</p></li><li><p><strong>Trigger</strong>：触发器，配置时间规则和JobDetail</p></li><li><p><strong>Scheduler</strong>：调度器，统一调度并管理所有的Trigger</p><p><img data-src="/assets/image-20201018143928031.png" alt="image-20201018143928031"> </p></li></ul><h2 id="快速入门-1"><a href="#快速入门-1" class="headerlink" title="快速入门"></a>快速入门</h2><blockquote><p>需求：每间隔五秒，向控制台输出当前时间</p></blockquote><h3 id="创建一个新工程-导入依赖"><a href="#创建一个新工程-导入依赖" class="headerlink" title="创建一个新工程,导入依赖"></a>创建一个新工程,导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.quartz-scheduler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建Job类-创建JobDetail方法"><a href="#创建Job类-创建JobDetail方法" class="headerlink" title="创建Job类,创建JobDetail方法"></a>创建Job类,创建JobDetail方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyJob</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"发送邮件"</span> + <span class="keyword">new</span> Date().toLocaleString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSms</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加一个配置文件"><a href="#添加一个配置文件" class="headerlink" title="添加一个配置文件"></a>添加一个配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--1.配置Job：自定义java类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myJob"</span> <span class="attr">class</span>=<span class="string">"com.sun.job.MyJob"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--2.配置JobDetail：执行任务来的方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jobDetail"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--1.确定任务类--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetObject"</span> <span class="attr">ref</span>=<span class="string">"myJob"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--2.确认任务的方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetMethod"</span> <span class="attr">value</span>=<span class="string">"sendEmail"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--3.配置Trigger：根据时间规则，触发方法执行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"trigger"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.CronTriggerFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--1.指定时间规则--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cronExpression"</span> <span class="attr">value</span>=<span class="string">"*/5 * * * * ? *"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--2.指定JobDetail--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jobDetail"</span> <span class="attr">ref</span>=<span class="string">"jobDetail"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--4.配置Scheduler：统一管理配置trigger--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"调度器id"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.quartz.SchedulerFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"triggers"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"trigger"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzStart</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        ClassPathXmlApplicationContext act</span><br><span class="line">                = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext-quartz.xml"</span>);</span><br><span class="line">        act.start();</span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Cron表达式【重点】-7子"><a href="#Cron表达式【重点】-7子" class="headerlink" title="Cron表达式【重点】(7子)"></a>Cron表达式【重点】(7子)</h2><p>Cron表达式简单来说就是一个字符串，有如下两种语法格式：</p><ul><li>Seconds Minutes Hours DayofMonth Month DayofWeek Year(七个域)</li><li>Seconds Minutes Hours DayofMonth Month DayofWeek(六个域)</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">cron  时间表达式（配置时间规则）</span><br><span class="line"><span class="code">秒           分           时         日          月              周             年</span></span><br><span class="line"><span class="code">0-59      0-59         0-23       1-31        1-12            1-7           1970-2099</span></span><br><span class="line"><span class="code">*/5          *            *          5W           *               3L              *</span></span><br><span class="line"><span class="code">                                      </span></span><br><span class="line">常用的符号</span><br><span class="line"><span class="code">*：表示任意，例如在Minutes域使用，即表示每分钟都会触发</span></span><br><span class="line"><span class="code">?：表示忽略，只能用在DayofMonth和DayofWeek两个域</span></span><br><span class="line"><span class="code">-：表示范围，例如在Minutes域使用5-20，表示从5分到20分钟每分钟触发一次 </span></span><br><span class="line"><span class="code">/：表示起始时间开始触发，然后每隔固定时间触发一次，例如在Minutes域使用5/20,则意味着在5分钟触发一次，而25，45等分别触发一次. </span></span><br><span class="line"><span class="code">,：表示列出枚举值。例如：在Minutes域使用5,20，则意味着在5和20分每分钟触发一次。 </span></span><br><span class="line"><span class="code">L：表示最后，只能出现在DayofWeek和DayofMonth域。如果在DayofWeek域使用5L,意味着在最后的一个星期四触发。 </span></span><br><span class="line"><span class="code">W: 表示有效工作日(周一到周五)，只能出现在DayofMonth域，系统将在离指定日期的最近的有效工作日触发事件。</span></span><br><span class="line"><span class="code">例如：在DayofMonth使用5W，如果5日是星期六，则将在最近的工作日：星期五，即4日触发。</span></span><br><span class="line"><span class="code"> 如果5日是星期天，则在6日(周一)触发；如果5日在星期一到星期五中的一天，则就在5日触发。 另外一点，W的最近寻找不会跨过月份。</span></span><br><span class="line"><span class="code">LW:这两个字符可以连用，表示在某个月最后一个工作日，即最后一个星期五。 </span></span><br><span class="line"><span class="code">#:用于确定第几个星期几，只能出现在DayofMonth域。例如在4#2，表示某月的第二个星期三。</span></span><br><span class="line"></span><br><span class="line">常用表达式例子</span><br><span class="line"><span class="code">0 0 2 1 * ? *   表示在每月的1日的凌晨2点调整任务</span></span><br><span class="line"><span class="code">0 15 10 ? * MON-FRI   表示周一到周五每天上午10:15执行作业</span></span><br><span class="line"><span class="code">0 15 10 ? * 6L 2002-2006   表示2002-2006年的每个月的最后一个星期五上午10:15执行作</span></span><br><span class="line"><span class="code">0 0 10,14,16 * * ?   每天上午10点，下午2点，4点 </span></span><br><span class="line"><span class="code">0 0/30 9-17 * * ?   朝九晚五工作时间内每半小时 </span></span><br><span class="line"><span class="code">0 0 12 ? * WED    表示每个星期三中午12点 </span></span><br><span class="line"><span class="code">0 0 12 * * ?   每天中午12点触发 </span></span><br><span class="line"><span class="code">0 15 10 ? * *    每天上午10:15触发 </span></span><br><span class="line"><span class="code">0 15 10 * * ?     每天上午10:15触发 </span></span><br><span class="line"><span class="code">0 15 10 * * ? *    每天上午10:15触发 </span></span><br><span class="line"><span class="code">0 15 10 * * ? 2005    2005年的每天上午10:15触发 </span></span><br><span class="line"><span class="code">0 * 14 * * ?     在每天下午2点到下午2:59期间的每1分钟触发 </span></span><br><span class="line"><span class="code">0 0/5 14 * * ?    在每天下午2点到下午2:55期间的每5分钟触发 </span></span><br><span class="line"><span class="code">0 0/5 14,18 * * ?     在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发 </span></span><br><span class="line"><span class="code">0 0-5 14 * * ?    在每天下午2点到下午2:05期间的每1分钟触发 </span></span><br><span class="line"><span class="code">0 10,44 14 ? 3 WED    每年三月的星期三的下午2:10和2:44触发 </span></span><br><span class="line"><span class="code">0 15 10 ? * MON-FRI    周一至周五的上午10:15触发 </span></span><br><span class="line"><span class="code">0 15 10 15 * ?    每月15日上午10:15触发 </span></span><br><span class="line"><span class="code">0 15 10 L * ?    每月最后一日的上午10:15触发 </span></span><br><span class="line"><span class="code">0 15 10 ? * 6L    每月的最后一个星期五上午10:15触发 </span></span><br><span class="line"><span class="code">0 15 10 ? * 6L 2002-2005   2002年至2005年的每月的最后一个星期五上午10:15触发 </span></span><br><span class="line"><span class="code">0 15 10 ? * 6#3   每月的第三个星期五上午10:15触发</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;出货表导出&quot;&gt;&lt;a href=&quot;#出货表导出&quot; class=&quot;headerlink&quot; title=&quot;出货表导出&quot;&gt;&lt;/a&gt;出货表导出&lt;/h1&gt;&lt;h2 id=&quot;跳转出货表页面&quot;&gt;&lt;a href=&quot;#跳转出货表页面&quot; class=&quot;headerlink&quot; title=&quot;跳转出货表页面&quot;&gt;&lt;/a&gt;跳转出货表页面&lt;/h2&gt;&lt;p&gt;在&lt;code&gt;ContractController&lt;/code&gt;中添加下面方法&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@RequestMapping&lt;/span&gt;(path = &lt;span class=&quot;string&quot;&gt;&quot;/print&quot;&lt;/span&gt;, name = &lt;span class=&quot;string&quot;&gt;&quot;跳转出货表页面&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;/cargo/print/contract-print&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="其他" scheme="http://sunmoon.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="poi报表技术" scheme="http://sunmoon.com/tags/poi%E6%8A%A5%E8%A1%A8%E6%8A%80%E6%9C%AF/"/>
    
      <category term="百万数据报表技术" scheme="http://sunmoon.com/tags/%E7%99%BE%E4%B8%87%E6%95%B0%E6%8D%AE%E6%8A%A5%E8%A1%A8%E6%8A%80%E6%9C%AF/"/>
    
      <category term="EasyPOI" scheme="http://sunmoon.com/tags/EasyPOI/"/>
    
      <category term="定时任务" scheme="http://sunmoon.com/tags/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    
      <category term="Quartz" scheme="http://sunmoon.com/tags/Quartz/"/>
    
  </entry>
  
  <entry>
    <title>POI报表技术&amp;细粒度权限控制</title>
    <link href="http://sunmoon.com/2020/10/17/POI%E6%8A%A5%E8%A1%A8%E6%8A%80%E6%9C%AF-%E7%BB%86%E7%B2%92%E5%BA%A6%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/"/>
    <id>http://sunmoon.com/2020/10/17/POI%E6%8A%A5%E8%A1%A8%E6%8A%80%E6%9C%AF-%E7%BB%86%E7%B2%92%E5%BA%A6%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/</id>
    <published>2020-10-17T12:25:54.000Z</published>
    <updated>2020-10-17T12:29:05.921Z</updated>
    
    <content type="html"><![CDATA[<h1 id="附件管理"><a href="#附件管理" class="headerlink" title="附件管理"></a>附件管理</h1><h2 id="附件列表"><a href="#附件列表" class="headerlink" title="附件列表"></a>附件列表</h2><p><img data-src="/assets/image-20200710001758870.png" alt="image-20200710001758870"></p><p>在<code>export_manager_web</code>模块的<code>com.itheima.web.controller.cargo</code>下创建<code>ExtCproductController</code></p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web.controller.cargo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageInfo;</span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.cargo.ExtCproductExample;</span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.cargo.Factory;</span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.cargo.FactoryExample;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.cargo.ExtCproductService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.cargo.FactoryService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.web.controller.BaseController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/cargo/extCproduct"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtCproductController</span> <span class="keyword">extends</span> <span class="title">BaseController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span></span><br><span class="line">    <span class="keyword">private</span> ExtCproductService extCproductService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span></span><br><span class="line">    <span class="keyword">private</span> FactoryService factoryService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/list"</span>, name = <span class="string">"附件列表查询"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @RequestParam(defaultValue = <span class="string">"1"</span>, name = <span class="string">"page"</span>)</span> Integer pageNum,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(defaultValue = <span class="string">"10"</span>)</span> Integer pageSize,</span></span><br><span class="line"><span class="function">            String contractId, String contractProductId) </span>&#123;</span><br><span class="line"></span><br><span class="line">        ExtCproductExample extCproductExample = <span class="keyword">new</span> ExtCproductExample();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1 查询当前货物下的所有附件</span></span><br><span class="line">        extCproductExample.createCriteria().andContractProductIdEqualTo(contractProductId);</span><br><span class="line">        PageInfo pageInfo = extCproductService.findByPage(pageNum, pageSize, extCproductExample);</span><br><span class="line">        request.setAttribute(<span class="string">"page"</span>, pageInfo);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2 查询所有生产附件的厂家列表</span></span><br><span class="line">        FactoryExample factoryExample = <span class="keyword">new</span> FactoryExample();</span><br><span class="line">        factoryExample.createCriteria().andCtypeEqualTo(<span class="string">"附件"</span>);</span><br><span class="line">        List&lt;Factory&gt; factoryList = factoryService.findAll(factoryExample);</span><br><span class="line">        request.setAttribute(<span class="string">"factoryList"</span>, factoryList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 回传合同id 和  货物id</span></span><br><span class="line">        request.setAttribute(<span class="string">"contractId"</span>, contractId);</span><br><span class="line">        request.setAttribute(<span class="string">"contractProductId"</span>, contractProductId);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/cargo/extc/extc-list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @RequestMapping(value = "/toUpdate", name = "跳转附件编辑页面")</span></span><br><span class="line"><span class="comment">//    public String toUpdate(String id) &#123;</span></span><br><span class="line"><span class="comment">//        //1. 根据id查询当前附件信息</span></span><br><span class="line"><span class="comment">//        ExtCproduct extCproduct = extCproductService.findById(id);</span></span><br><span class="line"><span class="comment">//        request.setAttribute("extCproduct", extCproduct);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //2. 查询所有生产附件的厂家列表</span></span><br><span class="line"><span class="comment">//        FactoryExample factoryExample = new FactoryExample();</span></span><br><span class="line"><span class="comment">//        factoryExample.createCriteria().andCtypeEqualTo("附件");</span></span><br><span class="line"><span class="comment">//        List&lt;Factory&gt; factoryList = factoryService.findAll(factoryExample);</span></span><br><span class="line"><span class="comment">//        request.setAttribute("factoryList", factoryList);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //3. 转发到修改页面</span></span><br><span class="line"><span class="comment">//        return "/cargo/extc/extc-update";</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    @RequestMapping(value = "/edit", name = "附件新增或编辑")</span></span><br><span class="line"><span class="comment">//    public String edit(ExtCproduct extCproduct) &#123;</span></span><br><span class="line"><span class="comment">//        if (StringUtils.isEmpty(extCproduct.getId())) &#123;</span></span><br><span class="line"><span class="comment">//            //1. 设置主键</span></span><br><span class="line"><span class="comment">//            extCproduct.setId(UUID.randomUUID().toString());</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            //2. 设置企业信息</span></span><br><span class="line"><span class="comment">//            extCproduct.setCompanyId(getCompanyId());</span></span><br><span class="line"><span class="comment">//            extCproduct.setCompanyName(getCompanyName());</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            extCproductService.save(extCproduct);</span></span><br><span class="line"><span class="comment">//        &#125; else &#123;</span></span><br><span class="line"><span class="comment">//            extCproductService.update(extCproduct);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //重定向到list方法</span></span><br><span class="line"><span class="comment">//        return "redirect:/cargo/extCproduct/list.do?contractId=" + extCproduct.getContractId();</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    @RequestMapping(value = "/delete", name = "附件删除")</span></span><br><span class="line"><span class="comment">//    public String delete(String id, String contractId) &#123;</span></span><br><span class="line"><span class="comment">//        //调用service删除</span></span><br><span class="line"><span class="comment">//        extCproductService.delete(id);//附件id</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //重定向到list方法</span></span><br><span class="line"><span class="comment">//        return "redirect:/cargo/extCproduct/list.do?contractId=" + contractId;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="新增附件"><a href="#新增附件" class="headerlink" title="新增附件"></a>新增附件</h2><h3 id="ExtCproductController"><a href="#ExtCproductController" class="headerlink" title="ExtCproductController"></a>ExtCproductController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/edit"</span>, name = <span class="string">"附件新增或编辑"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">edit</span><span class="params">(ExtCproduct extCproduct)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(extCproduct.getId())) &#123;</span><br><span class="line">        <span class="comment">//1. 设置主键</span></span><br><span class="line">        extCproduct.setId(UUID.randomUUID().toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 设置企业信息</span></span><br><span class="line">        extCproduct.setCompanyId(getCompanyId());</span><br><span class="line">        extCproduct.setCompanyName(getCompanyName());</span><br><span class="line"></span><br><span class="line">        extCproductService.save(extCproduct);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        extCproductService.update(extCproduct);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重定向到list方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/cargo/extCproduct/list.do?contractId="</span> + extCproduct.getContractId() + <span class="string">"&amp;contractProductId="</span> + extCproduct.getContractProductId();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ExtCproductServiceImpl"><a href="#ExtCproductServiceImpl" class="headerlink" title="ExtCproductServiceImpl"></a>ExtCproductServiceImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(ExtCproduct extCproduct)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//======================================查询===================================//</span></span><br><span class="line">    <span class="comment">//1. 根据合同id,得到合同对象</span></span><br><span class="line">    Contract contract = contractDao.selectByPrimaryKey(extCproduct.getContractId());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//======================================附件新增===================================//</span></span><br><span class="line">    <span class="comment">//1. 计算小计金额</span></span><br><span class="line">    Double amount = extCproduct.getPrice() * extCproduct.getCnumber();</span><br><span class="line">    extCproduct.setAmount(amount);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 执行保存</span></span><br><span class="line">    extCproductDao.insertSelective(extCproduct);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//======================================货物无影响===================================//</span></span><br><span class="line">    <span class="comment">//======================================合同修改===================================//</span></span><br><span class="line">    <span class="comment">//1. 修改合同中的附件种数 + 1</span></span><br><span class="line">    contract.setExtNum(contract.getExtNum() + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 修改合同总金额 + 小计</span></span><br><span class="line">    contract.setTotalAmount(contract.getTotalAmount() + amount);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 执行修改</span></span><br><span class="line">    contractDao.updateByPrimaryKeySelective(contract);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改附件"><a href="#修改附件" class="headerlink" title="修改附件"></a>修改附件</h2><p><img data-src="/assets/image-20200710002137559.png" alt="image-20200710002137559"></p><h3 id="跳转修改页面"><a href="#跳转修改页面" class="headerlink" title="跳转修改页面"></a>跳转修改页面</h3><p>修改ExtCproductController添加代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@RequestMapping</span>(value = <span class="string">"/toUpdate"</span>, name = <span class="string">"跳转附件编辑页面"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toUpdate</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1. 根据id查询当前附件信息</span></span><br><span class="line">    ExtCproduct extCproduct = extCproductService.findById(id);</span><br><span class="line">    request.setAttribute(<span class="string">"extCproduct"</span>, extCproduct);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 查询所有生产附件的厂家列表</span></span><br><span class="line">    FactoryExample factoryExample = <span class="keyword">new</span> FactoryExample();</span><br><span class="line">    factoryExample.createCriteria().andCtypeEqualTo(<span class="string">"附件"</span>);</span><br><span class="line">    List&lt;Factory&gt; factoryList = factoryService.findAll(factoryExample);</span><br><span class="line">    request.setAttribute(<span class="string">"factoryList"</span>, factoryList);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 转发到修改页面</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"/cargo/extc/extc-update"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改附件-1"><a href="#修改附件-1" class="headerlink" title="修改附件"></a>修改附件</h3><p>修改ExtCproductServiceImpl添加代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(ExtCproduct extCproduct)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//======================================查询===================================//</span></span><br><span class="line">    <span class="comment">//1. 根据合同id,得到合同对象</span></span><br><span class="line">    Contract contract = contractDao.selectByPrimaryKey(extCproduct.getContractId());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 根据附件id查询附件的信息</span></span><br><span class="line">    ExtCproduct extCproductOld = extCproductDao.selectByPrimaryKey(extCproduct.getId());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//======================================附件修改===================================//</span></span><br><span class="line">    <span class="comment">//1. 计算小计金额</span></span><br><span class="line">    Double amount = extCproduct.getPrice() * extCproduct.getCnumber();</span><br><span class="line">    extCproduct.setAmount(amount);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 执行修改</span></span><br><span class="line">    extCproductDao.updateByPrimaryKeySelective(extCproduct);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//======================================货物无影响===================================//</span></span><br><span class="line">    <span class="comment">//======================================合同修改===================================//</span></span><br><span class="line">    <span class="comment">//1. 修改总金额 - 源小计  + 新小计</span></span><br><span class="line">    contract.setTotalAmount(contract.getTotalAmount() - extCproductOld.getAmount() + amount);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 执行合同修改</span></span><br><span class="line">    contractDao.updateByPrimaryKeySelective(contract);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除附件"><a href="#删除附件" class="headerlink" title="删除附件"></a>删除附件</h2><p><img data-src="/assets/image-20200710002223820.png" alt="image-20200710002223820"></p><h3 id="ExtCproductController-1"><a href="#ExtCproductController-1" class="headerlink" title="ExtCproductController"></a>ExtCproductController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/delete"</span>, name = <span class="string">"附件删除"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(String id, String contractId, String contractProductId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//调用service删除</span></span><br><span class="line">    extCproductService.delete(id);<span class="comment">//附件id</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//重定向到list方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/cargo/extCproduct/list.do?contractId="</span> + contractId + <span class="string">"&amp;contractProductId="</span> + contractProductId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ExtCproductServiceImpl-1"><a href="#ExtCproductServiceImpl-1" class="headerlink" title="ExtCproductServiceImpl"></a>ExtCproductServiceImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//======================================查询===================================//</span></span><br><span class="line">    <span class="comment">//1. 根据附件id查询附件信息</span></span><br><span class="line">    ExtCproduct extCproduct = extCproductDao.selectByPrimaryKey(id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 根据合同id查询合同信息</span></span><br><span class="line">    Contract contract = contractDao.selectByPrimaryKey(extCproduct.getContractId());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//======================================附件删除===================================//</span></span><br><span class="line">    extCproductDao.deleteByPrimaryKey(id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//======================================货物无影响===================================//</span></span><br><span class="line">    <span class="comment">//======================================合同修改===================================//</span></span><br><span class="line">    <span class="comment">//1. 修改合同中的附件数量 - 1</span></span><br><span class="line">    contract.setExtNum(contract.getExtNum() - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 修改合同中的总金额 - 要删除的附件的小计</span></span><br><span class="line">    contract.setTotalAmount(contract.getTotalAmount() - extCproduct.getAmount());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 执行修改</span></span><br><span class="line">    contractDao.updateByPrimaryKeySelective(contract);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="项目中的图片上传"><a href="#项目中的图片上传" class="headerlink" title="项目中的图片上传"></a>项目中的图片上传</h1><blockquote><p>前端上传到后台: SpringMVC 文件上传解析器( 前端三要素 )</p><p>后台上传到七牛云: 工具类</p></blockquote><p>在当前项目中的==货物和附件的添加和修改==页面,  都是需要做文件上传功能的,  下面就来实现以下</p><h2 id="工具类准备"><a href="#工具类准备" class="headerlink" title="工具类准备"></a>工具类准备</h2><p><img data-src="/assets/image-20201017092039067.png" alt="image-20201017092039067"> </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">qiniu.accessKey=xxxx</span><br><span class="line">qiniu.secretKey=xxxx</span><br><span class="line">qiniu.bucket=xxxx</span><br><span class="line">qiniu.rtValue=xxxx</span><br></pre></td></tr></table></figure><p>注意: 一定要删除dao模块中Spring配置文件中的引入外部配置的部分</p><p><img data-src="/assets/image-20201017092300933.png" alt="image-20201017092300933"></p><h2 id="配置文件上传解析器"><a href="#配置文件上传解析器" class="headerlink" title="配置文件上传解析器"></a>配置文件上传解析器</h2><p>在<code>export_manager_web</code>模块下的resources下的<code>spring/spring-mvc.xml</code>文件中添加文件上传解析器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件上传解析器, 这个id不能随便改--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置上传文件的最大尺寸为 5MB --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"5242880"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h2><h3 id="页面代码调整"><a href="#页面代码调整" class="headerlink" title="页面代码调整"></a>页面代码调整</h3><p>修改页面中文件上传表单的enctype=”multipart/form-data”属性</p><p><img data-src="/assets/image-20200705103400317.png" alt="image-20200705103400317"> </p><h3 id="后台代码编写"><a href="#后台代码编写" class="headerlink" title="后台代码编写"></a>后台代码编写</h3><p><img data-src="/assets/image-20200705103940014.png" alt=""></p><h1 id="细粒度权限控制"><a href="#细粒度权限控制" class="headerlink" title="细粒度权限控制"></a>细粒度权限控制</h1><blockquote><p>粗粒度权限：将权限控制到类型级别 （张三可以访问部门信息 ， 但是不能访问用户信息）   shiro</p><p>细粒度权限：将权限控制到数据级别 （张三可以访问1号用户信息， 但是不能访问2号用户信息） 自己写SQL</p></blockquote><p>一个优秀的后台程序应当做到对权限的细粒度控制, 即数据级别的权限控制</p><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>在我们的系统中，除了两类管理员之外，员工也分为三类:</p><ul><li>普通员工：只能看自己的合同数据</li><li>部门经理：可以看到本部分所有员工的合同数据</li><li>总经理：可以看到本部门及所有子部门的合同数据</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>4  普通员工：只能看自己的合同数据                    select * from co<span class="emphasis">_contract where  create_</span>by = 'session获取登录人的id'</span><br><span class="line"><span class="bullet">- </span>3  部门经理：可以看到本部分所有员工的合同数据         select * from co<span class="emphasis">_contract where  create_</span>dept =  'session获取登录人的所在部门的id'</span><br><span class="line"><span class="bullet">- </span>2  总经理：可以看到本部门及所有子部门的合同数据       select * from co<span class="emphasis">_contract where  create_</span>dept like 'session获取登录人的所在部门的id%'</span><br><span class="line"></span><br><span class="line">if(degree == 4)&#123;</span><br><span class="line"><span class="code">select * from co_contract where  create_by = 'session获取登录人的id'</span></span><br><span class="line">&#125;else if(degree == 3)&#123;</span><br><span class="line"> select * from co<span class="emphasis">_contract where  create_</span>dept =  'session获取登录人的所在部门的id'</span><br><span class="line">&#125;else if(degree  == 2)&#123;</span><br><span class="line"><span class="code">select * from co_contract where  create_dept like 'session获取登录人的所在部门的id%'</span></span><br><span class="line">&#125;else&#123;</span><br><span class="line"><span class="code">不受细粒度权限控制</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>修改<code>ContractController</code>中查询合同列表的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/list"</span>, name = <span class="string">"合同列表查询"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @RequestParam(defaultValue = <span class="string">"1"</span>, name = <span class="string">"page"</span>)</span> Integer pageNum,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(defaultValue = <span class="string">"10"</span>)</span> Integer pageSize) </span>&#123;</span><br><span class="line"></span><br><span class="line">        ContractExample contractExample = <span class="keyword">new</span> ContractExample();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1 封装条件</span></span><br><span class="line">        ContractExample.Criteria criteria = contractExample.createCriteria();</span><br><span class="line">        criteria.andCompanyIdEqualTo(getCompanyId());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断用户等级,根据等级不同去拼接不同条件</span></span><br><span class="line">        Integer degree = getUser().getDegree();</span><br><span class="line">        <span class="keyword">if</span> (degree == <span class="number">4</span>) &#123;<span class="comment">//普通员工</span></span><br><span class="line">            criteria.andCreateByEqualTo(getUser().getId());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (degree == <span class="number">3</span>) &#123;<span class="comment">//部门经理</span></span><br><span class="line">            criteria.andCreateDeptEqualTo(getUser().getDeptId());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (degree == <span class="number">2</span>) &#123;<span class="comment">//总经理</span></span><br><span class="line">            criteria.andCreateDeptLike(getUser().getDeptId() + <span class="string">"%"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2 排序</span></span><br><span class="line">        contractExample.setOrderByClause(<span class="string">"create_time desc"</span>);</span><br><span class="line"></span><br><span class="line">        PageInfo pageInfo = contractService.findByPage(pageNum, pageSize, contractExample);</span><br><span class="line">        request.setAttribute(<span class="string">"page"</span>, pageInfo);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/cargo/contract/contract-list"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><blockquote><p>系统中已经内置好了几个账户用于测试，结构如下，密码都是123 ，分配的角色都是销售专责，权限是只能管理购销合同</p></blockquote><p><img data-src="/assets/image-20200715102348775.png" alt="image-20200715102348775"> </p><h1 id="POI报表技术"><a href="#POI报表技术" class="headerlink" title="POI报表技术"></a>POI报表技术</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>在企业内部系统中，有很多地方会用到Excel表格，目前的Excel分为两个大的版本：Excel2003和Excel2007及以上。两者之间的区别如下：</p><table><thead><tr><th>区别</th><th>Excel 2003</th><th>Excel 2007及以上</th></tr></thead><tbody><tr><td>扩展名</td><td>xls</td><td>xlsx</td></tr><tr><td>数据结构</td><td>二进制格式</td><td>xml格式</td></tr><tr><td>单sheet数据量</td><td>行：65535、列：256</td><td>行：1048576、列：16384</td></tr><tr><td>特点</td><td>存储容量有限</td><td>基于xml压缩，占用空间小，操作效率高</td></tr></tbody></table><p>Java中常见的用来操作Excl的方式一般有2种：JXL和POI。</p><ul><li><p>JXL只能对Excel进行操作，属于比较老的框架，它只支持到Excel 95-2000的版本，现在已经停止更新和维护。</p></li><li><p>POI是apache的项目，可对微软的Word、Excel、PPT进行操作，包括office2003和2007两个大版本，是目前主流的操作execl的技术。</p></li></ul><h3 id="Execl基础概念"><a href="#Execl基础概念" class="headerlink" title="Execl基础概念"></a>Execl基础概念</h3><p>Execl基础概念在POI中的API描述如下:</p><table><thead><tr><th>Execl中的概念</th><th>2003版本对象</th><th>2007版本对象</th></tr></thead><tbody><tr><td>工作簿(WorkBook)</td><td>HssfWordBook</td><td>XssfWorkBook</td></tr><tr><td>工作表(Sheet)</td><td>HssfSheet</td><td>XssfSheet</td></tr><tr><td>行(Row)</td><td>HssfRow</td><td>XssfRow</td></tr><tr><td>单元格(Cell)</td><td>HssfCell</td><td>XssfCell</td></tr></tbody></table><h2 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h2><h3 id="创建工程-引入依赖"><a href="#创建工程-引入依赖" class="headerlink" title="创建工程,引入依赖"></a>创建工程,引入依赖</h3><p><img data-src="/assets/image-20201017104331665.png" alt="image-20201017104331665"> </p><h3 id="创建Execl"><a href="#创建Execl" class="headerlink" title="创建Execl"></a>创建Execl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.poi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Cell;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Row;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Sheet;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Workbook;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向本地的一个Execl中输入一句话</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreatePoiDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 创建一个Execl工作簿</span></span><br><span class="line">        Workbook workbook = <span class="keyword">new</span> XSSFWorkbook();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 使用工作簿创建工作表</span></span><br><span class="line">        Sheet sheet = workbook.createSheet();</span><br><span class="line">        sheet.setColumnWidth(<span class="number">0</span>, <span class="number">20</span> * <span class="number">256</span>); <span class="comment">//设置列宽,注意底层会自动除以256</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 使用工作表创建行</span></span><br><span class="line">        Row row = sheet.createRow(<span class="number">0</span>);<span class="comment">//创建第几行,使用索引计数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 使用行创建单元格</span></span><br><span class="line">        Cell cell = row.createCell(<span class="number">0</span>);<span class="comment">//创建第几个单元格, 使用索引计数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 向单元格中输入一句话</span></span><br><span class="line">        cell.setCellValue(<span class="string">"键盘敲烂,月薪过万"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6. 写出一个工作簿到磁盘</span></span><br><span class="line">        workbook.write(<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"C:\\upload\\test.xlsx"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="读取Execl"><a href="#读取Execl" class="headerlink" title="读取Execl"></a>读取Execl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.poi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从本地的execl中读取内容</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadPoiDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 读取本地文件--流--工作簿</span></span><br><span class="line">        Workbook workbook = <span class="keyword">new</span> XSSFWorkbook(<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"C:\\upload\\data.xlsx"</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 通过工作簿获取工作表</span></span><br><span class="line">        Sheet sheet = workbook.getSheetAt(<span class="number">0</span>);<span class="comment">//getSheetAt(i) 根据索引获取    getSheet(s) 根据名字获取</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 通过工作表获取行[ 遍历  开始0  结尾 位置]</span></span><br><span class="line">        <span class="comment">//注意: 获取行的时候,得到的是最后一行的索引,要想遍历,必须做+1操作</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sheet.getLastRowNum() + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            Row row = sheet.getRow(i);</span><br><span class="line">            <span class="comment">//4. 通过行获取单元格[遍历 开始0  结尾 位置 ]</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt; row.getLastCellNum(); j++) &#123;</span><br><span class="line">                Cell cell = row.getCell(j);</span><br><span class="line">                <span class="comment">//5. 获取单元格中的内容</span></span><br><span class="line">                System.out.print(getCellValue(cell) + <span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();<span class="comment">//换行</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析每个单元格的数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getCellValue</span><span class="params">(Cell cell)</span> </span>&#123;</span><br><span class="line">        Object obj = <span class="keyword">null</span>;</span><br><span class="line">        CellType cellType = cell.getCellType(); <span class="comment">//获取单元格数据类型</span></span><br><span class="line">        <span class="keyword">switch</span> (cellType) &#123;</span><br><span class="line">            <span class="keyword">case</span> STRING: &#123;</span><br><span class="line">                obj = cell.getStringCellValue();<span class="comment">//字符串</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//excel默认将日期也理解为数字</span></span><br><span class="line">            <span class="keyword">case</span> NUMERIC: &#123;</span><br><span class="line">                <span class="keyword">if</span> (DateUtil.isCellDateFormatted(cell)) &#123;</span><br><span class="line">                    obj = cell.getDateCellValue();<span class="comment">//日期</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    obj = cell.getNumericCellValue(); <span class="comment">// 数字</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> BOOLEAN: &#123;</span><br><span class="line">                obj = cell.getBooleanCellValue(); <span class="comment">// 布尔</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span>: &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="货物导入"><a href="#货物导入" class="headerlink" title="货物导入"></a>货物导入</h1><h2 id="需求分析-1"><a href="#需求分析-1" class="headerlink" title="需求分析"></a>需求分析</h2><p><img data-src="/assets/image-20200705160727179.png" alt="image-20200705160727179"> </p><h2 id="进入货物导入页面"><a href="#进入货物导入页面" class="headerlink" title="进入货物导入页面"></a>进入货物导入页面</h2><p><img data-src="/assets/image-20200710003418881.png" alt="image-20200710003418881"></p><p>修改ContractProductController, 添加方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/toImport"</span>, name = <span class="string">"跳转货物批量上传的页面"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toImport</span><span class="params">(String contractId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//回显合同id</span></span><br><span class="line">    request.setAttribute(<span class="string">"contractId"</span>, contractId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//转发到上传页面</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"/cargo/product/product-import"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现导入功能"><a href="#实现导入功能" class="headerlink" title="实现导入功能"></a>实现导入功能</h2><h3 id="ContractProductController"><a href="#ContractProductController" class="headerlink" title="ContractProductController"></a>ContractProductController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/import"</span>, name = <span class="string">"货物批量上传"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">imports</span><span class="params">(String contractId, MultipartFile file)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1. 接收传递过来的参数 合同id   货物的文件</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 读取一个File--流--工作簿</span></span><br><span class="line">    Workbook workbook = <span class="keyword">new</span> XSSFWorkbook(file.getInputStream());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 使用工作簿获取工作表</span></span><br><span class="line">    Sheet sheet = workbook.getSheetAt(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 从工作表获取行</span></span><br><span class="line">    List&lt;ContractProduct&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; sheet.getLastRowNum() + <span class="number">1</span>; i++) &#123;</span><br><span class="line">        Row row = sheet.getRow(i);</span><br><span class="line">        <span class="comment">//5 从行中获取单元格</span></span><br><span class="line">        Object[] objs = <span class="keyword">new</span> Object[<span class="number">9</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; row.getLastCellNum(); j++) &#123;</span><br><span class="line">            <span class="comment">//6. 从单元格中获取数据</span></span><br><span class="line">            Cell cell = row.getCell(j);</span><br><span class="line">            Object cellValue = getCellValue(cell);</span><br><span class="line">            objs[j - <span class="number">1</span>] = cellValue;</span><br><span class="line">        &#125;</span><br><span class="line">        ContractProduct contractProduct = <span class="keyword">new</span> ContractProduct(objs);</span><br><span class="line">        <span class="comment">//7 补全信息</span></span><br><span class="line">        contractProduct.setId(UUID.randomUUID().toString());</span><br><span class="line">        contractProduct.setContractId(contractId);</span><br><span class="line">        contractProduct.setCompanyId(getCompanyId());</span><br><span class="line">        contractProduct.setCompanyName(getCompanyName());</span><br><span class="line"></span><br><span class="line">        FactoryExample factoryExample = <span class="keyword">new</span> FactoryExample();</span><br><span class="line">        factoryExample.createCriteria().andFactoryNameEqualTo(contractProduct.getFactoryName());</span><br><span class="line">        List&lt;Factory&gt; factories = factoryService.findAll(factoryExample);</span><br><span class="line">        contractProduct.setFactoryId(factories.get(<span class="number">0</span>).getId());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//8. 封装一个List集合对象</span></span><br><span class="line">        list.add(contractProduct);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//9 调用service保存</span></span><br><span class="line">    contractProductService.patchSave(list);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//10 跳转页面</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/cargo/contractProduct/list.do?contractId="</span> + contractId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//解析每个单元格的数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getCellValue</span><span class="params">(Cell cell)</span> </span>&#123;</span><br><span class="line">    Object obj = <span class="keyword">null</span>;</span><br><span class="line">    CellType cellType = cell.getCellType(); <span class="comment">//获取单元格数据类型</span></span><br><span class="line">    <span class="keyword">switch</span> (cellType) &#123;</span><br><span class="line">        <span class="keyword">case</span> STRING: &#123;</span><br><span class="line">            obj = cell.getStringCellValue();<span class="comment">//字符串</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="comment">//excel默认将日期也理解为数字</span></span><br><span class="line">        <span class="keyword">case</span> NUMERIC: &#123;</span><br><span class="line">            <span class="keyword">if</span> (DateUtil.isCellDateFormatted(cell)) &#123;</span><br><span class="line">                obj = cell.getDateCellValue();<span class="comment">//日期</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                obj = cell.getNumericCellValue(); <span class="comment">// 数字</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> BOOLEAN: &#123;</span><br><span class="line">            obj = cell.getBooleanCellValue(); <span class="comment">// 布尔</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">default</span>: &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ContractProductService"><a href="#ContractProductService" class="headerlink" title="ContractProductService"></a>ContractProductService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">patchSave</span><span class="params">(List&lt;ContractProduct&gt; list)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="ContractProductServiceImpl"><a href="#ContractProductServiceImpl" class="headerlink" title="ContractProductServiceImpl"></a>ContractProductServiceImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">patchSave</span><span class="params">(List&lt;ContractProduct&gt; list)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (ContractProduct contractProduct : list) &#123;</span><br><span class="line">        <span class="keyword">this</span>.save(contractProduct);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;附件管理&quot;&gt;&lt;a href=&quot;#附件管理&quot; class=&quot;headerlink&quot; title=&quot;附件管理&quot;&gt;&lt;/a&gt;附件管理&lt;/h1&gt;&lt;h2 id=&quot;附件列表&quot;&gt;&lt;a href=&quot;#附件列表&quot; class=&quot;headerlink&quot; title=&quot;附件列表&quot;&gt;&lt;/a&gt;附件列表&lt;/h2&gt;&lt;p&gt;&lt;img data-src=&quot;/assets/image-20200710001758870.png&quot; alt=&quot;image-20200710001758870&quot;&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;export_manager_web&lt;/code&gt;模块的&lt;code&gt;com.itheima.web.controller.cargo&lt;/code&gt;下创建&lt;code&gt;ExtCproductController&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="其他" scheme="http://sunmoon.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="poi报表技术" scheme="http://sunmoon.com/tags/poi%E6%8A%A5%E8%A1%A8%E6%8A%80%E6%9C%AF/"/>
    
      <category term="细粒度权限控制" scheme="http://sunmoon.com/tags/%E7%BB%86%E7%B2%92%E5%BA%A6%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis逆向工程&amp;七牛云存储</title>
    <link href="http://sunmoon.com/2020/10/16/Mybatis%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-%E4%B8%83%E7%89%9B%E4%BA%91%E5%AD%98%E5%82%A8/"/>
    <id>http://sunmoon.com/2020/10/16/Mybatis%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B-%E4%B8%83%E7%89%9B%E4%BA%91%E5%AD%98%E5%82%A8/</id>
    <published>2020-10-16T10:46:35.000Z</published>
    <updated>2020-10-16T10:50:28.083Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mybatis逆向工程"><a href="#Mybatis逆向工程" class="headerlink" title="Mybatis逆向工程"></a>Mybatis逆向工程</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Mybatis是目前非常流行的持久层框架，其逆向工程更是大大缩减了我们的开发时间。</p><p>所谓mybatis逆向工程，就是Mybatis会根据我们设计好的数据表，自动生成<strong>domain（实体）</strong>、<strong>mapper（接口）</strong>以及<strong>mapper.xml（映射）</strong></p><p>而且会在文件中给我们生成单表增删改查的方法和sql</p><p>官网地址：<a href="https://mybatis.org/generator/" target="_blank" rel="noopener">https://mybatis.org/generator/</a></p><p><img data-src="/assets/image-20200704085155163.png" alt="image-20200704085155163"> </p><a id="more"></a><h2 id="插件使用"><a href="#插件使用" class="headerlink" title="插件使用"></a>插件使用</h2><h3 id="创建一个maven工程-引入依赖"><a href="#创建一个maven工程-引入依赖" class="headerlink" title="创建一个maven工程,引入依赖"></a>创建一个maven工程,引入依赖</h3><p><img data-src="/assets/image-20201015085021777.png" alt="image-20201015085021777"> </p><h3 id="加入配置文件"><a href="#加入配置文件" class="headerlink" title="加入配置文件"></a>加入配置文件</h3><p><img data-src="/assets/image-20201015085845085.png" alt="image-20201015085845085"> </p><h3 id="运行插件-生成文件"><a href="#运行插件-生成文件" class="headerlink" title="运行插件,生成文件"></a>运行插件,生成文件</h3><p><img data-src="/assets/image-20201015090331887.png" alt="image-20201015090331887"> </p><h2 id="生成的文件的使用"><a href="#生成的文件的使用" class="headerlink" title="生成的文件的使用"></a>生成的文件的使用</h2><h3 id="单表crud"><a href="#单表crud" class="headerlink" title="单表crud"></a>单表crud</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.dao.cargo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.cargo.Factory;</span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.cargo.FactoryExample;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FactoryDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(Factory record)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存(动态SQL)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertSelective</span><span class="params">(Factory record)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateByPrimaryKey</span><span class="params">(Factory record)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改(动态SQL)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateByPrimaryKeySelective</span><span class="params">(Factory record)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据主键删除</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteByPrimaryKey</span><span class="params">(String id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据主键查询</span></span><br><span class="line">    <span class="function">Factory <span class="title">selectByPrimaryKey</span><span class="params">(String id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//条件查询</span></span><br><span class="line">    <span class="function">List&lt;Factory&gt; <span class="title">selectByExample</span><span class="params">(FactoryExample example)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><p><strong>factory表数据</strong></p><p><img data-src="/assets/image-20200704092836919.png" alt="image-20200704094912780"> </p><p><strong>加入mybatis的环境</strong></p><p><img data-src="/assets/image-20200704094912780.png" alt="image-20200704094912780"> </p><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.dao.cargo.FactoryDao;</span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.cargo.Factory;</span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.cargo.FactoryExample;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//FactoryExample有三个作用:</span></span><br><span class="line"><span class="comment">//  1)  FactoryExample.Criteria criteria = factoryExample.createCriteria();  拼接查询条件</span></span><br><span class="line"><span class="comment">//  2)  factoryExample.setOrderByClause("id desc")                添加排序条件</span></span><br><span class="line"><span class="comment">//  3)  factoryExample.setDistinct(true)                          添加去重条件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询所有</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(<span class="string">"mybatis-config.xml"</span>);</span><br><span class="line">        SqlSessionFactory sessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        SqlSession sqlSession = sessionFactory.openSession();</span><br><span class="line">        FactoryDao mapper = sqlSession.getMapper(FactoryDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//=================================关注点在下面===========================================</span></span><br><span class="line">        FactoryExample factoryExample = <span class="keyword">new</span> FactoryExample();</span><br><span class="line"></span><br><span class="line">        List&lt;Factory&gt; factories = mapper.selectByExample(factoryExample);<span class="comment">//select * from co_factory</span></span><br><span class="line">        System.out.println(factories.size());</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//条件所有 Criteria</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByExample</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(<span class="string">"mybatis-config.xml"</span>);</span><br><span class="line">        SqlSessionFactory sessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        SqlSession sqlSession = sessionFactory.openSession();</span><br><span class="line">        FactoryDao mapper = sqlSession.getMapper(FactoryDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//=================================关注点在下面===========================================</span></span><br><span class="line">        FactoryExample factoryExample = <span class="keyword">new</span> FactoryExample();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Criteria 这是FactoryExample的一个小弟, 这个小弟的作用是用于封装查询条件</span></span><br><span class="line">        FactoryExample.Criteria criteria = factoryExample.createCriteria();</span><br><span class="line"><span class="comment">//        criteria.andCtypeEqualTo("货物");//WHERE ( ctype = ? )</span></span><br><span class="line"><span class="comment">//        criteria.andAddressEqualTo("长沙");//( ctype = ? and address = ? )</span></span><br><span class="line"><span class="comment">//        criteria.andFullNameLike("祁%");//( ctype = ? and address = ? and full_name like ? )</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//链式编程: 当一个对象方法返回值是本对象的时候</span></span><br><span class="line">        criteria.andCtypeEqualTo(<span class="string">"货物"</span>).andAddressEqualTo(<span class="string">"长沙"</span>).andFullNameLike(<span class="string">"祁%"</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Factory&gt; factories = mapper.selectByExample(factoryExample);</span><br><span class="line">        System.out.println(factories.size());</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//排序</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSort</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(<span class="string">"mybatis-config.xml"</span>);</span><br><span class="line">        SqlSessionFactory sessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        SqlSession sqlSession = sessionFactory.openSession();</span><br><span class="line">        FactoryDao mapper = sqlSession.getMapper(FactoryDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//=================================关注点在下面===========================================</span></span><br><span class="line">        FactoryExample factoryExample = <span class="keyword">new</span> FactoryExample();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Criteria 这是FactoryExample的一个小弟, 这个小弟的作用是用于封装查询条件</span></span><br><span class="line">        FactoryExample.Criteria criteria = factoryExample.createCriteria();</span><br><span class="line">        criteria.andCtypeEqualTo(<span class="string">"货物"</span>).andAddressEqualTo(<span class="string">"长沙"</span>).andFullNameLike(<span class="string">"祁%"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//OrderByClause  这是FactoryExample的一个小弟, 这个小弟的作用是用于添加排序条件</span></span><br><span class="line">        factoryExample.setOrderByClause(<span class="string">"id desc"</span>);<span class="comment">// order by id desc</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Distinct 这是FactoryExample的一个小弟, 这个小弟的作用是用于添加去重条件</span></span><br><span class="line">        factoryExample.setDistinct(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Factory&gt; factories = mapper.selectByExample(factoryExample);</span><br><span class="line">        System.out.println(factories.size());</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>支持的条件操作:</p><p><img data-src="/assets/image-20200802173227378.png" alt="20200802173227378"></p><h1 id="购销合同功能"><a href="#购销合同功能" class="headerlink" title="购销合同功能"></a>购销合同功能</h1><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><h3 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h3><p>购销合同：买卖双方签订的合同，维系国内的出口公司和海外客户之间联系</p><p>购销合同由三部分组成：合同主体信息、合同中所有货物信息、合同中所有附件信息</p><p><img data-src="/assets/image-20200714215904632.png" alt="image-20200714215904632"> </p><h3 id="数据模型分析"><a href="#数据模型分析" class="headerlink" title="数据模型分析"></a>数据模型分析</h3><p><strong>实体关系</strong></p><p>数据库表：</p><ul><li>购销合同表 ： <strong>co_contract</strong></li><li>购销合同货物表： <strong>co_contract_product</strong></li><li>购销合同附件表：<strong>co_ext_cproduct</strong></li></ul><p><img data-src="/assets/image-20200704104631425.png" alt="image-20200704104631425"></p><p><strong>实体关系影响</strong></p><p>合同、货物、附件三个实体之间是有关系的， 当前中一个变动会影响到其它两个， 主要影响到的属性为数量和金额</p><table><thead><tr><th>合同变化</th><th>新增</th><th>删除</th><th>修改</th></tr></thead><tbody><tr><td><strong>货物</strong></td><td>无</td><td>删除合同下所有货物</td><td>无</td></tr><tr><td><strong>附件</strong></td><td>无</td><td>删除合同下所有附件</td><td>无</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td><strong>货物变化</strong></td><td><strong>新增</strong></td><td><strong>删除</strong></td><td><strong>修改</strong></td></tr><tr><td><strong>合同</strong></td><td>变更总金额和货物的数量</td><td>变更总金额和货物的数量和附件的数量</td><td>变更总金额</td></tr><tr><td><strong>附件</strong></td><td>无</td><td>删除货物下的所有附件</td><td>无</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td><strong>附件变化</strong></td><td><strong>新增</strong></td><td><strong>删除</strong></td><td><strong>修改</strong></td></tr><tr><td><strong>合同</strong></td><td>变更总金额和附件的数量</td><td>变更总金额和附件的数量</td><td>变更总金额</td></tr><tr><td><strong>货物</strong></td><td>无</td><td>无</td><td>无</td></tr></tbody></table><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="添加模块-配置依赖"><a href="#添加模块-配置依赖" class="headerlink" title="添加模块, 配置依赖"></a>添加模块, 配置依赖</h3><p><img data-src="/assets/image-20200704111323727.png" alt="image-20200704111323727"> </p><h3 id="复制配置文件"><a href="#复制配置文件" class="headerlink" title="复制配置文件"></a>复制配置文件</h3><p><img data-src="/assets/image-20200704111924053.png" alt="image-20200704111924053"> </p><h3 id="复制启动类"><a href="#复制启动类" class="headerlink" title="复制启动类"></a>复制启动类</h3><p><img data-src="/assets/image-20200704112100935.png" alt="image-20200704112100935"> </p><h3 id="添加准备好的类和文件"><a href="#添加准备好的类和文件" class="headerlink" title="添加准备好的类和文件"></a>添加准备好的类和文件</h3><p><img data-src="/assets/image-20200704114317993.png" alt="image-20200704114317993"> </p><h3 id="Service实现类代码的补全"><a href="#Service实现类代码的补全" class="headerlink" title="Service实现类代码的补全"></a>Service实现类代码的补全</h3><p>以FactoryServiceImpl实现类演示其使用方式, 其它的实现类中均以写好对应的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.service.cargo.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Service;</span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageHelper;</span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageInfo;</span><br><span class="line"><span class="keyword">import</span> com.itheima.dao.cargo.FactoryDao;</span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.cargo.Factory;</span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.cargo.FactoryExample;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.cargo.FactoryService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryServiceImpl</span> <span class="keyword">implements</span> <span class="title">FactoryService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一定注意Dao的所有引入都是用@Autowired</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FactoryDao factoryDao;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Factory factory)</span> </span>&#123;</span><br><span class="line">        factoryDao.insertSelective(factory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Factory factory)</span> </span>&#123;</span><br><span class="line">        factoryDao.updateByPrimaryKeySelective(factory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        factoryDao.deleteByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Factory <span class="title">findById</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> factoryDao.selectByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Factory&gt; <span class="title">findAll</span><span class="params">(FactoryExample example)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> factoryDao.selectByExample(example);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PageInfo <span class="title">findByPage</span><span class="params">(<span class="keyword">int</span> pageNum, <span class="keyword">int</span> pageSize, FactoryExample example)</span> </span>&#123;</span><br><span class="line">        PageHelper.startPage(pageNum, pageSize);</span><br><span class="line">        List&lt;Factory&gt; factories = factoryDao.selectByExample(example);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PageInfo(factories, <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="合同管理"><a href="#合同管理" class="headerlink" title="合同管理"></a>合同管理</h1><h2 id="需求说明-1"><a href="#需求说明-1" class="headerlink" title="需求说明"></a>需求说明</h2><p>完成对合同的增删改查操作。注意, 在创建合同的时候添加==创建人id\创建部门id\创建时间==, 后面会用到。</p><p><img data-src="/assets/image-20200714225832526.png" alt="image-20200714225832526"></p><h2 id="合同基本功能实现"><a href="#合同基本功能实现" class="headerlink" title="合同基本功能实现"></a>合同基本功能实现</h2><p>在<code>export_manager_web</code>模块的<code>com.itheima.web.controller.cargo</code>下创建<code>ContractController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web.controller.cargo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageInfo;</span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.cargo.Contract;</span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.cargo.ContractExample;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.cargo.ContractService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.web.controller.BaseController;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/cargo/contract"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContractController</span> <span class="keyword">extends</span> <span class="title">BaseController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span></span><br><span class="line">    <span class="keyword">private</span> ContractService contractService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/list"</span>, name = <span class="string">"合同列表查询"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @RequestParam(defaultValue = <span class="string">"1"</span>, name = <span class="string">"page"</span>)</span> Integer pageNum,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(defaultValue = <span class="string">"10"</span>)</span> Integer pageSize) </span>&#123;</span><br><span class="line"></span><br><span class="line">        ContractExample contractExample = <span class="keyword">new</span> ContractExample();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1 封装条件</span></span><br><span class="line">        ContractExample.Criteria criteria = contractExample.createCriteria();</span><br><span class="line">        criteria.andCompanyIdEqualTo(getCompanyId());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2 排序</span></span><br><span class="line">        contractExample.setOrderByClause(<span class="string">"create_time desc"</span>);</span><br><span class="line"></span><br><span class="line">        PageInfo pageInfo = contractService.findByPage(pageNum, pageSize, contractExample);</span><br><span class="line">        request.setAttribute(<span class="string">"page"</span>, pageInfo);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/cargo/contract/contract-list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/toAdd"</span>, name = <span class="string">"跳转合同新增页面"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toAdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/cargo/contract/contract-add"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/toUpdate"</span>, name = <span class="string">"跳转合同编辑页面"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toUpdate</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1. 根据id查询当前合同信息</span></span><br><span class="line">        Contract contract = contractService.findById(id);</span><br><span class="line">        request.setAttribute(<span class="string">"contract"</span>, contract);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 转发到修改页面</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/cargo/contract/contract-update"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/edit"</span>, name = <span class="string">"合同新增"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">edit</span><span class="params">(Contract contract)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(contract.getId())) &#123;</span><br><span class="line">            <span class="comment">//1. 设置主键</span></span><br><span class="line">            contract.setId(UUID.randomUUID().toString());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2. 设置企业信息</span></span><br><span class="line">            contract.setCompanyId(getCompanyId());</span><br><span class="line">            contract.setCompanyName(getCompanyName());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.创建人id\创建部门id\创建时间</span></span><br><span class="line">            contract.setCreateBy(getUser().getId());</span><br><span class="line">            contract.setCreateDept(getUser().getDeptId());</span><br><span class="line">            contract.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4. 设置当前合同的状态</span></span><br><span class="line">            contract.setState(<span class="number">0</span>);<span class="comment">//草稿</span></span><br><span class="line"></span><br><span class="line">            contractService.save(contract);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            contractService.update(contract);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//重定向到list方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/cargo/contract/list.do"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/delete"</span>, name = <span class="string">"合同删除"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用service删除</span></span><br><span class="line">        contractService.delete(id);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//重定向到list方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/cargo/contract/list.do"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除合同的调整"><a href="#删除合同的调整" class="headerlink" title="删除合同的调整"></a>删除合同的调整</h2><blockquote><p>因为合同  货物  附件之间是有关系的, 所以在删除合同的时候,还要删除合同下面的货物和附件信息 </p></blockquote><p>修改ContractServiceImpl代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//=========================================查询===========================================//</span></span><br><span class="line">    <span class="comment">//1. 查询当前合同下的所有附件</span></span><br><span class="line">    ExtCproductExample extCproductExample = <span class="keyword">new</span> ExtCproductExample();</span><br><span class="line">    extCproductExample.createCriteria().andContractIdEqualTo(id);</span><br><span class="line">    List&lt;ExtCproduct&gt; extCproductList = extCproductDao.selectByExample(extCproductExample);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 查询当前合同下的所有货物</span></span><br><span class="line">    ContractProductExample contractProductExample = <span class="keyword">new</span> ContractProductExample();</span><br><span class="line">    contractProductExample.createCriteria().andContractIdEqualTo(id);</span><br><span class="line">    List&lt;ContractProduct&gt; contractProductList = contractProductDao.selectByExample(contractProductExample);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//========================================附件删除========================================//</span></span><br><span class="line">    <span class="keyword">for</span> (ExtCproduct extCproduct : extCproductList) &#123;</span><br><span class="line">        extCproductDao.deleteByPrimaryKey(extCproduct.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//========================================货物删除========================================//</span></span><br><span class="line">    <span class="keyword">for</span> (ContractProduct contractProduct : contractProductList) &#123;</span><br><span class="line">        contractProductDao.deleteByPrimaryKey(contractProduct.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//========================================合同删除========================================//</span></span><br><span class="line">    contractDao.deleteByPrimaryKey(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="提交-取消合同"><a href="#提交-取消合同" class="headerlink" title="提交/取消合同"></a>提交/取消合同</h2><p>提交和撤销合同的本质是改变合同的状态：</p><ul><li>提交： 0—&gt; 1   草稿—&gt;已上报</li><li>撤销： 1–&gt;0     已上报—&gt;草稿</li></ul><h3 id="ContractController"><a href="#ContractController" class="headerlink" title="ContractController"></a>ContractController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//提交</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/submit"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">submit</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line"><span class="comment">//将合同状态改为1</span></span><br><span class="line">Contract contract = <span class="keyword">new</span> Contract();</span><br><span class="line">contract.setId(id);</span><br><span class="line">contract.setState(<span class="number">1</span>);</span><br><span class="line">contractService.update(contract);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/cargo/contract/list.do"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取消</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/cancel"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">cancel</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line"><span class="comment">//将合同状态改为0</span></span><br><span class="line">Contract contract = <span class="keyword">new</span> Contract();</span><br><span class="line">contract.setId(id);</span><br><span class="line">contract.setState(<span class="number">0</span>);</span><br><span class="line">contractService.update(contract);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/cargo/contract/list.do"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="货物管理"><a href="#货物管理" class="headerlink" title="货物管理"></a>货物管理</h1><h2 id="货物列表"><a href="#货物列表" class="headerlink" title="货物列表"></a>货物列表</h2><p><img data-src="/assets/image-20200710000739332.png" alt="image-20200710000739332"></p><p>在<code>export_manager_web</code>模块的<code>com.itheima.web.controller.cargo</code>下创建<code>ContractProductController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web.controller.cargo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageInfo;</span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.cargo.ContractProductExample;</span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.cargo.Factory;</span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.cargo.FactoryExample;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.cargo.ContractProductService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.cargo.FactoryService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.web.controller.BaseController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/cargo/contractProduct"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContractProductController</span> <span class="keyword">extends</span> <span class="title">BaseController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span></span><br><span class="line">    <span class="keyword">private</span> ContractProductService contractProductService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span></span><br><span class="line">    <span class="keyword">private</span> FactoryService factoryService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/list"</span>, name = <span class="string">"货物列表查询"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @RequestParam(defaultValue = <span class="string">"1"</span>, name = <span class="string">"page"</span>)</span> Integer pageNum,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(defaultValue = <span class="string">"10"</span>)</span> Integer pageSize,</span></span><br><span class="line"><span class="function">            String contractId) </span>&#123;</span><br><span class="line"></span><br><span class="line">        ContractProductExample contractProductExample = <span class="keyword">new</span> ContractProductExample();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1 查询当前合同下的所有货物</span></span><br><span class="line">        ContractProductExample.Criteria criteria = contractProductExample.createCriteria();</span><br><span class="line">        criteria.andCompanyIdEqualTo(getCompanyId());<span class="comment">//企业id</span></span><br><span class="line">        criteria.andContractIdEqualTo(contractId);<span class="comment">//合同id</span></span><br><span class="line"></span><br><span class="line">        PageInfo pageInfo = contractProductService.findByPage(pageNum, pageSize, contractProductExample);</span><br><span class="line">        request.setAttribute(<span class="string">"page"</span>, pageInfo);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2 查询所有生产货物的厂家列表</span></span><br><span class="line">        FactoryExample factoryExample = <span class="keyword">new</span> FactoryExample();</span><br><span class="line">        factoryExample.createCriteria().andCtypeEqualTo(<span class="string">"货物"</span>);</span><br><span class="line">        List&lt;Factory&gt; factoryList = factoryService.findAll(factoryExample);</span><br><span class="line">        request.setAttribute(<span class="string">"factoryList"</span>, factoryList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 回传合同id</span></span><br><span class="line">        request.setAttribute(<span class="string">"contractId"</span>, contractId);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/cargo/product/product-list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//    @RequestMapping(value = "/toAdd", name = "跳转货物新增页面")</span></span><br><span class="line"><span class="comment">//    public String toAdd() &#123;</span></span><br><span class="line"><span class="comment">//        return "/cargo/product/product-add";</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    @RequestMapping(value = "/toUpdate", name = "跳转货物编辑页面")</span></span><br><span class="line"><span class="comment">//    public String toUpdate(String id) &#123;</span></span><br><span class="line"><span class="comment">//        //1. 根据id查询当前货物信息</span></span><br><span class="line"><span class="comment">//        ContractProduct contractProduct = contractProductService.findById(id);</span></span><br><span class="line"><span class="comment">//        request.setAttribute("contractProduct", contractProduct);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //2. 转发到修改页面</span></span><br><span class="line"><span class="comment">//        return "/cargo/product/product-update";</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    @RequestMapping(value = "/edit", name = "货物新增")</span></span><br><span class="line"><span class="comment">//    public String edit(ContractProduct contractProduct) &#123;</span></span><br><span class="line"><span class="comment">//        if (StringUtils.isEmpty(contractProduct.getId())) &#123;</span></span><br><span class="line"><span class="comment">//            //1. 设置主键</span></span><br><span class="line"><span class="comment">//            contractProduct.setId(UUID.randomUUID().toString());</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            //2. 设置企业信息</span></span><br><span class="line"><span class="comment">//            contractProduct.setCompanyId(getCompanyId());</span></span><br><span class="line"><span class="comment">//            contractProduct.setCompanyName(getCompanyName());</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            contractProductService.save(contractProduct);</span></span><br><span class="line"><span class="comment">//        &#125; else &#123;</span></span><br><span class="line"><span class="comment">//            contractProductService.update(contractProduct);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //重定向到list方法</span></span><br><span class="line"><span class="comment">//        return "redirect:/cargo/contractProduct/list.do";</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    @RequestMapping(value = "/delete", name = "货物删除")</span></span><br><span class="line"><span class="comment">//    public String delete(String id) &#123;</span></span><br><span class="line"><span class="comment">//        //调用service删除</span></span><br><span class="line"><span class="comment">//        contractProductService.delete(id);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //重定向到list方法</span></span><br><span class="line"><span class="comment">//        return "redirect:/cargo/contractProduct/list.do";</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="新增货物"><a href="#新增货物" class="headerlink" title="新增货物"></a>新增货物</h2><h3 id="ContractProductController"><a href="#ContractProductController" class="headerlink" title="ContractProductController"></a>ContractProductController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/edit"</span>, name = <span class="string">"货物新增"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">edit</span><span class="params">(ContractProduct contractProduct)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(contractProduct.getId())) &#123;</span><br><span class="line">        <span class="comment">//1. 设置主键</span></span><br><span class="line">        contractProduct.setId(UUID.randomUUID().toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 设置企业信息</span></span><br><span class="line">        contractProduct.setCompanyId(getCompanyId());</span><br><span class="line">        contractProduct.setCompanyName(getCompanyName());</span><br><span class="line"></span><br><span class="line">        contractProductService.save(contractProduct);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        contractProductService.update(contractProduct);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重定向到list方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/cargo/contractProduct/list.do?contractId="</span> + contractProduct.getContractId();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ContractProductServiceImpl"><a href="#ContractProductServiceImpl" class="headerlink" title="ContractProductServiceImpl"></a>ContractProductServiceImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(ContractProduct contractProduct)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//==========================================查询=======================================//</span></span><br><span class="line">    <span class="comment">//查询合同信息(条件是合同id)</span></span><br><span class="line">    Contract contract = contractDao.selectByPrimaryKey(contractProduct.getContractId());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//==========================================附件无影响=======================================//</span></span><br><span class="line">    <span class="comment">//==========================================货物新增=======================================//</span></span><br><span class="line">    <span class="comment">//1. 计算出小计金额  单价  *  数量</span></span><br><span class="line">    Double amount = contractProduct.getPrice() * contractProduct.getCnumber();</span><br><span class="line">    contractProduct.setAmount(amount);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 执行保存</span></span><br><span class="line">    contractProductDao.insertSelective(contractProduct);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//==========================================合同修改=======================================//</span></span><br><span class="line">    <span class="comment">//1. 合同中的货物种数+1</span></span><br><span class="line">    contract.setProNum(contract.getProNum() + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 合同中的总金额 + 货物小计金额</span></span><br><span class="line">    contract.setTotalAmount(contract.getTotalAmount() + amount);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 合同修改</span></span><br><span class="line">    contractDao.updateByPrimaryKeySelective(contract);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改货物"><a href="#修改货物" class="headerlink" title="修改货物"></a>修改货物</h2><p><img data-src="/assets/image-20200710001224863.png" alt="image-20200710001224863"></p><h3 id="跳转修改页面"><a href="#跳转修改页面" class="headerlink" title="跳转修改页面"></a>跳转修改页面</h3><p>修改ContractProductController添加代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/toUpdate"</span>, name = <span class="string">"跳转货物编辑页面"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toUpdate</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1. 根据id查询当前货物信息</span></span><br><span class="line">    ContractProduct contractProduct = contractProductService.findById(id);</span><br><span class="line">    request.setAttribute(<span class="string">"contractProduct"</span>, contractProduct);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 查询所有生产货物的厂家列表</span></span><br><span class="line">    FactoryExample factoryExample = <span class="keyword">new</span> FactoryExample();</span><br><span class="line">    factoryExample.createCriteria().andCtypeEqualTo(<span class="string">"货物"</span>);</span><br><span class="line">    List&lt;Factory&gt; factoryList = factoryService.findAll(factoryExample);</span><br><span class="line">    request.setAttribute(<span class="string">"factoryList"</span>, factoryList);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 转发到修改页面</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"/cargo/product/product-update"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改货物-1"><a href="#修改货物-1" class="headerlink" title="修改货物"></a>修改货物</h3><p>修改ContractProductServiceImpl添加代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(ContractProduct contractProduct)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//==========================================查询=======================================//</span></span><br><span class="line">    <span class="comment">//1. 查询当前货物对应的合同信息</span></span><br><span class="line">    Contract contract = contractDao.selectByPrimaryKey(contractProduct.getContractId());</span><br><span class="line">    <span class="comment">//2. 根据货物id查询原有货物信息</span></span><br><span class="line">    ContractProduct contractProductOld = contractProductDao.selectByPrimaryKey(contractProduct.getId());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//==========================================附件无影响=======================================//</span></span><br><span class="line">    <span class="comment">//==========================================货物修改=======================================//</span></span><br><span class="line">    <span class="comment">//1. 重新计算小计金额  单价 * 数量</span></span><br><span class="line">    Double amount = contractProduct.getPrice() * contractProduct.getCnumber();</span><br><span class="line">    contractProduct.setAmount(amount);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 执行修改</span></span><br><span class="line">    contractProductDao.updateByPrimaryKeySelective(contractProduct);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//==========================================合同修改=======================================//</span></span><br><span class="line">    <span class="comment">//1. 修改总金额  =  原总金额  - 货物原有小计 + 现有小计</span></span><br><span class="line">    contract.setTotalAmount(contract.getTotalAmount() - contractProductOld.getAmount() + amount);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 执行修改</span></span><br><span class="line">    contractDao.updateByPrimaryKeySelective(contract);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除货物"><a href="#删除货物" class="headerlink" title="删除货物"></a>删除货物</h2><p><img data-src="/assets/image-20200710001434201.png" alt="image-20200710001434201"> </p><h3 id="ContractProductController-1"><a href="#ContractProductController-1" class="headerlink" title="ContractProductController"></a>ContractProductController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/delete"</span>, name = <span class="string">"货物删除"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(String id, String contractId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//调用service删除</span></span><br><span class="line">    contractProductService.delete(id);<span class="comment">//货物id</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//重定向到list方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/cargo/contractProduct/list.do?contractId="</span> + contractId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ContractProductServiceImpl-1"><a href="#ContractProductServiceImpl-1" class="headerlink" title="ContractProductServiceImpl"></a>ContractProductServiceImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//条件是货物id</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//==========================================查询=======================================//</span></span><br><span class="line">    <span class="comment">//1. 获取当前货物下所有的附件信息(条件是货物id)</span></span><br><span class="line">    ExtCproductExample extCproductExample = <span class="keyword">new</span> ExtCproductExample();</span><br><span class="line">    extCproductExample.createCriteria().andContractProductIdEqualTo(id);</span><br><span class="line">    List&lt;ExtCproduct&gt; extCproductList = extCproductDao.selectByExample(extCproductExample);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 根据id查询货物的信息</span></span><br><span class="line">    ContractProduct contractProduct = contractProductDao.selectByPrimaryKey(id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 根据货物种的合同id查询合同信息</span></span><br><span class="line">    Contract contract = contractDao.selectByPrimaryKey(contractProduct.getContractId());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//==========================================附件删除=======================================//</span></span><br><span class="line">    <span class="comment">//遍历删除</span></span><br><span class="line">    <span class="keyword">for</span> (ExtCproduct extCproduct : extCproductList) &#123;</span><br><span class="line">        extCproductDao.deleteByPrimaryKey(extCproduct.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//==========================================货物删除=======================================//</span></span><br><span class="line">    <span class="comment">//主键删除</span></span><br><span class="line">    contractProductDao.deleteByPrimaryKey(id);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//==========================================合同修改=======================================//</span></span><br><span class="line">    <span class="comment">//1. 调整合同中的货物种数 - 1</span></span><br><span class="line">    contract.setProNum(contract.getProNum() - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 调整合同中的附件种数 -extCproductList.size()</span></span><br><span class="line">    contract.setExtNum(contract.getExtNum() - extCproductList.size());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3 .调整合同总金额 - (货物金额 + 所有附件金额)</span></span><br><span class="line">    <span class="keyword">double</span> amount = <span class="number">0</span>d;</span><br><span class="line"></span><br><span class="line">    amount += contractProduct.getAmount();<span class="comment">//货物金额</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (ExtCproduct extCproduct : extCproductList) &#123;</span><br><span class="line">        amount += extCproduct.getAmount();</span><br><span class="line">    &#125;</span><br><span class="line">    contract.setTotalAmount(contract.getTotalAmount() - amount);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4 执行修改</span></span><br><span class="line">    contractDao.updateByPrimaryKeySelective(contract);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="七牛云存储"><a href="#七牛云存储" class="headerlink" title="七牛云存储"></a>七牛云存储</h1><p>添加货物和附件时需要上传图片，图片我们上传到一个第三方的托管服务器，本项目我们使用七牛云存储</p><h2 id="账户申请"><a href="#账户申请" class="headerlink" title="账户申请"></a>账户申请</h2><h3 id="注册账户"><a href="#注册账户" class="headerlink" title="注册账户"></a>注册账户</h3><p> <img data-src="/assets/clip_image010.jpg" alt=""></p><h3 id="激活账号"><a href="#激活账号" class="headerlink" title="激活账号"></a>激活账号</h3><p><img data-src="/assets/clip_image012.jpg" alt=""> </p><h3 id="实名认证"><a href="#实名认证" class="headerlink" title="实名认证"></a>实名认证</h3><p>实名认证需要准备好身份证正反面照片和支付宝账号</p><p><img data-src="/assets/image-20200705083657277.png" alt="a"></p><p><img data-src="/assets/image-20200705083731580.png" alt="a"> </p><p> <img data-src="/assets/image-20200705083813313.png" alt="image-20200705083813313"></p><h2 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h2><h3 id="创建空间"><a href="#创建空间" class="headerlink" title="创建空间"></a>创建空间</h3><p>操作步骤:</p><ol><li>点击云产品的对象存储, 进入新建空间的页面</li><li>创建一个空间, 名字自定义 ,其它按照图上来</li><li>域名暂时不用绑定, 七牛云会默认分派一个(有效期30天)</li></ol><p><img data-src="/assets/image-20200705085409851.png" alt="image-20200705085409851"></p><h3 id="查找秘钥"><a href="#查找秘钥" class="headerlink" title="查找秘钥"></a>查找秘钥</h3><p>操作步骤:</p><ol><li>点击小头像, 选择秘钥管理, 进入秘钥管理页面</li><li>点击显示, 就可以查看到秘钥, 然后将其记录下来, 备用</li></ol><p><img data-src="/assets/image-20200705090217462.png" alt="image-20200705090217462"></p><h3 id="开发文档"><a href="#开发文档" class="headerlink" title="开发文档"></a>开发文档</h3><p><a href="https://developer.qiniu.com/kodo/sdk/1239/java" target="_blank" rel="noopener">https://developer.qiniu.com/kodo/sdk/1239/java</a></p><h2 id="文件上传案例"><a href="#文件上传案例" class="headerlink" title="文件上传案例"></a>文件上传案例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.common.QiniuException;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.http.Response;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.storage.Configuration;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.storage.Region;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.storage.UploadManager;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.storage.model.DefaultPutRet;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.util.Auth;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QiniuDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//指定region2  华南地区</span></span><br><span class="line">        Configuration cfg = <span class="keyword">new</span> Configuration(Region.region2());</span><br><span class="line">        UploadManager uploadManager = <span class="keyword">new</span> UploadManager(cfg);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//填写自己的信息</span></span><br><span class="line">        String accessKey = <span class="string">"xxx"</span>;</span><br><span class="line">        String secretKey = <span class="string">"xxx"</span>;</span><br><span class="line">        String bucket = <span class="string">"xxx"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//准备一张图片</span></span><br><span class="line">        String localFilePath = <span class="string">"c:/upload/kn.jpg"</span>;</span><br><span class="line"></span><br><span class="line">        String key = <span class="keyword">null</span>;</span><br><span class="line">        Auth auth = Auth.create(accessKey, secretKey);</span><br><span class="line">        String upToken = auth.uploadToken(bucket);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Response response = uploadManager.put(localFilePath, key, upToken);</span><br><span class="line">            <span class="comment">//解析上传成功的结果</span></span><br><span class="line">            DefaultPutRet putRet = <span class="keyword">new</span> Gson().fromJson(response.bodyString(), DefaultPutRet<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            System.out.println(putRet.key);</span><br><span class="line">            System.out.println(putRet.hash);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (QiniuException ex) &#123;</span><br><span class="line">            Response r = ex.response;</span><br><span class="line">            System.err.println(r.toString());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.err.println(r.bodyString());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (QiniuException ex2) &#123;</span><br><span class="line">                ex2.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Mybatis逆向工程&quot;&gt;&lt;a href=&quot;#Mybatis逆向工程&quot; class=&quot;headerlink&quot; title=&quot;Mybatis逆向工程&quot;&gt;&lt;/a&gt;Mybatis逆向工程&lt;/h1&gt;&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;Mybatis是目前非常流行的持久层框架，其逆向工程更是大大缩减了我们的开发时间。&lt;/p&gt;
&lt;p&gt;所谓mybatis逆向工程，就是Mybatis会根据我们设计好的数据表，自动生成&lt;strong&gt;domain（实体）&lt;/strong&gt;、&lt;strong&gt;mapper（接口）&lt;/strong&gt;以及&lt;strong&gt;mapper.xml（映射）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;而且会在文件中给我们生成单表增删改查的方法和sql&lt;/p&gt;
&lt;p&gt;官网地址：&lt;a href=&quot;https://mybatis.org/generator/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mybatis.org/generator/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&quot;/assets/image-20200704085155163.png&quot; alt=&quot;image-20200704085155163&quot;&gt; &lt;/p&gt;
    
    </summary>
    
    
      <category term="Mybatis" scheme="http://sunmoon.com/categories/Mybatis/"/>
    
    
      <category term="逆向工程" scheme="http://sunmoon.com/tags/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="七牛云存储" scheme="http://sunmoon.com/tags/%E4%B8%83%E7%89%9B%E4%BA%91%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper</title>
    <link href="http://sunmoon.com/2020/10/14/Zookeeper/"/>
    <id>http://sunmoon.com/2020/10/14/Zookeeper/</id>
    <published>2020-10-14T08:41:33.000Z</published>
    <updated>2020-10-14T08:46:37.540Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Zookeeper介绍"><a href="#Zookeeper介绍" class="headerlink" title="Zookeeper介绍"></a>Zookeeper介绍</h1><p>ZooKeeper是一个分布式服务<strong>协调</strong>框架，主要用来解决分布式应用中的一些数据管理问题，如：统一命名服务、状态同步服务、应用配置项的管理等等。</p><p>ZooKeeper由雅虎研究院开发，是Google Chubby的开源实现，后来托管到Apache，于2010年11月正式成为Apache的顶级项目。</p><p>在大数据生态系统里，很多组件的命名都是某种动物，比如hadoop就是🐘，hive就是🐝。Zookeeper的作用是用来对这些组件进行管理，即动物园管理者。</p><p>官方网址：<a href="https://zookeeper.apache.org/" target="_blank" rel="noopener">https://zookeeper.apache.org/</a></p><a id="more"></a><h1 id="Zookeeper安装"><a href="#Zookeeper安装" class="headerlink" title="Zookeeper安装"></a>Zookeeper安装</h1><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>将资料中的zookeeper-3.4.6.zip复制到一个没有中文，没有空格的目录，然后解压，即可得到zookeeper的软件</p><p><img data-src="/assets/image-20201011162905155.png" alt="image-20201011162905155"> </p><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><ol><li>进入到zookeeper的配置目录，复制<code>zoo_sample.cfg</code>为<code>zoo.cfg</code></li><li>编辑<code>zoo.cfg</code>文件，修改<code>dataDir</code>的值为<code>安装目录\\data</code>这是zookeeper存储数据的位置</li></ol><p><img data-src="/assets/image-20201011165117802.png" alt="image-20201011165117802"></p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>进入安装路径的bin目录，双击zkServer.cmd即可启动zookeeper服务</p><p><img data-src="/assets/image-20201011165353665.png" alt="image-20201011165353665"> </p><h2 id="命令行客户端"><a href="#命令行客户端" class="headerlink" title="命令行客户端"></a>命令行客户端</h2><ol><li>进入安装路径的bin目录，双击zkCli.cmd即可启动zookeeper命令行客户端</li><li>在客户端中输入<code>create /data &quot;ceshi&quot;</code>，没有报错，代表客户端可以成功操作服务器 </li></ol><p><img data-src="/assets/image-20201011165933305.png" alt="image-20201011165933305"> </p><h2 id="UI界面客户端"><a href="#UI界面客户端" class="headerlink" title="UI界面客户端"></a>UI界面客户端</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>将资料中的ZooInspector.zip复制到一个没有中文，没有空格的目录，然后解压，即可得到ZooInspector的软件</p><p><img data-src="/assets/image-20201011170501940.png" alt="image-20201011170501940"> </p><h3 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h3><p>在安装软件的build目录下，执行<code>java -jar zookeeper-dev-ZooInspector.jar</code>命令，即可启动软件的界面</p><p><img data-src="/assets/image-20201011170920874.png" alt="image-20201011170920874"> </p><h3 id="连接服务"><a href="#连接服务" class="headerlink" title="连接服务"></a>连接服务</h3><ol><li>点击连接按钮，输入zk的服务地址，点击OK连接</li><li>连接成功之后可以点击data查看节点存储的信息</li></ol><p><img data-src="/assets/image-20201011171243332.png" alt="image-20201011171243332"> </p><h1 id="Zookeeper数据结构"><a href="#Zookeeper数据结构" class="headerlink" title="Zookeeper数据结构"></a>Zookeeper数据结构</h1><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>Zookeeper的数据节点可以视为树状（或者目录）结构，树中的各节点被称为znode（即zookeeper node），一个znode可以有多个子节点。</p><p>Zookeeper节点在结构上表现为树状，使用路径path来定位某个znode，比如<code>/itcast/bj/java</code>，此处itcast、bj、java分别是根节点、2级节点、3级节点</p><p>znode兼具文件和目录两种特点。既像文件一样维护着数据、元信息、ACL、时间戳等数据结构，又可以像目录一样挂载子目录。</p><p>==znode特点: 像目录一样可以存储子节点,想文件一样可以存储数据信息==</p><p><img data-src="/assets/image-20201011172541673.png" alt="image-20201011172541673"> </p><p>一个znode大体上分为3各部分：</p><ol><li><p>data：节点的数据</p></li><li><p>children：节点的子节点</p></li><li><p>stat：节点的状态，用来描述当前节点的创建、修改记录等</p></li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在zookeeper shell中使用get命令查看指定路径节点的data、stat信息：</span></span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">5</span>] get  /itcast/bj</span><br><span class="line">bjdata</span><br><span class="line">cZxid = <span class="number">0</span>x17</span><br><span class="line">ctime = Sun Oct <span class="number">11</span> <span class="number">17</span>:<span class="number">24</span>:<span class="number">37</span> CST <span class="number">2020</span></span><br><span class="line">mZxid = <span class="number">0</span>x17</span><br><span class="line">mtime = Sun Oct <span class="number">11</span> <span class="number">17</span>:<span class="number">24</span>:<span class="number">37</span> CST <span class="number">2020</span></span><br><span class="line">pZxid = <span class="number">0</span>x1b </span><br><span class="line">cversion = <span class="number">1</span></span><br><span class="line">dataVersion = <span class="number">0</span></span><br><span class="line">aclVersion = <span class="number">0</span></span><br><span class="line">ephemeralOwner = <span class="number">0</span>x0</span><br><span class="line">dataLength = <span class="number">6</span></span><br><span class="line">numChildren = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cZxid：数据节点创建时的事务 ID</span></span><br><span class="line"><span class="comment"># ctime：数据节点创建时的时间</span></span><br><span class="line"><span class="comment"># mZxid：数据节点最后一次更新时的事务 ID</span></span><br><span class="line"><span class="comment"># mtime：数据节点最后一次更新时的时间</span></span><br><span class="line"><span class="comment"># pZxid：数据节点的子节点最后一次被修改时的事务 ID</span></span><br><span class="line"><span class="comment"># cversion：子节点的更改次数</span></span><br><span class="line"><span class="comment"># dataVersion：节点数据的更改次数</span></span><br><span class="line"><span class="comment"># aclVersion: 权限的更改次数</span></span><br><span class="line"><span class="comment"># ephemeralOwner: 持久节点还是临时节点</span></span><br><span class="line"><span class="comment"># dataLength：数据内容的长度</span></span><br><span class="line"><span class="comment"># numChildren：数据节点当前的子节点个数</span></span><br><span class="line"></span><br><span class="line">最多</span><br><span class="line"><span class="comment"># cZxid：数据节点创建时的事务ID</span></span><br><span class="line"><span class="comment"># dataVersion：节点数据的更改次数</span></span><br></pre></td></tr></table></figure><h2 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h2><p>对于Zookeeper中的节点，有两种分类方式，一种是按照节点是否持久化，一种是按照节点是否有顺序进行分类。</p><blockquote><p>按照节点是否持久化分类，可以分别为临时节点和永久节点</p></blockquote><ul><li><p><strong>临时节点</strong>：该节点的生命周期依赖于创建它们的会话。一旦会话(Session)结束，临时节点将被自动删除，当然可以也可以手动删除</p><p>  虽然每个临时的Znode都会绑定到一个客户端会话，但他们对所有的客户端还是可见的。另外，ZooKeeper的临时节点不允许拥有子节点</p></li><li><p><strong>持久化节点</strong>(默认)：该节点的生命周期不依赖于会话，并且只有在客户端显示执行删除操作的时候，他们才能被删除</p></li></ul><blockquote><p>按照节点是否有顺序进行分类，可以分别为有序节点和无序节点</p></blockquote><ul><li><strong>有序节点</strong>：每个节点都会为它的一级子节点维护一个顺序</li><li><strong>无序节点</strong>(默认)：节点不会为子节点维护顺序</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>节点类型</span><br><span class="line"><span class="code">持久化无序节点 ：节点创建后会一直存在zookeeper服务器上，直到主动删除</span></span><br><span class="line"><span class="code">持久化有序节点 ：在持久化无序节点的基础上,为每个节点都会为它的一级子节点维护一个顺序</span></span><br><span class="line"><span class="code">临时无序节点 ： 临时节点的生命周期和客户端的会话保持一致，当客户端会话失效，该节点自动清理</span></span><br><span class="line"><span class="code">临时有序节点 ： 在临时节点上多了一个顺序性特性</span></span><br></pre></td></tr></table></figure><h1 id="Zookeeper常见命令"><a href="#Zookeeper常见命令" class="headerlink" title="Zookeeper常见命令"></a>Zookeeper常见命令</h1><h2 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h2><blockquote><p> create [-s] [-e] path data  [默认情况下持久化无序节点]</p> <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">path：节点名称 (完整绝对路径, 不能缺少层数)</span><br><span class="line">data：节点数据</span><br><span class="line">-s：有序节点</span><br><span class="line">-e：临时节点</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1）创建 /node节点</span></span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">14</span>] create /node node</span><br><span class="line">Created /node</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2）创建 /node/data1节点(无序持久节点)</span></span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">15</span>] create /node/<span class="keyword">data</span>1 <span class="keyword">data</span></span><br><span class="line">Created /node/<span class="keyword">data</span>1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3）创建 /node/data2节点(无序临时节点)</span></span><br><span class="line"><span class="comment"># 注意: 一旦创建此节点的连接断开(命令行退出)，节点会自动删除</span></span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">16</span>] create <span class="literal">-e</span> /node/<span class="keyword">data</span>2 <span class="keyword">data</span></span><br><span class="line">Created /node/<span class="keyword">data</span>2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4) 创建 /node/data3节点(有序持久节点)</span></span><br><span class="line"><span class="comment"># 注意: 此类节点创建出来后会在节点名称后面自动跟随一串递增的数字</span></span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">0</span>] create <span class="literal">-s</span> /node/<span class="keyword">data</span>3 <span class="keyword">data</span></span><br><span class="line">Created /node/<span class="keyword">data</span>30000000002</span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">1</span>] create <span class="literal">-s</span> /node/<span class="keyword">data</span>3 <span class="keyword">data</span></span><br><span class="line">Created /node/<span class="keyword">data</span>30000000003</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4) 创建 /node/data4节点(有序临时节点)</span></span><br><span class="line"><span class="comment"># 注意: 此类节点创建出来后会在节点名称后面自动跟随一串递增的数字</span></span><br><span class="line"><span class="comment">#      一旦创建此节点的连接断开(命令行退出)，节点会自动删除</span></span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">10</span>] create <span class="literal">-s</span> <span class="literal">-e</span> /node/<span class="keyword">data</span>4 <span class="keyword">data</span></span><br><span class="line">Created /node/<span class="keyword">data</span>40000000006</span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">11</span>] create <span class="literal">-s</span> <span class="literal">-e</span> /node/<span class="keyword">data</span>4 <span class="keyword">data</span></span><br><span class="line">Created /node/<span class="keyword">data</span>40000000007</span><br></pre></td></tr></table></figure><h2 id="查看节点"><a href="#查看节点" class="headerlink" title="查看节点"></a>查看节点</h2><h3 id="查看节点信息"><a href="#查看节点信息" class="headerlink" title="查看节点信息"></a>查看节点信息</h3><blockquote><p>get path : 获取节点的状态信息和数据信息</p><p>stat  path : 获取节点的状态信息</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">3</span>] get /node/<span class="keyword">data</span>1</span><br><span class="line"><span class="keyword">data</span> <span class="comment"># 节点数据</span></span><br><span class="line">cZxid = <span class="number">0</span>x21   <span class="comment"># 数据节点创建时的事务ID</span></span><br><span class="line">ctime = Sun Oct <span class="number">11</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">27</span> CST <span class="number">2020</span>  <span class="comment"># 数据节点创建时的时间</span></span><br><span class="line">mZxid = <span class="number">0</span>x21   <span class="comment"># 数据节点最后一次更新时的事务ID</span></span><br><span class="line">mtime = Sun Oct <span class="number">11</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">27</span> CST <span class="number">2020</span>  <span class="comment"># 数据节点最后一次更新时的时间</span></span><br><span class="line">pZxid = <span class="number">0</span>x21 <span class="comment"># 数据节点的子节点最后一次被修改时的事务ID</span></span><br><span class="line">cversion = <span class="number">0</span> <span class="comment"># 子节点的更改次数</span></span><br><span class="line">dataVersion = <span class="number">0</span> <span class="comment"># 节点数据的更改次数</span></span><br><span class="line">aclVersion = <span class="number">0</span>  <span class="comment"># 权限的更改次数</span></span><br><span class="line">ephemeralOwner = <span class="number">0</span>x0 <span class="comment"># 如果节点为临时节点，那么它的值为这个节点拥有者的sessionID；如果该节点不是临时节点， 值为0</span></span><br><span class="line">dataLength = <span class="number">4</span> <span class="comment"># 数据内容的长度</span></span><br><span class="line">numChildren = <span class="number">0</span> <span class="comment"># 数据节点当前的子节点个数</span></span><br></pre></td></tr></table></figure><h3 id="查看节点列表"><a href="#查看节点列表" class="headerlink" title="查看节点列表"></a>查看节点列表</h3><blockquote><p>ls   path:  查看指定节点的子节点列表</p><p>ls2 path:  查看指定节点的信息以及子节点列表</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1) ls</span></span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">17</span>] ls /</span><br><span class="line">[<span class="type">node</span>， <span class="type">zookeeper</span>， <span class="type">data</span>， <span class="type">itcast</span>]</span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">18</span>] ls /node</span><br><span class="line">[<span class="type">data30000000003</span>， <span class="type">data30000000004</span>， <span class="type">data30000000002</span>， <span class="type">data2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#２）ls2</span></span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">19</span>] ls2 /</span><br><span class="line">[<span class="type">node</span>， <span class="type">zookeeper</span>， <span class="type">data</span>， <span class="type">itcast</span>]</span><br><span class="line">cZxid = <span class="number">0</span>x0</span><br><span class="line">ctime = Thu Jan <span class="number">01</span> <span class="number">08</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1970</span></span><br><span class="line">mZxid = <span class="number">0</span>x0</span><br><span class="line">mtime = Thu Jan <span class="number">01</span> <span class="number">08</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1970</span></span><br><span class="line">pZxid = <span class="number">0</span>x3c</span><br><span class="line">cversion = <span class="number">14</span></span><br><span class="line">dataVersion = <span class="number">0</span></span><br><span class="line">aclVersion = <span class="number">0</span></span><br><span class="line">ephemeralOwner = <span class="number">0</span>x0</span><br><span class="line">dataLength = <span class="number">0</span></span><br><span class="line">numChildren = <span class="number">4</span></span><br></pre></td></tr></table></figure><h2 id="修改节点"><a href="#修改节点" class="headerlink" title="修改节点"></a>修改节点</h2><blockquote><p>set path data [version]</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1) set path data 直接使用set命令对指定节点内容进行修改</span></span><br><span class="line"><span class="comment"># 注意: 在修改的时候，除了数据内容变化之外，还有一个关键属性变化了  </span></span><br><span class="line"><span class="comment"># dataVersion = 1 指的是数据版本，每次数据被修改，版本自动加1</span></span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">9</span>] set /node/<span class="keyword">data</span>1 mydata</span><br><span class="line">cZxid = <span class="number">0</span>x21</span><br><span class="line">ctime = Sun Oct <span class="number">11</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">27</span> CST <span class="number">2020</span></span><br><span class="line">mZxid = <span class="number">0</span>x40</span><br><span class="line">mtime = Sun Oct <span class="number">11</span> <span class="number">23</span>:<span class="number">26</span>:<span class="number">43</span> CST <span class="number">2020</span></span><br><span class="line">pZxid = <span class="number">0</span>x21</span><br><span class="line">cversion = <span class="number">0</span></span><br><span class="line">dataVersion = <span class="number">1</span></span><br><span class="line">aclVersion = <span class="number">0</span></span><br><span class="line">ephemeralOwner = <span class="number">0</span>x0</span><br><span class="line">dataLength = <span class="number">6</span></span><br><span class="line">numChildren = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2) set path data version 基于版本号对指定节点内容进行修改</span></span><br><span class="line"><span class="comment"># 即修改数据的时候，要传入要修改数据的版本号， 如果传入的版本号和当前的版本号不符合时，zookeeper会拒绝本次修改</span></span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">10</span>] set /node/<span class="keyword">data</span>1 mydatadata <span class="number">0</span></span><br><span class="line">version No is not valid : /node/<span class="keyword">data</span>1</span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">11</span>] set /node/<span class="keyword">data</span>1 mydatadata <span class="number">1</span></span><br><span class="line">cZxid = <span class="number">0</span>x21</span><br><span class="line">ctime = Sun Oct <span class="number">11</span> <span class="number">22</span>:<span class="number">35</span>:<span class="number">27</span> CST <span class="number">2020</span></span><br><span class="line">mZxid = <span class="number">0</span>x42</span><br><span class="line">mtime = Sun Oct <span class="number">11</span> <span class="number">23</span>:<span class="number">32</span>:<span class="number">17</span> CST <span class="number">2020</span></span><br><span class="line">pZxid = <span class="number">0</span>x21</span><br><span class="line">cversion = <span class="number">0</span></span><br><span class="line">dataVersion = <span class="number">2</span></span><br><span class="line">aclVersion = <span class="number">0</span></span><br><span class="line">ephemeralOwner = <span class="number">0</span>x0</span><br><span class="line">dataLength = <span class="number">10</span></span><br><span class="line">numChildren = <span class="number">0</span></span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">12</span>]</span><br></pre></td></tr></table></figure><h2 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h2><blockquote><p>delete path [version]    删除没有子节点的node</p><p>rmr path  遍历删除</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1) delete path 使用delete命令删除指定节点</span></span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">13</span>] delete /node/<span class="keyword">data</span>30000000003</span><br><span class="line"></span><br><span class="line"><span class="comment">#2) delete path version 基于版本号删除指定节点</span></span><br><span class="line"><span class="comment">#   即删除节点的时候，要传入要删除节点的版本号， 如果传入的版本号和当前的版本号不符合时，zookeeper会拒绝本次删除</span></span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">14</span>] delete /node/<span class="keyword">data</span>1 <span class="number">1</span></span><br><span class="line">version No is not valid : /node/<span class="keyword">data</span>1</span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">14</span>] delete /node/<span class="keyword">data</span>1 <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3) rmr path 遍历删除</span></span><br><span class="line"><span class="comment"># 删除非空节点(含有子节点)失败</span></span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">5</span>] delete /a</span><br><span class="line">Node not empty: /a</span><br><span class="line"><span class="comment"># 遍历删除</span></span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">6</span>] rmr /a</span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">7</span>]</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">创建节点</span><br><span class="line">   create  path   data</span><br><span class="line">   -s   顺序节点    </span><br><span class="line">   -e   临时节点</span><br><span class="line">   get   path     节点信息和状态</span><br><span class="line">   stat  path     状态</span><br><span class="line">   </span><br><span class="line">   ls   ls2       查看子节点</span><br><span class="line">   </span><br><span class="line">   set  path  data  [version]</span><br><span class="line">   delete  path [version]</span><br><span class="line">   rmr  遍历删除</span><br><span class="line">   </span><br><span class="line">监听:   </span><br><span class="line">  ls ls2  path  watch</span><br><span class="line">  get stat   path  watch</span><br></pre></td></tr></table></figure><h2 id="监听节点"><a href="#监听节点" class="headerlink" title="监听节点"></a>监听节点</h2><blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&gt;* 在zookeeper中还支持一种watch（监听）机制，它允许对zookeeper注册监听，当监听的对象发生指定的事件的时候，zookeeper就会返回一个通知。</span><br><span class="line">&gt;* 它可以监听事件类型包含下面这些:</span><br><span class="line">  None(-1):客户端和服务端连接状态发生变化</span><br><span class="line">  </span><br><span class="line">  NodeCreated(1):创建节点</span><br><span class="line">  NodeDeleted(2):删除节点</span><br><span class="line">  NodeDataChanged(3):节点数据发生变化,注意即使变更前后的数据内容完全一样也会触发该事件,或者理解成该事件的触发条件是Znode的版本号变更</span><br><span class="line">  NodeChildrenChanged(4):子节点发生变化(创建\删除\数据变更)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&gt;* 其中连接状态分为下面这些</span><br><span class="line">  Disconnected(0):断开</span><br><span class="line">  SyncConnected(3):建立连接,并且完成一次version、zxid同步</span><br><span class="line">  AuthFailed(4):授权失败</span><br><span class="line">  ConnectedReadOnly(5):只读连接</span><br><span class="line">  Expired(-112):会话超时</span><br><span class="line"></span><br><span class="line">&gt;* Zookeeper的事件监听机制有以下特性：</span><br><span class="line">1.当监听器监听的事件被触发,服务端会发送通知给客户端,但通知信息中不包括事件的具体内容。</span><br><span class="line">  以监听ZNode结点数据变化为例,当Znode的数据被改变,客户端会收到事件类型为NodeDataChanged的通知,</span><br><span class="line">  但该Znode的数据改变成了什么客户端无法从通知中获取,需要客户端在收到通知后手动去获取。</span><br><span class="line">2.Watcher是一次性的。一旦被触发将会失效。如果需要反复进行监听就需要反复进行注册。</span><br><span class="line"></span><br><span class="line">这么设计是为了减轻服务端的压力,但是对开发者而言却是相当不友好,不过不用着急,可以通过一些Zookeeper的开源客户端轻松实现对某一事件的永久监听。</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;get path watch：    注册的监听器能够在监听节点的<span class="code">`内容发生改变`</span>的时候，向客户端发出通知</span><br><span class="line">&gt;stat path watch：   注册的监听器能够在监听节点的<span class="code">`状态发生改变`</span>的时候，向客户端发出通知</span><br><span class="line">&gt;ls/ls2 path watch： 注册的监听器能够在监听节点的<span class="code">`子节点新增和删除`</span>的时候，向客户端发出通知</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意: 下面的操作，需要使用两个客户端来完成，一个负责注册监听，令一个负责修改</span></span><br><span class="line"><span class="comment"># 1) 创建/node/data5</span></span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">23</span>] create /node/<span class="keyword">data</span>5 <span class="keyword">data</span></span><br><span class="line">Created /node/<span class="keyword">data</span>5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2) 对/node/data5注册get(内容)监听</span></span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">24</span>] get /node/<span class="keyword">data</span>5 watch</span><br><span class="line"><span class="keyword">data</span></span><br><span class="line">cZxid = <span class="number">0</span>x46</span><br><span class="line">ctime = Mon Oct <span class="number">12</span> <span class="number">00</span>:<span class="number">20</span>:<span class="number">37</span> CST <span class="number">2020</span></span><br><span class="line">mZxid = <span class="number">0</span>x46</span><br><span class="line">mtime = Mon Oct <span class="number">12</span> <span class="number">00</span>:<span class="number">20</span>:<span class="number">37</span> CST <span class="number">2020</span></span><br><span class="line">pZxid = <span class="number">0</span>x46</span><br><span class="line">cversion = <span class="number">0</span></span><br><span class="line">dataVersion = <span class="number">0</span></span><br><span class="line">aclVersion = <span class="number">0</span></span><br><span class="line">ephemeralOwner = <span class="number">0</span>x0</span><br><span class="line">dataLength = <span class="number">4</span></span><br><span class="line">numChildren = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3) 此处，新开一个客户端，去修改掉/node/data5的内容: set /node/data5 mydata</span></span><br><span class="line"><span class="comment"># 4) 然后就会发现控制台返回了一个NodeDataChanged(节点数据变化)的通知</span></span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">25</span>]</span><br><span class="line">WATCHER::</span><br><span class="line"></span><br><span class="line">WatchedEvent state:SyncConnected type:NodeDataChanged path:/node/<span class="keyword">data</span>5</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1) 对/node/data5注册stat(状态)监听</span></span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">25</span>] stat /node/<span class="keyword">data</span>5 watch</span><br><span class="line">cZxid = <span class="number">0</span>x46</span><br><span class="line">ctime = Mon Oct <span class="number">12</span> <span class="number">00</span>:<span class="number">20</span>:<span class="number">37</span> CST <span class="number">2020</span></span><br><span class="line">mZxid = <span class="number">0</span>x49</span><br><span class="line">mtime = Mon Oct <span class="number">12</span> <span class="number">00</span>:<span class="number">21</span>:<span class="number">57</span> CST <span class="number">2020</span></span><br><span class="line">pZxid = <span class="number">0</span>x46</span><br><span class="line">cversion = <span class="number">0</span></span><br><span class="line">dataVersion = <span class="number">2</span></span><br><span class="line">aclVersion = <span class="number">0</span></span><br><span class="line">ephemeralOwner = <span class="number">0</span>x0</span><br><span class="line">dataLength = <span class="number">7</span></span><br><span class="line">numChildren = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2) 此处，新开一个客户端，去修改掉/node/data5的内容: set /node/data5 mydata2</span></span><br><span class="line"><span class="comment"># 3) 然后就会发现控制台返回了一个NodeDataChanged(节点数据变化)的通知</span></span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">26</span>]</span><br><span class="line">WATCHER::</span><br><span class="line"></span><br><span class="line">WatchedEvent state:SyncConnected type:NodeDataChanged path:/node/<span class="keyword">data</span>5</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1) 对/node/data5注册ls(子节点新增或者删除)监听</span></span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">26</span>] ls /node/<span class="keyword">data</span>5 watch</span><br><span class="line">[]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2) 此处，新开一个客户端，去添加掉/node/data5的子节点: set /node/data5/test test</span></span><br><span class="line"><span class="comment"># 3) 然后就会发现控制台返回了一个NodeChildrenChanged(子节点变化)的通知</span></span><br><span class="line">[<span class="type">zk</span>: <span class="type">localhost</span>:<span class="number">2181</span>(<span class="type">CONNECTED</span>) <span class="number">27</span>]</span><br><span class="line">WATCHER::</span><br><span class="line"></span><br><span class="line">WatchedEvent state:SyncConnected type:NodeChildrenChanged path:/node/<span class="keyword">data</span>5</span><br></pre></td></tr></table></figure><h1 id="Java操作Zookeeper"><a href="#Java操作Zookeeper" class="headerlink" title="Java操作Zookeeper"></a>Java操作Zookeeper</h1><blockquote><p>原生API：Java API位于org.apache.ZooKeeper包中。</p><p>ZkClient（不推荐）：Github上一个开源的ZooKeeper客户端，在源生 api 基础之上进行扩展的开源 JAVA 客户端。</p><p>Apache Curator（推荐使用）：最初是Netfix研发的，后来捐献了Apache基金会，目前是Apache的顶级项目。</p></blockquote><h2 id="环境导入"><a href="#环境导入" class="headerlink" title="环境导入"></a>环境导入</h2><p><img data-src="/assets/image-20201014104442293.png" alt="image-20201014104442293"> </p><h2 id="连接ZK"><a href="#连接ZK" class="headerlink" title="连接ZK"></a>连接ZK</h2><blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;ZK重试策略：</span><br><span class="line">RetryUntilElapsed: 一直重试直到规定的时间，以指定时长的间隔重连,直到超过最大连接时长的时间设置</span><br><span class="line">RetryOneTime:  重连一次</span><br><span class="line">RetryNTimes:  以指定时长的间隔重连，重试重连次数</span><br><span class="line">ExponentialBackoffRetry：衰减重试，随着重试次数的增加，间隔时间也会越来越大。</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//连接ZK</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CuratorFramework <span class="title">getClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.设置重试策略</span></span><br><span class="line">    RetryPolicy retryPolicy = <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">1000</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="comment">//2.创建客户端</span></span><br><span class="line">    CuratorFramework client = CuratorFrameworkFactory.newClient(<span class="string">"127.0.0.1:2181"</span>, <span class="number">3000</span>, <span class="number">1000</span>, retryPolicy);</span><br><span class="line">    <span class="comment">//3.启动客户端</span></span><br><span class="line">    client.start();</span><br><span class="line">    <span class="comment">//4.返回客户端连接</span></span><br><span class="line">    <span class="keyword">return</span> client;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建节点</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreateNodes</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       String path = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//1. 创建一个空节点a, 值默认为请求端ip</span></span><br><span class="line">       <span class="comment">//path = getClient().create().forPath("/a");</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//2. 创建一个有内容的b节点</span></span><br><span class="line">       <span class="comment">//path = getClient().create().forPath("/b", "data".getBytes());</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//3. 创建多层节点</span></span><br><span class="line">       <span class="comment">//creatingParentsIfNeeded() 递归创建父目录</span></span><br><span class="line">       <span class="comment">//withMode() 创建模式</span></span><br><span class="line">       <span class="comment">//path = getClient().create().creatingParentsIfNeeded().withMode(CreateMode.PERSISTENT).forPath("/c/c1/c2", "data".getBytes());</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//4. 创建带有的序号的节点</span></span><br><span class="line">       <span class="comment">//path = getClient().create().creatingParentsIfNeeded().withMode(CreateMode.PERSISTENT_SEQUENTIAL).forPath("/d");</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//5. 创建临时节点（客户端关闭，节点消失），设置延时5秒关闭</span></span><br><span class="line">       <span class="comment">//path = getClient().create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).forPath("/e");</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//6. 创建临时带序号节点（客户端关闭，节点消失），设置延时5秒关闭</span></span><br><span class="line">       <span class="comment">//path = getClient().create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL_SEQUENTIAL).forPath("/f");</span></span><br><span class="line"></span><br><span class="line">       System.out.println(path);</span><br><span class="line">       <span class="comment">//关闭客户端</span></span><br><span class="line">       getClient().close();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//更新节点</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateNodes</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="comment">//更新节点数据</span></span><br><span class="line">       <span class="comment">//getClient().setData().forPath("/a", "itheima".getBytes());</span></span><br><span class="line">       <span class="comment">//根据版本号更新节点数据</span></span><br><span class="line">       <span class="comment">//getClient().setData().withVersion(2).forPath("/a", "itheima".getBytes());</span></span><br><span class="line"></span><br><span class="line">       getClient().close();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//获取节点</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetNodes</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="comment">//查询节点数据</span></span><br><span class="line">       <span class="keyword">byte</span>[] bytes = getClient().getData().forPath(<span class="string">"/a"</span>);</span><br><span class="line">       System.out.println(<span class="keyword">new</span> String(bytes));</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 包含状态查询</span></span><br><span class="line">       Stat stat = <span class="keyword">new</span> Stat();</span><br><span class="line">       getClient().getData().storingStatIn(stat).forPath(<span class="string">"/a"</span>);</span><br><span class="line">       System.out.println(stat.getVersion());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//删除数据</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteNodes</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="comment">//删除节点</span></span><br><span class="line">       <span class="comment">//getClient().delete().forPath("/c");</span></span><br><span class="line">       <span class="comment">//删除节点并递归删除其子节点</span></span><br><span class="line">       <span class="comment">//getClient().delete().deletingChildrenIfNeeded().forPath("/c");</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="节点监听"><a href="#节点监听" class="headerlink" title="节点监听"></a>节点监听</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>watch机制</span><br><span class="line"><span class="code">zookeeperwatch机制，一个轻量级的设计。因为它采用了一种推拉结合的模式。</span></span><br><span class="line">  一旦服务端感知主题变了，那么只会发送一个事件类型和节点信息给关注的客户端，而不会包括具体的变更内容，所以事件本身是轻量级的，这就是所谓的"推"部分。</span><br><span class="line"><span class="code">然后，收到变更通知的客户端需要自己去拉变更的数据，这就是"拉"部分。</span></span><br><span class="line"><span class="bullet">* </span>Curator</span><br><span class="line"><span class="code">watche机制分为添加数据和监听节点。Curator在这方面做了优化，Curator引入了Cache的概念用来实现对ZooKeeper服务器端进行事件监听。</span></span><br><span class="line"><span class="code">Cache是Curator对事件监听的包装，其对事件的监听可以近似看做是一个本地缓存视图和远程ZooKeeper视图的对比过程。</span></span><br><span class="line"><span class="code">而且Curator会自动的再次监听，我们就不需要自己手动的重复监听了。</span></span><br><span class="line"><span class="code">Curator中的cache共有三种:</span></span><br><span class="line"><span class="code">NodeCache:  用来监听节点的创建和数据变化</span></span><br><span class="line"><span class="code">PathChildrenCache: 用来监听指定节点的子节点增删和数据变化</span></span><br><span class="line"><span class="code">TreeCache: 像上面两种Cache的结合体，能够监听自身节点的变化、也能够监听子节点的变化</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.curator.RetryPolicy;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.framework.CuratorFramework;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.framework.CuratorFrameworkFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.framework.recipes.cache.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.curator.retry.ExponentialBackoffRetry;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Watch机制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WatchDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//连接ZK</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CuratorFramework <span class="title">getClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.设置重试策略</span></span><br><span class="line">        RetryPolicy retryPolicy = <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">1000</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="comment">//2.创建客户端</span></span><br><span class="line">        CuratorFramework client = CuratorFrameworkFactory.newClient(<span class="string">"127.0.0.1:2181"</span>, <span class="number">3000</span>, <span class="number">1000</span>, retryPolicy);</span><br><span class="line">        <span class="comment">//3.启动客户端</span></span><br><span class="line">        client.start();</span><br><span class="line">        <span class="comment">//4.返回客户端连接</span></span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//只监测当前节点数据</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNodeCache</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建节点数据监听对象</span></span><br><span class="line">        <span class="keyword">final</span> NodeCache nodeCache = <span class="keyword">new</span> NodeCache(getClient(), <span class="string">"/a"</span>);</span><br><span class="line">        nodeCache.start(<span class="keyword">true</span>); <span class="comment">//开始缓存</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(nodeCache.getCurrentData().getData()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加监听对象</span></span><br><span class="line">        nodeCache.getListenable().addListener(<span class="keyword">new</span> NodeCacheListener() &#123;</span><br><span class="line">            <span class="comment">//如果节点数据有变化，会回调该方法</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nodeChanged</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"数据Watcher：路径="</span> + nodeCache.getCurrentData().getPath() + <span class="string">",data="</span> + <span class="keyword">new</span> String(nodeCache.getCurrentData().getData()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//监测所有子节点数据</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPathChildrenCache</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//监听指定节点的子节点变化情况包括: 新增子节点 子节点数据变更 和子节点删除</span></span><br><span class="line">        PathChildrenCache childrenCache = <span class="keyword">new</span> PathChildrenCache(getClient(), <span class="string">"/a"</span>, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//在启动时缓存子节点数据，提示初始化</span></span><br><span class="line">        childrenCache.start(PathChildrenCache.StartMode.POST_INITIALIZED_EVENT);</span><br><span class="line">        <span class="comment">//添加监听</span></span><br><span class="line">        childrenCache.getListenable().addListener(<span class="keyword">new</span> PathChildrenCacheListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">childEvent</span><span class="params">(CuratorFramework client, PathChildrenCacheEvent event)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (event.getType() == PathChildrenCacheEvent.Type.CHILD_ADDED) &#123;</span><br><span class="line">                    System.out.println(event.getData().getPath() + <span class="string">"子节点添加："</span> + <span class="keyword">new</span> String(event.getData().getData()));</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType() == PathChildrenCacheEvent.Type.CHILD_REMOVED) &#123;</span><br><span class="line">                    System.out.println(event.getData().getPath() + <span class="string">"子节点移除："</span> + <span class="keyword">new</span> String(event.getData().getData()));</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType() == PathChildrenCacheEvent.Type.CHILD_UPDATED) &#123;</span><br><span class="line">                    System.out.println(event.getData().getPath() + <span class="string">"子节点修改："</span> + <span class="keyword">new</span> String(event.getData().getData()));</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType() == PathChildrenCacheEvent.Type.INITIALIZED) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"初始化完成"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType() == PathChildrenCacheEvent.Type.CONNECTION_SUSPENDED) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"连接过时"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType() == PathChildrenCacheEvent.Type.CONNECTION_RECONNECTED) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"重新连接"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType() == PathChildrenCacheEvent.Type.CONNECTION_LOST) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"连接过时一段时间"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//监测当前节点和所有的子节点</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTreeCache</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        TreeCache treeCache = <span class="keyword">new</span> TreeCache(getClient(), <span class="string">"/a"</span>);</span><br><span class="line">        treeCache.start();</span><br><span class="line"></span><br><span class="line">        System.out.println(treeCache.getCurrentData(<span class="string">"/a"</span>));</span><br><span class="line"></span><br><span class="line">        treeCache.getListenable().addListener(<span class="keyword">new</span> TreeCacheListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">childEvent</span><span class="params">(CuratorFramework client, TreeCacheEvent event)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (event.getType() == TreeCacheEvent.Type.NODE_ADDED) &#123;</span><br><span class="line">                    System.out.println(event.getData().getPath() + <span class="string">"节点添加"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType() == TreeCacheEvent.Type.NODE_REMOVED) &#123;</span><br><span class="line">                    System.out.println(event.getData().getPath() + <span class="string">"节点移除"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType() == TreeCacheEvent.Type.NODE_UPDATED) &#123;</span><br><span class="line">                    System.out.println(event.getData().getPath() + <span class="string">"节点修改"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType() == TreeCacheEvent.Type.INITIALIZED) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"初始化完成"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType() == TreeCacheEvent.Type.CONNECTION_SUSPENDED) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"连接过时"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType() == TreeCacheEvent.Type.CONNECTION_RECONNECTED) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"重新连接"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType() == TreeCacheEvent.Type.CONNECTION_LOST) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"连接过时一段时间"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Zookeeper使用场景"><a href="#Zookeeper使用场景" class="headerlink" title="Zookeeper使用场景"></a>Zookeeper使用场景</h1><h2 id="ID生成器"><a href="#ID生成器" class="headerlink" title="ID生成器"></a>ID生成器</h2><blockquote><p>通过在ZooKeepr里创建顺序节点，很容易创建一个全局唯一的名字，即生成全局唯一的ID。</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>在每一台机子上需要id的时候执行一个创建顺序节点的操作,一定可以获取到一个唯一的id</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>redis  自增长+1</span><br></pre></td></tr></table></figure><p><img data-src="/assets/image-20201014113353020.png" alt="image-20201014113353020"> </p><h2 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h2><blockquote><p>配置中心使用的是Zookeeper的watch机制</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>需求： </span><br><span class="line"><span class="code">在分布式应用系统中，会有很多的类似的配置文件，他们会散落在各个服务中，比如数据库的用户名和密码</span></span><br><span class="line"><span class="code">如果后期要修改的话，就需要修改非常多的配置文件，这显然不是好的做法，基于这种现状，就有了配置中心的概念</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>方案：</span><br><span class="line"><span class="code">可以把所有的配置都放在一个配置中心，然后各个服务分别去监听配置中心，一旦发现里面的内容发生变化，立即获取变化的内容，然后更新本地配置即可</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>实现：</span><br><span class="line"><span class="code">通过Zookeeper的watch机制，我们可以轻松的实现这一需求，</span></span><br><span class="line"><span class="code">所有的服务需要监听Zookeeper的配置节点，当配置信息发生变化之后，Zookeeper会将变化信息推送给服务，当然服务也可以主动去拉取节点数据</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>说明:</span><br><span class="line"><span class="code">    在这里Zookeeper采用了推拉模式相结合的做法：</span></span><br><span class="line"><span class="code">    push可以保证能够第一时间拿到更新配置，基本可以做到准实时的更新，但push存在问题，即如果有网络抖动，某一次push没有推送成功，将丢失这次配置的更新</span></span><br><span class="line"><span class="code">    pull可以保证一定可以拉取得到数据，pull一般采用定时拉取的方式，即使某一次出现网络问题，没有拉取得到数据，那在下一次定时器也将可以拉取得到数据</span></span><br></pre></td></tr></table></figure><p> <img data-src="/assets/image-20201014113209852.png" alt="image-20201014113209852"> </p><h2 id="分布式协调"><a href="#分布式协调" class="headerlink" title="分布式协调"></a>分布式协调</h2><blockquote><p>分布式协调服务使用的是Zookeeper的watch机制</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>不同的客户端如机器节点，发生了变化，那么所有订阅的客户端都能够接收到相应的Watcher通知，并做出相应的处理。</span><br></pre></td></tr></table></figure><p><img data-src="/assets/image-20201014144022534.png" alt="image-20201014144022534"> </p><h2 id="集群选主"><a href="#集群选主" class="headerlink" title="集群选主"></a>集群选主</h2><blockquote><p>集群选主使用的是zookeeper的临时节点</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>需求:</span><br><span class="line"><span class="code">在集群中，很多情况下是要区分主从节点的，一般情况下主节点负责数据写入，从节点负责数据读取，那么问题来了，怎么确定哪一个节点是主节点的</span></span><br><span class="line"><span class="code">    </span></span><br><span class="line"><span class="bullet">* </span>实现：</span><br><span class="line"><span class="code">使用Zookeeper的临时节点可以轻松实现这一需求</span></span><br><span class="line"><span class="code">我们把上面描述的这个过程称为集群选主的过程，首先所有的节点都认为是从节点，都有机会称为主节点，然后开始选主，步骤比较简单:</span></span><br><span class="line"><span class="bullet">1. </span>所有参与选主的主机都去Zookeeper上创建同一个临时节点，那么最终一定只有一个客户端请求能够创建成功。</span><br><span class="line"><span class="bullet">2. </span>成功创建节点的客户端所在的机器就成为了主节点，其他没有成功创建该节点的客户端，成为从节点</span><br><span class="line"><span class="bullet">3. </span>所有的从节点都会在主节点上注册一个子节点变更的Watcher，用于监控当前主节点是否存活，一旦发现当前的主节点挂了，那么其他客户端将会重新进行选主。</span><br></pre></td></tr></table></figure><p> <img data-src="/assets/image-20201014144945595.png" alt="image-20201014144945595"></p><h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><blockquote><p>分布式锁使用的是Zookeeper的临时有序节点</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>需求： </span><br><span class="line"><span class="code">在分布式系统中，很容出现多台主机操作同一资源的情况， 比如两台主机同时往一个文件中追加写入文本， </span></span><br><span class="line"><span class="code">如果不去做任何的控制，很有可能出现一个写入操作被另一个写入操作覆盖掉的状况</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>方案：</span><br><span class="line"><span class="code">此时我们可以来一把锁，哪个主机获取到了这把锁，就执行写入，另一台主机等待;直到写入操作执行完毕，另一台主机再去获得锁，然后写入</span></span><br><span class="line"><span class="code">这把锁就称为分布式锁， 也就是说:分布式锁是控制分布式系统之间同步访问共享资源的一种方式</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>实现:</span><br><span class="line"><span class="code">使用Zookeeper的临时有序节点可以轻松实现这一需求</span></span><br><span class="line"><span class="bullet">1. </span>所有需要执行操作的主机都去Zookeeper上创建一个临时有序节点</span><br><span class="line"><span class="bullet">2. </span>然后获取到Zookeeper上创建出来的这些节点进行一个从小到大的排序</span><br><span class="line"><span class="bullet">3. </span>判断自己创建的节点是不是最小的，如果是，自己就获取到了锁;   如果不是，则对最小的节点注册一个监听</span><br><span class="line"><span class="bullet">4. </span>如果自己获取到了锁，就去执行相应的操作，当执行完毕之后，连接断开，节点消失，锁就被释放了</span><br><span class="line"><span class="bullet">5. </span>如果自己没有获取到锁，就等待，一直监听节点消失，锁释放后，再重新执行抢夺锁的操作</span><br></pre></td></tr></table></figure><p><img data-src="/assets/image-20201014145925480.png" alt="image-20201014145925480"></p><h1 id="集群-高级"><a href="#集群-高级" class="headerlink" title="集群(高级)"></a>集群(高级)</h1><h2 id="集群介绍"><a href="#集群介绍" class="headerlink" title="集群介绍"></a>集群介绍</h2><p>Zookeeper在一个系统中一般会充当一个很重要的角色，所以一定要保证它的高可用，这就需要部署Zookeeper的集群。</p><p>Zookeeper 有三种运行模式：单机模式、集群模式和伪集群模式。</p><ul><li>单机模式：使用一台主机部署一个Zookeeper来对外提供服务，有单点故障问题，仅适合于开发、测试环境</li><li>集群模式：使用多台服务器，每台上部署一个Zookeeper一起对外提供服务，适合于生产环境</li><li>伪集群模式：在服务器不够多的情况下，也可以考虑在一台服务器上部署多个Zookeeper来对外提供服务</li></ul><h2 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h2><blockquote><p>本次学习环境，为了方便，我们采用windows平台部署伪集群的方式来演示Zookeeper集群的安装和使用。</p></blockquote><h3 id="软件准备"><a href="#软件准备" class="headerlink" title="软件准备"></a>软件准备</h3><p>创建一个文件夹，将Zookeeper软件解压三次，得到三个程序</p><p><img data-src="/assets/image-20201012173352810.png" alt="image-20201012173352810"> </p><h3 id="修改配置-1"><a href="#修改配置-1" class="headerlink" title="修改配置"></a>修改配置</h3><p>编辑Zookeeper的配置文件，主要修改的是端口号和服务地址[此步骤在所有zk上都有操作]</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>修改的内容</span><br><span class="line"><span class="code">dataDir： 数据存储的地址，修改为当前zk下的data目录</span></span><br><span class="line"><span class="code">clientPort：当前zk对外的端口号，因为是在同一个服务器上部署多台，此端口号不能重复</span></span><br><span class="line"><span class="code">server.id: 集群节点信息</span></span><br><span class="line"><span class="code">格式为: server.A=B:C:D    </span></span><br><span class="line"><span class="code">        A：是一个数字，表示这个是服务器的编号    </span></span><br><span class="line"><span class="code">        B：是这个服务器的ip地址    </span></span><br><span class="line"><span class="code">        C：Zookeeper服务器之间的通信端口    </span></span><br><span class="line"><span class="code">        D：Leader选举的端口</span></span><br></pre></td></tr></table></figure><h3 id="创建节点ID"><a href="#创建节点ID" class="headerlink" title="创建节点ID"></a>创建节点ID</h3><p>在dataDir 指定的目录下，创建一个文件，名字为：myid，文件内容: 为上一步service.id中的id  [此步骤在所有zk上都有操作]</p><h3 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h3><p>分别进入到每个zk服务器的bin目录，双击zkServer.cmd，启动三个服务器</p><h3 id="连接测试"><a href="#连接测试" class="headerlink" title="连接测试"></a>连接测试</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入到其中一个zk的bin目录执行连接命令</span></span><br><span class="line"><span class="comment"># zkCli.cmd -server 连接节点的ip：port</span></span><br><span class="line">zkCli.cmd <span class="literal">-server</span> <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">2182</span></span><br><span class="line">Connecting to <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">2182</span></span><br></pre></td></tr></table></figure><h2 id="一致性事务处理"><a href="#一致性事务处理" class="headerlink" title="一致性事务处理"></a>一致性事务处理</h2><h3 id="集群角色"><a href="#集群角色" class="headerlink" title="集群角色"></a>集群角色</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>ZooKeeper集群中的三个角色：</span><br><span class="line"><span class="code">Leader（领导者）：负责投票的发起和决议，更新系统状态，是事务请求的唯一处理者，一个ZooKeeper同一时刻只会有一个Leader</span></span><br><span class="line"><span class="code">Follower（跟随者）：处理客户端请求，参与选主投票</span></span><br><span class="line"><span class="code">Observer（观察者）：处理客户端请求，不参与选主投票</span></span><br><span class="line"><span class="bullet">* </span>Leader可以提供读写服务，Follower或Observer只提供读服务，但是Observer机器不参与Leader选举，也不参与写操作的『过半写成功』策略</span><br></pre></td></tr></table></figure><p><img data-src="/assets/image-20201012185750043.png" alt="image-20201012185750043"> </p><h3 id="Zookeeper的特性"><a href="#Zookeeper的特性" class="headerlink" title="Zookeeper的特性"></a>Zookeeper的特性</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>顺序性: 从同一个客户端发起的事务请求, 最终会严格按照顺序被应用到zookeeper中</span><br><span class="line"><span class="bullet">2. </span>原子性: 所有的事务请求的处理结果在整个集群中的所有机器上的应用情况是一致的; 也就是说,要么整个集群中的所有机器都成功应用了某一事务、要么全都不应用</span><br><span class="line"><span class="bullet">3. </span>可靠性: 一旦服务器成功应用了某一个事务数据,并且对客户端做了响应,那么这个数据在整个集群中一定是同步并且保留下来的</span><br><span class="line"><span class="bullet">4. </span>实时性: 一旦一个事务被成功应用,客户端就能够立即从服务器端读取到事务变更后的最新数据状态(zookeeper仅仅保证在一定时间内,近实时)</span><br></pre></td></tr></table></figure><h3 id="ZAB协议"><a href="#ZAB协议" class="headerlink" title="ZAB协议"></a>ZAB协议</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>Zookeeper采用ZAB(Zookeeper Atomic Broadcast)协议来保证分布式数据一致性。</span><br><span class="line"><span class="bullet">* </span>ZAB并不是一种通用的分布式一致性算法,而是一种专为Zookeeper设计的崩溃可恢复的原子消息广播算法。</span><br><span class="line"><span class="bullet">* </span>ZAB协议包括两种基本模式:崩溃恢复模式和消息广播模式:</span><br><span class="line"><span class="code">消息广播模式主要用来进行事务请求的处理</span></span><br><span class="line"><span class="code">崩溃恢复模式主要用来在集群启动过程,或者Leader服务器崩溃退出后进行新的Leader服务器的选举以及数据同步</span></span><br></pre></td></tr></table></figure><h3 id="事务请求的处理流程"><a href="#事务请求的处理流程" class="headerlink" title="事务请求的处理流程"></a>事务请求的处理流程</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>所有的事务请求都交由集群的Leader服务器来处理,Leader服务器会将一个事务请求转换成一个Proposal(提议),并为其生成一个全局递增的唯一ID,</span><br><span class="line"><span class="code">    这个ID就是事务ID,即ZXID,Leader服务器对Proposal是按其ZXID的先后顺序来进行排序和处理的。</span></span><br><span class="line"><span class="bullet">2. </span>Leader服务器会将Proposal放入每个Follower对应的队列中(Leader会为每个Follower分配一个单独的队列),并以FIFO的方式发送给Follower服务器。</span><br><span class="line"><span class="bullet">3. </span>Follower服务器接收到事务Proposal后,首先以事务日志的方式写入本地磁盘,并且在成功后返回Leader服务器一个ACK响应。</span><br><span class="line"><span class="bullet">4. </span>Leader服务器只要收到过半Follower的ACK响应,就会广播一个Commit消息给Follower以通知其进行Proposal的提交,同时Leader自身也会完成Proposal的提交。</span><br><span class="line"><span class="bullet">5. </span>Follower收到commit请求时，从历史队列中将事务请求commit</span><br></pre></td></tr></table></figure><p><img data-src="/assets/image-20201012183855327.png" alt="image-20201012183855327"> </p><h2 id="集群选举"><a href="#集群选举" class="headerlink" title="集群选举"></a>集群选举</h2><h3 id="服务器状态"><a href="#服务器状态" class="headerlink" title="服务器状态"></a>服务器状态</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>Zookeeper服务器有四个状态</span><br><span class="line"><span class="code">looking：  寻找leader状态。当服务器处于该状态时，它会认为当前集群中没有leader，因此需要进入leader选举状态。</span></span><br><span class="line"><span class="code">leading：  领导者状态。表明当前服务器角色是leader。</span></span><br><span class="line"><span class="code">following：跟随者状态。表明当前服务器角色是follower。</span></span><br><span class="line"><span class="code">observing：观察者状态。表明当前服务器角色是observer。</span></span><br></pre></td></tr></table></figure><h3 id="服务器启动时期的leader选举"><a href="#服务器启动时期的leader选举" class="headerlink" title="服务器启动时期的leader选举"></a>服务器启动时期的leader选举</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>在集群初始化阶段，当有一台服务器server1启动时，其单独无法进行和完成leader选举，</span><br><span class="line"><span class="bullet">* </span>当第二台服务器server2启动时，此时两台机器可以相互通信，每台机器都试图找到leader，于是进入leader选举过程。 </span><br><span class="line"><span class="bullet">* </span>选举过程如下:</span><br><span class="line"><span class="bullet">1. </span>每个server发出一个投票。</span><br><span class="line"><span class="code">   由于是初始情况，server1和server2都会将自己作为leader服务器来进行投票，每次投票会包含所推举的服务器的myid和zxid，</span></span><br><span class="line"><span class="code">   使用(myid, zxid)来表示，此时server1的投票为(1, 0)，server2的投票为(2, 0)，然后各自将这个投票发给集群中其他机器。</span></span><br><span class="line"><span class="bullet">2. </span>集群中的每台服务器接收来自集群中各个服务器的投票。</span><br><span class="line"><span class="bullet">3. </span>处理投票。针对每一个投票，服务器都需要将别人的投票和自己的投票进行pk，pk规则如下:</span><br><span class="line"><span class="code">优先检查zxid。zxid比较大的服务器优先作为leader。</span></span><br><span class="line"><span class="code">如果zxid相同，那么就比较myid。myid较大的服务器作为leader服务器。</span></span><br><span class="line"> 对于Server1而言，它的投票是(1, 0)，接收Server2的投票为(2, 0)，首先会比较两者的zxid，均为0，再比较myid，此时server2的myid最大，</span><br><span class="line"> 于是更新自己的投票为(2, 0)，然后重新投票，对于server2而言，其无须更新自己的投票，只是再次向集群中所有机器发出上一次投票信息即可。</span><br><span class="line"><span class="bullet">4. </span>统计投票。每次投票后，服务器都会统计投票信息，判断是否已经有过半机器接受到相同的投票信息，</span><br><span class="line"><span class="code">对于server1、server2而言，都统计出集群中已经有两台机器接受了(2, 0)的投票信息，此时便认为已经选出了leader</span></span><br><span class="line"><span class="bullet">5. </span>改变服务器状态。一旦确定了leader，每个服务器就会更新自己的状态，如果是follower，那么就变更为following，如果是leader，就变更为leading。</span><br></pre></td></tr></table></figure><h3 id="服务器运行时期的Leader选举"><a href="#服务器运行时期的Leader选举" class="headerlink" title="服务器运行时期的Leader选举"></a>服务器运行时期的Leader选举</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>在zookeeper运行期间，leader与非leader服务器各司其职，即便当有非leader服务器宕机或新加入，此时也不会影响leader，</span><br><span class="line"><span class="bullet">* </span>但是一旦leader服务器挂了，那么整个集群将暂停对外服务，进入新一轮leader选举，其过程和启动时期的Leader选举过程基本一致。</span><br><span class="line"><span class="bullet">* </span>假设正在运行的有server1、server2、server3三台服务器，当前leader是server2，若某一时刻leader挂了，此时便开始Leader选举。</span><br><span class="line"><span class="bullet">* </span>选举过程如下:</span><br><span class="line"><span class="bullet">1. </span>变更状态。leader挂后，余下的服务器都会将自己的服务器状态变更为looking，然后开始进入leader选举过程。</span><br><span class="line"><span class="bullet">2. </span>每个server会发出一个投票。</span><br><span class="line"><span class="code">在运行期间，每个服务器上的zxid可能不同，此时假定server1的zxid为122，server3的zxid为122，</span></span><br><span class="line"><span class="code">在第一轮投票中，server1和server3都会投自己，产生投票(1, 122)，(3, 122)，然后各自将投票发送给集群中所有机器。</span></span><br><span class="line"><span class="bullet">3. </span>接收来自各个服务器的投票。与启动时过程相同</span><br><span class="line"><span class="bullet">4. </span>处理投票。与启动时过程相同，此时，server3将会成为leader。</span><br><span class="line"><span class="bullet">5. </span>统计投票。与启动时过程相同。</span><br><span class="line"><span class="bullet">6. </span>改变服务器的状态。与启动时过程相同。</span><br></pre></td></tr></table></figure><h3 id="observer角色及其配置"><a href="#observer角色及其配置" class="headerlink" title="observer角色及其配置"></a>observer角色及其配置</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>observer角色特点：</span><br><span class="line"><span class="bullet">1. </span>不参与集群的leader选举</span><br><span class="line"><span class="bullet">2. </span>不参与集群中写数据时的ack反馈</span><br><span class="line"><span class="bullet">* </span>为了使用observer角色，在任何想变成observer角色的配置文件中加入如下配置：</span><br><span class="line"><span class="code">peerType=observer</span></span><br><span class="line"><span class="bullet">* </span>并在所有server的配置文件中，配置成observer模式的server的那行配置追加:observer</span><br><span class="line"><span class="code">server.3=192.168.60.130:2289:3389:observer</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Zookeeper介绍&quot;&gt;&lt;a href=&quot;#Zookeeper介绍&quot; class=&quot;headerlink&quot; title=&quot;Zookeeper介绍&quot;&gt;&lt;/a&gt;Zookeeper介绍&lt;/h1&gt;&lt;p&gt;ZooKeeper是一个分布式服务&lt;strong&gt;协调&lt;/strong&gt;框架，主要用来解决分布式应用中的一些数据管理问题，如：统一命名服务、状态同步服务、应用配置项的管理等等。&lt;/p&gt;
&lt;p&gt;ZooKeeper由雅虎研究院开发，是Google Chubby的开源实现，后来托管到Apache，于2010年11月正式成为Apache的顶级项目。&lt;/p&gt;
&lt;p&gt;在大数据生态系统里，很多组件的命名都是某种动物，比如hadoop就是🐘，hive就是🐝。Zookeeper的作用是用来对这些组件进行管理，即动物园管理者。&lt;/p&gt;
&lt;p&gt;官方网址：&lt;a href=&quot;https://zookeeper.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zookeeper.apache.org/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Zookeeper" scheme="http://sunmoon.com/categories/Zookeeper/"/>
    
    
      <category term="分布式协调框架" scheme="http://sunmoon.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%B0%83%E6%A1%86%E6%9E%B6/"/>
    
      <category term="zookeeper数据结构" scheme="http://sunmoon.com/tags/zookeeper%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="zookeeper常见命令" scheme="http://sunmoon.com/tags/zookeeper%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/"/>
    
      <category term="zookeeper使用场景" scheme="http://sunmoon.com/tags/zookeeper%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
    
      <category term="zookeeper集群" scheme="http://sunmoon.com/tags/zookeeper%E9%9B%86%E7%BE%A4/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo</title>
    <link href="http://sunmoon.com/2020/10/13/Dubbo/"/>
    <id>http://sunmoon.com/2020/10/13/Dubbo/</id>
    <published>2020-10-13T13:54:21.000Z</published>
    <updated>2020-10-13T14:03:34.009Z</updated>
    
    <content type="html"><![CDATA[<h1 id="系统架构演变"><a href="#系统架构演变" class="headerlink" title="系统架构演变"></a>系统架构演变</h1><p>随着互联网的发展，网站应用的规模也在不断的扩大，进而导致系统架构也在不断的进行变化。</p><p>从互联网早起到现在，系统架构大体经历了下面几个过程: </p><ul><li>单体应用架构—&gt;垂直应用架构—&gt;分布式架构—&gt;SOA架构—&gt;<code>微服务架构</code></li></ul><a id="more"></a><h2 id="单体应用架构"><a href="#单体应用架构" class="headerlink" title="单体应用架构"></a>单体应用架构</h2><p>单体应用结构，就是将一个系统的多个模块做成一个web项目，然后部署到一台tomcat服务器上</p><p><img data-src="/assets/image-20201013090302092.png" alt="image-20201013090302092"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">优点：</span><br><span class="line"><span class="bullet">- </span>项目架构简单，小型项目的话， 开发成本低</span><br><span class="line"><span class="bullet">- </span>项目部署在一个节点上， 维护方便</span><br><span class="line"></span><br><span class="line">缺点：</span><br><span class="line"><span class="bullet">- </span>项目模块之间紧密耦合，单点容错率低</span><br><span class="line"><span class="bullet">- </span>无法针对不同模块进行针对性优化和水平扩展</span><br></pre></td></tr></table></figure><h2 id="垂直应用架构"><a href="#垂直应用架构" class="headerlink" title="垂直应用架构"></a>垂直应用架构</h2><p>垂直应用架构，就是将原来的一个系统拆成成多个模块，然后每个模块部署在一台tomcat服务器上</p><p><img data-src="/assets/image-20201013090315040.png" alt="image-20201013090315040"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">优点：</span><br><span class="line"><span class="bullet">- </span>可以针对不同模块进行优化和水平扩展</span><br><span class="line"><span class="bullet">- </span>一个系统的问题不会影响到其他系统，提高单点容错率</span><br><span class="line"><span class="code">    </span></span><br><span class="line">缺点：</span><br><span class="line"><span class="bullet">- </span>系统之间相互独立，无法进行相互调用，会有重复的开发任务</span><br></pre></td></tr></table></figure><h2 id="分布式架构"><a href="#分布式架构" class="headerlink" title="分布式架构"></a>分布式架构</h2><p>分布式架构就是指将服务层单独部署在tomcat上对外提供服务，在controller中可以通过远程调用访问服务层中的方法</p><p><img data-src="/assets/image-20201013090328364.png" alt="image-20201013090328364"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">优点：</span><br><span class="line"><span class="bullet">- </span>抽取公共的功能为服务层，提高代码复用性</span><br><span class="line"></span><br><span class="line">缺点：</span><br><span class="line"><span class="bullet">- </span>调用关系错综复杂，难以维护</span><br></pre></td></tr></table></figure><h2 id="SOA架构"><a href="#SOA架构" class="headerlink" title="SOA架构"></a>SOA架构</h2><p>SOA结构，在分布式架构的基础上，增加一个调度中心对系统进行实时管理。</p><p><img data-src="/assets/image-20201013090336898.png" alt="image-20201013090336898"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">面试直达：聊一聊集群和分布式的区别?</span><br><span class="line"><span class="bullet">+ </span>集群:多台服务器重复完成同一个任务,即同一个任务部署在多台服务器上</span><br><span class="line"><span class="bullet">+ </span>分布式:多台服务器协同完成同一个任务,即同一个任务拆分为多个子任务,多个子任务部署在多台服务器上协同完成同一个任务</span><br></pre></td></tr></table></figure><p><img data-src="/assets/image-20201013091340058.png" alt="image-20201013091340058"></p><h1 id="Dubbo概述"><a href="#Dubbo概述" class="headerlink" title="Dubbo概述"></a>Dubbo概述</h1><h2 id="Dubbo简介"><a href="#Dubbo简介" class="headerlink" title="Dubbo简介"></a>Dubbo简介</h2><p>Apache Dubbo是一款高性能的Java RPC框架，可以和Spring框架无缝集成。官网地址：<a href="http://dubbo.apache.org" target="_blank" rel="noopener">http://dubbo.apache.org</a></p><h3 id="发展历程"><a href="#发展历程" class="headerlink" title="发展历程"></a>发展历程</h3><ul><li>Dubbo是阿里巴巴内部使用的分布式业务框架，2012年由阿里巴巴开源</li><li>在很短时间内，Dubbo就被许多互联网公司所采用，并产生了许多衍生版本，如网易，京东，新浪，当当等等</li><li>由于阿里策略变化，2014年10月Dubbo停止维护。随后部分互联网公司公开了自行维护的Dubbo版本，比较著名的如当当DubboX</li><li>经过三年的沉寂，在2017年9月，阿里宣布重启Dubbo项目，并决策在未来对开源进行长期持续的投入</li><li>随后Dubbo开始了密集的更新，并将停摆三年以来大量分支上的特性及缺陷修正快速整合</li><li>2018.2月，阿里将Dubbo捐献给Apache基金会，Dubbo成为Apache孵化器项目</li></ul><h3 id="RPC介绍"><a href="#RPC介绍" class="headerlink" title="RPC介绍"></a>RPC介绍</h3><ul><li><p>RPC全称为remote procedure call，<strong>即远程过程调用</strong></p></li><li><p>简单的讲，RPC可以<strong>让我们像调用本地方法一样来调用远程方法</strong></p></li><li><p>需要注意的是RPC并不是一个具体的技术，而是指整个网络远程调用过程</p></li><li><p>Java中的RPC框架比较多，广泛使用的有RMI、Hessian、Dubbo等</p></li></ul><h3 id="核心能力"><a href="#核心能力" class="headerlink" title="核心能力"></a>核心能力</h3><ul><li>面向接口的远程方法调用</li><li>智能容错和负载均衡</li><li>服务自动注册和发现</li></ul><h2 id="Dubbo架构"><a href="#Dubbo架构" class="headerlink" title="Dubbo架构"></a>Dubbo架构</h2><p><img data-src="/assets/image-20201013094335527.png" alt="image-20201013094335527"></p><p><img data-src="/assets/dubbo%E6%9E%B6%E6%9E%84.png" alt="dubbo架构"></p><p><strong>节点角色说明：</strong></p><table><thead><tr><th><strong>节点</strong></th><th><strong>角色名称</strong></th></tr></thead><tbody><tr><td>Provider</td><td>暴露服务的服务提供方</td></tr><tr><td>Consumer</td><td>调用远程服务的服务消费方</td></tr><tr><td>Registry</td><td>服务注册与发现的注册中心</td></tr><tr><td>Monitor</td><td>统计服务的调用次数和调用时间的监控中心</td></tr><tr><td>Container</td><td>服务运行容器</td></tr></tbody></table><p><strong>调用关系说明</strong>:</p><ol start="0"><li>服务容器负责启动，加载，运行服务提供者。</li><li>服务提供者在启动时，向注册中心注册自己提供的服务。</li><li>服务消费者在启动时，向注册中心订阅自己所需的服务。</li><li>注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</li><li>服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li><li>服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">面试直达: </span><br><span class="line"><span class="bullet">1. </span>服务调用者和注册中心是基于推模式还是拉模式获取服务的?</span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2. </span>如果服务注册中心宕机了, 会不会影响到服务的正常调用?</span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">3. </span>在dubbo的各个服务组件调用中中,什么地方用的是长连接,什么地方用的是短连接?</span><br></pre></td></tr></table></figure><h1 id="Dubbo入门案例"><a href="#Dubbo入门案例" class="headerlink" title="Dubbo入门案例"></a>Dubbo入门案例</h1><h2 id="服务注册中心准备"><a href="#服务注册中心准备" class="headerlink" title="服务注册中心准备"></a>服务注册中心准备</h2><p>注册中心负责服务地址的注册与查找，服务提供者和消费者与注册中心交互。</p><p>Dubbo支持的服务注册中心有很多，比如zookeeper、redis、mysql等等，官方推荐使用 zookeeper 注册中心。</p><p>Zookeeper是Apacahe Hadoop的子项目，是一个树型的目录服务，支持变更推送，适合作为Dubbo服务的注册中心，可用于生产环境。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>将的zookeeper-3.4.6.zip复制到一个没有中文，没有空格的目录，然后解压，即可得到zookeeper的软件</p><p><img data-src="/assets/zookeeper%E5%AE%89%E8%A3%85.png" alt="zookeeper安装"></p><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><ol><li>进入到zookeeper的配置目录，复制<code>zoo_sample.cfg</code>为<code>zoo.cfg</code></li><li>编辑<code>zoo.cfg</code>文件，修改<code>dataDir</code>的值为<code>安装目录\\data</code>这是zookeeper存储数据的位置</li></ol><p><img data-src="/assets/zookeeper%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE.png" alt="zookeeper修改配置"></p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>进入安装路径的bin目录，双击zkServer.cmd即可启动zookeeper服务</p><p><img data-src="/assets/zookeeper%E5%90%AF%E5%8A%A8.png" alt="zookeeper启动"></p><h2 id="准备一个父工程"><a href="#准备一个父工程" class="headerlink" title="准备一个父工程"></a>准备一个父工程</h2><blockquote><p>dubbo_parent</p></blockquote><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- dubbo相关 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.netty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>netty-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.32.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.sgroschupf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置编译版本为1.8 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="服务提供者开发"><a href="#服务提供者开发" class="headerlink" title="服务提供者开发"></a>服务提供者开发</h2><h3 id="创建一个web工程"><a href="#创建一个web工程" class="headerlink" title="创建一个web工程"></a>创建一个web工程</h3><p> <img data-src="/assets/dubbo%E5%BF%AB%E9%80%9F%E6%A1%88%E4%BE%8B1.png" alt="dubbo快速案例1"></p><h3 id="创建service接口"><a href="#创建service接口" class="headerlink" title="创建service接口"></a>创建service接口</h3><p> <img data-src="/assets/dubbo%E5%BF%AB%E9%80%9F%E6%A1%88%E4%BE%8B2.png" alt="dubbo快速案例2"></p><h3 id="创建service实现类"><a href="#创建service实现类" class="headerlink" title="创建service实现类"></a>创建service实现类</h3><p> <img data-src="/assets/dubbo%E5%BF%AB%E9%80%9F%E6%A1%88%E4%BE%8B3.png" alt="dubbo快速案例3"></p><h3 id="加入spring-dubbo配置文件"><a href="#加入spring-dubbo配置文件" class="headerlink" title="加入spring-dubbo配置文件"></a>加入spring-dubbo配置文件</h3><p> <img data-src="/assets/dubbo%E5%BF%AB%E9%80%9F%E6%A1%88%E4%BE%8B4.png" alt="dubbo快速案例4"></p><h3 id="加入web-xml"><a href="#加入web-xml" class="headerlink" title="加入web.xml"></a>加入web.xml</h3><p><img data-src="/assets/dubbo%E5%BF%AB%E9%80%9F%E6%A1%88%E4%BE%8B5.png" alt="dubbo快速案例5"></p><h3 id="部署测试"><a href="#部署测试" class="headerlink" title="部署测试"></a>部署测试</h3><p> <img data-src="/assets/dubbo%E5%BF%AB%E9%80%9F%E6%A1%88%E4%BE%8B6.png" alt="dubbo快速案例6"></p><h2 id="服务消费者开发"><a href="#服务消费者开发" class="headerlink" title="服务消费者开发"></a>服务消费者开发</h2><h3 id="创建一个web工程-1"><a href="#创建一个web工程-1" class="headerlink" title="创建一个web工程"></a>创建一个web工程</h3><p> <img data-src="/assets/dubbo%E5%BF%AB%E9%80%9F%E6%A1%88%E4%BE%8B7.png" alt="dubbo快速案例7"></p><h3 id="复制一个service接口"><a href="#复制一个service接口" class="headerlink" title="复制一个service接口"></a>复制一个service接口</h3><p> <img data-src="/assets/dubbo%E5%BF%AB%E9%80%9F%E6%A1%88%E4%BE%8B8.png" alt="dubbo快速案例8"></p><h3 id="创建controller类"><a href="#创建controller类" class="headerlink" title="创建controller类"></a>创建controller类</h3><p> <img data-src="/assets/dubbo%E5%BF%AB%E9%80%9F%E6%A1%88%E4%BE%8B9.png" alt="dubbo快速案例9"></p><h3 id="加入spring-dubbo配置文件-1"><a href="#加入spring-dubbo配置文件-1" class="headerlink" title="加入spring-dubbo配置文件"></a>加入spring-dubbo配置文件</h3><p> <img data-src="/assets/dubbo%E5%BF%AB%E9%80%9F%E6%A1%88%E4%BE%8B10.png" alt="dubbo快速案例10"></p><h3 id="加入web-xml-1"><a href="#加入web-xml-1" class="headerlink" title="加入web.xml"></a>加入web.xml</h3><p> <img data-src="/assets/dubbo%E5%BF%AB%E9%80%9F%E6%A1%88%E4%BE%8B11.png" alt="dubbo快速案例11"></p><h3 id="部署测试-1"><a href="#部署测试-1" class="headerlink" title="部署测试"></a>部署测试</h3><p> <img data-src="/assets/dubbo%E5%BF%AB%E9%80%9F%E6%A1%88%E4%BE%8B12.png" alt="dubbo快速案例12"></p><p><img data-src="/assets/dubbo%E5%BF%AB%E9%80%9F%E6%A1%88%E4%BE%8B13.png" alt="dubbo快速案例13"></p><h2 id="执行过程说明"><a href="#执行过程说明" class="headerlink" title="执行过程说明"></a>执行过程说明</h2><p><img data-src="/assets/dubbo%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E8%AF%B4%E6%98%8E.png" alt="dubbo执行过程说明"></p><h2 id="Dubbo的两种部署方式"><a href="#Dubbo的两种部署方式" class="headerlink" title="Dubbo的两种部署方式"></a>Dubbo的两种部署方式</h2><ul><li><p>直接采用tomcat部署(推荐企业生产环境)</p></li><li><p>使用main方法直接启动spring环境(推荐开发 测试阶段使用   目的节省内存资源)</p></li></ul><p><img data-src="/assets/dubbo%E9%83%A8%E7%BD%B2%E6%96%B9%E5%BC%8F.png" alt="dubbo部署方式"></p><h1 id="Dubbo的使用细节"><a href="#Dubbo的使用细节" class="headerlink" title="Dubbo的使用细节"></a>Dubbo的使用细节</h1><h2 id="包扫描"><a href="#包扫描" class="headerlink" title="包扫描"></a>包扫描</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--服务提供者和服务消费者都需要配置包扫描，作用是扫描指定包(包括子包)下的类中的注解: @Service  @Refrences--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:annotation</span> <span class="attr">package</span>=<span class="string">"com.itheima.dubbo.controller"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">在服务提供者一方配置，可以指定使用的协议名称和端口号。</span></span><br><span class="line"><span class="comment">其中Dubbo支持的协议有：dubbo、rmi、hessian、http、webservice、rest、redis等。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="启动时检查"><a href="#启动时检查" class="headerlink" title="启动时检查"></a>启动时检查</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    启动时检查, 配置在服务消费者一方，用于服务消费者在启动的时候主动检查服务提供者是否准备好提供服务</span></span><br><span class="line"><span class="comment">       如果配置为false, 代表不检查</span></span><br><span class="line"><span class="comment">       如果配置为true, 代表检查, 一旦检查到服务提供者未准备好, 就会直接抛异常</span></span><br><span class="line"><span class="comment">    建议在开发阶段将check值设置为false(默认)，在生产环境下改为true。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:consumer</span> <span class="attr">check</span>=<span class="string">"false"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="超时时间和重试机制-配置"><a href="#超时时间和重试机制-配置" class="headerlink" title="超时时间和重试机制(配置)"></a>超时时间和重试机制(配置)</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置在消费者端一方: 默认的超时时间是1s ，默认的重试次数是3次--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:consumer</span> <span class="attr">timeout</span>=<span class="string">"500000000"</span> <span class="attr">retries</span>=<span class="string">"0"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Dubbo入门案例改进"><a href="#Dubbo入门案例改进" class="headerlink" title="Dubbo入门案例改进"></a>Dubbo入门案例改进</h1><h2 id="当前工程的问题"><a href="#当前工程的问题" class="headerlink" title="当前工程的问题"></a>当前工程的问题</h2><ol><li>Service接口代码重复</li><li>两个工程中的Service必须完全一致, 这做起来其实很麻烦</li></ol><p>改进思路:  <strong>将service接口单独做成一个模块, 然后让provider和consumer来引用</strong></p><h2 id="工程改进"><a href="#工程改进" class="headerlink" title="工程改进"></a>工程改进</h2><h3 id="创建一个新模块-接口"><a href="#创建一个新模块-接口" class="headerlink" title="创建一个新模块(接口)"></a>创建一个新模块(接口)</h3><p><img data-src="/assets/%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B%E6%94%B9%E8%BF%9B1.png" alt="入门案例改进1"></p><h3 id="从provider和consumer引入新模块"><a href="#从provider和consumer引入新模块" class="headerlink" title="从provider和consumer引入新模块"></a>从provider和consumer引入新模块</h3><p><img data-src="/assets/%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B%E6%94%B9%E8%BF%9B2.png" alt="入门案例改进2"></p><h2 id="Dubbo下的标准Mavne模块划分"><a href="#Dubbo下的标准Mavne模块划分" class="headerlink" title="Dubbo下的标准Mavne模块划分"></a>Dubbo下的标准Mavne模块划分</h2><p><img data-src="/assets/Dubbo%E4%B8%8B%E7%9A%84%E6%A0%87%E5%87%86maven%E6%A8%A1%E5%9D%97%E5%88%92%E5%88%86.png" alt="Dubbo下的标准maven模块划分"></p><h1 id="Dubbo监控中心"><a href="#Dubbo监控中心" class="headerlink" title="Dubbo监控中心"></a>Dubbo监控中心</h1><p>Dubbo给我们提供了一个UI界面的监控中心, 通过它可以观察到dubbo内部的详细信息</p><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><p>准备一个没有使用过的tomcat, 解压到一个没有中文和空格的路径</p><p><img data-src="/assets/dubbo%E7%9B%91%E6%8E%A7%E4%B8%AD%E5%BF%831.png" alt="dubbo监控中心1"></p><h3 id="部署监控程序"><a href="#部署监控程序" class="headerlink" title="部署监控程序"></a>部署监控程序</h3><p>将<code>dubbo-admin.war</code>程序部署到tomcat, 然后启动tomcat, 让程序解压</p><p><img data-src="/assets/dubbo%E7%9B%91%E6%8E%A7%E4%B8%AD%E5%BF%832.png" alt="dubbo监控中心2"></p><h3 id="配置文件调整"><a href="#配置文件调整" class="headerlink" title="配置文件调整"></a>配置文件调整</h3><blockquote><p>如果zookeeper的地址和端口没有修改过,这步无需操作;   如果修改了下面的文件, 则必须重启tomcat</p></blockquote><p><img data-src="/assets/dubbo%E7%9B%91%E6%8E%A7%E4%B8%AD%E5%BF%833.png" alt="dubbo监控中心3"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>打开浏览器，输入<a href="http://127.0.0.1:9999/dubbo-admin/" target="_blank" rel="noopener">http://127.0.0.1:9999/dubbo-admin/</a> ，登录用户名和密码均为root, 登录成功可以见到下面的页面</p><p><img data-src="/assets/dubbo%E7%9B%91%E6%8E%A7%E4%B8%AD%E5%BF%834.png" alt="dubbo监控中心4"></p><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><p>通过服务治理下<code>服务  提供者  消费者</code>可以观察具体应用的信息</p><p><img data-src="/assets/dubbo%E7%9B%91%E6%8E%A7%E4%B8%AD%E5%BF%835.png" alt="dubbo监控中心5"></p><h1 id="企业用户申请"><a href="#企业用户申请" class="headerlink" title="企业用户申请"></a>企业用户申请</h1><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><h3 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h3><p>我们的平台, 除了后台管理系统之外, 其实还有一个供用户使用的前台系统, 具体页面如下</p><p>我们现在需要把这个前台系统也部署起来, 它的主要功能是完成企业的申请[ 对ss_company表做插入操作 ]</p><p><img data-src="/assets/%E4%BC%81%E4%B8%9A%E7%94%A8%E6%88%B7%E7%94%B3%E8%AF%B71.png" alt="企业用户申请1"></p><h3 id="模型分析"><a href="#模型分析" class="headerlink" title="模型分析"></a>模型分析</h3><p><img data-src="/assets/%E4%BC%81%E4%B8%9A%E7%94%A8%E6%88%B7%E7%94%B3%E8%AF%B7%E6%A8%A1%E5%9E%8B%E5%88%86%E6%9E%90.png" alt="企业用户申请模型分析"></p><h2 id="模块拆分"><a href="#模块拆分" class="headerlink" title="模块拆分"></a>模块拆分</h2><h3 id="补充缺少的模块-修改打包方式"><a href="#补充缺少的模块-修改打包方式" class="headerlink" title="补充缺少的模块, 修改打包方式"></a>补充缺少的模块, 修改打包方式</h3><p><strong>新建四个模块,并将两个service和两个web模块结尾的模块调整为maven的web模块</strong></p><p><img data-src="/assets/image-20200701234316596.png" alt="image-20200701234316596"> </p><h3 id="建立包之间的依赖关系-略"><a href="#建立包之间的依赖关系-略" class="headerlink" title="建立包之间的依赖关系(略)"></a>建立包之间的依赖关系(略)</h3><p><img data-src="/assets/image-20200701235105568.png" alt="image-20200701235105568"> </p><h3 id="代码拆分"><a href="#代码拆分" class="headerlink" title="代码拆分"></a>代码拆分</h3><p>==将当前system_service中的代码分到四个模块中==</p><p><img data-src="/assets/image-20200702101105020.png" alt="image-20200702101105020"></p><h3 id="配置文件添加"><a href="#配置文件添加" class="headerlink" title="配置文件添加"></a>配置文件添加</h3><p><img data-src="/assets/image-20200702104019293.png" alt="image-20200702104019293"> </p><h2 id="dubbo环境加入"><a href="#dubbo环境加入" class="headerlink" title="dubbo环境加入"></a>dubbo环境加入</h2><h3 id="添加dubbo的配置文件"><a href="#添加dubbo的配置文件" class="headerlink" title="添加dubbo的配置文件"></a>添加dubbo的配置文件</h3><h4 id="服务提供方"><a href="#服务提供方" class="headerlink" title="服务提供方"></a>服务提供方</h4><p>在两个service模块中,添加dubbo的配置文件<code>applicationContext-dubbo.xml</code>,内容如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--这个名字, 尽量跟项目名一致--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"export_company_service"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这个端口,不能重复--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20881"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://127.0.0.1:2181"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:annotation</span> <span class="attr">package</span>=<span class="string">"com.itheima.service"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img data-src="/assets/image-20200702104823270.png" alt="image-20200702104823270"> </p><h4 id="服务消费方"><a href="#服务消费方" class="headerlink" title="服务消费方"></a>服务消费方</h4><p>修改两个web模块中的dubbo的配置文件<code>springmvc.xml</code>,添加下面配置:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--这个名字, 尽量跟项目名一致--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"export_manager_web"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:consumer</span> <span class="attr">timeout</span>=<span class="string">"50000000"</span> <span class="attr">retries</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://127.0.0.1:2181"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:annotation</span> <span class="attr">package</span>=<span class="string">"com.itheima.web"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p> <img data-src="/assets/image-20200702105217865.png" alt="image-20200702105217865"> </p><h3 id="修改注解"><a href="#修改注解" class="headerlink" title="修改注解"></a>修改注解</h3><ol><li><p>将所有Service实现类上的@Service注解改为阿里的@Service注解</p></li><li><p>将所有下图所示所有类中的==注入service的@Autowired注解==改为阿里的@Reference</p></li></ol><p><img data-src="/assets/image-20200702000938739.png" alt="image-20200702000938739"> </p><h3 id="整合dubbo后-shiro的一个问题"><a href="#整合dubbo后-shiro的一个问题" class="headerlink" title="整合dubbo后, shiro的一个问题+"></a>整合dubbo后, shiro的一个问题+</h3><blockquote><p>现象: 在SaasRelm中, 使用@Refrence注入的userService为空</p><p>原因: Realm先于dubbo创建在，而创建的时候就会去dubbo中获取service对象, 所以获取不到</p><p>解决方案: 从Dubbo中获取userService获取后交给spring容器管理。SaasRelm使用的时候再从spring容器中获取。</p></blockquote><p><strong>1 创建一个工具类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.system.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringUtil</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserService <span class="title">userService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (SpringUtil.applicationContext == <span class="keyword">null</span>) &#123;</span><br><span class="line">            SpringUtil.applicationContext = applicationContext;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取applicationContext</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title">getApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过name获取 Bean.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getApplicationContext().getBean(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过class获取Bean.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getApplicationContext().getBean(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过name,以及Clazz返回指定的Bean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(String name, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getApplicationContext().getBean(name, clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2 修改SaasReam中获取service的方式</strong></p><p><img data-src="/assets/image-20200702113358316.png" alt="image-20200702113358316"> </p><h3 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h3><blockquote><p>开发环境下, 为了方便, 可以直接使用main方法启动两个service</p></blockquote><p><img data-src="/assets/image-20200714192208427.png" alt="image-20200714192208427"> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    ClassPathXmlApplicationContext act =</span><br><span class="line">            <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath*:spring/applicationContext-*.xml"</span>);</span><br><span class="line">    act.start();</span><br><span class="line">    System.in.read();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="开发前台功能"><a href="#开发前台功能" class="headerlink" title="开发前台功能"></a>开发前台功能</h2><h3 id="添加页面"><a href="#添加页面" class="headerlink" title="添加页面"></a>添加页面</h3><p><img data-src="/assets/image-20200701235951099.png" alt="image-20200701235951099"> </p><h3 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h3><p><img data-src="/assets/image-20200702114553037.png" alt="image-20200702114553037"> </p><p><img data-src="/assets/image-20200702115022022.png" alt="image-20200702115022022"> </p><h3 id="企业申请页面代码分析"><a href="#企业申请页面代码分析" class="headerlink" title="企业申请页面代码分析"></a>企业申请页面代码分析</h3><p><img data-src="/assets/image-20200702115409290.png" alt="image-20200702115409290"> </p><h3 id="companyController开发"><a href="#companyController开发" class="headerlink" title="companyController开发"></a>companyController开发</h3><p>在<code>export_portal_web</code>模块的<code>com.itheima.web.controller</code>下建立下面的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.company.Company;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.company.CompanyService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompanyController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span></span><br><span class="line">    <span class="keyword">private</span> CompanyService companyService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/apply"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">(Company company)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//设置企业ID和状态</span></span><br><span class="line">            company.setId(UUID.randomUUID().toString());</span><br><span class="line">            company.setState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//调用service保存</span></span><br><span class="line">            companyService.save(company);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"1"</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试-略"><a href="#测试-略" class="headerlink" title="测试(略)"></a>测试(略)</h3>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;系统架构演变&quot;&gt;&lt;a href=&quot;#系统架构演变&quot; class=&quot;headerlink&quot; title=&quot;系统架构演变&quot;&gt;&lt;/a&gt;系统架构演变&lt;/h1&gt;&lt;p&gt;随着互联网的发展，网站应用的规模也在不断的扩大，进而导致系统架构也在不断的进行变化。&lt;/p&gt;
&lt;p&gt;从互联网早起到现在，系统架构大体经历了下面几个过程: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单体应用架构—&amp;gt;垂直应用架构—&amp;gt;分布式架构—&amp;gt;SOA架构—&amp;gt;&lt;code&gt;微服务架构&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="分布式" scheme="http://sunmoon.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="Dubbo" scheme="http://sunmoon.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F/Dubbo/"/>
    
    
      <category term="系统架构" scheme="http://sunmoon.com/tags/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/"/>
    
      <category term="dubbo" scheme="http://sunmoon.com/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>Shiro安全框架</title>
    <link href="http://sunmoon.com/2020/10/11/Shiro%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6/"/>
    <id>http://sunmoon.com/2020/10/11/Shiro%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6/</id>
    <published>2020-10-11T12:08:47.000Z</published>
    <updated>2020-10-11T13:04:24.878Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Shiro概述"><a href="#Shiro概述" class="headerlink" title="Shiro概述"></a>Shiro概述</h1><h2 id="当前项目的问题"><a href="#当前项目的问题" class="headerlink" title="当前项目的问题"></a>当前项目的问题</h2><ol><li>用户不用登录，就能直接通过url访问saas系统内部的页面  <code>直接输入http://localhost:8080/system/module/list.do就能看到所有模块</code></li><li>使用低权限的管理员身份登录,也可以访问高权限的用户菜单 <code>比如使用普通员工登录, 直接url就能访问到它本应访问不到的页面</code></li><li>页面上标签未做到权限控制 <code>给一个员工分配了部门管理\查看权限, 但没分配新增权限, 但页面上依旧显示新增按钮</code></li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">问题:</span><br><span class="line"><span class="bullet">1. </span>用户不登录就可以访问系统资源</span><br><span class="line"><span class="bullet">2. </span>用户登录之后可以访问到不属于自己的资源</span><br><span class="line"><span class="bullet">3. </span>页面标签没有做到权限限制</span><br></pre></td></tr></table></figure><p>​     上述功能的描述，可以使用<strong>过滤器</strong>或<strong>拦截器</strong>完成，当然在实际开发者已经有组织把这些功能封装为框架，比如<strong>Shiro</strong>或者<strong>SpringSecurity</strong>，来简化权限的控制，我们今天使用<code>shiro</code>框架。</p><a id="more"></a><h2 id="Shiro简介"><a href="#Shiro简介" class="headerlink" title="Shiro简介"></a>Shiro简介</h2><p>Apache Shiro是Java的一个安全框架。不仅功能强大，而且使用简单，它为开发人员提供一个直观而全面的<span style="color:red">认证，授权</span>，加密及会话管理的解决方案。</p><p><img data-src="/assets/shiro%E7%AE%80%E4%BB%8B.png" alt="shiro简介"></p><p>官网地址：<a href="http://shiro.apache.org/" target="_blank" rel="noopener">http://shiro.apache.org/</a> </p><h2 id="Shiro的功能"><a href="#Shiro的功能" class="headerlink" title="Shiro的功能"></a>Shiro的功能</h2><p><img data-src="/assets/shiro%E5%8A%9F%E8%83%BD.png" alt="shiro功能"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>Authentication（认证）</span><br><span class="line"><span class="code">用户登录，身份识别    ---      结果:不是系统用户不能访问系统</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>Authorization（授权）</span><br><span class="line"><span class="code">限定用户可进行的操作  ----     结果:没权限不能访问资源</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>Cryptography（加密）</span><br><span class="line"><span class="code">安全数据加密</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>Session Manager（会话）</span><br><span class="line"><span class="code">用户登录后就是一次会话，在没有退出之前，它的所有信息都在会话中(类似于web的session)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>Web Integration</span><br><span class="line"><span class="code">web容器集成</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>Integrations</span><br><span class="line"><span class="code">集成其他应用，比如spring、缓存</span></span><br></pre></td></tr></table></figure><h2 id="shiro的架构"><a href="#shiro的架构" class="headerlink" title="shiro的架构"></a>shiro的架构</h2><p><img data-src="/assets/Shiro%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="Shiro架构图"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>Application Code（应用）</span><br><span class="line"><span class="code">我们自己编写的项目</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>Subject（主体）</span><br><span class="line"><span class="code">它是一个工具类，负责用户和shiro框架交互</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>SecurityManager（安全管理器）</span><br><span class="line"><span class="code">它是Shiro架构中最核心的组件，通过它可以协调其他组件完成用户认证和授权</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>Realm（域）</span><br><span class="line"><span class="code">它定义了访问数据的方式，用来连接不同的数据源，如：数据库，配置文件等</span></span><br></pre></td></tr></table></figure><p><strong>明确我们使用Shiro主要要做两件事</strong></p><ul><li>认证：认证指的是匹配用户名（邮箱）和密码，让平台认识你。</li><li>授权：授权指的是当前认证的用户进入平台，能操作哪些页面。</li></ul><p><img data-src="/assets/%E8%AE%A4%E8%AF%81%E5%92%8C%E6%8E%88%E6%9D%83.png" alt="认证和授权"></p><h2 id="Shiro过滤器"><a href="#Shiro过滤器" class="headerlink" title="Shiro过滤器"></a>Shiro过滤器</h2><table><thead><tr><th>过滤器简称</th><th>对应的java类</th><th>描述</th></tr></thead><tbody><tr><td><strong>anon</strong></td><td>org.apache.shiro.web.filter.authc.AnonymousFilter</td><td>未认证访问</td></tr><tr><td><strong>authc</strong></td><td>org.apache.shiro.web.filter.authc.FormAuthenticationFilter</td><td>认证后访问</td></tr><tr><td>authcBasic</td><td>org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter</td><td>httpBasic认证后访问</td></tr><tr><td><strong>perms</strong></td><td>org.apache.shiro.web.filter.authz.PermissionsAuthorizationFilter</td><td>指定权限访问</td></tr><tr><td>port</td><td>org.apache.shiro.web.filter.authz.PortFilter</td><td>指定端口访问</td></tr><tr><td>rest</td><td>org.apache.shiro.web.filter.authz.HttpMethodPermissionFilter</td><td>指定rest访问</td></tr><tr><td>roles</td><td>org.apache.shiro.web.filter.authz.RolesAuthorizationFilter</td><td>指定角色访问</td></tr><tr><td>ssl</td><td>org.apache.shiro.web.filter.authz.SslFilter</td><td>ssl认证后访问</td></tr><tr><td>user</td><td>org.apache.shiro.web.filter.authc.UserFilter</td><td>指定用户访问</td></tr><tr><td>logout</td><td>org.apache.shiro.web.filter.authc.LogoutFilter</td><td>用户退出</td></tr></tbody></table><h2 id="Shiro标签"><a href="#Shiro标签" class="headerlink" title="Shiro标签"></a>Shiro标签</h2><table><thead><tr><th><strong>标签名称</strong></th><th><strong>标签条件（均是显示标签内容）</strong></th></tr></thead><tbody><tr><td><strong>&lt;shiro:authenticated &gt;</strong></td><td>登录之后</td></tr><tr><td>&lt;shiro:notAuthenticated &gt;</td><td>不在登录状态时</td></tr><tr><td>&lt;shiro:guest &gt;</td><td>用户在没有RememberMe时</td></tr><tr><td>&lt;shiro:user &gt;</td><td>用户在RememberMe时</td></tr><tr><td>&lt;shiro:hasAnyRoles name=”abc,123”  &gt;</td><td>在有abc或者123角色时</td></tr><tr><td>&lt;shiro:hasRole name=”abc”&gt;</td><td>拥有角色abc</td></tr><tr><td>&lt;shiro:lacksRole name=”abc”&gt;</td><td>没有角色abc</td></tr><tr><td><strong>&lt;shiro:hasPermission  name=”abc”&gt;</strong></td><td>拥有权限资源abc</td></tr><tr><td>&lt;shiro:lacksPermission name=”abc”&gt;</td><td>没有abc权限资源</td></tr><tr><td>&lt;shiro:principal &gt;</td><td>默认显示用户名称</td></tr></tbody></table><h1 id="Shiro环境搭建"><a href="#Shiro环境搭建" class="headerlink" title="Shiro环境搭建"></a>Shiro环境搭建</h1><h2 id="导入坐标"><a href="#导入坐标" class="headerlink" title="导入坐标"></a>导入坐标</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--shiro和spring整合--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--shiro核心包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="web-xml配置"><a href="#web-xml配置" class="headerlink" title="web.xml配置"></a>web.xml配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Shiro Security filter filter-name这个名字的值将来还会在spring中用到--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>shiroFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>targetFilterLifecycle<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>shiroFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Spring整个Shiro"><a href="#Spring整个Shiro" class="headerlink" title="Spring整个Shiro"></a>Spring整个Shiro</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- filter-name这个名字的值来自于web.xml中filter的名字 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shiroFilter"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.web.ShiroFilterFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--认证不通过, 跳转的页面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginUrl"</span> <span class="attr">value</span>=<span class="string">"/login.jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--授权不通过, 跳转的页面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"unauthorizedUrl"</span> <span class="attr">value</span>=<span class="string">"/unauthorized.jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--拦截规则--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitions"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">        /login.jsp = anon</span><br><span class="line">        /css/** = anon</span><br><span class="line">        /img/** = anon</span><br><span class="line">        /plugins/** = anon</span><br><span class="line">        /make/** = anon</span><br><span class="line">        /login.do = anon</span><br><span class="line">        /** = authc</span><br><span class="line">      <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 引用自定义的realm --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"saasRealm"</span> <span class="attr">class</span>=<span class="string">"com.itheima.web.realm.SaasRealm"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 安全管理器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"securityManager"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.web.mgt.DefaultWebSecurityManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"realm"</span> <span class="attr">ref</span>=<span class="string">"saasRealm"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--下面所有内容为 shiro注解使用--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"lifecycleBeanPostProcessor"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.LifecycleBeanPostProcessor"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">depends-on</span>=<span class="string">"lifecycleBeanPostProcessor"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"proxyTargetClass"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="自定义Realm"><a href="#自定义Realm" class="headerlink" title="自定义Realm"></a>自定义Realm</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SaasRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//认证数据准备</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"================认证===================="</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//授权数据准备</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"================授权==================="</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Shiro执行流程的说明"><a href="#Shiro执行流程的说明" class="headerlink" title="Shiro执行流程的说明"></a>Shiro执行流程的说明</h2><blockquote><p>以登录功能为例</p></blockquote><p><img data-src="/assets/shiro%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E8%AF%B4%E6%98%8E.png" alt="shiro执行流程说明"></p><h1 id="Shiro用户认证"><a href="#Shiro用户认证" class="headerlink" title="Shiro用户认证"></a>Shiro用户认证</h1><h2 id="传统方式和shiro方式完成登录的流程区别"><a href="#传统方式和shiro方式完成登录的流程区别" class="headerlink" title="传统方式和shiro方式完成登录的流程区别"></a>传统方式和shiro方式完成登录的流程区别</h2><p><img data-src="/assets/%E4%BC%A0%E7%BB%9F%E6%96%B9%E5%BC%8F%E5%92%8Cshiro%E6%96%B9%E5%BC%8F%E5%AE%8C%E6%88%90%E7%99%BB%E5%BD%95%E7%9A%84%E6%B5%81%E7%A8%8B%E5%8C%BA%E5%88%AB.png" alt="传统方式和shiro方式完成登录的流程区别"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="LoginController"><a href="#LoginController" class="headerlink" title="LoginController"></a>LoginController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(String email, String password)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 封装email和password为Token</span></span><br><span class="line">    AuthenticationToken authenticationToken = <span class="keyword">new</span> UsernamePasswordToken(email, <span class="keyword">new</span> Md5Hash(password, email, <span class="number">2</span>).toString());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 获取Subject,并且调用login方法</span></span><br><span class="line">    Subject subject = SecurityUtils.getSubject();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        subject.login(authenticationToken);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 登录成功</span></span><br><span class="line">        User user = (User) subject.getPrincipal();</span><br><span class="line">        session.setAttribute(<span class="string">"loginUser"</span>, user);</span><br><span class="line"><span class="comment">//存储权限对应的菜单</span></span><br><span class="line">        List&lt;Module&gt; moduleList = userService.findModuleByUser(user);</span><br><span class="line">        session.setAttribute(<span class="string">"modules"</span>, moduleList);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/home/main.do"</span>;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        request.setAttribute(<span class="string">"error"</span>, <span class="string">"用户名或者密码错误"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"forward:/login.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SaasRealm"><a href="#SaasRealm" class="headerlink" title="SaasRealm"></a>SaasRealm</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//认证数据准备</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"==============认证====================="</span>);</span><br><span class="line">    <span class="comment">//获取email</span></span><br><span class="line">    UsernamePasswordToken usernamePasswordToken = (UsernamePasswordToken) authenticationToken;</span><br><span class="line">    String email = usernamePasswordToken.getUsername();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询用户信息</span></span><br><span class="line">    User user = userService.findByEmail(email);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回用户信息</span></span><br><span class="line">    <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Object principal 主角</span></span><br><span class="line">        <span class="comment">// Object credentials  密码</span></span><br><span class="line">        <span class="comment">// String realmName 当前realm的名称</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(user, user.getPassword(), <span class="keyword">this</span>.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="再谈Shiro认证代码的执行流程"><a href="#再谈Shiro认证代码的执行流程" class="headerlink" title="再谈Shiro认证代码的执行流程"></a>再谈Shiro认证代码的执行流程</h2><p><img data-src="/assets/%E5%86%8D%E8%B0%88Shiro%E8%AE%A4%E8%AF%81%E4%BB%A3%E7%A0%81%E7%9A%84%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png" alt="再谈Shiro认证代码的执行流程"></p><h2 id="用户退出"><a href="#用户退出" class="headerlink" title="用户退出"></a>用户退出</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//退出</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/logout"</span>, name = <span class="string">"用户登出"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">logout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SecurityUtils.getSubject().logout();   <span class="comment">//登出</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/login.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Shiro用户授权"><a href="#Shiro用户授权" class="headerlink" title="Shiro用户授权"></a>Shiro用户授权</h1><h2 id="授权流程说明"><a href="#授权流程说明" class="headerlink" title="授权流程说明"></a>授权流程说明</h2><p>shiro授权的意思就是: 当一个用户试图访问一个资源的时候, shiro会判断此用户是否有访问此资源的权限</p><p>shiro授权的步骤:</p><ol><li>定义每个资源访问所需要的权限</li><li>当用户访问资源的时候, 要去数据库查询到此用户拥有的权限</li><li>使用用户查询到的权限列表 跟 访问资源需要的权限比对, 决定授权是否通过</li></ol><p><img data-src="/assets/%E6%8E%88%E6%9D%83%E6%B5%81%E7%A8%8B%E8%AF%B4%E6%98%8E.png" alt="授权流程说明"></p><h2 id="授权代码实现-xml版"><a href="#授权代码实现-xml版" class="headerlink" title="授权代码实现(xml版)"></a>授权代码实现(xml版)</h2><h3 id="xml中定义权限"><a href="#xml中定义权限" class="headerlink" title="xml中定义权限"></a>xml中定义权限</h3><p><img data-src="/assets/%E6%8E%88%E6%9D%83xml%E9%85%8D%E7%BD%AE.png" alt="授权xml配置"></p><h3 id="SaasRealm中实现授权逻辑"><a href="#SaasRealm中实现授权逻辑" class="headerlink" title="SaasRealm中实现授权逻辑"></a>SaasRealm中实现授权逻辑</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//授权数据准备</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"==========================================授权==============================================="</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询当前用户的权限信息</span></span><br><span class="line">    User user = (User) principalCollection.getPrimaryPrincipal();</span><br><span class="line">    List&lt;Module&gt; moduleList = userService.findModuleByUser(user);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将信息交给shiro</span></span><br><span class="line">    SimpleAuthorizationInfo simpleAuthorizationInfo = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">    <span class="keyword">for</span> (Module <span class="keyword">module</span> : moduleList) &#123;</span><br><span class="line">        simpleAuthorizationInfo.addStringPermission(<span class="keyword">module</span>.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(simpleAuthorizationInfo.getStringPermissions());</span><br><span class="line">    <span class="keyword">return</span> simpleAuthorizationInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="授权代码实现-注解版"><a href="#授权代码实现-注解版" class="headerlink" title="授权代码实现(注解版)"></a>授权代码实现(注解版)</h2><h3 id="去掉xml中的注解配置"><a href="#去掉xml中的注解配置" class="headerlink" title="去掉xml中的注解配置"></a>去掉xml中的注解配置</h3><p> <img data-src="/assets/%E6%8E%88%E6%9D%83_%E5%8E%BB%E6%8E%89xml%E9%85%8D%E7%BD%AE.png" alt="授权_去掉xml配置"></p><h3 id="使用注解声明资源访问权限"><a href="#使用注解声明资源访问权限" class="headerlink" title="使用注解声明资源访问权限"></a>使用注解声明资源访问权限</h3><blockquote><p><code>@RequiresPermissions</code></p></blockquote> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@RequiresPermissions("企业管理")  代表只有用户有企业管理的权限,才能访问当前方法</span></span><br><span class="line"><span class="comment">//相当于XML中的   /company/list.do = perms["企业管理"]</span></span><br><span class="line"><span class="meta">@RequiresPermissions</span>(<span class="string">"企业管理"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/list"</span>, name = <span class="string">"企业列表查询"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @RequestParam(defaultValue = <span class="string">"1"</span>, name = <span class="string">"page"</span>)</span> Integer pageNum,</span></span><br><span class="line"><span class="function">    @<span class="title">RequestParam</span><span class="params">(defaultValue = <span class="string">"1"</span>)</span> Integer pageSize) </span>&#123;</span><br><span class="line"></span><br><span class="line">    PageInfo pageInfo = companyService.findByPage(pageNum, pageSize);</span><br><span class="line">    request.setAttribute(<span class="string">"page"</span>, pageInfo);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"/company/company-list"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SaasRealm中实现授权逻辑-代码不变"><a href="#SaasRealm中实现授权逻辑-代码不变" class="headerlink" title="SaasRealm中实现授权逻辑(代码不变)"></a>SaasRealm中实现授权逻辑(代码不变)</h3><h3 id="全局异常处理修改"><a href="#全局异常处理修改" class="headerlink" title="全局异常处理修改"></a>全局异常处理修改</h3><p>基于注解的授权控制, 当授权失败的时候, 不会跳转授权失败页面, 而是抛出一个异常, 需要我们在全局异常处理器中自己处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理所有的Exception及其子类</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">exceptionHandler</span>(<span class="title">Exception</span> <span class="title">e</span>, <span class="title">HttpServletRequest</span> <span class="title">request</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 打印异常,给程序员</span></span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        request.setAttribute(<span class="string">"errorMsg"</span>, e.getMessage());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 返回页面, 给用户</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理未授权的异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(UnauthorizedException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">UnauthorizedException</span>(<span class="title">Exception</span> <span class="title">e</span>, <span class="title">HttpServletRequest</span> <span class="title">request</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//2. 返回未授权页面, 给用户</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/unauthorized.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="页面元素权限控制"><a href="#页面元素权限控制" class="headerlink" title="页面元素权限控制"></a>页面元素权限控制</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>当用户没有相关资源的具体操作权限的时候,我们应该是不让其看到响应按钮的</p><p>这就要使用到了<strong>shiro标签</strong>, 这里主要介绍一个<code>&lt;shiro:hasPermission&gt;</code>, 用法如下:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--这代表用户有   删除部门   的权限, 才能看到  删除   按钮--&gt;</span><br><span class="line">&lt;shiro:hasPermission name=<span class="string">"删除部门"</span>&gt;</span><br><span class="line">    &lt;button&gt;删除&lt;/button&gt;</span><br><span class="line">&lt;/shiro:hasPermission&gt;</span><br></pre></td></tr></table></figure><p><img data-src="/assets/%E9%A1%B5%E9%9D%A2%E5%85%83%E7%B4%A0%E6%8E%A7%E5%88%B6%E8%AF%B4%E6%98%8E.png" alt="页面元素控制说明"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>以部门管理为例子, 演示效果:</p><p>① 引入shiro标签库</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"shiro"</span> uri=<span class="string">"http://shiro.apache.org/tags"</span>%&gt;</span><br></pre></td></tr></table></figure><p>② 使用shiro标签控制权限</p><p><img data-src="/assets/%E4%BD%BF%E7%94%A8shiro%E6%A0%87%E7%AD%BE%E6%8E%A7%E5%88%B6%E6%9D%83%E9%99%90.png" alt="使用shiro标签控制权限"></p><h2 id="授权数据缓存"><a href="#授权数据缓存" class="headerlink" title="授权数据缓存"></a>授权数据缓存</h2><p>我们现在访问被拦截的页面时，每次shiro的安全过滤器都需要从realm中获取认证方法，也意味这每次查询数据库，浪费服务性能，造成访问压力，这时候我们必须要进行优化：经常访问，但又不经常修改的这部分数据可以使用缓存</p><p><img data-src="/assets/%E6%8E%88%E6%9D%83%E6%95%B0%E6%8D%AE%E7%BC%93%E5%AD%98.png" alt="授权数据缓存"></p><h1 id="自定义Shiro过滤器"><a href="#自定义Shiro过滤器" class="headerlink" title="自定义Shiro过滤器"></a>自定义Shiro过滤器</h1><h2 id="需求明确"><a href="#需求明确" class="headerlink" title="需求明确"></a>需求明确</h2><p>shiro 支持如下的权限写法, 代表同时拥有多个权限,  才能访问指定资源</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/system/dept/edit.do = perms["新增部门","删除部门"]</span><br></pre></td></tr></table></figure><p>但是我们现在有这样一个需求: <strong>只需要满足其中一个个权限, 就要能对资源访问, 这时怎么办呢?</strong></p><h2 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h2><p>操作步骤：</p><ol><li>自定义过滤器, 继承<code>AuthorizationFilter</code>, 并实现里面的方法</li><li>配置文件中添加配置</li></ol><p><strong>自定义过滤器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPermissionsAuthorizationFilter</span> <span class="keyword">extends</span> <span class="title">AuthorizationFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccessAllowed</span><span class="params">(ServletRequest request, ServletResponse response, Object mappedValue)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Subject subject = getSubject(request, response); <span class="comment">//subject里面就有当前用户的权限    ["查看部门","新增部门","修改部门"]</span></span><br><span class="line">        String[] perms = (String[]) mappedValue; <span class="comment">//访问资源需要的权限 ["新增部门","删除部门"]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果没有配置,放行</span></span><br><span class="line">        <span class="keyword">if</span> (perms == <span class="keyword">null</span> || perms.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String perm : perms) &#123;</span><br><span class="line">            <span class="keyword">if</span> (subject.isPermitted(perm)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>修改配置文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">&lt;!-- filter-name这个名字的值来自于web.xml中filter的名字 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shiroFilter"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.web.ShiroFilterFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--认证不通过, 跳转的页面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginUrl"</span> <span class="attr">value</span>=<span class="string">"/login.jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--授权不通过, 跳转的页面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"unauthorizedUrl"</span> <span class="attr">value</span>=<span class="string">"/unauthorized.jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--拦截规则: 从上向下依次匹配,一旦匹配成功其中一个,匹配结束--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitions"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">            /login.jsp = anon</span><br><span class="line">            /css/** = anon</span><br><span class="line">            /img/** = anon</span><br><span class="line">            /plugins/** = anon</span><br><span class="line">            /make/** = anon</span><br><span class="line">            /login.do = anon</span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                URL=perms["权限标识"]</span></span><br><span class="line"><span class="comment">                当前访问的用户只有有  权限标识  的权限的时候,才能访问URL对应的资源</span></span><br><span class="line"><span class="comment">                注意位置必须在/**的上面</span></span><br><span class="line"><span class="comment">                 /company/list.do = perms["企业管理"]</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--3. 切换认证过滤器--&gt;</span></span><br><span class="line">            /system/dept/edit.do = myPerms["新增部门","删除部门"]</span><br><span class="line"></span><br><span class="line">            /** = authc</span><br><span class="line">        <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2 将自定义的过滤器加入到Shiro的过滤器链中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filters"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--key就是当前过滤器的一个唯一标识,类似于anon authc perms--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"myPerms"</span> <span class="attr">value-ref</span>=<span class="string">"myPermissionsAuthorizationFilter"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--1 将自定义的过滤器声明到Spring的容器中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myPermissionsAuthorizationFilter"</span> <span class="attr">class</span>=<span class="string">"com.itheima.web.filters.MyPermissionsAuthorizationFilter"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><img data-src="/assets/%E8%87%AA%E5%AE%9A%E4%B9%89Shiro%E8%BF%87%E6%BB%A4%E5%99%A8.png" alt="自定义Shiro过滤器"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Shiro概述&quot;&gt;&lt;a href=&quot;#Shiro概述&quot; class=&quot;headerlink&quot; title=&quot;Shiro概述&quot;&gt;&lt;/a&gt;Shiro概述&lt;/h1&gt;&lt;h2 id=&quot;当前项目的问题&quot;&gt;&lt;a href=&quot;#当前项目的问题&quot; class=&quot;headerlink&quot; title=&quot;当前项目的问题&quot;&gt;&lt;/a&gt;当前项目的问题&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;用户不用登录，就能直接通过url访问saas系统内部的页面  &lt;code&gt;直接输入http://localhost:8080/system/module/list.do就能看到所有模块&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用低权限的管理员身份登录,也可以访问高权限的用户菜单 &lt;code&gt;比如使用普通员工登录, 直接url就能访问到它本应访问不到的页面&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;页面上标签未做到权限控制 &lt;code&gt;给一个员工分配了部门管理\查看权限, 但没分配新增权限, 但页面上依旧显示新增按钮&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight markdown&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;问题:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;	1. &lt;/span&gt;用户不登录就可以访问系统资源&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;	2. &lt;/span&gt;用户登录之后可以访问到不属于自己的资源&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;	3. &lt;/span&gt;页面标签没有做到权限限制&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;​     上述功能的描述，可以使用&lt;strong&gt;过滤器&lt;/strong&gt;或&lt;strong&gt;拦截器&lt;/strong&gt;完成，当然在实际开发者已经有组织把这些功能封装为框架，比如&lt;strong&gt;Shiro&lt;/strong&gt;或者&lt;strong&gt;SpringSecurity&lt;/strong&gt;，来简化权限的控制，我们今天使用&lt;code&gt;shiro&lt;/code&gt;框架。&lt;/p&gt;
    
    </summary>
    
    
      <category term="框架" scheme="http://sunmoon.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Shiro" scheme="http://sunmoon.com/categories/%E6%A1%86%E6%9E%B6/Shiro/"/>
    
    
      <category term="Java安全框架" scheme="http://sunmoon.com/tags/Java%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6/"/>
    
      <category term="shiro环境搭建" scheme="http://sunmoon.com/tags/shiro%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
      <category term="shiro认证与授权" scheme="http://sunmoon.com/tags/shiro%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83/"/>
    
      <category term="自定义shiro过滤器" scheme="http://sunmoon.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89shiro%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Maven高级&amp;分模块开发</title>
    <link href="http://sunmoon.com/2020/09/30/Maven%E9%AB%98%E7%BA%A7-%E5%88%86%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91/"/>
    <id>http://sunmoon.com/2020/09/30/Maven%E9%AB%98%E7%BA%A7-%E5%88%86%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91/</id>
    <published>2020-09-30T13:11:07.000Z</published>
    <updated>2020-10-10T13:34:24.660Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分模块开发"><a href="#分模块开发" class="headerlink" title="分模块开发"></a>分模块开发</h1><h2 id="拆分与聚合的思想"><a href="#拆分与聚合的思想" class="headerlink" title="拆分与聚合的思想"></a>拆分与聚合的思想</h2><p><strong>拆分</strong> 将原来的一个项目拆分成一个个小的模块, 每个模块都有自己的坐标,  当其它项目需要本模块的功能时, 只需要按照坐标引入本模块就可以了</p><p><strong>聚合</strong> 通过坐标的形式，将各个模块组装在一起,完成一个项目的功能</p><p><img data-src="/assets/%E6%8B%86%E5%88%86%E4%B8%8E%E8%81%9A%E5%90%88%E6%80%9D%E6%83%B3.png" alt="拆分与聚合思想"></p><a id="more"></a><h2 id="父子工程搭建"><a href="#父子工程搭建" class="headerlink" title="父子工程搭建"></a>父子工程搭建</h2><p>首先创建父工程，在父工程下创建dao、service、web模块，在sevice中添加一个依赖，导入dao模块，web模块中添加service模块。</p><p>略…</p><blockquote><p>在进行依赖的时候, maven规定:</p><ul><li>编译阶段, 可以使用源代码进行依赖</li><li>运行阶段,必须使用jar包进行依赖</li></ul></blockquote><h2 id="两套关系梳理"><a href="#两套关系梳理" class="headerlink" title="两套关系梳理"></a>两套关系梳理</h2><p>在上面的工程中, 存在两套关系</p><ul><li>父子工程之间: 继承关系, 子工程可以使用父工程中的jar包</li><li>模块工程之间:  默认是没有任何关系的，但是可以通过依赖建立两者之间的关系，而且这个依赖关系是可以传递的</li></ul><blockquote><p>A–&gt;B   B–&gt;C         A–&gt;C<br>我们把A和B之间  或者  B和C 之间称为  直接依赖<br>我们把    A和C   之间称为   间接依赖</p></blockquote><h1 id="依赖冲突"><a href="#依赖冲突" class="headerlink" title="依赖冲突"></a>依赖冲突</h1><h2 id="什么是依赖冲突"><a href="#什么是依赖冲突" class="headerlink" title="什么是依赖冲突"></a>什么是依赖冲突</h2><p>在依赖的传递过程中，很容易出现同一jar包的版本冲突问题，这个就称为依赖冲突 </p><p><img data-src="/assets/%E4%BB%80%E4%B9%88%E6%98%AF%E4%BE%9D%E8%B5%96%E5%86%B2%E7%AA%81.png" alt="什么是依赖冲突"></p><h2 id="依赖冲突解决"><a href="#依赖冲突解决" class="headerlink" title="依赖冲突解决"></a>依赖冲突解决</h2><h3 id="第一声明有限原则"><a href="#第一声明有限原则" class="headerlink" title="第一声明有限原则"></a>第一声明有限原则</h3><p>在pom文件定义依赖，先声明的依赖为准。</p><p><img data-src="/assets/%E7%AC%AC%E4%B8%80%E5%A3%B0%E6%98%8E%E4%BC%98%E5%85%88%E5%8E%9F%E5%88%99.png" alt="第一声明优先原则"></p><h3 id="路径近者优先原则"><a href="#路径近者优先原则" class="headerlink" title="路径近者优先原则"></a>路径近者优先原则</h3><p>从依赖程序开始算起，到被依赖的程序，以路径短的为准。</p><p><img data-src="/assets/%E8%B7%AF%E5%BE%84%E8%BF%91%E8%80%85%E4%BC%98%E5%85%88%E5%8E%9F%E5%88%99.png" alt="路径近者优先原则"></p><h3 id="依赖排除"><a href="#依赖排除" class="headerlink" title="依赖排除"></a>依赖排除</h3><p>依赖排除就是在依赖引入的过程中，通过<code>exclusions</code>标签排掉指定的跟随依赖</p><p><img data-src="/assets/%E4%BE%9D%E8%B5%96%E6%8E%92%E9%99%A4.png" alt="依赖排除"></p><h3 id="版本锁定"><a href="#版本锁定" class="headerlink" title="版本锁定"></a>版本锁定</h3><p>面对众多的依赖，有一种方法不用考虑依赖路径、声明优先等因素，可以采用直接锁定版本的方法确定依赖构件的版本</p><p>版本锁定后，系统会以锁定的版本的为准添加到工程中，此方法在企业开发中常用。</p><p><img data-src="/assets/%E7%89%88%E6%9C%AC%E9%94%81%E5%AE%9A.png" alt="版本锁定"></p><p><strong>优化: 提取版本信息</strong> </p><p><img data-src="/assets/%E4%BC%98%E5%8C%96%E7%89%88%E6%9C%AC%E9%94%81%E5%AE%9A-%E6%8F%90%E5%8F%96%E7%89%88%E6%9C%AC%E4%BF%A1%E6%81%AF.png" alt="优化版本锁定-提取版本信息"></p><h1 id="私服"><a href="#私服" class="headerlink" title="私服"></a>私服</h1><h2 id="私服简介"><a href="#私服简介" class="headerlink" title="私服简介"></a>私服简介</h2><p>公司在自己的局域网内搭建自己的远程仓库服务器，称为私服，私服服务器即是公司内部的maven远程仓库，每个员工的电脑上安装maven软件并且连接私服服务器，员工将自己开发的项目打成jar并发布到私服服务器，其它项目组从私服服务器下载所依赖的构件（jar）。</p><p><img data-src="/assets/%E7%A7%81%E6%9C%8D.jpg" alt="私服"></p><h2 id="搭建私服环境"><a href="#搭建私服环境" class="headerlink" title="搭建私服环境"></a>搭建私服环境</h2><h3 id="下载nexus"><a href="#下载nexus" class="headerlink" title="下载nexus"></a>下载nexus</h3><p>Nexus是Maven仓库管理器，通过nexus可以搭建maven仓库, 软件已经提供在资料中<code>nexus-2.12.0-01-bundle.zip</code></p><p><img data-src="/assets/image-20200628144428365.png" alt="image-20200628144428365"></p><h3 id="安装nexus"><a href="#安装nexus" class="headerlink" title="安装nexus"></a>安装nexus</h3><p>第1步:  解压nexus-2.12.0-01-bundle.zip到一个没有中文没有空格的目录  </p><p> <img data-src="/assets/image-20200628145356064.png" alt="image-20200628145356064"></p><p>第2步: 以<code>管理员身份</code>运行cmd命令, 然后进入软件的bin目录，通过命令安装并启动nexus软件</p><p> <img data-src="/assets/image-20200628145948727.png" alt="image-20200628145948727"></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">补充下停止和下载的命令</span><br><span class="line">  停止 nexus.bat  stop</span><br><span class="line">  卸载 nexus.bat  uninstall</span><br></pre></td></tr></table></figure><p>第3步: 访问nexus</p><p>nexus默认监听端口为8081, 通过 <code>http://localhost:8081/nexus</code> 即可访问</p><p><img data-src="/assets/image-20200628150353480.png" alt="image-20200628150353480"></p><p>第4步: 登录nexus</p><p>nexus默认的用户名是==admin==, 默认的密码是==admin123==</p><p> <img data-src="/assets/image-20200628151112905.png" alt="image-20200628151112905"></p><p>登录成功后,会看到下面的内容:</p><p> <img data-src="/assets/image-20200628151303488.png" alt="image-20200628151303488"></p><h2 id="仓库类型"><a href="#仓库类型" class="headerlink" title="仓库类型"></a>仓库类型</h2><p>仓库有下面四类:</p><ul><li>proxy  代理仓库, 用于代理远程仓库(中央)</li><li>virtual  废弃的代理仓库</li><li>hosted  用于本地jar包上传的仓库</li><li>group  就是上面仓库的综合, 用于jar包的下载</li></ul><p><img data-src="/assets/image-20200628151528804.png" alt="image-20200628151528804"></p><h2 id="将项目发布到私服"><a href="#将项目发布到私服" class="headerlink" title="将项目发布到私服"></a>将项目发布到私服</h2><p>企业中多个团队协作开发通常会将一些公用的组件、开发模块等发布到私服供其它团队或模块开发人员使用。</p><p>第1步：在maven的settings.xml文件中,  添加下面配置</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    此用户名和密码用于私服校验，因为私服需要知道上传的账号和密码是否和私服中的账号和密码一致。</span></span><br><span class="line"><span class="comment">    添加到servers节点下</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第2步： 在需要操作的模块(比如ssm_dao)的pom.xml文件中, 添加下面配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">配置私服仓库的地址，如果版本为release则上传到私服的release仓库，如果版本为snapshot则上传到私服的snapshot仓库</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/repositories/releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/repositories/snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第3步： 选择需要操作的模块(比如ssm_dao), 执行deploy命令</p><p> <img data-src="/assets/image-20200628154108687.png" alt="image-20200628154108687"></p><p>第4步: 执行完毕后, 可以在私服的对应目录下观察到上传的文件</p><p> <img data-src="/assets/image-20200628154910224.png" alt="image-20200628154910224"></p><h2 id="从私服下载jar包"><a href="#从私服下载jar包" class="headerlink" title="从私服下载jar包"></a>从私服下载jar包</h2><p>配置nexus之后，本地仓库没有jar包，就去私服下载，私服如果没有, 再由私服去中央下载。</p><p>第1步:  在maven的settings.xml文件中, 添加下面配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置下载仓库--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">repository</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">releases</span>&gt;</span>  </span><br><span class="line">       <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>Public Repositories<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--使用profile定义仓库需要激活才可生效--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第2步: 测试</p><p>1)  首先在ssm_parent工程上执行install, 这样就可以将所有模块打包到本地仓库</p><p>2)  然后删除本地仓库中的ssm_dao的文件</p><p>3)  在ssm_service模块上执行compile命令</p><p>​     注意: service 要编译成功必须依赖仓库中的ssm_dao,而现在本地仓库中没有, 他就会从私服下载</p><p>4)  通过控制台观察效果</p><p><img data-src="/assets/image-20200628162939278.png" alt="image-20200628162939278"></p><h1 id="软件的服务模式"><a href="#软件的服务模式" class="headerlink" title="软件的服务模式"></a>软件的服务模式</h1><p>目前, 软件服务主要有三种模式:</p><ul><li><strong>IaaS（基础设施即服务）</strong> 提供给客户最基础的东西, 然后客户自己完成所有工作</li><li><strong>PaaS（平台即服务）</strong>提供给客户半成品的东西, 然后客户自己完成剩下的工作</li><li><strong>SaaS（软件即服务）</strong>提供给客户成品,  客户只需要使用</li></ul><p><img data-src="/assets/%E8%BD%AF%E4%BB%B6%E6%9C%8D%E5%8A%A1%E6%A8%A1%E5%BC%8F.png" alt="软件服务模式"></p><p>SaaS（Software-as-a-service）的意思是软件即服务。简单说就是在线系统模式，即软件服务商提供的软件在线服务。</p><p>SaaS软件就适用对象而言，可以划分为针对个人的与针对企业的</p><ul><li>面向个人的SaaS产品：在线文档，账务管理，文件管理，日程计划、照片管理、联系人管理，等等云类型的服务</li><li>面向企业的SaaS产品：CRM（客户关系管理）、线上视频或者与群组通话会议、OA(办公系统)、外勤管理、财务管理、审批管理等</li></ul><h2 id="软件开发流程"><a href="#软件开发流程" class="headerlink" title="软件开发流程"></a>软件开发流程</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>货代平台开发周期6个月左右，团队需要10人左右...</span><br><span class="line"><span class="code">技术总监或架构师产品经理或项目经理java开发前端和美工测试    运维</span></span><br><span class="line"><span class="code">   11  4         2  1       1</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">1. </span>立项</span><br><span class="line"><span class="code">项目可实施性分析：（招商银行）100W项目，开发周期预计6个月，需要10人，运营（人力）成本2W/人</span></span><br><span class="line"><span class="code">产品经理入住银行，进行需求调研《需求设计说明书》</span></span><br><span class="line"><span class="code">需求研讨会：团队所有成员参加</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>设计</span><br><span class="line"><span class="code">UI/UE工程师：《页面原型》</span></span><br><span class="line"><span class="code">架构师：统一开发环境，项目技术选项，项目架构设计，数据库设计等等《概要设计说明书》</span></span><br><span class="line"><span class="code">产品经理：接口规范、方法规范、参数规范、步骤要求等等《详细设计说明书》</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">3. </span>开发</span><br><span class="line"><span class="code">coding（编码），码农</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">4. </span>测试</span><br><span class="line"><span class="code">白盒测试：代码逻辑和性能</span></span><br><span class="line"><span class="code">黑盒测试：用户体验</span></span><br><span class="line"><span class="code">灰盒测试：黑+白</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">5. </span>部署</span><br><span class="line"><span class="code">运维人员产品部署上传维护....</span></span><br></pre></td></tr></table></figure><h1 id="UML建模"><a href="#UML建模" class="headerlink" title="UML建模"></a>UML建模</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>UML</code>：统一建模语言（UML，UnifiedModelingLanguage）是面向对象软件的标准化建模语言。UML因其简单、统一的特点，而且能表达软件设计中的动态和静态信息，目前已成为可视化建模语言的工业标准。</p><p><code>PowerDesigner</code>：一款绘制各种UML图形的工具    </p><h2 id="用例图"><a href="#用例图" class="headerlink" title="用例图"></a>用例图</h2><p>在整个项目中会有不同的角色在使用，但是不同的角色在项目中做的事儿或者说看到的菜单是不一样的，为了让程序员更直观的获取到需求信息，项目经理或产品经理会使用用例图直观的表示出来。</p><p><img data-src="/assets/%E7%94%A8%E4%BE%8B%E5%9B%BE-1.png" alt="用例图-1"></p><p><img data-src="/assets/%E7%94%A8%E4%BE%8B%E5%9B%BE-2.png" alt="用例图-2"></p><p><img data-src="/assets/%E7%94%A8%E4%BE%8B%E5%9B%BE-3.png" alt="用例图-3"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;分模块开发&quot;&gt;&lt;a href=&quot;#分模块开发&quot; class=&quot;headerlink&quot; title=&quot;分模块开发&quot;&gt;&lt;/a&gt;分模块开发&lt;/h1&gt;&lt;h2 id=&quot;拆分与聚合的思想&quot;&gt;&lt;a href=&quot;#拆分与聚合的思想&quot; class=&quot;headerlink&quot; title=&quot;拆分与聚合的思想&quot;&gt;&lt;/a&gt;拆分与聚合的思想&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;拆分&lt;/strong&gt; 将原来的一个项目拆分成一个个小的模块, 每个模块都有自己的坐标,  当其它项目需要本模块的功能时, 只需要按照坐标引入本模块就可以了&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;聚合&lt;/strong&gt; 通过坐标的形式，将各个模块组装在一起,完成一个项目的功能&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&quot;/assets/%E6%8B%86%E5%88%86%E4%B8%8E%E8%81%9A%E5%90%88%E6%80%9D%E6%83%B3.png&quot; alt=&quot;拆分与聚合思想&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Maven" scheme="http://sunmoon.com/categories/Maven/"/>
    
    
      <category term="Mavne高级" scheme="http://sunmoon.com/tags/Mavne%E9%AB%98%E7%BA%A7/"/>
    
      <category term="分模块开发" scheme="http://sunmoon.com/tags/%E5%88%86%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91/"/>
    
      <category term="UML建模" scheme="http://sunmoon.com/tags/UML%E5%BB%BA%E6%A8%A1/"/>
    
      <category term="Saas" scheme="http://sunmoon.com/tags/Saas/"/>
    
  </entry>
  
  <entry>
    <title>SSM的整合</title>
    <link href="http://sunmoon.com/2020/09/29/SSM%E7%9A%84%E6%95%B4%E5%90%88/"/>
    <id>http://sunmoon.com/2020/09/29/SSM%E7%9A%84%E6%95%B4%E5%90%88/</id>
    <published>2020-09-29T09:52:05.000Z</published>
    <updated>2020-09-29T10:00:36.008Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSM整合"><a href="#SSM整合" class="headerlink" title="SSM整合"></a>SSM整合</h1><h2 id="回顾SSM"><a href="#回顾SSM" class="headerlink" title="回顾SSM"></a>回顾SSM</h2><p>S : Spring——全栈</p><p>S : SpringMVC——表现层</p><p>M : Mybaits——持久层</p><a id="more"></a><h2 id="整合思路"><a href="#整合思路" class="headerlink" title="整合思路"></a>整合思路</h2><p>SSM整合基本思路：使用Spring( 容器 )来整合Mybatis和SpringMVC</p><p>整合步骤是这样：</p><ol><li>先各自搭建SSM的环境</li><li>使用Spring整合Mybatis</li><li>使用Spring整合SpringMVC</li></ol><p><img data-src="/assets/SSM%E6%95%B4%E5%90%88%E6%80%9D%E8%B7%AF.png" alt="SSM整合思路"></p><h2 id="准备数据环境"><a href="#准备数据环境" class="headerlink" title="准备数据环境"></a>准备数据环境</h2><blockquote><p>spring库</p><p>account表</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">account</span>(</span><br><span class="line">aid <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">unique</span>,</span><br><span class="line">balance <span class="built_in">float</span>(<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="搭建Mybatis环境"><a href="#搭建Mybatis环境" class="headerlink" title="搭建Mybatis环境"></a>搭建Mybatis环境</h2><h3 id="创建工程，导入相依赖"><a href="#创建工程，导入相依赖" class="headerlink" title="创建工程，导入相依赖"></a>创建工程，导入相依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--MySQL--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--log4j--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer aid;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Float balance;</span><br><span class="line">    <span class="comment">//get、set略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建Dao接口"><a href="#创建Dao接口" class="headerlink" title="创建Dao接口"></a>创建Dao接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 账户列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建Dao的映射文件"><a href="#创建Dao的映射文件" class="headerlink" title="创建Dao的映射文件"></a>创建Dao的映射文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> </span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.sun.dao.AccountDao"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.Account"</span>&gt;</span></span><br><span class="line">        select * from account</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="加入Mybatis配置文件"><a href="#加入Mybatis配置文件" class="headerlink" title="加入Mybatis配置文件"></a>加入Mybatis配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbc.properties"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--全局设置：可以设置缓存、懒加载等--&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--设置别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.sun.domain"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.sun.dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>jdbc.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span> = <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span> = <span class="string">jdbc:mysql:///spring</span></span><br><span class="line"><span class="meta">jdbc.username</span> =  <span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span> = <span class="string">root</span></span><br></pre></td></tr></table></figure><h3 id="加入log4j日志配置文件"><a href="#加入log4j日志配置文件" class="headerlink" title="加入log4j日志配置文件"></a>加入log4j日志配置文件</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span> = <span class="string">debug,stdout</span></span><br><span class="line"><span class="meta">log4j.appender.stdout</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout.ConversionPattern</span> = <span class="string">[%-5p] %d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; method:%l%n%m%n</span></span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">//读取配置文件</span></span><br><span class="line">    InputStream in = Resources.getResourceAsStream(<span class="string">"mybatis-config.xml"</span>);</span><br><span class="line">    <span class="comment">//获取SqlSessionFactory</span></span><br><span class="line">    SqlSessionFactory sessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">    <span class="comment">//获取SqlSession</span></span><br><span class="line">    SqlSession sqlSession = sessionFactory.openSession();</span><br><span class="line">    <span class="comment">//获取dao对象</span></span><br><span class="line">    AccountDao mapper = sqlSession.getMapper(AccountDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    List&lt;Account&gt; accountList = mapper.findAll();</span><br><span class="line">    <span class="keyword">for</span> (Account account : accountList) &#123;</span><br><span class="line">        System.out.println(account);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="搭建Spring环境"><a href="#搭建Spring环境" class="headerlink" title="搭建Spring环境"></a>搭建Spring环境</h2><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建Service接口"><a href="#创建Service接口" class="headerlink" title="创建Service接口"></a>创建Service接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 账户列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建Service实现类"><a href="#创建Service实现类" class="headerlink" title="创建Service实现类"></a>创建Service实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Todo 等待dao整合结束</span></span><br><span class="line">    <span class="comment">//@Autowired</span></span><br><span class="line">    <span class="comment">//private AccountDao accountDao;</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查询成功"</span>);</span><br><span class="line">        <span class="comment">//Todo 等待dao整合结束</span></span><br><span class="line">        <span class="comment">//return accountDao.findAll();</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="加入Spring配置文件"><a href="#加入Spring配置文件" class="headerlink" title="加入Spring配置文件"></a>加入Spring配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.sun.service"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//创建Spring的容器</span></span><br><span class="line">        ApplicationContext act = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">//获取对象，调用方法</span></span><br><span class="line">        AccountService accountService = act.getBean(AccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        List&lt;Account&gt; accounts = accountService.findAll();</span><br><span class="line">        <span class="keyword">if</span> (accounts != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (Account account : accounts) &#123;</span><br><span class="line">                System.out.println(account);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="搭建SpringMVC环境"><a href="#搭建SpringMVC环境" class="headerlink" title="搭建SpringMVC环境"></a>搭建SpringMVC环境</h2><h3 id="导入依赖-1"><a href="#导入依赖-1" class="headerlink" title="导入依赖"></a>导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpringMVC相关--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="加入SpringMVC配置文件"><a href="#加入SpringMVC配置文件" class="headerlink" title="加入SpringMVC配置文件"></a>加入SpringMVC配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.sun.controller"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--三大组件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span></span></span><br></pre></td></tr></table></figure><h3 id="配置web-xml"><a href="#配置web-xml" class="headerlink" title="配置web.xml"></a>配置web.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span></span></span><br><span class="line"><span class="tag"><span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--前端控制器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--编码过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="开发请求页面"><a href="#开发请求页面" class="headerlink" title="开发请求页面"></a>开发请求页面</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;index&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;</span><br><span class="line">        &lt;a href="$&#123;pageContext.request.contextPath&#125;/accountController/list"&gt;查询列表&lt;/a&gt;</span><br><span class="line">    &lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="开发Controller"><a href="#开发Controller" class="headerlink" title="开发Controller"></a>开发Controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Todo 等待整合结束</span></span><br><span class="line">    <span class="comment">//@Autowired</span></span><br><span class="line">    <span class="comment">//private AccountService accountService;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/accountController/list"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        <span class="comment">//Todo 等待整合结束</span></span><br><span class="line">        <span class="comment">//List&lt;Account&gt; accounts = accountService.findAll();</span></span><br><span class="line">        request.setAttribute(<span class="string">"accounts"</span>,<span class="string">"xxxxx"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="开发响应页面"><a href="#开发响应页面" class="headerlink" title="开发响应页面"></a>开发响应页面</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;list&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    $&#123;requestScope.accounts&#125;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="测试-略"><a href="#测试-略" class="headerlink" title="测试(略)"></a>测试(略)</h3><h2 id="Spring整合Mybatis"><a href="#Spring整合Mybatis" class="headerlink" title="Spring整合Mybatis"></a>Spring整合Mybatis</h2><h3 id="整合思路-1"><a href="#整合思路-1" class="headerlink" title="整合思路"></a>整合思路</h3><p>将mybatis的所有配置信息转移到Spring的配置文件中</p><p>将Mybatis的SqlSessionFactory托管到Spring的容器中</p><h3 id="添加整合包"><a href="#添加整合包" class="headerlink" title="添加整合包"></a>添加整合包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Spring整合Mybatis的包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="将mybatis的所有配置信息转移到Spring的配置文件中"><a href="#将mybatis的所有配置信息转移到Spring的配置文件中" class="headerlink" title="将mybatis的所有配置信息转移到Spring的配置文件中"></a>将mybatis的所有配置信息转移到Spring的配置文件中</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置数据源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入映射文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mapperScannerConfigurer"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.sun.dao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--SqlSessionFactor托管--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"com.sun.domain"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在Service中注入Dao"><a href="#在Service中注入Dao" class="headerlink" title="在Service中注入Dao"></a>在Service中注入Dao</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> accountDao.findAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">//创建Spring的容器</span></span><br><span class="line">    ApplicationContext act = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">    <span class="comment">//获取对象，调用方法</span></span><br><span class="line">    AccountService accountService = act.getBean(AccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    List&lt;Account&gt; accounts = accountService.findAll();</span><br><span class="line">    <span class="keyword">if</span> (accounts != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span> (Account account : accounts) &#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring整合SpringMVC"><a href="#Spring整合SpringMVC" class="headerlink" title="Spring整合SpringMVC"></a>Spring整合SpringMVC</h2><h3 id="整合思路-2"><a href="#整合思路-2" class="headerlink" title="整合思路"></a>整合思路</h3><p>Spring和SpringMVC本身就是一家产品，是不用整合的，</p><p>但是现在的Spring容器自己无法启动，我们需要在web容器启动的时候，加载Spring的配置文件，启动Spring容器</p><p>那么这个工作是在spring-web包中的一个监听器来做的，这个包不用单独导入，他已经在 spring-webmvc 包中了</p><p><strong>它会监听WEB容器的启动和停止，然后就可以控制Spring容器的启动和停止了</strong></p><h3 id="web-xml配置监听器"><a href="#web-xml配置监听器" class="headerlink" title="web.xml配置监听器"></a>web.xml配置监听器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Spring监听器--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--传递Spring配置文件给监听器，一共监听器读取进而启动Spring容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在Controller注入Service对象"><a href="#在Controller注入Service对象" class="headerlink" title="在Controller注入Service对象"></a>在Controller注入Service对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/accountController/list"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    List&lt;Account&gt; accounts = accountService.findAll();</span><br><span class="line">    request.setAttribute(<span class="string">"accounts"</span>,accounts);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"list"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="部署测试-略…"><a href="#部署测试-略…" class="headerlink" title="部署测试(略…)"></a>部署测试(略…)</h3><h3 id="列表查询"><a href="#列表查询" class="headerlink" title="列表查询"></a>列表查询</h3><ul><li>list.jsp</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;list&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;table border=<span class="string">"1px"</span> cellpadding=<span class="string">"0"</span> cellspacing=<span class="string">"0"</span> width=<span class="string">"500px"</span> align=<span class="string">"center"</span>&gt;</span><br><span class="line">    &lt;thead&gt;</span><br><span class="line">        &lt;th&gt;id&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;名称&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;余额&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">    &lt;/thead&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">"$&#123;requestScope.accounts&#125;"</span> <span class="keyword">var</span>=<span class="string">"account"</span>&gt;</span><br><span class="line">        &lt;tr align=<span class="string">"center"</span>&gt;</span><br><span class="line">            &lt;td&gt;$&#123;account.aid&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;account.name&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;account.balance&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;修改|删除&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="增删改查案例"><a href="#增删改查案例" class="headerlink" title="增删改查案例"></a>增删改查案例</h1><h2 id="思路图"><a href="#思路图" class="headerlink" title="思路图"></a>思路图</h2><p><img data-src="/assets/%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E6%A1%88%E4%BE%8B%E6%80%9D%E8%B7%AF%E5%9B%BE.png" alt="增删改查案例思路图"></p><h2 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h2><h3 id="在list页面添加跳转到新增页面的按钮"><a href="#在list页面添加跳转到新增页面的按钮" class="headerlink" title="在list页面添加跳转到新增页面的按钮"></a>在list页面添加跳转到新增页面的按钮</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 align="center"&gt;&lt;a href="$&#123;pageContext.request.contextPath&#125;/accountController/toAdd"&gt;新增账户&lt;/a&gt;&lt;/h1&gt;</span><br></pre></td></tr></table></figure><h3 id="Controller添加跳转到增加页面的方法"><a href="#Controller添加跳转到增加页面的方法" class="headerlink" title="Controller添加跳转到增加页面的方法"></a>Controller添加跳转到增加页面的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/accountController/toAdd"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"add"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="WEB-INF下创建新增页面"><a href="#WEB-INF下创建新增页面" class="headerlink" title="WEB-INF下创建新增页面"></a>WEB-INF下创建新增页面</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;add.jsp&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div style=<span class="string">"width: 500px;margin: 100px auto;border: 1px solid gray;padding: 20px"</span> &gt;</span><br><span class="line">    &lt;h1&gt;新增&lt;/h1&gt;</span><br><span class="line">    &lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/accountController/add"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">        &lt;label for="name"&gt;名称：&lt;/label&gt;&lt;input id="name" type="text" name="name"&gt;&lt;br/&gt;&lt;br/&gt;</span><br><span class="line">        &lt;label for="balance"&gt;余额：&lt;/label&gt;&lt;input id="balance" type="text" name="balance"&gt;&lt;br/&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> value=<span class="string">"保存"</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="Controller编写添加的方法"><a href="#Controller编写添加的方法" class="headerlink" title="Controller编写添加的方法"></a>Controller编写添加的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/accountController/add"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">(Account account)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    accountService.save(account);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/accountController/list"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Service是接口-实现类"><a href="#Service是接口-实现类" class="headerlink" title="Service是接口+实现类"></a>Service是接口+实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">    accountDao.save(account);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Dao接口-映射"><a href="#Dao接口-映射" class="headerlink" title="Dao接口+映射"></a>Dao接口+映射</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"save"</span>&gt;</span></span><br><span class="line">    insert into account values(null,#&#123;name&#125;,#&#123;balance&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><h3 id="数据回显"><a href="#数据回显" class="headerlink" title="数据回显"></a>数据回显</h3><h4 id="在list页面上添加修改按钮"><a href="#在list页面上添加修改按钮" class="headerlink" title="在list页面上添加修改按钮"></a>在list页面上添加修改按钮</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="/accountController/toUpdate?aid=$&#123;account.aid&#125;"&gt;修改&lt;/a&gt;</span><br></pre></td></tr></table></figure><h4 id="Controller添加跳转到增加页面的方法-1"><a href="#Controller添加跳转到增加页面的方法-1" class="headerlink" title="Controller添加跳转到增加页面的方法"></a>Controller添加跳转到增加页面的方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/accountController/toUpdate"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toUpdate</span><span class="params">(Integer aid,HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    Account account = accountService.findByAid(aid);</span><br><span class="line">    request.setAttribute(<span class="string">"account"</span>,account);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"update"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在service添加查询方法接口-实现类"><a href="#在service添加查询方法接口-实现类" class="headerlink" title="在service添加查询方法接口+实现类"></a>在service添加查询方法接口+实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Account <span class="title">findByAid</span><span class="params">(Integer aid)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">findByAid</span><span class="params">(Integer aid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> accountDao.findByAid(aid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在dao中添加查询方法接口-映射"><a href="#在dao中添加查询方法接口-映射" class="headerlink" title="在dao中添加查询方法接口+映射"></a>在dao中添加查询方法接口+映射</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Account <span class="title">findByAid</span><span class="params">(Integer aid)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByAid"</span> <span class="attr">resultType</span>=<span class="string">"com.sun.domain.Account"</span>&gt;</span></span><br><span class="line">    select * from account where aid = #&#123;aid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="添加修改账户页面"><a href="#添加修改账户页面" class="headerlink" title="添加修改账户页面"></a>添加修改账户页面</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;update&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div style=<span class="string">"width: 500px;margin: 100px auto;border: 1px solid gray;padding: 20px"</span> &gt;</span><br><span class="line">    &lt;h1&gt;修改&lt;/h1&gt;</span><br><span class="line">    &lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/accountController/update"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"aid"</span> value=<span class="string">"$&#123;requestScope.account.aid&#125;"</span>&gt;</span><br><span class="line">        &lt;label for="name"&gt;名称：&lt;/label&gt;&lt;input id="name" type="text" name="name" value="$&#123;requestScope.account.name&#125;"&gt;&lt;br/&gt;&lt;br/&gt;</span><br><span class="line">        &lt;label for="balance"&gt;余额：&lt;/label&gt;&lt;input id="balance" type="text" name="balance" value="$&#123;requestScope.account.balance&#125;"&gt;&lt;br/&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> value=<span class="string">"修改"</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="修改提交"><a href="#修改提交" class="headerlink" title="修改提交"></a>修改提交</h3><h4 id="在controller中添加修改方法"><a href="#在controller中添加修改方法" class="headerlink" title="在controller中添加修改方法"></a>在controller中添加修改方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/accountController/update"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(Account account)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    accountService.update(account);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/accountController/list"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在service中添加修改方法接口-实现类"><a href="#在service中添加修改方法接口-实现类" class="headerlink" title="在service中添加修改方法接口+实现类"></a>在service中添加修改方法接口+实现类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Account account)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">    accountDao.update(account);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在dao添加修改方法接口-映射"><a href="#在dao添加修改方法接口-映射" class="headerlink" title="在dao添加修改方法接口+映射"></a>在dao添加修改方法接口+映射</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Account account)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span>&gt;</span></span><br><span class="line">    update account set name = #&#123;name&#125;, balance = #&#123;balance&#125; where aid = #&#123;aid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><h3 id="修改list页面，添加删除"><a href="#修改list页面，添加删除" class="headerlink" title="修改list页面，添加删除"></a>修改list页面，添加删除</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="javascript:void(0)" onclick="deleteByAid('$&#123;account.aid&#125;')"&gt;删除&lt;/a&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function">function <span class="title">deleteByAid</span><span class="params">(aid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> flag = confirm(<span class="string">"您确定要删除吗?"</span>);</span><br><span class="line">        <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">            window.location = <span class="string">"/accountController/delete?aid="</span>+aid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="在controller中添加删除方法"><a href="#在controller中添加删除方法" class="headerlink" title="在controller中添加删除方法"></a>在controller中添加删除方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/accountController/delete"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(Integer aid)</span></span>&#123;</span><br><span class="line">    accountService.delete(aid);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/accountController/list"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在service中添加删除方法接口-实现类"><a href="#在service中添加删除方法接口-实现类" class="headerlink" title="在service中添加删除方法接口+实现类"></a>在service中添加删除方法接口+实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer aid)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer aid)</span> </span>&#123;</span><br><span class="line">    accountDao.delete(aid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在dao添加删除方法接口-映射"><a href="#在dao添加删除方法接口-映射" class="headerlink" title="在dao添加删除方法接口+映射"></a>在dao添加删除方法接口+映射</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer aid)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"delete"</span>&gt;</span></span><br><span class="line">    delete from account where aid = #&#123;aid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="添加事务控制"><a href="#添加事务控制" class="headerlink" title="添加事务控制"></a>添加事务控制</h2><h3 id="xml版本"><a href="#xml版本" class="headerlink" title="xml版本"></a>xml版本</h3><p>在Spring中配置事务控制</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--切点--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pt"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.sun.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--切面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注解版本"><a href="#注解版本" class="headerlink" title="注解版本"></a>注解版本</h3><ul><li><p>删除xml版本的配置保留事务管理器</p></li><li><p>添加事务注解驱动</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在方法或者类上添加事务控制注解<code>@Transactional</code></li></ul><blockquote><p>例如：为保存方法添加事务控制</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">    accountDao.save(account);</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Spring的父子容器"><a href="#Spring的父子容器" class="headerlink" title="Spring的父子容器"></a>Spring的父子容器</h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>Spring和SpringMVC的容器具有父子关系，Spring容器为父容器，SpringMVC为子容器</p><p>子容器可以引用父容器中的Bean，而父容器不可以引用子容器中的Bean</p><p><img data-src="/assets/Spring%E7%88%B6%E5%AD%90%E5%AE%B9%E5%99%A8%E8%AF%B4%E6%98%8E.png" alt="Spring父子容器说明"></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><img data-src="/assets/Spring%E7%88%B6%E5%AD%90%E5%AE%B9%E5%99%A8%E9%85%8D%E7%BD%AE.png" alt="Spring父子容器配置"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SSM整合&quot;&gt;&lt;a href=&quot;#SSM整合&quot; class=&quot;headerlink&quot; title=&quot;SSM整合&quot;&gt;&lt;/a&gt;SSM整合&lt;/h1&gt;&lt;h2 id=&quot;回顾SSM&quot;&gt;&lt;a href=&quot;#回顾SSM&quot; class=&quot;headerlink&quot; title=&quot;回顾SSM&quot;&gt;&lt;/a&gt;回顾SSM&lt;/h2&gt;&lt;p&gt;S : Spring——全栈&lt;/p&gt;
&lt;p&gt;S : SpringMVC——表现层&lt;/p&gt;
&lt;p&gt;M : Mybaits——持久层&lt;/p&gt;
    
    </summary>
    
    
      <category term="框架" scheme="http://sunmoon.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="SSM的整合" scheme="http://sunmoon.com/tags/SSM%E7%9A%84%E6%95%B4%E5%90%88/"/>
    
      <category term="增删改查案例" scheme="http://sunmoon.com/tags/%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E6%A1%88%E4%BE%8B/"/>
    
      <category term="Spring的父子容器" scheme="http://sunmoon.com/tags/Spring%E7%9A%84%E7%88%B6%E5%AD%90%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC-2</title>
    <link href="http://sunmoon.com/2020/09/27/SpringMVC-2/"/>
    <id>http://sunmoon.com/2020/09/27/SpringMVC-2/</id>
    <published>2020-09-27T13:29:43.000Z</published>
    <updated>2020-09-27T13:32:32.361Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工程准备"><a href="#工程准备" class="headerlink" title="工程准备"></a>工程准备</h1><blockquote><p>新建工程，进行配置</p></blockquote><ul><li>pom.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--springmvc--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--servlet--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--jsp--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>spring-mvc.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注解扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.sun.controller"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--三大组件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--前后缀   他们会在页面跳转的时候,拼接在方法的返回值上--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>web.xml配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--前端控制器  @WebServlet( name="dispatcherServlet",urlPatterns="/" )--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--除了.jsp文件不拦截,其他文件全部拦截--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--中文乱码过滤器  @WebFilter( name="characterEncodingFilter",urlPatterns="/*" )--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>success.jsp</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;SUCCESS!!!!&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="页面跳转之转发"><a href="#页面跳转之转发" class="headerlink" title="页面跳转之转发"></a>页面跳转之转发</h1><h2 id="方式一：简单方式"><a href="#方式一：简单方式" class="headerlink" title="方式一：简单方式"></a>方式一：简单方式</h2><blockquote><p>设置前后缀后则会拼接前后缀</p></blockquote><h3 id="前台"><a href="#前台" class="headerlink" title="前台"></a>前台</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo1"&gt;转发——简单方式&lt;/a&gt;&lt;br&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转发方式一：简单方式，会拼接前后缀</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo1"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"到达了后台demo1"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方式二：使用forward"><a href="#方式二：使用forward" class="headerlink" title="方式二：使用forward"></a>方式二：使用forward</h2><blockquote><p>不会拼接前后缀</p></blockquote><h3 id="前台-1"><a href="#前台-1" class="headerlink" title="前台"></a>前台</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo2"&gt;转发——forward方式&lt;/a&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure><h3 id="后台-1"><a href="#后台-1" class="headerlink" title="后台"></a>后台</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转发方式二：forward方式,不会拼接前后缀</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"forward:/WEB-INF/success.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方式三：使用Servlet原生API"><a href="#方式三：使用Servlet原生API" class="headerlink" title="方式三：使用Servlet原生API"></a>方式三：使用Servlet原生API</h2><blockquote><p>不会拼接前后缀</p></blockquote><h3 id="前台-2"><a href="#前台-2" class="headerlink" title="前台"></a>前台</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo3"&gt;转发——原生Servlet方式&lt;/a&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure><h3 id="后台-2"><a href="#后台-2" class="headerlink" title="后台"></a>后台</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转发方式三：servlet原生实现，不会拼接前后缀</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo3"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo3</span><span class="params">(HttpServletRequest request , HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    request.getRequestDispatcher(<span class="string">"/WEB-INF/success.jsp"</span>).forward(request,response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="转发过程中的数据传递"><a href="#转发过程中的数据传递" class="headerlink" title="转发过程中的数据传递"></a>转发过程中的数据传递</h2><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><blockquote><p>直接使用request域进行数据传递</p></blockquote><h4 id="前台-3"><a href="#前台-3" class="headerlink" title="前台"></a>前台</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo4"&gt;转发——携带数据方式一&lt;/a&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure><h4 id="后台-3"><a href="#后台-3" class="headerlink" title="后台"></a>后台</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转发携带数据方式一</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo4"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo4</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    <span class="comment">//直接使用request域进行数据传递</span></span><br><span class="line">    request.setAttribute(<span class="string">"name"</span>,<span class="string">"jj"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><blockquote><p>使用Model(ModelMap)进行传递，底层会将数据放入request域中进行数据传递</p></blockquote><h4 id="前台-4"><a href="#前台-4" class="headerlink" title="前台"></a>前台</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo5"&gt;转发——携带数据方式二&lt;/a&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure><h4 id="后台-4"><a href="#后台-4" class="headerlink" title="后台"></a>后台</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转发携带数据方式二</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo5"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo5</span><span class="params">(Model model, ModelMap map)</span></span>&#123;</span><br><span class="line">    <span class="comment">//使用model进行传递，底层会将数据放入request域中进行数据传递</span></span><br><span class="line">    model.addAttribute(<span class="string">"name"</span>,<span class="string">"mm"</span>);</span><br><span class="line">    <span class="comment">//和ModelMap和Model作用相同</span></span><br><span class="line">    map.put(<span class="string">"age"</span>,<span class="string">"18"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h3><blockquote><p>使用ModelAndView进行数据传递，设置响应的视图和数据。</p></blockquote><h4 id="前台-5"><a href="#前台-5" class="headerlink" title="前台"></a>前台</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo6"&gt;转发——携带数据方式三&lt;/a&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure><h4 id="后台-5"><a href="#后台-5" class="headerlink" title="后台"></a>后台</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转发携带数据方式三</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo6"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">demo6</span><span class="params">(ModelAndView modelAndView)</span></span>&#123;</span><br><span class="line">    <span class="comment">//设置数据</span></span><br><span class="line">    modelAndView.addObject(<span class="string">"name"</span>,<span class="string">"jjmm"</span>);</span><br><span class="line">    <span class="comment">//设置视图(页面)</span></span><br><span class="line">    <span class="comment">//注意：这里会拼接前后缀</span></span><br><span class="line">    modelAndView.setViewName(<span class="string">"success"</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：ModelAndView设置视图时，会拼接前后缀</strong></p></blockquote><h1 id="页面跳转之重定向"><a href="#页面跳转之重定向" class="headerlink" title="页面跳转之重定向"></a>页面跳转之重定向</h1><h2 id="方式一：使用redirect重定向"><a href="#方式一：使用redirect重定向" class="headerlink" title="方式一：使用redirect重定向"></a>方式一：使用redirect重定向</h2><h3 id="前台-6"><a href="#前台-6" class="headerlink" title="前台"></a>前台</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo7"&gt;重定向跳转方式一&lt;/a&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure><h3 id="后台-6"><a href="#后台-6" class="headerlink" title="后台"></a>后台</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重定向跳转方式一</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo7"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo7</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/fail.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方式二：使用Servlet原生API"><a href="#方式二：使用Servlet原生API" class="headerlink" title="方式二：使用Servlet原生API"></a>方式二：使用Servlet原生API</h2><h3 id="前台-7"><a href="#前台-7" class="headerlink" title="前台"></a>前台</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo8"&gt;重定向跳转方式二&lt;/a&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure><h3 id="后台-7"><a href="#后台-7" class="headerlink" title="后台"></a>后台</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重定向跳转方式二</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo8"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo8</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    response.sendRedirect(request.getContextPath() + <span class="string">"/fail.jsp"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="补充：通过重定向访问WEB-INF下资源"><a href="#补充：通过重定向访问WEB-INF下资源" class="headerlink" title="补充：通过重定向访问WEB-INF下资源"></a>补充：通过重定向访问WEB-INF下资源</h2><blockquote><p>直接重定向访问WEB-INF下资源是访问不到的，可以<strong>重定向到一个可以转发到WEB-INF目录下的URL路径</strong></p></blockquote><h3 id="前台-8"><a href="#前台-8" class="headerlink" title="前台"></a>前台</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo9"&gt;重定向访问WEB-INF下资源&lt;/a&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure><h3 id="后台-8"><a href="#后台-8" class="headerlink" title="后台"></a>后台</h3><blockquote><p>重定向到前面写的转发方式一，访问WEN-INF下的success.jsp页面</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过重定向访问WEB-INF下资源</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo9"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo9</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/demoController/demo1"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="释放静态资源"><a href="#释放静态资源" class="headerlink" title="释放静态资源"></a>释放静态资源</h1><p>当有静态资源需要加载时，比如jquery.js，会出现404现象。[noHandlerFound No mapping for GET /js/jquery-3.3.1.js]</p><p>之所以发生这种情况是因为：现在SpringMVC的前端控制器DispatcherServlet的url-pattern配置的是 /，代表除了jsp请求不拦截，</p><p>其他的所有请求都会拦截，包括一些静态文件(js  html  css  jpg等等)，而拦截住之后，它又找不到对应的处理器方法来处理，因此报错。</p><p>下面有三种方式解决该问题</p><h2 id="方式一-1"><a href="#方式一-1" class="headerlink" title="方式一"></a>方式一</h2><p>在SpingMVC的配置文件中加入一段配置：<code>&lt;mvc:resources mapping=&quot;&quot; location=&quot;&quot;/&gt;</code></p><ul><li>mapping:用来指定一个映射地址，匹配访问地址</li><li>location:如果一个访问的地址可以被mapping指定的规则匹配上，就不再去调用处理器映射器查找相应的方法了，而是直接去location指定路径下获取资源。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    静态资源释放方式一</span></span><br><span class="line"><span class="comment">    mapping:用来指定一个映射地址，匹配访问地址</span></span><br><span class="line"><span class="comment">    location:如果一个访问的地址可以被mapping指定的规则匹配上，就不再去调用处理器映射器查找相应的方法了，而是直接去location指定路径下获取资源</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/js/*"</span> <span class="attr">location</span>=<span class="string">"/js/"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="方式二-1"><a href="#方式二-1" class="headerlink" title="方式二"></a>方式二</h2><p>在SpingMVC的配置文件中加入一段配置：<code>&lt;mvc:default-servlet-handler/&gt;</code></p><ul><li>配置下面的标签之前，请求是这样访问的：前端控制器将请求传给处理器映射器去寻找对应的处理方法，如果找不到，就会报404</li><li>配置之后，请求时这样访问的：前端控制器将请求传给处理器映射器去寻找对应的处理方法，如果找不到，暂时不报错，而是将这个请求转交给外部容器(Tomcat)的默认处理器(default-servlet)去处理。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    静态资源释放方式二</span></span><br><span class="line"><span class="comment">       配置下面的标签之前，请求是这样访问的：前端控制器将请求传给处理器映射器去寻找对应的处理方法，如果找不到，就会报404</span></span><br><span class="line"><span class="comment">       配置之后，请求时这样访问的：前端控制器将请求传给处理器映射器去寻找对应的处理方法，如果找不到，暂时不报错，而是将这个请求转交给外部容器(Tomcat)的默认处理器(default-servlet)去处理</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="方式三-1"><a href="#方式三-1" class="headerlink" title="方式三"></a>方式三</h2><p>在web.xml中修改前端控制器的拦截路径将<code>/</code>改为<code>*.do</code>，这种写法代表的是<code>拦截所有以.do结尾的访问地址，这就要求所有的请求路径上都加上.do</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--除了.jsp文件不拦截,其他文件全部拦截--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;url-pattern&gt;/&lt;/url-pattern&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        静态资源释放方式三</span></span><br><span class="line"><span class="comment">        这种写法代表拦截的是所有以.do结尾的访问地址，这就要求所有的请求路径上都加上.do</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在配置上面的前端控制器拦截以<code>.do</code>结尾的请求路径时，SpringMVC查找的时候是这样查找的：<strong>先按照最标准的路径去查找(即带着<code>.do</code>去查找)，如果找不到就去掉后缀(.do)再找一次</strong></p><ul><li><strong>意思就是即使我们在具体的控制器的方法上配置@RequestMapping()时，不指定后缀也能访问到…</strong></li><li><strong>但是前台请求地址时必须带着.do后缀</strong></li></ul><h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo1.do"&gt;请求1&lt;/a&gt;&lt;br&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo2.do"&gt;请求2&lt;/a&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定后缀</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo1.do"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不指定后缀</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="AJAX-JSON实现异步交互"><a href="#AJAX-JSON实现异步交互" class="headerlink" title="AJAX+JSON实现异步交互"></a>AJAX+JSON实现异步交互</h1><h2 id="回顾AJAX"><a href="#回顾AJAX" class="headerlink" title="回顾AJAX"></a>回顾AJAX</h2><ul><li>前台写法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.post(url,params,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;&#125;,<span class="string">"json"</span>)</span><br></pre></td></tr></table></figure><ul><li>后台写法</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List ----&gt; new objectMapper().writeValueAsString(List)----&gt;json-----&gt;response.write(json)</span><br></pre></td></tr></table></figure><h2 id="SpringMVC实现AJAX-JSON异步交互"><a href="#SpringMVC实现AJAX-JSON异步交互" class="headerlink" title="SpringMVC实现AJAX+JSON异步交互"></a>SpringMVC实现AJAX+JSON异步交互</h2><p>接下来我们研究ajax异步发送请求数据，后端返回json响应</p><p>在SpringMVC中,  这个功能主要是通过两个注解<code>@RequestBody</code>和@R<code>esponseBody</code>实现的。</p><ul><li><code>@RequestBody</code>：用于接收前端传递的请求体中的json数据，并可以自动转换封装进指定的对象中。</li><li><code>@ResponseBody</code>：用于将controller方法返回的对象通过转换器转换为指定的格式( 通常为json )之后，再写回响应。</li></ul><p><strong>注意:  Springmvc默认用MappingJackson2HttpMessageConverter对json数据进行转换，需要加入jackson的包</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>这个jackson的包,SpringMVC底层没有引入,需要我们单独导入</p></blockquote><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><h3 id="前台代码"><a href="#前台代码" class="headerlink" title="前台代码"></a>前台代码</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src="$&#123;pageContext.request.contextPath&#125;/js/jquery-3.3.1.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;button id="ajax-json"&gt;AJAX+JSON实现异步交互&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">"#ajax-json"</span>).click(function () &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type:<span class="string">"POST"</span>,</span><br><span class="line">            url:<span class="string">"$&#123;pageContext.request.contextPath&#125;/demoController/demo10"</span>,</span><br><span class="line">            contentType:<span class="string">"application/json"</span>,<span class="comment">/*代表的是前台向后台发送的数据类型为json*/</span></span><br><span class="line">            dataType:<span class="string">"json"</span>,<span class="comment">/*代表后台向前台返回的数据类型为json*/</span></span><br><span class="line">            data:<span class="string">'[&#123;"name":"张三","age":"18"&#125;,&#123;"name":"李四","age":"20"&#125;]'</span>,</span><br><span class="line">            success:function (data) &#123;</span><br><span class="line">                <span class="comment">//获取响应会的json信息</span></span><br><span class="line">                <span class="keyword">for</span>(let user of data)&#123;</span><br><span class="line">                    alert(user.name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="后台代码"><a href="#后台代码" class="headerlink" title="后台代码"></a>后台代码</h3><ul><li>User类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//set、get略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>处理器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//AJAX+JSON实现异步交互</span></span><br><span class="line"><span class="meta">@ResponseBody</span><span class="comment">//作用是将controller方法的返回值对象通过转换器转换为指的的格式(默认为json)之后，再写回相应</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo10"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">demo10</span><span class="params">(@RequestBody List&lt;User&gt; users)</span></span>&#123;<span class="comment">//@RequestBody作用是在请求体中获取json类型的数据，然后封装到指定集合或对象中</span></span><br><span class="line">    System.out.println(users);</span><br><span class="line">    <span class="keyword">return</span> users;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="restful风格"><a href="#restful风格" class="headerlink" title="restful风格"></a>restful风格</h1><h2 id="什么是restful风格"><a href="#什么是restful风格" class="headerlink" title="什么是restful风格"></a>什么是restful风格</h2><p>REST是一种软件架构风格，其强调HTTP应当以资源为中心[在请求地址中尽量的不要出现动词]。</p><p>REST规范了HTTP请求动作，使用四个词语分别表示对资源的CRUD操作: </p><ul><li><code>GET(获取)</code></li><li><code>POST(新建)</code></li><li><code>PUT(更新)</code></li><li><code>DELETE(删除)</code> </li></ul><table><thead><tr><th></th><th>原来</th><th>Restful</th></tr></thead><tbody><tr><td>保存</td><td>/saveUser</td><td>POST     /user</td></tr><tr><td>修改</td><td>/updateUser</td><td>PUT       /user</td></tr><tr><td>删除</td><td>/deleteUser?id=1</td><td>DELETE  /user/1</td></tr><tr><td>查询所有</td><td>/findAllUsers</td><td>GET        /user</td></tr><tr><td>查询一个</td><td>/findById?id=1</td><td>GET        /user/1</td></tr></tbody></table><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><h3 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h3><h4 id="前台-9"><a href="#前台-9" class="headerlink" title="前台"></a>前台</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;button id="restful1"&gt;演示restful风格_save&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">"#restful"</span>).click(function () &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type:<span class="string">"POST"</span>,</span><br><span class="line">            url:<span class="string">"$&#123;pageContext.request.contextPath&#125;/user"</span>,</span><br><span class="line">            contentType:<span class="string">"application/json"</span>,<span class="comment">/*代表的是前台向后台发送的数据类型为json*/</span></span><br><span class="line">            dataType:<span class="string">"json"</span>,<span class="comment">/*代表后台向前台返回的数据类型为json*/</span></span><br><span class="line">            data:<span class="string">'&#123;"name":"张三","age":"18"&#125;'</span>,</span><br><span class="line">            success:function (data) &#123;</span><br><span class="line">                alert(<span class="string">"提交成功"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="后台-9"><a href="#后台-9" class="headerlink" title="后台"></a>后台</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//演示restful风格</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/user"</span>,method = RequestMethod.POST)</span><br><span class="line"><span class="comment">//@PostMapping("/user") 作用和上面注解相同，是一种简写</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">saveUser</span><span class="params">(@RequestBody User user)</span></span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"1"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><h4 id="前台-10"><a href="#前台-10" class="headerlink" title="前台"></a>前台</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;button id="restful2"&gt;演示restful风格_find&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">"#restful2"</span>).click(function () &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type:<span class="string">"GET"</span>,</span><br><span class="line">            url:<span class="string">"$&#123;pageContext.request.contextPath&#125;/user"</span>,</span><br><span class="line">            contentType:<span class="string">"application/json"</span>,</span><br><span class="line">            dataType:<span class="string">"json"</span>,</span><br><span class="line">            data:<span class="string">''</span>,</span><br><span class="line">            success:function (data) &#123;</span><br><span class="line">                alert(<span class="string">"提交成功"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="后台-10"><a href="#后台-10" class="headerlink" title="后台"></a>后台</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//演示restful风格</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/user"</span>,method = RequestMethod.GET)</span><br><span class="line"><span class="comment">//@GetMapping("/user")  作用和上面注解相同，是一种简写</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">findUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"findUSer"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"findUser"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="异常处理机制"><a href="#异常处理机制" class="headerlink" title="异常处理机制"></a>异常处理机制</h1><p>对于异常的处理一般有两种方式:</p><ul><li><p>当前方法处理(try-catch)，这种处理方式会造成业务代码和异常处理代码的耦合</p></li><li><p>当前方法不处理, 出现异常后直接抛给调用者处理</p></li></ul><p>使用Spring框架后，我们的代码最终是由框架来调用的。也就是说，异常最终会抛到框架中，然后由框架指定异常处理器来统一处理异常。</p><p><img data-src="/assets/SpringMVC%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6.png" alt="SpringMVC异常处理机制"></p><h2 id="方式一：自定义异常处理器"><a href="#方式一：自定义异常处理器" class="headerlink" title="方式一：自定义异常处理器"></a>方式一：自定义异常处理器</h2><p><strong>重点:  自定义一个类实现HandlerExceptionResolver接口</strong></p><h3 id="自定义异常处理器类"><a href="#自定义异常处理器类" class="headerlink" title="自定义异常处理器类"></a>自定义异常处理器类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerException</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//记录日志</span></span><br><span class="line">        System.out.println(e.getMessage());</span><br><span class="line">        <span class="comment">// 返回页面</span></span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mv.setViewName(<span class="string">"error"</span>);<span class="comment">//会拼接前后缀</span></span><br><span class="line">        mv.addObject(<span class="string">"message"</span>,e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在配置文件中注入对象"><a href="#在配置文件中注入对象" class="headerlink" title="在配置文件中注入对象"></a>在配置文件中注入对象</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"handlerException"</span> <span class="attr">class</span>=<span class="string">"com.sun.handlers.HandlerException"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>前台</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo11"&gt;测试自定义异常处理器&lt;/a&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><p>后台</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试自定义异常处理器</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo11"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo11</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>error界面</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;error&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;错误！！！&lt;/h1&gt;</span><br><span class="line">    $&#123;requestScope.message&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="方式二：-ControllerAdvice注解"><a href="#方式二：-ControllerAdvice注解" class="headerlink" title="方式二：@ControllerAdvice注解"></a>方式二：@ControllerAdvice注解</h2><p><code>@ControllerAdvice</code> ：此注解标注在一个类上，代表这是一个全局异常处理器的类</p><p><code>@ExceptionHandler(Exception.class)</code> ：此注解标在方法上，它支持一个value属性，用于定义当前方法可以处理的异常类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span> <span class="comment">//此注解标注在一个类上，代表这是一个全局异常处理器的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerException2</span></span>&#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(Exception<span class="class">.<span class="keyword">class</span>) //此注解标在方法上，它支持一个<span class="title">value</span>属性，用于定义当前方法可以处理的异常类型</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">resolveException</span>(<span class="title">HttpServletRequest</span> <span class="title">request</span>,<span class="title">Exception</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//记录日志</span></span><br><span class="line">        System.out.println(e.getMessage());</span><br><span class="line">        <span class="comment">//返回页面</span></span><br><span class="line">        request.setAttribute(<span class="string">"message"</span>,e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意在配置文件中添加注解扫描：<code>&lt;context:component-scan base-package=&quot;com.sun.handlers&quot;/&gt;</code></p></blockquote><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>略…</p><h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h1><h2 id="什么是拦截器"><a href="#什么是拦截器" class="headerlink" title="什么是拦截器"></a>什么是拦截器</h2><p>拦截器是Spring提供的一种技术，它的功能似于过滤器Filter，它会在<strong>进入controller之前，离开controller之后以及页面渲染完毕之后</strong>进行拦截。</p><p><img data-src="/assets/SpringMVC%E6%8B%A6%E6%88%AA%E5%99%A8.png" alt="SpringMVC拦截器"></p><h2 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h2><p>重点：自定义一个类实现<code>HandlerInterceptor</code>接口</p><h3 id="开发拦截器"><a href="#开发拦截器" class="headerlink" title="开发拦截器"></a>开发拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandlerInterceptor1</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"在进入controller之前1..."</span>);</span><br><span class="line">        <span class="comment">//此返回值代表是否放行当前请求，true为放行，false禁止放心</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"在离开controller之后1..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"在页面渲染完毕后1..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置拦截器链--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置拦截器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用于配置拦截规则--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用于配置不拦截的规则--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/demoController/demo1"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--将上面规则匹配到的拦截请求，交给拦截器处理--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myHandlerInterceptor1"</span> <span class="attr">class</span>=<span class="string">"com.sun.handlers.MyHandlerInterceptor1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo12"&gt;测试拦截器&lt;/a&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试拦截器</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo12"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo12</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"进入controller"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义拦截器链"><a href="#自定义拦截器链" class="headerlink" title="自定义拦截器链"></a>自定义拦截器链</h2><p>开发中拦截器可以单独使用，也可以同时使用多个拦截器形成一条拦截器链。</p><p>开发步骤和单个拦截器是一样的，只不过注册的时候注册多个，<code>注意这里注册的顺序就代表拦截器执行的顺序</code>。</p><h3 id="再开发拦截器"><a href="#再开发拦截器" class="headerlink" title="再开发拦截器"></a>再开发拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandlerInterceptor2</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"在进入controller2之前..."</span>);</span><br><span class="line">        <span class="comment">//此返回值代表是否放行当前请求，true为放行，false禁止放心</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"在离开controller2之后..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"在页面渲染完毕后2..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置拦截器链--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置拦截器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用于配置拦截规则--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用于配置不拦截的规则--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/demoController/demo1"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--将上米娜规则匹配到的拦截请求，交给拦截器处理--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myHandlerInterceptor1"</span> <span class="attr">class</span>=<span class="string">"com.sun.handlers.MyHandlerInterceptor1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/demoController/demo1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myHandlerInterceptor2"</span> <span class="attr">class</span>=<span class="string">"com.sun.handlers.MyHandlerInterceptor2"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="补充：拦截器释放静态资源"><a href="#补充：拦截器释放静态资源" class="headerlink" title="补充：拦截器释放静态资源"></a>补充：拦截器释放静态资源</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/**/*.css"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/**/*.js"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/**/*.png"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/**/*.gif"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/**/*.jpg"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/**/*.jpeg"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="案例：使用拦截器完成用户的访问拦截"><a href="#案例：使用拦截器完成用户的访问拦截" class="headerlink" title="案例：使用拦截器完成用户的访问拦截"></a>案例：使用拦截器完成用户的访问拦截</h2><p>需求：</p><ul><li>用户访问一个主页面index.jsp(首页, 权限控制)</li><li>如果用户已经登录，即可成功访问</li><li>如果用户没有登录，不允许访问，返回登录页面login.jsp</li></ul><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p><img data-src="/assets/%E6%8B%A6%E6%88%AA%E5%99%A8%E6%A1%88%E4%BE%8B%EF%BC%9A%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95.png" alt="拦截器案例：用户登录"></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="login-jsp"><a href="#login-jsp" class="headerlink" title="login.jsp"></a>login.jsp</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;login.jsp&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/login"</span>&gt;</span><br><span class="line">    &lt;label for="username"&gt;用户名：&lt;/label&gt;&lt;input type="text" id="username" name="username"/&gt;</span><br><span class="line">    &lt;label for="password"&gt;密码：&lt;/label&gt;&lt;input type="text" id="password" name="password"/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"登录"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="配置欢迎页"><a href="#配置欢迎页" class="headerlink" title="配置欢迎页"></a>配置欢迎页</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置欢迎页--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>login.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="UserController"><a href="#UserController" class="headerlink" title="UserController"></a>UserController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(User user, HttpSession session)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"user"</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"admin"</span>.equals(user.getUsername()) &amp;&amp; <span class="string">"123"</span>.equals(user.getPassword()))&#123;</span><br><span class="line">            <span class="comment">//登录成功</span></span><br><span class="line">            session.setAttribute(<span class="string">"currentUser"</span>,user.getUsername());</span><br><span class="line">            <span class="comment">//重定向到转发到首页的方法</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"redirect:toIndex"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//登录失败,重定向到登录页</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"redirect:/login.jsp"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/toIndex"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toIndex</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="User实体"><a href="#User实体" class="headerlink" title="User实体"></a>User实体</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">//get、set略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="index-jsp"><a href="#index-jsp" class="headerlink" title="index.jsp"></a>index.jsp</h4><blockquote><p>注意:index.jsp 要放置到WEB-INF下，不然不经过前端控制器就可以直接访问到</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;登录成功,欢迎您:$&#123;sessionScope.currentUser&#125;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="开发拦截器-1"><a href="#开发拦截器-1" class="headerlink" title="开发拦截器"></a>开发拦截器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String username = (String) request.getSession().getAttribute(<span class="string">"currentUser"</span>);</span><br><span class="line">        <span class="keyword">if</span> (username == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//用户未登录，拦截</span></span><br><span class="line">            <span class="comment">//重定向到登录页</span></span><br><span class="line">            response.sendRedirect(request.getContextPath() + <span class="string">"/login.jsp"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//用户登录，放行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置拦截器-1"><a href="#配置拦截器-1" class="headerlink" title="配置拦截器"></a>配置拦截器</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置拦截器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--拦截所有--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--放行登录请求--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/login"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.sun.interceptor.LoginInterceptor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;工程准备&quot;&gt;&lt;a href=&quot;#工程准备&quot; class=&quot;headerlink&quot; title=&quot;工程准备&quot;&gt;&lt;/a&gt;工程准备&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;新建工程，进行配置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;pom.xml&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--springmvc--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-webmvc&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;5.1.6.RELEASE&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--servlet--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;javax.servlet&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;javax.servlet-api&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;3.1.0&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--jsp--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;javax.servlet&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;jsp-api&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;2.0&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="框架" scheme="http://sunmoon.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="SpringMVC" scheme="http://sunmoon.com/categories/%E6%A1%86%E6%9E%B6/SpringMVC/"/>
    
    
      <category term="页面跳转方式" scheme="http://sunmoon.com/tags/%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC%E6%96%B9%E5%BC%8F/"/>
    
      <category term="释放静态资源" scheme="http://sunmoon.com/tags/%E9%87%8A%E6%94%BE%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90/"/>
    
      <category term="SpringMVC实现AJAX" scheme="http://sunmoon.com/tags/SpringMVC%E5%AE%9E%E7%8E%B0AJAX/"/>
    
      <category term="restful风格" scheme="http://sunmoon.com/tags/restful%E9%A3%8E%E6%A0%BC/"/>
    
      <category term="异常处理机制" scheme="http://sunmoon.com/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/"/>
    
      <category term="拦截器" scheme="http://sunmoon.com/tags/%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC-1</title>
    <link href="http://sunmoon.com/2020/09/26/SpringMVC-1/"/>
    <id>http://sunmoon.com/2020/09/26/SpringMVC-1/</id>
    <published>2020-09-26T13:29:15.000Z</published>
    <updated>2020-09-26T14:16:36.628Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><h2 id="MVC模式"><a href="#MVC模式" class="headerlink" title="MVC模式"></a>MVC模式</h2><p>MVC是一种用于设计创建 Web 应用程序表现层的模式,使用它可以将业务逻辑、数据、界面显示代码分离开来.</p><ul><li>Model（模型）: 指的就是数据模型,用于封装数据</li><li>View（视图）:    用于数据展示</li><li>Controller（控制器）: 用于程序处理逻辑</li></ul><p><img data-src="/assets/MVC%E6%A8%A1%E5%BC%8F.png" alt="MVC模式"></p><a id="more"></a><h2 id="SpringMVC介绍"><a href="#SpringMVC介绍" class="headerlink" title="SpringMVC介绍"></a>SpringMVC介绍</h2><p>SpringMVC是Spring产品对MVC模式的一种具体实现，<strong>它可以通过一套注解，让一个简单Java类成为控制器</strong>。</p><p><img data-src="/assets/SpringMVC%E4%BB%8B%E7%BB%8D.png" alt="SpringMVC介绍"></p><h1 id="SpringMVC快速入门"><a href="#SpringMVC快速入门" class="headerlink" title="SpringMVC快速入门"></a>SpringMVC快速入门</h1><blockquote><p>需求：开发一个请求页面, 向后台发送一个请求, 后台需要在控制台打印一句话,  然后跳转到一个新的返回页面</p></blockquote><h2 id="创建web空工程，导入相关坐标"><a href="#创建web空工程，导入相关坐标" class="headerlink" title="创建web空工程，导入相关坐标"></a>创建web空工程，导入相关坐标</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SpringMVC--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Servlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--JSP--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="提供SpringMVC配置文件"><a href="#提供SpringMVC配置文件" class="headerlink" title="提供SpringMVC配置文件"></a>提供SpringMVC配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.sun.controller"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置三大组件--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注解驱动:相当于配置了处理器映射器、处理器适配器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Spring允许我们以配置的形式传入前后缀，他会在跳转视图的时候自动拼接--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>可以在配置视图解析器时传递设置两个属性<code>prefix</code>和<code>suffix</code>表示前缀和后缀，在跳转视图时会自拼接</p></blockquote><h2 id="在web-xml中配置前端控制器"><a href="#在web-xml中配置前端控制器" class="headerlink" title="在web.xml中配置前端控制器"></a>在web.xml中配置前端控制器</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span></span></span><br><span class="line"><span class="tag"><span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--前端控制器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- / 表示默认匹配拦截除了 .jsp 之外的所有--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="请求页面"><a href="#请求页面" class="headerlink" title="请求页面"></a>请求页面</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;index&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo1"&gt;SpringMVC快速入门&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// @RequestMapping  用于为当前方法绑定一个URL地址，作用就是为了前端请求的匹配</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">demo1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"进入后台了..."</span>);</span><br><span class="line">        <span class="comment">//此处的返回值就用于说明下一个要跳转的页面的地址</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/WEB-INF/success.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="响应页面"><a href="#响应页面" class="headerlink" title="响应页面"></a>响应页面</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;success&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Success!!!&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="SpringMVC原理"><a href="#SpringMVC原理" class="headerlink" title="SpringMVC原理"></a>SpringMVC原理</h1><h2 id="SpringMVC的工作流程"><a href="#SpringMVC的工作流程" class="headerlink" title="SpringMVC的工作流程"></a>SpringMVC的工作流程</h2><p>解释：</p><ul><li><code>DispatcherServlet</code>：前端控制器</li><li><code>HandlerMapping</code>：处理器映射器</li><li><code>HandlerAdapter</code>：处理器适配器</li><li><code>Handler</code>：控制器</li><li><code>ViewResolver</code>：视图解析器</li></ul><p><img data-src="/assets/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png" alt="SpringMVC原理"></p><ol><li>用户通过浏览器发送请求至<code>DispatcherServlet</code></li><li>DispatcherServlet收到请求调用<code>HandlerMapping</code></li><li>HandlerMapping找到具体的处理器链返回给DispatcherServlet</li><li>DispatcherServlet会根据返回的处理器链调用<code>HandlerAdapter</code></li><li>HandlerAdapter经过适配调用具体的<code>Handler</code>（controller）</li><li>Controller执行完成返回一个执行结果</li><li>HandlerAdapter将Handler的结果ModelAndView对象返回给DispatcherServlet</li><li>DispatcherServlet将ModelAndView对象传给<code>ViewResolver</code></li><li>ViewReslover解析后得到具体View，并返回给DispatcherServlet</li><li>DispatcherServlet根据View进行视图渲染（即将模型数据填充至视图中）</li><li>DispatcherServlet会将渲染后的视图响应给浏览器</li></ol><h2 id="SpringMVC的三大组件"><a href="#SpringMVC的三大组件" class="headerlink" title="SpringMVC的三大组件"></a>SpringMVC的三大组件</h2><p>处理器映射器：负责根据URL寻找对应的处理器方法</p><p>处理器适配器：负责真正的去调用某个处理器方法</p><p>视图解析器：负责将逻辑视图转换成物理视图</p><blockquote><p>小贴士：</p><ul><li>当我们不进行三大组件配置时，SpringMVC会使用自己配置文件中的配置，但是我们配置的是经过功能增强的，所以不使用默认的。</li></ul></blockquote><p><img data-src="/assets/%E5%89%8D%E7%AB%AF%E6%8E%A7%E5%88%B6%E5%99%A8%E9%BB%98%E8%AE%A4%E7%9A%84%E9%85%8D%E7%BD%AE%E4%B8%89%E5%A4%A7%E7%BB%84%E4%BB%B6.png" alt="前端控制器默认的配置三大组件"></p><p>三大组件配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置三大组件--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注解驱动:相当于配置了处理器映射器、处理器适配器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置视图解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Spring允许我们以配置的形式传入前后缀，他会在跳转视图的时候自动拼接--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="RequestMapping"></a>RequestMapping</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequestMapping &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(<span class="string">"path"</span>)</span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;<span class="comment">//指定访问路径，支持多个</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(<span class="string">"value"</span>)</span><br><span class="line">    String[] path() <span class="keyword">default</span> &#123;&#125;;<span class="comment">//与value互为别名，作用相同</span></span><br><span class="line"></span><br><span class="line">    RequestMethod[] method() <span class="keyword">default</span> &#123;&#125;;<span class="comment">//用于指定请求方法，如POST、GET，支持配置多个</span></span><br><span class="line"></span><br><span class="line">    String[] params() <span class="keyword">default</span> &#123;&#125;;<span class="comment">//指定请求携带的参数，配置后前台必须传递，否则报错</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RequestMapping用于建立请求URL和处理方法之间的对应关系，也可以通过它的属性对请求做出各种限制</p><ul><li><p>value：用于限制请求URL(和path作用一样)</p></li><li><p>method：用于限制请求类型</p></li><li><p>params：用于限制请求参数的条件</p></li></ul><p><strong>此注解可以标注在方法上，也可以标注在类上，标注在类上代表类中的所有方法都可以共用一段URL。</strong></p><p><img data-src="/assets/RequestMapping%E6%B3%A8%E8%A7%A3%E6%A0%87%E5%9C%A8%E7%B1%BB%E4%B8%8A%E5%92%8C%E6%96%B9%E6%B3%95%E4%B8%8A.png" alt="RequestMapping注解标在类上和方法上">    </p><h2 id="限制请求路径"><a href="#限制请求路径" class="headerlink" title="限制请求路径"></a>限制请求路径</h2><p><code>@RequestMapping</code>注解中有两个属性，<code>value</code>和<code>path</code>，两个互为别名，表示的是当前方法绑定的URL，支持一个方法绑定多个URL。</p><h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><h4 id="前台"><a href="#前台" class="headerlink" title="前台"></a>前台</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--演示RequestMapping的value和path属性--%&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo2"&gt;RequestMapping-value&lt;/a&gt;&lt;br/&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo3"&gt;RequestMapping-value&lt;/a&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><h4 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@RequestMapping(value = &#123;"/demoController/demo2","/demoController/demo3"&#125;)</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(path = &#123;<span class="string">"/demoController/demo2"</span>,<span class="string">"/demoController/demo3"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//此处的返回值就用于说明下一个要跳转的页面的地址</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>value和path作用相同，都是用来绑定路径，支持配置多个</p></blockquote><h2 id="限制请求类型"><a href="#限制请求类型" class="headerlink" title="限制请求类型"></a>限制请求类型</h2><p><code>@RequestMapping</code>注解中有一个<code>method</code>属性，可以限定请求方式，例如GET或POST提交，支持指定多个。</p><h3 id="代码演示-1"><a href="#代码演示-1" class="headerlink" title="代码演示"></a>代码演示</h3><h4 id="前台-1"><a href="#前台-1" class="headerlink" title="前台"></a>前台</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--演示RequestMapping的method属性--%&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo4"&gt;RequestMapping-method&lt;/a&gt;&lt;br/&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/demoController/demo5"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"RequestMapping-method"</span>/&gt;</span><br><span class="line">&lt;/form&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><h4 id="后台-1"><a href="#后台-1" class="headerlink" title="后台"></a>后台</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/demoController/demo4"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//此处的返回值就用于说明下一个要跳转的页面的地址</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(path=<span class="string">"/demoController/demo5"</span>, method = &#123;RequestMethod.GET,RequestMethod.POST&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo5</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//此处的返回值就用于说明下一个要跳转的页面的地址</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：当method指定仅仅为POST方式时，前台必须以POST方式提交，否则会报错(405)</p></blockquote><h2 id="限制请求参数"><a href="#限制请求参数" class="headerlink" title="限制请求参数"></a>限制请求参数</h2><p><code>RequestMapping</code>注解中有一个<code>params</code>属性，用于指定请求参数的必传，不写代表不做限制。</p><h3 id="代码演示-2"><a href="#代码演示-2" class="headerlink" title="代码演示"></a>代码演示</h3><h4 id="前台-2"><a href="#前台-2" class="headerlink" title="前台"></a>前台</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--演示RequestMapping的params属性--%&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo6?username=jj"&gt;RequestMapping-method&lt;/a&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><h4 id="后台-2"><a href="#后台-2" class="headerlink" title="后台"></a>后台</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//params用于指定请求参数的必传，不写代表不做限制</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/demoController/demo6"</span>,params = <span class="string">"username"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo6</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//此处的返回值就用于说明下一个要跳转的页面的地址</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：当指定params属性时，前台请求必须携带该参数，否则就会报错(404)。</p></blockquote><h1 id="接收请求参数"><a href="#接收请求参数" class="headerlink" title="接收请求参数"></a>接收请求参数</h1><p>在SpringMVC中可以使用多种类型来接收前端传入的参数(字符串)</p><h2 id="简单类型"><a href="#简单类型" class="headerlink" title="简单类型"></a>简单类型</h2><p>简单类型参数接收，<strong>保证前端传递的参数名称和方法形参的名称一致</strong>即可</p><blockquote><p>对于一些简单类型的数据，SpringMVC底层内置了转换器</p></blockquote><h3 id="代码演示-3"><a href="#代码演示-3" class="headerlink" title="代码演示"></a>代码演示</h3><h4 id="前台-3"><a href="#前台-3" class="headerlink" title="前台"></a>前台</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> &lt;%--接收请求参数——简单类型(<span class="number">8</span>+<span class="number">8</span>+<span class="number">1</span>)--%&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo7?username=张三&amp;age=18"&gt;接收参数——简单类型&lt;/a&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><h4 id="后台-3"><a href="#后台-3" class="headerlink" title="后台"></a>后台</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简单类型参数接收，保证前端传递的参数名称和方法形参的名称一致即可</span></span><br><span class="line"><span class="comment">//对于一些简单类型的数据，SpringMVC底层内置了转换器</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/demoController/demo7"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo7</span><span class="params">(String username,Integer age)</span></span>&#123;</span><br><span class="line">    System.out.println(username +<span class="string">"-"</span>+ age);</span><br><span class="line">    <span class="comment">//此处的返回值就用于说明下一个要跳转的页面的地址</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h2><p>对象类型参数接收，只需要<strong>保证前端传递的参数名称和pojo的属性名称(set方法)一致</strong>即可</p><h3 id="代码演示-4"><a href="#代码演示-4" class="headerlink" title="代码演示"></a>代码演示</h3><h4 id="前台-4"><a href="#前台-4" class="headerlink" title="前台"></a>前台</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--接收请求参数——对象--%&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo8?username=李四&amp;age=20"&gt;接收参数——对象类型&lt;/a&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><h4 id="后台-4"><a href="#后台-4" class="headerlink" title="后台"></a>后台</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象类型：只需要保证前端传递的参数名称和pojo的属性名称(set方法)一致即可</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/demoController/demo8"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo8</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="comment">//此处的返回值就用于说明下一个要跳转的页面的地址</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h2><p>数组类型：只需要<strong>保证前端传递的参数名称和方法形参名称一致</strong>即可</p><h3 id="代码演示-5"><a href="#代码演示-5" class="headerlink" title="代码演示"></a>代码演示</h3><h4 id="前台-5"><a href="#前台-5" class="headerlink" title="前台"></a>前台</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--接收请求参数——数组--%&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo9?students=张三&amp;students=李四"&gt;接收参数——数组类型&lt;/a&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><h4 id="后台-5"><a href="#后台-5" class="headerlink" title="后台"></a>后台</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组类型：只需要保证前端传递的参数名称和方法形参名称一致即可</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/demoController/demo9"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo9</span><span class="params">(String[] students)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (String student : students) &#123;</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//此处的返回值就用于说明下一个要跳转的页面的地址</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h2><p>集合类型：<strong>获取集合参数时，要将集合参数包装到一个pojo中</strong>才可以</p><h3 id="代码演示-6"><a href="#代码演示-6" class="headerlink" title="代码演示"></a>代码演示</h3><h4 id="封装对象"><a href="#封装对象" class="headerlink" title="封装对象"></a>封装对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Vo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">//get、set方法略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="前台-6"><a href="#前台-6" class="headerlink" title="前台"></a>前台</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--接收请求参数——集合--%&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/demoController/demo10?students=张三&amp;students=李四"</span>&gt;</span><br><span class="line">    list第一个元素： &lt;input type=<span class="string">"text"</span> name=<span class="string">"users[0].username"</span> value=<span class="string">"张三"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> name=<span class="string">"users[0].age"</span> value=<span class="string">"18"</span>&gt;&lt;br/&gt;</span><br><span class="line">    list第二个元素： &lt;input type=<span class="string">"text"</span> name=<span class="string">"users[1].username"</span> value=<span class="string">"李四"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> name=<span class="string">"users[1].age"</span> value=<span class="string">"20"</span>&gt;&lt;br/&gt;</span><br><span class="line">    map第一个元素：&lt;input type=<span class="string">"text"</span> name=<span class="string">"map[1001]"</span> value=<span class="string">"jj"</span>&gt;&lt;br/&gt;</span><br><span class="line">    map第二个元素：&lt;input type=<span class="string">"text"</span> name=<span class="string">"map[1002]"</span> value=<span class="string">"mm"</span>&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"接收参数——集合类型"</span>&gt;&lt;br/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h4 id="后台-6"><a href="#后台-6" class="headerlink" title="后台"></a>后台</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//集合类型：获取集合参数时，要将集合参数包装到一个pojo中才可以</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/demoController/demo10"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo10</span><span class="params">(Vo vo)</span></span>&#123;</span><br><span class="line">    System.out.println(vo);</span><br><span class="line">    <span class="comment">//此处的返回值就用于说明下一个要跳转的页面的地址</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h2><p>对于一些常见的类型,  SpringMVC是内置了类型转换器的,  但是对于一些格式比较灵活的参数(日期  时间), SpringMVC无法完成类型转换。</p><p>这时候就必须<strong>自定义类型转换器</strong></p><blockquote><p>小贴士：</p><ul><li>其实SpringMVC也内置日期类型的转换器,  格式为: yyyy/MM/dd</li></ul></blockquote><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="自定义时间类型转换器"><a href="#自定义时间类型转换器" class="headerlink" title="自定义时间类型转换器"></a>自定义时间类型转换器</h4><ul><li>自定义一个类型转换器类,实现类型转换的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 日期转换类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String strDate)</span> </span>&#123;</span><br><span class="line">        Date date = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            date = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>).parse(strDate);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>实现<code>Converter&lt;S,T&gt;</code>接口，重写<code>convert()</code>转换方法</p><ul><li>泛型S代表源数据类型，就是什么数据需要转换，当前是将一个字符串转为日期类型</li><li>泛型T代表目标数据类型，现在是Date日期类型</li></ul></blockquote><ul><li>将转换器的类注册到转换服务,并且将转换服务注册到SpringMVC的注册驱动中</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注解驱动:相当于配置了处理器映射器、处理器适配器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">"conversionService2"</span>/&gt;</span><span class="comment">&lt;!--将转换服务注册到SpringMVC容器中--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--声明转换服务，并且自定义转换器对象注册到服务--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conversionService2"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.ConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.sun.converters.DateConverter"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="前台-7"><a href="#前台-7" class="headerlink" title="前台"></a>前台</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--接收请求参数——日期类型--%&gt;</span><br><span class="line">&lt;a href=<span class="string">"$&#123;pageContext.request.contextPath&#125;/demoController/demo11?date=2020-9-9"</span>&gt;</span><br><span class="line">    接收参数——日期类型</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure><h4 id="后台-7"><a href="#后台-7" class="headerlink" title="后台"></a>后台</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//日期类型</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo11"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo11</span><span class="params">(Date date)</span></span>&#123;</span><br><span class="line">    System.out.println(date);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件类型-文件上传"><a href="#文件类型-文件上传" class="headerlink" title="文件类型(文件上传)"></a>文件类型(文件上传)</h2><p>文件上传三要素：</p><ul><li><code>POST</code>方式提交</li><li>表单类型为<code>enctype=&quot;multipart/form-data&quot;</code></li><li>提供文件上传的input域<code>&lt;input type=&quot;file&quot; name=&quot;&quot;/&gt;</code></li></ul><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="导入文件上传pom依赖"><a href="#导入文件上传pom依赖" class="headerlink" title="导入文件上传pom依赖"></a>导入文件上传pom依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件上传--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置文件上传解析器"><a href="#配置文件上传解析器" class="headerlink" title="配置文件上传解析器"></a>配置文件上传解析器</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    配置文件解析器</span></span><br><span class="line"><span class="comment">    注意：这个id不能随便写，必须叫multipartResolver</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--限制每次上传文件的大小，单位是B 5M = 1024 * 1024 * 5 = 5242880--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"5242880"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="单文件上传"><a href="#单文件上传" class="headerlink" title="单文件上传"></a>单文件上传</h4><h5 id="前台-8"><a href="#前台-8" class="headerlink" title="前台"></a>前台</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/demoController/demo12"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"file"</span> name=<span class="string">"uploadFile"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"单文件上传"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h5 id="后台-8"><a href="#后台-8" class="headerlink" title="后台"></a>后台</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo12"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo12</span><span class="params">(MultipartFile uploadFile)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//获取前台input标签name属性名</span></span><br><span class="line">    String name = uploadFile.getName();</span><br><span class="line">    <span class="comment">//获取文件名</span></span><br><span class="line">    String filename = uploadFile.getOriginalFilename();</span><br><span class="line">    <span class="comment">// 使用UUID+文件名生成新文件名</span></span><br><span class="line">    String newFilename = UUID.randomUUID().toString() + filename;</span><br><span class="line">    <span class="comment">//定义一个本地目录(上传路径)</span></span><br><span class="line">    File file = <span class="keyword">new</span> File(<span class="keyword">new</span> File(<span class="string">"E:\\IDEA_Workspace"</span>), newFilename);</span><br><span class="line">    <span class="comment">//文件传输</span></span><br><span class="line">    uploadFile.transferTo(file);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：后台参数类型必须为MultipartFile，参数名称和前台的name属性名称一致</strong></p></blockquote><h4 id="多文件上传"><a href="#多文件上传" class="headerlink" title="多文件上传"></a>多文件上传</h4><blockquote><p>前台文件上传input标签中添加<code>multiple</code>属性</p><p>后台使用<code>MultipartFile[]</code><strong>数组</strong>接收</p></blockquote><h5 id="前台-9"><a href="#前台-9" class="headerlink" title="前台"></a>前台</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/demoController/demo13"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"file"</span> name=<span class="string">"uploadFile"</span> multiple&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"多文件上传"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h5 id="后台-9"><a href="#后台-9" class="headerlink" title="后台"></a>后台</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo13"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo13</span><span class="params">(MultipartFile[] uploadFile)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (MultipartFile multipartFile : uploadFile) &#123;</span><br><span class="line">        <span class="comment">//获取文件名</span></span><br><span class="line">        String filename = multipartFile.getOriginalFilename();</span><br><span class="line">        <span class="comment">// 使用UUID+文件名生成新文件名</span></span><br><span class="line">        String newFilename = UUID.randomUUID().toString() + filename;</span><br><span class="line">        <span class="comment">//定义一个本地目录(上传路径)</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="keyword">new</span> File(<span class="string">"E:\\IDEA_Workspace"</span>), newFilename);</span><br><span class="line">        <span class="comment">//文件传输</span></span><br><span class="line">        multipartFile.transferTo(file);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>多文件上传</p><ul><li>在<code>&lt;input type=&quot;file&quot;/&gt;</code>域中添加<code>multiple</code>属性</li><li>后台接收使用<code>MultipartFile[]</code>数组接收，遍历上传即可</li></ul></blockquote><h1 id="接收参数的处理"><a href="#接收参数的处理" class="headerlink" title="接收参数的处理"></a>接收参数的处理</h1><h2 id="中文乱码"><a href="#中文乱码" class="headerlink" title="中文乱码"></a>中文乱码</h2><p>SpringMVC在使用post提交请求时,  对于中文参数是有乱码问题的, 针对这种情况它提供了一个中文乱码过滤器,  我们只需要进行配置一下就可以了。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置中文过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h2><p>@RequestParam标注在<code>方法参数</code>之前，用于对传入的参数做一些限制，支持三个属性:</p><ul><li>value：默认属性，用于指定前端传入的参数名称</li><li>required：用于指定此参数是否必传，默认为true</li><li>defaultValue：当参数为非必传参数且前端没有传入参数时，指定一个默认值</li></ul><h2 id="代码演示-7"><a href="#代码演示-7" class="headerlink" title="代码演示"></a>代码演示</h2><h3 id="前台-10"><a href="#前台-10" class="headerlink" title="前台"></a>前台</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--演示RequestParam--%&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo14?students=jj&amp;students=mm"&gt;RequestParam&lt;/a&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><h3 id="后台-10"><a href="#后台-10" class="headerlink" title="后台"></a>后台</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@RequestParam标注在方法参数之前。用于表示当前参数是获取的前端传递或来的哪个参数值</span></span><br><span class="line"><span class="comment">//@RequestParam 标注方法之前，此参数为必传选项，不传就会报错，但是可以使用required = false取消这个限制</span></span><br><span class="line"><span class="comment">//defaultValue可以为当前参数设置一个默认值，当前端不传递此参数时候，就是用默认值</span></span><br><span class="line"><span class="comment">//@RequestParam(value = "studnets") 可以接收一个集合参数，可以直接封装到一个集中对象中</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo14"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo14</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    @RequestParam(value = <span class="string">"username"</span>,required = <span class="keyword">false</span>,defaultValue = <span class="string">"jj"</span>)</span> String name,</span></span><br><span class="line"><span class="function">    @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"students"</span>)</span> List&lt;String&gt; students</span></span><br><span class="line"><span class="function">)</span>&#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    System.out.println(students);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="接收请求头信息"><a href="#接收请求头信息" class="headerlink" title="接收请求头信息"></a>接收请求头信息</h1><p>@RequestHeader注解，用于接收请求头信息</p><ul><li><code>@RequestHeader</code>用于接收请求头所有信息，封装到一个Map中</li><li><code>@RequestHeader(&quot;key&quot;)</code>用于接收指定的请求头信息，key为某一个请求头名称</li><li><code>@CookieValue(&quot;key&quot;)</code>用于接收cookie中的某一项信息</li></ul><h2 id="代码演示-8"><a href="#代码演示-8" class="headerlink" title="代码演示"></a>代码演示</h2><h3 id="前台-11"><a href="#前台-11" class="headerlink" title="前台"></a>前台</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--接收请求头信息--%&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath&#125;/demoController/demo15"&gt;接收请求头信息&lt;/a&gt;&lt;br/&gt;</span><br></pre></td></tr></table></figure><h3 id="后台-11"><a href="#后台-11" class="headerlink" title="后台"></a>后台</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    @RequestHeader用于接收请求头所有信息，封装到一个Map中</span></span><br><span class="line"><span class="comment">    @RequestHeader("key")用于接收指定的请求头信息，key为某一个请求头名称</span></span><br><span class="line"><span class="comment">    @CookieValue("key")用于接收cookie中的某一项信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/demoController/demo15"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo15</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        @RequestHeader Map map,</span></span></span><br><span class="line"><span class="function"><span class="params">        @RequestHeader(<span class="string">"cookie"</span>)</span> String cookie,</span></span><br><span class="line"><span class="function">        @<span class="title">CookieValue</span><span class="params">(<span class="string">"JSESSIONID"</span>)</span> String jsessionid</span></span><br><span class="line"><span class="function">        )</span>&#123;</span><br><span class="line">    System.out.println(map);</span><br><span class="line">    System.out.println(cookie);</span><br><span class="line">    System.out.println(jsessionid);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringMVC&quot;&gt;&lt;a href=&quot;#SpringMVC&quot; class=&quot;headerlink&quot; title=&quot;SpringMVC&quot;&gt;&lt;/a&gt;SpringMVC&lt;/h1&gt;&lt;h2 id=&quot;MVC模式&quot;&gt;&lt;a href=&quot;#MVC模式&quot; class=&quot;headerlink&quot; title=&quot;MVC模式&quot;&gt;&lt;/a&gt;MVC模式&lt;/h2&gt;&lt;p&gt;MVC是一种用于设计创建 Web 应用程序表现层的模式,使用它可以将业务逻辑、数据、界面显示代码分离开来.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Model（模型）: 指的就是数据模型,用于封装数据&lt;/li&gt;
&lt;li&gt;View（视图）:    用于数据展示&lt;/li&gt;
&lt;li&gt;Controller（控制器）: 用于程序处理逻辑&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&quot;/assets/MVC%E6%A8%A1%E5%BC%8F.png&quot; alt=&quot;MVC模式&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="框架" scheme="http://sunmoon.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="SpringMVC" scheme="http://sunmoon.com/categories/%E6%A1%86%E6%9E%B6/SpringMVC/"/>
    
    
      <category term="SpringMVC介绍" scheme="http://sunmoon.com/tags/SpringMVC%E4%BB%8B%E7%BB%8D/"/>
    
      <category term="SpringMVC原理" scheme="http://sunmoon.com/tags/SpringMVC%E5%8E%9F%E7%90%86/"/>
    
      <category term="RequestMapping" scheme="http://sunmoon.com/tags/RequestMapping/"/>
    
      <category term="SpringMVC接收请求参数" scheme="http://sunmoon.com/tags/SpringMVC%E6%8E%A5%E6%94%B6%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0/"/>
    
      <category term="SpringMVC接收参数的处理" scheme="http://sunmoon.com/tags/SpringMVC%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0%E7%9A%84%E5%A4%84%E7%90%86/"/>
    
      <category term="SpringMVC接收请求头信息" scheme="http://sunmoon.com/tags/SpringMVC%E6%8E%A5%E6%94%B6%E8%AF%B7%E6%B1%82%E5%A4%B4%E4%BF%A1%E6%81%AF/"/>
    
  </entry>
  
  <entry>
    <title>Spring-3</title>
    <link href="http://sunmoon.com/2020/09/25/Spring-3/"/>
    <id>http://sunmoon.com/2020/09/25/Spring-3/</id>
    <published>2020-09-25T14:04:30.000Z</published>
    <updated>2020-09-25T14:13:41.893Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用动态代理优化转账代码"><a href="#使用动态代理优化转账代码" class="headerlink" title="使用动态代理优化转账代码"></a>使用动态代理优化转账代码</h1><h2 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h2><blockquote><p>目标对象   + 代理逻辑  = 代理对象</p><p>目标对象:    被代理的对象–AccountServiceImpl</p><p>代理逻辑:    要增强的功能–事务管理</p><p>代理对象:     一个具有事务管理功能的Service </p></blockquote><a id="more"></a><h3 id="目标对象"><a href="#目标对象" class="headerlink" title="目标对象"></a>目标对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceAccount, String targetAccount, Float money)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//1.查询数据库获取两个用户</span></span><br><span class="line">            Account source = accountDao.findByName(sourceAccount);</span><br><span class="line">            Account target = accountDao.findByName(targetAccount);</span><br><span class="line">            <span class="comment">//2.在内存中做出转账操作</span></span><br><span class="line">            <span class="comment">//2.1 源账户-money</span></span><br><span class="line">            source.setBalance(source.getBalance() - money);</span><br><span class="line">            <span class="comment">//2.2 目标账户+money</span></span><br><span class="line">            target.setBalance(target.getBalance() + money);</span><br><span class="line">            <span class="comment">//3.设置回数据库</span></span><br><span class="line">            accountDao.updateByName(source);</span><br><span class="line">            <span class="comment">//模拟程序出现异常</span></span><br><span class="line">            <span class="comment">//int i = 1 / 0;</span></span><br><span class="line">            accountDao.updateByName(target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代理逻辑"><a href="#代理逻辑" class="headerlink" title="代理逻辑"></a>代理逻辑</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 事务管理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line">    <span class="comment">//本地集合</span></span><br><span class="line">    <span class="keyword">private</span> ThreadLocal&lt;Connection&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;Connection&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取到Connection对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Connection connection = threadLocal.get();</span><br><span class="line">        <span class="keyword">if</span> (connection == <span class="keyword">null</span>)&#123; <span class="comment">//链接不存在</span></span><br><span class="line">            <span class="comment">//获取链接</span></span><br><span class="line">            connection = dataSource.getConnection();</span><br><span class="line">            <span class="comment">//存入本地集合</span></span><br><span class="line">            threadLocal.set(connection);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开启事务方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">begin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//开启事务</span></span><br><span class="line">            getConnection().setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提交事务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            getConnection().commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//回滚事务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            getConnection().rollback();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭事务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            getConnection().close();</span><br><span class="line">            <span class="comment">//释放集合中的存储的链接</span></span><br><span class="line">            threadLocal.remove();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生存代理对象"><a href="#生存代理对象" class="headerlink" title="生存代理对象"></a>生存代理对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TxManager txManager;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//jdk动态代理进行事务的控制</span></span><br><span class="line">        AccountService instance = (AccountService) Proxy.newProxyInstance(</span><br><span class="line">                accountService.getClass().getClassLoader(),</span><br><span class="line">                accountService.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                        Object obj = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="keyword">try</span>&#123;</span><br><span class="line">                            <span class="comment">//事务开启</span></span><br><span class="line">                            txManager.begin();</span><br><span class="line">                            <span class="comment">//执行业务代码</span></span><br><span class="line">                            obj = method.invoke(accountService, args);</span><br><span class="line">                            <span class="comment">//事务提交</span></span><br><span class="line">                            txManager.commit();</span><br><span class="line">                        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                            <span class="comment">//回滚</span></span><br><span class="line">                            txManager.rollback();</span><br><span class="line">                        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                            <span class="comment">//关闭</span></span><br><span class="line">                            txManager.close();</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> obj;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">        <span class="comment">//代理对象调用方法</span></span><br><span class="line">        instance.transfer(<span class="string">"A01"</span>,<span class="string">"A02"</span>,<span class="number">10f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="cglib动态代理"><a href="#cglib动态代理" class="headerlink" title="cglib动态代理"></a>cglib动态代理</h2><blockquote><p>复制上一个工程</p></blockquote><blockquote><p>删除AccountService接口及相关内容</p></blockquote><h3 id="使用cglib创建代理对象"><a href="#使用cglib创建代理对象" class="headerlink" title="使用cglib创建代理对象"></a>使用cglib创建代理对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountServiceImpl accountService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TxManager txManager;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//cglib完成动态代理</span></span><br><span class="line">        <span class="comment">//1.获取增强器</span></span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        <span class="comment">//2.设置父类</span></span><br><span class="line">        enhancer.setSuperclass(AccountServiceImpl<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//代理逻辑</span></span><br><span class="line">        InvocationHandler invocationHandler = <span class="keyword">new</span> InvocationHandler()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object o, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                Object obj = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    txManager.begin();</span><br><span class="line">                    method.invoke(accountService,args);</span><br><span class="line">                    txManager.commit();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    txManager.rollback();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    txManager.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> obj;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//3.设置代理逻辑</span></span><br><span class="line">        enhancer.setCallback(invocationHandler);</span><br><span class="line">        <span class="comment">//4.创建代理对象</span></span><br><span class="line">        AccountServiceImpl service = (AccountServiceImpl) enhancer.create();</span><br><span class="line">        <span class="comment">//执行方法</span></span><br><span class="line">        service.transfer(<span class="string">"A01"</span>,<span class="string">"A02"</span>,<span class="number">1f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="jdk和cglib两种代理方式的选择"><a href="#jdk和cglib两种代理方式的选择" class="headerlink" title="jdk和cglib两种代理方式的选择"></a>jdk和cglib两种代理方式的选择</h2><p>首先明确在创建代理实现类时，jdk的速度要高于cglib，所以选择的时候:</p><ul><li><p>当被代理类有接口的时候，使用jdk动态代理，因为它的效率高</p></li><li><p>当被代理类没有接口的时候，使用cglib动态代理，因为没办法</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img data-src="/assets/aop%E6%8E%A8%E5%AF%BC.png" alt="aop推导"></p><p>当核心业务（转账）和增强业务（事务）同时出现时，我们可以在开发时对他们分别开发，运行时再组装在一起（使用动态代理的方式）。</p><p>这样做的好处是：</p><ol><li>逻辑清晰，开发核心业务的时候，不必关注增强业务的代码</li><li>代码复用性高：增强代码不用重复书写</li></ol><p>这就是一种 AOP 的思想。 </p><p>总结:  <code>开发阶段分别开发  运行阶段组装运行</code></p><h1 id="AOP介绍"><a href="#AOP介绍" class="headerlink" title="AOP介绍"></a>AOP介绍</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>AOP( 面向切面编程 )是一种思想，它的目的就是在不修改源代码的基础上，对原有功能进行增强。</p><p>SpringAOP是对AOP思想的一种实现，Spring底层同时支持jdk和cglib动态代理。</p><p>Spring会根据被代理的类是否有接口自动选择代理方式：</p><ul><li>如果有接口，就采用jdk动态代理(当然，也可以强制使用cglib)</li><li>没有接口就采用cglib的方式</li></ul><p><img data-src="/assets/aop%E6%A6%82%E5%BF%B5.png" alt="aop概念"></p><h2 id="AOP中的术语"><a href="#AOP中的术语" class="headerlink" title="AOP中的术语"></a>AOP中的术语</h2><p><code>目标对象</code></p><ul><li>被代理的对象</li></ul><p><code>连接点</code></p><ul><li>被代理的对象中的所有方法</li></ul><p><code>切入点</code></p><ul><li>被代理的对象中的一部分方法(要进行功能增强的部分)</li></ul><p><code>增强(通知)</code></p><ul><li>一个具体的功能(打日志 开启事务  提交事务    增强类  增强方法)</li></ul><p><code>织入</code></p><ul><li>将切入点代码和增强方法合在一起的动作</li></ul><p><code>代理对象</code></p><ul><li>经过织入之后产生对象</li></ul><p><code>切面</code></p><ul><li>切点 +  增强</li><li>切面是一种描述, 描述了这样一件事: 一个<strong>什么样的增强功能</strong>添加在了<strong>哪些切点的</strong> <strong>什么位置</strong>上</li><li>切面就是描述的切点方法和增强方法的执行顺序</li></ul><p><img data-src="/assets/aop%E6%9C%AF%E8%AF%AD%E8%AE%B2%E8%A7%A3.png" alt="aop术语讲解"></p><h1 id="SpringAOP的入门案例"><a href="#SpringAOP的入门案例" class="headerlink" title="SpringAOP的入门案例"></a>SpringAOP的入门案例</h1><p>需求：模拟打印日志功能——在AccountServiceImpl类中的方法上打印日志</p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p><code>找二配一</code>：</p><ul><li><strong>找目标对象、增强对象</strong></li><li><strong>配置切面——生成代理对象</strong></li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="新建工程导入相关坐标"><a href="#新建工程导入相关坐标" class="headerlink" title="新建工程导入相关坐标"></a>新建工程导入相关坐标</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>day03_03_spring_aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切点表达式解析坐标--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建service接口及实现类-目标对象"><a href="#创建service接口及实现类-目标对象" class="headerlink" title="创建service接口及实现类(目标对象)"></a>创建service接口及实现类(目标对象)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(Object o)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Object&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Object <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"save"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"findAll"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">findByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"findByName"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建增强类-Logger"><a href="#创建增强类-Logger" class="headerlink" title="创建增强类(Logger)"></a>创建增强类(Logger)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"即将执行方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置切面"><a href="#配置切面" class="headerlink" title="配置切面"></a>配置切面</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--目标对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.sun.service.impl.AccountServiceImpl"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--增强对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"logger"</span> <span class="attr">class</span>=<span class="string">"com.sun.log.Logger"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--aop配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置切点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pt"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.sun.service.impl.AccountServiceImpl.findAll())"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            配置切面</span></span><br><span class="line"><span class="comment">            切面：切点(目标对象) + 增强(增强对象)</span></span><br><span class="line"><span class="comment">            切面是一种描述，描述了这样一件事：</span></span><br><span class="line"><span class="comment">                一个【什么样的增强功能】 添加在了【哪些切点的】【什么位置】上</span></span><br><span class="line"><span class="comment">            ref="logger"    用于指定增强类</span></span><br><span class="line"><span class="comment">            method="beforeMethod" 用于指定增强类中的一个具体的增强的方法</span></span><br><span class="line"><span class="comment">            pointcut-ref    指定切点</span></span><br><span class="line"><span class="comment">            aop:before  增强方法再切点方法中的之前执行</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"logger"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"beforeMethod"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">@ContextConfiguration("classpath:applicationContext.xml")</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        accountService.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="/assets/aop%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C.png" alt="aop快速入门执行结果">    </p><h1 id="SpringAOP配置详解"><a href="#SpringAOP配置详解" class="headerlink" title="SpringAOP配置详解"></a>SpringAOP配置详解</h1><h2 id="切点表达式"><a href="#切点表达式" class="headerlink" title="切点表达式"></a>切点表达式</h2><p>切点表达式的作用:  定义一组规则, 用于在连接点中挑选切点</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">配置切点</span></span><br><span class="line"><span class="comment">    切点表达式：通过一组表达式规则，在众多连接点中去挑选切点</span></span><br><span class="line"><span class="comment">    *   占位符，一个或者多个位置</span></span><br><span class="line"><span class="comment">    ..  占位符，零个或者多个位置</span></span><br><span class="line"><span class="comment">    当前配置表示匹配impl包下所有类中的所有方法，并且方法的参数可以是任意个</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pt"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.sun.service.impl.*.*(..))"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四大通知"><a href="#四大通知" class="headerlink" title="四大通知"></a>四大通知</h2><p>四大通知描述的就是增强方法在切点方法的什么位置上执行</p><ul><li>前置通知(before) ：在切点运行之前执行</li><li>后置通知(after-returning)：在切点正常运行结束之后执行</li><li>异常通知(after-throwing)：在切点发生异常的时候执行</li><li>最终通知(after)：在切点的最终执行</li></ul><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//前置通知(before) ：在切点运行之前执行</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//切点执行</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//后置通知(after-returning)：在切点正常运行结束之后执行</span></span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">    <span class="comment">//异常通知(after-throwing)：在切点发生异常的时候执行</span></span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//最终通知(after)：在切点的最终执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="给Logger类添加方法"><a href="#给Logger类添加方法" class="headerlink" title="给Logger类添加方法"></a>给Logger类添加方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"即将执行方法..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterRetureMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"方法正常结束..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"方法出现异常..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"方法运行到最后..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加aop配置"><a href="#添加aop配置" class="headerlink" title="添加aop配置"></a>添加aop配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"logger"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"beforeMethod"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"afterReturnMethod"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"afterThrowMethod"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"afterMethod"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：当四大通知同时出现的时候, 它的执行顺序会受到配置顺序的影响</strong></p><h2 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h2><p>它是一种特殊的通知，他允许你以编码的形式实现四大通知</p><h3 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aroundMethod</span><span class="params">(ProceedingJoinPoint point)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"即将执行方法..."</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//切点执行</span></span><br><span class="line">            point.proceed();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"方法正常结束..."</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"方法出现异常..."</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"方法运行到最后..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"logger"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"aroundMethod"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="AOP工作原理"><a href="#AOP工作原理" class="headerlink" title="AOP工作原理"></a>AOP工作原理</h1><h2 id="开发阶段-开发者完成"><a href="#开发阶段-开发者完成" class="headerlink" title="开发阶段(开发者完成)"></a>开发阶段(开发者完成)</h2><p>开发共性功能，制作成增强</p><p>开发非共性功能，制作成切点</p><p>在配置文件中，声明切点与增强间的关系，即切面</p><h2 id="容器启动阶段-AOP完成"><a href="#容器启动阶段-AOP完成" class="headerlink" title="容器启动阶段(AOP完成)"></a>容器启动阶段(AOP完成)</h2><p>Spring读取配置文件中的切面信息，根据切面中的描述, 将<code>增强功能</code>增加在<code>目标对象的切点方法</code>上，动态创建代理对象, 最后将代理对象放入容器中 </p><blockquote><p>AOP应用：日志处理、事务、性能统计</p></blockquote><h1 id="SpringAOP注解版"><a href="#SpringAOP注解版" class="headerlink" title="SpringAOP注解版"></a>SpringAOP注解版</h1><h2 id="复制入门案例"><a href="#复制入门案例" class="headerlink" title="复制入门案例"></a>复制入门案例</h2><p>略…</p><h2 id="添加组件扫描"><a href="#添加组件扫描" class="headerlink" title="添加组件扫描"></a>添加组件扫描</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.sun"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用注解实例化对象-Logger和AccountServiceImpl"><a href="#使用注解实例化对象-Logger和AccountServiceImpl" class="headerlink" title="使用注解实例化对象(Logger和AccountServiceImpl)"></a>使用注解实例化对象(Logger和AccountServiceImpl)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure><h2 id="四大通知-1"><a href="#四大通知-1" class="headerlink" title="四大通知"></a>四大通知</h2><blockquote><p>将切面配置转移到增强类上</p></blockquote><h3 id="激活切面自动代理"><a href="#激活切面自动代理" class="headerlink" title="激活切面自动代理"></a>激活切面自动代理</h3><blockquote><p>spring配置</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--激活切面自动代理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="修改增强类"><a href="#修改增强类" class="headerlink" title="修改增强类"></a>修改增强类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span><span class="comment">//表明当前这是一个切面(切点 + 增强)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义切点表达式</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.sun.service.impl.*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pt</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//代表的是当前增强方法再pt()挑选出来的切点前面执行</span></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"pt()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"即将执行方法..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AfterReturning</span>(<span class="string">"pt()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturnMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"方法正常结束..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AfterThrowing</span>(<span class="string">"pt()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"方法出现异常..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"pt()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"方法运行到最后..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>略….</p><blockquote><p><strong>注意：四大通知同时出现的时候,注解版会有顺序问题, 不能用</strong></p></blockquote><h2 id="环绕通知-1"><a href="#环绕通知-1" class="headerlink" title="环绕通知"></a>环绕通知</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span><span class="comment">//表明当前这是一个切面(切点 + 增强)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义切点表达式</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.sun.service.impl.*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pt</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//环绕通知,两种写法</span></span><br><span class="line">    <span class="comment">//@Around("pt()")</span></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"execution(* com.sun.service.impl.*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aroundMethod</span><span class="params">(ProceedingJoinPoint point)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"即将执行方法..."</span>);</span><br><span class="line">            <span class="comment">//切点执行</span></span><br><span class="line">            point.proceed();</span><br><span class="line">            System.out.println(<span class="string">"方法正常结束..."</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"方法出现异常..."</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"方法运行到最后..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="纯注解版"><a href="#纯注解版" class="headerlink" title="纯注解版"></a>纯注解版</h2><p>现在xml配置中只剩两条配置，配置<strong>组件扫描</strong>和<strong>激活切面自动代理</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.sun"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--激活切面自动代理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="提取配置"><a href="#提取配置" class="headerlink" title="提取配置"></a>提取配置</h3><p>定义配置Java类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.sun"</span>)<span class="comment">//组件扫描</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span> <span class="comment">//激活切面自动代理，相当于xml中的&lt;aop:aspectj-autoproxy/&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ContextConfiguration</span>(<span class="title">classes</span> </span>= SpringConfig<span class="class">.<span class="keyword">class</span>) //读取<span class="title">Java</span>配置类</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        accountService.findAll();</span><br><span class="line">        System.out.println(<span class="string">"===================="</span>);</span><br><span class="line">        accountService.save(<span class="string">"1"</span>);</span><br><span class="line">        System.out.println(<span class="string">"===================="</span>);</span><br><span class="line">        accountService.findByName(<span class="string">"1"</span>);</span><br><span class="line">        System.out.println(<span class="string">"===================="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="SpringAOP实现事务管理"><a href="#SpringAOP实现事务管理" class="headerlink" title="SpringAOP实现事务管理"></a>SpringAOP实现事务管理</h1><blockquote><p>使用AOP实现转账事务的管理</p></blockquote><h2 id="dao接口及实现类"><a href="#dao接口及实现类" class="headerlink" title="dao接口及实现类"></a>dao接口及实现类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据名称查找一个账号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Account <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据名称修改账户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateByName</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> QueryRunner queryRunner;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TxManager txManager;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> queryRunner.query(txManager.getConnection(),<span class="string">"select * from account where name = ?"</span>,<span class="keyword">new</span> BeanHandler&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>),<span class="title">name</span>)</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateByName</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            queryRunner.update(txManager.getConnection(),<span class="string">"update account set balance = ? where name = ?"</span>,account.getBalance(),account.getName());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="service接口及实现类"><a href="#service接口及实现类" class="headerlink" title="service接口及实现类"></a>service接口及实现类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转账方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceAccount 转出用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetAccount 转入用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money 转账金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceAccount, String targetAccount, Float money)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceAccount, String targetAccount, Float money)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 执行sql</span></span><br><span class="line">            <span class="comment">//1.查询数据库获取两个用户</span></span><br><span class="line">            Account source = accountDao.findByName(sourceAccount);</span><br><span class="line">            Account target = accountDao.findByName(targetAccount);</span><br><span class="line">            <span class="comment">//2.在内存中做出转账操作</span></span><br><span class="line">            <span class="comment">//2.1 源账户-money</span></span><br><span class="line">            source.setBalance(source.getBalance() - money);</span><br><span class="line">            <span class="comment">//2.2 目标账户+money</span></span><br><span class="line">            target.setBalance(target.getBalance() + money);</span><br><span class="line">            <span class="comment">//3.设置回数据库</span></span><br><span class="line">            accountDao.updateByName(source);</span><br><span class="line">            <span class="comment">//模拟程序出现异常</span></span><br><span class="line">            <span class="comment">//int i = 1 / 0;</span></span><br><span class="line">            accountDao.updateByName(target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事务管理器"><a href="#事务管理器" class="headerlink" title="事务管理器"></a>事务管理器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 事务管理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxManager</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line">    <span class="comment">//本地集合</span></span><br><span class="line">    <span class="keyword">private</span> ThreadLocal&lt;Connection&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;Connection&gt;();</span><br><span class="line"><span class="comment">//环绕通知方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aroundMethod</span><span class="params">(ProceedingJoinPoint point)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            begin();</span><br><span class="line">            point.proceed();</span><br><span class="line">            commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            rollback();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取到Connection对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;...&#125;</span><br><span class="line">    <span class="comment">//开启事务方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">begin</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line">    <span class="comment">//提交事务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line">    <span class="comment">//回滚事务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line">    <span class="comment">//关闭事务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="XML配置版本"><a href="#XML配置版本" class="headerlink" title="XML配置版本"></a>XML配置版本</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--组件扫描——注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.sun"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"datasource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///spring"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"queryRunner"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbutils.QueryRunner"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"ds"</span> <span class="attr">ref</span>=<span class="string">"datasource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置aop--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pt"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.sun.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"txManager"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--四大通知版--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;aop:before method="begin" pointcut-ref="pt"/&gt;</span></span><br><span class="line"><span class="comment">            &lt;aop:after-returning method="commit" pointcut-ref="pt"/&gt;</span></span><br><span class="line"><span class="comment">            &lt;aop:after-throwing method="rollback" pointcut-ref="pt"/&gt;</span></span><br><span class="line"><span class="comment">            &lt;aop:after method="close" pointcut-ref="pt"/&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--环绕通知版--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"aroundMethod"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="注解配置版本"><a href="#注解配置版本" class="headerlink" title="注解配置版本"></a>注解配置版本</h2><blockquote><p>删除xml配置中的aop配置</p><p>激活切面自动代理</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--组件扫描——注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.sun"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--激活切面自动代理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"datasource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///spring"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"queryRunner"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbutils.QueryRunner"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"ds"</span> <span class="attr">ref</span>=<span class="string">"datasource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="在增强类中进行注解配置"><a href="#在增强类中进行注解配置" class="headerlink" title="在增强类中进行注解配置"></a>在增强类中进行注解配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">//声明为切面类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//切点配置</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.sun.service.impl.*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pt</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//环绕通知配置</span></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"pt()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aroundMethod</span><span class="params">(ProceedingJoinPoint point)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            begin();</span><br><span class="line">            point.proceed();</span><br><span class="line">            commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            rollback();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line">    <span class="comment">//本地集合</span></span><br><span class="line">    <span class="keyword">private</span> ThreadLocal&lt;Connection&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;Connection&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取到Connection对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开启事务方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">begin</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提交事务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//回滚事务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭事务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JdbcTemplate介绍"><a href="#JdbcTemplate介绍" class="headerlink" title="JdbcTemplate介绍"></a>JdbcTemplate介绍</h1><p>JdbcTemplate是Spring提供的持久层技术，用于操作数据库，它底层封装了JDBC技术。</p><p>核心类：</p><ul><li>JdbcTemplate  用于执行增删改查的SQL语句 (QueryRunner)</li><li>RowMapper  这是一个接口，主要作用是将数据库返回的记录封装进实体对象(ResultHandler)</li></ul><p>核心方法：</p><ul><li>update()  用来执行增、删、改语句</li><li>query()    用来执行查询语句</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个JdbcTemplate对象，用来执行增删改查, 需要给一个数据源</span></span><br><span class="line">JdbcTemplate  jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line"></span><br><span class="line"><span class="comment">//update方法，用于执行增删改语句</span></span><br><span class="line"><span class="comment">//第一个参数:sql语句   后面的参数:sql语句中的所需要的的值</span></span><br><span class="line">jdbcTemplate.update(<span class="string">"insert into account value(null,?,?)"</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//query或者queryForObject方法，用于执行查询语句</span></span><br><span class="line"><span class="comment">//第一个参数:sql语句   第二个参数:封装返回值   后面的参数:sql语句中的所需要的的值</span></span><br><span class="line"><span class="comment">//query 用于查询多条记录,返回一个集合   </span></span><br><span class="line">jdbcTemplate.query(<span class="string">"select * from account"</span>, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>))</span>; </span><br><span class="line"><span class="comment">//queryForObject用于查询一条记录,返回一个实体</span></span><br><span class="line">jdbcTemplate.queryForObject(<span class="string">"select * from account where aid = ?"</span>,  <span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>),  1)</span>;</span><br></pre></td></tr></table></figure><h2 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h2><blockquote><p>使用JdbcTemplate完成一个crud+转账的案例(常用注解版)</p></blockquote><h3 id="准备account表和实体"><a href="#准备account表和实体" class="headerlink" title="准备account表和实体"></a>准备account表和实体</h3><p>略。。。</p><h3 id="新建工程导入相关依赖"><a href="#新建工程导入相关依赖" class="headerlink" title="新建工程导入相关依赖"></a>新建工程导入相关依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>day03_06_jdbc_template<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring-context--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring-test--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring-jdbc--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--druid--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--aspectjweaver--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">projec</span></span></span><br></pre></td></tr></table></figure><h3 id="Dao接口及实现"><a href="#Dao接口及实现" class="headerlink" title="Dao接口及实现"></a>Dao接口及实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Account <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.queryForObject(<span class="string">"select * from account where name = ?"</span> ,<span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>),<span class="title">name</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">"update account set balance = ? where name = ?"</span>,account.getBalance(),account.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Service接口及实现"><a href="#Service接口及实现" class="headerlink" title="Service接口及实现"></a>Service接口及实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转账方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceAccountName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetAccountName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceAccountName, String targetAccountName, Float money)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceAccountName, String targetAccountName, Float money)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//查询两个账户信息</span></span><br><span class="line">        Account sourceAccount = accountDao.findByName(sourceAccountName);</span><br><span class="line">        Account targetAccount = accountDao.findByName(targetAccountName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//进行修改</span></span><br><span class="line">        sourceAccount.setBalance(sourceAccount.getBalance() - money);</span><br><span class="line">        targetAccount.setBalance(targetAccount.getBalance() + money);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置回数据库</span></span><br><span class="line">        accountDao.update(sourceAccount);</span><br><span class="line">        accountDao.update(targetAccount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="XML配置"><a href="#XML配置" class="headerlink" title="XML配置"></a>XML配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.sun"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///spring"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--jdbcTemplate对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="测试-3"><a href="#测试-3" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        accountService.transfer(<span class="string">"A01"</span>,<span class="string">"A02"</span>,<span class="number">10f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Spring中的事务管理"><a href="#Spring中的事务管理" class="headerlink" title="Spring中的事务管理"></a>Spring中的事务管理</h1><h2 id="事务管理方式"><a href="#事务管理方式" class="headerlink" title="事务管理方式"></a>事务管理方式</h2><p>Spring支持两种事务管理方式：编程式事务和声明式事务</p><ul><li><p>编程式事务就是将业务代码和事务代码放在一起书写，它的耦合性太高，开发中不使用</p></li><li><p>声明式事务其实就是将事务代码和业务代码隔离开发，然后通过一段配置让他们组装运行，最后达到事务控制的目的</p></li></ul><p>声明式事务就是通过AOP原理实现的</p><h2 id="Spring事务管理相关的API"><a href="#Spring事务管理相关的API" class="headerlink" title="Spring事务管理相关的API"></a>Spring事务管理相关的API</h2><h3 id="PlatformTransactionManager"><a href="#PlatformTransactionManager" class="headerlink" title="PlatformTransactionManager"></a>PlatformTransactionManager</h3><p><img data-src="/assets/PlatformTransactionManager.png" alt="PlatformTransactionManager"></p><p>PlatformTransactionManager这是Spring进行事务管理的一个根接口，我们要使用它的实现类做事务管理</p><p><code>我们需要知道的是:mybatis和jdbcTemplate都可以使用它的一个子类(DataSourceTransactionManager)做事务管理</code></p><h3 id="TransactionDefinition"><a href="#TransactionDefinition" class="headerlink" title="TransactionDefinition"></a>TransactionDefinition</h3><p>TransactionDefinition这个API是用来做事务定义的</p><p><img data-src="/assets/TransactionDefinition.png" alt="TransactionDefinition"></p><h4 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h4><p><img data-src="/assets/%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB.png" alt="隔离级别"></p><h4 id="传播行为"><a href="#传播行为" class="headerlink" title="传播行为"></a>传播行为</h4><p>事务传播行为指的就是当一个业务方法【被】另一个业务方法调用时，应该如何进行事务控制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a()&#123;</span><br><span class="line">    b();<span class="comment">// b必须有事务才可以运行</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b()&#123;&#125;</span><br></pre></td></tr></table></figure><p><img data-src="/assets/%E4%BC%A0%E6%92%AD%E8%A1%8C%E4%B8%BA.png" alt="传播行为"></p><h4 id="只读性"><a href="#只读性" class="headerlink" title="只读性"></a>只读性</h4><p>只读事务(增 删  改不能使用,只能查询使用)</p><p>换句话说,只读事务只能用于查询方法</p><h4 id="超时时长"><a href="#超时时长" class="headerlink" title="超时时长"></a>超时时长</h4><p>事务超时时间, 此属性需要底层数据库的支持</p><p>它的默认值是-1, 代表不限制</p><h3 id="TransactionStatus"><a href="#TransactionStatus" class="headerlink" title="TransactionStatus"></a>TransactionStatus</h3><p>TransactionStatus代表的是事务的当前状态</p><h3 id="三个API之间的关系"><a href="#三个API之间的关系" class="headerlink" title="三个API之间的关系"></a>三个API之间的关系</h3><p>PlatformTransactionManager通过读取TransactionDefinition中定义事务信息参数,来管理事务,</p><p>管理之后会产生一些列的TransactionStatus</p><h1 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><strong>目标对象</strong>:  业务层的所有对象<code>自己开发</code></p><p><strong>增强对象</strong>:  事务管理器 (DataSourceTransactionManager) </p><ul><li><code>需要我们给它传递一批参数(事务隔离级别  传播行为  超时时长  只读)</code></li></ul><p><strong>配置切面</strong>:  配置的是切点和增强的关系   ==自己配置==</p><h2 id="xml版本"><a href="#xml版本" class="headerlink" title="xml版本"></a>xml版本</h2><h3 id="复制JdbcTemplate工程"><a href="#复制JdbcTemplate工程" class="headerlink" title="复制JdbcTemplate工程"></a>复制JdbcTemplate工程</h3><p>略…</p><h3 id="目标对象-1"><a href="#目标对象-1" class="headerlink" title="目标对象"></a>目标对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure><h3 id="配置事务管理器的参数和切面"><a href="#配置事务管理器的参数和切面" class="headerlink" title="配置事务管理器的参数和切面"></a>配置事务管理器的参数和切面</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.sun"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///spring"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--jdbcTemplate对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置事务管理器(增强)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--事务管理器需要的参数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pt"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.sun.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切面--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            aop:advisor  这是一个特殊的配置，只能用在Spring声明式事务配置上</span></span><br><span class="line"><span class="comment">            advice-ref="txAdvice"   用于指定增强-带有参数的事务管理器</span></span><br><span class="line"><span class="comment">            pointcut-ref = "pt" 用于指定切点</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pt"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="事务管理器参数的配置"><a href="#事务管理器参数的配置" class="headerlink" title="事务管理器参数的配置"></a>事务管理器参数的配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--事务管理器需要的参数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            name作用是在所有的切点中进行二次匹配，通过规则挑选一部分，这个匹配从上往下执行，一旦匹配到一个，就不再匹配下面的了</span></span><br><span class="line"><span class="comment">            isolation="DEFAULT" 设置隔离级别</span></span><br><span class="line"><span class="comment">            timeout="-1"    设置超时时间</span></span><br><span class="line"><span class="comment">            read-only="false"   设置超时时间</span></span><br><span class="line"><span class="comment">            propagation="REQUIRED" 这是传播行为</span></span><br><span class="line"><span class="comment">            no-rollback-for=""  对于哪个异常不会滚</span></span><br><span class="line"><span class="comment">            rollback-for=""     只针对什么异常回滚</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span>    /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="注解版"><a href="#注解版" class="headerlink" title="注解版"></a>注解版</h2><h3 id="复制xml版本工程"><a href="#复制xml版本工程" class="headerlink" title="复制xml版本工程"></a>复制xml版本工程</h3><p>略…</p><h3 id="删除aop-config和tx-advice配置"><a href="#删除aop-config和tx-advice配置" class="headerlink" title="删除aop:config和tx:advice配置"></a>删除aop:config和tx:advice配置</h3><p>略…</p><h3 id="在xml配置中开启事务注解驱动"><a href="#在xml配置中开启事务注解驱动" class="headerlink" title="在xml配置中开启事务注解驱动"></a>在xml配置中开启事务注解驱动</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启注解驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在目标对象中添加事务管理注解"><a href="#在目标对象中添加事务管理注解" class="headerlink" title="在目标对象中添加事务管理注解"></a>在目标对象中添加事务管理注解</h3><p>涉及注解：</p><ul><li><code>@Transactional</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span> <span class="comment">//该注解可以标在类上，也可以标在方法上，当前表示类中的方法具有事务管理的功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line">    <span class="comment">//该注解标在方法上的优先级会高于标在类上</span></span><br><span class="line">    <span class="meta">@Transactional</span>(</span><br><span class="line">            readOnly = <span class="keyword">false</span>,</span><br><span class="line">            isolation = Isolation.DEFAULT,</span><br><span class="line">            propagation = Propagation.REQUIRED,</span><br><span class="line">            timeout = -<span class="number">1</span></span><br><span class="line">    )</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String sourceAccountName, String targetAccountName, Float money)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//查询两个账户信息</span></span><br><span class="line">        Account sourceAccount = accountDao.findByName(sourceAccountName);</span><br><span class="line">        Account targetAccount = accountDao.findByName(targetAccountName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//进行修改</span></span><br><span class="line">        sourceAccount.setBalance(sourceAccount.getBalance() - money);</span><br><span class="line">        targetAccount.setBalance(targetAccount.getBalance() + money);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置回数据库</span></span><br><span class="line">        accountDao.update(sourceAccount);</span><br><span class="line">        <span class="comment">//int i = 1 / 0;</span></span><br><span class="line">        accountDao.update(targetAccount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="纯注解版-1"><a href="#纯注解版-1" class="headerlink" title="纯注解版"></a>纯注解版</h2><p>转移xml配置到配置类，删除xml所有内容</p><p>注解：<code>@EnableTransactionManagement</code>   相当于<code>&lt;tx:annotation-driven/&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.sun"</span>)   <span class="comment">//&lt;context:component-scan base-package="com.sun"/&gt;</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span>    <span class="comment">//相当于&lt;tx:annotation-driven/&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">"jdbc:mysql:///spring"</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">"root"</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">jdbcTemplate</span> <span class="params">(DataSource dataSource)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">transactionManager</span><span class="params">(DataSource dataSource)</span></span>&#123;</span><br><span class="line">        DataSourceTransactionManager transactionManager = <span class="keyword">new</span> DataSourceTransactionManager();</span><br><span class="line">        transactionManager.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> transactionManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用动态代理优化转账代码&quot;&gt;&lt;a href=&quot;#使用动态代理优化转账代码&quot; class=&quot;headerlink&quot; title=&quot;使用动态代理优化转账代码&quot;&gt;&lt;/a&gt;使用动态代理优化转账代码&lt;/h1&gt;&lt;h2 id=&quot;JDK动态代理&quot;&gt;&lt;a href=&quot;#JDK动态代理&quot; class=&quot;headerlink&quot; title=&quot;JDK动态代理&quot;&gt;&lt;/a&gt;JDK动态代理&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;目标对象   + 代理逻辑  = 代理对象&lt;/p&gt;
&lt;p&gt;目标对象:    被代理的对象–AccountServiceImpl&lt;/p&gt;
&lt;p&gt;代理逻辑:    要增强的功能–事务管理&lt;/p&gt;
&lt;p&gt;代理对象:     一个具有事务管理功能的Service &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="框架" scheme="http://sunmoon.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Spring" scheme="http://sunmoon.com/categories/%E6%A1%86%E6%9E%B6/Spring/"/>
    
    
      <category term="动态代理" scheme="http://sunmoon.com/tags/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
      <category term="AOP介绍" scheme="http://sunmoon.com/tags/AOP%E4%BB%8B%E7%BB%8D/"/>
    
      <category term="AOP注解和XML开发" scheme="http://sunmoon.com/tags/AOP%E6%B3%A8%E8%A7%A3%E5%92%8CXML%E5%BC%80%E5%8F%91/"/>
    
      <category term="JdbcTemplate" scheme="http://sunmoon.com/tags/JdbcTemplate/"/>
    
      <category term="Spring中的事务管理" scheme="http://sunmoon.com/tags/Spring%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/"/>
    
      <category term="声明式事务" scheme="http://sunmoon.com/tags/%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
</feed>
