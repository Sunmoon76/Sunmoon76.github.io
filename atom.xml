<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>清风的博客</title>
  
  <subtitle>山水有相逢，山不动，水不停</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://sunmoon.com/"/>
  <updated>2020-07-30T13:17:03.446Z</updated>
  <id>http://sunmoon.com/</id>
  
  <author>
    <name>Sunmoon</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Collections、Set、Map</title>
    <link href="http://sunmoon.com/2020/07/30/Collections%E3%80%81Set%E3%80%81Map/"/>
    <id>http://sunmoon.com/2020/07/30/Collections%E3%80%81Set%E3%80%81Map/</id>
    <published>2020-07-30T11:50:45.000Z</published>
    <updated>2020-07-30T13:17:03.446Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Collections类"><a href="#一、Collections类" class="headerlink" title="一、Collections类"></a>一、Collections类</h2><p>Collections是操作集合的工具类</p><h3 id="1-1-Collections常用方法"><a href="#1-1-Collections常用方法" class="headerlink" title="1.1 Collections常用方法"></a>1.1 Collections常用方法</h3><ul><li><code>static void shuffle(List&lt;?&gt; list)</code>：打乱集合的顺序</li><li><code>static void sort(List list)</code>：对集合的内容进行排序【自然排序】</li><li><code>static void sort(List list, Comparator c)</code>：对集合的内容进行排序，第一个参数是集合，第二个参数是比较器</li><li><code>static &lt;T&gt; boolean addAll(Collection&lt;? super T&gt; c, T... elements)</code> ：向集合中批量添加数据。</li></ul><a id="more"></a><h4 id="1-1-1-shuffle-方法"><a href="#1-1-1-shuffle-方法" class="headerlink" title="1.1.1 shuffle()方法"></a>1.1.1 shuffle()方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Collections</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"aaa"</span>);</span><br><span class="line">        list.add(<span class="string">"bbb"</span>);</span><br><span class="line">        list.add(<span class="string">"ccc"</span>);</span><br><span class="line">        list.add(<span class="string">"ddd"</span>);</span><br><span class="line">        list.add(<span class="string">"eee"</span>);</span><br><span class="line">        Collections.shuffle(list);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-1-2-addAll-方法"><a href="#1-1-2-addAll-方法" class="headerlink" title="1.1.2 addAll()方法"></a>1.1.2 addAll()方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04Collections</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function">        List&lt;String&gt; list </span>= <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Collections.addAll(list,<span class="string">"aa"</span>,<span class="string">"bb"</span>,<span class="string">"cc"</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-1-3-自然排序sort-方法"><a href="#1-1-3-自然排序sort-方法" class="headerlink" title="1.1.3 自然排序sort()方法"></a>1.1.3 自然排序sort()方法</h4><p>如果想要使用上面的sort方法进行自然排序，那么必须保证事物本身就具备比较的功能。</p><ul><li>使用sort方法进行自然排序，那么必须保证事物本身就具备比较的功能。例如：String、Integer</li></ul><p>如果想要对自定义的类型进行排序，必须在类上实现了Comparable接口，那么就表示该事物具备比较的功能，那么才可以使用自然排序的方式进行排序。</p><p><strong>测试类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Collections</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合</span></span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">200</span>);</span><br><span class="line">        list.add(<span class="number">100</span>);</span><br><span class="line">        list.add(<span class="number">300</span>);</span><br><span class="line">        <span class="comment">//排序</span></span><br><span class="line">        Collections.sort(list);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"======================="</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; strList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        strList.add(<span class="string">"bb"</span>);</span><br><span class="line">        strList.add(<span class="string">"aa"</span>);</span><br><span class="line">        strList.add(<span class="string">"cc"</span>);</span><br><span class="line">        Collections.sort(strList);</span><br><span class="line">        System.out.println(strList);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"======================="</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自定义类型进行自然排序</span></span><br><span class="line">        List&lt;Person&gt; personList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">"张三"</span>, <span class="number">22</span>));</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">"李四"</span>, <span class="number">18</span>));</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="string">"王五"</span>, <span class="number">21</span>));</span><br><span class="line">        Collections.sort(personList);</span><br><span class="line">        System.out.println(personList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>自定义类型Person：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Person</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在使用自然排序时，内部会自动调用compareTo方法比较两个对象谁大谁小</span></span><br><span class="line"><span class="comment">     * 如果方法的返回时正数，表示调用者对象大于参数对象</span></span><br><span class="line"><span class="comment">     * 如果方法返回值是0，相等</span></span><br><span class="line"><span class="comment">     * 如果方法的返回值是负数，表示调用者小于参数对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 我们要做的是在compareTo中定义排序规则</span></span><br><span class="line"><span class="comment">     * 公式： 升序就是我(调用者)减他(参数)</span></span><br><span class="line"><span class="comment">     *      想要根据对象的什么属性进行排序，就让什么属性相减。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Person o)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//根据年龄升序排序</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age-o.age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//构造方法、get/set方法，略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：要使用自然排序的集合，里面的泛型必须要实现Comparable接口。</strong></p><blockquote><p>小结</p><ol><li>自然排序指的是事物本身就具有比较的功能，那么我们就可以使用sort方法直接进行排序。</li><li>自定义类必须实现Comparable接口才具备了比较的功能，才可以使用自然排序</li><li>实现Comparable后要重写compareTo方法，公式：升序就是我减他</li></ol></blockquote><h3 id="1-2-Comparator比较器排序"><a href="#1-2-Comparator比较器排序" class="headerlink" title="1.2 Comparator比较器排序"></a>1.2 Comparator比较器排序</h3><p>假如某个类没有实现Comparable接口，就表示该事物不具备比较的功能，那么我们就不能直接对他进行排序了。</p><p>在这种情况下，我们想要进行排序，可以找一个法官来帮助他们进行比较，这个法官就可以叫做<strong>比较器</strong>。</p><p>上面提到的sort方法有一个重载，<code>static void sort(List list, Comparator c)</code>，这个方法就是传入比较器对象进行排序。</p><ul><li>第一个参数为集合</li><li>第二个参数为比较器</li></ul><p>其中第二个参数<code>Comparator</code>是一个接口，该接口表示比较器。如果参数是接口，我们需要传递实现类对象，这个实现类需要我们自己创建。</p><p>对Studente类型进行排序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03Collections</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="string">"拉拉"</span>,<span class="number">20</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="string">"哈哈"</span>,<span class="number">30</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="string">"呵呵"</span>,<span class="number">18</span>));</span><br><span class="line">        Collections.sort(list, <span class="keyword">new</span> Rule());</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义比较器实现类(也可以使用匿名内部类)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Comparator这个接口表示比较器，当我们使用Rule类实现类这个接口，Rule表示的也就是比较器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rule</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * compare会在比较器排序时由系统自动调用，compare方法的作用是比较两个对象谁大谁小</span></span><br><span class="line"><span class="comment">     * 如果方法的返回值是正数，表示第一个参数对象大于第二个参数对象(o1&gt;o2)</span></span><br><span class="line"><span class="comment">     * 如果方法的返回值是0,表示两者相等(o1=o2)</span></span><br><span class="line"><span class="comment">     * 如果方法的返回值是负数，表示第一个参数对象小于第二个参数对象(o1&lt;o2)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 公式：</span></span><br><span class="line"><span class="comment">     *  升序：就是一减二</span></span><br><span class="line"><span class="comment">     *  想要根据什么属性排序，就让什么属性相减。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student o1, Student o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o1.getAge()-o2.getAge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>sort()方法小结：</p><ul><li>自然排序：如果某个类实现类Comparable接口，那么表示该事物具备了比较的功能，那么可以直接使用sort方法进行排序，这种排序方式叫做自然排序。</li><li><strong>比较器排序【主要】</strong>：我们也可以找一个法官来帮这些对象进行排序，这种排序的方式是比较器排序。如果要进行比较器排序，我们要定义一个类，实现Comparator接口，然后重写compare方法，在调用Collections的sort方法，传递集合和比较器即可。</li></ul></blockquote><h3 id="1-3-可变参数"><a href="#1-3-可变参数" class="headerlink" title="1.3 可变参数"></a>1.3 可变参数</h3><p>在JDK5的时候，多了一个新特性，叫做可变参数。可变参数的方法可以在参数位置传递任意个数据。</p><p><code>Collections类中的addAll()方法第二个参数就是可变参数</code></p><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数类型... 参数名)&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在调用带有可变参数的方法时，我们可以向可变参数位置传递任意个数据。</li><li>可变参数的本质时数组，所以我们直接将可变参数当成数组使用即可。</li><li>因为可变参数本质是数组，所以在调用可变参数的方法时，也可以传递数组。</li></ul><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01ChangeParams</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sum  = getSum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span>... nums)</span></span>&#123;<span class="comment">//nums本质是数组</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">            sum += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意</p><ol><li>一个方法中最多只能有一个可变参数</li><li>可变参数只能放到方法参数的最后一个位置</li></ol></blockquote><h2 id="二、Set接口"><a href="#二、Set接口" class="headerlink" title="二、Set接口"></a>二、Set接口</h2><p>Set是Collection下面的另一个子接口</p><p>Set接口下的特点：</p><ul><li>无序（存取顺序不能保证一致）</li><li>无索引（不可以根据索引操作元素）</li><li>不可重复（存储元素不能重复）</li></ul><p>Set是一个接口，如果要用，需要使用实现类，Set接口下面最常用的实现类是HashSet</p><ul><li>HashSet满足Set接口的所有的特点</li></ul><h3 id="2-1-Set接口的遍历"><a href="#2-1-Set接口的遍历" class="headerlink" title="2.1 Set接口的遍历"></a>2.1 Set接口的遍历</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Set集合的遍历。</span></span><br><span class="line"><span class="comment">    因为Set集合是没有索引的，所以不能使用普通for遍历，可以使用迭代器或增强for遍历，强烈推荐增强for</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Set</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        set.add(<span class="string">"hello"</span>);</span><br><span class="line">        set.add(<span class="string">"world"</span>);</span><br><span class="line">        set.add(<span class="string">"java"</span>);</span><br><span class="line">        set.add(<span class="string">"php"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String s : set) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-Hash集合存储数据的结构——哈希表"><a href="#2-2-Hash集合存储数据的结构——哈希表" class="headerlink" title="2.2 Hash集合存储数据的结构——哈希表"></a>2.2 Hash集合存储数据的结构——哈希表</h3><p>哈希表是归并后的结果。</p><h4 id="2-2-1-哈希值概念"><a href="#2-2-1-哈希值概念" class="headerlink" title="2.2.1 哈希值概念"></a>2.2.1 哈希值概念</h4><p>哈希值:就是一个int数字，我们可以把哈希值堪称对象的标识(特征码)</p><p>在Object中，有一个方法hashCode，可以获取到哈希值(hashCode)。</p><ul><li><code>int hashCode()</code>:获取对象的哈希值。</li></ul><blockquote><p>Object中的hashCode方法，是根据对象的地址值计算的哈希值</p></blockquote><p>对象的哈希值根据地址值计算一般来说意义不大，我们更多的是希望哈希值是根据属性计算的，如果两个对象的属性完全相同，哈希值也应该相同。</p><p>如果想要自己定义哈希值的计算规则，需要重写hashCode方法。</p><p>哈希值是对象的一个标识，但并不是唯一的标识，对象的哈希值允许重复。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01HashCode</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Person p = <span class="keyword">new</span> Person(<span class="string">"张三丰"</span>,<span class="number">108</span>);</span><br><span class="line">        <span class="comment">//获取哈希值并输出</span></span><br><span class="line">        System.out.println(p.hashCode());</span><br><span class="line"></span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person(<span class="string">"张三丰"</span>,<span class="number">108</span>);</span><br><span class="line">        System.out.println(p2.hashCode());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = name != <span class="keyword">null</span> ? name.hashCode() : <span class="number">0</span>;</span><br><span class="line">        result = <span class="number">31</span> * result + age;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写hashCode方法，自己定义哈希值的计算规则</span></span><br><span class="line"><span class="comment">     * 根据姓名和年龄计算哈希值，如果对象的姓名和年龄相同，得到的哈希值也应该相同</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public int hashCode() &#123;</span></span><br><span class="line"><span class="comment">        //获取姓名的哈希值加上年龄，结果就是该对象的哈希值</span></span><br><span class="line"><span class="comment">        return name.hashCode() * 31 + age;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * p1 = new Person("张三",13);  3 + 13 -&gt; 16</span></span><br><span class="line"><span class="comment">     * p2 = new Person("李四",12);  4 + 12 -&gt; 16</span></span><br><span class="line"><span class="comment">     * "张三"：3</span></span><br><span class="line"><span class="comment">     * "李四"：4</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//get...set...构造方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-2-哈希表"><a href="#2-2-2-哈希表" class="headerlink" title="2.2.2 哈希表"></a>2.2.2 哈希表</h4><p>哈希表：哈希表是一个数组，数组中每一个元素都是一个链表</p><blockquote><p>扩展：</p><p>桶：数组中每一个元素(链表)都是一个桶</p><p>哈希冲突：如果两个对象出现在了同一个桶内，就表示发生了哈希冲突</p><p>加载因子：是一个百分比，默认是0.75，如果哈希表中桶的使用比例超过加载因子，就会对哈希表进行再哈希。</p><p>再哈希：对哈希表扩容，让分类更广。</p></blockquote><p><strong>哈希表图解：</strong></p><p><img data-src="/image/hash_img.png" alt="hash_img"></p><h3 id="2-3-HashSet保证数据唯一性"><a href="#2-3-HashSet保证数据唯一性" class="headerlink" title="2.3 HashSet保证数据唯一性"></a>2.3 HashSet保证数据唯一性</h3><p>图解：</p><p><img data-src="/image/HashSet%E4%BF%9D%E8%AF%81%E6%95%B0%E6%8D%AE%E5%94%AF%E4%B8%80%E6%80%A7.png" alt="HashSet保证数据唯一性"></p><p>HashSet判断唯一性的过程</p><ol><li>先比较对象的哈希值。<ul><li>如果哈希值不同，肯定是不同的对象。 </li><li>如果哈希值相同，不一定是同一个对象。</li></ul></li><li>如果哈希值相同，还会调用equals进行比较。<ul><li>如果equals的结果是true，表示对象相同。</li><li>如果equals的结果是false，表示对象不同</li></ul></li></ol><h4 id="2-3-1-练习"><a href="#2-3-1-练习" class="headerlink" title="2.3.1 练习"></a>2.3.1 练习</h4><p>要求：使用HashSet保存学生对象，然后并遍历。</p><ul><li>学生对象要保证唯一性（如果学生的姓名和年龄相同，就看成是同一个学生）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01HashSet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建HashSet集合</span></span><br><span class="line">        Set&lt;Student&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        set.add(<span class="keyword">new</span> Student(<span class="string">"柳岩"</span>, <span class="number">36</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> Student(<span class="string">"李小璐"</span>, <span class="number">34</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> Student(<span class="string">"马蓉"</span>, <span class="number">32</span>));</span><br><span class="line"></span><br><span class="line">        set.add(<span class="keyword">new</span> Student(<span class="string">"柳岩"</span>, <span class="number">36</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合，输出集合中的每一个学生对象</span></span><br><span class="line">        <span class="keyword">for</span> (Student stu : set) &#123;</span><br><span class="line">            System.out.println(stu);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        Student student = (Student) o;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (age != student.age) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> name != <span class="keyword">null</span> ? name.equals(student.name) : student.name == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = name != <span class="keyword">null</span> ? name.hashCode() : <span class="number">0</span>;</span><br><span class="line">        result = <span class="number">31</span> * result + age;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    get..set..构造方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结论：如果使用HashSet存储自定义对象并保证唯一性（对象的属性相同就看成是同一个对象），需要同时重写hashCode和equals，缺一不可。</p></blockquote><h3 id="2-4-LinkedHashSet"><a href="#2-4-LinkedHashSet" class="headerlink" title="2.4 LinkedHashSet"></a>2.4 LinkedHashSet</h3><p>LinkedHashSet也是Set接口下的实现类。</p><p>LinkedHashSet内部除了有一个哈希表之外，还有一个链表。</p><ul><li>链表的作用是保证有序。LinkedHashSet是有序的</li></ul><blockquote><p>小贴士：Set接口是无序的，但是他不能保证所有的实现类都无序。</p></blockquote><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01LinkedHashSet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建LinkedHashSet集合</span></span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">        set.add(<span class="string">"张三丰"</span>);</span><br><span class="line">        set.add(<span class="string">"张无忌"</span>);</span><br><span class="line">        set.add(<span class="string">"灭绝师太"</span>);</span><br><span class="line">        set.add(<span class="string">"金花婆婆"</span>);</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        System.out.println(set);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-TreeSet集合"><a href="#2-5-TreeSet集合" class="headerlink" title="2.5 TreeSet集合"></a>2.5 TreeSet集合</h3><p>TreeSet也是Set接口下的实现类。</p><p>TreeSet内部是一个二叉树，TreeSet可以自动对集合中的内容进行排序。</p><p>构造方法：</p><ul><li><code>TreeSet()</code>：空参的构造方法创建的TreeSet集合会使用自然排序的方式对集合中的元素进行排序</li><li><code>TreeSet(Comparator comparator)</code>：参数需要传递一个比较器，会使用比较器的方式对集合中的内容进行排序</li></ul><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02TreeSet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建TreeSet集合，使用自然排序的方式进行排序</span></span><br><span class="line">        <span class="comment">// Set&lt;Integer&gt; set = new TreeSet&lt;&gt;();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个TreeSet集合，传递比较器。使用比较器的方式进行排序&#123;使用降序排序&#125;</span></span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> TreeSet&lt;&gt;(<span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o2-o1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        set.add(<span class="number">100</span>);</span><br><span class="line">        set.add(<span class="number">200</span>);</span><br><span class="line">        set.add(<span class="number">400</span>);</span><br><span class="line">        set.add(<span class="number">300</span>);</span><br><span class="line">        System.out.println(set);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、Map集合"><a href="#三、Map集合" class="headerlink" title="三、Map集合"></a>三、Map集合</h2><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h3><p>Map集合是一个双列集合。双列集合中的每个元素都是由两部分组成的。一部分是<code>键(Key)</code>，另一部分是<code>值(Value)</code>，<strong>一个键对应(映射)一个值</strong>。可以根据<strong>键找值</strong>。</p><p>在双列集合中，键不允许重复，值允许重复。</p><p>Map其实是一个接口，所有的双列集合都实现了这个接口，所以我们就把Map集合称为双列集合。</p><p>Map接口下做常用的实现类是HashMap。</p><h3 id="3-2-Map的常用子类"><a href="#3-2-Map的常用子类" class="headerlink" title="3.2 Map的常用子类"></a>3.2 Map的常用子类</h3><ul><li><p><code>HashMap&lt;K,V&gt;</code>：存储数据采用的哈希表结构，元素的存取顺序不能保证一致。由于要保证键的唯一、不重复，需要重写键的hashCode()方法、equals()方法。</p></li><li><p><code>LinkedHashMap&lt;K,V&gt;</code>：HashMap下有个子类LinkedHashMap，存储数据采用的哈希表结构+链表结构。通过链表结构可以保证元素的存取顺序一致；通过哈希表结构可以保证的键的唯一、不重复，需要重写键的hashCode()方法、equals()方法。</p></li><li><p><code>TreeMap&lt;K,V&gt;</code>：TreeMap集合和Map相比没有特有的功能，底层的数据结构是红黑树；可以对元素的键进行排序，排序方式有两种:自然排序和比较器排序</p></li></ul><h3 id="3-3-Map的常用方法"><a href="#3-3-Map的常用方法" class="headerlink" title="3.3 Map的常用方法"></a>3.3 Map的常用方法</h3><p>Map&lt;K,V&gt;有两个泛型，K表示键的数据类型，V表示值得数据类型</p><ul><li><code>V put(K key, V value)</code>：向Map集合中添加键值对元素，如果键已经存在，会使用新的值覆盖原有得值</li><li><code>V get(Object key)</code>：根据键获取对应得值并返回</li><li><code>V remove(Object key)</code>：根据键删除整个键值对，并返回被删除得值</li><li><code>boolean containsKey(Object key)</code>：判断Map集合中是否包含指定得键</li></ul><p>演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo01Map</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Map集合</span></span><br><span class="line">        Map&lt;Integer,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="number">100</span>,<span class="string">"张三"</span>);</span><br><span class="line">        map.put(<span class="number">200</span>,<span class="string">"李四"</span>);</span><br><span class="line">        map.put(<span class="number">300</span>,<span class="string">"王五"</span>);</span><br><span class="line">        <span class="comment">// map.put(200,"拉拉");</span></span><br><span class="line">        System.out.println(map);</span><br><span class="line">        System.out.println(<span class="string">"==========================="</span>);</span><br><span class="line">        String s1 = map.get(<span class="number">100</span>);</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        String s = map.get(<span class="number">10000</span>);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        System.out.println(<span class="string">"==========================="</span>);</span><br><span class="line">        String s2 = map.remove(<span class="number">300</span>);</span><br><span class="line">        System.out.println(s2);</span><br><span class="line">        System.out.println(<span class="string">"==========================="</span>);</span><br><span class="line">        <span class="keyword">boolean</span> flag = map.containsKey(<span class="number">200</span>);</span><br><span class="line">        System.out.println(flag);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-Map的遍历"><a href="#3-4-Map的遍历" class="headerlink" title="3.4 Map的遍历"></a>3.4 Map的遍历</h3><p>Map集合不能直接通过迭代器或者增强for遍历。</p><p>想要遍历Map集合有两种方法，<code>keySet()</code>和<code>entrySet()</code>。</p><h4 id="3-4-1-keySet-推荐"><a href="#3-4-1-keySet-推荐" class="headerlink" title="3.4.1 keySet[推荐]"></a>3.4.1 keySet[推荐]</h4><p><strong>原理：</strong>使用map集合调用keySet方法，拿到Map集合中的每一键，存储到一个Set集合中并返回，然后再遍历Set集合，拿到Map集合的每一个Key，使用Map集合的get方法通过键找值得方式，遍历出Map集合中的每一个元素。</p><ul><li><code>Set&lt;K&gt; keySet()</code>:可以获取到所有的键，并将所有的键放入到Set集合中返回</li></ul><p><strong>使用步骤：</strong></p><ol><li>调用Map集合的keySet方法，获取所有的键，放入到Set集合中返回</li><li>遍历Set集合，拿到Set集合中每一个键</li><li>根据遍历到的键获取对应的值</li></ol><p><strong>演示：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02KeySet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="number">1</span>,<span class="number">10</span>);</span><br><span class="line">        map.put(<span class="number">2</span>,<span class="number">20</span>);</span><br><span class="line">        map.put(<span class="number">3</span>,<span class="number">30</span>);</span><br><span class="line">        map.put(<span class="number">4</span>,<span class="number">40</span>);</span><br><span class="line">        map.put(<span class="number">5</span>,<span class="number">50</span>);</span><br><span class="line">        <span class="comment">//调用Map集合的keySet方法，获取所有的键，放入到Set集合中返回</span></span><br><span class="line">        Set&lt;Integer&gt; keys = map.keySet();</span><br><span class="line">        <span class="comment">//遍历Set集合，拿到Set集合中每一个键</span></span><br><span class="line">        <span class="keyword">for</span> (Integer key : keys) &#123;</span><br><span class="line">            <span class="comment">//根据遍历到的键获取对应的值</span></span><br><span class="line">            Integer value = map.get(key);</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4-2-entrySet"><a href="#3-4-2-entrySet" class="headerlink" title="3.4.2 entrySet"></a>3.4.2 entrySet</h4><p><strong>原理：</strong>Map集合中有很多键值对，每一个键值对其实就是一个Entry对象。entrySet()方法就是先获取到Map集合中所有的Entry对象，把所有的对象放到Set集合中，然后再遍历Set集合，拿到每一个Entry对象，最后通过Entry中获取键和值的方法<code>getKey()</code>和<code>getValue</code>，获取Map集合中存储的键值对。</p><blockquote><p>提示:Entry是Map中的内部接口，在使用时，要加上外部接口名Map.Entry</p></blockquote><p><strong>涉及方法：</strong></p><ul><li><code>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code>:获取所有的entry对象并放入Set集合中返回。</li><li><code>K getKey()</code>：获取Entry中的键</li><li><code>V getValue()</code>：获取Entry中的值</li></ul><p><strong>使用步骤：</strong></p><ol><li>调用Map集合中的entrySet()方法，获取所有的Entry对象放入到Set集合中并返回</li><li>遍历Set集合，拿到Set集合中的每一个Entry对象</li><li>通过Entry对象调用getKey()和getValue()获取键和值</li></ol><p><strong>使用演示：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03EntrySet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">32</span>);</span><br><span class="line">        map.put(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">        map.put(<span class="number">2</span>, <span class="number">20</span>);</span><br><span class="line">        map.put(<span class="number">3</span>, <span class="number">30</span>);</span><br><span class="line">        <span class="comment">//1.调用Map集合中的entrySet()方法，获取所有的Entry对象放入到Set集合中并返回</span></span><br><span class="line">        Set&lt;Map.Entry&lt;Integer, Integer&gt;&gt; entries = map.entrySet();</span><br><span class="line">        <span class="comment">//2.遍历Set集合，拿到Set集合中的每一个Entry对象</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : entries) &#123;</span><br><span class="line">            <span class="comment">//3.通过Entry对象调用getKey()和getValue()获取键和值</span></span><br><span class="line">            Integer key = entry.getKey();</span><br><span class="line">            Integer value = entry.getValue();</span><br><span class="line">            System.out.println(key + <span class="string">"="</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-HashMap存储自定义类型判断键的唯一性"><a href="#3-5-HashMap存储自定义类型判断键的唯一性" class="headerlink" title="3.5 HashMap存储自定义类型判断键的唯一性"></a>3.5 HashMap存储自定义类型判断键的唯一性</h3><p>练习：每位学生（姓名，年龄）都有自己的家庭住址。那么，既然有对应关系，则将学生对象和家庭住址存储到map集合中。学生作为键, 家庭住址作为值。</p><ul><li>学生姓名相同并且年龄相同视为同一名学生。</li></ul><blockquote><p>HashMap保证唯一性(键)的方式和HashSet是一模一样。 因为HashSet内部就是在使用HashMap保存数据。</p></blockquote><p><strong>判断唯一性的方式：</strong></p><ol><li>先比较两个对象的哈希值。<ul><li>如果对象的哈希值不同，肯定是不同的对象。</li><li>如果对象的哈希值相同，不一定是同一个对象。</li></ul></li><li>然后比较两个对象的equals方法<ul><li>如果equals方法结果是true，表示两个对象相同。</li><li>如果equals方法结果是false，表示两个对象不同。</li></ul></li></ol><p><strong>代码演示：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04MapTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;Student,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">32</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> Student(<span class="string">"张三"</span>,<span class="number">18</span>),<span class="string">"北京"</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> Student(<span class="string">"李四"</span>,<span class="number">20</span>),<span class="string">"上海"</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> Student(<span class="string">"王五"</span>,<span class="number">22</span>),<span class="string">"广州"</span>);</span><br><span class="line"></span><br><span class="line">        map.put(<span class="keyword">new</span> Student(<span class="string">"张三"</span>,<span class="number">18</span>),<span class="string">"南京"</span>);<span class="comment">//南京覆盖掉北京，因为Student属性相同，视为一个对象，即Key相同</span></span><br><span class="line"></span><br><span class="line">        Set&lt;Student&gt; keys = map.keySet();</span><br><span class="line">        <span class="keyword">for</span> (Student key : keys) &#123;</span><br><span class="line">            String value = map.get(key);</span><br><span class="line">            System.out.println(key+<span class="string">"::"</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        Student student = (Student) o;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (age != student.age) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> name != <span class="keyword">null</span> ? name.equals(student.name) : student.name == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = name != <span class="keyword">null</span> ? name.hashCode() : <span class="number">0</span>;</span><br><span class="line">        result = <span class="number">31</span> * result + age;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    get...set...构造方法...略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>小结：如果要使用HashMap保存数据并保证数据的唯一性(属性相同就看成是同一个对象)，需要重写hashCode和equals方法。</p></blockquote><h3 id="3-6-LinkedHashMap"><a href="#3-6-LinkedHashMap" class="headerlink" title="3.6 LinkedHashMap"></a>3.6 LinkedHashMap</h3><p>LinkedHashMap也是一个双列集合。</p><ul><li>里面采用的是哈希表+链表的结构。</li><li>链表的作用是保证有序，LinkedHashMap是有序的。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05LinkedHashMap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        map.put(<span class="number">1</span>,<span class="number">100</span>);</span><br><span class="line">        map.put(<span class="number">2</span>,<span class="number">200</span>);</span><br><span class="line">        map.put(<span class="number">3</span>,<span class="number">300</span>);</span><br><span class="line">        System.out.println(map);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-7-TreeMap"><a href="#3-7-TreeMap" class="headerlink" title="3.7 TreeMap"></a>3.7 TreeMap</h3><p>TreeMap也是一个双列集合</p><ul><li>内部是一个二叉树，可以自动对键进行排序</li></ul><p>构造方法：</p><ul><li>TreeMap():会使用自然排序的方式进行自然排序</li><li>TreeMap(Comparator comparator)：参数需要传递一个比较器，可以对集合中的内容根据比较器进行排序</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06TreeMap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;Integer,String&gt; map = <span class="keyword">new</span> TreeMap&lt;&gt;(<span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//降序</span></span><br><span class="line">                <span class="keyword">return</span> o2-o1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        map.put(<span class="number">427</span>,<span class="string">"张三"</span>);</span><br><span class="line">        map.put(<span class="number">281</span>,<span class="string">"李四"</span>);</span><br><span class="line">        map.put(<span class="number">354</span>,<span class="string">"王五"</span>);</span><br><span class="line">        map.put(<span class="number">110</span>,<span class="string">"拉拉"</span>);</span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-8-练习"><a href="#3-8-练习" class="headerlink" title="3.8 练习"></a>3.8 练习</h3><p>要求：键盘录入一个字符串，统计该字符串中每个字符出现的次数。</p><ul><li>例如：aaabbbccc  a:3  b:3  c:3</li></ul><p><strong>思路：</strong></p><ol><li><p>键盘录入一个字符串</p></li><li><p>定义map集合当作计数器，键是要统计的字符，值是该字符出现的次数</p></li><li><p>遍历字符串，拿到字符串的中每一个字符</p></li><li><p>判断遍历到的字符在map集合中是否存在</p><ul><li>如果不存在，表示该字符没有统计过，那么就将该字符放入到Map集合中，次数设置为1</li><li>如果存在，就表示该字符统计过，就获取该字符出现的次数，然后把次数+1，重新放入到map集合。</li></ul></li><li><p>输出map</p></li></ol><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo07Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入一个字符串："</span>);</span><br><span class="line">        <span class="comment">//1.键盘录入一个字符串</span></span><br><span class="line">        String str = sc.nextLine();</span><br><span class="line">        <span class="comment">//2.定义map集合当作计数器，键是要统计的字符，值是该字符出现的次数</span></span><br><span class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">32</span>);</span><br><span class="line">        <span class="comment">//   3.遍历字符串，拿到字符串的中每一个字符</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> ch = str.charAt(i);</span><br><span class="line">            <span class="comment">//4.判断遍历到的字符在map集合中是否存在</span></span><br><span class="line">            <span class="comment">/*if (map.containsKey(ch)) &#123;</span></span><br><span class="line"><span class="comment">                //4.1如果存在，就表示该字符统计过，就获取该字符出现的次数，然后把次数+1，重新放入到map集合。</span></span><br><span class="line"><span class="comment">                map.put(ch, map.get(ch) + 1);</span></span><br><span class="line"><span class="comment">            &#125; else &#123;</span></span><br><span class="line"><span class="comment">                //4.2如果不存在，表示该字符没有统计过，那么就将该字符放入到Map集合中，次数设置为1</span></span><br><span class="line"><span class="comment">                map.put(ch, 1);</span></span><br><span class="line"><span class="comment">            &#125;*/</span></span><br><span class="line">            <span class="comment">//扩展写法</span></span><br><span class="line">            map.put(ch, map.containsKey(ch) ? map.get(ch) + <span class="number">1</span> : <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出map</span></span><br><span class="line">        Set&lt;Character&gt; keys = map.keySet();</span><br><span class="line">        <span class="keyword">for</span> (Character key : keys) &#123;</span><br><span class="line">            System.out.println(key + <span class="string">"-"</span> + map.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、集合的嵌套"><a href="#四、集合的嵌套" class="headerlink" title="四、集合的嵌套"></a>四、集合的嵌套</h2><p>集合嵌套演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; listOne = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        listOne.add(<span class="string">"张三"</span>);</span><br><span class="line">        listOne.add(<span class="string">"李四"</span>);</span><br><span class="line">        listOne.add(<span class="string">"王五"</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; listTwo = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        listTwo.add(<span class="string">"哈哈"</span>);</span><br><span class="line">        listTwo.add(<span class="string">"呵呵"</span>);</span><br><span class="line">        listTwo.add(<span class="string">"嘿嘿"</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;List&lt;String&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(listOne);</span><br><span class="line">        list.add(listTwo);</span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span> (List&lt;String&gt; stuList : list)&#123;</span><br><span class="line">            <span class="keyword">for</span> (String str : stuList) &#123;</span><br><span class="line">                System.out.println(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、斗地主案例——排序"><a href="#五、斗地主案例——排序" class="headerlink" title="五、斗地主案例——排序"></a>五、斗地主案例——排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 斗地主案例——排序版</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Sunmoon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DouDiZhu</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 准备牌，假用索引表示牌的大小，索引值越大，牌的权值越大——用于排序</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//扑克索引</span></span><br><span class="line">        ArrayList&lt;Integer&gt; poker = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//扑克字典，</span></span><br><span class="line">        Map&lt;Integer,String&gt; pokerMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//花色</span></span><br><span class="line">        String[] colors = &#123;<span class="string">"♠"</span>,<span class="string">"♥"</span>,<span class="string">"♣"</span>,<span class="string">"♦"</span>&#125;;</span><br><span class="line">        <span class="comment">//数字</span></span><br><span class="line">        String[] nums = &#123;<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">"6"</span>,<span class="string">"7"</span>,<span class="string">"8"</span>,<span class="string">"9"</span>,<span class="string">"10"</span>,<span class="string">"J"</span>,<span class="string">"Q"</span>,<span class="string">"K"</span>,<span class="string">"A"</span>,<span class="string">"2"</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义开始索引为0</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//组合牌，遍历花色和数字数组，poker集合存储牌的索引0-53，pokerMap存储索引对应的牌面</span></span><br><span class="line">        <span class="keyword">for</span> (String num : nums) &#123;</span><br><span class="line">            <span class="keyword">for</span>(String color : colors)&#123;</span><br><span class="line">                poker.add(index);</span><br><span class="line">                pokerMap.put(index,color+num);</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//添加小王</span></span><br><span class="line">        poker.add(index);</span><br><span class="line">        pokerMap.put(index,<span class="string">"小🎴"</span>);</span><br><span class="line">        <span class="comment">//索引加一，添加大王</span></span><br><span class="line">        poker.add(++index);</span><br><span class="line">        pokerMap.put(index,<span class="string">"大🎴"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//洗牌，打乱存储牌所以的集合poker即可</span></span><br><span class="line">        Collections.shuffle(poker);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发牌，准备三个集合代表三个玩家，在准备一个集合存储底牌</span></span><br><span class="line">        ArrayList&lt;Integer&gt; playerOne = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; playerTwo = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; playerThree = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; bottomCard = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//开始发牌，遍历存储扑克索引的集合poker——操作索引，使用fori循环</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; poker.size(); i++) &#123;</span><br><span class="line">            <span class="comment">//先判断是否是最后三张，是则添加到底牌集合中，并结束当前循序，进行下一次循环</span></span><br><span class="line">            <span class="keyword">if</span> (i&gt;=<span class="number">51</span>)&#123;</span><br><span class="line">                bottomCard.add(poker.get(i));</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>)&#123;<span class="comment">//给第一个人发牌</span></span><br><span class="line">                playerOne.add(poker.get(i));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">3</span> ==<span class="number">1</span>)&#123;<span class="comment">//给第二个人发牌</span></span><br><span class="line">                playerTwo.add(poker.get(i));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// i % 3 == 2 给第三个人发牌</span></span><br><span class="line">                playerThree.add(poker.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//调用方法看牌</span></span><br><span class="line">        lookCard(<span class="string">"张三"</span>,playerOne,pokerMap);</span><br><span class="line">        lookCard(<span class="string">"李四"</span>,playerTwo,pokerMap);</span><br><span class="line">        lookCard(<span class="string">"王五"</span>,playerThree,pokerMap);</span><br><span class="line">        lookCard(<span class="string">"底牌"</span>,bottomCard,pokerMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看牌面方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 玩家姓名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list 玩家的牌面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pokerMap 存储牌面的字典</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">lookCard</span><span class="params">(String name, ArrayList&lt;Integer&gt; list, Map&lt;Integer, String&gt; pokerMap)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//排序</span></span><br><span class="line">        Collections.sort(list);</span><br><span class="line">        <span class="comment">//输出玩家姓名</span></span><br><span class="line">        System.out.print(name + <span class="string">" : "</span>);</span><br><span class="line">        <span class="comment">//遍历list集合，根据Map字典查找牌面并输出</span></span><br><span class="line">        <span class="keyword">for</span> (Integer key : list)&#123;</span><br><span class="line">            System.out.print(pokerMap.get(key) + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//换行</span></span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、Collections类&quot;&gt;&lt;a href=&quot;#一、Collections类&quot; class=&quot;headerlink&quot; title=&quot;一、Collections类&quot;&gt;&lt;/a&gt;一、Collections类&lt;/h2&gt;&lt;p&gt;Collections是操作集合的工具类&lt;/p&gt;
&lt;h3 id=&quot;1-1-Collections常用方法&quot;&gt;&lt;a href=&quot;#1-1-Collections常用方法&quot; class=&quot;headerlink&quot; title=&quot;1.1 Collections常用方法&quot;&gt;&lt;/a&gt;1.1 Collections常用方法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;static void shuffle(List&amp;lt;?&amp;gt; list)&lt;/code&gt;：打乱集合的顺序&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static void sort(List list)&lt;/code&gt;：对集合的内容进行排序【自然排序】&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static void sort(List list, Comparator c)&lt;/code&gt;：对集合的内容进行排序，第一个参数是集合，第二个参数是比较器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static &amp;lt;T&amp;gt; boolean addAll(Collection&amp;lt;? super T&amp;gt; c, T... elements)&lt;/code&gt; ：向集合中批量添加数据。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://sunmoon.com/categories/Java/"/>
    
    
      <category term="基础" scheme="http://sunmoon.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="学习" scheme="http://sunmoon.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="集合" scheme="http://sunmoon.com/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>Collection、List、泛型、数据结构</title>
    <link href="http://sunmoon.com/2020/07/29/Collection%E3%80%81List%E3%80%81%E6%B3%9B%E5%9E%8B%E3%80%81%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://sunmoon.com/2020/07/29/Collection%E3%80%81List%E3%80%81%E6%B3%9B%E5%9E%8B%E3%80%81%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2020-07-29T12:38:03.000Z</published>
    <updated>2020-07-29T12:43:28.603Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Collection集合"><a href="#一、Collection集合" class="headerlink" title="一、Collection集合"></a>一、Collection集合</h2><h3 id="1-1-集合概述"><a href="#1-1-集合概述" class="headerlink" title="1.1 集合概述"></a>1.1 集合概述</h3><ul><li>集合：集合是一种容器 ，可以用来存储多个数据。</li></ul><p><strong>集合和数组的区别？</strong></p><ul><li>数组的长度是固定的，集合长度可变。</li><li><strong>数据中可以存储</strong>任意类型的数据，包括<strong>基本类型和引用类型</strong>。<strong>集合只能存储引用类型数据</strong>，如果想要存储基本类型数据，需要使用基本类型对应的包装类(引用类型)。</li></ul><a id="more"></a><h3 id="1-2-集合的继承体系"><a href="#1-2-集合的继承体系" class="headerlink" title="1.2 集合的继承体系"></a>1.2 集合的继承体系</h3><p>Collection：单列集合的根接口，用于存储一些列符合某种规则的元素。</p><p>Collection的子接口、子接口特点及其常见实现类</p><ul><li><code>java.util.List</code>：List接口的特点是<strong>元素有序，且元素可重复</strong>。<ul><li><code>java.util.LinkedList</code></li><li><code>java.util.ArrayList</code></li></ul></li><li><code>java.util.Set</code>：Set接口的特点是<strong>元素不可重复</strong>。<ul><li><code>java.util.HashSet</code><ul><li><code>java.util.LinkedHashSet</code></li></ul></li><li><code>java.util.TreeSet</code></li></ul></li></ul><p>继承体系：</p><p>Collection(interface)</p><ul><li>List(interface)<ul><li>LinkedList(class)</li><li>ArrayList(class)</li></ul></li><li>Set(interface)<ul><li>HashSet(class)<ul><li>LinkedHashSet(class)</li></ul></li><li>TreeSet(class)</li></ul></li></ul><p>注意：以上只是常用的一些集合，还有很多其他集合，可以查询API文档搜索Collection，查询其子接口及其子接口的实现类。</p><h3 id="1-3-Collection中的常用方法"><a href="#1-3-Collection中的常用方法" class="headerlink" title="1.3 Collection中的常用方法"></a>1.3 Collection中的常用方法</h3><p>Collection是所有单列集合的父接口，所以在Collection中定义了一些共性的方法，这些方法可以用于操作所有单列集合。</p><ul><li><code>public boolean add(E e)</code>：把指定元素添加到集合中</li><li><code>public void clear()</code>：清空集合元素</li><li><code>public boolean remove(E e)</code>：在集合中移除指定的元素</li><li><code>public boolean contains(Object obj)</code>：判断集合中是否包含给定的对象</li><li><code>public boolean isEmpty()</code>：判断当前集合是否为空</li><li><code>public int size()</code>：返回集合的长度</li><li><code>public Object[] toArray()</code>：把集合中的元素存储到数组中</li></ul><p>Collection还有很多其他的方法，查看API即可查看学习。</p><p>方法演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01CollectionMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合</span></span><br><span class="line">        Collection&lt;String&gt; c = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        c.add(<span class="string">"aa"</span>);</span><br><span class="line">        c.add(<span class="string">"bb"</span>);</span><br><span class="line">        c.add(<span class="string">"cc"</span>);</span><br><span class="line">        c.add(<span class="string">"dd"</span>);</span><br><span class="line">        c.add(<span class="string">"ee"</span>);</span><br><span class="line">        System.out.println(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将集合转成数组</span></span><br><span class="line">        Object[] obj = c.toArray();</span><br><span class="line">        System.out.println(Arrays.toString(obj));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判度集合中是否包含指定元素</span></span><br><span class="line">        System.out.println(c.contains(<span class="string">"cc"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除指定元素</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = c.remove(<span class="string">"cc"</span>);</span><br><span class="line">        System.out.println(flag);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取集合大小</span></span><br><span class="line">        <span class="keyword">int</span> s = c.size();</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//清空集合</span></span><br><span class="line">        c.clear();</span><br><span class="line">        System.out.println(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判度胺集合是否为空</span></span><br><span class="line">        System.out.println(c.isEmpty());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、Iterator迭代器"><a href="#二、Iterator迭代器" class="headerlink" title="二、Iterator迭代器"></a>二、Iterator迭代器</h2><h3 id="2-1-Iterator介绍"><a href="#2-1-Iterator介绍" class="headerlink" title="2.1 Iterator介绍"></a>2.1 Iterator介绍</h3><p><strong>迭代</strong>：就是Collection集合元素的通用获取方法。在取元素之前先判断集合中有没有元素，如果有，就把这个元素取出来，然后继续判断，重复这个过程，直到集合中所有元素全部驱逐。这种取出的方法叫做迭代。</p><p>在Java中，专门提供了一个<code>接口</code>来实现迭代操作：<code>java.util.Iterator</code></p><p>迭代器其实就是一个遍历集合的工具，内部有一个光标，这个光标最开始指向了集合的最开头位置。</p><p>获取迭代器的方法：</p><ul><li><code>public Iterator iteratoc()</code>:获取集合对应的迭代器，进行集合的遍历。<ul><li>使用格式：<code>Iterator&lt;集合中存储的数据类型&gt; it = 集合变量名.iterator();</code></li></ul></li></ul><p>Iterator接口的常用方法：</p><ul><li><code>public boolean hasNext()</code>：判断集合中是否还有元素可以获取，有则返回true</li><li><code>public E next()</code>：获取当前光标位置的元素，然后把光标向后移动</li></ul><p>使用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Iterator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Collection&lt;String&gt; c = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        c.add(<span class="string">"aa"</span>);</span><br><span class="line">        c.add(<span class="string">"bb"</span>);</span><br><span class="line">        c.add(<span class="string">"cc"</span>);</span><br><span class="line">        c.add(<span class="string">"dd"</span>);</span><br><span class="line">        c.add(<span class="string">"ee"</span>);</span><br><span class="line">        <span class="comment">//获取迭代器对象</span></span><br><span class="line">        Iterator&lt;String&gt; it = c.iterator();</span><br><span class="line">        <span class="comment">//循环判断光标处有没有元素</span></span><br><span class="line">        <span class="keyword">while</span> (it.hasNext())&#123;</span><br><span class="line">            <span class="comment">//有则进入循环，next方法，获取元素并且方法会让光标向后移动一位。</span></span><br><span class="line">            String str = it.next();</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>扩展知识：</p><ol><li><p>在进行集合元素获取时，如果集合中已经没有元素了，再继续使用next方法时，将会抛出<code>java.util.NoSuchElementException</code>(没有集合元素异常)</p></li><li><p>在进行集合元素获取时，在这个过程中同时进行添加或移除操作，将无法进行迭代操作，将会抛出<code>java.util.ConcurrentModificationException</code>(并发修改异常)</p></li></ol></blockquote><h3 id="2-2-迭代器实现原理"><a href="#2-2-迭代器实现原理" class="headerlink" title="2.2 迭代器实现原理"></a>2.2 迭代器实现原理</h3><h3 id="2-3-增强for循环"><a href="#2-3-增强for循环" class="headerlink" title="2.3 增强for循环"></a>2.3 增强for循环</h3><p>增强for循环(也称<code>for each循环</code>)是 <code>JDK5</code>以后出来的一个高级for循环，专门用来遍历数组和集合的。</p><p><strong>遍历集合</strong></p><ul><li>它的内部原理其实是个Iterator迭代器，所以在遍历的过程中，不能用集合的删除方法对集合中的元素进行删除操作。</li></ul><p><strong>遍历数组</strong></p><ul><li>增强for是一种语法糖，语法糖指的是本质没有变，只不过写法更加优雅，更加简洁了</li><li>增强for的本质就是for循环</li></ul><p>使用格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(元素数据类型 变量名 : 需要遍历的集合或数组)&#123;</span><br><span class="line"><span class="comment">//操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01ForEach</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arrInt = &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> n : arrInt)&#123;</span><br><span class="line">            System.out.println(n);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Collection&lt;String&gt; c = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        c.add(<span class="string">"aa"</span>);</span><br><span class="line">        c.add(<span class="string">"bb"</span>);</span><br><span class="line">        c.add(<span class="string">"cc"</span>);</span><br><span class="line">        c.add(<span class="string">"dd"</span>);</span><br><span class="line">        c.add(<span class="string">"ee"</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : c) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、泛型"><a href="#三、泛型" class="headerlink" title="三、泛型"></a>三、泛型</h2><h3 id="3-1-什么是泛型"><a href="#3-1-什么是泛型" class="headerlink" title="3.1 什么是泛型"></a>3.1 什么是泛型</h3><p>泛型：泛型是一种未知的，不确定的类型</p><p>举例：比如<code>ArrayList&lt;E&gt;</code>，这个<strong>E</strong>就是泛型。但是E表示哪种数据类型，不确定，索引泛型是一种未知的，不确定的类型。</p><ul><li>虽然泛型类型E表示是一种不确定的类型，但是等我们将来使用这个类创建对象时，这个E表示的数据类型就可以确定下来。</li><li>比如：<ul><li>ArrayList<String> 此时这个泛型类型E表示的就是String</li><li>ArrayList<Person> 此时这个泛型类型E表示的就是Person</li></ul></li></ul><blockquote><p>泛型也是可以省略的，如果省略泛型，相当于泛型是Object。</p></blockquote><h3 id="3-2-使用泛型的好处"><a href="#3-2-使用泛型的好处" class="headerlink" title="3.2 使用泛型的好处"></a>3.2 使用泛型的好处</h3><ul><li>可以省略向下转型的代码。<ul><li>可以将运行时的问题提前到编译时期。</li></ul></li></ul><blockquote><p>小结：</p><p>1.将运行期类型转换异常<code>(java.util.ClassCastException)</code>，转移到了编译时期，提前编译报错。</p><p>2.避免了进行强制类型转换的麻烦</p></blockquote><blockquote><p>扩展：</p><p>泛型擦除：Java中的泛型时伪泛型，泛型只在源代码阶段有效，一旦编译，泛型就会消失。也叫泛型擦除。</p></blockquote><h3 id="3-3-泛型的定义和使用"><a href="#3-3-泛型的定义和使用" class="headerlink" title="3.3 泛型的定义和使用"></a>3.3 泛型的定义和使用</h3><h4 id="3-3-1-含有泛型的类"><a href="#3-3-1-含有泛型的类" class="headerlink" title="3.3.1 含有泛型的类"></a>3.3.1 含有泛型的类</h4><p>如果在定义类的时候，在类名后面加上<T>,就表示在类中定义了一个不确定的类型T。</p><ul><li>T可以是任何字母，一般是一个大写字母。</li><li>T真正表示一种数据类型，只不过它在刚写出来的时候是未知的</li><li>当我们使用这个类(创建对象)时，会指定这个T是什么类型，那么此时这个T表示的数据类型就可以确定了。</li><li>这个T就是一个泛型。</li></ul><p>定义格式：<code>修饰符 class 类名&lt;代表泛型的变量&gt; {...}</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>&lt;<span class="title">T</span>&gt;</span>&#123;<span class="comment">//定义了一个泛型类型T</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">method</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>小结：</strong>如果是在类上面定义的泛型，在整个类中都可以使用，类上面定义的泛型需要等到使用这个类(创建对象)，才会指定这个泛型是什么类型。</p></blockquote><h4 id="3-3-2-含有泛型的方法"><a href="#3-3-2-含有泛型的方法" class="headerlink" title="3.3.2 含有泛型的方法"></a>3.3.2 含有泛型的方法</h4><p>如果想要在调用方法时才确定具体的类型，那么我们可以使用泛型方法(在方法上定义泛型)</p><ul><li>在方法上定义泛型，那么这个泛型会在调用方法时才指定。</li></ul><p>定义格式：<code>修饰符 &lt;代表泛型的变量&gt; 返回值类型 方法名(参数列表){方法体}</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     &lt;E&gt;：表示方法中定义了一个未知的，不确定的泛型类型E</span></span><br><span class="line"><span class="comment">     返回值处E：使用了未知的，不确定的类型E当作了返回值类型</span></span><br><span class="line"><span class="comment">     参数上的E：实用类未知的,不确定的类型E当作了参数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> &lt;E&gt; <span class="function">E <span class="title">method</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>小结：</strong>如果是在方法上定义的泛型，在方法中可以使用。方法上面定义的泛型需要等到调用方法时才能确定这个泛型是什么类型。</p></blockquote><h4 id="3-3-3-含有泛型的接口"><a href="#3-3-3-含有泛型的接口" class="headerlink" title="3.3.3 含有泛型的接口"></a>3.3.3 含有泛型的接口</h4><p>如果在定义接口时，在接口后面写上<T>，那么就表示在接口中定义了一个泛型类型T(不确定的类型)</p><p>定义格式：<code>修饰符 interface 接口名&lt;代表泛型的变量&gt;{...}</code></p><p>定义在接口上的泛型有两种使用方式：</p><ul><li>在实现类实现接口时，可以直接指定泛型类型</li><li>实现类在实现接口时，可以不指定泛型，等到使用实现类时再指定</li></ul><p><strong>演示：</strong></p><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span>&lt;<span class="title">T</span>&gt; </span>&#123;<span class="comment">// 在接口中定义了一个泛型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义方法，使用泛型类型T当作参数类型和返回值类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> T <span class="title">method</span><span class="params">(T t)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现类在实现接口时指定泛型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 实现类在实现接口时，可以直接在接口后面写上尖括号去指定泛型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Sunmoon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterfaceImpl1</span> <span class="keyword">implements</span> <span class="title">MyInterface</span>&lt;<span class="title">Phone</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Phone <span class="title">method</span><span class="params">(Phone phone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现类在实现接口时,不指定泛型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 我们在定义类或者接口时，只有在当前类或者接口名字后面写的尖括号是在定义泛型，其他都是再使用泛型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterfaceImpl2</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">MyInterface</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">method</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口泛型测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03GenericTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        MyInterfaceImpl1 mi1 = <span class="keyword">new</span> MyInterfaceImpl1();</span><br><span class="line">        Phone phone = mi1.method(<span class="keyword">new</span> Phone());</span><br><span class="line"></span><br><span class="line">        MyInterfaceImpl2&lt;Pad&gt; mi2 = <span class="keyword">new</span> MyInterfaceImpl2&lt;&gt;();</span><br><span class="line">        Pad pad = mi2.method(<span class="keyword">new</span> Pad());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：</p><ul><li>泛型表示一种未知的数据类型<ul><li>定义在类上的泛型，使用类的时候会确定泛型的类型</li><li>定义在方法上的泛型，会在使用方法的时候确定泛型</li><li>定义在接口上的泛型，需要使用接口的时候确定泛型。</li></ul></li></ul></blockquote><h3 id="3-3-4-泛型通配符"><a href="#3-3-4-泛型通配符" class="headerlink" title="3.3.4 泛型通配符"></a>3.3.4 泛型通配符</h3><p>当使用泛型类或者接口时，传递的数据中，泛型类型不确定，可以通过通配符<code>&lt;?&gt;</code>表示。但是一旦使用泛型的通配<br>符后，只能使用Object类中的共性方法，集合中元素自身方法无法使用。</p><h5 id="通配符基本使用"><a href="#通配符基本使用" class="headerlink" title="通配符基本使用"></a>通配符基本使用</h5><p><strong>泛型的通配符</strong>：不知道使用什么类型来接收的时候,此时可以使用<code>?</code>,<code>?表示未知通配符</code>。</p><ul><li>此时只能接受数据,不能往该集合中存储数据。</li></ul><h5 id="通配符高级使用—-受限泛型"><a href="#通配符高级使用—-受限泛型" class="headerlink" title="通配符高级使用—-受限泛型"></a>通配符高级使用—-受限泛型</h5><p>之前设置泛型的时候，实际上是可以任意设置的，只要是类就可以设置。但是在JAVA的泛型中可以指定一个泛型的<br><strong>上限</strong>和<strong>下限</strong>。</p><p><strong>泛型的上限：</strong></p><ul><li>格式：<code>类型名称 &lt;? extends 类&gt; 对象名称</code></li><li>意义：只能接收该类型及其子类</li></ul><p><strong>泛型的下限：</strong></p><ul><li>格式：<code>类型名称 &lt;? super 类&gt; 对象名称</code></li><li>意义：只能接收该类型及其父类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 泛型限定</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 作用：可以对泛型通配符?的取值范围进行限制</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;? extends A&gt;：泛型要么是A类，要么是A类的子类——上限</span></span><br><span class="line"><span class="comment"> * &lt;? super A&gt;：泛型要么是A类，要么是A类的父类——下限</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 泛型主要用于代码的重构，代码得优化。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Sunmoon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Generic</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="string">"张三"</span>,<span class="number">18</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="string">"拉拉"</span>,<span class="number">20</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="string">"李四"</span>,<span class="number">30</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Student(<span class="string">"王五"</span>,<span class="number">40</span>));</span><br><span class="line">        printArrayList(list);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Person&gt; personList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        printArrayList(personList);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Object&gt; objList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// printArrayList(objList);参数集合泛型是Person的父类，报错</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用method方法</span></span><br><span class="line">        <span class="comment">// method(list);//参数是Person的子类，有问题</span></span><br><span class="line">        method(personList);<span class="comment">//参数是Person，没问题</span></span><br><span class="line">        method(objList);<span class="comment">//参数是Person的父类，没问题</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义方法，用来保存Person或者Person的子类的集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list 参数集合的泛型要么是Person要么是Person的子类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArrayList</span><span class="params">(ArrayList&lt;? extends Person&gt; list)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对集合进行遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Person person : list) &#123;</span><br><span class="line">            System.out.println(person);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用泛型下限</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list 参数集合的泛型要么是Person，要么是Person的父类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(ArrayList&lt;? <span class="keyword">super</span> Person&gt; list)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>小结：<code>?</code>表示泛型通配符，如果要对?泛型通配符的取值范围进行限制，可以使用泛型限定</p></blockquote><h2 id="四、数据结构介绍"><a href="#四、数据结构介绍" class="headerlink" title="四、数据结构介绍"></a>四、数据结构介绍</h2><p>数据结构：存储数据的方式。如果某个容器存储数据的方式不同，那么他们的特点也不同。</p><h3 id="4-1-常见的数据结构"><a href="#4-1-常见的数据结构" class="headerlink" title="4.1 常见的数据结构"></a>4.1 常见的数据结构</h3><p>常见的数据结构有：栈、队列、数组、链表和红黑树。</p><h4 id="4-1-1-栈"><a href="#4-1-1-栈" class="headerlink" title="4.1.1 栈"></a>4.1.1 栈</h4><p>栈：stack，又称为堆栈</p><p>举例：弹夹</p><p><strong>特点：</strong></p><ul><li>先进后出。</li><li>栈的入口和出口都是栈的顶端位置</li></ul><p><strong>名词解释：</strong></p><ul><li><p><strong>压栈</strong>：就是存元素。把元素存到栈顶，栈中其他元素依次向栈底移动一个位置</p></li><li><p><strong>弹栈</strong>：取元素。把栈的顶端位置元素取出，栈中其他元素一次向栈顶移动一个位置.</p></li></ul><h4 id="4-1-2-队列"><a href="#4-1-2-队列" class="headerlink" title="4.1.2 队列"></a>4.1.2 队列</h4><p>举例：排队</p><p><strong>特点：</strong></p><ul><li>先进先出</li><li>队列的入口和出口各自占一侧。</li></ul><h4 id="4-1-3-数组"><a href="#4-1-3-数组" class="headerlink" title="4.1.3 数组"></a>4.1.3 数组</h4><p>特点：</p><ul><li>查询快：可以通过索引快速定位到元素。</li><li>增删元素慢</li></ul><h4 id="4-1-4-链表"><a href="#4-1-4-链表" class="headerlink" title="4.1.4 链表"></a>4.1.4 链表</h4><p>链表中由很多的节点组成。每个节点都至少包含两部分内容，一部分是该系欸但保存的数据，另一部分指向下个节点的地址值。</p><p>单向链表特点：</p><ul><li><p>多个节点之间，通过地址值连接。</p></li><li><p>查找元素慢：在数组中离散存储，离散存储指的是每个节点在内存中是不连续的。</p></li><li><p>增删元素快：对链表进行操作，只需要操作某个节点。</p></li></ul><h3 id="4-2-树的基本结构"><a href="#4-2-树的基本结构" class="headerlink" title="4.2 树的基本结构"></a>4.2 树的基本结构</h3><p>树具有的特点：</p><ul><li>每一个节点有零个或者多个子节点</li><li>没有父节点的节点称为根节点，一个树最多只有一个根节点</li><li>每个非根节点有且只有一个父节点</li></ul><p><strong>名词解释</strong></p><table><thead><tr><th>名称</th><th>含义</th></tr></thead><tbody><tr><td>节点</td><td>指树中的一个元素</td></tr><tr><td>叶子的度</td><td>节点拥有子树的个数，二叉树的度不大于2</td></tr><tr><td>叶子节点</td><td>度为0的节点，也称之为终端节点</td></tr><tr><td>高度</td><td>叶子节点的高度为1，叶子节点的父节点高度为2，以此类推，根节点的高度最高</td></tr><tr><td>层</td><td>根节点在第一层，以此类推</td></tr><tr><td>父节点</td><td>若一个节点含有子节点，则这个节点称之为其子节点的父节点</td></tr><tr><td>子节点</td><td>子节点是父节点的下一层节点</td></tr><tr><td>兄弟节点</td><td>拥有共同父节点的节点互称为兄弟节点</td></tr></tbody></table><h4 id="4-2-1-二叉树"><a href="#4-2-1-二叉树" class="headerlink" title="4.2.1 二叉树"></a>4.2.1 二叉树</h4><p><strong>二叉树：</strong>树结构中的每个节点的子节点的个数不超过2，那么该树就是一个二叉树。</p><p>图解：略…</p><h4 id="4-2-2-二叉查找树"><a href="#4-2-2-二叉查找树" class="headerlink" title="4.2.2 二叉查找树"></a>4.2.2 二叉查找树</h4><p>图解：略…</p><p><strong>特点：</strong></p><ul><li><p>左子树上所有的节点的值均小于它的根节点的值。</p></li><li><p>右子树上所有的节点的值均大于他的根节点的值</p></li><li><p>每一个节点最多有两个子树。</p></li></ul><p>二叉查找树在遍历获取元素的时候可以按照【左中右】的顺序进行遍历</p><blockquote><p>小贴士</p><ul><li>二叉查找树存在的问题：会出现【瘸子】的现象，影响查找效率。</li></ul></blockquote><h4 id="4-2-3-平衡二叉树"><a href="#4-2-3-平衡二叉树" class="headerlink" title="4.2.3 平衡二叉树"></a>4.2.3 平衡二叉树</h4><h5 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h5><p>平衡二叉树：在二叉查找树的基础上，它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。</p><h5 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h5><p>图解：略…</p><h4 id="4-2-4-红黑树"><a href="#4-2-4-红黑树" class="headerlink" title="4.2.4 红黑树"></a>4.2.4 红黑树</h4><p>图解：略…</p><p>特点：</p><ul><li>每一个节点或是红色，或者是黑色的。</li><li>根节点必须是黑色的</li><li>每个叶节点(Nil)是黑色的；（如果一个节点没有子节点或者父节点，则该节点相应的指针属性值为Nil，这些Nil视为叶节点）</li><li>如果某一个节点是红色，那么它的子节点必须是黑色（不能出现两个红色节点相连的情况）</li><li>对每一个节点，从该节点到其所有后代叶节点的简单路径上，均包含相同数目的黑色节点。</li></ul><blockquote><p>小贴士</p><p>在进行元素插入的时候，和之前一样； 每一次插入完毕以后，使用黑色规则进行校验，如果不满足红黑规则，就需 要通过变色，左旋和右旋来调整树，使其满足红黑规则。</p></blockquote><h2 id="五、List接口"><a href="#五、List接口" class="headerlink" title="五、List接口"></a>五、List接口</h2><h3 id="5-1-List接口介绍"><a href="#5-1-List接口介绍" class="headerlink" title="5.1 List接口介绍"></a>5.1 List接口介绍</h3><p><code>java.util.List</code>接口继承自<code>Collection</code>接口。</p><p>List接口特点：</p><ul><li><strong>元素有序</strong>：即是在元素的存入和取出时，顺序的一致的。例如：存入{1，23，10}，在集合中也是按照这个顺序存储的，取出也是一样的顺序。</li><li><strong>带有索引</strong>：集合中元素是带有索引的，可以通过索引紧缺的操作集合中的元素(参考数组索引)。</li><li><strong>可存重复元素</strong>：集合中的元素是可以重复的，可以使用equals方法来判断是否是重复元素。</li></ul><h3 id="5-2-List接口中的常用方法"><a href="#5-2-List接口中的常用方法" class="headerlink" title="5.2 List接口中的常用方法"></a>5.2 List接口中的常用方法</h3><p>List接口作为Collection的子接口，继承了Collention中的全部方法，还增加了一些根据元素索引操作集合的特有方法。</p><ul><li><p><code>public void add(int index, E element)</code>：将指定元素(element)，添加到集合中的指定位置(index)上。</p></li><li><p><code>public E get(int index)</code>：获取集合中指定索引位置(index)的元素，并返回。</p></li><li><p><code>public E remove(int index)</code>：移除集合中指定位置(index)的元素，并返回</p></li><li><p><code>public E set(int index, E element)</code>：用指定元素(element)替换集合中指定索引位置(index)的元素，返回值时被替换掉的元素。</p></li></ul><h3 id="5-3-ArrayList集合"><a href="#5-3-ArrayList集合" class="headerlink" title="5.3 ArrayList集合"></a>5.3 ArrayList集合</h3><p><code>java.util.ArrayList</code>集合数据存的结构是<strong>数组结构</strong>。</p><p>默认以原来数组的1.5倍进行扩容。</p><p><strong>特点：</strong>元素增删慢，查找快。</p><blockquote><p>小贴士：</p><p>由于日常开发中使用最多的功能为查询、遍历数据，所以ArrayList集合是最常用的集合。</p><p>在开发中随意的使用ArrayList集合完成任何需求，这样做法并不严禁，<strong>不提倡</strong>。</p></blockquote><h3 id="5-4-LinkedList集合"><a href="#5-4-LinkedList集合" class="headerlink" title="5.4 LinkedList集合"></a>5.4 LinkedList集合</h3><p><code>java.util.LinkedList</code>集合数据存储的结构是<strong>链表结构</strong>。(双向链表)</p><p><strong>特点：</strong>方便元素的添加、删除等操作。</p><p><strong>常见方法：</strong></p><ul><li><code>public void addFirst(E e)</code>：将指定元素插入到集合的开头。</li><li><code>public void addLast(E e)</code>：将指定元素插入到集合的末尾。</li><li><code>public E getFirst()</code>：返回集合中第一个元素。</li><li><code>public E getLast()</code>：返回集中的最后一个元素。</li><li><code>public E removeFirst()</code>：移除并返回集合中的第一个元素。</li><li><code>public E removeLast()</code>：移除并返回集合中最后一个元素。</li><li><code>public E pop()</code>：从此列表表示的堆栈中弹出一个元素。(弹栈)</li><li><code>public void push(E e)</code>：将元素推入此列表所表示的堆栈。(压栈)</li><li><code>public boolean isEmpty</code>：判断集合是否为空，为空则返回true。</li></ul><p>方法演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03LinkedList</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LinkedList&lt;String&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"hello"</span>);</span><br><span class="line">        list.add(<span class="string">"world"</span>);</span><br><span class="line">        list.add(<span class="string">"java"</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        System.out.println(<span class="string">"================="</span>);</span><br><span class="line">        list.push(<span class="string">"php"</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// String pop = list.pop();</span></span><br><span class="line">        <span class="comment">// System.out.println(pop);</span></span><br><span class="line">        <span class="comment">// String s = list.removeFirst();</span></span><br><span class="line">        <span class="comment">// String s = list.removeLast();</span></span><br><span class="line">        <span class="comment">// System.out.println(s);</span></span><br><span class="line">        <span class="comment">// System.out.println(list);</span></span><br><span class="line">        <span class="comment">// list.addFirst("php");</span></span><br><span class="line">        <span class="comment">// list.addLast("php");</span></span><br><span class="line">        <span class="comment">// System.out.println(list);</span></span><br><span class="line">        <span class="comment">// String first = list.getFirst();</span></span><br><span class="line">        <span class="comment">// String last = list.getLast();</span></span><br><span class="line">        <span class="comment">// System.out.println(first);</span></span><br><span class="line">        <span class="comment">// System.out.println(last);</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"==================="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、集合综合案例"><a href="#六、集合综合案例" class="headerlink" title="六、集合综合案例"></a>六、集合综合案例</h2><p><strong>斗地主案例：</strong></p><p>需求：</p><ul><li>按照斗地主的规则，完成洗牌发牌的动作。 <ul><li>使用54张牌打乱顺序,三个玩家参与游戏，三人交替摸牌，每人17张牌，最后三张留作底牌。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 斗地主案例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 步骤：</span></span><br><span class="line"><span class="comment"> *      1. 准备牌</span></span><br><span class="line"><span class="comment"> *          a.创建集合，用来保存牌</span></span><br><span class="line"><span class="comment"> *          b.向集合中添加54张牌</span></span><br><span class="line"><span class="comment"> *      2. 洗牌</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      3. 发牌</span></span><br><span class="line"><span class="comment"> *      4. 看牌</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Sunmoon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//准备容器——牌盒</span></span><br><span class="line">        List&lt;String&gt; poker = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="comment">//准备花色数组</span></span><br><span class="line">        String[] colors = &#123;<span class="string">"♠"</span>,<span class="string">"♥"</span>,<span class="string">"♣"</span>,<span class="string">"♦"</span>&#125;;</span><br><span class="line">        <span class="comment">//准备数字牌</span></span><br><span class="line">        String[] nums = &#123;<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">"6"</span>,<span class="string">"7"</span>,<span class="string">"8"</span>,<span class="string">"9"</span>,<span class="string">"10"</span>,<span class="string">"J"</span>,<span class="string">"Q"</span>,<span class="string">"K"</span>,<span class="string">"A"</span>,<span class="string">"2"</span>&#125;;</span><br><span class="line">        <span class="comment">//添加大🃏，小🃏,进入牌盒</span></span><br><span class="line">        poker.add(<span class="string">"大🃏"</span>);</span><br><span class="line">        poker.add(<span class="string">"小🃏"</span>);</span><br><span class="line">        <span class="comment">//把花色和数字组合，加入牌盒</span></span><br><span class="line">        <span class="keyword">for</span> (String color : colors) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String num : nums) &#123;</span><br><span class="line">                poker.add(color+num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//洗牌，使用Collections工具类中的shuffle()方法</span></span><br><span class="line">        Collections.shuffle(poker);</span><br><span class="line">        <span class="comment">//发牌</span></span><br><span class="line">        <span class="comment">//玩家1</span></span><br><span class="line">        ArrayList&lt;String&gt; playerOne = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//玩家2</span></span><br><span class="line">        ArrayList&lt;String&gt; playerTwo = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//玩家3</span></span><br><span class="line">        ArrayList&lt;String&gt; playerThree = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//底牌</span></span><br><span class="line">        ArrayList&lt;String&gt; bottomCard = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//普通for循环遍历牌盒集合，把对应的牌加入对应玩家的集合中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; poker.size(); i++) &#123;</span><br><span class="line">            <span class="comment">//先判断是否是最后三张牌，是则加入底牌集合</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt;= poker.size() - <span class="number">3</span>)&#123;</span><br><span class="line">                bottomCard.add(poker.get(i));</span><br><span class="line">                <span class="comment">//是则跳过本次循环，不执行下面发牌动作了</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//发牌时，第一个人拿的到牌的索引为0，3，6，...&#125;第二个人拿到牌的索引&#123;1，4，7，...&#125;,第三个人拿到牌的索引&#123;2，5，8，...&#125;</span></span><br><span class="line">            <span class="comment">//可以看出以下结论</span></span><br><span class="line">            <span class="comment">//判断索引对3取余等于0就给第一个人发牌</span></span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                playerOne.add(poker.get(i));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//对3取余等于1则给第二个人发牌</span></span><br><span class="line">                playerTwo.add(poker.get(i));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//此处意思是对3取余等于2则给第三个人发牌</span></span><br><span class="line">                playerThree.add(poker.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//看牌</span></span><br><span class="line">        lookCard(<span class="string">"张三"</span>,playerOne);</span><br><span class="line">        lookCard(<span class="string">"李四"</span>,playerTwo);</span><br><span class="line">        lookCard(<span class="string">"王五"</span>,playerThree);</span><br><span class="line">        lookCard(<span class="string">"底牌"</span>,bottomCard);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看牌面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 玩家姓名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list 玩家牌面</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">lookCard</span><span class="params">(String name, ArrayList&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"【"</span>+name + <span class="string">"】牌面："</span>);</span><br><span class="line">        <span class="keyword">for</span> (String card : list) &#123;</span><br><span class="line">            System.out.print(card + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、Collection集合&quot;&gt;&lt;a href=&quot;#一、Collection集合&quot; class=&quot;headerlink&quot; title=&quot;一、Collection集合&quot;&gt;&lt;/a&gt;一、Collection集合&lt;/h2&gt;&lt;h3 id=&quot;1-1-集合概述&quot;&gt;&lt;a href=&quot;#1-1-集合概述&quot; class=&quot;headerlink&quot; title=&quot;1.1 集合概述&quot;&gt;&lt;/a&gt;1.1 集合概述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;集合：集合是一种容器 ，可以用来存储多个数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;集合和数组的区别？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数组的长度是固定的，集合长度可变。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据中可以存储&lt;/strong&gt;任意类型的数据，包括&lt;strong&gt;基本类型和引用类型&lt;/strong&gt;。&lt;strong&gt;集合只能存储引用类型数据&lt;/strong&gt;，如果想要存储基本类型数据，需要使用基本类型对应的包装类(引用类型)。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://sunmoon.com/categories/Java/"/>
    
    
      <category term="基础" scheme="http://sunmoon.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="学习" scheme="http://sunmoon.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="集合" scheme="http://sunmoon.com/tags/%E9%9B%86%E5%90%88/"/>
    
      <category term="泛型" scheme="http://sunmoon.com/tags/%E6%B3%9B%E5%9E%8B/"/>
    
      <category term="数据结构" scheme="http://sunmoon.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>权限修饰符、代码块、常用API</title>
    <link href="http://sunmoon.com/2020/07/26/%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6%E3%80%81%E4%BB%A3%E7%A0%81%E5%9D%97%E3%80%81%E5%B8%B8%E7%94%A8API/"/>
    <id>http://sunmoon.com/2020/07/26/%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6%E3%80%81%E4%BB%A3%E7%A0%81%E5%9D%97%E3%80%81%E5%B8%B8%E7%94%A8API/</id>
    <published>2020-07-26T13:38:47.000Z</published>
    <updated>2020-07-26T13:41:44.568Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、权限修饰符"><a href="#一、权限修饰符" class="headerlink" title="一、权限修饰符"></a>一、权限修饰符</h2><p><strong>不同权限的访问能力：</strong></p><table><thead><tr><th>描述\修饰符名称</th><th>public</th><th>protected</th><th>(空的)</th><th>private</th></tr></thead><tbody><tr><td>同一类中</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>同一个包中(子类与无关类)</td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>不同包的子类</td><td>√</td><td>√</td><td></td><td></td></tr><tr><td>不同包的无关类</td><td>√</td><td></td><td></td><td></td></tr></tbody></table><p>编写代码时，如果没有特殊的考虑，建议这样使用权限：</p><ul><li>成员变量使用private，隐藏细节。</li><li>构造方法使用public，方便创建对象。</li><li>成员方法使用public，方便调用方法。</li></ul><a id="more"></a><h2 id="二、代码块"><a href="#二、代码块" class="headerlink" title="二、代码块"></a>二、代码块</h2><h3 id="2-1-构造代码块"><a href="#2-1-构造代码块" class="headerlink" title="2.1 构造代码块"></a>2.1 构造代码块</h3><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">代码块的内容</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义位置：定义在类的成员位置</p><p>执行时机：</p><ul><li>构造代码块会在每次创建对象的时候执行(优先于构造方法执行)</li></ul><h3 id="2-2-静态代码块"><a href="#2-2-静态代码块" class="headerlink" title="2.2 静态代码块"></a>2.2 静态代码块</h3><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">    静态代码块内容</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义位置：静态代码块要定义在类的成员位置</p><p>执行时机：</p><ul><li>静态代码块的内容会在类加载的时候执行，静态代码块终身只会执行一次</li><li>当我们使用一个类时，这个类先加载到方法区才能使用，这个过程就是类加载，当我们第一次使用这个类时，这个类会加载到方法区，类只会加载一次。</li><li>静态代码块优先于构造代码块执行。</li></ul><p>使用场景：</p><ul><li>一些项目的准备工作可以方法静态代码块中。比如后期的JDBC阶段注册驱动就会放到静态代码块中</li></ul><h2 id="三、Object类"><a href="#三、Object类" class="headerlink" title="三、Object类"></a>三、Object类</h2><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h3><ul><li>所有类都直接或间接的继承自Object,Object是所有类的父类</li><li>如果一个类我们没有使用extends关键字继承其他类，那么这个类就是继承自Object的</li></ul><h3 id="3-2-toString方法"><a href="#3-2-toString方法" class="headerlink" title="3.2 toString方法"></a>3.2 toString方法</h3><p>在Object中，有一个方法叫<code>toString</code>,可以将对象转成字符串。</p><p><code>String toString()</code>：返回对象的字符串表示形式。</p><ul><li><p><code>toString</code>方法返回该对象的字符串表示，其实该字符串内容就是：对象的类型名+@+对象哈希码的无符号十六进制表示。</p></li><li><p>由于<code>toString</code>方法返回的结果不易阅读，而在开发中，经常需要按照对象的属性得到相应的字符串表现形式，因此也需要重写它。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//构造方法、get/set方法略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>扩展：</strong>在我们直接使用输出语句输出对象名的时候,其实通过该对象调用了其<code>toString()</code>方法。</p><p>小结：<code>toString</code>方法可以将对象转成字符串。</p><h3 id="3-3-equals方法"><a href="#3-3-equals方法" class="headerlink" title="3.3 equals方法"></a>3.3 equals方法</h3><p><code>boolean equals(Object obj)</code> ：判断其他某个对象是否与此对象“相等”。</p><p>调用成员方法equals并指定参数为另一个对象，则可以判断这两个对象是否是相同的。这里的“相同”有默认和自定义两种方式。</p><p>如果没有覆盖重写equals方法，那么Object类中默认进行==运算符的对象地址比较，只要不是同一个对象，结果必然为false。</p><p>如果想要进行对象内容的比较，即所有或指定的部分成员变量相同就判定两个对象相同，则可以覆盖重写equals方法。</p><p>小结：equals方法可以判断两个对象是否相同，如果要定义自己的比较规则，需要进行重写。</p><h3 id="3-4-native本地方法"><a href="#3-4-native本地方法" class="headerlink" title="3.4 native本地方法"></a>3.4 native本地方法</h3><p>方法被native修饰的方法，例如Object类中的<code>public native int hashCode();</code>方法，就是一个本地方法，底层用C++实现的方法。</p><h3 id="3-5-Objects类"><a href="#3-5-Objects类" class="headerlink" title="3.5 Objects类"></a>3.5 Objects类</h3><p>在JDK7的时候，多了一个工具类叫做<code>Objects</code>。这个类里面有大量的方法可以操作对象。(了解)</p><ul><li><code>static boolean equals(Object a, Object b)</code>：比较两个对象是否相同。比较a和b这两个对象是否相同。</li></ul><p>调用Objects的equals时，内部会调用Object的equals方法。所以如果想要根据属性比较两个对象是否相同，还需要重写equals。</p><h2 id="四、Date类"><a href="#四、Date类" class="headerlink" title="四、Date类"></a>四、Date类</h2><p>Date(java.util.Date)类可以叫做日期类</p><ul><li>虽然叫做日期类，但是表示的是特点的时间瞬间，精确到毫秒</li></ul><p>构造方法：</p><ul><li><p><code>Date()</code>：使用空参数的狗咱方法会根据当前计算机的时间创建Date对象。</p></li><li><p><code>Date(long date)</code>：参数要传递long类型的毫秒值，表示从1970年1月1日0时0分0秒开始，过了多少毫秒。</p><ul><li>中国是东八区的时间，比标准时间要快8小时，所以时间是从1970年1月1日8时0分0秒开始</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Date</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//通过空参数构造方法创建对象（这个Date对象表示是当前电脑的时间）</span></span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(date);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用有参构造方法创建对象</span></span><br><span class="line">        Date date2 = <span class="keyword">new</span> Date(<span class="number">0L</span>);</span><br><span class="line">        System.out.println(date2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-1-常用方法"><a href="#4-1-常用方法" class="headerlink" title="4.1 常用方法"></a>4.1 常用方法</h3><p><code>long getTime()</code>：获取Date对象对应的毫秒值。<br><code>void setTime(long time)</code>：参数是毫秒值，表示从1970年1月1日开始过了多少毫秒</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02DateGetTime</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="keyword">long</span> millis = date.getTime();</span><br><span class="line">        System.out.println(millis);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03DateSetTime</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(date);</span><br><span class="line"></span><br><span class="line">        date.setTime(<span class="number">1000L</span>);</span><br><span class="line">        System.out.println(date);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、DateFormat类"><a href="#五、DateFormat类" class="headerlink" title="五、DateFormat类"></a>五、DateFormat类</h2><p><code>java.text.DateFormat</code>是日期/时间格式化子类的抽象类。</p><p>如果要把Date对象转成我们喜欢的格式进行显示，那么可以使用DateFormat进行格式化（将Date对象转成指定格式的字符串就是格式化）<br><code>DateFormat</code>是抽象类，如果要用，需要使用子类，最常用的子类是<code>SimpleDateFormat</code></p><p><code>SimpleDateFormat</code>的构造方法：</p><ul><li><code>SimpleDateFormat(String pattern)</code>：参数要传递一个字符串类型的模式</li></ul><p>模式就是要转换的格式：</p><ul><li>要转换的最终格式： 2020年07月6日 12时12分12秒</li><li>对应的模式：yyyy年MM月dd日 HH时mm分ss秒</li></ul><p>模式就是要转换的格式，只不过要使用英语字母代替掉格式中的数字</p><table><thead><tr><th>年</th><th>y</th></tr></thead><tbody><tr><td>月</td><td>M</td></tr><tr><td>日</td><td>d</td></tr><tr><td>时</td><td>H</td></tr><tr><td>分</td><td>m</td></tr><tr><td>秒</td><td>s</td></tr></tbody></table><h3 id="5-1-format方法"><a href="#5-1-format方法" class="headerlink" title="5.1 format方法"></a>5.1 format方法</h3><p><code>SimpleDateFormat</code>转换的方法：</p><ul><li><code>String format(Date date)</code>：将Date对象转成一个字符串并返回。</li></ul><p>Date对象转字符串的步骤：</p><ul><li>创建SimpleDateFormat，并在构造方法中指定模式。</li><li>调用SimpleDateFormat的format方法，将Date对象转成字符串。</li><li>输出结果。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01DateFormat</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        DateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日 hh时mm分ss秒"</span>);</span><br><span class="line">        String date = dateFormat.format(<span class="keyword">new</span> Date());</span><br><span class="line">        System.out.println(date);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-parse方法"><a href="#5-2-parse方法" class="headerlink" title="5.2 parse方法"></a>5.2 parse方法</h3><p>如果想要将一个字符串转成Date对象，那么也可以使用SimpleDateFormat去完成（字符串转成Date对象也叫做解析）</p><p><code>Date parse(String source)</code>：将字符串转成Date对象。</p><p>字符串转Date对象的步骤：</p><ul><li>定义字符串表示时间。</li><li>创建SimpleDateFormat对象，指定模式。</li><li>通过SimpleDateFormat对象调用parse方法， 将字符串转成Date对象</li><li>输出结果。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01DateFormat</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        DateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日 hh时mm分ss秒"</span>);</span><br><span class="line">        String date = dateFormat.format(<span class="keyword">new</span> Date());</span><br><span class="line">        System.out.println(date);</span><br><span class="line">        Date parse = dateFormat.parse(date);</span><br><span class="line">        System.out.println(parse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-小结"><a href="#5-3-小结" class="headerlink" title="5.3 小结"></a>5.3 小结</h3><p><code>Date -&gt; String</code>： 格式化。 使用SimpleDateFormat中的<code>format()</code>方法完成。</p><p><code>String -&gt; Date</code>： 解析。 使用SimpleDateFormat中的<code>parse()</code>方法完成。</p><h2 id="六、Calendar类"><a href="#六、Calendar类" class="headerlink" title="六、Calendar类"></a>六、Calendar类</h2><h3 id="6-1-概述和获取对象"><a href="#6-1-概述和获取对象" class="headerlink" title="6.1 概述和获取对象"></a>6.1 概述和获取对象</h3><p><code>Calendar</code>叫做日历类</p><ul><li><p>虽然Calendar叫做日历类，但是他和Date类一样，可以表示特定的时间瞬间，精确到毫秒。</p></li><li><p>Calendar是一个抽象类，如果要用，需要使用子类。</p></li><li><p>由于时间地区的敏感性，Calendar子类对象不能由我们自己去创建，要通过Calendar的静态方法getInstance获取。</p><ul><li><p><code>static Calendar getInstance()</code>：获取一个日历对象（Calendar子类对象）</p></li><li><p>示例</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取日历对象对象</span></span><br><span class="line">Calendar c = Calendar.getInstance();</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">System.out.println(c);</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>注意：之前创建对象都是自己new，现在获取日历对象需要调用Calendar的静态方法getInstance获取。</strong></p><h3 id="6-2-其他方法"><a href="#6-2-其他方法" class="headerlink" title="6.2 其他方法"></a>6.2 其他方法</h3><p><code>int get(int field)</code>： 获取指定字段的值。参数filed表示获取哪个字段的值。</p><p><code>void set(int field, int value)</code>：给指定日历字段设置值。</p><p><code>void add(int field, int amount)</code>：对指定字段的值进行计算。</p><p>演示：</p><p><code>get():</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在Calendar中有一个方法叫get，可以获取指定字段值</span></span><br><span class="line"><span class="comment"> *      int get(int field):获取日历中指定字段的值并返回</span></span><br><span class="line"><span class="comment"> * 举例：</span></span><br><span class="line"><span class="comment"> *      get(年)：获取年数据</span></span><br><span class="line"><span class="comment"> *      get(月)：获取月数据</span></span><br><span class="line"><span class="comment"> *      get(日)：获取日数据</span></span><br><span class="line"><span class="comment"> * get方法的参数时int类型，所以要传递int数字，我们可以使用int数字表示日历中的指定字段</span></span><br><span class="line"><span class="comment"> * 但是如果每次调用get党法，都传递数字，阅读性就会非常差</span></span><br><span class="line"><span class="comment"> * 在Calendar中给我们提供了很多静态常量，这些常量是一些数字，并根据变量名可以起到见名知意的作用，在调用get方法时最好传递这些常量。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 注意：Calendar中的月份是从0开始的，范围时0-11，比我们生活中的月份少1.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02CalendarGet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Calendar c = Calendar.getInstance();</span><br><span class="line">        <span class="keyword">int</span> year = c.get(Calendar.YEAR);</span><br><span class="line">        System.out.println(year);</span><br><span class="line">        <span class="comment">//Calendar中的月份是从0开始的，范围时0-11，比我们生活中的月份少1.</span></span><br><span class="line">        <span class="keyword">int</span> month = c.get(Calendar.MONTH) + <span class="number">1</span>;</span><br><span class="line">        System.out.println(month);</span><br><span class="line">        <span class="keyword">int</span> date = c.get(Calendar.DATE);</span><br><span class="line">        System.out.println(date);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>set():</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在Calendar有一个方法叫set，可以设定指定字段的值。</span></span><br><span class="line"><span class="comment"> * void set(int field, int value):给指定字段设置值</span></span><br><span class="line"><span class="comment"> *      参数field:给哪个字段设置值</span></span><br><span class="line"><span class="comment"> *      参数value:设置成什么值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03CalendarSet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Calendar c = Calendar.getInstance();</span><br><span class="line">        System.out.println(c.get(Calendar.YEAR)+ <span class="string">"-"</span> + (c.get(Calendar.MONTH) + <span class="number">1</span>) + <span class="string">"-"</span> + c.get(Calendar.DATE));</span><br><span class="line">        <span class="comment">//重新给指定字段设置值</span></span><br><span class="line">        c.set(Calendar.YEAR,<span class="number">1996</span>);</span><br><span class="line">        c.set(Calendar.MONTH,<span class="number">6</span>);</span><br><span class="line">        c.set(Calendar.DATE,<span class="number">6</span>);</span><br><span class="line">        System.out.println(c.get(Calendar.YEAR)+ <span class="string">"-"</span> + (c.get(Calendar.MONTH) + <span class="number">1</span>) + <span class="string">"-"</span> + c.get(Calendar.DATE));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>add():</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Calendar中的add()方法：可以对指定的值进行计算</span></span><br><span class="line"><span class="comment"> *      void add(int field, int amount)</span></span><br><span class="line"><span class="comment"> *          参数field:对哪个字段进行计算</span></span><br><span class="line"><span class="comment"> *          参数amount:如果计算</span></span><br><span class="line"><span class="comment"> *                  如果该数是一个正数，表示加上该值</span></span><br><span class="line"><span class="comment"> *                  如果该数是一个负数，表示减去该值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04CalendarAdd</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Calendar c = Calendar.getInstance();</span><br><span class="line">        System.out.println(c.get(Calendar.YEAR)+ <span class="string">"-"</span> + (c.get(Calendar.MONTH) + <span class="number">1</span>) + <span class="string">"-"</span> + c.get(Calendar.DATE));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        c.add(Calendar.YEAR,-<span class="number">24</span>);</span><br><span class="line">        System.out.println(c.get(Calendar.YEAR)+ <span class="string">"-"</span> + (c.get(Calendar.MONTH) + <span class="number">1</span>) + <span class="string">"-"</span> + c.get(Calendar.DATE));</span><br><span class="line">        c.add(Calendar.YEAR,<span class="number">25</span>);</span><br><span class="line">        System.out.println(c.get(Calendar.YEAR)+ <span class="string">"-"</span> + (c.get(Calendar.MONTH) + <span class="number">1</span>) + <span class="string">"-"</span> + c.get(Calendar.DATE));</span><br><span class="line">        c.set(Calendar.MONTH,<span class="number">0</span>);</span><br><span class="line">        c.add(Calendar.MONTH,<span class="number">11</span>);</span><br><span class="line">        System.out.println(c.get(Calendar.YEAR)+ <span class="string">"-"</span> + (c.get(Calendar.MONTH) + <span class="number">1</span>) + <span class="string">"-"</span> + c.get(Calendar.DATE));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、Math类"><a href="#七、Math类" class="headerlink" title="七、Math类"></a>七、Math类</h2><p>Math是Java中的一个数学工具类，里面有很多用于数学运算的方法。</p><h3 id="7-1-常见方法"><a href="#7-1-常见方法" class="headerlink" title="7.1 常见方法"></a>7.1 常见方法</h3><p><code>public static int abs(int a )</code>：求绝对值</p><p><code>public static double ceil(double a)</code>：向上取整</p><p><code>public static double floor(double a)</code>：向下取整</p><p><code>public static long round(double a)</code>：四舍五入</p><p><code>public static double pow(double a, double b)</code>：获取a的b次幂(方)</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Math</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Math.abs(-<span class="number">3</span>));</span><br><span class="line">        System.out.println(Math.abs(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(Math.ceil(<span class="number">3.14</span>));</span><br><span class="line">        System.out.println(Math.ceil(-<span class="number">3.14</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(Math.floor(<span class="number">3.14</span>));</span><br><span class="line">        System.out.println(Math.floor(-<span class="number">3.14</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(Math.round(<span class="number">3.5</span>));</span><br><span class="line">        System.out.println(Math.round(<span class="number">4.4</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(Math.pow(<span class="number">3</span>,<span class="number">2</span>));</span><br><span class="line">        System.out.println(Math.pow(<span class="number">5</span>,<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="八、System"><a href="#八、System" class="headerlink" title="八、System"></a>八、System</h2><p>System可以称为系统类，里面有一些方法可以完成系统的操作。</p><h3 id="8-1-常见方法"><a href="#8-1-常见方法" class="headerlink" title="8.1 常见方法"></a>8.1 常见方法</h3><ul><li><p><code>static void exit(int status)</code>:终止正在运行的Java虚拟机。</p><ul><li>参数是状态码，0表示正常终止。</li></ul></li><li><p><code>static long currentTimeMillis()</code>:获取当前的时间，以毫秒为单位【从1970年1月1日开始过了多少毫秒】</p></li></ul><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01TestSystem</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">        <span class="comment">//System.exit(0);</span></span><br><span class="line">        System.out.println(<span class="string">"world"</span>);</span><br><span class="line">        <span class="keyword">long</span> time = System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>currentTimeMillis()</code>方法可以用来计算程序的执行时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02System</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"hello,world!!!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"==============="</span>);</span><br><span class="line">        System.out.println((end-start)+<span class="string">"毫秒"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="九、BigInteger类"><a href="#九、BigInteger类" class="headerlink" title="九、BigInteger类"></a>九、BigInteger类</h2><p>如果是非常大的数字，用long也是无法表示或者进行计算的。此时就需要使用<code>BigInteger</code>了。</p><ul><li><code>BigInteger</code>表述数字，这个数字可以无限大</li></ul><h3 id="9-1-构造方法"><a href="#9-1-构造方法" class="headerlink" title="9.1 构造方法"></a>9.1 构造方法</h3><p><code>BigInteger(String val)</code>:根据字符串创建BigInteger对象。</p><h3 id="9-2-运算方法"><a href="#9-2-运算方法" class="headerlink" title="9.2 运算方法"></a>9.2 运算方法</h3><p><code>BigInteger add(BigInteger val)</code>:进行加法运算</p><p><code>BigInteger subtract(BigInteger val)</code>:进行减法运算</p><p><code>BigInteger multiply(BigInteger val)</code>:进行乘法运算</p><p><code>BigInteger divide(BigInteger val)</code>:进行除法运算</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01BigInteger</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BigInteger a = <span class="keyword">new</span> BigInteger(<span class="string">"99999999999999999999999999999999999999999999999999999999999999999999"</span>);</span><br><span class="line">        System.out.println(a);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加法</span></span><br><span class="line">        System.out.println(a.add(<span class="keyword">new</span> BigInteger(<span class="string">"1"</span>)));</span><br><span class="line">        <span class="comment">//减法</span></span><br><span class="line">        System.out.println(a.subtract(<span class="keyword">new</span> BigInteger(<span class="string">"9999999999"</span>)));</span><br><span class="line">        <span class="comment">//乘法</span></span><br><span class="line">        System.out.println(a.multiply(<span class="keyword">new</span> BigInteger(<span class="string">"2"</span>)));</span><br><span class="line">        <span class="comment">//除法</span></span><br><span class="line">        System.out.println(a.divide(<span class="keyword">new</span> BigInteger(<span class="string">"9"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十、BigDecimal类"><a href="#十、BigDecimal类" class="headerlink" title="十、BigDecimal类"></a>十、BigDecimal类</h2><p><code>BigDecimal</code>表示精确的小数</p><p>java中小数是不精确的，在运算优势出现精度问题，比如1.3+2.1结果是3.4000000000000004。</p><p>如果想要在运算时解决这个精度问题，就可以使用<code>BigDecimal</code>。</p><h3 id="10-1-构造方法"><a href="#10-1-构造方法" class="headerlink" title="10.1 构造方法"></a>10.1 构造方法</h3><p><code>BigDecimal(double val)</code>：根据double小数创建一个BigDecimal对象【会产生精度问题，不推荐！！!】</p><p><code>BigDecimal(String val)</code>:根据String创建一个BigDecimal对象【推荐！！！】</p><h3 id="10-2-运算方法"><a href="#10-2-运算方法" class="headerlink" title="10.2 运算方法"></a>10.2 运算方法</h3><p><code>BigDecimal add(BigDecimal augend)</code>：加法运算</p><p><code>BigDecimal subtract(BigDecimal subtrahend)</code>：减法运算</p><p><code>BigDecimal multiply(BigDecimal multiplicand)</code> ：乘法运算</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01BigDecimal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BigDecimal a = <span class="keyword">new</span> BigDecimal(<span class="string">"1.6"</span>);</span><br><span class="line">        BigDecimal b = <span class="keyword">new</span> BigDecimal(<span class="string">"1.3"</span>);</span><br><span class="line">        <span class="comment">//加法</span></span><br><span class="line">        System.out.println(a.add(b));</span><br><span class="line">        <span class="comment">//减法</span></span><br><span class="line">        System.out.println(a.subtract(b));</span><br><span class="line">        <span class="comment">//乘法</span></span><br><span class="line">        System.out.println(a.multiply(b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BigDecimal中的除法运算：</p><p><code>BigDecimal divide(BigDecimal divisor)</code>：除法运算，如果除不尽时，会报错。</p><p><code>BigDecimal divide(BigDecimal divisor, int scale, int roundingMode)</code>：除法运算，可以保留指定为的小数部分</p><ul><li>参数<code>divisor</code>：表示除以几</li><li>参数<code>scale</code>：保留几位小数</li><li>参数<code>roundingMode</code>:舍入模式 。这个参数我们要是哟个常量，Round_HALF_UP 表示四舍五入的模式。</li></ul><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02BigDecimal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BigDecimal a = <span class="keyword">new</span> BigDecimal(<span class="string">"10"</span>);</span><br><span class="line">        BigDecimal b = <span class="keyword">new</span> BigDecimal(<span class="string">"3"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//除法</span></span><br><span class="line">        <span class="comment">//System.out.println(a.divide(b));//除不尽，会报错。</span></span><br><span class="line">        System.out.println(a.divide(b,<span class="number">5</span>,BigDecimal.ROUND_HALF_UP));<span class="comment">//保留五位小数，四舍五入模式</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十一、Arrays类"><a href="#十一、Arrays类" class="headerlink" title="十一、Arrays类"></a>十一、Arrays类</h2><p>Arrays是操作数组的工具类。</p><h3 id="11-1-常用方法"><a href="#11-1-常用方法" class="headerlink" title="11.1 常用方法"></a>11.1 常用方法</h3><p><code>static String toString(数组)</code>：将数组内容转成指定格式的字符串并返回</p><p><code>static void sort(数组)</code>:对数组的内容进行排序</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Arrays</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">66</span>,<span class="number">77</span>,<span class="number">99</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>&#125;;</span><br><span class="line">        <span class="comment">//将数组内容转成字符串</span></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">        <span class="comment">//对数组进行排序:从小到大</span></span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十二、包装类"><a href="#十二、包装类" class="headerlink" title="十二、包装类"></a>十二、包装类</h2><h3 id="12-1-概念引入"><a href="#12-1-概念引入" class="headerlink" title="12.1 概念引入"></a>12.1 概念引入</h3><p>基本类型：基本类型只是一些简单的数据，只能直接使用或者进行运算，无法调用方法，优点效率高。</p><p>包装类：包装类是引用类型，可以创建对象，并且可以调用方法。功能比较强大。</p><p>每一个基本类型都有对应的包装类，包装类是引用类型。</p><table><thead><tr><th>基本类型</th><th>引用类型(包装类)</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>boolean</td><td>Boolean</td></tr><tr><td>char</td><td>Character</td></tr></tbody></table><p>在使用方式上，基本类型和包装类的使用方式基本一致。</p><h3 id="12-2-自动拆装箱"><a href="#12-2-自动拆装箱" class="headerlink" title="12.2 自动拆装箱"></a>12.2 自动拆装箱</h3><p>在<code>JDK5</code>的时候，多了一个自动拆装箱的特性，所以基本类型可以和对应得包装类自动转换</p><p>自动拆装箱：</p><ul><li>自动拆箱：包装类类型转成基本类型</li><li>自动装箱：基本类型转成对象的包装类类型</li></ul><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Wrap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//自动装箱：10默认时基本类型，把int类型赋值给Integer类型，那么基本类型会自动转成包装类类型</span></span><br><span class="line">        Integer a = <span class="number">10</span>;</span><br><span class="line">        Integer b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自动拆箱--&gt;自动装箱：先拆后装</span></span><br><span class="line">        <span class="comment">//Integer没有办法进行加减乘除的运算，首先进行自动拆箱，转成int类型，然后在运算，计算完成后，结果是int类型，将结果进行自动装箱，转成Integer类型。</span></span><br><span class="line">        Integer sum = a + b;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-3-手动拆装箱-了解"><a href="#12-3-手动拆装箱-了解" class="headerlink" title="12.3 手动拆装箱(了解)"></a>12.3 手动拆装箱(了解)</h3><p>手动装箱（int—&gt;Integer）</p><ul><li>可以使用Integer中的静态方法valueOf完成</li><li><code>static Integer valueOf(int i)</code>：将参数int值转成Integer并返回</li></ul><p>手动拆箱（Integer —&gt; int）</p><ul><li>可以使用intValue完成</li><li><code>int intValue()</code>:将Integer转成int并返回</li></ul><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Wrap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">        <span class="comment">//手动装箱</span></span><br><span class="line">        Integer numIn = Integer.valueOf(num);</span><br><span class="line">        System.out.println(numIn);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"================="</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//手动拆箱</span></span><br><span class="line">        <span class="keyword">int</span> basisNum = numIn.intValue();</span><br><span class="line">        System.out.println(basisNum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-4-Integer中的常见方法"><a href="#12-4-Integer中的常见方法" class="headerlink" title="12.4 Integer中的常见方法"></a>12.4 Integer中的常见方法</h3><ul><li><code>Integer(int value)</code>:根据int数字创建Integer对象。—  装箱</li><li><code>Integer(String s)</code>:根据字符串创建Integer对象</li><li><code>static Integer valueOf(int i)</code>:将int转成Integer并返回</li><li><code>static Integer valueOf(String s)</code>:将String转成Integer并返回</li></ul><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoInteger</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//public Integer(int value)：构造方法，根据一个int数字创建Integer对象（已过时）</span></span><br><span class="line">        Integer a = <span class="keyword">new</span> Integer(<span class="number">10</span>);</span><br><span class="line">        System.out.println(a);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public Integer(String s)：构造方法， 根据一个String创建Integer对象（已过时）</span></span><br><span class="line">        Integer b = <span class="keyword">new</span> Integer(<span class="string">"10"</span>);</span><br><span class="line">        System.out.println(b);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public static Integer valueOf(int i)：静态方法， 根据一个int数字获取Integer对象。</span></span><br><span class="line">        <span class="comment">//Integer c = 10; 内部会自动装箱，装箱代码（Integer c = Integer.valueOf(10)）</span></span><br><span class="line">        Integer c = Integer.valueOf(<span class="number">10</span>);<span class="comment">//装箱代码。</span></span><br><span class="line">        System.out.println(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// public static Integer valueOf(String s)：静态方法， 根据一个String获取Integer对象。</span></span><br><span class="line">        Integer d = Integer.valueOf(<span class="string">"10"</span>);</span><br><span class="line">        System.out.println(d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-5-字符串和基本类型相互转换"><a href="#12-5-字符串和基本类型相互转换" class="headerlink" title="12.5 字符串和基本类型相互转换"></a>12.5 字符串和基本类型相互转换</h3><ul><li><p>基本类型 -&gt; 字符串</p><ul><li><p>直接在基本类型数据后面加上<code>&quot;&quot;</code>;例如：  <code>1+&quot;abc&quot; -&gt; &quot;1abc&quot;</code></p></li><li><p>调用String的静态方法valueOf</p><p> ​    <code>static String valueOf(基本数据类型数据)</code>：将数据转成字符串并返回</p></li></ul></li></ul><ul><li><p>字符串 -&gt; 基本类型</p><ul><li>如果要把字符串转成基本类型，可以使用基本类型对应的包装类中的parseXxx方法</li><li>除了Character,每个包装类中都有一个静态方法parseXxx，可以把字符串转成对应的基本类型<ul><li>比如:要把字符串转成int类型，使用Integer中的parseInt方法进行转换<ul><li><code>Integer.parseInt(String s)</code></li><li>…</li></ul></li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04Parse</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">        <span class="comment">// String s = num + "";</span></span><br><span class="line">        String s = String.valueOf(num);</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"=========================="</span>);</span><br><span class="line">        String ss = <span class="string">"123456789"</span>;</span><br><span class="line">        <span class="keyword">int</span> num1 = Integer.parseInt(ss);</span><br><span class="line">        System.out.println(num1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、权限修饰符&quot;&gt;&lt;a href=&quot;#一、权限修饰符&quot; class=&quot;headerlink&quot; title=&quot;一、权限修饰符&quot;&gt;&lt;/a&gt;一、权限修饰符&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;不同权限的访问能力：&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;描述\修饰符名称&lt;/th&gt;
&lt;th&gt;public&lt;/th&gt;
&lt;th&gt;protected&lt;/th&gt;
&lt;th&gt;(空的)&lt;/th&gt;
&lt;th&gt;private&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;同一类中&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;同一个包中(子类与无关类)&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;不同包的子类&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;不同包的无关类&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;编写代码时，如果没有特殊的考虑，建议这样使用权限：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;成员变量使用private，隐藏细节。&lt;/li&gt;
&lt;li&gt;构造方法使用public，方便创建对象。&lt;/li&gt;
&lt;li&gt;成员方法使用public，方便调用方法。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://sunmoon.com/categories/Java/"/>
    
    
      <category term="基础" scheme="http://sunmoon.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="学习" scheme="http://sunmoon.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="面向对象" scheme="http://sunmoon.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="API" scheme="http://sunmoon.com/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>static、接口、多态、内部类</title>
    <link href="http://sunmoon.com/2020/07/24/static%E3%80%81%E6%8E%A5%E5%8F%A3%E3%80%81%E5%A4%9A%E6%80%81%E3%80%81%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    <id>http://sunmoon.com/2020/07/24/static%E3%80%81%E6%8E%A5%E5%8F%A3%E3%80%81%E5%A4%9A%E6%80%81%E3%80%81%E5%86%85%E9%83%A8%E7%B1%BB/</id>
    <published>2020-07-24T12:22:29.000Z</published>
    <updated>2020-07-24T12:24:41.846Z</updated>
    
    <content type="html"><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="一、static关键字"><a href="#一、static关键字" class="headerlink" title="一、static关键字"></a>一、static关键字</h2><h3 id="static修饰变量"><a href="#static修饰变量" class="headerlink" title="static修饰变量"></a>static修饰变量</h3><p>如果某个成员变量用<code>static</code>关键字修饰，那么这个成员变量就不再属于对象了，<code>属于类</code>。会被该类的<code>所有对象共享</code></p><p>被<code>static</code>修饰的成员，可以通过对象调用，也可以通过类名直接调用【推荐<code>类名直接调用</code>】</p><a id="more"></a><p>格式：</p><p><code>类名.成员变量</code></p><p>小结：</p><ul><li>如果某个成员变量不使用static修饰，那么这个成员变量是属于对象的，要有对象才能调用</li><li>如果某个成员变量使用static修饰，那么这个成员变量是属于类的，可以通过类名直接调用</li></ul><h3 id="static修饰方法"><a href="#static修饰方法" class="headerlink" title="static修饰方法"></a>static修饰方法</h3><p>如果一个方法使用static修饰，就不属于对象了，属于类，可以通过类名直接调用</p><p>静态方法和非静态方法：</p><ul><li>静态方法：可以通过类名，也可以通过对象名调用，建议通过类名调用</li><li>非静态方法：必须有对象才能调用。</li></ul><p><strong>如果调用本类中的静态方法，可以省略类名。</strong></p><h3 id="静态中的注意事项"><a href="#静态中的注意事项" class="headerlink" title="静态中的注意事项"></a>静态中的注意事项</h3><ol><li>静态中不能直接访问非静态的内容<ul><li>静态属于类，非静态属于对象，刚开始有类的时候还没有对象呢，所以不能再静态中使用非静态内容</li></ul></li><li>静态方法中不能使用this和super关键字</li></ol><h2 id="二、接口"><a href="#二、接口" class="headerlink" title="二、接口"></a>二、接口</h2><h3 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h3><p>接口是一种规范（给类定义的规范，类和接口发生关系后，类需要重写接口中所有的抽象方法）</p><p>接口也是一种引用类型。</p><p>什么是接口？</p><ul><li>接口是一种极端的抽象类，接口中只能定义【抽象方法】。【<code>JDK8之前</code>】</li><li>接口中新增【默认方法】和【静态方法】【<code>JDK8的时候</code>】</li><li>接口中又新增了【私有方法】【<code>JDK9的时候</code>，了解即可】</li></ul><h3 id="2-2-定义格式"><a href="#2-2-定义格式" class="headerlink" title="2.2 定义格式"></a>2.2 定义格式</h3><p>定义接口关键字：<code>interface</code></p><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 接口名</span>&#123;</span><br><span class="line"><span class="comment">//抽象方法【jdk8之前】</span></span><br><span class="line">    <span class="comment">//默认方法【jdk8】</span></span><br><span class="line">    <span class="comment">//静态方法【jdk8】</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>·<strong>注意：</strong></p><ul><li><p>接口中的抽象方法可以省略public abstract关键字</p></li><li><p>如果省略public abstract，那么抽象方法也是使用public abstract修饰的</p></li></ul><h3 id="2-3-接口的使用"><a href="#2-3-接口的使用" class="headerlink" title="2.3 接口的使用"></a>2.3 接口的使用</h3><p>接口与抽象类都不能创建对象</p><p>接口也是用于给别的类“实现”的，实现的作用和继承基本类似。</p><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 实现类 <span class="keyword">implements</span> 接口名</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//实现类必须重写接口中的所有抽象方法</span></span><br><span class="line"><span class="comment">//实现类可以选择性重写接口中的默认方法（重写后不能有default关键字）</span></span><br><span class="line">    <span class="comment">//静态方法没有重写的说法，因为静态方法通过其所在的接口名/类名即可调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-接口的多实现"><a href="#2-4-接口的多实现" class="headerlink" title="2.4 接口的多实现"></a>2.4 接口的多实现</h3><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 实现类 <span class="keyword">implements</span> 接口名1,接口名2,...</span>&#123;</span><br><span class="line"><span class="comment">//实现类必须重写接口中所有的抽象方法，如果有一样的抽象方法，实现类是需要重写一次</span></span><br><span class="line">    <span class="comment">//实现类选择性重写所有接口的默认方法，如果有一样的默认方法，实现类必须重写一次</span></span><br><span class="line">    <span class="comment">//静态方法没有重写的说法，因为静态方法通过其所在的接口名/类名即可调用，如果有一样的静态方法，也不影响</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-实现和继承的优先级问题"><a href="#2-5-实现和继承的优先级问题" class="headerlink" title="2.5 实现和继承的优先级问题"></a>2.5 实现和继承的优先级问题</h3><p>Java中允许继承和实现同时存在，允许一个类继承一个父类的同时实现多个接口。</p><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 子类/实现类 <span class="keyword">extends</span> 父类 <span class="keyword">implements</span> 接口1,接口2,...</span>&#123;</span><br><span class="line"><span class="comment">//1.必须重写父类以及接口中的所有抽象方法</span></span><br><span class="line">    <span class="comment">//如果有一样的抽象方法，只需要重写一次</span></span><br><span class="line">        <span class="comment">//2.选择性重写父类的普通方法和所有接口的默认方法，</span></span><br><span class="line">    <span class="comment">//如果有一样的默认方法，必须重写一次</span></span><br><span class="line">                <span class="comment">//如果有父类的普通方法和接口的默认方法一样，实现类可以不重写</span></span><br><span class="line">        <span class="comment">//3.静态方法没有重写的说法。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【继承比实现的优先级高】</p><h3 id="2-6-接口的的多继承【了解】"><a href="#2-6-接口的的多继承【了解】" class="headerlink" title="2.6 接口的的多继承【了解】"></a>2.6 接口的的多继承【了解】</h3><p><code>类和类         单继承</code></p><p><code>类和接口     多实现</code></p><p><code>接口和接口     多继承</code></p><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 子接口 <span class="keyword">extends</span> 父接口1,父接口2,...</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>如果多个父接口中有同名的抽象方法，没有影响，抽象方法没有方法体，将来肯定要重写，，重写之后的内容是什么，执行的内容就是什么</p></li><li><p>如果父接口中有同名的默认方法，有影响，必须在子接口中进行重写</p></li></ol><h3 id="2-7-接口中其他成员特点"><a href="#2-7-接口中其他成员特点" class="headerlink" title="2.7 接口中其他成员特点"></a>2.7 接口中其他成员特点</h3><ol><li>接口中无法定义普通的成员变量，只能定义常量，常量必须有三个修饰符修饰：public static final</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> AGE = <span class="number">18</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>接口中没有构造方法，接口也不能创建对象</p></li><li><p>接口中，没有静态代码块</p></li><li><p>在接口有很多地方可以省略</p><ul><li>接口中方法默认权限都是public(可以省略)</li><li>接口中抽象方法连abstract关键字都可以省略(抽象类不行)</li><li>接口中常量，默认修饰符是public static final，并且可以省略</li></ul></li></ol><h3 id="2-8-抽象类和接口练习"><a href="#2-8-抽象类和接口练习" class="headerlink" title="2.8 抽象类和接口练习"></a>2.8 抽象类和接口练习</h3><p>通过实例进行分析和代码演示抽象类和接口的用法。</p><p>举例：</p><p>犬：</p><ul><li>行为：吼叫；吃饭；</li></ul><p>缉毒犬：</p><ul><li>行为：吼叫；吃饭；缉毒；</li></ul><p>由于犬分为很多种类，他们吼叫和吃饭的方式不一样，在描述的时候不能具体化，也就是吼叫和吃饭的行为不能明确。当描述行为时，行为的具体动作不能明确，这时可以将这个行为写为抽象行为，那么这个类也就是抽象类。可是有的犬还有其他额外功能，而这个功能并不在这个事物的体系中 , 例如 : 缉毒犬。缉毒的这个功能有好多种动物都有 , 例如 : 缉毒猪 , 缉毒鼠。我们可以将这个额外功能定义接口中 ,让缉毒犬继承犬且实现缉毒接口 , 这样缉毒犬既具备犬科自身特点也有缉毒功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 父类：狗类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span>  </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 叫</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 吃</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JiDu</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缉毒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">jidu</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 缉毒犬类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JiDuDog</span> <span class="keyword">extends</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">JiDu</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"嗷嗷叫!!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"嗷嗷吃!!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jidu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"缉毒中..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 测试类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    JiDuDog dog = <span class="keyword">new</span> JiDuDog();</span><br><span class="line"></span><br><span class="line">    dog.bark();</span><br><span class="line">    dog.eat();</span><br><span class="line">    dog.jidu();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、多态"><a href="#三、多态" class="headerlink" title="三、多态"></a>三、多态</h2><h3 id="3-1-概念"><a href="#3-1-概念" class="headerlink" title="3.1 概念"></a>3.1 概念</h3><p>多态是继封装、继承之后，面向对象的第三大特性。</p><p>一种事物具备多种形态，这个就是多态。</p><p>比如：小明是一个学生，同时肯定也是一个人，所以小明同时具备学生和人的形态，这个就是多态</p><p><strong>多态：是指同一行为，具有多个不同表现形式。</strong></p><h3 id="3-2-多态的体现"><a href="#3-2-多态的体现" class="headerlink" title="3.2 多态的体现"></a>3.2 多态的体现</h3><p>多态在代码中的体现(父类变量(引用)指向子类对象)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">父类类型 变量名 = <span class="keyword">new</span> 子类类型();</span><br></pre></td></tr></table></figure><p>父类类型：指子类对象继承的父类类型,或者实现的父接口类型</p><p>接口多态格式(接口类型指向实现类对象)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">接口类型 变量名 = <span class="keyword">new</span> 实现类类型();</span><br></pre></td></tr></table></figure><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建对象</span></span><br><span class="line">Animal dog = <span class="keyword">new</span> Dog();</span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line">dog.say()</span><br></pre></td></tr></table></figure><p><strong>当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误；如果有，执行的是子类重写后方法。</strong></p><p>根据多态性，我们可以把子类类型当成父类类型去看待【狗肯定是动物，可以把狗当成动物去看待】</p><p><code>多态在代码中的体现为父类引用指向子类对象。</code></p><p><strong>小结：如果我们通过多态的方式创建对象，调用方法时，运行的是子类的方法(<code>创建的是谁的对象，调用的就是谁的方法</code>)</strong></p><h3 id="3-3-多态的好处"><a href="#3-3-多态的好处" class="headerlink" title="3.3 多态的好处"></a>3.3 多态的好处</h3><p>好处：方法参数如果是父类类型，那么可以传递任何子类对象。</p><p>原因：根据多态性，子类类型可以当作父类类型去看待。比如狗肯定是动物，所以可以当成动物去看待。</p><p>参数需要时动物(父类)类型，那么我们可以传递狗(子类)对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动物类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 狗类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"汪汪汪...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 猫类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"喵喵喵..."</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        showSay(<span class="keyword">new</span> Dog());</span><br><span class="line">        showSay(<span class="keyword">new</span> Cat());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showSay</span><span class="params">(Animal animal)</span></span>&#123;</span><br><span class="line">        animal.say();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">汪汪汪....</span><br><span class="line">喵喵喵...</span><br></pre></td></tr></table></figure><p><strong><code>小结：多态的好处是提高程序的灵活性，扩展性</code></strong></p><h3 id="3-4-多态访问成员的特点以及优缺点"><a href="#3-4-多态访问成员的特点以及优缺点" class="headerlink" title="3.4 多态访问成员的特点以及优缺点"></a>3.4 多态访问成员的特点以及优缺点</h3><p><code>多态访问成员变量的特点</code>【了解，不用】</p><ul><li>编译看左边父类，如果父类没有这个变量。编译时期，语法报错</li><li>运行也看左边父类，运行时，真正执行的时父类的变量</li></ul><p><code>多态访问成员方法的特点</code>【重要】</p><ul><li>编译看左边父类，如果父类中没有这个方法，会编译报错</li><li>运行看右边子类，如果程序运行，运行的是子类的方法。</li></ul><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">20</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"父类方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"子类方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Fu fu = <span class="keyword">new</span> Zi();</span><br><span class="line">        System.out.println(fu.num);</span><br><span class="line">        fu.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">20</span></span><br><span class="line">子类方法</span><br></pre></td></tr></table></figure><h4 id="3-4-1-多态的优缺点："><a href="#3-4-1-多态的优缺点：" class="headerlink" title="3.4.1 多态的优缺点："></a>3.4.1 多态的优缺点：</h4><ul><li>优点：让程序更加灵活，参数时父类类型，可以传递子类对象</li><li>缺点，只能访问父类有的东西，不能访问子类特有的内容。【多态方式使用成员，编译看左边父类】</li></ul><h3 id="3-5-引用类型转换"><a href="#3-5-引用类型转换" class="headerlink" title="3.5 引用类型转换"></a>3.5 引用类型转换</h3><h4 id="3-5-1-向上转型"><a href="#3-5-1-向上转型" class="headerlink" title="3.5.1 向上转型"></a>3.5.1 向上转型</h4><p>向上转型：子类类型转成父类类型，多态本身是子类类型向父类类型向上转换的过程，这个过程是默认的。</p><p><code>父类类型 变量名 = new 子类类型();</code></p><h4 id="3-5-2-向下转型"><a href="#3-5-2-向下转型" class="headerlink" title="3.5.2 向下转型"></a>3.5.2 向下转型</h4><p>向下转型：父类类型向子类类型向下转换的过程，这个过程是强制的。</p><p>前提：向下转型之前必须要有向上转型</p><p>格式：</p><ul><li><code>子类类型变量名= (子类类型) 父类变量名;</code></li></ul><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//向上转型</span></span><br><span class="line">Animal a1 = <span class="keyword">new</span> Cat();</span><br><span class="line">Animal a2 = <span class="keyword">new</span> Dog();</span><br><span class="line"><span class="comment">// 向下转型</span></span><br><span class="line">Cat cat = (Cat) a1;</span><br><span class="line">Dog dog = (Dog) a2;</span><br></pre></td></tr></table></figure><h4 id="3-5-3-为什么要向下转型"><a href="#3-5-3-为什么要向下转型" class="headerlink" title="3.5.3 为什么要向下转型"></a>3.5.3 为什么要向下转型</h4><p><strong>多态的弊端就是不能调用子类特有的方法，如果想要调用子类特有的内容，需要向下转型。</strong></p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"狗吃肉..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//特有的行为</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lookDoor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"看门..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"猫吃鱼..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">catchMouse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"猫抓老师"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向上转型</span></span><br><span class="line">        Animal a1 = <span class="keyword">new</span> Cat();</span><br><span class="line">        Animal a2 = <span class="keyword">new</span> Dog();</span><br><span class="line">        <span class="comment">// 向下转型</span></span><br><span class="line">        Cat cat = (Cat) a1;</span><br><span class="line">        Dog dog = (Dog) a2;</span><br><span class="line"></span><br><span class="line">        a1.eat();</span><br><span class="line">        cat.catchMouse();</span><br><span class="line">        a2.eat();</span><br><span class="line">        dog.lookDoor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-5-4-转型的异常"><a href="#3-5-4-转型的异常" class="headerlink" title="3.5.4 转型的异常"></a>3.5.4 转型的异常</h4><p>如果父类类型表示的对象不是目标类型，在转换的时候就会报错。（如果父类类型表示的时髦，但是我们却把他向下转型成后，就会出现异常）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 向上转型</span></span><br><span class="line">    Animal a=<span class="keyword">new</span> Cat();  </span><br><span class="line">    a.eat();     <span class="comment">// 调用的是 Cat 的 eat           </span></span><br><span class="line">    <span class="comment">// 向下转型</span></span><br><span class="line">    Dog d= (Dog)a;      </span><br><span class="line">    d.watchHouse();        <span class="comment">// 调用的是 Dog 的 watchHouse 【运行报错】    &#125;  &#125;</span></span><br></pre></td></tr></table></figure><p>上述代码会报错，<code>ClassCastException</code>：类型转换异常。</p><p>解决方法：</p><p>可以在向下转型之前进行判断，Java提供了<code>instanceof</code>关键字。</p><p><code>instanceof</code>：可以判断某个变量表示的是否是该类型的对象</p><p>格式：</p><ul><li><code>变量名 instanceof 数据类型</code></li></ul><p>举例：</p><p><code>a instanceof Dog</code>：判断a是否是Dog类型的对象。</p><p>使用场景：</p><ul><li>在向下转型之前，可以使用<code>instanceof</code>关键字进行判断，如果类型符合，在进行向下转换</li></ul><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Animal a = <span class="keyword">new</span> Cat();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">///判断a属于创建的哪个子类，向下转型成相应的子类，执行相应的方法。</span></span><br><span class="line">        <span class="keyword">if</span> (a <span class="keyword">instanceof</span> Dog)&#123;</span><br><span class="line">            Dog dog = (Dog) a;</span><br><span class="line">            dog.lookDoor();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(a <span class="keyword">instanceof</span> Cat)&#123;</span><br><span class="line">            Cat cat = (Cat) a;</span><br><span class="line">            cat.catchMouse();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、内部类"><a href="#四、内部类" class="headerlink" title="四、内部类"></a>四、内部类</h2><h3 id="4-1-什么是内部类"><a href="#4-1-什么是内部类" class="headerlink" title="4.1 什么是内部类"></a>4.1 什么是内部类</h3><p>将一个类A定义在另一个类B里面，里面的那个类A就称为内部类，B则称为外部类</p><h3 id="4-2-成员内部类"><a href="#4-2-成员内部类" class="headerlink" title="4.2 成员内部类"></a>4.2 成员内部类</h3><ul><li>成员内部类：定义在类中方法外的类。</li></ul><p>定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 外部类</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 内部类</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 人类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 心脏类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Heart</span></span>&#123;</span><br><span class="line">        <span class="comment">//心房属性</span></span><br><span class="line">        <span class="keyword">int</span> heartRoom = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//心跳方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jump</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"心脏蹦蹦跳"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-1-成员内部类的使用"><a href="#4-2-1-成员内部类的使用" class="headerlink" title="4.2.1 成员内部类的使用"></a>4.2.1 成员内部类的使用</h4><ul><li>在创建成员类对象是，需要创建外部类对象</li></ul><p>格式：<code>外部类名.内部类名对象名=new外部类型().new内部类型()</code></p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Person.Heart heart = <span class="keyword">new</span> Person().<span class="keyword">new</span> Heart();</span><br><span class="line">    System.out.println(heart.heartRoom);</span><br><span class="line">    heart.jump();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-2-注意"><a href="#4-2-2-注意" class="headerlink" title="4.2.2 注意"></a>4.2.2 注意</h4><ol><li>内部类编译之后也会生成.class文件，名字为: 外部类$内部类.class</li><li>内部类中可以访问外部类的成员</li><li>外部类中不能访问内部类成员</li></ol><h3 id="4-3-匿名内部类"><a href="#4-3-匿名内部类" class="headerlink" title="4.3 匿名内部类"></a>4.3 匿名内部类</h3><p>匿名内部类也是一种内部类，只不过这种内部类没有名字</p><p>作用：临时定义某个类的子类，在创建该子类的对象。</p><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 父类或接口()&#123;</span><br><span class="line">    重写的方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Person()&#123;</span><br><span class="line">    重写的方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码真正创建的是Person子类对象，但是这个子类叫什么，我们不知道，因为是匿名的。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 吃</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//匿名内部类的格式创建Animal的子类对象</span></span><br><span class="line">    <span class="keyword">new</span> Animal()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"某种动物在吃..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>扩展：匿名内部类其实是有名字的，名字的格式为：【外部类$1】,【外部类$2】</strong></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><p>概念：</p><ul><li>被static修饰的东西属于类，不属于对象，可以被该类的所有对象共享。</li><li>被static修饰的东西可以通过类名直接调用，可以通过对象调用，推荐通过类名调用。</li><li>没有被static修饰的东西属于对象的，必须有对象才能调用。</li></ul><p>注意：</p><ul><li>静态不能直接使用非静态的内容。</li><li>静态方法中不能出现this和super</li></ul><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>概念：接口是用来定义规范的</p><p>定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 接口名 </span>&#123;</span><br><span class="line">    抽象方法【抽象方法】</span><br><span class="line">    常量</span><br><span class="line">    默认方法</span><br><span class="line">    静态方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h4><ul><li>格式：<code>public abstract 返回值类型 方法名(参数列表);</code></li><li>使用：实现类在实现接口时，需要重写这个接口中的所有的抽象方法。除非实现类是一个抽象类。</li></ul><h4 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h4><ul><li><p>格式：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">default</span> 返回值类型 方法名(参数列表) &#123;</span><br><span class="line">    方法体;</span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用：实现类在实现接口时，可以不重写默认方法。</p></li></ul><h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><ul><li><p>格式：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> 返回值类型 方法名(参数列表) &#123;</span><br><span class="line">    方法体;</span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用：接口中的静态方法要通过接口名字直接调用。</p></li></ul><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><ul><li>格式：<code>public static final 数据类型 常量名 = 值;</code></li><li>使用：接口中的常量要通过接口名直接调用。</li></ul><h4 id="接口和类的关系"><a href="#接口和类的关系" class="headerlink" title="接口和类的关系"></a>接口和类的关系</h4><ul><li>类和类之间是继承，一个类只能继承一个父类。</li><li>类和接口是实现，一个类可以实现多个接口。</li><li>接口和接口是继承，一个接口可以继承多个接口。</li></ul><p>继承关键字：<code>extends</code></p><p>实现关键字：<code>implements</code></p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>概念：一种事物具备多种形态，比如小明是学生，肯定也是一个人。</p><p>在代码中的体现（<strong>父类类型指向子类对象</strong>）：<code>父类类型 变量名 = new 子类类型();</code></p><p><strong>在多态中，子类类型可以当成父类类型去看待。</strong></p><h4 id="优势与弊端"><a href="#优势与弊端" class="headerlink" title="优势与弊端"></a>优势与弊端</h4><p>优势：提高代码的灵活性，方法的参数是父类类型，那么可以传递任何子类对象。</p><p>弊端：不能访问子类特有的内容。</p><h4 id="多态访问方法的特点"><a href="#多态访问方法的特点" class="headerlink" title="多态访问方法的特点"></a>多态访问方法的特点</h4><p>编译看左边父类：如果父类没有该方法会报错。</p><p>运行看右边子类：运行执行的是子类的方法。</p><h4 id="引用类型的转换"><a href="#引用类型的转换" class="headerlink" title="引用类型的转换"></a>引用类型的转换</h4><ul><li><p>向上转型（子类类型转成父类类型）：<code>父类类型 变量名 = new 子类类型();</code></p></li><li><p>向下转型（父类类型转成子类类型）：<code>子类类型 变量名 = (子类类型) 父类变量;</code></p></li></ul><p><strong>向下转型的目的：为了访问子类的特有内容</strong></p><h4 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h4><ul><li>格式：<code>变量名 instanceof 数据类型</code></li><li>作用：判断该变量表示的对象是否是指定类型的。</li><li>举例：<code>a interfaceof Dog</code>(判断a表示的对象是否是Dog类型)</li></ul><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p>成员内部类【了解】</p><h4 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h4><p>作用：临时定义某个类的子类，创建该子类的对象。</p><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 父类或接口() &#123;</span><br><span class="line">    重写的方法;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Person() &#123;</span><br><span class="line">    重写的方法;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个代码真正创建的时Person类的子类对象，只不过这个子类叫什么名字，我们不知道，因为没有名字。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;h2 id=&quot;一、static关键字&quot;&gt;&lt;a href=&quot;#一、static关键字&quot; class=&quot;headerlink&quot; title=&quot;一、static关键字&quot;&gt;&lt;/a&gt;一、static关键字&lt;/h2&gt;&lt;h3 id=&quot;static修饰变量&quot;&gt;&lt;a href=&quot;#static修饰变量&quot; class=&quot;headerlink&quot; title=&quot;static修饰变量&quot;&gt;&lt;/a&gt;static修饰变量&lt;/h3&gt;&lt;p&gt;如果某个成员变量用&lt;code&gt;static&lt;/code&gt;关键字修饰，那么这个成员变量就不再属于对象了，&lt;code&gt;属于类&lt;/code&gt;。会被该类的&lt;code&gt;所有对象共享&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;被&lt;code&gt;static&lt;/code&gt;修饰的成员，可以通过对象调用，也可以通过类名直接调用【推荐&lt;code&gt;类名直接调用&lt;/code&gt;】&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://sunmoon.com/categories/Java/"/>
    
    
      <category term="基础" scheme="http://sunmoon.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="学习" scheme="http://sunmoon.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="面向对象" scheme="http://sunmoon.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>继承、抽象类与模板设计模式、final关键字</title>
    <link href="http://sunmoon.com/2020/07/23/%E7%BB%A7%E6%89%BF%E3%80%81%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%A8%A1%E6%9D%BF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%81final%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>http://sunmoon.com/2020/07/23/%E7%BB%A7%E6%89%BF%E3%80%81%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%A8%A1%E6%9D%BF%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%81final%E5%85%B3%E9%94%AE%E5%AD%97/</id>
    <published>2020-07-23T09:16:59.000Z</published>
    <updated>2020-07-23T09:29:06.137Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、匿名对象"><a href="#一、匿名对象" class="headerlink" title="一、匿名对象"></a>一、匿名对象</h2><p>匿名对象：没有名字的对象</p><p>有名字：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Student stu = <span class="keyword">new</span> Student()</span><br></pre></td></tr></table></figure><p>没有名字：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Student();</span><br></pre></td></tr></table></figure><p>匿名对象好处：稍微简化了操作</p><p>使用场景：</p><ul><li>如果某个对象只需要使用一次，那么可以使用匿名对象。</li><li>匿名对象可以当作参数传递</li></ul><a id="more"></a><h2 id="二、继承"><a href="#二、继承" class="headerlink" title="二、继承"></a>二、继承</h2><p>继承是多态的前提，没有继承就没有多态</p><p>Java中的继承描述的是事物之间的所属关系，比如人属于动物，就可以让人区继承动物。</p><p>子类继承父类，会拥有父类的所有成员(父类的私有成员也能继承，不过无法直接访问)</p><p><strong>继承的好处：提高代码的复用性</strong></p><h3 id="2-1-继承的格式"><a href="#2-1-继承的格式" class="headerlink" title="2.1 继承的格式"></a>2.1 继承的格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-子类不能继承的内容"><a href="#2-2-子类不能继承的内容" class="headerlink" title="2.2 子类不能继承的内容"></a>2.2 子类不能继承的内容</h3><ul><li>父类中的构造方法子类是无法继承的</li><li>父类中的私有成员子类可以继承，但是继承了也没法【直接使用】，可以间接使用，通过<code>get/set</code>方法</li></ul><h3 id="2-3-继承后的特点——成员变量"><a href="#2-3-继承后的特点——成员变量" class="headerlink" title="2.3 继承后的特点——成员变量"></a>2.3 继承后的特点——成员变量</h3><ul><li>如果子父类的成员变量不同名时，那么访问时取决于是哪个成员变量名</li><li>如果子父类成员变量同名，那么在 子类中优先访问子类的成员变量</li><li>如果子父类成员变量同名了，那么想要在子类中访问父类的成员变量，需要使用<code>super.成员变量名</code>来访问。</li></ul><h3 id="2-4-继承后的特点——成员方法"><a href="#2-4-继承后的特点——成员方法" class="headerlink" title="2.4 继承后的特点——成员方法"></a>2.4 继承后的特点——成员方法</h3><ul><li>如果子父类成员方法不同名时，取决于调用哪个方法名</li><li>如果子父类的成员方法同名时，那么使用子类对象去调用方法时，优先访问子类的成员方法。</li><li>我们可以在子类的方法中，使用<code>super.方法名()</code>，指定父类中的某个方法</li></ul><h3 id="2-5-继承后的特点——构造方法"><a href="#2-5-继承后的特点——构造方法" class="headerlink" title="2.5 继承后的特点——构造方法"></a>2.5 继承后的特点——构造方法</h3><ul><li><p>子类无法继承父类的构造方法</p></li><li><p>子类的任何构造方法中第一行会有一句隐藏的代码<code>super();</code>，调用父类的无参构造</p></li></ul><h3 id="2-6-方法重写"><a href="#2-6-方法重写" class="headerlink" title="2.6 方法重写"></a>2.6 方法重写</h3><p>注意事项：</p><ul><li>在方法重写的，参数列表必须相同</li><li>子类方法的权限必须大于等于父类方法的权限</li><li>私有方法不能重写</li></ul><p><code>方法重写时,方法名,参数列表,修饰符,返回值类型一般都是一致的</code></p><p>应用场景：父类方法不能满足子类需要时，就可以在子类进行方法的重写。</p><p>@Override：方法重写注解</p><p>作用：如果我们在方法上写了@Override注解，那么就代表方法是重写的，编译器就会帮助我们检查重写的语法是否正确</p><h3 id="2-7-super-…-和this-…"><a href="#2-7-super-…-和this-…" class="headerlink" title="2.7 super(…)和this(…)"></a>2.7 super(…)和this(…)</h3><h4 id="2-7-1-super"><a href="#2-7-1-super" class="headerlink" title="2.7.1 super"></a>2.7.1 super</h4><p>super的三种用途：</p><ul><li>可以访问父类的成员变量：<code>super.变量名;</code></li><li>可以访问父类的成员方法：<code>super.方法名();</code></li><li>可以调用父类的构造方法：<code>super(参数);</code></li></ul><h4 id="2-7-2-this"><a href="#2-7-2-this" class="headerlink" title="2.7.2 this"></a>2.7.2 this</h4><p>this的三种用途：</p><ul><li>可以访问本类的成员变量：<code>this.变量名;</code></li><li>调用本类的其他成员方法：<code>this.方法名();</code></li><li>调用本类的其他构造方法：<code>this(参数);</code></li></ul><h3 id="2-8-继承的特点"><a href="#2-8-继承的特点" class="headerlink" title="2.8 继承的特点"></a>2.8 继承的特点</h3><ol><li>Java只支持单继承，不支持多继承<ul><li>一个子类，最多只能有一个父类</li></ul></li><li>一个类可以有多个子类。<ul><li>一个父类，可以有多个子类</li></ul></li><li>可以多层继承<ul><li>一个子类，可以继承一个父类，这个父类可以继承他的父类，它的父类有继承其他类</li></ul></li></ol><h2 id="三、抽象类"><a href="#三、抽象类" class="headerlink" title="三、抽象类"></a>三、抽象类</h2><h3 id="3-1-抽象类的概念和引入"><a href="#3-1-抽象类的概念和引入" class="headerlink" title="3.1 抽象类的概念和引入"></a>3.1 抽象类的概念和引入</h3><p>抽象类：含有抽象方法的类，那么该类一定是一个抽象类。</p><p>抽象方法：只有方法的声明(头部)，没有方法体的方法，我们称为抽象方法</p><h3 id="3-2-abstract使用格式"><a href="#3-2-abstract使用格式" class="headerlink" title="3.2 abstract使用格式"></a>3.2 abstract使用格式</h3><p>抽象方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> 返回值类型 方法名(参数列表);</span><br></pre></td></tr></table></figure><p>抽象类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    <span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象类的使用：</p><ol><li>抽象类不能直接new对象</li><li>抽象类天生就是被其它类继承的</li><li>其他类继承抽象类后，必须重写抽象类的所有抽象方法，让后才能创建子类对象，否则子类还会是一个抽象类</li></ol><p>【定义抽象类—&gt;定义一个子类继承抽象类—&gt;重写抽象类中的所有抽象方法】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"猫跑跑跑..."</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-抽象类的特征和注意事项"><a href="#3-3-抽象类的特征和注意事项" class="headerlink" title="3.3 抽象类的特征和注意事项"></a>3.3 抽象类的特征和注意事项</h3><p>抽象类的特点：有得有失</p><ul><li><p>得：得到了拥有抽象方法得能力</p></li><li><p>失：失去了创建对象得能力</p></li></ul><p>除了以上两点，在其他方面与普通类没有多大区别</p><p>注意事项：</p><ul><li>抽象类不能创建对象</li><li>抽象类是有构造方法的，构造方法可以给成员变量赋值</li><li>抽象类中，不一定含有抽象方法，但是含有抽象方法的类一定是抽象类（抽象类中可以没有抽象方法）</li><li>抽象类的子类，必须重写抽象父类中所有的抽象方法，不然子类也是一个抽象类</li><li>抽象类的作用为了让子类继承，抽象方法的作用为了让所有子类重写，作为类的模板！</li></ul><h3 id="3-4-抽象类存在的意义"><a href="#3-4-抽象类存在的意义" class="headerlink" title="3.4 抽象类存在的意义"></a>3.4 抽象类存在的意义</h3><p>抽象类体现的是模板思想</p><h3 id="3-5-模板设计模式"><a href="#3-5-模板设计模式" class="headerlink" title="3.5 模板设计模式"></a>3.5 模板设计模式</h3><p><code>模板模式思想：将固定的流程定义在父类中，不同的地方使用抽象方法，让子类去继承重写</code>。</p><p>需求：</p><ul><li><p>新司机开车：开门、点火、双手紧握方向盘、刹车、熄火</p></li><li><p>老司机开车：开门、点火、右手握方向盘左手抽烟、刹车、熄火</p></li></ul><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 父类：司机类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Driver</span> </span>&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开车的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">driver</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"开门..."</span>);</span><br><span class="line">        System.out.println(<span class="string">"点火..."</span>);</span><br><span class="line">        <span class="comment">//不同的司机开车的姿势不一样</span></span><br><span class="line">        ziShi();</span><br><span class="line">        System.out.println(<span class="string">"刹车..."</span>);</span><br><span class="line">        System.out.println(<span class="string">"熄火..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开车的姿势</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">ziShi</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子类：新司机</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewDriver</span> <span class="keyword">extends</span> <span class="title">Driver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ziShi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"双手紧握方向盘..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 子类：老司机</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OldDriver</span> <span class="keyword">extends</span> <span class="title">Driver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ziShi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"右手握方向盘左手抽烟..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDriver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        NewDriver nb = <span class="keyword">new</span> NewDriver();</span><br><span class="line">        nb.driver();</span><br><span class="line">        System.out.println(<span class="string">"=================="</span>);</span><br><span class="line">        OldDriver ob = <span class="keyword">new</span> OldDriver();</span><br><span class="line">        ob.driver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、final关键字"><a href="#四、final关键字" class="headerlink" title="四、final关键字"></a>四、final关键字</h2><h3 id="4-1-final关键字"><a href="#4-1-final关键字" class="headerlink" title="4.1 final关键字"></a>4.1 final关键字</h3><p><code>final</code>：最终的，最后的，不可变的</p><p>可以用来修饰：<code>类、成员变量、局部变量（基本类型、引用类型），成员方法</code></p><h3 id="4-2-final的作用"><a href="#4-2-final的作用" class="headerlink" title="4.2 final的作用"></a>4.2 final的作用</h3><h4 id="4-2-1-final修饰类"><a href="#4-2-1-final修饰类" class="headerlink" title="4.2.1 final修饰类"></a>4.2.1 final修饰类</h4><p>作用：<code>被final修饰的类</code>，称为太监类：该类<code>不能被继承</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span></span>&#123;<span class="comment">//编译报错，因为不能继承final修饰的类Fu</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-2-final修饰方法"><a href="#4-2-2-final修饰方法" class="headerlink" title="4.2.2 final修饰方法"></a>4.2.2 final修饰方法</h4><p>作用：<code>被final修饰的方法，称为最终方法：该方法不能被子类重写</code></p><h4 id="4-2-3-final修饰局部变量：基本类型变量"><a href="#4-2-3-final修饰局部变量：基本类型变量" class="headerlink" title="4.2.3 final修饰局部变量：基本类型变量"></a>4.2.3 final修饰局部变量：基本类型变量</h4><p>作用：<code>被final修饰的基本类型变量，只能赋值一次。</code>【这种变量一般称为常量，<code>常量名一般大写，多个单词之间下划线隔开</code>】</p><h4 id="4-2-4-final修饰引用类型变量"><a href="#4-2-4-final修饰引用类型变量" class="headerlink" title="4.2.4 final修饰引用类型变量"></a>4.2.4 final修饰引用类型变量</h4><p>作用：<code>被final修饰的引用类型变量，只能赋值一次</code>，该引用类型中<code>保存的地址值不能改变</code>，但是<code>地址指向的空间中的内容是可以改变的</code>。</p><h4 id="4-2-5-final修饰成员变量"><a href="#4-2-5-final修饰成员变量" class="headerlink" title="4.2.5 final修饰成员变量"></a>4.2.5 final修饰成员变量</h4><p>作用：<code>被final修饰的成员变量，只能赋值一次，必须在创建对象之前赋值(默认值不算)</code>。</p><p>我们可以在<code>定义成员变量时直接赋值</code>，也可以先定义成员变量，<code>在构造方法给成员变量赋值</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span></span>&#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> AGE = <span class="number">10</span>; <span class="comment">//直接赋值</span></span><br><span class="line"><span class="keyword">final</span> String NAME;  <span class="comment">//先定义不赋值</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        NAME = “加菲”; <span class="comment">//在构造方法中赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-6-final的注意事项"><a href="#4-2-6-final的注意事项" class="headerlink" title="4.2.6 final的注意事项"></a>4.2.6 final的注意事项</h4><ol><li><code>final和abstract不能同时修饰类</code></li><li><code>final和abstract不能同时修饰方法</code></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h3><p>概念：如果我们创建对象时，没有用变量接收对象的地址，那么就是一个匿名对象。</p><p>格式：<code>new 数据类型();</code></p><p>好处：稍微简化我们的写法</p><p>使用场景：</p><ul><li>如果某个对象只用一次，可以使用匿名对象</li><li>可以使用匿名对象作为方法参数传递</li></ul><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>概念：Java中国继承描述的时事务之间的所属关系：比如老师属于员工，就可以让老师类继承员工类。</p><p>好处：提高代码的复用性。子类继承父类会自动拥有父类的所有成员</p><p>特点：类与类之间只能单继承，Java支持多级继承，一个父类可以有多个子类</p><p>方法的重写：</p><ul><li>如果子类中出现了和父类一样的方法，那么这个就是方法得重写</li><li>使用场景：如果父类的方法不能满足子类的需求，可以在子类中重写方法</li></ul><p>继承中构造方法的特点：</p><ol><li>构造方法不能继承</li><li>创建子类对象时，会先执行父类的构造方法，因为在子类构造方法的第一行有一个隐藏的super</li><li>我们也可以使用super手动调用父类的构造方法。</li><li>如果super调用父类的构造方法，只能写在第一行。</li></ol><p>super关键字：</p><ul><li><p>可以访问父类的成员方法：<code>super.方法名()</code></p></li><li><p>可以访问父类的成员变量：<code>super.变量名</code></p></li><li><p>可以访问父类的构造方法：<code>super()</code></p></li></ul><p>this关键字：</p><ul><li><p>可以访问本类的成员方法：<code>this.方法名()</code></p></li><li><p>可以访问本类的成员变量：<code>this.变量名</code></p></li><li><p>可以访问本类的构造方法：<code>this()</code></p></li></ul><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>当某个方法的方法体我们说不清，不知道怎么写时，可以把这个方法定义成抽象方法，抽象方法所在的类必须是抽象类。</p><p>抽象类格式：<code>public abstract class 类名 {}</code></p><p>抽象方法格式：<code>public abstract 返回值类型 方法名(参数列表);</code></p><p>抽象类的使用：</p><ol><li>抽象类是给子类用的，我们要定义一个类，去继承抽象类。</li><li>重写抽象类中的所有的抽象方法。</li><li>创建这个子类对象，调用方法。</li></ol><p>抽象类的注意事项：</p><ol><li>抽象类不能创建对象</li><li>抽象类中也可以有构造方法，构造方法是给子类使用的.</li><li>抽象类中可以有抽象方法，也可以有非抽象的内容。抽象方法所在的类必须是一个抽象类。</li><li>一个普通类在继承抽象类时，需要重写里面所有的抽象方法。一个抽象类在继承抽象类时，可以不重写里面的抽象方法。</li><li>抽象类都是作为父类存在，抽象类体现的是模板思想【司机开车案例】</li></ol><h3 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h3><p><code>final</code>表示最终的不可改变的。</p><p>注意：</p><ul><li><p>如果final修饰类，这个类不能被继承，但是可以继承其他类。</p></li><li><p>如果fianl修饰方法，这个方法不能被重写，但是可以被子类继承使用。</p></li><li><p>如果final修饰变量，该变量就变成了常量。只能被赋值一次，一旦赋值就不能更改了。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、匿名对象&quot;&gt;&lt;a href=&quot;#一、匿名对象&quot; class=&quot;headerlink&quot; title=&quot;一、匿名对象&quot;&gt;&lt;/a&gt;一、匿名对象&lt;/h2&gt;&lt;p&gt;匿名对象：没有名字的对象&lt;/p&gt;
&lt;p&gt;有名字：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Student stu = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Student()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;没有名字：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Student();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;p&gt;匿名对象好处：稍微简化了操作&lt;/p&gt;
&lt;p&gt;使用场景：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果某个对象只需要使用一次，那么可以使用匿名对象。&lt;/li&gt;
&lt;li&gt;匿名对象可以当作参数传递&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://sunmoon.com/categories/Java/"/>
    
    
      <category term="基础" scheme="http://sunmoon.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="学习" scheme="http://sunmoon.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="面向对象" scheme="http://sunmoon.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>ArrayList集合</title>
    <link href="http://sunmoon.com/2020/07/22/ArrayList%E9%9B%86%E5%90%88/"/>
    <id>http://sunmoon.com/2020/07/22/ArrayList%E9%9B%86%E5%90%88/</id>
    <published>2020-07-22T11:13:08.000Z</published>
    <updated>2020-07-22T11:16:52.606Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><p>为什么使用集合？</p><p>数组定长，如果存储满了，那么数组就无法继续保存数据了，所以有了集合。</p><p>集合就是一个容器，这个容器可以保存很多数据(元素)</p><a id="more"></a><h3 id="集合和数组的区别"><a href="#集合和数组的区别" class="headerlink" title="集合和数组的区别"></a>集合和数组的区别</h3><ul><li><p>数组的长度固定，集合的长度是可变的</p></li><li><p>数组既可以保存基本类型的数据，也可以保存引用类型的数据；集合只能保存引用类型的数据。</p></li></ul><h3 id="ArrayList集合"><a href="#ArrayList集合" class="headerlink" title="ArrayList集合"></a>ArrayList集合</h3><p><code>ArrayList&lt;E&gt;</code>表示集合，其中<code>&lt;E&gt;</code>是一个特殊的东西，叫做泛型。想要使用这个集合是，就使用相应的引用类型替换掉<code>E</code>即可。</p><p><code>集合想要保存什么类型的数据，就用什么类型替换掉尖括号中的E</code></p><p>举例：</p><ul><li><code>ArrayList&lt;String&gt;</code>：集合保存的就是<code>字符串(String)</code>类型的数据</li><li><code>ArrayList&lt;Student&gt;</code>：集合保存的就是<code>Student</code>类型的数据</li></ul><p><strong>注意：集合是一种特殊的引用类型，直接打印集合名称，将打印出里面的内容</strong></p><h3 id="ArrayList集合的构造方法"><a href="#ArrayList集合的构造方法" class="headerlink" title="ArrayList集合的构造方法"></a>ArrayList集合的构造方法</h3><p><code>ArrayList()</code>：空参构造方法，使用该构造方法创建集合时里面没有任何数据。</p><h3 id="ArrayList集合的常用方法"><a href="#ArrayList集合的常用方法" class="headerlink" title="ArrayList集合的常用方法"></a>ArrayList集合的常用方法</h3><p><code>boolean add(E e)</code>:添加元素到集合的末尾</p><p><code>void add(int index, E element)</code>：在指定位置添加元素。</p><p><code>int size()</code>：获取集合的大小，集合中有几个元素，集合的大小就是多少。</p><p><code>E get(int index)</code>：获取指定索引位置的元素。</p><p><code>E remove(int index)</code>：根据索引删除元素，并且返回被删除的元素。</p><p><code>boolean remove(Object o)</code>：直接删除指定元素，删除成功返回true。</p><p><code>E set(int index, E element)</code>：替换元素。使用element替换掉index索引位置的元素，返回值就是被替换掉的元素</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        list.add(<span class="string">"hello"</span>);</span><br><span class="line">        list.add(<span class="string">"world"</span>);</span><br><span class="line">        list.add(<span class="string">"java"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"list:"</span> + list);</span><br><span class="line"></span><br><span class="line">        System.out.println(list.set(<span class="number">2</span>, <span class="string">"php"</span>));</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// System.out.println(list.remove("java"));</span></span><br><span class="line">        <span class="comment">// System.out.println(list);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// System.out.println(list.remove(1));</span></span><br><span class="line">        <span class="comment">// System.out.println(list);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// System.out.println("获取索引为1的元素：" + list.get(1));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out.println("集合的大小是：" + list.size());</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// list.add(2, "php");</span></span><br><span class="line">        <span class="comment">// System.out.println("list:" + list);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="集合存储基本类型的数据"><a href="#集合存储基本类型的数据" class="headerlink" title="集合存储基本类型的数据"></a>集合存储基本类型的数据</h3><p>前文说到，集合只能存储引用类型的数据，那么我们如果要存储基本类型的数据时，要如何做?</p><p>解决方法：集合保存基本类型的数据，需要使用对应的包装类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    list.add(<span class="number">100</span>);</span><br><span class="line">    list.add(<span class="number">200</span>);</span><br><span class="line">    list.add(<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(list);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="概念引入——包装类"><a href="#概念引入——包装类" class="headerlink" title="概念引入——包装类"></a>概念引入——包装类</h4><p>每种基本数据类型都有它所对应的引用类型，这个对应的引用类型叫做包装类。</p><table><thead><tr><th>基本类型</th><th>包装类</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>boolean</td><td>Boolean</td></tr><tr><td>char</td><td>Character</td></tr></tbody></table><h3 id="集合的遍历"><a href="#集合的遍历" class="headerlink" title="集合的遍历"></a>集合的遍历</h3><p>集合的遍历，和数组基本相同，使用<code>size()</code>方法获取集合的长度，然后使用for循环，遍历即可。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="string">"张三丰"</span>);</span><br><span class="line">    list.add(<span class="string">"李四"</span>);</span><br><span class="line">    list.add(<span class="string">"张张"</span>);</span><br><span class="line">    list.add(<span class="string">"拉拉"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">        System.out.println(list.get(i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用集合存储Student类型数据并遍历打印</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line">    Student s0 = <span class="keyword">new</span> Student(<span class="string">"拉拉"</span>,<span class="number">20</span>);</span><br><span class="line">    Student s1 = <span class="keyword">new</span> Student(<span class="string">"哈哈"</span>,<span class="number">22</span>);</span><br><span class="line">    Student s2 = <span class="keyword">new</span> Student(<span class="string">"呵呵"</span>,<span class="number">24</span>);</span><br><span class="line">    list.add(s0);</span><br><span class="line">    list.add(s1);</span><br><span class="line">    list.add(s2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">        Student stu = list.get(i);</span><br><span class="line">        System.out.println(stu.getName()+<span class="string">"-"</span>+stu.getAge());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Student类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, String age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  get/set方法略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Scanner录入产生的问题"><a href="#Scanner录入产生的问题" class="headerlink" title="Scanner录入产生的问题"></a>Scanner录入产生的问题</h3><p>在一个方法中，同一个Scanner对象，如果即调用<code>nextLine</code>键盘录入字符串，又调用其他的，<code>nextXxx</code>方法，就有可能引发问题,，因为<code>nextLine</code>方法能够检查其他方法的回车，从而导致录入结束。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    System.out.println(<span class="string">"请输入一个数字："</span>);</span><br><span class="line">    <span class="keyword">int</span> num = sc.nextInt();</span><br><span class="line">    System.out.println(<span class="string">"num:"</span>+num);</span><br><span class="line">    System.out.println(<span class="string">"请输入一个字符串："</span>);</span><br><span class="line">    String str = sc.nextLine();</span><br><span class="line">    System.out.println(<span class="string">"str:"</span> + str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的main方法在执行时，<code>str</code>的值为空，没有进行录入赋值，<code>nextLine()</code>方法检测到<code>nextInt()</code>方法的回车，提前结束了输入，控制台内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">请输入一个数字：</span><br><span class="line"><span class="number">18</span></span><br><span class="line">num:<span class="number">18</span></span><br><span class="line">请输入一个字符串：</span><br><span class="line">str:</span><br></pre></td></tr></table></figure><p>解决办法：</p><p>给<code>nextInt</code>，<code>nextDouble</code>单独创建一个<code>Scanner</code>对象</p><p>给<code>nextLine</code>单独创建一个对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    System.out.println(<span class="string">"请输入一个数字："</span>);</span><br><span class="line">    <span class="keyword">int</span> num = sc.nextInt();</span><br><span class="line">    System.out.println(<span class="string">"num:"</span>+num);</span><br><span class="line">    Scanner sc2 = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    System.out.println(<span class="string">"请输入一个字符串："</span>);</span><br><span class="line">    String str = sc2.nextLine();</span><br><span class="line">    System.out.println(<span class="string">"str:"</span> + str);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">请输入一个数字：</span><br><span class="line"><span class="number">12</span></span><br><span class="line">num:<span class="number">12</span></span><br><span class="line">请输入一个字符串：</span><br><span class="line">dsd</span><br><span class="line">str:dsd</span><br></pre></td></tr></table></figure><h3 id="综合案例——学生管理系统"><a href="#综合案例——学生管理系统" class="headerlink" title="综合案例——学生管理系统"></a>综合案例——学生管理系统</h3><p>需求：针对目前我们的所学内容，完成一个综合案例：学生管理系统！</p><p>该系统主要功能如下：</p><ul><li>添加学生：通过键盘录入学生信息，添加到集合中</li><li>删除学生：通过键盘录入要删除学生的学号，将该学生对象从集合中删除</li><li>修改学生：通过键盘录入要修改学生的学号，将该学生对象其他信息进行修改</li><li>查看学生：将集合中的学生对象信息进行展示</li><li>退出系统：结束程序</li></ul><p>学生类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String id, String name, String age, String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// get/set方法略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>系统类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Student&gt; stuList = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        Scanner scId = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String id = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"================欢迎进入学生管理系统==================="</span>);</span><br><span class="line">            System.out.println(<span class="string">"1.添加学员"</span>);</span><br><span class="line">            System.out.println(<span class="string">"2.删除学员"</span>);</span><br><span class="line">            System.out.println(<span class="string">"3.修改学员"</span>);</span><br><span class="line">            System.out.println(<span class="string">"4.查找学员"</span>);</span><br><span class="line">            System.out.println(<span class="string">"5.退出系统"</span>);</span><br><span class="line">            System.out.println(<span class="string">"====================================================="</span>);</span><br><span class="line">            System.out.println(<span class="string">"请输入功能序号："</span>);</span><br><span class="line">            <span class="keyword">int</span> target = sc.nextInt();</span><br><span class="line">            <span class="keyword">switch</span> (target)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    addStudent(stuList);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    System.out.println(<span class="string">"请输入要删除学员的id："</span>);</span><br><span class="line">                    id = scId.nextLine();</span><br><span class="line">                    deleteStudent(stuList,id);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    System.out.println(<span class="string">"请输入要修改学员的id："</span>);</span><br><span class="line">                    id = scId.nextLine();</span><br><span class="line">                    changeStudent(stuList,id);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                    lookStudent(stuList);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                    System.out.println(<span class="string">"bye~"</span>);</span><br><span class="line">                    System.exit(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">"输入有误，请输入1-5之间的数字！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断学员id是否存在，存在返回对象的在集合中的索引，不存在返回-1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stuList</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">decideIdExist</span><span class="params">(ArrayList&lt;Student&gt; stuList, String id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stuList.size(); i++) &#123;</span><br><span class="line">            Student stu = stuList.get(i);</span><br><span class="line">            <span class="keyword">if</span> (stu.getId().equals(id))&#123;</span><br><span class="line">                index = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id修改学生信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stuList</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">changeStudent</span><span class="params">(ArrayList&lt;Student&gt; stuList, String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = decideIdExist(stuList, id);</span><br><span class="line">        <span class="keyword">if</span> (index == -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"输入的学员id不存在，"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Student student = stuList.get(index);</span><br><span class="line">            Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            System.out.println(<span class="string">"修改学生姓名为"</span>);</span><br><span class="line">            String name = sc.nextLine();</span><br><span class="line">            System.out.println(<span class="string">"修改学生年龄为"</span>);</span><br><span class="line">            String age = sc.nextLine();</span><br><span class="line">            System.out.println(<span class="string">"修改学生所在地为"</span>);</span><br><span class="line">            String address = sc.nextLine();</span><br><span class="line">            student.setName(name);</span><br><span class="line">            student.setAge(age);</span><br><span class="line">            student.setAddress(address);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看所有信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stuList</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">lookStudent</span><span class="params">(ArrayList&lt;Student&gt; stuList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (stuList.isEmpty())&#123;</span><br><span class="line">            System.out.println(<span class="string">"学生列表为空，请添加后在查看。"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"id\t\t姓名\t\t年龄\t\t所在地"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stuList.size(); i++) &#123;</span><br><span class="line">            Student student = stuList.get(i);</span><br><span class="line">            System.out.println(student.getId()+<span class="string">"\t"</span>+student.getName()+<span class="string">"\t"</span>+student.getAge()+<span class="string">"\t"</span>+student.getAddress());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除学生信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stuList</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteStudent</span><span class="params">(ArrayList&lt;Student&gt; stuList, String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = decideIdExist(stuList, id);</span><br><span class="line">        <span class="keyword">if</span> (index == -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"输入的学员id不存在，"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            stuList.remove(index);</span><br><span class="line">            System.out.println(<span class="string">"删除成功！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加学生信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stuList</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addStudent</span><span class="params">(ArrayList&lt;Student&gt; stuList)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String id = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"请输入学生id:"</span>);</span><br><span class="line">            id = sc.nextLine();</span><br><span class="line">            <span class="keyword">if</span> (decideIdExist(stuList,id) != -<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"学员id已存在,请重新输入学员id"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"请输入学生姓名:"</span>);</span><br><span class="line">        String name = sc.nextLine();</span><br><span class="line">        System.out.println(<span class="string">"请输入学生年龄："</span>);</span><br><span class="line">        String age = sc.nextLine();</span><br><span class="line">        System.out.println(<span class="string">"请输入学生所在地："</span>);</span><br><span class="line">        String address = sc.nextLine();</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student(id,name,age,address);</span><br><span class="line">        stuList.add(stu);</span><br><span class="line">        System.out.println(<span class="string">"添加成功！！！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ArrayList&quot;&gt;&lt;a href=&quot;#ArrayList&quot; class=&quot;headerlink&quot; title=&quot;ArrayList&quot;&gt;&lt;/a&gt;ArrayList&lt;/h2&gt;&lt;p&gt;为什么使用集合？&lt;/p&gt;
&lt;p&gt;数组定长，如果存储满了，那么数组就无法继续保存数据了，所以有了集合。&lt;/p&gt;
&lt;p&gt;集合就是一个容器，这个容器可以保存很多数据(元素)&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://sunmoon.com/categories/Java/"/>
    
    
      <category term="基础" scheme="http://sunmoon.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="学习" scheme="http://sunmoon.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="问题" scheme="http://sunmoon.com/tags/%E9%97%AE%E9%A2%98/"/>
    
      <category term="集合" scheme="http://sunmoon.com/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>String和StringBuilder</title>
    <link href="http://sunmoon.com/2020/07/20/String%E5%92%8CStringBuilder/"/>
    <id>http://sunmoon.com/2020/07/20/String%E5%92%8CStringBuilder/</id>
    <published>2020-07-20T08:54:32.000Z</published>
    <updated>2020-07-20T10:09:51.556Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、String类"><a href="#一、String类" class="headerlink" title="一、String类"></a>一、String类</h2><h3 id="1-1-String概述"><a href="#1-1-String概述" class="headerlink" title="1.1 String概述"></a>1.1 String概述</h3><p><code>String</code>类代表字符串。  Java程序中的所有字符串文字（例如<code>&quot;abc&quot;</code> ）都被实现为此类的实例。</p><p>字符串是由一串数据组成，本质就是一个字符数组</p><p>【扩展】: 在<code>JDk 8</code>以及之前的版本，字符串本质是一个<code>char</code>数组。在<code>JDk 9</code>以及之后的版本，字符串本质是一个<code>byte</code>数组。</p><p>字符串不变; 它们的值在创建后不能被更改。 字符串缓冲区支持可变字符串。  因为String对象是不可变的，它们可以被共享。</p><p>String所在的包在<code>java,lang</code>包，<code>java.lang</code>包下的东西都是非常常用的，所以Java中有一个优化。<code>java.lang</code>包下的东西在使用时不需要导包。</p><a id="more"></a><h3 id="1-2-创建字符串对象"><a href="#1-2-创建字符串对象" class="headerlink" title="1.2 创建字符串对象"></a>1.2 创建字符串对象</h3><p><code>String()</code> : 空参数的构造方法，使用该构造方法创建传来的字符串里面没有任何内容。</p><p><code>String(String original)</code> : 参数需要传递一个字符串，根据一个字符串创建字符串对象。</p><p><code>String(char[] value)</code> : 根据字符数组创建字符串对象。</p><p><code>String(char[] value, int offset, int count)</code> : 根据字符数组的一部分创建字符串。参数offset表示从字符数组的哪个索引位置开始，count表示多少个字符。</p><p><code>String(byte[] bytes)</code> : 根据字节数组的内容创建字符串对象。</p><p><code>String(byte[] bytes, int offset, int length)</code> : 将byte数组的一部分转成字符串。参数offset表示从数组的哪个索引位置开始，length表示转多少个字符。</p><p><code>直接赋值创建字符串对象。</code></p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01String</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//空参</span></span><br><span class="line">        String s1 = <span class="keyword">new</span> String();</span><br><span class="line">        System.out.println(s1);</span><br><span class="line"></span><br><span class="line">        String s2 = <span class="keyword">new</span> String(<span class="string">"Hello"</span>);</span><br><span class="line">        System.out.println(s2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] cArr = &#123;<span class="string">'h'</span>,<span class="string">'e'</span>,<span class="string">'l'</span>,<span class="string">'l'</span>,<span class="string">'o'</span>&#125;;</span><br><span class="line">        String s3 = <span class="keyword">new</span> String(cArr);</span><br><span class="line">        System.out.println(s3);</span><br><span class="line"></span><br><span class="line">        String s4 = <span class="keyword">new</span> String(cArr,<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">        System.out.println(s4);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bArr = &#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>,<span class="number">100</span>,<span class="number">101</span>&#125;;</span><br><span class="line">        String s5 = <span class="keyword">new</span> String(bArr);</span><br><span class="line">        System.out.println(s5);</span><br><span class="line"></span><br><span class="line">        String s6 = <span class="keyword">new</span> String(bArr,<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">        System.out.println(s6);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//直接赋值——最常用</span></span><br><span class="line">        String s7 = <span class="string">"hello"</span>;</span><br><span class="line">        System.out.println(s7);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-new的方式创建对象和直接赋值的方式创建对象的区别"><a href="#1-3-new的方式创建对象和直接赋值的方式创建对象的区别" class="headerlink" title="1.3 new的方式创建对象和直接赋值的方式创建对象的区别"></a>1.3 new的方式创建对象和直接赋值的方式创建对象的区别</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 字符串new的方式创建对象和直接赋值的方式创建对象的区别</span></span><br><span class="line"><span class="comment"> * ==比较基本类型和引用类型的区别:</span></span><br><span class="line"><span class="comment"> * i.如果==比较基本类型，比较的是值</span></span><br><span class="line"><span class="comment"> * ii.如果==比较引用类型，比较的是地址值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03String</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s1 = <span class="keyword">new</span> String(<span class="string">"hello"</span>);</span><br><span class="line">        String s2 = <span class="string">"hello"</span>;</span><br><span class="line">        System.out.println(s1 == s2);<span class="comment">//false</span></span><br><span class="line">        String s3 = <span class="string">"hello"</span>;</span><br><span class="line">        System.out.println(s1 == s3);<span class="comment">//false</span></span><br><span class="line">        System.out.println(s2 == s3);<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>字符串是常量，会保存到常量池中。</strong></p><p><strong>只有使用双引号直接写出来的字符串才是常量。</strong></p><p>常量池扩展：</p><ul><li>在<code>JDK6</code>以及之前的版本，常量池在方法区</li><li>在<code>JDk7</code>的时候，常量池在堆内存</li><li>在<code>JDK8</code>的时间，常量池在元空间【方法区】</li></ul><p>字符串常量是可以复用的，当我们使用到一个字符串常量是，会先看一下常量池中有没有这个东西，如果有，就直接使用常量池中的，如果没有，就创建一个该字符串常量存放到常量池中。</p><p><strong>【结论】new的方式创建字符串，会先由栈指向堆，再有堆指向常量池。直接复制的方式是由栈直接指向常量池。</strong></p><h3 id="1-4-字符串常用方法"><a href="#1-4-字符串常用方法" class="headerlink" title="1.4 字符串常用方法"></a>1.4 字符串常用方法</h3><h4 id="1-4-1-判断方法"><a href="#1-4-1-判断方法" class="headerlink" title="1.4.1 判断方法"></a>1.4.1 判断方法</h4><p><code>boolean equals(Object anObject)</code>：比较两个字符串的内容是否相同。参数如果是Object，可以传递任何数据，包括字符串。</p><p><code>boolean equalsIgnoreCase(String anotherString)</code> ：比较两个字符串的内容是否相同，忽略大小写。</p><p><code>boolean contains(CharSequence s)</code>  ：判断字符串中是否包含指定的字符串。</p><p><code>boolean startsWith(String prefix)</code> ：判断字符串是否以指定的内容开头。</p><p><code>boolean endsWith(String suffix)</code>：判断字符串是否以指定的内容结尾。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04String</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        String s1 = <span class="string">"hello"</span>;</span><br><span class="line">        String s2 = <span class="keyword">new</span> String(<span class="string">"hello"</span>);</span><br><span class="line">        String s3 = <span class="string">"HeLlo"</span>;</span><br><span class="line">        System.out.println(s1.equals(s2));<span class="comment">//true</span></span><br><span class="line">        System.out.println(s1.equals(s3));<span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">"==================="</span>);</span><br><span class="line">        System.out.println(s1.equalsIgnoreCase(s3));<span class="comment">//true</span></span><br><span class="line">        System.out.println(s1.equalsIgnoreCase(s2));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">"===================="</span>);</span><br><span class="line">        String str = <span class="string">"helloworld"</span>;</span><br><span class="line">        System.out.println(str.contains(<span class="string">"nihao"</span>));<span class="comment">//false</span></span><br><span class="line">        System.out.println(str.contains(<span class="string">"owo"</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">"===================="</span>);</span><br><span class="line">        System.out.println(str.startsWith(<span class="string">"abc"</span>));<span class="comment">//false</span></span><br><span class="line">        System.out.println(str.startsWith(<span class="string">"he"</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">"===================="</span>);</span><br><span class="line">        System.out.println(str.endsWith(<span class="string">"aa"</span>));<span class="comment">//false</span></span><br><span class="line">        System.out.println(str.endsWith(<span class="string">"ld"</span>));<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-4-2-获取方法"><a href="#1-4-2-获取方法" class="headerlink" title="1.4.2 获取方法"></a>1.4.2 获取方法</h4><p><code>int length()</code>  ：返回此字符串的长度。 </p><p><code>String concat(String str)</code> ：将指定的字符串连接到该字符串的末尾。 返回拼接后的字符串。</p><p><code>char charAt(int index)</code>：获取指定索引位置的字符，并返回。</p><p><code>int indexOf(String str)</code>  : 查找某个字符串第一次出现的索引。如果没有找到，返回-1。</p><p><code>int lastIndexOf(String str)</code> : 查找某个字符串最后一次出现的索引，如果没有找到，返回-1。</p><p><code>String substring(int beginIndex)</code> ：截取字符串，从<code>beginIndex</code>开始，一直到末尾，返回截取后的字符串。 </p><p><code>String substring(int beginIndex, int endIndex)</code>：截取字符串从<code>beginIndex</code>开始，<code>endIndex</code>结束， 包含头，不包含尾，返回截取后的字符串。 </p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05String</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String s1 = <span class="string">"Hello"</span>;</span><br><span class="line">        <span class="keyword">int</span> len = s1.length();</span><br><span class="line">        System.out.println(<span class="string">"字符串长度:"</span> + len);</span><br><span class="line"></span><br><span class="line">        String s2 = <span class="string">"World"</span>;</span><br><span class="line">        String str = s1.concat(s2);</span><br><span class="line">        System.out.println(<span class="string">"拼接后的字符串:"</span> + str);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> ch = str.charAt(<span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">"字符串索引为5位置的字符是："</span> + ch);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> index = str.indexOf(<span class="string">"oWo"</span>);</span><br><span class="line">        System.out.println(<span class="string">"字符串oWo在str中第一次出现的索引为："</span> + index);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> lastIndex = str.lastIndexOf(<span class="string">"ld"</span>);</span><br><span class="line">        System.out.println(<span class="string">"字符串ld在st中最后一次穿线的索引为:"</span> + lastIndex);</span><br><span class="line"></span><br><span class="line">        String subStr = str.substring(<span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">"在字符串str索引为5开始截取一直到末尾，截取后的字符串为："</span> + subStr);</span><br><span class="line"></span><br><span class="line">        String subStr1 = str.substring(<span class="number">2</span>, <span class="number">6</span>);</span><br><span class="line">        System.out.println(<span class="string">"在字符串str索引2开始一直截取到索引为6，包含2不包含6，返回后的字符串为："</span> + subStr1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">控制台输出：</span><br><span class="line">    字符串长度:<span class="number">5</span></span><br><span class="line">    拼接后的字符串:HelloWorld</span><br><span class="line">    字符串索引为<span class="number">5</span>位置的字符是：W</span><br><span class="line">    字符串oWo在str中第一次出现的索引为：<span class="number">4</span></span><br><span class="line">    字符串ld在st中最后一次穿线的索引为:<span class="number">8</span></span><br><span class="line">    在字符串str索引为<span class="number">5</span>开始截取一直到末尾，截取后的字符串为：World</span><br><span class="line">    在字符串str索引<span class="number">2</span>开始一直截取到索引为<span class="number">6</span>，包含<span class="number">2</span>不包含<span class="number">6</span>，返回后的字符串为：lloW</span><br></pre></td></tr></table></figure><h4 id="1-4-3-转换方法"><a href="#1-4-3-转换方法" class="headerlink" title="1.4.3 转换方法"></a>1.4.3 转换方法</h4><p><code>char[] toCharArray()</code> ：将此字符串转换为新的字符数组。 </p><p><code>byte[] getBytes()</code>  ：将字符串转成字节数组并返回。</p><p><code>String toLowerCase()</code>  ：将字符串全部转成小写并返回转换后新的字符串。</p><p><code>String toUpperCase()</code> ：将字符串全部转成大写并返回转换后新的字符串。</p><p><code>String replace(String oldChar, String newChar)</code>  ：替换字符串，使用<code>newStr</code>替换掉<code>oldStr</code>，并返回替换后的字符串。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06String</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String str = <span class="string">"Hello,World"</span>;</span><br><span class="line">        <span class="keyword">char</span>[] strArr = str.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strArr.length; i++) &#123;</span><br><span class="line">            System.out.print(strArr[i]+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">"=========================="</span>);</span><br><span class="line">        String s1 = <span class="string">"abcde"</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = s1.getBytes();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bytes.length; i++) &#123;</span><br><span class="line">            System.out.print(bytes[i] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">"=========================="</span>);</span><br><span class="line">        String lowerStr = str.toLowerCase();</span><br><span class="line">        System.out.println(lowerStr);</span><br><span class="line">        System.out.println(<span class="string">"=========================="</span>);</span><br><span class="line">        String upperStr = str.toUpperCase();</span><br><span class="line">        System.out.println(upperStr);</span><br><span class="line">        System.out.println(<span class="string">"=========================="</span>);</span><br><span class="line">        String newStr = str.replace(<span class="string">"Hello,"</span>, <span class="string">"hello"</span>);</span><br><span class="line">        System.out.println(newStr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-4-4-分割方法"><a href="#1-4-4-分割方法" class="headerlink" title="1.4.4 分割方法"></a>1.4.4 分割方法</h4><p><code>String[] split(String regex)</code>  ：根据指定字符串进行切割，切割之后的内容会方法字符串数组中返回。</p><p><code>String trim()</code>  ：去除字符串两边的空格。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo07String</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        String str  = <span class="string">"hello,world,java"</span>;</span><br><span class="line">        String[] strs = str.split(<span class="string">","</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strs.length; i++) &#123;</span><br><span class="line">            System.out.println(strs[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"===================="</span>);</span><br><span class="line">        String s1 = <span class="string">"   hello   world      "</span>;</span><br><span class="line">        String newStr = s1.trim();</span><br><span class="line">        System.out.println(newStr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-5-String练习"><a href="#1-5-String练习" class="headerlink" title="1.5 String练习"></a>1.5 String练习</h3><p><strong>需求：统计字符个数，键盘录入一个字符串，统计字符串中大小写字母及数字字符个数。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo08StringTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入大小写字母以及数字："</span>);</span><br><span class="line">        String str = sc.next();</span><br><span class="line">        <span class="keyword">int</span> lower = countLower(str);</span><br><span class="line">        <span class="keyword">int</span> upper = countUpper(str);</span><br><span class="line">        <span class="keyword">int</span> num = countNum(str);</span><br><span class="line">        System.out.println(<span class="string">"小写字母个数为："</span> + lower);</span><br><span class="line">        System.out.println(<span class="string">"大写字母个数为："</span> + upper);</span><br><span class="line">        System.out.println(<span class="string">"数字字符个数为："</span> + num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统计字符串中数字个数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">countNum</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str.charAt(i)&gt;=<span class="string">'0'</span> &amp;&amp; str.charAt(i)&lt;=<span class="string">'9'</span>)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统计字符串中大写字母个数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">countUpper</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str.charAt(i)&gt;=<span class="string">'A'</span> &amp;&amp; str.charAt(i)&lt;=<span class="string">'Z'</span>)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统计字符串中小写字母个数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">countLower</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str.charAt(i)&gt;=<span class="string">'a'</span> &amp;&amp; str.charAt(i)&lt;=<span class="string">'z'</span>)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">请输入大小写字母以及数字：</span><br><span class="line">ASDASDsdasdaddASJDBJ8734876#&amp;^$*&amp;#$^*&amp;%123asdASDASD</span><br><span class="line">小写字母个数为：<span class="number">11</span></span><br><span class="line">大写字母个数为：<span class="number">18</span></span><br><span class="line">数字字符个数为：<span class="number">10</span></span><br></pre></td></tr></table></figure><h2 id="二、StringBuilder类"><a href="#二、StringBuilder类" class="headerlink" title="二、StringBuilder类"></a>二、StringBuilder类</h2><h3 id="2-1-StringBuilder概述"><a href="#2-1-StringBuilder概述" class="headerlink" title="2.1 StringBuilder概述"></a>2.1 StringBuilder概述</h3><p>StringBuilder 是一个可变的字符序列，我们可以把它看成可变的字符串。</p><p>StringBuilder也是由字符组成的数据，本质也是字符数组，内部也是使用字符数组保存数据</p><h3 id="2-2-StringBuilder和String区别"><a href="#2-2-StringBuilder和String区别" class="headerlink" title="2.2 StringBuilder和String区别"></a>2.2 StringBuilder和String区别</h3><p>String：内容不可改变。</p><p>StringBuilder：内容可以改变。</p><p>String：字符串具有不变性，创建之后不能被改编，如果我们使用字符串进行拼接，每次都会创建型的字符串这样既耗时，又浪费空间。</p><p>StringBuilder：可以看成可变的字符串，如果使用StringBuilder进行拼接，效率会高一些。</p><h3 id="2-3-StringBuilder构造方法"><a href="#2-3-StringBuilder构造方法" class="headerlink" title="2.3 StringBuilder构造方法"></a>2.3 StringBuilder构造方法</h3><p><code>StringBuilder()</code>：使用该构造方法创建的StringBuilder对象里面没有任何内容。</p><p><code>StringBuilder(String str)</code> : 根据字符串的内容创建StringBuilder对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02StringBuilder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        System.out.println(<span class="string">"sb:"</span> + sb);</span><br><span class="line"></span><br><span class="line">        StringBuilder newSb = <span class="keyword">new</span> StringBuilder(<span class="string">"hello"</span>);</span><br><span class="line">        System.out.println(<span class="string">"newSb:"</span> + newSb);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：StringBuilder是一个特殊的引用类型，如果直接输出对象名，输出的是对象的内容。</strong></p><h3 id="2-4-StringBuilder常用方法"><a href="#2-4-StringBuilder常用方法" class="headerlink" title="2.4 StringBuilder常用方法"></a>2.4 StringBuilder常用方法</h3><p><code>StringBuilder append(任何类型)</code>：拼接(追加，添加)数据 。返回值是调用者对象本身。</p><p><code>StringBuilder reverse()</code>  ：对StringBuilder进行反转。返回值是调用者本身。</p><p><code>String toString()</code> ：将StringBuilder转成字符串并返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03StringBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="comment">// System.out.println("sb:" + sb);</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// StringBuilder newSb = sb.append("hello");</span></span><br><span class="line">        <span class="comment">// System.out.println("sb:" + sb);</span></span><br><span class="line">        <span class="comment">// System.out.println("newSb:" + newSb);</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// System.out.println(sb == newSb);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//链式编程</span></span><br><span class="line">        sb.append(<span class="string">"hello"</span>).append(<span class="string">"world"</span>).append(<span class="string">"java"</span>);</span><br><span class="line">        System.out.println(<span class="string">"sb:"</span> + sb); <span class="comment">//helloworldjava</span></span><br><span class="line"></span><br><span class="line">        sb.reverse();</span><br><span class="line">        System.out.println(<span class="string">"sb:"</span> + sb); <span class="comment">//avajdlrowolleh</span></span><br><span class="line"></span><br><span class="line">        String s = sb.reverse().toString();</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-String和StringBuilder相互转换"><a href="#2-5-String和StringBuilder相互转换" class="headerlink" title="2.5 String和StringBuilder相互转换"></a>2.5 String和StringBuilder相互转换</h3><p>StringBuilder —&gt; String : 调用toString()方法即可</p><p>String —&gt; StringBuilder : 通过StringBuilder的构造方法根据String创建StringBuilder对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04StringBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(<span class="string">"hello"</span>);</span><br><span class="line">        System.out.println(<span class="string">"sb:"</span> + sb);</span><br><span class="line"></span><br><span class="line">        String s = sb.toString();</span><br><span class="line">        System.out.println(<span class="string">"s:"</span> + s);</span><br><span class="line"></span><br><span class="line">        String str = <span class="string">"World"</span>;</span><br><span class="line">        StringBuilder sb1 = <span class="keyword">new</span> StringBuilder(str);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"str:"</span> + str);</span><br><span class="line">        System.out.println(<span class="string">"sb1"</span> + sb1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-练习——字符串拼接"><a href="#2-6-练习——字符串拼接" class="headerlink" title="2.6 练习——字符串拼接"></a>2.6 练习——字符串拼接</h3><p><strong>需求：定义一个方法，把 int 数组中的数据按照指定的格式拼接成一个字符串返回，调用该方法，并在控制台输出结果。例如，数组为int[] arr = {1,2,3}; ，执行方法后的输出结果为：[1, 2, 3]</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04StringBuilderTset</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        String str = arrayToString(nums);</span><br><span class="line">        System.out.println(<span class="string">"拼接后的字符串："</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">arrayToString</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(<span class="string">"["</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i&lt;nums.length-<span class="number">1</span>) &#123;</span><br><span class="line">                sb.append(nums[i] + <span class="string">","</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(<span class="string">"]"</span>);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>使用<code>next()</code>读取输入时遇到空格时自动截断字符串，看不到后面输入内容，<code>nextLine()</code>则不然。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test03</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String[] ss = &#123;<span class="string">"笨蛋"</span>,<span class="string">"尼玛"</span>,<span class="string">"傻瓜"</span>&#125;;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入一个字符串："</span>);</span><br><span class="line">        <span class="comment">//String str = sc.next();</span></span><br><span class="line">        String str = sc.nextLine();</span><br><span class="line">        String strFilter = filter(str,ss);</span><br><span class="line">        System.out.println(<span class="string">"过滤后的字符串为："</span> + strFilter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">filter</span><span class="params">(String str , String[] strings)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strings.length; i++) &#123;</span><br><span class="line">            str = str.replace(strings[i],<span class="string">"**"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="next-和nextLine-区别小结"><a href="#next-和nextLine-区别小结" class="headerlink" title="next()和nextLine()区别小结"></a>next()和nextLine()区别小结</h3><p><code>next()</code>是一定要读取到有效的字符后才可以结束输入，对输入有效字符之前遇到的<code>空格键</code>、<code>Tab键</code>或<code>Enter键</code>等结束符，<code>next()</code>方法会自动将其去掉，只有在输入有效字符之后，<code>next()</code>方法才将其后输入的<code>空格键</code>、<code>Tab键</code>或<code>Enter键</code>等视为<code>分隔符或结束符</code>。所以，<code>next()</code>不能读取含有空格的字符串。<br><code>nextLine()</code>返回的<code>Enter键</code>之前的<code>所有</code>字符，它是可以得到带空格的字符串的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、String类&quot;&gt;&lt;a href=&quot;#一、String类&quot; class=&quot;headerlink&quot; title=&quot;一、String类&quot;&gt;&lt;/a&gt;一、String类&lt;/h2&gt;&lt;h3 id=&quot;1-1-String概述&quot;&gt;&lt;a href=&quot;#1-1-String概述&quot; class=&quot;headerlink&quot; title=&quot;1.1 String概述&quot;&gt;&lt;/a&gt;1.1 String概述&lt;/h3&gt;&lt;p&gt;&lt;code&gt;String&lt;/code&gt;类代表字符串。  Java程序中的所有字符串文字（例如&lt;code&gt;&amp;quot;abc&amp;quot;&lt;/code&gt; ）都被实现为此类的实例。&lt;/p&gt;
&lt;p&gt;字符串是由一串数据组成，本质就是一个字符数组&lt;/p&gt;
&lt;p&gt;【扩展】: 在&lt;code&gt;JDk 8&lt;/code&gt;以及之前的版本，字符串本质是一个&lt;code&gt;char&lt;/code&gt;数组。在&lt;code&gt;JDk 9&lt;/code&gt;以及之后的版本，字符串本质是一个&lt;code&gt;byte&lt;/code&gt;数组。&lt;/p&gt;
&lt;p&gt;字符串不变; 它们的值在创建后不能被更改。 字符串缓冲区支持可变字符串。  因为String对象是不可变的，它们可以被共享。&lt;/p&gt;
&lt;p&gt;String所在的包在&lt;code&gt;java,lang&lt;/code&gt;包，&lt;code&gt;java.lang&lt;/code&gt;包下的东西都是非常常用的，所以Java中有一个优化。&lt;code&gt;java.lang&lt;/code&gt;包下的东西在使用时不需要导包。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://sunmoon.com/categories/Java/"/>
    
    
      <category term="基础" scheme="http://sunmoon.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="学习" scheme="http://sunmoon.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="问题" scheme="http://sunmoon.com/tags/%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>类与对象、封装、构造方法</title>
    <link href="http://sunmoon.com/2020/07/19/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E3%80%81%E5%B0%81%E8%A3%85%E3%80%81%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/"/>
    <id>http://sunmoon.com/2020/07/19/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E3%80%81%E5%B0%81%E8%A3%85%E3%80%81%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/</id>
    <published>2020-07-19T08:42:23.000Z</published>
    <updated>2020-07-23T09:31:16.662Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、面向对象思想"><a href="#一、面向对象思想" class="headerlink" title="一、面向对象思想"></a>一、面向对象思想</h2><h3 id="1-1面向对象思想概述"><a href="#1-1面向对象思想概述" class="headerlink" title="1.1面向对象思想概述"></a>1.1面向对象思想概述</h3><p>面向过程思想：强调过程（步骤）</p><ul><li>注重的是过程,必须清楚每一个步骤,按照步骤一步一步去实现</li></ul><p>面向对象思想：强调对象</p><ul><li>注重的是对象,无须清楚每一个步骤,只需要使用对象调用行为来完成需求</li></ul><a id="more"></a><h3 id="1-2类和对象以及它们的关系"><a href="#1-2类和对象以及它们的关系" class="headerlink" title="1.2类和对象以及它们的关系"></a>1.2类和对象以及它们的关系</h3><p>【想要有对象，必须先有类】</p><p>类：一群具有相同属性和行为的事物的统称</p><ul><li>例如：人类、动物</li></ul><p>对象：类中某一个具体的存在（实例）</p><p>类和对象的关系：类是对象的模板，对象是类的实体。</p><ul><li>对象是以模板创建出来的实体，是具体的。</li></ul><p>通俗的就是以类作为模板创建创建对象。</p><h2 id="二、类与对象的使用"><a href="#二、类与对象的使用" class="headerlink" title="二、类与对象的使用"></a>二、类与对象的使用</h2><h3 id="2-1-定义类"><a href="#2-1-定义类" class="headerlink" title="2.1 定义类"></a>2.1 定义类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//格式：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line"><span class="comment">//属性（成员变量）</span></span><br><span class="line">    数据类型 变量名;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//行为（成员方法）</span></span><br><span class="line">    <span class="keyword">public</span> 返回值类型 方法名(形式参数)&#123;</span><br><span class="line">        方法体;</span><br><span class="line">        <span class="keyword">return</span> 返回数值;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line"><span class="comment">//成员变量</span></span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//成员方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"汪汪汪。。。"</span>)</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"狗吃骨头"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-对象的创建和使用"><a href="#2-2-对象的创建和使用" class="headerlink" title="2.2 对象的创建和使用"></a>2.2 对象的创建和使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">创建对象格式：</span><br><span class="line">类名 对象名 = <span class="keyword">new</span> 类名();</span><br><span class="line">使用对象：</span><br><span class="line">    对象名.成员变量名</span><br><span class="line">    对象名.成员方法名()</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDog</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">Dog dog = <span class="keyword">new</span> Dog();</span><br><span class="line">        dog.name = <span class="string">"小白"</span>;</span><br><span class="line">        dog.age = <span class="number">2</span>;</span><br><span class="line">        dog.bark();</span><br><span class="line">        dog.eat();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-成员变量的默认值【-】"><a href="#2-3-成员变量的默认值【-】" class="headerlink" title="2.3 成员变量的默认值【*】"></a>2.3 成员变量的默认值【*】</h3><p>成员变量是有默认值的，和数据类型有关。</p><ul><li><p>整数类型    默认值【0】</p></li><li><p>小数类型    默认值【0.0】</p></li><li><p>字符类型    默认值 【’ ‘】引号里面有个空格</p></li><li><p>布尔类型    默认值false</p></li><li><p>引用类型    默认值null</p></li></ul><h2 id="三、类与对象的内存图"><a href="#三、类与对象的内存图" class="headerlink" title="三、类与对象的内存图"></a>三、类与对象的内存图</h2><h3 id="3-1-Java内存的五大区"><a href="#3-1-Java内存的五大区" class="headerlink" title="3.1 Java内存的五大区"></a>3.1 Java内存的五大区</h3><table><thead><tr><th align="center">区域名称</th><th align="left">作用</th></tr></thead><tbody><tr><td align="center">栈区</td><td align="left">运行方法以及保存方法中定义的变量</td></tr><tr><td align="center">堆区</td><td align="left">保存new出来的东西(对象)</td></tr><tr><td align="center">方法区</td><td align="left">保存字节码文件</td></tr><tr><td align="center">本地方法区</td><td align="left">和操作系统相关的</td></tr><tr><td align="center">寄存器区</td><td align="left">和CPU相关的</td></tr></tbody></table><h3 id="3-2-一个对象内存图"><a href="#3-2-一个对象内存图" class="headerlink" title="3.2 一个对象内存图"></a>3.2 一个对象内存图</h3><p>略…</p><h3 id="3-3-两个对象内存图"><a href="#3-3-两个对象内存图" class="headerlink" title="3.3 两个对象内存图"></a>3.3 两个对象内存图</h3><p>略…</p><h3 id="3-4-多个对象名指向同一个对象的内存图"><a href="#3-4-多个对象名指向同一个对象的内存图" class="headerlink" title="3.4 多个对象名指向同一个对象的内存图"></a>3.4 多个对象名指向同一个对象的内存图</h3><p>略…</p><h2 id="四、成员变量和局部变量区别【-】"><a href="#四、成员变量和局部变量区别【-】" class="headerlink" title="四、成员变量和局部变量区别【*】"></a>四、成员变量和局部变量区别【*】</h2><h3 id="4-1-什么是成员变量和局部变量"><a href="#4-1-什么是成员变量和局部变量" class="headerlink" title="4.1 什么是成员变量和局部变量"></a>4.1 什么是成员变量和局部变量</h3><p>什么是成员变量：</p><ul><li>定义在【类中方法外】</li></ul><p>什么是局部变量：</p><ul><li>定义在【类中方法内】</li></ul><h3 id="5-2-成员变量和局部变量的五大区别"><a href="#5-2-成员变量和局部变量的五大区别" class="headerlink" title="5.2 成员变量和局部变量的五大区别"></a>5.2 成员变量和局部变量的五大区别</h3><ol><li>定义位置不同：<ul><li>成员变量：类中方法外</li><li>局部变量：类中方法内</li></ul></li><li>默认值不同：<ul><li>成员变量：有默认值</li><li>局部变量：没有默认值</li></ul></li><li>有效范围(作用域)不同<ul><li>成员变量：在整个类都是有效的</li><li>局部变量：只在当前方法中有效</li></ul></li><li>内存位置不同：<ul><li>成员变量：跟随对象保存在堆中</li><li>局部变量：跟随方法的运行保存在栈中的</li></ul></li><li>生命周期不同(从出生到销毁)：<ul><li>成员变量：跟随对象的创建而出现，跟随对象的销毁而销毁</li><li>局部变量：跟随方法的执行而出现，跟随方法执行完毕而销毁</li></ul></li></ol><h2 id="五、封装【-】"><a href="#五、封装【-】" class="headerlink" title="五、封装【*】"></a>五、封装【*】</h2><p>面向对象语言中三大特性：封装、继承、多态。</p><h3 id="5-1-对封装的理解"><a href="#5-1-对封装的理解" class="headerlink" title="5.1 对封装的理解"></a>5.1 对封装的理解</h3><p>封装思想的介绍：隐藏细节，提供对外界的访问方式。</p><h3 id="5-2-为什么要封装"><a href="#5-2-为什么要封装" class="headerlink" title="5.2 为什么要封装"></a>5.2 为什么要封装</h3><p>好处：<br>       1. 提高代码的安全性。<br>       2. 提高代码的复用性。</p><h3 id="5-3-封装的原则和步骤【-】"><a href="#5-3-封装的原则和步骤【-】" class="headerlink" title="5.3 封装的原则和步骤【*】"></a>5.3 封装的原则和步骤【*】</h3><p>原则：</p><p>​    a. 隐藏需要封装的数据</p><p>​    b. 对外暴漏可以访问的方式</p><p>步骤：</p><p>​    a. 使用private修饰要封装的数据</p><p>​    b. 对封装的数据提供getter/setter方法</p><h3 id="5-4-封装的操作"><a href="#5-4-封装的操作" class="headerlink" title="5.4 封装的操作"></a>5.4 封装的操作</h3><p>private关键字：称为私有关键字</p><ul><li>当前类中的成员变量/成员方法，如果被private关键字修饰了，那么该变量或者方法只能在当前类的内部使用。</li></ul><p>【注意】类中所有的成员变量，并提供相应的getter/setter方法，这就是一个JavaBean。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-5-this关键字"><a href="#5-5-this关键字" class="headerlink" title="5.5 this关键字"></a>5.5 this关键字</h3><ul><li><p>this的作用：</p></li><li><p>this的内存原理(this的本质)：</p><ul><li>this代表一个对象，当前对象。成员方法是由那个对象调用的，那么该方法中的this就代表哪个对象。</li></ul></li></ul><h3 id="5-6-封装总结"><a href="#5-6-封装总结" class="headerlink" title="5.6 封装总结"></a>5.6 封装总结</h3><ol><li>封装：是面向对象三大特征置以（封装、继承、多态）</li><li>封装原则：<ul><li>将成员变量隐藏——private关键字</li><li>对外提供getter\setter方法</li></ul></li><li>封装好处：<ul><li>提高代码的安全性</li><li>提高了代码的复用性</li></ul></li></ol><h2 id="六、构造方法"><a href="#六、构造方法" class="headerlink" title="六、构造方法"></a>六、构造方法</h2><h3 id="6-1-构造方法介绍"><a href="#6-1-构造方法介绍" class="headerlink" title="6.1 构造方法介绍"></a>6.1 构造方法介绍</h3><h4 id="6-1-1-构造方法"><a href="#6-1-1-构造方法" class="headerlink" title="6.1.1 构造方法"></a>6.1.1 构造方法</h4><p>构造方法就是创建类的对象时调用的方法。</p><p>例如：创建对象猫时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cat cat = <span class="keyword">new</span> Cat();<span class="comment">//实际上Cat()就是在调用构造方法</span></span><br></pre></td></tr></table></figure><h4 id="6-1-2-构造方法格式："><a href="#6-1-2-构造方法格式：" class="headerlink" title="6.1.2 构造方法格式："></a>6.1.2 构造方法格式：</h4><ul><li>构造方法名必须和类名一模一样</li><li>构造方法是没有返回值的，连void也没有</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">//默认构造方法，不写时会自动分配一个</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"默认构造方法..."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-1-3-构造方法的功能"><a href="#6-1-3-构造方法的功能" class="headerlink" title="6.1.3 构造方法的功能"></a>6.1.3 构造方法的功能</h4><p>给生成的对象成员变量赋默认值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"默认构造方法..."</span>);</span><br><span class="line">    <span class="comment">//例如做了如下操作：</span></span><br><span class="line">    <span class="comment">//this.name = null;</span></span><br><span class="line">    <span class="comment">//this.age = 0;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-注意事项"><a href="#6-2-注意事项" class="headerlink" title="6.2 注意事项"></a>6.2 注意事项</h3><p>构造方法中的四点注意事项：</p><ol><li>如果一个类我们没有写构造方法，那么系统会自动生成一个无参构造，构造中会给成员变量赋默认值。</li><li>构造方法也是方法，所以可以重载，但是如果我们重载了任意一个构造，那么系统将不会再分配无参构造。</li><li>无论我们如何使用构造，无参构造建议直接写出来</li><li>无参构造和有参构造区别在于：无参构造给成员变量赋默认值，有参构造给成员变量赋指定值。</li></ol><h3 id="6-3-标准类定义"><a href="#6-3-标准类定义" class="headerlink" title="6.3 标准类定义"></a>6.3 标准类定义</h3><p>标准类JavaBean：</p><ul><li>所有成员变量都需要封装（private + get/set）</li><li>应该给标准类提供至少两个构造：无参构造+全参构造</li></ul><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> score;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 无参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 全参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age, <span class="keyword">double</span> score)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// get/set方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getScore</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScore</span><span class="params">(<span class="keyword">double</span> score)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="一-面向对象"><a href="#一-面向对象" class="headerlink" title="一.面向对象"></a>一.面向对象</h3><p>面向对象是一种编程思想，该编程思想是从面向过程演化过来的。<br>面向过程：在完成功能的时候，我们需要关注里面的每一个细节，里面每一个步骤都是由我们自己亲力亲为去实现的。<br>面向对象：在完成功能的时候，我们只关注结果，里面的步骤是别人帮我们完成。</p><p>面向对象好处：<br>     1. 可以将复杂的事情简单化<br>     2. 更加符合人类思考的习惯。<br>     3. 从执行者变成指挥者。</p><p>类和对象：<br>    类：用来描述现实事物，是抽象的。比如学生，人。<br>    对象：是类的具体体现，是具体的。比如小明同学，小强同学。</p><h3 id="二-类的定义和使用"><a href="#二-类的定义和使用" class="headerlink" title="二. 类的定义和使用"></a>二. 类的定义和使用</h3><p>定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名 </span>&#123;</span><br><span class="line"><span class="comment">//成员变量</span></span><br><span class="line"><span class="comment">//成员方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用格式：</p><ol><li><p>导包【省略】<br>  如果两个类在同一个包下，不需要导包的</p></li><li><p>创建对象<br>  数据类型 对象名 = new 数据类型(…);</p></li><li><p>使用成员</p><p>  对象名.属性名<br>对象名.方法名(..);</p></li></ol><h3 id="三-局部变量和成员变量的区别"><a href="#三-局部变量和成员变量的区别" class="headerlink" title="三. 局部变量和成员变量的区别"></a>三. 局部变量和成员变量的区别</h3><p>定义位置不同：<br>        局部变量：在方法中定义。<br>        成员变量：在类中方法外定义。</p><p>使用范围不同：<br>    局部变量：只能在自己的作用域【里自己最近的一个大括号】内使用。<br>    成员变量：可以在整个类中使用</p><p>内存位置不同：<br>    局部变量： 跟随方法在栈内存中开辟<br>    成员变量： 跟随对象保存在堆内存中。</p><p>初始值不同：<br>    局部变量： 没有默认值，使用之前必须要赋值<br>    成员变量： 有默认值。 整数是0，小数是0.0，字符是’ ‘，布尔是false，引用类型是null</p><p>生命周期不同：<br>    局部变量： 在方法执行到定义变量这行代码的时候产生，一旦离开自己的作用域，局部变量就会消失<br>    成员变量： 跟随对象的产生而产生，随着对象的消失而消失。</p><h3 id="四-封装"><a href="#四-封装" class="headerlink" title="四. 封装"></a>四. 封装</h3><p>概念：隐藏具体的实现，提供对外的访问方式。<br>在代码中的体现：将属性私有，提供get和set方法。</p><h3 id="五-private"><a href="#五-private" class="headerlink" title="五. private"></a>五. private</h3><p>private是一个权限修饰符，表示私有。<br>private可以修饰成员变量和成员方法。<br>private修饰成员只能在本类中使用。</p><p><strong>注意：如果将属性私有，我们还要提供get和set方法让外界使用属性。</strong></p><h3 id="六-this关键字"><a href="#六-this关键字" class="headerlink" title="六. this关键字"></a>六. this关键字</h3><p>​    this可以解决的问题：可以区分同名的成员变量和局部变量。<br>​    this含义：表示调用者对象，this所在的方法是通过哪个对象调用的，this表示的就是哪个对象。</p><h3 id="七-构造方法"><a href="#七-构造方法" class="headerlink" title="七. 构造方法"></a>七. 构造方法</h3><p>作用：一般会使用构造方法在创建对象时给属性赋值。<br>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> 构造方法名(参数列表) &#123;</span><br><span class="line">    构造方法体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>如果在一个类中我们没有提供构造方法，那么系统会自动给我们提供一个空参数的构造方法。</li><li>如果在一个类中我们提供了构造方法，那么系统就不会给我们提供这个空参数的构造方法。</li><li>构造方法支持重载。</li></ol><h3 id="八-JavaBean制作【最终目标】"><a href="#八-JavaBean制作【最终目标】" class="headerlink" title="八. JavaBean制作【最终目标】"></a>八. JavaBean制作【最终目标】</h3><p>JavaBean就是定义类的规范</p><ol><li>将属性私有</li><li>提供get和set方法</li><li>提供空参数【必需提供】的构造方法和有参数【选择性提供】的构造方法</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、面向对象思想&quot;&gt;&lt;a href=&quot;#一、面向对象思想&quot; class=&quot;headerlink&quot; title=&quot;一、面向对象思想&quot;&gt;&lt;/a&gt;一、面向对象思想&lt;/h2&gt;&lt;h3 id=&quot;1-1面向对象思想概述&quot;&gt;&lt;a href=&quot;#1-1面向对象思想概述&quot; class=&quot;headerlink&quot; title=&quot;1.1面向对象思想概述&quot;&gt;&lt;/a&gt;1.1面向对象思想概述&lt;/h3&gt;&lt;p&gt;面向过程思想：强调过程（步骤）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注重的是过程,必须清楚每一个步骤,按照步骤一步一步去实现&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;面向对象思想：强调对象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注重的是对象,无须清楚每一个步骤,只需要使用对象调用行为来完成需求&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://sunmoon.com/categories/Java/"/>
    
    
      <category term="基础" scheme="http://sunmoon.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="学习" scheme="http://sunmoon.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="面向对象" scheme="http://sunmoon.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Java基础知识</title>
    <link href="http://sunmoon.com/2020/06/21/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://sunmoon.com/2020/06/21/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2020-06-21T13:10:04.000Z</published>
    <updated>2020-06-21T13:17:16.028Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="Java" scheme="http://sunmoon.com/categories/Java/"/>
    
    
      <category term="基础" scheme="http://sunmoon.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="学习" scheme="http://sunmoon.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://sunmoon.com/2020/06/20/hello-world/"/>
    <id>http://sunmoon.com/2020/06/20/hello-world/</id>
    <published>2020-06-20T12:33:42.734Z</published>
    <updated>2020-06-21T13:17:17.707Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
